[{"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\App.js":"1","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\choose\\Choose.jsx":"2","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectTime\\EzyVetSelectTime.jsx":"3","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectLocation\\VerifyOrganizationInformation.jsx":"4","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\praviders\\Praviders.jsx":"5","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\workPlace\\WorkPlace.jsx":"6","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorAddPet\\DoctorAddPet.jsx":"7","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\scanCodeLogin\\ScanCodeLogin.jsx":"8","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\resetPassword\\ResetPassword.jsx":"9","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx":"10","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\vetProfile\\VetPrifile.jsx":"11","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyOrganization\\FindMyOrganization.jsx":"12","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\verifyEmail\\index.jsx":"13","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\inviteTeam\\InviteTeam.jsx":"14","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\editParent\\EditParent.jsx":"15","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\admin_VetProfile\\Veterinarians.jsx":"16","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\unassigned\\Unassigned.jsx":"17","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchEszVet.js":"18","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js":"19","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\index.jsx":"20","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil4.js":"21","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js":"22","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js":"23","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx":"24","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\current.js":"25","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js":"26","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js":"27","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil.js":"28","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js":"29","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx":"30","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\PetsUI.jsx":"31","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx":"32","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx":"33","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js":"34","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js":"35","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx":"36","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx":"37","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js":"38","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx":"39","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx":"40","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx":"41","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\index.js":"42","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetLogin\\EzyVetLogin.jsx":"43","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectScheduledExam.jsx":"44","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectExam\\SelectExam.jsx":"45","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\editPetInfo\\EditPetInfo.jsx":"46","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\SignIn.jsx":"47","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\forgotPassword\\ForgotPassword.jsx":"48","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyWorkplace\\FindMyWorkplace.jsx":"49","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\help\\Help.jsx":"50","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\invite\\Invite.jsx":"51","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\ConnectWorkplace.jsx":"52","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\InviteTeam.jsx":"53","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\px.js":"54","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js":"55","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js":"56","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\AddDevice.jsx":"57","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx":"58","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil3.js":"59","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"60","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx":"61","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js":"62","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardAndPetsUI.jsx":"63","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil5.js":"64","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js":"65","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectExam\\EzyVetSelectExam.js":"66","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectMella\\SelectMella.jsx":"67","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectAllExam.jsx":"68","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\joinOrganizationByOption\\JoinOrganizationByOption.jsx":"69","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\advancedSettings\\AdvancedSettings.jsx":"70","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\addDevice\\AddDevice.jsx":"71","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\gender.js":"72","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js":"73","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx":"74","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js":"75","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js":"76","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\hardWareTypeUI.jsx":"77","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx":"78","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js":"79","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js":"80","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx":"81","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js":"82","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js":"83","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\linkEquipment.jsx":"84","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"85","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx":"86","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js":"87","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js":"88","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newOrganization\\NewOrganization.jsx":"89","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil2.js":"90","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js":"91","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js":"92","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx":"93","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx":"94","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardListModal.jsx":"95","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\Biggie.jsx":"96","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\apiKey\\APIKey.jsx":"97","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\settings\\Settings.jsx":"98","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\NewOrganization.jsx":"99","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.js":"100","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"101","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js":"102","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\NorMalMeasurement.jsx":"103","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\AddYuding.jsx":"104","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newWorkplace\\NewWorkplace.jsx":"105","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\petAndParents\\PetAndParents.jsx":"106","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx":"107","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js":"108","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\Fetch_token.js":"109","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\home\\Home.jsx":"110","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\ishavePMS\\IsHavePMS.jsx":"111"},{"size":7424,"mtime":1655467295798,"results":"112","hashOfConfig":"113"},{"size":3737,"mtime":1655168677392,"results":"114","hashOfConfig":"113"},{"size":5178,"mtime":1655168677434,"results":"115","hashOfConfig":"113"},{"size":10192,"mtime":1655168677490,"results":"116","hashOfConfig":"113"},{"size":6450,"mtime":1655168677482,"results":"117","hashOfConfig":"113"},{"size":9743,"mtime":1655168677505,"results":"118","hashOfConfig":"113"},{"size":39743,"mtime":1655168677418,"results":"119","hashOfConfig":"113"},{"size":6007,"mtime":1655168677501,"results":"120","hashOfConfig":"113"},{"size":7651,"mtime":1655168677499,"results":"121","hashOfConfig":"113"},{"size":2615,"mtime":1655168677801,"results":"122","hashOfConfig":"113"},{"size":17372,"mtime":1655168677415,"results":"123","hashOfConfig":"113"},{"size":3459,"mtime":1655168677395,"results":"124","hashOfConfig":"113"},{"size":4706,"mtime":1655168677413,"results":"125","hashOfConfig":"113"},{"size":13197,"mtime":1655168677400,"results":"126","hashOfConfig":"113"},{"size":11451,"mtime":1655168677459,"results":"127","hashOfConfig":"113"},{"size":15939,"mtime":1655168677454,"results":"128","hashOfConfig":"113"},{"size":39382,"mtime":1656498255353,"results":"129","hashOfConfig":"113"},{"size":3579,"mtime":1655168677525,"results":"130","hashOfConfig":"113"},{"size":1275,"mtime":1655168677817,"results":"131","hashOfConfig":"113"},{"size":35121,"mtime":1657265168834,"results":"132","hashOfConfig":"113"},{"size":3126,"mtime":1655168677530,"results":"133","hashOfConfig":"113"},{"size":2445,"mtime":1655168677803,"results":"134","hashOfConfig":"113"},{"size":249,"mtime":1655467295885,"results":"135","hashOfConfig":"113"},{"size":1410,"mtime":1655168677807,"results":"136","hashOfConfig":"113"},{"size":1150,"mtime":1655427981745,"results":"137","hashOfConfig":"113"},{"size":697,"mtime":1655467295909,"results":"138","hashOfConfig":"113"},{"size":4641,"mtime":1656498255379,"results":"139","hashOfConfig":"113"},{"size":3403,"mtime":1655168677526,"results":"140","hashOfConfig":"113"},{"size":11452,"mtime":1655168677771,"results":"141","hashOfConfig":"113"},{"size":4779,"mtime":1657272990931,"results":"142","hashOfConfig":"113"},{"size":7727,"mtime":1656498255338,"results":"143","hashOfConfig":"113"},{"size":56819,"mtime":1657266687368,"results":"144","hashOfConfig":"113"},{"size":2998,"mtime":1655168677390,"results":"145","hashOfConfig":"113"},{"size":2103,"mtime":1656498255375,"results":"146","hashOfConfig":"113"},{"size":532,"mtime":1655467295881,"results":"147","hashOfConfig":"113"},{"size":1562,"mtime":1657271071421,"results":"148","hashOfConfig":"113"},{"size":15336,"mtime":1656643617950,"results":"149","hashOfConfig":"113"},{"size":58,"mtime":1655467295877,"results":"150","hashOfConfig":"113"},{"size":1365,"mtime":1655880805276,"results":"151","hashOfConfig":"113"},{"size":8196,"mtime":1655168677810,"results":"152","hashOfConfig":"113"},{"size":1232,"mtime":1656553852551,"results":"153","hashOfConfig":"113"},{"size":356,"mtime":1655467295857,"results":"154","hashOfConfig":"113"},{"size":7357,"mtime":1655168677429,"results":"155","hashOfConfig":"113"},{"size":39476,"mtime":1655467295805,"results":"156","hashOfConfig":"113"},{"size":12757,"mtime":1655168677486,"results":"157","hashOfConfig":"113"},{"size":41509,"mtime":1655723373489,"results":"158","hashOfConfig":"113"},{"size":18524,"mtime":1657269098742,"results":"159","hashOfConfig":"113"},{"size":12531,"mtime":1655168677496,"results":"160","hashOfConfig":"113"},{"size":6453,"mtime":1657269085098,"results":"161","hashOfConfig":"113"},{"size":4924,"mtime":1655168677462,"results":"162","hashOfConfig":"113"},{"size":6972,"mtime":1655168677464,"results":"163","hashOfConfig":"113"},{"size":10219,"mtime":1655168677467,"results":"164","hashOfConfig":"113"},{"size":13496,"mtime":1655168677468,"results":"165","hashOfConfig":"113"},{"size":3002,"mtime":1657249070520,"results":"166","hashOfConfig":"113"},{"size":1451,"mtime":1655168677805,"results":"167","hashOfConfig":"113"},{"size":18925,"mtime":1655168677533,"results":"168","hashOfConfig":"113"},{"size":14696,"mtime":1656047826772,"results":"169","hashOfConfig":"113"},{"size":8490,"mtime":1656067629344,"results":"170","hashOfConfig":"113"},{"size":2624,"mtime":1655168677529,"results":"171","hashOfConfig":"113"},{"size":3504,"mtime":1656655892202,"results":"172","hashOfConfig":"113"},{"size":12104,"mtime":1655467295852,"results":"173","hashOfConfig":"113"},{"size":4449,"mtime":1655168677816,"results":"174","hashOfConfig":"113"},{"size":3566,"mtime":1656065358361,"results":"175","hashOfConfig":"113"},{"size":3658,"mtime":1655168677531,"results":"176","hashOfConfig":"113"},{"size":846,"mtime":1655168677772,"results":"177","hashOfConfig":"113"},{"size":52228,"mtime":1655168677431,"results":"178","hashOfConfig":"113"},{"size":3973,"mtime":1655168677493,"results":"179","hashOfConfig":"113"},{"size":38409,"mtime":1655793172098,"results":"180","hashOfConfig":"113"},{"size":17954,"mtime":1657269212745,"results":"181","hashOfConfig":"113"},{"size":9784,"mtime":1656498255345,"results":"182","hashOfConfig":"113"},{"size":13651,"mtime":1655168677451,"results":"183","hashOfConfig":"113"},{"size":152,"mtime":1655168677794,"results":"184","hashOfConfig":"113"},{"size":3460,"mtime":1655168677527,"results":"185","hashOfConfig":"113"},{"size":3371,"mtime":1655168677813,"results":"186","hashOfConfig":"113"},{"size":431,"mtime":1655168677773,"results":"187","hashOfConfig":"113"},{"size":358,"mtime":1655467295910,"results":"188","hashOfConfig":"113"},{"size":5382,"mtime":1657265484940,"results":"189","hashOfConfig":"113"},{"size":7652,"mtime":1655467295863,"results":"190","hashOfConfig":"113"},{"size":71,"mtime":1655257026122,"results":"191","hashOfConfig":"113"},{"size":89,"mtime":1655467295873,"results":"192","hashOfConfig":"113"},{"size":12463,"mtime":1657272421270,"results":"193","hashOfConfig":"113"},{"size":293,"mtime":1655467295883,"results":"194","hashOfConfig":"113"},{"size":3044,"mtime":1655168677819,"results":"195","hashOfConfig":"113"},{"size":1232,"mtime":1656554148266,"results":"196","hashOfConfig":"113"},{"size":11233,"mtime":1656646462350,"results":"197","hashOfConfig":"113"},{"size":6252,"mtime":1657261530964,"results":"198","hashOfConfig":"113"},{"size":49512,"mtime":1657266166952,"results":"199","hashOfConfig":"113"},{"size":80,"mtime":1656660545004,"results":"200","hashOfConfig":"113"},{"size":16452,"mtime":1655168677407,"results":"201","hashOfConfig":"113"},{"size":2667,"mtime":1655168677528,"results":"202","hashOfConfig":"113"},{"size":343,"mtime":1655168677793,"results":"203","hashOfConfig":"113"},{"size":91,"mtime":1655467295880,"results":"204","hashOfConfig":"113"},{"size":13008,"mtime":1655467295861,"results":"205","hashOfConfig":"113"},{"size":1243,"mtime":1656554314183,"results":"206","hashOfConfig":"113"},{"size":8152,"mtime":1656067360425,"results":"207","hashOfConfig":"113"},{"size":4595,"mtime":1655727114179,"results":"208","hashOfConfig":"113"},{"size":8762,"mtime":1655168677387,"results":"209","hashOfConfig":"113"},{"size":26779,"mtime":1656498255349,"results":"210","hashOfConfig":"113"},{"size":16247,"mtime":1655168677470,"results":"211","hashOfConfig":"113"},{"size":8796,"mtime":1655467295870,"results":"212","hashOfConfig":"113"},{"size":1909,"mtime":1657250282335,"results":"213","hashOfConfig":"113"},{"size":224,"mtime":1655467295875,"results":"214","hashOfConfig":"113"},{"size":141874,"mtime":1655377730766,"results":"215","hashOfConfig":"113"},{"size":12945,"mtime":1655467295802,"results":"216","hashOfConfig":"113"},{"size":13023,"mtime":1655168677410,"results":"217","hashOfConfig":"113"},{"size":12616,"mtime":1655168677474,"results":"218","hashOfConfig":"113"},{"size":12130,"mtime":1657272348967,"results":"219","hashOfConfig":"113"},{"size":3856,"mtime":1656498255377,"results":"220","hashOfConfig":"113"},{"size":3717,"mtime":1655168677531,"results":"221","hashOfConfig":"113"},{"size":5831,"mtime":1655806803656,"results":"222","hashOfConfig":"113"},{"size":1678,"mtime":1655168677403,"results":"223","hashOfConfig":"113"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"227"},"1wlgw0n",{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"230"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"227"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"242"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"227"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"227"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"242"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"254"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"227"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"254"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"270"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"230"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"227"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"254"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"227"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"242"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"227"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"227"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"311"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"270"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"230"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"330"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"254"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"230"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"227"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"242"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"242"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"227"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"254"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"227"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"254"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"227"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"230"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"380","messages":"381","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"242"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"330"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"227"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"254"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"230"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"227"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"254"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"227"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"227"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"230"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"227"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"227"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"227"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"227"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"227"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"242"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"227"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"227"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"227"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"230"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"227"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"254"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"254"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"242"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"481","messages":"482","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"230"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"486","messages":"487","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"254"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"227"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"227"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"499","messages":"500","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"227"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"227"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"511","messages":"512","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\App.js",["515","516"],"import React, { Component } from 'react'\r\n\r\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\r\n\r\nimport Home from './components/home/Home'\r\nimport Choose from './components/choose/Choose'\r\nimport EzyVetLogin from './components/ezyVetLogin/EzyVetLogin'\r\nimport EzyVetSelectTime from './components/ezyVetSelectTime/EzyVetSelectTime'\r\nimport SelectMella from './components/selectMella/SelectMella'\r\nimport APIkey from './components/apiKey/APIKey'\r\nimport VerifyOrganizationInformation from './components/selectLocation/VerifyOrganizationInformation'\r\nimport EzyVetSelectExam from './components/ezyVetSelectExam/EzyVetSelectExam'\r\nimport DoctorSelectExam from './components/doctorSelectExam/DoctorSelectScheduledExam'\r\n\r\nimport DoctorSelectAllExam from './components/doctorSelectExam/DoctorSelectAllExam'\r\nimport Praviders from './components/praviders/Praviders'\r\nimport SelectExam from \"./components/selectExam/SelectExam\";\r\n\r\nimport Mesasure from \"./components/measure/Mesasure\";\r\nimport NorMalMeasurement from \"./components/measure/NorMalMeasurement\";\r\n\r\nimport MaxMinReturn from './utils/maxminreturn/MaxMinReturn'\r\nimport EditPetInfo from './components/editPetInfo/EditPetInfo'\r\nimport WorkPlace from './components/workPlace/WorkPlace'\r\n\r\nimport DoctorAddPet from './components/doctorAddPet/DoctorAddPet'\r\nimport AddYuding from './components/doctorSelectExam/AddYuding'\r\n//登录部分\r\nimport SignIn from './components/signIn/SignIn'\r\nimport ForgotPassword from './components/signIn/forgotPassword/ForgotPassword'\r\nimport ResetPassword from './components/signIn/resetPassword/ResetPassword'\r\n\r\nimport ScanCodeLogin from './components/signIn/scanCodeLogin/ScanCodeLogin'\r\n\r\n//邮箱注册的整体部分\r\nimport VetPrifile from './components/createAccount/vetProfile/VetPrifile'\r\nimport JoinOrganizationByOption from './components/createAccount/joinOrganizationByOption/JoinOrganizationByOption'\r\nimport FindMyOrganization from './components/createAccount/findMyOrganization/FindMyOrganization'\r\nimport FindMyWorkplace from './components/createAccount/findMyWorkplace/FindMyWorkplace'\r\nimport IsHavePMS from './components/createAccount/ishavePMS/IsHavePMS'\r\nimport VerifyEmail from './components/createAccount/verifyEmail/index'\r\nimport NewOrganization from './components/createAccount/newOrganization/NewOrganization'\r\nimport NewWorkplace from './components/createAccount/newWorkplace/NewWorkplace'\r\n\r\nimport InviteTeam from './components/createAccount/inviteTeam/InviteTeam'\r\n\r\n//options\r\nimport Help from './components/menuOptions/help/Help'\r\nimport Unassigned from './components/menuOptions/unassigned/Unassigned'\r\nimport Settings from './components/menuOptions/settings/Settings'\r\nimport AdvancedSettings from './components/menuOptions/advancedSettings/AdvancedSettings'\r\nimport Invite from './components/menuOptions/invite/Invite'\r\nimport PetAndParents from './components/menuOptions/petAndParents/PetAndParents'\r\nimport EditParent from './components/menuOptions/editParent/EditParent'\r\n// import AdminAddPet from './components/menuOptions/adminAddPet/AdminAddPet'\r\nimport Veterinarians from './components/menuOptions/admin_VetProfile/Veterinarians'\r\nimport AddDevice from './components/menuOptions/addDevice/AddDevice'\r\nimport ConnectWorkplace from './components/menuOptions/orgAndPractice/ConnectWorkplace'\r\nimport NewOrg from './components/menuOptions/orgAndPractice/NewOrganization'\r\nimport Team from './components/menuOptions/orgAndPractice/InviteTeam'\r\n\r\nimport MainBody from './components/mainbody'\r\n\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/page1\" component={Choose} />\r\n          <Route exact path=\"/ezyVetLogin\" component={EzyVetLogin} />\r\n          <Route exact path=\"/EzyVetSelectTime\" component={EzyVetSelectTime} />\r\n          <Route exact path=\"/EzyVetSelectExam\" component={EzyVetSelectExam} />\r\n          <Route exact path=\"/page2\" component={APIkey} />\r\n          <Route exact path=\"/page3\" component={VerifyOrganizationInformation} />\r\n          <Route exact path=\"/page4\" component={SelectMella} />\r\n\r\n\r\n          <Route exact path=\"/VetSpireSelectExam\" component={SelectExam} />\r\n          <Route exact path=\"/page7\" component={MaxMinReturn} />\r\n\r\n          <Route exact path=\"/page8\" component={Mesasure} />\r\n          <Route exact path=\"/page9\" component={EditPetInfo} />\r\n          <Route exact path=\"/page10\" component={NorMalMeasurement} />\r\n          {/* <Route exact path=\"/page10\" component={MainBody} /> */}\r\n          <Route exact path=\"/MainBody\" component={MainBody} />\r\n\r\n\r\n\r\n          <Route exact path=\"/page12\" component={WorkPlace} />\r\n          <Route exact path=\"/AddYuding\" component={AddYuding} />\r\n\r\n\r\n          <Route exact path=\"/page11\" component={SignIn} />\r\n          <Route exact path=\"/user/login/forgotPassword\" component={ForgotPassword} />\r\n          <Route exact path=\"/user/login/resetPassword\" component={ResetPassword} />\r\n          <Route exact path=\"/user/login/scanCodeLogin\" component={ScanCodeLogin} />\r\n\r\n          <Route exact path=\"/uesr/logUp/FindMyOrganization\" component={FindMyOrganization} />\r\n          <Route exact path=\"/uesr/logUp/FindMyWorkplace\" component={FindMyWorkplace} />\r\n          <Route exact path=\"/uesr/logUp/VetPrifile\" component={VetPrifile} />\r\n          <Route exact path=\"/uesr/logUp/JoinOrganizationByOption\" component={JoinOrganizationByOption} />\r\n          <Route exact path=\"/uesr/logUp/isHavePMS\" component={IsHavePMS} />\r\n          <Route exact path=\"/uesr/logUp/VerifyEmail\" component={VerifyEmail} />\r\n          <Route exact path=\"/uesr/logUp/NewOrganization\" component={NewOrganization} />\r\n          <Route exact path=\"/uesr/logUp/NewWorkplace\" component={NewWorkplace} />\r\n          <Route exact path=\"/uesr/logUp/InviteTeam\" component={InviteTeam} />\r\n\r\n\r\n\r\n\r\n\r\n          <Route exact path=\"/uesr/selectExam\" component={DoctorSelectExam} />\r\n          <Route exact path=\"/uesr/DoctorSelectAllExam\" component={DoctorSelectAllExam} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <Route exact path=\"/pet/doctorAddPet\" component={DoctorAddPet} />\r\n\r\n          {/* options */}\r\n          <Route exact path=\"/menuOptions/help\" component={Help} />\r\n          <Route exact path=\"/menuOptions/unassigned\" component={Unassigned} />\r\n          <Route exact path=\"/menuOptions/settings\" component={Settings} />\r\n          <Route exact path=\"/menuOptions/advancedsettings\" component={AdvancedSettings} />\r\n          <Route exact path=\"/menuOptions/invite\" component={Invite} />\r\n          <Route exact path=\"/menuOptions/petAndParents\" component={PetAndParents} />\r\n          <Route exact path=\"/menuOptions/editParent\" component={EditParent} />\r\n          {/* <Route exact path=\"/menuOptions/adminAddPet\" component={AdminAddPet} /> */}\r\n          <Route exact path=\"/menuOptions/veterinarians\" component={Veterinarians} />\r\n          <Route exact path=\"/menuOptions/AddDevice\" component={AddDevice} />\r\n          <Route exact path=\"/menuOptions/ConnectWorkplace\" component={ConnectWorkplace} />\r\n          <Route exact path=\"/menuOptions/NewOrg\" component={NewOrg} />\r\n          <Route exact path=\"/menuOptions/Team\" component={Team} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </Switch>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\nexport default App",["517","518"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\choose\\Choose.jsx",[],["519","520"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectTime\\EzyVetSelectTime.jsx",["521","522","523","524"],"import React, { Component, } from 'react'\r\nimport {\r\n\r\n  Select,\r\n  DatePicker, Space,\r\n  message,\r\n  Button,\r\n  Input\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\nimport moment from 'moment';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\nimport './ezyVetSelectTime.less'\r\nimport { FetchEszVet } from './../../utils/FetchEszVet'\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst { RangePicker } = DatePicker;\r\n\r\nexport default class EzyVetSelectTime extends Component {\r\n\r\n  state = {\r\n    startTime: moment(moment().format(\"YYYY-MM-DD\")),\r\n    endTime: moment(),\r\n    patientId: ''\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    console.log(storage.selectTime);\r\n    if (storage.selectTime && `${storage.selectTime}` !== `undefined` && storage.selectTime !== '') {\r\n      try {\r\n        this.setState({\r\n          startTime: moment(JSON.parse(storage.selectTime).startTime),\r\n          endTime: moment(JSON.parse(storage.selectTime).endTime)\r\n        })\r\n      } catch (error) {\r\n        console.log('时间转换错误', error);\r\n      }\r\n\r\n    }\r\n    console.log('============', storage.selectPatientId);\r\n    if (storage.selectPatientId && `${storage.selectPatientId}` !== `undefined` && storage.selectPatientId !== '') {\r\n      try {\r\n        this.setState({\r\n          patientId: storage.selectPatientId\r\n\r\n        })\r\n      } catch (error) {\r\n        console.log('时间转换错误', error);\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  _next = () => {\r\n    let { startTime, endTime } = this.state\r\n    if (startTime === null || endTime === null) {\r\n      message.error('Please select a date range')\r\n      return\r\n    }\r\n    let saveSart = startTime.format('YYYY-MM-DD HH:mm:ss'), saveEnd = endTime.format('YYYY-MM-DD HH:mm:ss');\r\n    console.log('开始时间', startTime.format('YYYY-MM-DD HH:mm:ss'), '---------------结束时间', endTime.format('YYYY-MM-DD HH:mm:ss'));\r\n    let chazhi = new Date().getTimezoneOffset()\r\n    chazhi = chazhi + 360\r\n    console.log('差值', chazhi);\r\n    let start = startTime.add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n    let end = endTime.add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n    console.log(start, end);\r\n    let unix = `{\">\": ${moment(start).format('X')}, \"<\": ${moment(end).format('X')}}`\r\n    let uri = encodeURIComponent(unix)\r\n    console.log('-----------', unix, uri);\r\n    storage.unixToURI = uri\r\n    let selectTime = {\r\n      startTime: saveSart,\r\n      endTime: saveEnd,\r\n    }\r\n    console.log('最终的选择时间：', selectTime);\r\n    storage.selectTime = JSON.stringify(selectTime)\r\n    storage.selectPatientId = this.state.patientId\r\n    console.log(storage.selectTime, JSON.parse(storage.selectTime), storage.selectPatientId);\r\n    this.props.history.push('EzyVetSelectExam')\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"ezyVetSelectTime\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push('/ezyVetLogin')}\r\n        />\r\n        <div className=\"text\">\r\n          Please select the scope of <br /> search for medical records\r\n        </div>\r\n\r\n        <div className=\"patirntID\">\r\n          <p style={{ width: '80px' }}>Patient ID:</p>\r\n          <Input\r\n            style={{ outline: 'medium' }}\r\n            value={this.state.patientId}\r\n            // bordered={false}\r\n            onChange={(item) => {\r\n              console.log(item);\r\n              this.setState({\r\n                patientId: item.target.value\r\n              })\r\n            }}\r\n\r\n          />\r\n\r\n        </div>\r\n\r\n        <div className=\"time\">\r\n          <Space direction=\"vertical\" size={12}>\r\n            <RangePicker\r\n              value={[this.state.startTime, this.state.endTime]}\r\n              showTime\r\n              ranges={{\r\n                Today: [moment(moment().format(\"YYYY-MM-DD\")), moment(moment().endOf('day'))],\r\n              }}\r\n              onChange={(dates, dateStrings) => {\r\n                // console.log('From: ', dates[0], ', to: ', dates[1]);\r\n                // console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\r\n                console.log('我是第一个', dates, dateStrings);\r\n                // this.setState({\r\n                //   startTime: dateStrings[0],\r\n                //   endTime: dateStrings[1]\r\n                // })\r\n              }}\r\n              onCalendarChange={(dates, dateStrings) => {\r\n                console.log('我是第二个', dates, dateStrings);\r\n                this.setState({\r\n                  startTime: moment(dateStrings[0]),\r\n                  endTime: moment(dateStrings[1])\r\n                })\r\n              }}\r\n            />\r\n          </Space>\r\n        </div>\r\n\r\n        <div className=\"btn\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._next}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectLocation\\VerifyOrganizationInformation.jsx",["525","526","527","528","529","530","531"],"import React, { Component, } from 'react'\r\nimport {\r\n    Table,\r\n    Select,\r\n    Button,\r\n    message\r\n\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './VerifyOrganizationInformation.less'\r\nimport { fetchRequest1 } from '../../utils/FetchUtil'\r\nimport { mTop, px } from '../../utils/px';\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nexport default class Location extends Component {\r\n    state = {\r\n        loading: false,\r\n        api: '',\r\n        id: '',  //location ID\r\n        locations: [],\r\n        locationData: [],\r\n        selectLocationId: '',\r\n        selectLocationName: '',\r\n        vetData: [],\r\n        selectvetId: '',\r\n        selectvetName: ''\r\n\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n            api: storage.API,\r\n            id: storage.id,\r\n        })\r\n        let params = {\r\n            APIkey: storage.API\r\n        }\r\n        console.log('发送的数据：', params);\r\n        this.setState({ loading: true });\r\n        fetchRequest1('/VetSpire/selectLocations', 'POST', params)\r\n            .then(res => {\r\n                console.log('接收到的数据', res, res.data.Locations);\r\n                let locations = res.data.Locations\r\n\r\n                let datas = []\r\n                for (let i = 0; i < locations.length; i++) {\r\n                    const { address, displayName, name, phoneNumber, id } = locations[i]\r\n                    let data = {\r\n                        locationId: id,\r\n                        locationName: name,\r\n                        // display: displayName,\r\n                        // address,\r\n                        // phoneNumber\r\n                    }\r\n                    datas.push(data)\r\n                }\r\n                console.log(datas);\r\n                this.setState({\r\n                    loading: false,\r\n                    locationData: datas\r\n                });\r\n\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log('错误', err);\r\n                this.setState({ loading: false });\r\n\r\n            })\r\n\r\n        if (storage.locationKey !== undefined) {\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: storage.locationKey\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n    }\r\n    _selectLocation = () => {\r\n        let locationDefaultValue = storage.locationDefaultValue\r\n        let options = this.state.locationData.map(d => <Option key={d.locationId}>{d.locationName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.locationDefaultValue = data.children\r\n            storage.locationKey = value\r\n            storage.vetDefaultValue = undefined\r\n            storage.vetKey = undefined\r\n            this.setState({})\r\n            this.setState({\r\n                selectLocationId: value,\r\n                selectLocationName: data.children\r\n            })\r\n\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: value\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n        return (\r\n            <div className=\"select\">\r\n                <p>Select Location:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    defaultValue={locationDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _selectVet = () => {\r\n        let vetDefaultValue = storage.vetDefaultValue\r\n        let options = this.state.vetData.map(d => <Option key={d.vetId}>{d.VetName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.vetDefaultValue = data.children\r\n            storage.vetKey = value\r\n            this.setState({\r\n                selectvetId: value,\r\n                selectvetName: data.children\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"select\" style={{ marginTop: mTop(70) }}>\r\n                <p>Select Vet:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    // size = {'small'}     \r\n                    defaultValue={vetDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _btn = () => {\r\n\r\n        return (\r\n            <div className=\"btn\"\r\n                style={{ marginTop: px(200) }}\r\n            >\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={() => { this.props.history.push('/page2') }}>\r\n                        Try Again\r\n                    </Button>\r\n                </div>\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={this._verify}>\r\n                        Verify\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    _verify = () => {\r\n        let { selectvetId, selectvetName, selectLocationName, selectLocationId } = this.state\r\n\r\n        if ((selectLocationName != '' && selectvetName === '') || (storage.vetDefaultValue != '' && storage.locationDefaultValue != '')) {\r\n            // let arr = [{selectLocationId:'765',selectvetId:''}]\r\n            storage.selectvetId = selectvetId\r\n            storage.selectLocationId = selectLocationId\r\n            this.props.history.push('/page4')\r\n\r\n        } else {\r\n            message.error('Please select Verify Organization Information')\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"location223\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page2')}\r\n                />\r\n\r\n                <div className=\"title\">Verify Organization Information</div>\r\n                <div className=\"goodpets\" style={{\r\n                    marginBottom: mTop(80)\r\n                }}>Good Pets</div>\r\n\r\n                {this._selectLocation()}\r\n\r\n                {this._selectVet()}\r\n\r\n\r\n                {this._btn()}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\praviders\\Praviders.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\workPlace\\WorkPlace.jsx",["532","533","534","535","536","537","538","539","540"],"\r\nimport React, { Component, } from 'react'\r\nimport {\r\n  Select,\r\n  Button,\r\n  Modal,\r\n  message,\r\n  Spin\r\n\r\n\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './workplace.less'\r\nimport { mTop, pX, px, win } from '../../utils/px';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport logo from '../../assets/images/mellaLogo.png'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nexport default class WorkPlace extends Component {\r\n  state = {\r\n    organization: '',\r\n    workplaceList: [],\r\n\r\n\r\n    spin: false,\r\n    orgArr: [],\r\n    workplaceJson: {},\r\n    workplaceId: '',\r\n    workplaceName: '',\r\n    organizationId: '',\r\n    organizationName: '',\r\n    connectionKey: '',\r\n    selectRoleId: ''\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n\r\n    let userWorkplace = []\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || []\r\n      console.log(userWorkplace);\r\n    } catch (error) {\r\n      console.log('字符串转对象失败', error);\r\n    }\r\n    /*orgArr的格式为[{\r\n      organizationId:1,\r\n      organizationName:'11111',\r\n      connectionKey:''\r\n    }]\r\n    \r\n     workplace:{\r\n       1:{\r\n          workplaceId:1,\r\n          workplaceName:'122334\r\n        },\r\n     }\r\n    */\r\n    let orgArr = [], workplaceJson = {}\r\n    console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i]\r\n      // console.log('每一项的值：', element);\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element\r\n        const { name, organizationId, connectionKey } = organizationEntity\r\n        const { workplaceName, workplaceId } = workplaceEntity\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          this.setState({\r\n            workplaceName,\r\n            workplaceId: storage.lastWorkplaceId\r\n          })\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n          this.setState({\r\n            organizationName: name,\r\n            organizationId: storage.lastOrganization\r\n          })\r\n        }\r\n\r\n        let orgRepeatFlog = false, repeatFlogNum = -1\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          console.log(orgArr[j].organizationId, organizationId);\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true\r\n            repeatFlogNum = j\r\n            break;\r\n          }\r\n\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName, workplaceId\r\n          }\r\n          let id = orgArr[repeatFlogNum].organizationId\r\n          let sameflog = false\r\n          console.log(workplaceJson[`${id}`], workplace);\r\n          for (let k = 0; k < workplaceJson[`${id}`].length; k++) {\r\n            const element = workplaceJson[`${id}`][k];\r\n            if (element.workplaceId === workplace.workplaceId && element.workplaceName === workplace.workplaceName) {\r\n              sameflog = true\r\n              break\r\n            }\r\n\r\n          }\r\n          if (!sameflog) {\r\n            workplaceJson[`${id}`].push(workplace)\r\n          }\r\n\r\n        } else {\r\n          let connectKey = connectionKey || ''\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId\r\n          }\r\n          let workplace = [{\r\n            workplaceName, workplaceId\r\n          }]\r\n          workplaceJson[`${organizationId}`] = workplace\r\n\r\n          orgArr.push(json)\r\n        }\r\n      }\r\n    }\r\n    console.log('-----转换后的组织信息--', orgArr, workplaceJson);\r\n    this.setState({\r\n      orgArr,\r\n      workplaceJson,\r\n      connectionKey: storage.connectionKey,\r\n      selectRoleId: storage.roleId\r\n    })\r\n    //分辨率改变后窗口自动改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _select = (value, e) => {\r\n    console.log(value, e);  //value的值为id\r\n\r\n  }\r\n\r\n  _next = () => {\r\n    // this.props.history.push('/page8')\r\n\r\n    let { workplaceId, organizationId, connectionKey, selectRoleId } = this.state\r\n    console.log({ workplaceId, organizationId, connectionKey, selectRoleId });\r\n\r\n    // this.setState({\r\n    //   spin: true\r\n    // })\r\n    // fetchRequest(`/organization/updateLastWorkplace/${storage.userId}/${workplaceId}`)\r\n    //   .then(res => {\r\n    //     console.log(res);\r\n    //     this.setState({\r\n    //       spin: false\r\n    //     })\r\n    //     if (res.msg === 'success') {\r\n    //       storage.lastWorkplaceId = workplaceId\r\n    //       this.props.history.goBack()\r\n    //     }\r\n    //   })\r\n    //   .catch(err => {\r\n    //     this.setState({\r\n    //       spin: false\r\n    //     })\r\n    //     console.log(err);\r\n    //   })\r\n\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('入参', { userId: storage.userId, roleId: storage.roleId, workplaceId });\r\n    fetchRequest4(`/user/changeLatestWorkplace/${storage.userId}/${2}/${workplaceId}`, \"GET\")\r\n      .then(res => {\r\n        console.log('切换成功', res);\r\n        storage.lastWorkplaceId = `${workplaceId}`\r\n        storage.lastOrganization = organizationId\r\n        storage.connectionKey = connectionKey\r\n\r\n        if (selectRoleId) {\r\n          storage.roleId = selectRoleId\r\n        }\r\n\r\n        this.props.history.push('/uesr/selectExam')\r\n\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        storage.lastWorkplaceId = workplaceId\r\n        storage.lastOrganization = organizationId\r\n        storage.connectionKey = connectionKey\r\n\r\n        this.props.history.push('/uesr/selectExam')\r\n\r\n      })\r\n  }\r\n  render () {\r\n\r\n    let { orgArr, organizationName, workplaceName, workplaceJson, organizationId } = this.state\r\n    let orgOptions = orgArr.map(item => <Option key={item.organizationId} connectionkey={item.connectionKey} roleid={item.roleId} >{item.organizationName}</Option>)\r\n    let workplaceArr = []\r\n    if (workplaceJson[`${organizationId}`]) {\r\n      workplaceArr = workplaceJson[`${organizationId}`]\r\n      console.log('workArr = ', workplaceArr);\r\n    }\r\n    let workplaceOptions = workplaceArr.map(item => <Option key={item.workplaceId}>{item.workplaceName}</Option>)\r\n    return (\r\n      <div id=\"workplace\">\r\n        {/* 关闭缩小 */}\r\n        <div className=\"header\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n        </div>\r\n        <div className=\"body flex\">\r\n          <div className=\"img flex\">\r\n            <img src={logo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n\r\n          <div className=\"title\">\r\n            <div className=\"text\" style={{ fontSize: px(28), marginBottom: px(40) }}>Verify Organization Information</div>\r\n            <div className=\"text2\" style={{ fontSize: px(24), textAlign: 'center' }}>Good Pets</div>\r\n          </div>\r\n\r\n\r\n          <div className=\"selectAll\" style={{ marginBottom: px(160) }}>\r\n\r\n            <div className=\"select\" >\r\n              <p style={{ fontSize: px(18) }}>Select Organization:</p>\r\n              <Select style={{ width: '40%' }}\r\n                value={organizationName}\r\n                onChange={(val, e) => {\r\n                  console.log(val, e)\r\n                  let workplace = workplaceJson[e.key]\r\n                  console.log(workplace);\r\n                  this.setState({\r\n                    organizationId: e.key,\r\n                    organizationName: e.children,\r\n                    connectionKey: e.connectionkey,\r\n                    workplaceId: workplace[0].workplaceId,\r\n                    workplaceName: workplace[0].workplaceName,\r\n                    selectRoleId: e.roleid\r\n                  })\r\n                }}>\r\n                {/* <Option value=\"1\">UGA Veterinary Teaching Hospital</Option> */}\r\n                {orgOptions}\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"select\" >\r\n              <p style={{ fontSize: px(18) }}>Select Location:</p>\r\n              <Select style={{ width: '40%' }}\r\n                value={workplaceName}\r\n                onChange={(val, e) => {\r\n                  console.log(val, e)\r\n                  this.setState({\r\n                    workplaceId: e.key,\r\n                    workplaceName: e.children\r\n                  })\r\n                }}>\r\n                {workplaceOptions}\r\n              </Select>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"foot flex\">\r\n          <div className=\"btn\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              onClick={this._next}\r\n            >\r\n              Verify\r\n            </Button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n",["541","542"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorAddPet\\DoctorAddPet.jsx",["543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"import React, { Component } from 'react'\r\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin } from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport dog from './../../assets/images/pinkdog.png'\r\nimport cat from './../../assets/images/pinkcat.png'\r\nimport redDog from './../../assets/images/reddog.png'\r\nimport redCat from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\nimport other from './../../assets/images/other.png'\r\nimport electronStore from '../../utils/electronStore';\r\nimport Close from './../../assets/img/close.png'\r\nimport nextImg from './../../assets/img/nextImg.png'\r\n\r\n\r\n// import selectphoto from './../../assets/images/img.png'\r\nimport selectphoto from './../../assets/images/sel.png'\r\nimport dui from './../../assets/images/dui.png'\r\nimport female from './../../assets/images/female.png'\r\nimport male from './../../assets/images/male.png'\r\nimport './doctorAddPet.less'\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport Avatar from './../avatar/Avatar'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport Heard from '../../utils/heard/Heard';\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\nimport Button from './../../utils/button/Button'\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nlet url = 'https://www.mellaserver.com/api/mellaserver'\r\n// let url = 'http://192.168.0.36:8080/mellaserver'\r\nexport default class DoctorAddPet extends Component {\r\n    state = {\r\n        dogImg: dog,\r\n        catImg: cat,\r\n        otherImg: other,\r\n        selectWZ: '',\r\n        closebgc: '',\r\n        minbgc: '',\r\n        closeColor: '',\r\n        api: '',\r\n        id: '',\r\n        seleceID: '',//医生id\r\n        petSpecies: 0,\r\n        unit: 1,\r\n        gender: 0,\r\n        isMix: false,\r\n        imageId: -1,\r\n        imgurl: '',\r\n        catData: [],\r\n        petSpeciesBreedId: '',\r\n        dogData: [],\r\n        breedArr: [],\r\n        birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n        patientId: '',\r\n        petName: '',\r\n\r\n        petId: '',\r\n        lastName: '',\r\n        firstName: '',\r\n        breedName: '',\r\n        owner: '',\r\n        intFlog: false,\r\n        spin: false,\r\n        visible: false,\r\n\r\n        imgurl: '',\r\n        dogBreed: [],\r\n        catBreed: [],\r\n        searchBreed: '',\r\n        selectBreedJson: {},\r\n        confirmSelectBreedJson: {},\r\n        selectBreed: false\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big', win())\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n        let dogBreed = electronStore.get('dogBreed') || []\r\n        let catBreed = electronStore.get('catBreed') || []\r\n        this.setState({\r\n            dogBreed,\r\n            catBreed\r\n        })\r\n        this.getBreed('cat')\r\n        this.getBreed('dog')\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big', win())\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n    getBreed = (val) => {\r\n        let data = {}\r\n        switch (val) {\r\n            case 'dog':\r\n                data.speciesId = 2; break;\r\n\r\n            case 'cat':\r\n                data.speciesId = 1; break;\r\n        }\r\n\r\n        fetchRequest(`/pet/selectBreedBySpeciesId`, 'POST', data)\r\n            .then(res => {\r\n                console.log('---', res);\r\n                if (res.code === 0) {\r\n                    let arr = []\r\n                    res.petlist.map((item, index) => {\r\n                        let data = {\r\n                            petSpeciesBreedId: item.petSpeciesBreedId,\r\n                            breedName: item.breedName\r\n                        }\r\n                        arr.push(data)\r\n                    })\r\n                    if (val === 'dog') {\r\n                        this.setState({\r\n                            dogBreed: arr\r\n                        })\r\n                        electronStore.set('dogBreed', arr)\r\n                    } else if (val === 'cat') {\r\n                        this.setState({\r\n                            catBreed: arr\r\n                        })\r\n                        electronStore.set('catBreed', arr)\r\n                    }\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    _getData = (val) => {\r\n        this.setState({\r\n            petSpecies: val,\r\n            breedName: ''\r\n        })\r\n        let data = {\r\n            speciesId: val\r\n        }\r\n        fetchRequest(`/pet/selectBreedBySpeciesId`, 'POST', data)\r\n            .then(res => {\r\n                console.log('--获取品种返回的数据-', res);\r\n                if (res.code === 0) {\r\n                    let arr = []\r\n                    res.petlist.map((item, index) => {\r\n                        let data = {\r\n                            petSpeciesBreedId: item.petSpeciesBreedId,\r\n                            breedName: item.breedName\r\n                        }\r\n                        arr.push(data)\r\n                    })\r\n                    console.log(arr);\r\n                    this.setState({\r\n                        breedArr: arr\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n\r\n    }\r\n\r\n\r\n    /**------------------顶部start------------------------ */\r\n    _close = () => {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        console.log('关闭程序');\r\n        ipcRenderer.send('window-close')\r\n    }\r\n    _min = () => {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        console.log('最小化程序');\r\n        ipcRenderer.send('window-min')\r\n        this.setState({\r\n            minbgc: '',\r\n        })\r\n    }\r\n    _minMove = () => {\r\n\r\n        this.setState({\r\n            minbgc: 'rgb(211, 205, 205)'\r\n        })\r\n    }\r\n    _minLeave = () => {\r\n        this.setState({\r\n            minbgc: ''\r\n        })\r\n    }\r\n    _closeMove = () => {\r\n        this.setState({\r\n            closeColor: 'red',\r\n            closebgc: '#fff'\r\n        })\r\n    }\r\n    _closeLeave = () => {\r\n        this.setState({\r\n            closeColor: '#fff',\r\n            closebgc: ''\r\n        })\r\n    }\r\n    handleClick = e => {\r\n        console.log('click ', e);\r\n        const { api, id, seleceID } = this.state\r\n        if (e.key === '1') {\r\n            this.props.history.push({ pathname: '/page6', query: { api, id, seleceID } })\r\n        }\r\n        if (e.key === '2') {\r\n            this.props.history.push('/')\r\n        }\r\n\r\n    };\r\n    /**------------------顶部end------------------------ */\r\n    selectWZ = (val) => {\r\n        let { catBreed, dogBreed } = this.state\r\n        switch (val) {\r\n            case 'dog':\r\n                this.setState({\r\n                    catImg: cat,\r\n                    dogImg: redDog,\r\n                    otherImg: other,\r\n                    selectWZ: val,\r\n                    breedArr: [].concat(dogBreed)\r\n                })\r\n\r\n                break;\r\n\r\n            case 'cat':\r\n                this.setState({\r\n                    catImg: redCat,\r\n                    dogImg: dog,\r\n                    otherImg: other,\r\n                    selectWZ: val,\r\n                    breedArr: [].concat(catBreed)\r\n                })\r\n\r\n                break;\r\n\r\n            case 'other':\r\n                this.setState({\r\n                    catImg: cat,\r\n                    dogImg: dog,\r\n                    otherImg: redother,\r\n                    selectWZ: val,\r\n                    breedArr: []\r\n                })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    _petSpecies = () => {\r\n        let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n\r\n        this.avatar = selectphoto\r\n        return (\r\n            <div className=\"petSpecies\"\r\n                style={{ height: mTop(80), }}\r\n            >\r\n                <div className=\"l\">\r\n                    <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n                    <div className=\"selectSpecies\">\r\n                        <ul>\r\n                            <li >\r\n                                <div className='speciesChild' >\r\n                                    <div className='dog'\r\n                                        onClick={() => { this.selectWZ('dog') }}>\r\n                                        <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                                    </div>\r\n                                    Dog\r\n                                </div>\r\n                            </li>\r\n                            <li>\r\n                                <div className='speciesChild' >\r\n                                    <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                                        <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                                    </div>\r\n                                    Cat\r\n                                </div>\r\n                            </li>\r\n                            <li >\r\n                                <div className='speciesChild' >\r\n                                    <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                                        <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                                    </div>\r\n                                    Other\r\n                                </div>\r\n                            </li>\r\n\r\n                        </ul>\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n                <div className=\"r\">\r\n\r\n                    <div className=\"img\">\r\n                        <Avatar\r\n                            init={\r\n                                <div className=\"ciral \">\r\n                                    <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                                    <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                                </div>\r\n                            }\r\n                            getinfo={(val) => {\r\n                                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                                if (val) {\r\n                                    this.setState({\r\n                                        imageId: val\r\n                                    })\r\n                                }\r\n\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n    _petName = () => {\r\n\r\n        const onPanelChange = (value, mode) => {\r\n            console.log('-----', value, mode);\r\n        }\r\n        let birthday = this.state.birthday\r\n        let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n        return (\r\n            <div className=\"petName\"\r\n                style={{ marginTop: mTop(18) }}\r\n            >\r\n                <div className=\"r\">\r\n\r\n                    <p >Pet Name</p>\r\n                    <div className=\"infoInput\">\r\n                        <Input\r\n                            bordered={false}\r\n                            value={this.state.petName}\r\n                            onChange={(item) => {\r\n\r\n                                this.setState({\r\n                                    petName: item.target.value\r\n                                })\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"r\">\r\n                    <p >Pet Birthday</p>\r\n                    <div className=\"infoInput\" >\r\n                        <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n                            document.getElementById('calendar').style.display = 'block'\r\n                        }}>{this.state.birthday}</p>\r\n                        <div className=\"calendar\" id=\"calendar\" style={{ left: px(-50), top: px(-50) }}>\r\n                            <Calendar\r\n                                fullscreen={false}\r\n                                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n\r\n                                    const start = 0;\r\n                                    const end = 12;\r\n                                    const monthOptions = [];\r\n\r\n                                    const current = value.clone();\r\n                                    const localeData = value.localeData();\r\n                                    const months = [];\r\n                                    for (let i = 0; i < 12; i++) {\r\n                                        current.month(i);\r\n                                        months.push(localeData.monthsShort(current));\r\n                                    }\r\n\r\n                                    for (let index = start; index < end; index++) {\r\n                                        monthOptions.push(\r\n                                            <Select.Option className=\"month-item\" key={`${index}`}>\r\n                                                {months[index]}\r\n                                            </Select.Option>\r\n                                        );\r\n                                    }\r\n                                    const month = value.month();\r\n\r\n                                    const year = value.year();\r\n                                    const options = [];\r\n\r\n                                    for (let i = moment(new Date()).year(); i > moment(new Date()).year() - 40; i -= 1) {\r\n                                        options.push(\r\n                                            <Select.Option key={i} value={i} className=\"year-item\">\r\n                                                {i}\r\n                                            </Select.Option>\r\n                                        );\r\n                                    }\r\n                                    return (\r\n                                        <div style={{ padding: 8 }}>\r\n                                            <Row gutter={8}>\r\n                                                <Col>\r\n                                                    <Select\r\n                                                        size=\"small\"\r\n                                                        dropdownMatchSelectWidth={false}\r\n                                                        className=\"my-year-select\"\r\n                                                        onChange={(newYear) => {\r\n                                                            const now = value.clone().year(newYear);\r\n                                                            onChange(now);\r\n                                                        }}\r\n                                                        value={String(year)}\r\n                                                    >\r\n                                                        {options}\r\n                                                    </Select>\r\n                                                </Col>\r\n                                                <Col>\r\n                                                    <Select\r\n                                                        size=\"small\"\r\n                                                        dropdownMatchSelectWidth={false}\r\n                                                        value={String(month)}\r\n                                                        onChange={(selectedMonth) => {\r\n                                                            const newValue = value.clone();\r\n                                                            newValue.month(parseInt(selectedMonth, 10));\r\n                                                            onChange(newValue);\r\n                                                        }}\r\n                                                    >\r\n                                                        {monthOptions}\r\n                                                    </Select>\r\n                                                </Col>\r\n                                                {/* <Col>\r\n                                                    <div className=\"btn\" onClick={() => {\r\n                                                        document.getElementById('calendar').style.display = 'none'\r\n                                                    }}>\r\n                                                        Choose this date\r\n                                                    </div>\r\n\r\n                                                </Col> */}\r\n                                            </Row>\r\n                                        </div>\r\n                                    );\r\n                                }}\r\n                                value={birthdayValue}\r\n                                onSelect={(value) => {\r\n                                    console.log(value);\r\n                                    this.setState({\r\n                                        birthday: moment(value).format('MMMM D, YYYY')\r\n\r\n                                    })\r\n                                    document.getElementById('calendar').style.display = 'none'\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n    _ownName = () => {\r\n\r\n        return (\r\n            <div className=\"petName\" style={{ marginTop: mTop(18) }}\r\n            >\r\n                <div className=\"l\">\r\n\r\n                    <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n                    <div className=\"infoInput\">\r\n                        <Input bordered={false}\r\n                            value={this.state.patientId}\r\n                            onChange={(item) => {\r\n\r\n                                this.setState({\r\n                                    patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                                    intFlog: true\r\n\r\n                                })\r\n                                if (item.target.value !== errPatientId) {\r\n                                    message.destroy()\r\n                                }\r\n                            }}\r\n                            onBlur={() => {\r\n                                console.log('我离开光标了');\r\n\r\n                                let params = {\r\n                                    patientId: this.state.patientId,\r\n                                    doctorId: storage.userId\r\n                                }\r\n                                if (storage.lastWorkplaceId) {\r\n                                    params.workplaceId = storage.lastWorkplaceId\r\n                                }\r\n                                message.destroy()\r\n                                fetchRequest(`/pet/checkPatientId`, \"GET\", params)\r\n                                    .then(res => {\r\n                                        console.log(res);\r\n                                        if (res.flag === false) {\r\n                                            errPatientId = params.patientId\r\n                                            message.destroy()\r\n                                            message.error('This patient ID is already occupied, please change to a new one', 0)\r\n                                        } else {\r\n                                            errPatientId = ''\r\n                                        }\r\n\r\n                                    })\r\n                                    .catch(err => {\r\n                                        console.log(err);\r\n\r\n                                    })\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"r\">\r\n                    <div className=\"infoInput flex\"\r\n                        style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n                        onClick={() => {\r\n                            // this.setState({\r\n                            //     selectBreed: true\r\n                            // })\r\n                        }}\r\n                    >\r\n\r\n                        <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{'My Parents'}</div>\r\n                        <div className=\"nextimg\" >\r\n                            <img src={nextImg} style={{ height: px(15) }} />\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n    _select = (value, data) => {\r\n        console.log(value, data);  //value的值为id\r\n        this.setState({\r\n            petSpeciesBreedId: value,\r\n            breedName: data.children\r\n        })\r\n    }\r\n    _primaryBreed = () => {\r\n        let options = null\r\n\r\n        options = this.state.breedArr.map(d => <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>);\r\n        let { breedName, confirmSelectBreedJson } = this.state\r\n\r\n\r\n        return (\r\n            <div className=\"petName\" style={{ marginTop: mTop(18) }}>\r\n                <div className=\"l\" >\r\n                    {/* <p >Primary Breed</p> */}\r\n                    <div className=\"infoInput flex\"\r\n                        style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n                        onClick={() => {\r\n                            this.setState({\r\n                                selectBreed: true\r\n                            })\r\n                        }}\r\n                    >\r\n                        {/* <Input bordered={false} disabled={false} /> */}\r\n\r\n                        {/* <Select\r\n                            showSearch\r\n                            style={{ width: '100%' }}\r\n                            bordered={false}\r\n                            value={breedName}\r\n                            // size = {'small'}        \r\n                            placeholder=\"Search to Select\"\r\n                            optionFilterProp=\"children\"\r\n                            listHeight={256}\r\n                            onSelect={(value, data) => this._select(value, data)}\r\n                            filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                            filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                        >\r\n                            {options}\r\n                        </Select> */}\r\n                        <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'}</div>\r\n                        <div className=\"nextimg\" >\r\n                            <img src={nextImg} style={{ height: px(15) }} />\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n                <div className=\"r\" style={{ paddingTop: mTop(40) }}>\r\n                    <div className=\"max\">\r\n                        Mix?\r\n                        <div className=\"selected\"\r\n                            onClick={() => this.setState({\r\n                                isMix: !this.state.isMix\r\n                            })}\r\n                        >\r\n                            {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    _weight = () => {\r\n        let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n        switch (this.state.unit) {\r\n            case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n            case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n        }\r\n\r\n        switch (this.state.gender) {\r\n            case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n            case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n        }\r\n\r\n        return (\r\n            <div className=\"petName\" style={{ marginTop: mTop(18) }}>\r\n                <div className=\"l\">\r\n                    <p >Pet Weight</p>\r\n                    <div className=\"infoInput\">\r\n                        <Input bordered={false}\r\n                            value={this.state.weight}\r\n                            onChange={(item) => {\r\n\r\n                                this.setState({\r\n                                    weight: item.target.value\r\n                                })\r\n                            }}\r\n\r\n                        />\r\n                        <div className=\"ibKg\">\r\n                            <div className=\"ibs\"\r\n                                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                                onClick={() => {\r\n                                    if (this.state.unit === 2) {\r\n\r\n                                        this.setState({\r\n                                            unit: 1,\r\n                                            weight: (this.state.weight * 2.2046).toFixed(1)\r\n                                        })\r\n                                    }\r\n                                }}\r\n                            >Ibs</div>\r\n                            <div className=\"kgs\"\r\n                                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                                onClick={() => {\r\n\r\n                                    if (this.state.unit === 1) {\r\n\r\n                                        this.setState({\r\n                                            unit: 1,\r\n                                            weight: (this.state.weight / 2.2046).toFixed(1)\r\n                                        })\r\n                                    }\r\n                                    this.setState({ unit: 2 })\r\n                                }}\r\n                            >kgs</div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"r\">\r\n                    <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n                    <div className=\"gender\">\r\n                        <div className=\"selectGender\">\r\n                            <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                                <div className=\"femaleCiral\"\r\n                                    style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                                    onClick={() => this.setState({ gender: 1 })}\r\n                                >\r\n                                    <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                                </div>\r\n                                Female\r\n                            </div>\r\n                            <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                                <div className=\"maleCiral\"\r\n                                    style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                                    onClick={() => this.setState({ gender: 0 })}\r\n                                >\r\n                                    <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                                </div>\r\n                                Male\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { closeColor, closebgc, minbgc, disabled, petSpeciesBreedId } = this.state\r\n\r\n        return (\r\n            <div id=\"doctorAddPet\">\r\n\r\n                <div className=\"heard\">\r\n                    <Heard\r\n                        onReturn={() => {\r\n                            // this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n                            this.props.history.goBack()\r\n\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n\r\n                <div className=\"editPetInfo_top\" >\r\n                    <div className=\"title\" style={{ marginBottom: px(20), marginTop: px(20) }}>{`New Pet`}</div>\r\n                    {this._petSpecies()}\r\n                    {this._petName()}\r\n                    {this._ownName()}\r\n                    {this._primaryBreed()}\r\n                    {this._weight()}\r\n                </div>\r\n                <div className=\"editPetInfo_foot\"  >\r\n                    <div className=\"save\"\r\n                        onClick={() => {\r\n                            message.destroy()\r\n\r\n                            if (!this.state.patientId) {\r\n                                message.error('Please enter patient ID', 0)\r\n                                return\r\n                            }\r\n\r\n                            let params = {\r\n                                patientId: this.state.patientId,\r\n                                doctorId: storage.userId\r\n                            }\r\n                            if (storage.lastWorkplaceId) {\r\n                                params.workplaceId = storage.lastWorkplaceId\r\n                            }\r\n                            if (storage.lastOrganization) {\r\n                                params.organizationId = storage.lastOrganization\r\n                            }\r\n\r\n                            this.setState({\r\n                                spin: true\r\n                            })\r\n                            console.log('-----------检测patient是否存在', params);\r\n\r\n                            fetchRequest(`/pet/checkPatientId`, \"GET\", params)\r\n                                .then(res => {\r\n                                    console.log(res);\r\n                                    if (res.flag === false) {\r\n                                        this.setState({\r\n                                            spin: false\r\n                                        }, () => {\r\n                                            errPatientId = params.patientId\r\n                                            message.destroy()\r\n                                            message.error('This patient ID is already occupied, please change to a new one', 0)\r\n\r\n                                        })\r\n                                    } else {\r\n\r\n                                        let { petSpecies, petName, birthday, petSpeciesBreedId, isMix, weight, gender, unit, imageId, confirmSelectBreedJson, owner, patientId } = this.state\r\n\r\n\r\n                                        let species = null\r\n                                        if (petSpeciesBreedId) {\r\n                                            species = petSpeciesBreedId\r\n                                        } else {\r\n                                            // 11001 是cat 12001是dog 13001是other\r\n                                            switch (petSpecies) {\r\n                                                case 1: species = 11001; break;\r\n                                                case 2: species = 12001; break;\r\n                                                default: species = 13001;\r\n                                                    break;\r\n                                            }\r\n                                        }\r\n\r\n\r\n\r\n\r\n\r\n                                        // console.log(petName, birthday, petSpeciesBreedId, isMix, weight, gender, petSpecies);\r\n                                        // let petSpeciesBreedId = 13001\r\n                                        let data = {\r\n                                            petName,\r\n                                            // breedName,\r\n                                            birthday: moment(birthday).format('YYYY-MM-DD'),\r\n                                            gender,\r\n                                            owner,\r\n                                            petSpeciesBreedId: species,\r\n                                            doctorId: storage.userId\r\n                                        }\r\n                                        if (weight) {\r\n                                            if (unit === 1) {\r\n                                                weight = (0.45359 * weight).toFixed(2)\r\n                                            }\r\n                                            data.weight = parseFloat(weight)\r\n                                        }\r\n                                        if (imageId !== -1 && imageId) {\r\n                                            data.imageId = imageId\r\n                                        }\r\n                                        if (storage.lastWorkplaceId) {\r\n                                            data.workplaceId = storage.lastWorkplaceId\r\n                                        }\r\n                                        if (storage.lastOrganization) {\r\n                                            data.organizationId = storage.lastOrganization\r\n                                        }\r\n                                        console.log(data);\r\n                                        fetchRequest(`/pet/addDeskPet/${patientId}`, 'POST', data)\r\n                                            .then(res => {\r\n                                                this.setState({\r\n                                                    spin: false\r\n                                                })\r\n                                                console.log(res);\r\n                                                if (res.flag === true) {\r\n                                                    message.success('Added successfully')\r\n                                                    this.props.history.goBack()\r\n                                                }\r\n                                                else {\r\n                                                    message.error('add failed')\r\n                                                }\r\n                                            })\r\n                                            .catch(err => {\r\n                                                this.setState({\r\n                                                    spin: false\r\n                                                })\r\n                                                message.error('add failed')\r\n                                                console.log(err);\r\n                                            })\r\n\r\n                                    }\r\n\r\n                                })\r\n\r\n                                .catch(err => {\r\n                                    this.setState({\r\n                                        spin: false\r\n                                    })\r\n                                    console.log(err);\r\n\r\n                                })\r\n\r\n                        }}\r\n\r\n                    >Save</div>\r\n\r\n                </div>\r\n                <MyModal\r\n                    visible={this.state.spin}\r\n                />\r\n\r\n                <MyModal\r\n                    // visible={true}\r\n                    visible={this.state.selectBreed}\r\n                    element={\r\n                        <div className='myfindOrg' >\r\n                            <div className=\"orgHeard\">\r\n                                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                                    <div>\r\n\r\n                                    </div>\r\n                                    <div\r\n                                        onClick={() => {\r\n                                            this.setState({\r\n                                                selectBreed: false,\r\n                                                selectBreedJson: {}\r\n                                            })\r\n                                        }}\r\n                                    >\r\n                                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"text\" >Choose Breed</div>\r\n\r\n                                <div className=\"searchBox\">\r\n\r\n                                    <Input\r\n                                        placeholder=\" &#xe61b; Search name\"\r\n                                        bordered={false}\r\n                                        allowClear={true}\r\n                                        value={this.state.searchBreed}\r\n                                        onChange={(item) => {\r\n\r\n                                            this.setState({\r\n                                                searchBreed: item.target.value\r\n                                            })\r\n                                        }}\r\n\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                            <div className=\"list\" >\r\n                                <PhoneBook\r\n                                    listDate={this.state.breedArr}\r\n                                    confirmSelectBreed={petSpeciesBreedId}\r\n                                    selectFun={(val) => {\r\n                                        // console.log('从子组件传来的数据', val);\r\n                                        this.setState({\r\n                                            selectBreedJson: val,\r\n                                            petSpeciesBreedId: val.petSpeciesBreedId\r\n                                        })\r\n\r\n\r\n                                    }}\r\n                                    searchText={this.state.searchBreed}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"foot\">\r\n                                <Button\r\n                                    text={'Select'}\r\n                                    onClick={() => {\r\n                                        this.setState({\r\n                                            confirmSelectBreedJson: this.state.selectBreedJson,\r\n                                            selectBreed: false\r\n                                        })\r\n                                    }}\r\n                                />\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                />\r\n\r\n\r\n            </div >\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\scanCodeLogin\\ScanCodeLogin.jsx",["568","569","570","571"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message\r\n\r\n} from 'antd';\r\n\r\nimport './scanCodeLogin.less'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { px } from './../../../utils/px'\r\n\r\nlet storage = window.localStorage;\r\nlet flog = false\r\nexport default class ScanCodeLogin extends Component {\r\n\r\n  state = {\r\n    name: '',\r\n    url: ''\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.timer = setInterval(() => {\r\n      this._getUser()\r\n    }, 1000);\r\n    console.log(this.props.history);\r\n    let { name, url } = this.props.history.location.params\r\n    this.setState({\r\n      name,\r\n      url\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n  }\r\n  _getUser = () => {\r\n    fetchRequest2(`/user/loginWithQRcode/${temporaryStorage.QRToken}`)\r\n      .then(res => {\r\n        console.log('-----：', res);\r\n        if (res.flag === true) {\r\n          switch (res.code) {\r\n            case 10001:\r\n              console.log('未扫码');\r\n              flog = false\r\n              this.props.history.goBack()\r\n\r\n              break;\r\n\r\n            case 11033:\r\n              console.log('扫码未点击登录');\r\n              flog = false\r\n              // let { name, url } = res.data\r\n              // if (name === this.state.name && url === this.state.url) {\r\n              //   return\r\n              // }\r\n              // this.setState({\r\n              //   name,\r\n              //   url\r\n              // })\r\n              break;\r\n\r\n            case 11023:\r\n              console.log('过期');\r\n              this.timer && clearInterval(this.timer)\r\n              if (!flog) {\r\n                this.props.history.replace('/page11')\r\n              }\r\n\r\n\r\n              break;\r\n            case 20000:\r\n              this.timer && clearInterval(this.timer)\r\n              console.log('--------------成功');\r\n              flog = true\r\n              let success = res.data\r\n              let { userWorkplace, lastOrganization } = success\r\n\r\n              storage.userId = success.userId\r\n              storage.roleId = success.roleId\r\n\r\n              //每次登陆后清空宠物列表缓存的数据\r\n              storage.doctorList = ''\r\n              storage.defaultCurrent = ''\r\n\r\n              if (success.lastWorkplaceId) {\r\n                storage.lastWorkplaceId = success.lastWorkplaceId\r\n              } else {\r\n                storage.lastWorkplaceId = ''\r\n              }\r\n\r\n              if (success.lastOrganization) {\r\n                storage.lastOrganization = success.lastOrganization\r\n              } else {\r\n                storage.lastOrganization = ''\r\n              }\r\n\r\n\r\n\r\n              if (userWorkplace) {\r\n                storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                let connectionKey = ''\r\n                for (let i = 0; i < userWorkplace.length; i++) {\r\n                  const element = userWorkplace[i];\r\n                  if (element.organizationEntity) {\r\n                    if (element.organizationEntity.organizationId === lastOrganization) {\r\n\r\n                      if (element.organizationEntity.connectionKey) {\r\n                        connectionKey = element.organizationEntity.connectionKey\r\n                      }\r\n                      if (element.roleId) {\r\n                        console.log(element.roleId);\r\n                        storage.roleId = element.roleId\r\n                      }\r\n\r\n                      break\r\n                    }\r\n                  }\r\n                }\r\n                storage.connectionKey = connectionKey\r\n\r\n              } else {\r\n                storage.userWorkplace = ''\r\n                storage.connectionKey = ''\r\n              }\r\n              this.props.history.push('/uesr/selectExam')\r\n\r\n\r\n\r\n\r\n\r\n\r\n              // storage.userId = res.data.userId\r\n              // storage.roleId = res.data.roleId\r\n              // if (res.data.lastWorkplaceId) {\r\n              //   storage.lastWorkplaceId = res.data.lastWorkplaceId\r\n              // } else {\r\n              //   storage.lastWorkplaceId = ''\r\n              // }\r\n              // if (res.data.lastOrganization) {\r\n              //   storage.lastOrganization = res.data.lastOrganization\r\n              // } else {\r\n              //   storage.lastOrganization = ''\r\n              // }\r\n              // this.props.history.push('/uesr/selectExam')\r\n\r\n\r\n              break;\r\n\r\n            default:\r\n\r\n              break;\r\n          }\r\n        }\r\n        console.log('code', res.code);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  _continue = () => {\r\n    this.props.history.replace('/page11')\r\n\r\n  }\r\n\r\n  render() {\r\n    let { url } = this.state\r\n    return (\r\n      <div id=\"scanCodeLogin\" className='pt-3'>\r\n\r\n\r\n        <div className=\"text  mb-3\"\r\n          style={{ fontSize: px(26), width: px(350), marginTop: px(20), marginBottom: px(40) }}\r\n        >\r\n          <h1>Need to confirm login on mobile phone</h1>\r\n        </div>\r\n\r\n        <div className=\"bodycenter\">\r\n          <div className=\"imgF \">\r\n            <img src={url} alt=\"\" style={{ width: px(150), hight: px(150) }} />\r\n          </div>\r\n          <p>{this.state.name}</p>\r\n          <div className=\"success\" style={{ marginTop: px(30) }}>Scan code completed</div>\r\n        </div>\r\n        <div className=\"button1\" style={{ height: px(150) }}>\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Cancel login\r\n          </Button>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\resetPassword\\ResetPassword.jsx",["572","573","574"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message\r\n\r\n} from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './resetPassword.less'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { px, mTop, pX, MTop } from '../../../utils/px';\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\n\r\nlet storage = window.localStorage;\r\nexport default class ResetPassword extends Component {\r\n\r\n  state = {\r\n    hash: '',\r\n    hash1: '',\r\n    spin: false\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    console.log('点击了发送按钮')\r\n    message.destroy()\r\n    let { hash, hash1 } = this.state\r\n    console.log(hash, hash1, hash !== hash1);\r\n    if (!hash && !hash1) {\r\n\r\n      message.error('Please enter a new password', 10)\r\n      return\r\n    }\r\n    if (hash !== hash1) {\r\n      message.error('The two passwords are inconsistent, please re-enter', 10)\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n\r\n    fetchRequest(`/user/resetPWD/${temporaryStorage.forgotUserId}/${hash}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('修改密码返回结果', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = {\r\n            email: temporaryStorage.forgotPassword_email,\r\n            hash: this.state.hash\r\n          }\r\n          console.log(data);\r\n          data = JSON.stringify(data)\r\n          storage.signIn = data\r\n          temporaryStorage.forgotPassword_email = ''\r\n          temporaryStorage.forgotUserId = ''\r\n          this.props.history.replace('/page11')\r\n          // this.props.history.push('/page11')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"resetPassword\">\r\n        {/* <div className=\"iconfont icon-left heard return\" onClick={() => { this.props.history.goBack() }} />\r\n        <div className=\"logo\">\r\n          <img src={mellaLogo} alt=\"\" />\r\n        </div>\r\n        <div className=\"text\">Reset Your<br />Password</div> */}\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\">\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n            < MinClose />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Reset Your<br />Password\r\n          </div>\r\n\r\n          <div className=\"inpF\">\r\n\r\n            <Input.Password className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              visibilityToggle={false}\r\n              value={this.state.hash}\r\n              placeholder='New Password'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  hash: str\r\n                })\r\n              }}\r\n            />\r\n            <Input.Password className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              visibilityToggle={false}\r\n              value={this.state.hash1}\r\n              placeholder='Re-Enter New Password'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  hash1: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Continue\r\n          </Button>\r\n        </div>\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n        {/* \r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"inpF\">\r\n          <Input.Password className='inp'\r\n            visibilityToggle={false}\r\n            style={{ border: 'none', outline: 'medium' }}\r\n            value={this.state.hash}\r\n            placeholder='New Password'\r\n            bordered={false}\r\n            onChange={(item) => {\r\n              let str = item.target.value\r\n              this.setState({\r\n                hash: str\r\n              })\r\n            }}\r\n          />\r\n          <Input.Password className='inp'\r\n            visibilityToggle={false}\r\n            style={{ border: 'none', outline: 'medium' }}\r\n            value={this.state.hash1}\r\n            placeholder='Re-Enter New Password'\r\n            bordered={false}\r\n            onChange={(item) => {\r\n              let str = item.target.value\r\n              this.setState({\r\n                hash1: str\r\n              })\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button1\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Continue\r\n          </Button>\r\n\r\n        </div> */}\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",[],["575","576"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\vetProfile\\VetPrifile.jsx",["577","578","579","580","581","582","583","584"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n\r\n  Modal,\r\n  message\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './vetProfile.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest2 } from './../../../utils/FetchUtil2'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport countryList from './../../../utils/areaCode/country';\r\nimport moment from 'moment';\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, pX, px } from '../../../utils/px';\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport { fetchRequest3 } from './../../../utils/FetchUtil3';\r\n\r\nconst options = [\r\n  { label: 'Dogs', value: 'Dogs' },\r\n  { label: 'Cats', value: 'Cats' },\r\n  { label: 'Small Pets', value: 'Small Pets' },\r\n  { label: 'Nutrition', value: 'Nutrition' },\r\n  { label: 'Surgery', value: 'Surgery' },\r\n  { label: 'Zoo', value: 'Zoo' },\r\n  { label: 'Wildlife', value: 'Wildlife' },\r\n  { label: 'Cardiology', value: 'Cardiology' },\r\n  { label: 'Neurology', value: 'Neurology' },\r\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\r\n  { label: 'Other', value: 'Other' },\r\n]\r\nexport default class VetPrifile extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    otherText: '',\r\n    name: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    birthday: moment(),\r\n    password: '',\r\n    password1: '',\r\n    checboxtValue: [],\r\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\r\n\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    loadVisible: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    //发送指令让main.js创建一个big窗口\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //检测是否本地是否有注册信息，有就展示出来。\r\n    console.log(temporaryStorage.logupVetInfo);\r\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\r\n      console.log('进来了');\r\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\r\n      this.setState({\r\n        name: firstName || '',\r\n        lastName,\r\n        email,\r\n        password: hash,\r\n        password1: hash,\r\n        code,\r\n        phone: initPhone || '',\r\n        imgArrayIndex\r\n      })\r\n\r\n\r\n    }\r\n\r\n\r\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\r\n    if (this.props.location && this.props.location.email) {\r\n      this.setState({\r\n        email: this.props.location.email\r\n      })\r\n    }\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  _next1 = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    // if (!phone) {\r\n    //   message.error('Please enter the phone number', 3)\r\n    //   return\r\n    // }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\r\n      .then(res => {\r\n        console.log(res);\r\n        if (!res.flag) {\r\n          console.log('邮箱号以被注册，是否忘记密码');\r\n          this.setState({\r\n            loadVisible: false,\r\n            visible: true\r\n          })\r\n        }\r\n        else {\r\n          console.log('邮箱号可以使用');\r\n          if (res.code === 11011 || res.code === 11012) {\r\n            this.setState({\r\n              loadVisible: false,\r\n              visible: true\r\n            })\r\n            return\r\n          }\r\n\r\n          let params = {\r\n            firstName: name,\r\n            lastName,\r\n            email,\r\n            // phone: `+${code}${phone}`,\r\n            hash: password,\r\n          }\r\n          if (phone) {\r\n            params.phone = `+${code}${phone}`\r\n          }\r\n          console.log('注册接口的入参：', params);\r\n          fetchRequest2('/user/deskRegistAWSSNS', \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                loadVisible: false\r\n              })\r\n              console.log('注册接口返回数据：', res);\r\n              if (res.flag) {\r\n                console.log('注册成功了，去验证验证码');\r\n                temporaryStorage.logupEmailCode = res.data\r\n                params.code = code\r\n                params.initPhone = phone\r\n                params.imgArrayIndex = this.state.imgArrayIndex\r\n                temporaryStorage.logupVetInfo = params\r\n                this.props.history.push('/uesr/logUp/VerifyEmail')\r\n              } else {\r\n                message.error('registration failed', 3)\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                loadVisible: false\r\n              })\r\n              message.error(`Error:${err.message}`)\r\n              console.log('注册接口抛出错误：', err);\r\n            })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('检测邮箱号的接口出错了', err);\r\n      })\r\n  }\r\n  _next = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    // if (!phone) {\r\n    //   message.error('Please enter the phone number', 3)\r\n    //   return\r\n    // }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n\r\n\r\n    let params = {\r\n      firstName: name,\r\n      lastName,\r\n      email,\r\n      hash: password,\r\n    }\r\n    if (phone) {\r\n      params.phone = `+${code}${phone}`\r\n    }\r\n    console.log('注册接口的入参：', params);\r\n    fetchRequest3('/user/registByAWSSES', \"POST\", params)\r\n      .then(res => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        console.log('注册接口返回数据：', res);\r\n        switch (res.code) {\r\n          case 11011:\r\n            console.log('用户已存在，应该跳出弹框')\r\n            this.setState({\r\n              visible: true\r\n            })\r\n\r\n            break;\r\n\r\n          case 20000:\r\n            console.log('可以注册，跳转到下一页');\r\n            temporaryStorage.logupEmailCode = res.data\r\n            params.code = code\r\n            params.initPhone = phone\r\n            params.imgArrayIndex = this.state.imgArrayIndex\r\n            temporaryStorage.logupVetInfo = params\r\n            this.props.history.push('/uesr/logUp/VerifyEmail')\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n        // if (res.flag) {\r\n        //   console.log('注册成功了，去验证验证码');\r\n        //   temporaryStorage.logupEmailCode = res.data\r\n        //   params.code = code\r\n        //   params.initPhone = phone\r\n        //   params.imgArrayIndex = this.state.imgArrayIndex\r\n        //   temporaryStorage.logupVetInfo = params\r\n        //   this.props.history.push('/uesr/logUp/VerifyEmail')\r\n        // } else {\r\n        //   message.error('registration failed', 3)\r\n        // }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('注册接口抛出错误：', err);\r\n      })\r\n\r\n  }\r\n  _signIn = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push('/page11')\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\r\n    return (\r\n      <div id=\"vetPrifile\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.push('/')}\r\n          />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), marginBottom: px(120) }}\r\n          >\r\n            Let’s start by creating your account\r\n          </div>\r\n          <div className=\"form\" >\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={name}\r\n                  placeholder=\"First Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      name: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  placeholder=\"Last Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      lastName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Email\"\r\n                  value={email}\r\n                  placeholder=\"Email Address*\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      email: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\r\n                  {countryList.map((item, index) => {\r\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                    return (\r\n                      <li key={index}>\r\n                        <div key={index}\r\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                          onClick={() => {\r\n                            console.log(item, index);\r\n                            this.setState({\r\n                              code: item.code,\r\n                              imgArrayIndex: index\r\n                            })\r\n                            document.getElementById('list').style.display = \"none\"\r\n                          }}\r\n                        >\r\n                          <img src={url} alt=\"\" />\r\n                          <p >{`${item.en}   +${item.code}`}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n\r\n\r\n                <div className='phone'>\r\n                  <div\r\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\r\n                    onClick={() => {\r\n                      document.getElementById('list').style.display = \"block\"\r\n                    }}\r\n                  >\r\n                    <img style={{ zIndex: '888' }}\r\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                    />\r\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                  </div>\r\n\r\n\r\n                  <input\r\n                    type=\"Phone\"\r\n                    value={phone}\r\n                    placeholder=\"Phone Number\"\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        phone: data.replace(/[^\\-?\\d]/g, '')\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password}\r\n                  placeholder=\"Create Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password1}\r\n                  placeholder=\"Confirm  Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password1: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"footText\"\r\n          >Already have an accoun? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\r\n\r\n          {/* 按钮 */}\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n\r\n          visible={this.state.loadVisible}\r\n        />\r\n\r\n        <Modal\r\n\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">Email Already Exists</div>\r\n\r\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\r\n\r\n            <div className=\"btn\">\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false,\r\n                    email: ''\r\n                  })\r\n                }}\r\n              >Try Again</button>\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false\r\n                  })\r\n                  this.props.history.replace('/page11')\r\n                }}\r\n              >Sign Up</button>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyOrganization\\FindMyOrganization.jsx",["585"],"import React, { Component } from 'react'\r\nimport {\r\n  Input\r\n} from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport Button from '../../../utils/button/Button'\r\n\r\n\r\n\r\nimport './findMyOrganization.less'\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nexport default class JoinworkplaceByName extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    listData: [],\r\n    searchData: [],\r\n    selectId: {}\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    fetchRequest(`/organization/listAll`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            listData: res.data\r\n          })\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n    this.setState({\r\n      selectId: temporaryStorage.logupSelectOrganization\r\n    })\r\n  }\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.organizationId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          temporaryStorage.logupSelectOrganization = item\r\n          this.props.history.push('/uesr/logUp/FindMyWorkplace')\r\n\r\n        }}\r\n\r\n      >\r\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\r\n        {item.name}</li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"findMyOrganization\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push('/uesr/logUp/JoinOrganizationByOption')}\r\n        />\r\n        <div className=\"body\">\r\n          <div className=\"text\">Find my organization</div>\r\n\r\n          <div className=\"searchBox\">\r\n            <div><MyIcon type='icon-sousuo' className=\"icon\" /></div>\r\n\r\n            <Input\r\n              placeholder=\"Please input organization name\"\r\n              bordered={false}\r\n              allowClear={true}\r\n              value={this.state.search}\r\n              onChange={this._search}\r\n            />\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"list\">\r\n            {this._list()}\r\n          </div>\r\n\r\n          <Button\r\n            text={'My Organization Isn`t Listed'}\r\n            textBoxStyle={{ marginTop: '50px' }}\r\n            onClick={() => {\r\n              this.props.history.push('/uesr/logUp/NewOrganization')\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\verifyEmail\\index.jsx",["586","587"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message, Button } from 'antd'\r\n\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\n// import Button from '../../../utils/button/Button'\r\nimport temporaryStorage from './../../../utils/temporaryStorage'\r\nimport './index.less'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2'\r\nimport { mTop, px } from '../../../utils/px'\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport { fetchRequest3 } from '../../../utils/FetchUtil3'\r\n\r\nconst VerifyEmail = () => {\r\n  let history = useHistory()\r\n  const [code, setCode] = useState('')\r\n  const [resend, setResend] = useState(60)\r\n  const [visible, setVisible] = useState(false)\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (resend > 0) {\r\n        setResend(resend - 1)\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  })\r\n\r\n  const _resend = (e) => {\r\n\r\n    if (resend <= 0) {\r\n\r\n      //下面写逻辑代码\r\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\r\n      let params = {\r\n        firstName,\r\n        lastName,\r\n        domain, email, hash, phone,\r\n      }\r\n      if (birthday) {\r\n        params.birthday = birthday\r\n      }\r\n      console.log('重新获取验证码入参', params);\r\n      fetchRequest2(`/user/resendDeskRegistEmail/${temporaryStorage.logupEmailCode}`, 'POST', params)\r\n        .then(res => {\r\n          console.log('重新获取验证码', res);\r\n          if (res.msg === 'success') {\r\n            message.success('The email has been resent, please check', 3)\r\n            temporaryStorage.logupEmailCode = res.data\r\n            setResend(60)\r\n          } else {\r\n            message.error('Failed to send mail', 3)\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log('重新获取验证码失败');\r\n        })\r\n\r\n    }\r\n\r\n    //阻止a链接跳转\r\n    if (e && e.preventDefault)\r\n      e.preventDefault();\r\n    else\r\n      window.event.returnValue = false;\r\n  }\r\n  const _next = () => {\r\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\r\n    message.destroy()\r\n    if (code !== temporaryStorage.logupEmailCode) {\r\n      message.error('Verification code input is incorrect', 3)\r\n      return\r\n    }\r\n    else {\r\n      setVisible(true)\r\n      fetchRequest3(`/user/activateUserByEmailCode/${code}`, \"GET\", '')\r\n        .then(res => {\r\n          setVisible(false)\r\n          console.log('验证码验证返回信息：', res);\r\n          if (res.flag === true) {\r\n            console.log('验证成功');\r\n            temporaryStorage.logupSuccessData = res.data\r\n            temporaryStorage.logupEmailCode = ''\r\n            history.push('/uesr/logUp/JoinOrganizationByOption')\r\n          } else {\r\n            message.error('Verification code verification failed', 3)\r\n          }\r\n\r\n        })\r\n        .catch(err => {\r\n          setVisible(false)\r\n          console.log('验证码验证错误：', err);\r\n        })\r\n    }\r\n    // history.push('/uesr/logUp/FindWorkplace')\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"verifyEmail\">\r\n      <div className=\"heard\">\r\n        <MaxMin\r\n          onClick={() => { history.push('/') }}\r\n          onClick1={() => history.goBack()}\r\n        />\r\n      </div>\r\n      <div className=\"body\">\r\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\r\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\r\n        <div className=\"text\">Please enter it below to confirm your address.</div>\r\n        <div className=\"inpF\">\r\n          <input\r\n            className=\"inp\"\r\n            type=\"text\"\r\n            value={code}\r\n            placeholder=\"Code\"\r\n            onChange={(val) => { setCode(val.target.value) }}\r\n            maxLength={6}\r\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"resend\">\r\n          <a href=\"#\" onClick={_resend}>Resend</a>\r\n          {resend > 0 && `(${resend})`}\r\n        </div> */}\r\n      </div>\r\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\r\n        <div className=\"btnF\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={_next}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <MyModal\r\n        visible={visible}\r\n      />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VerifyEmail\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\inviteTeam\\InviteTeam.jsx",["588","589","590","591","592","593","594","595","596","597","598","599"],"import React, { Component, } from 'react'\r\nimport {\r\n    Tag,\r\n    Input,\r\n    Tooltip,\r\n    message,\r\n    // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './inviteTeam.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\n\r\nexport default class InviteTeam extends Component {\r\n\r\n    state = {\r\n\r\n        tags: [],\r\n        inputVisible: false,\r\n        inputValue: '',\r\n        editInputIndex: -1,\r\n        editInputValue: '',\r\n        visible: false\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n\r\n        //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    }\r\n    componentWillUnmount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n    handleClose = removedTag => {\r\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n        console.log(tags);\r\n        this.setState({ tags });\r\n    };\r\n\r\n    showInput = () => {\r\n        this.setState({ inputVisible: true }, () => this.input.focus());\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({ inputValue: e.target.value });\r\n    };\r\n\r\n    handleInputConfirm = () => {\r\n        const { inputValue } = this.state;\r\n        let { tags } = this.state;\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n            console.log('输入的内容为：', inputValue);\r\n            message.destroy()\r\n            fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n                .then(res => {\r\n\r\n\r\n                    console.log('检测邮箱存不存在', res);\r\n\r\n                    if (res.code) {\r\n                        switch (res.code) {\r\n\r\n                            case 11011:\r\n                                console.log('邮箱存在，发送邮件');\r\n                                tags = [...tags, inputValue];\r\n                                console.log(tags);\r\n\r\n                                this.setState({\r\n                                    tags,\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n                            case 11012:\r\n                                console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n                            case 11013:\r\n                                console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n                            case 11014:\r\n                                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                                message.error('This mailbox was not found!', 3)\r\n                                this.setState({\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n\r\n                        }\r\n                    } else {\r\n                        console.log('系统错误', res);\r\n                        message.error('system error')\r\n                        this.setState({\r\n                            spin: false\r\n                        })\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                    message.error(`Error:${err.message}`)\r\n                    console.log('检测邮箱号的接口出错了', err);\r\n                })\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    saveInputRef = input => {\r\n        this.input = input;\r\n    };\r\n\r\n    saveEditInputRef = input => {\r\n        this.editInput = input;\r\n    };\r\n\r\n    _next = () => {\r\n        message.destroy()\r\n        let { tags } = this.state\r\n        let { userId } = temporaryStorage.logupSuccessData\r\n        let { organizationId } = temporaryStorage.logupOrganization\r\n        console.log({ tags, userId, organizationId });\r\n        if (tags.length === 0) {\r\n            this._logIn()\r\n        }\r\n        this.setState({\r\n            visible: true\r\n        })\r\n        console.log('入参:', tags);\r\n        fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                    console.log('成功，跳转');\r\n                    message.success('Invitation successful', 3)\r\n                    this._logIn()\r\n                } else {\r\n                    this.setState({\r\n                        visible: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n                message.error(err.message, 3)\r\n            })\r\n    }\r\n    _logIn = () => {\r\n\r\n        let storage = window.localStorage;\r\n        let { email, hash } = temporaryStorage.logupVetInfo\r\n        let params = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n            identityTypeId: '1'\r\n        }\r\n        console.log('登录入参:', params);\r\n        fetchRequest('/user/mellaLogin', 'POST', params)\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                if (res.status && res.status === 404) {\r\n                    message.error('system error');\r\n                    return\r\n                }\r\n                if (res.code === 10001 && res.msg === '账号错误') {\r\n                    message.error('Account error');\r\n                    return\r\n                }\r\n                if (res.code === 10002 && res.msg === '密码错误') {\r\n                    message.error('wrong password')\r\n                    return;\r\n                }\r\n                if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n                    message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n                    return\r\n                }\r\n\r\n                if (res.code === 0 && res.msg === 'success') {\r\n                    console.log('账号密码正确，登录进去了');\r\n                    let { userWorkplace, lastOrganization, token } = res.success\r\n                    storage.token = token\r\n                    storage.userId = ''\r\n\r\n                    storage.userId = res.success.userId\r\n                    storage.roleId = res.success.roleId\r\n\r\n                    //每次登陆后清空宠物列表缓存的数据\r\n                    storage.doctorList = ''\r\n                    storage.defaultCurrent = ''\r\n\r\n\r\n\r\n\r\n                    if (userWorkplace) {\r\n                        storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                        let connectionKey = ''\r\n                        const element = userWorkplace[0];\r\n                        storage.lastOrganization = element.organizationEntity.organizationId\r\n                        storage.lastWorkplaceId = element.workplaceEntity.workplaceId\r\n                        if (element.organizationEntity.connectionKey) {\r\n                            connectionKey = element.organizationEntity.connectionKey\r\n                        }\r\n                        if (element.roleId) {\r\n                            console.log(element.roleId);\r\n                            storage.roleId = element.roleId\r\n                        }\r\n                        if (userWorkplace.length === 1) {\r\n                            this.props.history.push('/uesr/selectExam')\r\n\r\n                        } else {\r\n                            this.props.history.push('/page12')\r\n                        }\r\n                    } else {\r\n                        storage.userWorkplace = ''\r\n                        storage.connectionKey = ''\r\n                        this.props.history.push('/uesr/selectExam')\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render () {\r\n        const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n        // console.log('---', editInputIndex);\r\n        return (\r\n            <div id=\"inviteTeam\" >\r\n                {/* 关闭缩小 */}\r\n                <div className=\"heard\">\r\n                    <MaxMin\r\n                        onClick={() => { this.props.history.push('/') }}\r\n                        onClick1={() => this.props.history.goBack()}\r\n                    />\r\n                    <div className=\"text\">Invite your Team</div>\r\n\r\n                    <div className=\"addF\">\r\n                        <p>To:</p>\r\n                        <div className=\"add\">\r\n\r\n                            <>\r\n                                {tags.map((tag, index) => {\r\n                                    const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                                    const tagElem = (\r\n                                        <Tag\r\n                                            className=\"edit-tag\"\r\n                                            key={tag}\r\n                                            closable={true}\r\n                                            onClose={() => this.handleClose(tag)}\r\n                                        >\r\n                                            <span>\r\n                                                {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                                            </span>\r\n                                        </Tag>\r\n                                    );\r\n                                    return isLongTag ? (\r\n                                        <Tooltip title={tag} key={tag}>\r\n                                            {tagElem}\r\n                                        </Tooltip>\r\n                                    ) : (\r\n                                        tagElem\r\n                                    );\r\n                                })}\r\n                                {inputVisible && (\r\n                                    <Input\r\n                                        ref={this.saveInputRef}\r\n                                        type=\"text\"\r\n                                        size=\"small\"\r\n                                        className=\"tag-input\"\r\n                                        value={inputValue}\r\n                                        onChange={this.handleInputChange}\r\n                                        onBlur={this.handleInputConfirm}\r\n                                        onPressEnter={this.handleInputConfirm}\r\n                                    />\r\n                                )}\r\n                                {!inputVisible && (\r\n                                    <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                                        <PlusOutlined />Press Enter to add mailbox\r\n                                    </Tag>\r\n                                )}\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"btn\"\r\n                    style={{ padding: `${px(40)}px 0` }}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._logIn}\r\n                        text={'Skip'}\r\n                    >\r\n                        Skip\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._next}\r\n                        text={'Send'}\r\n                    >\r\n\r\n                    </Button>\r\n                </div>\r\n                <MyModal visible={this.state.visible} />\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\editParent\\EditParent.jsx",["600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621"],"import React, { Component } from 'react'\r\nimport { Input, Button, Menu, message, Select, Calendar, Col, Row, Spin } from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport dog from './../../../assets/images/reddog.png'\r\nimport cat from './../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport horse from './../../../assets/images/horse.png'\r\nimport rabbit from './../../../assets/images/rabbit.png'\r\n// import selectphoto from './../../../assets/images/img.png'\r\nimport selectphoto from './../../../assets/images/sel.png'\r\nimport dui from './../../../assets/images/dui.png'\r\nimport female from './../../../assets/images/female.png'\r\nimport male from './../../../assets/images/male.png'\r\nimport './editParent.less'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Avatar from './../../avatar/Avatar'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nimport Heard from '../../../utils/heard/Heard';\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nlet url = 'https://www.mellaserver.com/api/mellaserver'\r\n// let url = 'http://192.168.0.36:8080/mellaserver'\r\nexport default class EditParent extends Component {\r\n  state = {\r\n\r\n    lastName: '',       //宠物主人性\r\n    firstName: '',      //宠物主人名\r\n    email: '',          //邮箱号\r\n    phone: '',          //电话号码\r\n    spin: false,        //加载中\r\n    imageId: null,      //图片的ID值\r\n    petList: [],         //当前这个宠物主人下的所有宠物\r\n    userId: '',          //当前这个宠物主人的userId\r\n\r\n    userImageUrl: '',\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    console.log(this.props.history.location.parent);\r\n\r\n    if (this.props.history.location.parent) { //接受入参\r\n      let { parent, pets } = this.props.history.location.parent\r\n      let { firstName, lastName, userId } = parent\r\n      this._getParent(userId)\r\n\r\n      this.setState({\r\n        firstName,\r\n        lastName,\r\n        userId,\r\n        petList: pets\r\n\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _getParent = (data) => {\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    fetchRequest(`/user/getUserInfoByUserId/${data}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('获取到了用户信息', res);\r\n        if (res.msg === 'success') {\r\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\r\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\r\n          firstName = firstName ? firstName : ''\r\n          phone = phone ? phone : ''\r\n          email = email ? email : ''\r\n          lastName = lastName ? lastName : ''\r\n\r\n\r\n          this.setState({\r\n            userImageUrl,\r\n            firstName,\r\n            lastName,\r\n            phone,\r\n            email,\r\n            imageId,\r\n            spin: false\r\n\r\n          })\r\n        } else {\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _petSpecies = () => {\r\n    let { userImageUrl } = this.state\r\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\r\n    let { firstName, lastName } = this.state\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>First Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={firstName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  firstName: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Last Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={lastName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  lastName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _petName = () => {\r\n    let { email, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  petList = () => {\r\n\r\n    let { petList } = this.state\r\n    console.log(petList);\r\n    let options = petList.map((item, index) => {\r\n      let { speciesId, url, breedName, petBirthday, gender, name, } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n\r\n      let petAge = moment(new Date()).diff(moment(petBirthday), 'years')\r\n\r\n      if (!url) {\r\n\r\n        switch (speciesId) {\r\n          case 1: images = `url(${cat})`\r\n\r\n            break;\r\n          case 2: images = `url(${dog})`\r\n            break\r\n          default: images = `url(${other})`\r\n            break;\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\r\n          onClick={() => {\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div className=\"itemL\">\r\n              <div\r\n                className='img'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  marginRight: px(20),\r\n                  borderRadius: px(60),\r\n                  backgroundImage: images,\r\n                }}>\r\n              </div>\r\n              <a\r\n                href=\"#\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  console.log(item);\r\n                }}\r\n              >{name}</a>\r\n            </div>\r\n            <div className=\"itemC\">\r\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\r\n            </div>\r\n            <div className=\"itemR\">\r\n              <p>{`${breedName}`}</p>\r\n            </div>\r\n\r\n\r\n            {/* <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div> */}\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n\r\n\r\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\r\n    if (petList.length > 3) {\r\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\r\n    }\r\n\r\n    return (\r\n      <ul style={liStyle}>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"editParent\">\r\n\r\n        <div className=\"heard\">\r\n          <Heard\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"editPetInfo_top\" >\r\n          <div className=\"parentInfo\">\r\n            <div className=\"title\" >{`Parent Information`}</div>\r\n            <div className=\"info\">\r\n              {this._petSpecies()}\r\n              {this._petName()}\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"pets\">\r\n            <div className=\"petsTitle\">\r\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\r\n              <div className=\"btn\" style={{ fontSize: px(22) }}>+ Add New Pet</div>\r\n            </div>\r\n            <div className=\"petList\">\r\n              {this.petList()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"editPetInfo_foot\"  >\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              let { firstName, lastName, email, phone, imageId, userId } = this.state\r\n              console.log({ firstName, lastName, email, phone, imageId });\r\n              let parames = {\r\n                userId,\r\n                email,\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n                imageId\r\n              }\r\n              this.setState({\r\n                spin: true\r\n              })\r\n              message.destroy()\r\n              console.log('修改的宠物信息:', parames);\r\n              fetchRequest('/user/updateUserInfo', 'POST', parames,)\r\n                .then(res => {\r\n                  console.log('保存所有信息', res);\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  if (res.flag === true) {\r\n                    this.props.history.goBack()\r\n                  } else {\r\n                    message.error('fail to edit')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  message.error('fail to edit')\r\n                  console.log(err);\r\n                })\r\n\r\n            }}\r\n\r\n          >Edit Profile</div>\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              this.props.history.goBack()\r\n            }}\r\n\r\n          >OK</div>\r\n\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n      </div >\r\n    )\r\n  }\r\n}",["622","623"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\admin_VetProfile\\Veterinarians.jsx",["624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from '../../../utils/button/Button'\r\nimport electronStore from '../../../utils/electronStore'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport parent from './../../../assets/img/parent.png'\r\nimport dog from '../../../assets/images/reddog.png'\r\nimport cat from '../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport selectphoto from './../../../assets/images/sel.png'\r\nimport close from './../../../assets/img/close.png'\r\nimport dui from './../../../assets/images/dui.png'\r\n\r\nimport Avatar from './../../avatar/Avatar'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport moment from 'moment'\r\nimport './veterinarians.less'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    fetchRequest(`/organization/listDoctorsByAdmin/${storage.lastOrganization}`, 'GET', params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    fetchRequest(`/new/admin/users/${userId}`, 'PATCH', params, storage.token)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\unassigned\\Unassigned.jsx",["640","641","642","643","644","645","646","647","648"],"import React, { Component } from \"react\";\r\nimport { Table, Popconfirm, Modal, Input, message, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport \"./unassigned.less\";\r\nimport Heard from \"./../../../utils/heard/Heard\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\n\r\nimport del from \"./../../../assets/images/del.png\";\r\nimport Close from \"./../../../assets/img/close.png\";\r\n\r\nimport UploadImg from \"./../../../utils/uploadImg/UploadImg\";\r\nimport { mTop, px, MTop } from \"../../../utils/px\";\r\nimport electronStore from \"./../../../utils/electronStore\";\r\nimport MyModal from \"../../../utils/myModal/MyModal\";\r\nimport Button from \"./../../../utils/button/Button\";\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\n\r\nexport default class Unassigned extends Component {\r\n  state = {\r\n    historyData: [], //列表的数据集合\r\n    units: \"℉\",\r\n    searchText: \"\", //搜索测试记录框输入的内容\r\n    serchExamData: [], //搜索到的测量记录\r\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\r\n    visible: false, //nodel框是否显示\r\n    disabled: true, //model是否可拖拽\r\n    imgId: -1, //上传后返回的图像id号\r\n\r\n    assignPatientId: \"\",\r\n    assignPetName: \"\",\r\n    assignOwnerName: \"\",\r\n    assignBreed: \"\",\r\n    assignBreedId: \"\",\r\n    assignPetAge: \"\",\r\n    assignPetWeight: \"\",\r\n    assignPetId: \"\",\r\n    assignPetImgUrl: \"\",\r\n    inputDisabled: false,\r\n\r\n    breedArr: [], //猫、狗品种集合\r\n\r\n    loading: false,\r\n\r\n    disabled: true, //model是否可拖拽\r\n    search: \"\", //分配宠物搜索框\r\n    petListData: [],\r\n    searchPetList: [],\r\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\r\n    selectPetId: \"\",\r\n  };\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    // if (windowsHeight < 1000) {\r\n    //   ipcRenderer.send('table')\r\n    // } else {\r\n    //   ipcRenderer.send('big')\r\n    // }\r\n    let getBreed = electronStore.get(\"getBreed\");\r\n    console.log(\"------\", getBreed);\r\n    if (getBreed) {\r\n      this.setState({\r\n        breedArr: getBreed,\r\n      });\r\n    }\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    this._getEmergencyHistory();\r\n    const timer = setTimeout(() => {\r\n      this._getBreed();\r\n      clearTimeout(timer);\r\n    }, 3000);\r\n\r\n    let list = electronStore.get(\"doctorExam\");\r\n    this.setState({\r\n      petListData: list || [],\r\n    });\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy();\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    // if (windowsHeight < 1000) {\r\n    //   ipcRenderer.send('table')\r\n    // } else {\r\n    //   ipcRenderer.send('big')\r\n    // }\r\n    this.setState({});\r\n  };\r\n\r\n  _getEmergencyHistory = () => {\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate (data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = [];\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, \"GET\", \"\") //userID要自动的\r\n      .then((res) => {\r\n        console.log(\"---res\", res);\r\n        if (res.flag === true) {\r\n          let datas = res.data;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            if (datas[i].petId === null) {\r\n              let {\r\n                petId,\r\n                examId,\r\n                userId,\r\n                petVitalTypeId,\r\n                temperature,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                memo,\r\n                clinicalDatagroupId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                createTime,\r\n                clinicalDataEntity,\r\n              } = datas[i];\r\n              let day = moment().diff(moment(createTime), \"day\");\r\n              // console.log(day);\r\n              if (day > 3) {\r\n                continue;\r\n              }\r\n\r\n              let Tem = temperature;\r\n              try {\r\n                if (clinicalDataEntity) {\r\n                  Tem = temperature || clinicalDataEntity.data0;\r\n                }\r\n              } catch (error) {\r\n                console.log(\"抛出的异常\", error);\r\n              }\r\n              let str = {\r\n                clinicalDatagroupId,\r\n                createTime,\r\n                date: moment(createTime).format(\"MMM DD\"),\r\n                time: moment(createTime).format(\"hh:mm A\"),\r\n                temp: parseInt(Tem * 10) / 10,\r\n                placement: petVitalTypeId,\r\n                note: memo,\r\n                historyId: examId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                petId,\r\n                userId,\r\n                day,\r\n              };\r\n\r\n              historys.push(str);\r\n            }\r\n          }\r\n\r\n          //把所有数据拿完后做个排序\r\n\r\n          let historyData = ForwardRankingDate(historys, \"createTime\");\r\n          console.log(\"historyData:\", historyData);\r\n          this.setState({\r\n            historyData,\r\n            loading: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  };\r\n  _getBreed = () => {\r\n    fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 1 })\r\n      .then((res) => {\r\n        if (res.code === 0) {\r\n          let arr = [];\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName,\r\n              speciesId: 1,\r\n            };\r\n\r\n            arr.push(data);\r\n          });\r\n\r\n          fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 2 })\r\n            .then((res) => {\r\n              if (res.code === 0) {\r\n                res.petlist.map((item, index) => {\r\n                  let data = {\r\n                    petSpeciesBreedId: item.petSpeciesBreedId,\r\n                    breedName: item.breedName,\r\n                    speciesId: 2,\r\n                  };\r\n                  arr.push(data);\r\n                });\r\n\r\n                console.log(\"----品种集合：\", arr);\r\n                electronStore.set(\"getBreed\", arr);\r\n                this.setState({\r\n                  breedArr: arr,\r\n                });\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  _search = (value = \"\") => {\r\n    console.log(\"我要去搜索了\");\r\n    let list = this.state.historyData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\r\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      serchExamData: searchData,\r\n    });\r\n  };\r\n  _searchPet = (value = \"\") => {\r\n    console.log(\"我要去搜索了\", this.state.petListData);\r\n    let list = this.state.petListData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\r\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\r\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\r\n\r\n      if (\r\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n      ) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      searchPetList: searchData,\r\n    });\r\n  };\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  handleOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(\"取消\");\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n    });\r\n  };\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n      },\r\n    });\r\n  };\r\n  _select = (value, data) => {\r\n    console.log(value, data); //value的值为id\r\n    this.setState({\r\n      assignBreedId: value,\r\n      assignBreed: data.children,\r\n    });\r\n  };\r\n\r\n  _modal = () => {\r\n    let that = this;\r\n\r\n    function getPetInfoByPatientId () {\r\n      switch (storage.identity) {\r\n        case \"1\":\r\n          console.log(\"我是vetspire查找\");\r\n\r\n          break;\r\n\r\n        case \"2\":\r\n          console.log(\"我是ezyVet查找\");\r\n          let params = {\r\n            animalId: that.state.assignPatientId,\r\n            organizationId: 4,\r\n          };\r\n          let paramsArray = [];\r\n          Object.keys(params).forEach((key) =>\r\n            paramsArray.push(key + \"=\" + params[key])\r\n          );\r\n          let url =\r\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\r\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\r\n          if (url.search(/\\?/) === -1) {\r\n            url = url + \"?\" + paramsArray.join(\"&\");\r\n          } else {\r\n            url = url + \"&\" + paramsArray.join(\"&\");\r\n          }\r\n          console.log(\"ezyVet集成查找宠物入参-请求地址\", params, url);\r\n          fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              authorization: `Bearer ${storage.ezyVetToken}`,\r\n            },\r\n          })\r\n            .then((response) => response.json())\r\n            .then((res) => {\r\n              console.log(\"res\", res);\r\n              this.setState({\r\n                spin: false,\r\n              });\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data;\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? -1 : -1;\r\n                  });\r\n                }\r\n                console.log(petArr);\r\n\r\n                let { petId } = petArr;\r\n                // assign(petId)\r\n              } else {\r\n                //没有宠物\r\n                message.error(\"There are no pets under this patientID\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              message.error(\"There are no pets under this patientID\");\r\n            });\r\n\r\n          break;\r\n\r\n        case \"3\":\r\n          console.log(\"我是一般医生查找\");\r\n          let datas = {\r\n            patientId: that.state.assignPatientId,\r\n            doctorId: storage.userId,\r\n          };\r\n          if (storage.lastWorkplaceId) {\r\n            datas.workplaceId = storage.lastWorkplaceId;\r\n          }\r\n          console.log(\"入参：\", datas);\r\n          fetchRequest(\"/pet/getPetInfoByPatientIdAndPetId\", \"POST\", datas)\r\n            .then((res) => {\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data;\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? -1 : -1;\r\n                  });\r\n                }\r\n\r\n                console.log(\"获取到宠物信息\", petArr);\r\n\r\n                let {\r\n                  petId,\r\n                  petName,\r\n                  firstName,\r\n                  lastName,\r\n                  breedName,\r\n                  age,\r\n                  weight,\r\n                  url,\r\n                  birthday,\r\n                } = petArr[0];\r\n\r\n                let assignPetName = petName ? petName : \"\";\r\n                let assignOwnerName = lastName ? lastName : \"\";\r\n                assignOwnerName = firstName\r\n                  ? `${assignOwnerName} ${firstName}`\r\n                  : assignOwnerName;\r\n                let assignBreed = breedName ? breedName : \"\";\r\n                let assignPetAge = age ? age : \"\";\r\n                let assignPetWeight = weight ? weight : \"\";\r\n                let assignPetImgUrl = url ? url : \"\";\r\n\r\n                if (!assignPetAge) {\r\n                  let now = moment(new Date());\r\n                  let year = now.diff(moment(birthday), \"years\");\r\n                  assignPetAge = year;\r\n                }\r\n\r\n                that.setState({\r\n                  assignPetName,\r\n                  assignBreed,\r\n                  assignPetAge,\r\n                  assignPetWeight,\r\n                  assignPetId: petId,\r\n                  assignPetImgUrl,\r\n                  inputDisabled: true,\r\n                });\r\n\r\n                // assign(petId)\r\n              } else {\r\n                that.setState({\r\n                  inputDisabled: false,\r\n                  assignPetName: \"\",\r\n                  assignOwnerName: \"\",\r\n                  assignBreed: \"\",\r\n                  assignBreedId: \"\",\r\n                  assignPetAge: \"\",\r\n                  assignPetWeight: \"\",\r\n                  assignPetId: \"\",\r\n                  assignPetImgUrl: \"\",\r\n                });\r\n                message.error(\"There are no pets under this patientID\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              that.setState({\r\n                inputDisabled: false,\r\n                assignPetName: \"\",\r\n                assignOwnerName: \"\",\r\n                assignBreed: \"\",\r\n                assignBreedId: \"\",\r\n                assignPetAge: \"\",\r\n                assignPetWeight: \"\",\r\n                assignPetId: \"\",\r\n                assignPetImgUrl: \"\",\r\n              });\r\n              message.error(\"There are no pets under this patientID\");\r\n              console.log(err);\r\n            });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    const assignPet = () => {\r\n      let parmes = {\r\n        petId: this.state.assignPetId,\r\n        clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\r\n      };\r\n      console.log(\"分配的数据信息\", parmes);\r\n      fetchRequest(\r\n        `/pet/addAndSavePetExam/${that.state.seleceEmergencies.historyId}`,\r\n        \"POST\",\r\n        parmes\r\n      )\r\n        .then((res) => {\r\n          console.log(\"----------\", res);\r\n          if (res.flag === true) {\r\n            console.log(\"分配成功\");\r\n            message.success(\"Assigned successfully\");\r\n            that._getEmergencyHistory();\r\n            that.setState({\r\n              visible: false,\r\n              assignPatientId: \"\",\r\n              assignPetName: \"\",\r\n              assignOwnerName: \"\",\r\n              assignBreed: \"\",\r\n              assignBreedId: \"\",\r\n              assignPetAge: \"\",\r\n              assignPetWeight: \"\",\r\n              assignPetId: \"\",\r\n              assignPetImgUrl: \"\",\r\n            });\r\n          } else {\r\n            message.error(\"Assignment failed\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          message.error(\"Assignment failed\");\r\n        });\r\n    };\r\n\r\n    let { disabled, bounds, visible } = this.state;\r\n    let options = this.state.breedArr.map((d) => (\r\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\r\n    ));\r\n    return (\r\n      <Modal\r\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\r\n        destroyOnClose={true}\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"30px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          ></div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onOk={this.handleOk}\r\n        onCancel={this.handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\r\n      >\r\n        <div id=\"unassignedModal\">\r\n          <div className=\"title\">\r\n            Assign <br />\r\n            Measurement to\r\n          </div>\r\n\r\n          <div className=\"addPhoto\">\r\n            <UploadImg\r\n              getImg={(val) => {\r\n                console.log(\"hahahahahahah我获得了\", val);\r\n                this.setState({\r\n                  imgId: val.imageId,\r\n                });\r\n              }}\r\n              imgUrl={this.state.assignPetImgUrl}\r\n              disable={this.state.inputDisabled}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Patient ID:</p>\r\n            <Input\r\n              value={this.state.assignPatientId}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPatientId: item.target.value,\r\n                });\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode === 13) {\r\n                  getPetInfoByPatientId();\r\n                }\r\n                if (e.keyCode === 27) {\r\n                  console.log(\"清空\");\r\n                  this.setState({\r\n                    assignPatientId: \"\",\r\n                  });\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.assignPatientId.length > 0) {\r\n                  getPetInfoByPatientId();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Pet Name:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetName}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetName: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Owner Name:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignOwnerName}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignOwnerName: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Breed:</p>\r\n            <div className=\"infoInput\">\r\n              {/* <Input bordered={false} /> */}\r\n              <Select\r\n                disabled={this.state.inputDisabled}\r\n                showSearch\r\n                style={{ width: \"100%\" }}\r\n                bordered={false}\r\n                value={this.state.assignBreed}\r\n                // size = {'small'}\r\n                placeholder=\"Search to Select\"\r\n                optionFilterProp=\"children\"\r\n                listHeight={256}\r\n                onSelect={(value, data) => this._select(value, data)}\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n                filterSort={(optionA, optionB) =>\r\n                  optionA.children\r\n                    .toLowerCase()\r\n                    .localeCompare(optionB.children.toLowerCase())\r\n                }\r\n              >\r\n                {options}\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Pet Age:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetAge}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetAge: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Pet Weight:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetWeight}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetWeight: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n\r\n            <div className=\"unit\">{`kg`}</div>\r\n          </div>\r\n\r\n          <div className=\"btnF\">\r\n            <div className=\"btn\" onClick={this.handleCancel}>\r\n              Cancel\r\n            </div>\r\n            <div\r\n              className=\"btn\"\r\n              onClick={() => {\r\n                if (this.state.assignPetId) {\r\n                  assignPet();\r\n                } else {\r\n                  message.error(\"Did not find this pet\");\r\n                }\r\n              }}\r\n            >\r\n              Confirm\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  };\r\n  _list = () => {\r\n    const { search, petListData, searchPetList } = this.state;\r\n    let data = search.length > 0 ? searchPetList : petListData;\r\n    console.log('--------------------data', data);\r\n    let option = data.map((item, index) => {\r\n      let male = item.gender === \"F\" ? \"Female\" : \"Male\";\r\n      return (\r\n        <li\r\n          key={item.organizationId}\r\n          onClick={() => {\r\n            this.setState({\r\n              selectPetId: item.petId,\r\n            });\r\n            console.log(item);\r\n          }}\r\n        >\r\n          <div className=\"item\">\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {item.petName}\r\n            </span>{\" \"}\r\n            &nbsp;&nbsp;\r\n            <span\r\n              className=\"petName\"\r\n              style={{ margin: `${px(5)}px 0` }}\r\n            >{`${item.age} yrs,`}</span>{\" \"}\r\n            &nbsp;&nbsp;\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {male}\r\n            </span>\r\n          </div>\r\n\r\n          {this.state.selectPetId === item.petId ? (\r\n            <span className=\"search\">&#xe614;</span>\r\n          ) : null}\r\n\r\n          {/* <div className=\"dui\">\r\n          <img src={} alt=\"\"/>\r\n        </div> */}\r\n        </li>\r\n      );\r\n    });\r\n    return <ul>{option}</ul>;\r\n  };\r\n\r\n  render () {\r\n    let { loading, disabled, historyData, searchText, serchExamData } =\r\n      this.state;\r\n    const _del = (key, record) => {\r\n      console.log(\"删除\", key, record);\r\n\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, \"DELETE\").then(\r\n        (res) => {\r\n          if (res.flag === true) {\r\n            console.log(\"删除成功\");\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key),\r\n            });\r\n          } else {\r\n            console.log(\"删除失败\");\r\n          }\r\n        }\r\n      );\r\n    };\r\n\r\n    const columns = [\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        key: \"operation\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          // console.log('狩猎:', text, record, index);\r\n          //record:\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                margin: `${px(8)}px 0`,\r\n              }}\r\n            >\r\n              <Popconfirm\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => _del(record.historyId, record)}\r\n              >\r\n                <img src={del} alt=\"\" style={{ marginRight: \"8px\" }} />\r\n              </Popconfirm>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      // {\r\n      //   // title: `Temp(${this.state.units})`,\r\n      //   title: `Temp(℉)`,\r\n      //   key: 'temp',\r\n      //   dataIndex: 'temp',\r\n      //   render: (text, record, index) => {\r\n      //     // console.log(text, record);\r\n      //     /**\r\n      //      * bag：温度数值前的圆圈的背景颜色\r\n      //      * tem：展示的温度\r\n      //      * endvalue:将从后台得到的数据全部转化成华氏度\r\n      //      * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n      //      * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n      //      *\r\n      //      */\r\n\r\n      //     let bag = '', tem = ''\r\n\r\n      //     let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n      //     let min = 100.4, max = 102.56\r\n\r\n      //     if (endValue > max) {\r\n      //       bag = '#E1206D'\r\n      //     } else if (endValue < min) {\r\n      //       bag = '#98DA86'\r\n      //     } else {\r\n      //       bag = '#58BDE6'\r\n      //     }\r\n\r\n      //     if (this.state.units === '℃') {\r\n      //       if (text) {\r\n      //         tem = `${text}${this.state.units}`\r\n      //       }\r\n      //     } else {\r\n      //       if (text) {\r\n      //         if (text > 55) {\r\n      //           tem = `${text}${this.state.units}`\r\n      //         } else {\r\n      //           tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n      //         }\r\n\r\n      //       }\r\n      //     }\r\n      //     return (\r\n      //       <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n      //         {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n      //         <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n      //       </div>\r\n      //     )\r\n\r\n      //   }\r\n      // },\r\n\r\n      {\r\n        title: \" Pet Description\",\r\n        dataIndex: \"description\",\r\n        key: \"description\",\r\n        width: \"20%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n      // Species\r\n\r\n      {\r\n        title: \"Species\",\r\n        dataIndex: \"species\",\r\n        key: \"species\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n\r\n      {\r\n        title: \"Note\",\r\n        dataIndex: \"note\",\r\n        key: \"note\",\r\n        width: \"20%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"assign\",\r\n        key: \"assign\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              className=\"assign\"\r\n              style={{\r\n                fontSize: px(16),\r\n                paddingTop: px(5),\r\n                paddingBottom: px(5),\r\n              }}\r\n              onClick={() => {\r\n                console.log(text, record, index);\r\n                this.setState({\r\n                  // visible: true,\r\n                  assignVisible: true,\r\n                  seleceEmergencies: record,\r\n                });\r\n              }}\r\n            >\r\n              Assign\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n\r\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\r\n\r\n    return (\r\n      <div id=\"unassigned\">\r\n        <Heard\r\n          onReturn={() => {\r\n            this.props.history.goBack();\r\n          }}\r\n          onSearch={(data) => {\r\n            storage.doctorExam = JSON.stringify(data);\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data);\r\n            if (storage.isClinical === \"true\") {\r\n              this.props.history.push({\r\n                pathname: \"/page8\",\r\n                identity: storage.identity,\r\n                patientId: data.patientId,\r\n              });\r\n            } else {\r\n              this.props.history.push({ pathname: \"/page10\" });\r\n            }\r\n          }}\r\n          menu8Click={() => {\r\n            console.log(\"--\", storage.identity);\r\n            switch (storage.identity) {\r\n              case \"2\":\r\n                this.props.history.push({\r\n                  pathname: \"/EzyVetSelectExam\",\r\n                  listDate: storage.ezyVetList,\r\n                  defaultCurrent: storage.defaultCurrent,\r\n                });\r\n\r\n                break;\r\n              case \"1\":\r\n                this.props.history.push(\"/VetSpireSelectExam\");\r\n\r\n                break;\r\n              case \"3\":\r\n                this.props.history.push({\r\n                  pathname: \"/uesr/selectExam\",\r\n                  listDate: storage.doctorList,\r\n                  defaultCurrent: storage.defaultCurrent,\r\n                });\r\n\r\n                break;\r\n\r\n              default:\r\n                break;\r\n            }\r\n          }}\r\n        />\r\n\r\n        <div className=\"body\">\r\n          <div\r\n            className=\"title\"\r\n            style={{\r\n              marginTop: px(30),\r\n              fontSize: px(30),\r\n              marginBottom: px(40),\r\n            }}\r\n          >\r\n            Unassigned Measurements{\" \"}\r\n          </div>\r\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\r\n            <input\r\n              type=\"text\"\r\n              // className=\"iconfont search\"\r\n              placeholder=\"&#xe628; Search Pet Name or Description\"\r\n              value={this.state.searchText}\r\n              onChange={(e) => {\r\n                this.setState({\r\n                  searchText: e.target.value,\r\n                });\r\n                this._search(e.target.value);\r\n              }}\r\n              onKeyUp={(e) => {\r\n                // console.log(e);\r\n                if (e.keyCode === 13) {\r\n                  this._search();\r\n                }\r\n                if (e.keyCode === 27) {\r\n                  this.setState({\r\n                    searchText: \"\",\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n            <div\r\n              className=\"searchBtn\"\r\n              style={{ height: px(35), fontSize: px(18) }}\r\n              onClick={this._search}\r\n            >\r\n              <p>Search</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"table\">\r\n            <Table\r\n              style={{\r\n                // border: ' #979797 1px solid',\r\n                padding: 0,\r\n                margin: 0,\r\n                width: \"95%\",\r\n                height: MTop(280),\r\n                // backgroundColor: 'pink'\r\n              }}\r\n              loading={loading}\r\n              columns={columns}\r\n              dataSource={tableData}\r\n              rowKey={(columns) => columns.historyId}\r\n              // pagination={{ pageSize: 8, showSizeChanger: false, showQuickJumper: true }}\r\n              pagination={false}\r\n              scroll={{\r\n                y: MTop(260),\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {this._modal()}\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.assignVisible}\r\n          // visible={true}\r\n          element={\r\n            <div className=\"myfindOrg\">\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                  // className=\" iconfont icon-left return\"\r\n                  // onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    {/* <img src={left1} alt=\"\" style={{ height: px(25) }} /> */}\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      this.setState({ assignVisible: false });\r\n                    }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"text\"\r\n                  onMouseOver={() => {\r\n                    if (disabled) {\r\n                      this.setState({\r\n                        disabled: false,\r\n                      });\r\n                    }\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    this.setState({\r\n                      disabled: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  Assign Measurement\r\n                </div>\r\n\r\n                <div className=\"searchBox\">\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search Pet\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={(item) => {\r\n                      this.setState({\r\n                        search: item.target.value,\r\n                      });\r\n                      this._searchPet(item.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"list\">{this._list()}</div>\r\n\r\n              <div className=\"foot\">\r\n                <div\r\n                  className=\"btnn flex\"\r\n                  style={{ height: px(45) }}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      assignVisible: false,\r\n                      visible: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  <p>+Add New Pet</p>\r\n                </div>\r\n                <div\r\n                  className=\"btnn flex\"\r\n                  style={{ height: px(45) }}\r\n                  onClick={() => {\r\n                    if (!this.state.selectPetId) {\r\n                      message.error(\"Please select a pet to assign\");\r\n                    } else {\r\n                      let { selectPetId, seleceEmergencies, historyData } =\r\n                        this.state;\r\n                      let parmes = {\r\n                        petId: selectPetId,\r\n                        clinicalDatagroupId:\r\n                          seleceEmergencies.clinicalDatagroupId,\r\n                      };\r\n                      console.log(\"分配的数据信息\", parmes);\r\n                      fetchRequest(\r\n                        `/pet/addAndSavePetExam/${seleceEmergencies.historyId}`,\r\n                        \"POST\",\r\n                        parmes\r\n                      )\r\n                        .then((res) => {\r\n                          console.log(\"----------\", res);\r\n                          if (res.flag === true) {\r\n                            console.log(\"分配成功\");\r\n                            message.success(\"Assigned successfully\");\r\n                            let arr = [];\r\n                            for (let i = 0; i < historyData.length; i++) {\r\n                              const element = historyData[i];\r\n                              if (\r\n                                seleceEmergencies.clinicalDatagroupId !==\r\n                                element.clinicalDatagroupId\r\n                              ) {\r\n                                arr.push(element);\r\n                              }\r\n                            }\r\n\r\n                            this.setState({\r\n                              assignVisible: false,\r\n                              historyData: arr,\r\n                            });\r\n                          } else {\r\n                            message.error(\"Assignment failed\");\r\n                          }\r\n                        })\r\n                        .catch((err) => {\r\n                          console.log(err);\r\n                          message.error(\"Assignment failed\");\r\n                        });\r\n                    }\r\n                  }}\r\n                >\r\n                  <p>Confirm</p>\r\n                </div>\r\n                {/* <Button\r\n                  text={'+Add New Pet'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      assignVisible: false,\r\n                      visible: true\r\n                    })\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'Confirm'}\r\n                  \r\n                /> */}\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchEszVet.js",["649","650"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\index.jsx",["651","652","653","654","655","656","657"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil4.js",["658","659","660","661"],"\r\nlet COMMON_URL = 'https://www.mellaserver.com/big/mellabiggie';//内部负载均衡\r\n\r\n//let COMMON_URL = 'http://34.206.181.105:31668/mellabiggie';//内部负载均衡\r\n\r\n// let COMMON_URL = 'http://192.168.0.36:9090/mellabiggie';//本地测试\r\nlet token = '';\r\n\r\n\r\nexport async function fetchRequest4 (url, method, params = '', Authorization = '', isLogin) {\r\n\r\n  // if (isLogin) {\r\n\r\n  //     COMMON_URL = 'http://34.206.181.105:31667/mellaserver'\r\n  // } else {\r\n  //     COMMON_URL = 'https://www.mellaserver.com/big/mellabiggie'\r\n  // }\r\n  console.log(COMMON_URL, url);\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          headers: {\r\n            Authorization\r\n          },\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      console.log(COMMON_URL + url);\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain',\r\n            Authorization\r\n          },\r\n\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",["662","663","664"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './minClose.less'\r\nimport { px, mTop } from './../px'\r\nimport rMin_red from './../../assets/img/min-red.png'\r\nimport rClose_red from './../../assets/img/close-red.png'\r\n\r\nimport rMin_white from './../../assets/img/min-white.png'\r\nimport rClose_white from './../../assets/img/close-white.png'\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, imgWidth }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(rMin_red)\r\n  const [closebgc, setClosebgc] = useState('')\r\n  const [rClose, setRClose] = useState(rClose_red)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(rMin_white)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n    ipcRenderer.send('window-min')\r\n\r\n  }\r\n\r\n\r\n  const closeMouseEnter = () => {\r\n    setClosebgc('rgba(232,17,35)')\r\n    setRClose(rClose_white)\r\n  }\r\n  const closeMouseLeave = () => {\r\n    setClosebgc('')\r\n    setRClose(rClose_red)\r\n  }\r\n  const closeClock = () => {\r\n    ipcRenderer.send('window-close')\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      id='minClose'\r\n    >\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n      <div\r\n        className='min_icon'\r\n        onClick={closeClock}\r\n        style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={closeMouseEnter}\r\n        onMouseLeave={closeMouseLeave}\r\n      >\r\n        <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: `${px(20)}px`\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",["665","666"],"\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\current.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil.js",["667","668","669","670"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",["671"],"export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",["672","673","674","675"],"import React, { useEffect, useState } from \"react\";\r\nimport { Layout, message } from \"antd\";\r\nimport Biggie from \"./Biggie\";\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport { setBiggieConnectStatusFun } from \"../../store/actions\";\r\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\r\nimport HistoryTable from \"../../components/historyTable\";\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport \"./biggiePage.less\";\r\nimport { px } from \"../../utils/px\";\r\nimport { fetchRequest } from \"../../utils/FetchUtil1\";\r\nimport MyModal from \"../../utils/myModal/MyModal\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nlet storage = window.localStorage;\r\n\r\nconst BiggirPage = ({\r\n  hardwareReduce,\r\n  setBiggieConnectStatusFun,\r\n  petReduce,\r\n}) => {\r\n  let { petDetailInfo } = petReduce;\r\n  let { biggieBodyWeight } = hardwareReduce;\r\n  //定义体重值 体脂值 体重单位 连接状态\r\n  const [weight, setWeight] = useState(0);\r\n  const [saveNum, setSaveNum] = useState(0);\r\n  const [fat, setFat] = useState(0);\r\n  const [unit, setUnit] = useState(\"kg\");\r\n  const [connectStatus, setConnectStatus] = useState(\"disconnected\");\r\n  const [isSavePMS, setIsSavePMS] = useState(false);\r\n  const [saveLoad, setSaveLoad] = useState(false);\r\n  const [isHaveSaveBtn, setIsHaveSaveBtn] = useState(true);\r\n\r\n  const _saveWeight = () => {\r\n    let params = {\r\n      petId: petDetailInfo.petId,\r\n      doctorId: storage.userId,\r\n      weight: weight,\r\n      memo: \"\",\r\n      fat,\r\n      bodyConditionScore: null,\r\n    };\r\n    setSaveLoad(true);\r\n    console.log(\"---体重保存入参--：\", params);\r\n    fetchRequest(\"/exam/addClamantPetExam\", \"POST\", params)\r\n      .then((res) => {\r\n        setSaveLoad(false);\r\n        console.log(\"res\", res);\r\n        if (res.flag === true) {\r\n          switch (storage.lastOrganization) {\r\n            default:\r\n              message.success(\"Data successfully saved in Mella\");\r\n              break;\r\n          }\r\n          setSaveNum(saveNum + 1);\r\n          setIsHaveSaveBtn(false);\r\n          // this._getHistory()\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaveLoad(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isSave = storage.connectionKey ? false : true;\r\n    setIsSavePMS(isSave);\r\n    return () => {};\r\n  }, []);\r\n  useEffect(() => {\r\n    let {\r\n      biggieConnectStatus,\r\n      biggieBodyFat,\r\n      biggieBodyWeight,\r\n      biggieUnit,\r\n      biggieSameWeightCount,\r\n    } = hardwareReduce;\r\n    setConnectStatus(biggieConnectStatus);\r\n    setFat(biggieBodyFat);\r\n    setUnit(biggieUnit);\r\n    if (biggieUnit === \"lb\") {\r\n      biggieBodyWeight = biggieBodyWeight * 2;\r\n    }\r\n    setWeight(biggieBodyWeight);\r\n    if (biggieSameWeightCount === 6) {\r\n      let ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n      ipcRenderer.send(\"keyboardWriting\", weight);\r\n    }\r\n\r\n    return () => {};\r\n  }, [hardwareReduce]);\r\n\r\n  useEffect(() => {\r\n    setIsHaveSaveBtn(true);\r\n    return () => {};\r\n  }, [biggieBodyWeight]);\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"biggiePage\">\r\n        <HeaderItem />\r\n        <Content className=\"biggieContentBox\">\r\n          {_.isEmpty(petDetailInfo) ? (\r\n            <>\r\n              <div className=\"chackPatientBox\">\r\n                <p className=\"chackPatientTitle\">Select a patient</p>\r\n              </div>\r\n            </>\r\n          ) : connectStatus === \"isMeasuring\" ? (\r\n            <div className=\"biggbody\">\r\n              <div className=\"biggieTopBox\" style={{ width: px(470) }}>\r\n                <Biggie\r\n                  weight={weight}\r\n                  bodyFat={fat}\r\n                  score={5}\r\n                  impedance={fat}\r\n                  isIbs={unit === \"lb\"}\r\n                  onPress={_saveWeight}\r\n                  discardOnPress={() =>\r\n                    setBiggieConnectStatusFun(\"disconnected\")\r\n                  }\r\n                  issave={isSavePMS}\r\n                  isHaveSaveBtn={isHaveSaveBtn}\r\n                />\r\n              </div>\r\n              <div className=\"biggeTitleBox\">\r\n                <p className=\"biggeTitle\">History</p>\r\n              </div>\r\n              <div className=\"biggeTableBox\">\r\n                <HistoryTable saveNum={saveNum} tableColumnType='weight' />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"biggbody\">\r\n              <LinkEquipment />\r\n            </div>\r\n          )}\r\n        </Content>\r\n      </Layout>\r\n      <MyModal visible={saveLoad} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    hardwareReduce: state.hardwareReduce,\r\n    petReduce: state.petReduce,\r\n  }),\r\n  {\r\n    setBiggieConnectStatusFun,\r\n  }\r\n)(BiggirPage);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\PetsUI.jsx",["676","677","678"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Dropdown,\r\n  Menu,\r\n} from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { px } from '../../utils/px'\r\nimport { petSortTypeFun, petDetailInfoFun, setPetListArrFun } from '../../store/actions'\r\nimport electronStore from '../../utils/electronStore'\r\nimport petIcon from './../../assets/img/petIcon.png'\r\nimport xia from './../../assets/img/xia.png'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\nimport redjinggao from './../../assets/img/redjinggao.png'\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\n\r\n\r\nimport './mainbody.less'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\nlet storage = window.localStorage;\r\n\r\n\r\nconst PetsUI = ({ bodyHeight, petSortTypeFun, petSortType, petDetailInfoFun, petDetailInfo, setPetListArrFun, petListArr, selectHardwareType, rulerConnectStatus }) => {\r\n  //定义宠物列表数组\r\n  const [petList, setPetList] = useState([])\r\n  //是否展示弹窗\r\n  const [showModal, setShowModal] = useState(false)\r\n  //选中的宠物的详细信息\r\n  const [selectPetDetail, setSelectPetDetail] = useState({})\r\n\r\n  useEffect(() => {\r\n    //设置宠物列表数据\r\n    setPetList(petListArr)\r\n  }, [petListArr])\r\n\r\n  useEffect(() => {\r\n    //从本地获取宠物列表数据\r\n    // let petList = electronStore.get('petList') || [];\r\n    setPetList(petList)\r\n    _getExam()\r\n  }, [])\r\n\r\n  //获取宠物列表数据\r\n  const _getExam = () => {\r\n\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n      .then(res => {\r\n        console.log('查询所有宠物', res);\r\n        if (res.flag === true && res.data) {\r\n          let oldList = res.data\r\n          let petArr = dataSort(oldList)\r\n          setPetList(petArr)\r\n          setPetListArrFun(petArr)\r\n        } else {\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n\r\n      })\r\n  }\r\n  const dataSort = (data) => {\r\n    let petList = [].concat(data)\r\n    switch (petSortType) {\r\n      case 'Time':\r\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n        break;\r\n      case 'Pet ID':\r\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n        break;\r\n      case 'Owner':\r\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n        break;\r\n      case 'Breed':\r\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n        break;\r\n      case 'Pet Name':\r\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n        break;\r\n      case 'Gender':\r\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n        break;\r\n    }\r\n    return petList\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const menu = () => {\r\n    let menuList = [\r\n      // { value: 'Time' },\r\n      { value: 'Pet ID' },\r\n      // { value: 'Owner' },\r\n      // { value: 'Breed' },\r\n      { value: 'Pet Name' },\r\n      // { value: 'Gender' },\r\n    ];\r\n    let options = menuList.map((item, index) => {\r\n      let itemstyle = {}, textColor = '#1a1a1a'\r\n      if (petSortType === item.value) {\r\n        itemstyle = { backgroundColor: '#e1206D' }\r\n        textColor = '#fff'\r\n      }\r\n      return (\r\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\r\n          <div style={{ color: textColor }}>{item.value}</div>\r\n        </Menu.Item>\r\n      )\r\n    })\r\n    return (\r\n      <Menu onClick={({ key, }) => {\r\n        petSortTypeFun(key)\r\n        let petArr = dataSort(petList)\r\n        setPetList(petArr)\r\n        setPetListArrFun(petArr)\r\n      }}>\r\n        {options}\r\n\r\n      </Menu>\r\n    );\r\n  }\r\n  const petListUI = () => {\r\n    let options = petList.map((item, index) => {\r\n      let itemBac = '#E7E7E7', itemColor = '#141414'\r\n      if (item.petId === petDetailInfo.petId) {\r\n        itemBac = '#e1206D'\r\n        itemColor = '#fff'\r\n      }\r\n      return (\r\n        <li key={index} >\r\n          <div className='petItem'\r\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\r\n            onClick={() => {\r\n              //当硬件是尺子且尺子还在测量的时候,要做出提示\r\n              setSelectPetDetail(item)\r\n              if (selectHardwareType === 'tape' && rulerConnectStatus !== 'disconnected') {\r\n                setShowModal(true)\r\n              } else {\r\n                petDetailInfoFun(item)\r\n              }\r\n            }}\r\n          >\r\n            {`${item.patientId}, ${item.petName}`}\r\n          </div>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <div className=\"petList\" style={{ marginTop: px(10), height: bodyHeight - devicesTitleHeight - px(220) }}>\r\n        <ul>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"PetUI\" style={{ height: bodyHeight - devicesTitleHeight, }}>\r\n      <MyModal\r\n        visible={showModal}\r\n        element={\r\n          <div className='petUiModal'>\r\n            <img src={redjinggao} alt=\"\" width={'45px'} style={{ margin: `${px(25)}px 0` }} />\r\n            <div className='bodyText' style={{ marginTop: px(30) }}>Patient Switched – select dimension to measure</div>\r\n            <div className=\"btns\" style={{ marginTop: px(35) }}>\r\n              <div className=\"btn\" onClick={() => { setShowModal(false) }}>Cancel</div>\r\n              <div className=\"btn\" onClick={() => { setShowModal(false); petDetailInfoFun(selectPetDetail) }}>Confirm</div>\r\n            </div>\r\n          </div>\r\n        }\r\n      />\r\n      <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\r\n        <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\r\n        <div className=\"titleText\" >Pets</div>\r\n      </div>\r\n      <div className=\"sort\" style={{ paddingLeft: px(20) }}>\r\n        <Dropdown overlay={menu} trigger={['click']}>\r\n          <div className=\"sortBox\">\r\n            <img src={xia} alt=\"\" width={px(20)} style={{ marginRight: px(10) }} />\r\n            <div className=\"sortText\" >\r\n              {`Sort by: ${petSortType}`}\r\n            </div>\r\n          </div>\r\n        </Dropdown>\r\n      </div>\r\n      {petListUI()}\r\n\r\n      <div className=\"walkBtn\">\r\n        <div\r\n          className=\"walkbtnBox\"\r\n          style={{ height: px(40), marginTop: px(30) }}\r\n          onClick={() => {\r\n            let json = {\r\n              isWalkIn: true,\r\n              petId: null,\r\n              petName: null,\r\n              owner: null,\r\n              breed: null,\r\n\r\n            }\r\n            petDetailInfoFun(json)\r\n          }}\r\n        >\r\n          <div className=\"walkText\">Walk-In</div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nPetsUI.propTypes = {\r\n  bodyHeight: PropTypes.number\r\n}\r\n//默认值\r\nPetsUI.defaultProps = {\r\n  bodyHeight: 0\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petSortType: state.petReduce.petSortType,\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n    petListArr: state.petReduce.petListArr,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    rulerConnectStatus: state.hardwareReduce.rulerConnectStatus,\r\n  }),\r\n  { petSortTypeFun, petDetailInfoFun, setPetListArrFun }\r\n)(PetsUI)",["679","680"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",["681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",["721","722","723","724","725","726","727","728","729"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",["730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Layout,\r\n  Menu,\r\n  PageHeader,\r\n  Radio,\r\n  Input,\r\n  Space,\r\n  Button,\r\n  Modal,\r\n  message,\r\n  Carousel,\r\n} from \"antd\";\r\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setRulerConnectStatusFun,\r\n  setRulerMeasureValueFun,\r\n  setRulerUnitFun,\r\n  setRulerConfirmCountFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport NumericInput from \"./numericInput\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\nimport head from \"./../../../assets/img/head.png\";\r\nimport neck from \"./../../../assets/img/neck.png\";\r\nimport upper from \"./../../../assets/img/upper.png\";\r\nimport lower from \"./../../../assets/img/lower.png\";\r\nimport Full from \"./../../../assets/img/Full.png\";\r\nimport body from \"./../../../assets/img/body.png\";\r\nimport catHead from \"./../../../assets/img/catHead.png\";\r\nimport catNeck from \"./../../../assets/img/catNeck.png\";\r\nimport catUpper from \"./../../../assets/img/catUpper.png\";\r\nimport catLower from \"./../../../assets/img/catLower.png\";\r\nimport catFull from \"./../../../assets/img/catFull.png\";\r\nimport catBody from \"./../../../assets/img/catBody.png\";\r\nimport \"./scanPet.less\";\r\n\r\nconst { Content, Header } = Layout;\r\nconst ScanPet = ({\r\n  petMessage,\r\n  petDetailInfoFun,\r\n  ruleMessage,\r\n  setRulerConfirmCountFun,\r\n  setRulerMeasureValueFun,\r\n  setRulerUnitFun,\r\n}) => {\r\n  let { petSpeciesBreedId, patientId, petId } = petMessage;\r\n  let { rulerMeasureValue, rulerConfirmCount, rulerUnit } = ruleMessage;\r\n  let storage = window.localStorage;\r\n  const [radioValue, setRadioValue] = useState(\"in\");\r\n  const [inputIndex, setInputIndex] = useState(-1);\r\n  const [visible, setVisible] = useState(false);\r\n  const [carouselIndex, setCarouselIndex] = useState(1);\r\n  const [headValue, setHeadValue] = useState(\"\"); //接收输入框的值\r\n  const [neckValue, setNeckValue] = useState(\"\"); //接收输入框的值\r\n  const [upperValue, setUpperValue] = useState(\"\"); //接收输入框的值\r\n  const [lowerValue, setLowerValue] = useState(\"\"); //接收输入框的值\r\n  const [torsoValue, setTorsoValue] = useState(\"\"); //接收输入框的值\r\n  const [bodyValue, setBodyValue] = useState(\"\"); //接收输入框的值\r\n  let newData = [];\r\n\r\n  //保存input组\r\n  const inputEl = (data) => {\r\n    newData.push(data);\r\n  };\r\n\r\n  //切换聚焦事件\r\n  const switchFocus = () => {\r\n    let num = inputIndex;\r\n    if (num === 3) {\r\n      setCarouselIndex(2);\r\n    }\r\n    if (num < 5) {\r\n      setInputIndex(num + 1);\r\n    }\r\n  };\r\n\r\n  //结束事件\r\n  const finishScan = () => {\r\n    Modal.confirm({\r\n      title: \"Confirm\",\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: \"Whether To Save Data\",\r\n      top: \"40vh\",\r\n      onOk: saveData,\r\n    });\r\n  };\r\n  //保存数据\r\n  const saveData = () => {\r\n    const newNum = (val) => {\r\n      if (val) {\r\n        if (rulerUnit === \"in\") {\r\n          return parseFloat((parseFloat(val) * 2.54).toFixed(1));\r\n        } else {\r\n          return parseFloat(val);\r\n        }\r\n      } else {\r\n        return \"\";\r\n      }\r\n    };\r\n    let prams = {\r\n      l2rarmDistance: newNum(bodyValue) || null,\r\n      lowerTorsoCircumference: newNum(lowerValue) || null,\r\n      upperTorsoCircumference: newNum(upperValue) || null,\r\n      neckCircumference: newNum(neckValue) || null,\r\n      h2tLength: newNum(headValue) || null,\r\n      torsoLength: newNum(torsoValue) || null,\r\n    };\r\n    let url = `/pet/updatePetInfo/${storage.userId}/${petId}`;\r\n    fetchRequest(url, \"POST\", prams)\r\n      .then((res) => {\r\n        if (res.flag) {\r\n          petDetailInfoFun({\r\n            ...petMessage,\r\n            ...prams,\r\n          });\r\n          message.success(\"Uploaded successfully\");\r\n        } else {\r\n          message.error(\"upload failed\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.error(\"update failed\");\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //判断是猫还是狗还是其他\r\n  const checkPetType = () => {\r\n    //0是猫，1是狗，或者petSpeciesBreedId为空判断图片为狗\r\n    if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n      return 0;\r\n    } else if (\r\n      petSpeciesBreedId === 12001 ||\r\n      _.inRange(petSpeciesBreedId, 136, 456)\r\n    ) {\r\n      return 1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  };\r\n\r\n  //切换图片\r\n  const changeImage = () => {\r\n    switch (inputIndex) {\r\n      case 0:\r\n        return checkPetType() === 1 ? (\r\n          <img src={head} />\r\n        ) : (\r\n          <img src={catHead} />\r\n        );\r\n      case 1:\r\n        return checkPetType() === 1 ? (\r\n          <img src={neck} />\r\n        ) : (\r\n          <img src={catNeck} />\r\n        );\r\n      case 2:\r\n        return checkPetType() === 1 ? (\r\n          <img src={upper} />\r\n        ) : (\r\n          <img src={catUpper} />\r\n        );\r\n      case 3:\r\n        return checkPetType() === 1 ? (\r\n          <img src={lower} />\r\n        ) : (\r\n          <img src={catLower} />\r\n        );\r\n      case 4:\r\n        return checkPetType() === 1 ? (\r\n          <img src={Full} />\r\n        ) : (\r\n          <img src={catFull} />\r\n        );\r\n      case 5:\r\n        return checkPetType() === 1 ? (\r\n          <img src={body} />\r\n        ) : (\r\n          <img src={catBody} />\r\n        );\r\n      default:\r\n        return checkPetType() === 1 ? (\r\n          <img src={body} />\r\n        ) : (\r\n          <img src={catBody} />\r\n        );\r\n    }\r\n  };\r\n\r\n  //点击输入框事件\r\n  const clickInput = (index) => {\r\n    setInputIndex(index);\r\n  };\r\n\r\n  //单位转化\r\n  const changeUnit = (value) => {\r\n    if (rulerUnit === \"cm\") {\r\n      return _.round(value * 2.54, 1);\r\n    } else if (rulerUnit === \"in\") {\r\n      return _.floor(_.divide(value, 2.54), 2);\r\n    }\r\n  };\r\n\r\n  //单选框改变事件\r\n  const changeRadio = (e) => {\r\n    setRadioValue(e.target.value);\r\n    setRulerUnitFun(e.target.value);\r\n  };\r\n\r\n  //小圆点点击事件\r\n  const clickPoint = (index) => {\r\n    if (index === 1) {\r\n      setCarouselIndex(1);\r\n    } else {\r\n      setCarouselIndex(2);\r\n    }\r\n  };\r\n  //切换宠物获取到长度信息,对数据根据界面单位进行换算\r\n  const petLengthDataConvert = (val) => {\r\n    if (!val) {\r\n      return \"\";\r\n    } else {\r\n      if (rulerUnit === \"cm\") {\r\n        return val.toFixed(1);\r\n      } else {\r\n        return _.floor(_.divide(val, 2.54), 2);\r\n      }\r\n    }\r\n  };\r\n\r\n  //监听点击界面中下一步按钮\r\n  useEffect(() => {\r\n    console.log(\"inputIndex\", inputIndex);\r\n\r\n    if (inputIndex < 6 && inputIndex !== -1) {\r\n      newData[inputIndex].focus();\r\n    }\r\n    if (inputIndex === 6) {\r\n      finishScan();\r\n    }\r\n\r\n    return () => {};\r\n  }, [inputIndex, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (carouselIndex === 2) {\r\n      setInputIndex(4);\r\n    } else if (carouselIndex === 1) {\r\n      setInputIndex(0);\r\n    }\r\n    return () => {};\r\n  }, [carouselIndex]);\r\n\r\n  //监听用户点击了硬件中的下一步按钮\r\n  useEffect(() => {\r\n    if (inputIndex === -1) {\r\n      setInputIndex(0);\r\n    } else if (inputIndex < 6) {\r\n      setInputIndex(inputIndex + 1);\r\n    }\r\n    if (inputIndex === 3) {\r\n      setCarouselIndex(2);\r\n    }\r\n    return () => {};\r\n  }, [rulerConfirmCount]);\r\n\r\n  //监听切换了宠物\r\n  useEffect(() => {\r\n    setInputIndex(0);\r\n    let {\r\n      torsoLength,\r\n      l2rarmDistance,\r\n      upperTorsoCircumference,\r\n      lowerTorsoCircumference,\r\n      h2tLength,\r\n      neckCircumference,\r\n    } = petMessage;\r\n\r\n    setBodyValue(petLengthDataConvert(l2rarmDistance));\r\n    setLowerValue(petLengthDataConvert(lowerTorsoCircumference));\r\n    setUpperValue(petLengthDataConvert(upperTorsoCircumference));\r\n    setNeckValue(petLengthDataConvert(neckCircumference));\r\n    setHeadValue(petLengthDataConvert(h2tLength));\r\n    setTorsoValue(petLengthDataConvert(torsoLength));\r\n\r\n    return () => {};\r\n  }, [petId]);\r\n  //监听用户点击了硬件中的下一步按钮和拉动皮尺\r\n  useEffect(() => {\r\n    if (inputIndex < 6) {\r\n      switch (inputIndex) {\r\n        case 0:\r\n          setHeadValue(rulerMeasureValue);\r\n          break;\r\n        case 1:\r\n          setNeckValue(rulerMeasureValue);\r\n          break;\r\n        case 2:\r\n          setUpperValue(rulerMeasureValue);\r\n          break;\r\n        case 3:\r\n          setLowerValue(rulerMeasureValue);\r\n          break;\r\n        case 4:\r\n          setTorsoValue(rulerMeasureValue);\r\n          break;\r\n        case 5:\r\n          setBodyValue(rulerMeasureValue);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }, [rulerConfirmCount, rulerMeasureValue]);\r\n  //监听单位改变\r\n  useEffect(() => {\r\n    setRadioValue(rulerUnit);\r\n    setHeadValue(headValue && changeUnit(headValue));\r\n    setNeckValue(neckValue && changeUnit(neckValue));\r\n    setUpperValue(upperValue && changeUnit(upperValue));\r\n    setLowerValue(lowerValue && changeUnit(lowerValue));\r\n    setTorsoValue(torsoValue && changeUnit(torsoValue));\r\n    setBodyValue(bodyValue && changeUnit(bodyValue));\r\n    return () => {};\r\n  }, [rulerUnit]);\r\n\r\n  return (\r\n    <>\r\n      <Content className=\"contentBox\">\r\n        <div className=\"scanImageBox\">{changeImage()}</div>\r\n        {/*选择单位框*/}\r\n        <Radio.Group\r\n          value={radioValue}\r\n          onChange={changeRadio}\r\n          buttonStyle=\"solid\"\r\n          className=\"selectLengthUnit\"\r\n        >\r\n          <Radio.Button\r\n            value=\"in\"\r\n            style={{\r\n              background: radioValue === \"in\" ? \"#12ade4\" : \"#fff\",\r\n              borderColorRight: radioValue === \"in\" ? \"#12ade4\" : \"#fff\",\r\n              borderRadius: \"20px\",\r\n              borderTopRightRadius: \"0px\",\r\n              borderBottomRightRadius: \"0px\",\r\n            }}\r\n          >\r\n            in\r\n          </Radio.Button>\r\n          <Radio.Button\r\n            value=\"cm\"\r\n            className=\"cmButton\"\r\n            style={{\r\n              background: radioValue === \"cm\" ? \"#12ade4\" : \"#fff\",\r\n              borderColorRight: radioValue === \"cm\" ? \"#12ade4\" : \"#fff\",\r\n              borderRadius: \"20px\",\r\n              borderTopLeftRadius: \"0px\",\r\n              borderBottomLeftRadius: \"0px\",\r\n            }}\r\n          >\r\n            cm\r\n          </Radio.Button>\r\n        </Radio.Group>\r\n        <div className=\"slideshowBox\">\r\n          <div className=\"scollInputGroup\">\r\n            {/*第一列输入框*/}\r\n            <Input.Group\r\n              className=\"inputGroupItem\"\r\n              style={{ display: carouselIndex === 1 ? \"\" : \"none\" }}\r\n            >\r\n              <Space className=\"inputItemBox\">\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Head Circumference</p>\r\n                  <NumericInput\r\n                    value={headValue}\r\n                    onChange={setHeadValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(0)}\r\n                    index={inputIndex}\r\n                    onKey={0}\r\n                  />\r\n                </div>\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Neck Circumference</p>\r\n                  <NumericInput\r\n                    value={neckValue}\r\n                    onChange={setNeckValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(1)}\r\n                    index={inputIndex}\r\n                    onKey={1}\r\n                  />\r\n                </div>\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Upper Torso Circumference</p>\r\n                  <NumericInput\r\n                    value={upperValue}\r\n                    onChange={setUpperValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(2)}\r\n                    index={inputIndex}\r\n                    onKey={2}\r\n                  />\r\n                </div>\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Lower Torso Circumference</p>\r\n                  <NumericInput\r\n                    value={lowerValue}\r\n                    onChange={setLowerValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(3)}\r\n                    index={inputIndex}\r\n                    onKey={3}\r\n                  />\r\n                </div>\r\n              </Space>\r\n            </Input.Group>\r\n            {/*第二列输入框*/}\r\n            <Input.Group\r\n              className=\"inputGroupItem\"\r\n              style={{ display: carouselIndex === 2 ? \"\" : \"none\" }}\r\n            >\r\n              <Space className=\"inputItemBox\">\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Full Torso Length</p>\r\n                  <NumericInput\r\n                    value={torsoValue}\r\n                    onChange={setTorsoValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(4)}\r\n                    index={inputIndex}\r\n                    onKey={4}\r\n                  />\r\n                </div>\r\n                <div className=\"inputItem\">\r\n                  <p className=\"inputTitle\">Full Body Length</p>\r\n                  <NumericInput\r\n                    value={bodyValue}\r\n                    onChange={setBodyValue}\r\n                    getInput={inputEl}\r\n                    onClick={() => clickInput(5)}\r\n                    index={inputIndex}\r\n                    onKey={5}\r\n                  />\r\n                </div>\r\n              </Space>\r\n            </Input.Group>\r\n          </div>\r\n        </div>\r\n\r\n        {/*小圆点 */}\r\n        <div className=\"dotBox\">\r\n          <ul className=\"dotList\">\r\n            <li>\r\n              <Button\r\n                className=\"dotItem\"\r\n                onClick={() => clickPoint(1)}\r\n                style={{\r\n                  background: carouselIndex === 1 ? \"#0a0a0a\" : \"#bdbaba\",\r\n                }}\r\n              >\r\n                1\r\n              </Button>\r\n            </li>\r\n            <li>\r\n              <Button\r\n                className=\"dotItem\"\r\n                onClick={() => clickPoint(2)}\r\n                style={{\r\n                  background: carouselIndex === 2 ? \"#0a0a0a\" : \"#bdbaba\",\r\n                }}\r\n              >\r\n                2\r\n              </Button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        {/*下一步 */}\r\n        <div className=\"nextBtnBox\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            className=\"nextBtn\"\r\n            onClick={inputIndex > 4 ? finishScan : switchFocus}\r\n          >\r\n            {inputIndex > 4 ? \"Finish\" : \"Next\"}\r\n          </Button>\r\n        </div>\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    ruleMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setRulerConnectStatusFun,\r\n    setRulerMeasureValueFun,\r\n    setRulerUnitFun,\r\n    setRulerConfirmCountFun,\r\n  }\r\n)(ScanPet);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",["756","757"],"import React, {\r\n} from 'react';\r\nimport { Input } from 'antd';\r\nimport _ from 'lodash';\r\nimport './numericInput.less'\r\nimport { useEffect } from 'react';\r\n\r\nconst NumericInput = (props) => {\r\n    const { value, onChange, getInput, onClick,onKey,index } = props;\r\n\r\n    //输入框输入\r\n    const handleChange = (e) => {\r\n        const { value: inputValue } = e.target;\r\n        const reg = /^-?\\d*(\\.\\d*)?$/;\r\n\r\n        if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\r\n            onChange(inputValue);\r\n        }\r\n    }\r\n    //失去焦点\r\n    const handleBlur = () => {\r\n        let valueTemp = value;\r\n        if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\r\n            valueTemp = value.slice(0, -1);\r\n        }\r\n        onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\r\n    };\r\n    //输入框点击事件\r\n    const handleClick = () => {\r\n        onClick();\r\n    }\r\n    //修改样式\r\n    let bordercolor = onKey ===index ?'#e1206d':'#d9d9d9';\r\n\r\n\r\n    return (\r\n        <Input\r\n            {...props}\r\n            className='inputNum'\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            maxLength={25}\r\n            ref={getInput}\r\n            onClick={handleClick}\r\n            style={{borderColor:bordercolor}}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default NumericInput;\r\n",["758","759"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",["760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Menu,\r\n    Popover,\r\n    Button,\r\n    Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\n\r\n\r\n//import 'antd/dist/antd.css';\r\nimport './phoneBook.less'\r\nimport { mTop, px, MTop } from '../px';\r\nimport electronStore from '../electronStore';\r\n\r\n\r\n/**\r\n * \r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns \r\n */\r\n\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n    const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n    const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n\r\n    const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n    const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n\r\n    const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n    useEffect(() => {\r\n        if (confirmSelectBreed !== -1) {\r\n            setSelectBreed(confirmSelectBreed)\r\n        }\r\n    }, [confirmSelectBreed])\r\n\r\n\r\n    console.log('listsDate', phoneList)\r\n\r\n    useEffect(() => {\r\n        // console.log('listsDate', listDate)\r\n        console.log('进来了');\r\n        let test = []\r\n        listDate.map((item, index) => {\r\n            let data = {\r\n                name: item.breedName,\r\n                hidden: false,\r\n                petSpeciesBreedId: item.petSpeciesBreedId\r\n            }\r\n            test.push(data)\r\n        })\r\n        // 暂时静态数据替换\r\n        //获取联系人列表\r\n        console.log('11111111111', test)\r\n        let list = test;\r\n        let sections = [], letterArr = [];\r\n        // console.log('原始的数据:',list)\r\n\r\n        // 右侧字母栏数据处理\r\n        list.map((item, index) => {\r\n            letterArr.push(pinyin(item.name.substring(0, 1), {\r\n                style: pinyin.STYLE_FIRST_LETTER,\r\n            })[0][0].toUpperCase());\r\n\r\n            letterArr = [...new Set(letterArr)].sort();\r\n        });\r\n\r\n        // 分组数据处理\r\n        letterArr.map((item, index) => {\r\n            sections.push({\r\n                title: item,\r\n                data: []\r\n            })\r\n        });\r\n        list.map(item => {\r\n            let listItem = item;\r\n            sections.map(item => {\r\n                // console.log('}}}}}}}}}}}}}}',item)\r\n                let first = listItem.name.substring(0, 1);\r\n                let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n                if (item.title == test) {\r\n                    item.data.push({\r\n                        firstName: first,\r\n                        name: listItem.name,\r\n                        hidden: listItem.hidden,\r\n                        petSpeciesBreedId: listItem.petSpeciesBreedId\r\n                    });\r\n                }\r\n            })\r\n        });\r\n\r\n        //letterArr:[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"]\r\n        //sections   [{title: \"A\", data:[ {firstName: \"C\", name: \"Canaan Dog\", hidden: false, petSpeciesBreedId: 201}} ]]\r\n        // console.log('-1----', sections, letterArr);\r\n        setPhoneList(sections)\r\n        setPhoneListCopy(sections)\r\n        setLetterList(letterArr)\r\n        setLetterListCopy(letterArr)\r\n    }, [])\r\n    useEffect(() => {\r\n        // if (searchText) {\r\n        console.log('搜索内容', searchText, letterListCopy);\r\n        if (letterListCopy.length > 0) {\r\n\r\n            let allData = phoneListCopy\r\n            let newArr = []\r\n            let arr = []\r\n            if (searchText.length > 0) {\r\n                allData.map((item, i) => {\r\n                    item.data.map((data, index) => {\r\n                        // console.log(index)\r\n                        let dataName = data.name ? data.name.toUpperCase() : ''\r\n                        let keyData = searchText ? searchText.toUpperCase() : ''\r\n                        if (dataName.search(keyData) !== -1) {\r\n                            newArr.push(data)\r\n                        }\r\n                    })\r\n                    // console.log('一组数据：', newArr)\r\n                    if (newArr.length != 0) {\r\n                        let oneGreep = {\r\n                            title: item.title,\r\n                            data: newArr\r\n                        }\r\n                        //   console.log('一11组数据：', oneGreep)\r\n                        arr.push(oneGreep)\r\n                    }\r\n\r\n                    newArr = []\r\n                })\r\n                //   console.log('--------------------------', arr)\r\n                let letterArr = []\r\n                arr.map((item, index) => {\r\n                    letterArr.push(item.title)\r\n                })\r\n                // newArr = []\r\n                // // console.log('---||-----',newArr)\r\n                setPhoneList(arr)\r\n                setLetterList(letterArr)\r\n            } else {\r\n\r\n                setPhoneList(phoneListCopy)\r\n                setLetterList(letterListCopy)\r\n            }\r\n        }\r\n\r\n\r\n    }, [searchText])\r\n\r\n\r\n\r\n    const _phoneList = () => {\r\n\r\n        let option = phoneList.map((item, index) => {\r\n            let data = item.data\r\n            let option1 = data.map((value, index1) => {\r\n                return (\r\n                    <li\r\n                        key={`option1${index1}`}\r\n                        onClick={() => {\r\n                            // console.log(value.petSpeciesBreedId);\r\n                            setSelectBreed(value.petSpeciesBreedId)\r\n                            selectFun(value)\r\n                        }}>\r\n                        {value.name}\r\n                        {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n                    </li>\r\n                )\r\n            })\r\n\r\n            return (\r\n                <div className=\"phoneBody\">\r\n                    <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n                    <ul>\r\n                        {option1}\r\n                    </ul>\r\n                </div>\r\n            )\r\n\r\n        })\r\n\r\n        return (\r\n            <ul>\r\n                {option}\r\n            </ul>\r\n        )\r\n    }\r\n    const _letterList = () => {\r\n\r\n        let option = letterList.map((item, index) => {\r\n\r\n\r\n            return (\r\n                <li\r\n                    key={`${index}`}\r\n\r\n                    style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n                    <a\r\n\r\n                        onClick={() => {\r\n                            litterClick(item)\r\n                        }}\r\n                    >{item}</a>\r\n                </li>\r\n            )\r\n\r\n        })\r\n\r\n        return (\r\n            <ul className=\"letterUL\">\r\n                {option}\r\n            </ul>\r\n        )\r\n    }\r\n    const litterClick = (anchorName) => {\r\n        // console.log(anchorName);\r\n        if (anchorName) {\r\n            // 找到锚点\r\n            let anchorElement = document.getElementById(anchorName);\r\n            // console.log(anchorElement);\r\n            // 如果对应id的锚点存在，就跳转到锚点\r\n            if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n        }\r\n        // e.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"phoneBook\">\r\n            <div className=\"phone\">\r\n                {_phoneList()}\r\n            </div>\r\n            <div className=\"litter\">\r\n                {_letterList()}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n\r\n    listDate: PropTypes.array,\r\n    selectFun: PropTypes.func,\r\n    searchText: PropTypes.string,\r\n    confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n    listDate: [],\r\n    selectFun: () => { },\r\n    searchText: '',\r\n    confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",["781","782","783","784","785","786"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetLogin\\EzyVetLogin.jsx",["787","788"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    Input,\r\n    Form,\r\n    Select\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\nimport './esyVetLogin.less'\r\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\nexport default class EzyNetLogin extends Component {\r\n\r\n    state = {\r\n        isRemember: false,\r\n        client_id: '',\r\n        client_secret: '',\r\n        partner_id: ''\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('middle')\r\n        storage.ezyVetToken = ''\r\n    }\r\n    componentWillMount () {\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin1 !== '', storage.ezyVetToken1 !== undefined, `${storage.ezyVetToken1}` !== 'undefined');\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin !== '', storage.ezyVetToken !== undefined, `${storage.ezyVetToken}` !== 'undefined');\r\n        if (storage.ezyVetLogin !== '' && storage.ezyVetToken !== undefined && `${storage.ezyVetToken}` !== 'undefined') {\r\n            try {\r\n                let data = JSON.parse(storage.ezyVetLogin)\r\n                console.log('--', data);\r\n                this.setState({\r\n                    isRemember: data.isRemember,\r\n                    client_id: data.client_id,\r\n                    client_secret: data.client_secret,\r\n                    partner_id: data.partner_id\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 10 },\r\n                sm: { span: 6 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 14 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 10,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 8,\r\n                    offset: 7,\r\n                },\r\n            },\r\n        };\r\n\r\n        const _next = (values) => {\r\n            console.log('Received values of form: ', values);\r\n            let parames = {\r\n                clientId: values.client_id,\r\n                clientSecret: values.client_secret,\r\n                partnerId: values.partner_id,\r\n            }\r\n            console.log(parames);\r\n            fetchRequest2('/EzyVet/ezyvetauth', 'GET', parames, '')\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    if (res && res.msg === 'success') {\r\n\r\n                        storage.ezyVetToken = res.data\r\n                        if (this.state.isRemember) {\r\n                            storage.ezyVetLogin = JSON.stringify({\r\n                                client_id: values.client_id,\r\n                                client_secret: values.client_secret,\r\n                                partner_id: values.partner_id,\r\n                                isRemember: this.state.isRemember\r\n                            })\r\n                        } else {\r\n                            storage.ezyVetLogin = ''\r\n                        }\r\n                        storage.selectTime = ''\r\n                        storage.ezyVetReLogin = JSON.stringify({  //如果令牌过期了，需要重新输入信息重新获取令牌\r\n                            client_id: values.client_id,\r\n                            client_secret: values.client_secret,\r\n                            partner_id: values.partner_id,\r\n                        })\r\n\r\n                        this.props.history.push('EzyVetSelectTime')\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n        }\r\n        let { client_id, client_secret, partner_id } = this.state\r\n\r\n        return (\r\n            <div id=\"eszVetLogin\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page1')}\r\n                />\r\n                <div className=\"text\">\r\n                    Please enter your user information\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Form\r\n                        {...formItemLayout}\r\n                        name=\"register\"\r\n                        onFinish={_next}\r\n                        initialValues={{\r\n                            client_id, client_secret, partner_id\r\n                        }}\r\n\r\n                        scrollToFirstError\r\n                    >\r\n                        <Form.Item\r\n                            name=\"client_id\"\r\n                            label=\"Client ID\"\r\n                            rules={[{ required: true, message: 'Please input your Client ID!', whitespace: true }]}\r\n\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"client_secret\"\r\n                            label=\"Client Secret\"\r\n                            rules={[{ required: true, message: 'Please input your Client Secret!', whitespace: true }]}\r\n                            hasFeedback\r\n                        >\r\n                            <Input.Password className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"partner_id\"\r\n                            label=\"Partner ID\"\r\n                            rules={[{ required: true, message: 'Please input your Partner ID!', whitespace: true }]}\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            {...tailFormItemLayout}\r\n                        >\r\n                            <div className=\"btn\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    htmlType=\"submit\"\r\n                                >\r\n                                    Next\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"remember\">\r\n                    <p>Stay Signed In:</p>\r\n                    <div className=\"box\" onClick={() => {\r\n                        let { isRemember } = this.state\r\n                        this.setState({\r\n                            isRemember: !isRemember\r\n                        })\r\n                        storage.isRemember = !isRemember\r\n                    }}>\r\n                        {this.state.isRemember && <img src={dui} alt=\"\" />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectScheduledExam.jsx",["789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectExam\\SelectExam.jsx",["817","818","819","820"],"//这是vetspire的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space\r\n\r\n} from 'antd';\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './selectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { fetchRequest1 } from '../../utils/FetchUtil'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2'\r\n\r\nlet storage = window.localStorage;\r\n\r\n\r\nexport default class SelectExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (window.screen.height < 1000) {\r\n      ipcRenderer.send('table')\r\n    } else {\r\n      ipcRenderer.send('big')\r\n    }\r\n    this._getData()\r\n    storage.identity = '1'\r\n\r\n  }\r\n  _getData = async () => {\r\n    this.setState({\r\n      api: storage.API,\r\n      id: storage.selectLocationId,\r\n      seleceID: storage.selectvetId\r\n    })\r\n    let time = new Date()\r\n    let updateAtStart = moment(time).format('YYYY-MM-DD')\r\n    console.log(time, updateAtStart);\r\n    let params = {\r\n      APIkey: storage.API,\r\n      providerId: storage.selectvetId,\r\n      updateAtStart\r\n    }\r\n    console.log('发送获取宠物列表数据：', params);\r\n    this.setState({ loading: true });\r\n    let arr = [\r\n      {\r\n        age: 10,\r\n        breed: \"american shorthair\",\r\n        gender: \"FEMALE\",\r\n        key: \"847571\",\r\n        owner: \"Emma Bunin\",\r\n        petName: \"Ruby\",\r\n        weight: \"100 LB\",\r\n      },\r\n      {\r\n        age: 7,\r\n        breed: \"labrador retriever\",\r\n        gender: \"MALE\",\r\n        key: \"847570\",\r\n        owner: \"Emma Bunin\",\r\n        petName: \"Wally\",\r\n        weight: \"68.4 LB\",\r\n      },\r\n      {\r\n        age: 11,\r\n        breed: \"french bulldog\",\r\n        gender: \"MALE\",\r\n        key: \"847569\",\r\n        owner: \"Jane Doe\",\r\n        petName: \"Charmander\",\r\n        weight: \"68.4 LB\",\r\n      },\r\n      {\r\n        age: 10,\r\n        breed: \"american shorthair\",\r\n        gender: \"FEMALE\",\r\n        key: \"847567\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Lemon\",\r\n        weight: \"22 LB\",\r\n      }, {\r\n        age: 9,\r\n        breed: \"golden retriever\",\r\n        gender: \"MALE\",\r\n        key: \"847566\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Zack\",\r\n        weight: \"100 LB\",\r\n      },\r\n      {\r\n        age: 9,\r\n        breed: \"american shorthair\",\r\n        gender: \"MALE\",\r\n        key: \"847568\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Oreo\",\r\n        weight: \"10.5 LB\",\r\n      }\r\n    ]\r\n\r\n\r\n    console.log('转换的数据：', arr);\r\n    let examData = []\r\n    let indexArr = []\r\n    for (let i = 0; i < arr.length; i++) {\r\n      let sendData = {\r\n        APIkey: storage.API,\r\n        patientId: arr[i].key\r\n      }\r\n      console.log('发送获取exam数据', sendData);\r\n\r\n      fetchRequest2('/VetSpire/selectExamByPatientId', 'POST', sendData)\r\n        .then(res => {\r\n          console.log('接收exam数据', i, res);\r\n          this.setState({ loading: false, spin: false });\r\n          indexArr.push(i)\r\n          if (res.flag === true) {\r\n            let examArr = res.data.encounters\r\n            for (let index = 0; index < examArr.length; index++) {\r\n              let chazhi = new Date().getTimezoneOffset()\r\n              let newTime = moment(new Date()).add(chazhi, 'm').format('YYYY-MM-DD');\r\n              let insertedAt = moment(examArr[index].insertedAt).format('YYYY-MM-DD')\r\n              if (newTime === insertedAt) {\r\n                let examId = examArr[index].vitals.id\r\n                let patientId = examArr[index].patient.id\r\n                let json = {\r\n                  examId,\r\n                  patientId,\r\n                  insertedAt: examArr[index].insertedAt,\r\n                  petName: examArr[index].patient.name\r\n                }\r\n                examData.push(json)\r\n              }\r\n\r\n            }\r\n          }\r\n          if (indexArr.length === arr.length) {\r\n\r\n            let tableArr = []\r\n            for (let j = 0; j < arr.length; j++) {\r\n              for (let k = 0; k < examData.length; k++) {\r\n                if (arr[j].key === examData[k].patientId) {\r\n                  let { age, breed, gender, owner, petName, weight } = arr[j]\r\n                  let { examId, insertedAt, patientId } = examData[k]\r\n                  let json1 = {\r\n                    age, breed, gender, owner, key: examId, petName, weight, insertedAt, patientId\r\n                  }\r\n                  tableArr.push(json1)\r\n                }\r\n              }\r\n            }\r\n\r\n            console.log('最终合成的数据：', tableArr);\r\n            let historyDataArr = this.ForwardRankingDate(tableArr, 'insertedAt')\r\n            // console.log(`日期排序后：----------`, historyDataArr);\r\n\r\n\r\n            this.setState({\r\n              data: historyDataArr\r\n            })\r\n          }\r\n\r\n        })\r\n        .catch(err => {\r\n          console.log('err', err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n  ForwardRankingDate = (data, p) => {\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      for (let j = 0; j < data.length - 1 - i; j++) {\r\n        // console.log(Date.parse(data[j][p]));\r\n        if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n          var temp = data[j];\r\n          data[j] = data[j + 1];\r\n          data[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    this._getData()\r\n  }\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        //   width: '30%',\r\n        ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        //   width: '20%',\r\n        ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        ...this.getColumnSearchProps('breed'),\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        // width: '30%',\r\n        ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        // width: '20%',\r\n        ...this.getColumnSearchProps('age'),\r\n      },\r\n      {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n        key: 'weight',\r\n        ...this.getColumnSearchProps('weight'),\r\n      },\r\n      {\r\n        title: 'Creation time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n\r\n          let newTime = moment(text).subtract(chazhi, 'm').format('YYYY-MM-DD HH:mm');\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      // {\r\n      //   title: '',\r\n      //   dataIndex: 'patientId',\r\n      //   key: 'patientId',\r\n      //   render: (text, record, index) => {\r\n      //     // console.log(text, record, index);\r\n      //     let chazhi = new Date().getTimezoneOffset()\r\n\r\n      //     let newTime = moment(text).subtract(chazhi, 'm').format('YYYY-MM-DD HH:mm');\r\n      //     return (\r\n      //       null\r\n      //     )\r\n\r\n      //   }\r\n      // },\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin } = this.state\r\n    return (\r\n\r\n      <div id=\"patient\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push({ pathname: '/page4' })}\r\n        />\r\n\r\n        <div className=\"textfa1\">\r\n          <div className=\"textfa\">\r\n            <div className=\"text\">Select Patient Exam</div>\r\n            <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n          </div>\r\n          <div className=\"r\" onClick={() => {\r\n            let electron = window.electron\r\n            electron.shell.openExternal('https://mella.vetspire.com/clients')\r\n          }}>+</div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            loading={loading}\r\n            locale={{ filterConfirm: <div>111</div> }}\r\n            pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true }}\r\n            onRow={(record) => {\r\n              return {\r\n                onClick: (event) => {\r\n                  console.log(record);\r\n                  let patientId = record.key\r\n                  let petName = record.petName\r\n\r\n                  console.log(patientId, petName);\r\n                  storage.selectExamId = record.key\r\n                  storage.selectPatientId = record.patientId\r\n\r\n                  storage.selectAge = record.age\r\n                  storage.selectBreed = record.breed\r\n                  storage.selectOwner = record.owner\r\n                  storage.selectWeight = record.weight\r\n                  storage.selectPetName = record.petName\r\n\r\n                  this.props.history.push({ pathname: '/page10', })\r\n                  // if (storage.isClinical === 'true') {\r\n                  //   console.log('---------', record.patientId);\r\n                  //   this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.patientId })\r\n                  // } else {\r\n                  //   this.props.history.push({ pathname: '/page10', })\r\n                  // }\r\n\r\n                }, // 点击行\r\n\r\n              };\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\editPetInfo\\EditPetInfo.jsx",["821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845"],"import React, { Component } from 'react'\r\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin } from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport dog from './../../assets/images/pinkdog.png'\r\nimport cat from './../../assets/images/pinkcat.png'\r\nimport redDog from './../../assets/images/reddog.png'\r\nimport redCat from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\nimport other from './../../assets/images/other.png'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nimport Close from './../../assets/img/close.png'\r\nimport nextImg from './../../assets/img/nextImg.png'\r\n\r\nimport dui from './../../assets/images/dui.png'\r\nimport female from './../../assets/images/female.png'\r\nimport male from './../../assets/images/male.png'\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport Avatar from './../avatar/Avatar'\r\nimport './editPetInfo.less'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport electronStore from '../../utils/electronStore';\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\nimport Button from './../../utils/button/Button'\r\nimport { connect } from 'react-redux';\r\nimport { petDetailInfoFun } from '../../store/actions';\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nlet url = 'https://www.mellaserver.com/api/mellaserver'\r\n// let url = 'http://192.168.0.36:8080/mellaserver'\r\nclass EditPetInfo extends Component {\r\n  state = {\r\n    dogImg: dog,\r\n    catImg: cat,\r\n    otherImg: other,\r\n    selectWZ: '',\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    api: '',\r\n    id: '',\r\n    seleceID: '',//医生id\r\n    petSpecies: 0,\r\n    unit: 1,\r\n    gender: 0,\r\n    isMix: false,\r\n    imageId: -1,\r\n    imgurl: '',\r\n    breedArr: [],\r\n    petSpeciesBreedId: '',\r\n    dogData: [],\r\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n    patientId: '',\r\n    petName: '',\r\n\r\n    petId: '',\r\n    lastName: '',\r\n    firstName: '',\r\n    breedName: '',\r\n\r\n    initpetName: '',\r\n    initpetId: '',\r\n    initlastName: '',\r\n    initfirstName: '',\r\n    initbreedName: '',\r\n    spin: false,\r\n    dogBreed: [],\r\n    catBreed: [],\r\n\r\n    oldPatientId: '',\r\n    searchBreed: '',\r\n    selectBreedJson: {},\r\n    confirmSelectBreedJson: {},\r\n    selectBreed: false,\r\n\r\n    doctorArr: [],\r\n    selectUser: false,\r\n    selectUserJson: {},\r\n    selectUserId: '',\r\n    confirmSelectUserJson: {},\r\n    petUrl: ''\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n\r\n\r\n\r\n\r\n    // if (this.props.location.participate) {\r\n    //   let props = this.props.location.participate\r\n    //   console.log(props);\r\n    //   this.setState({\r\n    //     patientId: props.patientId,\r\n    //     petId: props.petId,\r\n    //     oldPatientId: props.patientId,\r\n\r\n    //   }, () => {\r\n    //     this._getPetInfo()\r\n    //   })\r\n    //   console.log(props);\r\n    // } else {\r\n    //   this._getPetInfo()\r\n    // }\r\n    let { petDetailInfo } = this.props\r\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\r\n    if (!isWalkIn) {\r\n      if (!patientId || patientId === 'unknown') {\r\n        patientId = null\r\n      }\r\n      this.setState({\r\n        patientId,\r\n        petId,\r\n        oldPatientId: patientId,\r\n\r\n      }, () => {\r\n        this._getPetInfo()\r\n      })\r\n    }\r\n\r\n\r\n    let dogBreed = electronStore.get('dogBreed') || []\r\n    let catBreed = electronStore.get('catBreed') || []\r\n    this.setState({\r\n      dogBreed,\r\n      catBreed\r\n    })\r\n    this.getBreed('cat')\r\n    this.getBreed('dog')\r\n    this.getUser()\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  getBreed = (val) => {\r\n    let data = {}\r\n    switch (val) {\r\n      case 'dog':\r\n        data.speciesId = 2; break;\r\n\r\n      case 'cat':\r\n        data.speciesId = 1; break;\r\n    }\r\n\r\n    fetchRequest(`/pet/selectBreedBySpeciesId`, 'POST', data)\r\n      .then(res => {\r\n        // console.log('---', res);\r\n        if (res.code === 0) {\r\n          let arr = []\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName\r\n            }\r\n            arr.push(data)\r\n          })\r\n          if (val === 'dog') {\r\n            this.setState({\r\n              dogBreed: arr\r\n            })\r\n            electronStore.set('dogBreed', arr)\r\n          } else if (val === 'cat') {\r\n            this.setState({\r\n              catBreed: arr\r\n            })\r\n            electronStore.set('catBreed', arr)\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  getUser = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    fetchRequest(`/organization/listDoctorsByAdmin/${storage.lastOrganization}`, 'GET', params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              breedName: `${lastName} ${firstName}`,\r\n              petSpeciesBreedId: userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n\r\n      })\r\n  }\r\n\r\n  _getPetInfo = () => {\r\n    let { patientId, petId } = this.state\r\n    let datas = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.org = storage.lastOrganization\r\n    }\r\n    if (patientId && patientId !== 'undefined') {\r\n      datas.patientId = patientId\r\n    }\r\n    if (petId) {\r\n      datas.petId = petId\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n\r\n\r\n\r\n    console.log('入参：', datas);\r\n    fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n      .then(res => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log('>>>>>>>>>>>>>>', res);\r\n        if (res.flag === true) {\r\n          //有宠物，进入1\r\n          let datas = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            if (res.data[i].petId === this.state.petId) {\r\n              datas = res.data[i]\r\n              break\r\n            }\r\n          }\r\n          console.log('获取到宠物', datas);\r\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId } = datas\r\n\r\n          if (isMix !== true) {\r\n            isMix = false\r\n          }\r\n          petName = isNull(petName)\r\n          lastName = isNull(lastName)\r\n          firstName = isNull(firstName)\r\n          breedName = isNull(breedName)\r\n\r\n          let confirmSelectBreedJson = {}\r\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\r\n            confirmSelectBreedJson = {\r\n              name: breedName,\r\n              petSpeciesBreedId\r\n            }\r\n          }\r\n\r\n          url = isNull(url)\r\n          if (birthday != null) {\r\n            birthday = moment(birthday).format('MMMM D, YYYY')\r\n          }\r\n          else {\r\n            birthday = ''\r\n          }\r\n          if (gender === null || gender === NaN || `${gender}` === 'null' || `${gender}` === 'NaN') {\r\n            gender = 0\r\n          }\r\n          if (weight) {\r\n            weight = (weight * 2.2046).toFixed(1)\r\n          } else {\r\n            weight = ''\r\n          }\r\n\r\n\r\n          this.setState({\r\n            petId,\r\n            petName,\r\n            lastName,\r\n            firstName,\r\n            breedName,\r\n            isMix,\r\n            birthday,\r\n            weight,\r\n            imgurl: url,\r\n            gender,\r\n            petSpecies: speciesId,\r\n\r\n\r\n            initpetName: petName,\r\n            initlastName: lastName,\r\n            initfirstName: firstName,\r\n            confirmSelectBreedJson,\r\n            petSpeciesBreedId\r\n          })\r\n          switch (speciesId) {\r\n            case 1: this.selectWZ('cat'); break;\r\n            case 2: this.selectWZ('dog'); break;\r\n\r\n            default: this.selectWZ('other'); break;\r\n          }\r\n\r\n        } else {\r\n          message.destroy()\r\n          message.error('data load failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n        message.destroy()\r\n        message.error('data load failed')\r\n      })\r\n    const isNull = (value) => {\r\n      if (value === null || value === NaN || `${value}` === 'null' || `${value}` === 'NaN') {\r\n        return ''\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  /**------------------顶部end------------------------ */\r\n  selectWZ = (val) => {\r\n    let { catBreed, dogBreed } = this.state\r\n    switch (val) {\r\n      case 'dog':\r\n        this.setState({\r\n          catImg: cat,\r\n          dogImg: redDog,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n          breedArr: [].concat(dogBreed)\r\n        })\r\n\r\n        break;\r\n\r\n      case 'cat':\r\n        this.setState({\r\n          catImg: redCat,\r\n          dogImg: dog,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n          breedArr: [].concat(catBreed)\r\n        })\r\n\r\n        break;\r\n\r\n      case 'other':\r\n        this.setState({\r\n          catImg: cat,\r\n          dogImg: dog,\r\n          otherImg: redother,\r\n          selectWZ: val,\r\n          breedArr: []\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  _petSpecies = () => {\r\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n\r\n    this.avatar = imgurl ? imgurl : selectphoto\r\n\r\n    return (\r\n      <div className=\"petSpecies\"\r\n        style={{ marginTop: mTop(30) }}\r\n      >\r\n        <div className=\"l\">\r\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n          <div className=\"selectSpecies\">\r\n            <ul>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog'\r\n\r\n                    onClick={() => { this.selectWZ('dog') }}>\r\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Dog\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Cat\r\n                </div>\r\n              </li>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Other\r\n                </div>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n\r\n\r\n\r\n        </div>\r\n        <div className=\"r\">\r\n          {/* <div className=\"img\"\r\n                    style={{ width: px(110), height: px(110) }}\r\n                >\r\n                    <div className=\"ciral\" onClick={() => {\r\n                        let file = document.getElementById('f')\r\n                        file.click();\r\n                    }}>\r\n                        <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                        <input type=\"file\" accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\" className=\"uploadImg\" id=\"f\" onChange={(e) => {\r\n                            console.log(e);\r\n                            let $target = e.target || e.srcElement\r\n                            if ($target.files.length === 0) {\r\n                                return;\r\n                            }\r\n                            let file = $target.files[0]\r\n                            var reader = new FileReader()                   //创建文件阅读器实例\r\n                            reader.readAsDataURL(file)\r\n                            reader.onload = (data) => {\r\n                                let res = data.target || data.srcElement\r\n                                console.dir(document.getElementById('touxiang'));\r\n                                document.getElementById('touxiang').src = res.result\r\n\r\n\r\n                                const formData = new FormData();\r\n                                formData.append('img', file);\r\n                                fetch(`${url}/image/uploadImage`, {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                    },\r\n                                    body: formData\r\n                                })\r\n                                    .then((response) => response.json())\r\n                                    .then((res) => {\r\n                                        console.log(res);\r\n                                        if (res.flag === true) {\r\n                                            this.setState({\r\n                                                imageId: res.data.imageId,\r\n                                                imgurl: res.data.url\r\n                                            })\r\n                                        }\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        console.log(err);\r\n                                    });\r\n                            }\r\n\r\n                        }} />\r\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                    </div>\r\n                </div> */}\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('所有的信息', val);\r\n                if (val.url) {\r\n                  this.setState({\r\n                    petUrl: val.url\r\n                  })\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _petName = () => {\r\n\r\n    const onPanelChange = (value, mode) => {\r\n      console.log('-----', value, mode);\r\n    }\r\n    let birthday = this.state.birthday\r\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Name</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.initpetName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n                  initpetName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p >Pet Birthday</p>\r\n          <div className=\"infoInput\" >\r\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n              document.getElementById('calendar').style.display = 'block'\r\n            }}>{this.state.birthday}</p>\r\n            <div className=\"calendar\" id=\"calendar\">\r\n              <Calendar\r\n                fullscreen={false}\r\n                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n                  const start = 0;\r\n                  const end = 12;\r\n                  const monthOptions = [];\r\n\r\n                  const current = value.clone();\r\n                  const localeData = value.localeData();\r\n                  const months = [];\r\n                  for (let i = 0; i < 12; i++) {\r\n                    current.month(i);\r\n                    months.push(localeData.monthsShort(current));\r\n                  }\r\n\r\n                  for (let index = start; index < end; index++) {\r\n                    monthOptions.push(\r\n                      <Select.Option className=\"month-item\" key={`${index}`}>\r\n                        {months[index]}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  const month = value.month();\r\n\r\n                  const year = value.year();\r\n                  const options = [];\r\n                  for (let i = year - 10; i < year + 10; i += 1) {\r\n                    options.push(\r\n                      <Select.Option key={i} value={i} className=\"year-item\">\r\n                        {i}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div style={{ padding: 8 }}>\r\n                      <Row gutter={8}>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            className=\"my-year-select\"\r\n                            onChange={(newYear) => {\r\n                              const now = value.clone().year(newYear);\r\n                              onChange(now);\r\n                            }}\r\n                            value={String(year)}\r\n                          >\r\n                            {options}\r\n                          </Select>\r\n                        </Col>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            value={String(month)}\r\n                            onChange={(selectedMonth) => {\r\n                              const newValue = value.clone();\r\n                              newValue.month(parseInt(selectedMonth, 10));\r\n                              onChange(newValue);\r\n                            }}\r\n                          >\r\n                            {monthOptions}\r\n                          </Select>\r\n                        </Col>\r\n                        {/* <Col>\r\n                          <div className=\"btn\" onClick={() => {\r\n                            document.getElementById('calendar').style.display = 'none'\r\n                          }}>\r\n                            Choose this date\r\n                          </div>\r\n\r\n                        </Col> */}\r\n                      </Row>\r\n                    </div>\r\n                  );\r\n                }}\r\n                value={birthdayValue}\r\n                onSelect={(value) => {\r\n                  console.log(value);\r\n                  this.setState({\r\n                    birthday: moment(value).format('MMMM D, YYYY')\r\n                  })\r\n                  document.getElementById('calendar').style.display = 'none'\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _ownName = () => {\r\n    let { confirmSelectUserJson } = this.state\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\r\n      >\r\n        <div className=\"l\">\r\n\r\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.patientId}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                  intFlog: true\r\n\r\n                })\r\n                if (item.target.value !== errPatientId) {\r\n                  message.destroy()\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                message.destroy()\r\n                console.log('我离开光标了');\r\n                if (this.state.patientId === this.state.oldPatientId) {\r\n                  return\r\n                }\r\n\r\n                let params = {\r\n                  patientId: this.state.patientId,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n\r\n                fetchRequest(`/pet/checkPatientId`, \"GET\", params)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.flag === false) {\r\n                      errPatientId = params.patientId\r\n                      message.destroy()\r\n                      message.error('This patient ID is already occupied, please change to a new one', 0)\r\n                    } else {\r\n                      errPatientId = ''\r\n                    }\r\n\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n\r\n                  })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n\r\n        <div className=\"r\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\r\n            onClick={() => {\r\n\r\n              this.setState({\r\n                // selectUser: true\r\n              })\r\n            }}\r\n          >\r\n\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n\r\n    // return (\r\n    //   <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n    //     <div className=\"l\">\r\n    //       <p >Owner First Name</p>\r\n    //       <div className=\"infoInput\">\r\n    //         <Input bordered={false}\r\n    //           value={this.state.initfirstName}\r\n    //           onChange={(item) => {\r\n\r\n    //             this.setState({\r\n    //               firstName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n    //               initfirstName: item.target.value\r\n    //             })\r\n    //           }}\r\n\r\n    //         />\r\n    //       </div>\r\n    //     </div>\r\n\r\n    //     <div className=\"r\">\r\n    //       <p >Owner Last Name</p>\r\n    //       <div className=\"infoInput\">\r\n    //         <Input bordered={false}\r\n    //           value={this.state.initlastName}\r\n    //           onChange={(item) => {\r\n\r\n    //             this.setState({\r\n    //               lastName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n    //               initlastName: item.target.value\r\n    //             })\r\n    //           }}\r\n    //         />\r\n    //       </div>\r\n    //     </div>\r\n    //   </div>\r\n\r\n    // )\r\n  }\r\n  _select = (value, data) => {\r\n    console.log(value, data);  //value的值为id\r\n    this.setState({\r\n      petSpeciesBreedId: value,\r\n      breedName: data.children\r\n    })\r\n  }\r\n  _primaryBreed = () => {\r\n    let options = null\r\n    // switch (this.state.petSpecies) {\r\n    //     case 2: options = this.state.catData.map(d => <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>); break;\r\n    //     case 1: options = this.state.dogData.map(d => <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>); break;\r\n    // }\r\n    options = this.state.breedArr.map(d => <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>);\r\n    let { breedName, confirmSelectBreedJson } = this.state\r\n    // console.log('-----breedName:', confirmSelectBreedJson);\r\n\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\r\n        <div className=\"l\">\r\n          {/* <p >Primary Breed</p>\r\n          <div className=\"infoInput\">\r\n            <Select\r\n              showSearch\r\n              style={{ width: '100%' }}\r\n              bordered={false}\r\n              value={breedName}\r\n              // size = {'small'}        \r\n              placeholder=\"Search to Select\"\r\n              optionFilterProp=\"children\"\r\n              listHeight={256}\r\n              onSelect={(value, data) => this._select(value, data)}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n            >\r\n              {options}\r\n            </Select>\r\n          </div> */}\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              this.setState({\r\n                selectBreed: true\r\n              })\r\n            }}\r\n          >\r\n\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"r\" >\r\n          <div className=\"max\">\r\n            Mix?\r\n            <div className=\"selected\"\r\n              onClick={() => this.setState({\r\n                isMix: !this.state.isMix\r\n              })}\r\n            >\r\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _weight = () => {\r\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n    switch (this.state.unit) {\r\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n    }\r\n\r\n    switch (this.state.gender) {\r\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Weight</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.weight}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  weight: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n            <div className=\"ibKg\">\r\n              <div className=\"ibs\"\r\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                onClick={() => {\r\n                  if (this.state.unit === 2) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight * 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                }}\r\n              >Ibs</div>\r\n              <div className=\"kgs\"\r\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                onClick={() => {\r\n\r\n                  if (this.state.unit === 1) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight / 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                  this.setState({ unit: 2 })\r\n                }}\r\n              >kgs</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n          <div className=\"gender\">\r\n            <div className=\"selectGender\">\r\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                <div className=\"femaleCiral\"\r\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 1 })}\r\n                >\r\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                </div>\r\n                Female\r\n              </div>\r\n              <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                <div className=\"maleCiral\"\r\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 0 })}\r\n                >\r\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n                Male\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { closeColor, closebgc, minbgc } = this.state\r\n\r\n    return (\r\n      <div id=\"editPetInfo\">\r\n        {/* 头部 */}\r\n        <div className=\"close1\">\r\n          {/* 菜单 */}\r\n          <div className=\"menu\">\r\n\r\n            <MyIcon type='icon-fanhui4' className=\"icon\" onClick={() => {\r\n              // if (storage.goEditPet === \"mesasure\") {\r\n              //   this.props.history.push({ pathname: 'page8', participate: { patientId: this.state.patientId } })\r\n              // } else {\r\n              //   this.props.history.goBack()\r\n              // }\r\n              this.props.history.goBack()\r\n            }} />\r\n          </div>\r\n          <div className=\"text\">mella</div>\r\n          <div className='maxmin'>\r\n            <div\r\n              className=\"min iconfont icon-64\"\r\n              onClick={this._min}\r\n              onMouseEnter={this._minMove}\r\n              onMouseLeave={this._minLeave}\r\n              style={{ backgroundColor: minbgc }}\r\n            ></div>\r\n\r\n            <div\r\n              className=\"max iconfont icon-guanbi2\"\r\n              onClick={this._close}\r\n              onMouseEnter={this._closeMove}\r\n              onMouseLeave={this._closeLeave}\r\n              style={{ backgroundColor: closebgc, color: closeColor }}\r\n            ></div>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"editPetInfo_top\">\r\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\r\n          {this._petSpecies()}\r\n          {this._petName()}\r\n          {this._ownName()}\r\n          {this._primaryBreed()}\r\n          {this._weight()}\r\n        </div>\r\n        <div className=\"editPetInfo_foot\">\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson } = this.state\r\n              console.log('生日：', birthday);\r\n              if (unit === 1) {\r\n                weight = (0.45359 * weight).toFixed(2)\r\n              }\r\n\r\n              let data = {\r\n                petName,\r\n                weight: parseFloat(weight),\r\n                gender,\r\n                firstName,\r\n                lastName,\r\n              }\r\n              if (birthday) {\r\n                data.birthday = moment(birthday).format('YYYY-MM-DD')\r\n              }\r\n              if (imageId !== -1) {\r\n                data.imageId = imageId\r\n              }\r\n              // if (breedName) {\r\n              //   data.breedName = breedName\r\n              // }\r\n              if (confirmSelectBreedJson.name) {\r\n                data.breedName = confirmSelectBreedJson.name\r\n              }\r\n              if (confirmSelectUserJson.petSpeciesBreedId) {\r\n                data.userId = confirmSelectUserJson.petSpeciesBreedId\r\n              }\r\n\r\n              console.log('------', data);\r\n              this.setState({\r\n                spin: true\r\n              })\r\n              fetchRequest(`/pet/updatePetInfo/${petId}`, 'POST', data)\r\n                .then(res => {\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  console.log(res);\r\n                  if (res.flag === true) {\r\n                    try {\r\n                      if (storage.identity === '3') {\r\n                        let data = JSON.parse(storage.doctorExam)\r\n                        data.petName = petName\r\n                        data.weight = weight\r\n                        data.gender = gender\r\n                        data.patientId = this.state.patientId\r\n                        if (birthday) {\r\n                          data.age = moment(new Date()).diff(moment(birthday), 'years')\r\n                        }\r\n                        if (confirmSelectBreedJson.name) {\r\n                          data.breed = confirmSelectBreedJson.name\r\n                        }\r\n                        if (this.state.petUrl) {\r\n                          data.url = this.state.petUrl\r\n                        }\r\n\r\n                        storage.doctorExam = JSON.stringify(data)\r\n                      }\r\n                    } catch (error) {\r\n\r\n                    }\r\n                    console.log('从哪来', storage.goEditPet);\r\n                    // if (storage.goEditPet === \"mesasure\") {\r\n                    //   this.props.history.replace({ pathname: 'page8', participate: { patientId: this.state.patientId } })\r\n                    // } else {\r\n                    //   this.props.history.goBack()\r\n                    // }\r\n\r\n                    this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId })\r\n                    this.props.history.goBack()\r\n\r\n\r\n\r\n                  } else {\r\n                    message.error('Update failed')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  console.log(err);\r\n                })\r\n            }}\r\n\r\n          >Save Changes</div>\r\n\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n        <MyModal\r\n          // visible={true}\r\n          visible={this.state.selectBreed}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div>\r\n\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        selectBreed: false,\r\n                        selectBreedJson: {}\r\n                      })\r\n                    }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"text\" >Choose Breed</div>\r\n\r\n                <div className=\"searchBox\">\r\n\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search name\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.searchBreed}\r\n                    onChange={(item) => {\r\n\r\n                      this.setState({\r\n                        searchBreed: item.target.value\r\n                      })\r\n                    }}\r\n\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\" >\r\n                <PhoneBook\r\n                  listDate={this.state.breedArr}\r\n                  confirmSelectBreed={this.state.petSpeciesBreedId}\r\n                  selectFun={(val) => {\r\n                    // console.log('从子组件传来的数据', val);\r\n                    this.setState({\r\n                      selectBreedJson: val,\r\n                      petSpeciesBreedId: val.petSpeciesBreedId\r\n                    })\r\n\r\n\r\n                  }}\r\n                  searchText={this.state.searchBreed}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Select'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      confirmSelectBreedJson: this.state.selectBreedJson,\r\n                      selectBreed: false\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n        />\r\n\r\n        <MyModal\r\n          visible={this.state.selectUser}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div>\r\n\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        selectUser: false,\r\n                        selectUserJson: {}\r\n                      })\r\n                    }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"text\" >Choose Parents</div>\r\n\r\n                <div className=\"searchBox\">\r\n\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search name\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.searchBreed}\r\n                    onChange={(item) => {\r\n\r\n                      this.setState({\r\n                        searchBreed: item.target.value\r\n                      })\r\n                    }}\r\n\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\" >\r\n                <PhoneBook\r\n                  listDate={this.state.doctorArr}\r\n                  confirmSelectBreed={this.state.selectUserId}\r\n                  selectFun={(val) => {\r\n\r\n                    this.setState({\r\n                      selectUserJson: val,\r\n                      selectUserId: val.petSpeciesBreedId\r\n                    })\r\n\r\n\r\n                  }}\r\n                  searchText={this.state.searchBreed}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Select'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      confirmSelectUserJson: this.state.selectUserJson,\r\n                      selectUser: false\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petDetailInfo: state.petReduce.petDetailInfo\r\n  }),\r\n  { petDetailInfoFun }\r\n)(EditPetInfo)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\SignIn.jsx",["846","847","848","849","850","851","852","853","854","855","856","857","858","859","860"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\forgotPassword\\ForgotPassword.jsx",["861","862","863","864","865","866"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n  Spin\r\n\r\n} from 'antd';\r\n// import { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './forgotPassword.less'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { px, mTop, pX, MTop } from '../../../utils/px';\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../../assets/images/errorIcon.png'\r\n\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount () {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n\r\n\r\n            case 11013:\r\n              console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n              break\r\n\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    fetchRequest(`/user/forgetPwd/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n    fetchRequest(`/user/checkForgetPassword/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    fetchRequest(`/user/sendActivateEmail/${this.state.email}`, \"GET\", \"\")\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyWorkplace\\FindMyWorkplace.jsx",["867","868"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\help\\Help.jsx",["869"],"import React, { Component } from 'react'\r\n\r\nimport Heard from './../../../utils/heard/Heard'\r\nimport using from './../../../assets/images/using.png'\r\nimport measuring from './../../../assets/images/measuring.png'\r\nimport unassigned from './../../../assets/images/unassigned.png'\r\nimport adding from './../../../assets/images/adding.png'\r\nimport email from './../../../assets/images/email.png'\r\nimport phone from './../../../assets/images/phone.png'\r\nimport './help.less'\r\nimport { px } from './../../../utils/px'\r\nlet storage = window.localStorage;\r\n\r\nexport default class Help extends Component {\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let list = [\r\n      {\r\n        img: using,\r\n        title: 'Using the app'\r\n      }, {\r\n        img: measuring,\r\n        title: 'Measuring with Mella'\r\n      }, {\r\n        img: unassigned,\r\n        title: 'Unassigned Readings'\r\n      },\r\n      {\r\n        img: adding,\r\n        title: 'Adding New Users'\r\n      },\r\n    ]\r\n    let num = 150 / list.length\r\n    let mar = num + 'px'\r\n    return (\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard\r\n            menu8Click={() => {\r\n              switch (storage.identity) {\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\" style={{ marginTop: px(25) }}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className=\"list\" style={{ marginTop: px(50) }}>\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}\r\n                  style={{ width: px(150), height: px(150) }}\r\n                >\r\n\r\n                  <>\r\n                    <img src={data.img} alt=\"\" style={{ height: px(80) }} />\r\n                    <p style={{ fontSize: px(19) }}>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"popularArticles\" style={{ marginTop: px(80) }}>\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n\r\n          <div className=\"time\" style={{ marginTop: px(40) }}>\r\n            <p style={{ fontSize: px(30) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(30) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" style={{ height: px(50) }} />\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              style={{ fontSize: px(18) }}\r\n              onClick={(e) => {\r\n                // e.preventDefault();\r\n                // let electron = window.electron\r\n                // electron.shell.openExternal(' https://www.mella.ai/')\r\n                // return false;\r\n              }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" style={{ height: px(50) }} />\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>Bark at Us!</div>\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>201.977.6411</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\invite\\Invite.jsx",["870","871","872","873","874","875","876"],"import React, { Component, } from 'react'\r\nimport {\r\n  Tag,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n  // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './invite.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nlet storage = window.localStorage;\r\n\r\nexport default class Invite extends Component {\r\n\r\n  state = {\r\n\r\n    tags: [],\r\n    inputVisible: false,\r\n    inputValue: '',\r\n    editInputIndex: -1,\r\n    editInputValue: '',\r\n    visible: false\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  handleClose = removedTag => {\r\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    console.log(tags);\r\n    this.setState({ tags });\r\n  };\r\n\r\n  showInput = () => {\r\n    this.setState({ inputVisible: true }, () => this.input.focus());\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleInputConfirm = () => {\r\n    const { inputValue } = this.state;\r\n    let { tags } = this.state;\r\n    if (inputValue && tags.indexOf(inputValue) === -1) {\r\n      console.log('输入的内容为：', inputValue);\r\n      message.destroy()\r\n      fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.code === 11011) {\r\n            console.log('邮箱号以被注册，是否忘记密码');\r\n            tags = [...tags, inputValue];\r\n            console.log(tags);\r\n\r\n            this.setState({\r\n              tags,\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n          else {\r\n            message.error('This mailbox was not found!', 3)\r\n            this.setState({\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error(`Error:${err.message}`)\r\n          console.log('检测邮箱号的接口出错了', err);\r\n        })\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  saveInputRef = input => {\r\n    this.input = input;\r\n  };\r\n\r\n  saveEditInputRef = input => {\r\n    this.editInput = input;\r\n  };\r\n\r\n  _next = () => {\r\n    message.destroy()\r\n    let { tags } = this.state\r\n    let userId = storage.userId\r\n    let organizationId = storage.lastOrganization\r\n    console.log({ tags, userId, organizationId });\r\n    if (tags.length === 0) {\r\n      message.error('Please enter the invitation email')\r\n      return\r\n    }\r\n    this.setState({\r\n      visible: true\r\n    })\r\n    fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('成功，跳转');\r\n          message.success('Invitation successful', 3)\r\n          this.props.history.goBack()\r\n\r\n        } else {\r\n          message.error('Invitation failed')\r\n\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n  render () {\r\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n    console.log('---', editInputIndex);\r\n    return (\r\n      <div id=\"inviteTeam\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n          <div className=\"text\">Invite your Team</div>\r\n\r\n          <div className=\"addF\">\r\n            <p>To:</p>\r\n            <div className=\"add\">\r\n\r\n              <>\r\n                {tags.map((tag, index) => {\r\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                  const tagElem = (\r\n                    <Tag\r\n                      className=\"edit-tag\"\r\n                      key={tag}\r\n                      closable={true}\r\n                      onClose={() => this.handleClose(tag)}\r\n                    >\r\n                      <span>\r\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                      </span>\r\n                    </Tag>\r\n                  );\r\n                  return isLongTag ? (\r\n                    <Tooltip title={tag} key={tag}>\r\n                      {tagElem}\r\n                    </Tooltip>\r\n                  ) : (\r\n                    tagElem\r\n                  );\r\n                })}\r\n                {inputVisible && (\r\n                  <Input\r\n                    ref={this.saveInputRef}\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    className=\"tag-input\"\r\n                    value={inputValue}\r\n                    onChange={this.handleInputChange}\r\n                    onBlur={this.handleInputConfirm}\r\n                    onPressEnter={this.handleInputConfirm}\r\n                  />\r\n                )}\r\n                {!inputVisible && (\r\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                    <PlusOutlined />Press Enter to add mailbox\r\n                  </Tag>\r\n                )}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn\"\r\n          style={{ padding: `${px(40)}px 0` }}\r\n        >\r\n\r\n          {/* <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._next}\r\n            text={'Send'}\r\n          >\r\n\r\n          </Button> */}\r\n\r\n          <Button\r\n\r\n            onClick={this._next}\r\n            text={'Send'}\r\n            textBoxStyle={{ height: px(45), width: '45%' }}\r\n          >\r\n\r\n          </Button>\r\n        </div>\r\n        <MyModal visible={this.state.visible} />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\ConnectWorkplace.jsx",["877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n    Switch,\r\n    Select,\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from '../../../utils/button/Button'\r\nimport electronStore from '../../../utils/electronStore'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport parent from './../../../assets/img/parent.png'\r\nimport dog from '../../../assets/images/reddog.png'\r\nimport cat from '../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport moment from 'moment'\r\nimport './connectWorkplace.less'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class ConnectWorkplace extends Component {\r\n\r\n    state = {\r\n        orgArr: [],\r\n        workplaceJson: {},\r\n        connectionKey: '',\r\n        selectOrgId: -1,\r\n        selectRoleId: ''\r\n    }\r\n    componentDidMount() {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        let { height, width } = window.screen\r\n        ipcRenderer.send('Lowbig')\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n\r\n        let userWorkplace = []\r\n        try {\r\n            userWorkplace = JSON.parse(storage.userWorkplace) || []\r\n        } catch (error) {\r\n            console.log('字符串转对象失败', error);\r\n        }\r\n        /*orgArr的格式为[{\r\n          organizationId:1,\r\n          organizationName:'11111',\r\n          connectionKey:''\r\n        }]\r\n        \r\n         workplace:{\r\n           1:{\r\n              workplaceId:1,\r\n              workplaceName:'122334\r\n            },\r\n         }\r\n        */\r\n        let orgArr = [], workplaceJson = {}\r\n        // console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\r\n        for (let i = 0; i < userWorkplace.length; i++) {\r\n            let element = userWorkplace[i]\r\n            // console.log('每一项的值：', element);\r\n            if (element.organizationEntity && element.workplaceEntity) {\r\n                let { organizationEntity, workplaceEntity, roleId } = element\r\n                const { name, organizationId, connectionKey } = organizationEntity\r\n                const { workplaceName, workplaceId } = workplaceEntity\r\n\r\n                if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n                    this.setState({\r\n                        workplaceName,\r\n                        workplaceId: storage.lastWorkplaceId\r\n                    })\r\n                }\r\n\r\n                if (`${organizationId}` === storage.lastOrganization) {\r\n                    this.setState({\r\n                        organizationName: name,\r\n                        organizationId: storage.lastOrganization,\r\n                        selectOrgId: storage.lastOrganization\r\n                    })\r\n                }\r\n\r\n                let orgRepeatFlog = false, repeatFlogNum = -1\r\n                for (let j = 0; j < orgArr.length; j++) {\r\n                    if (orgArr[j].organizationId === organizationId) {\r\n                        orgRepeatFlog = true\r\n                        repeatFlogNum = j\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if (orgRepeatFlog) {\r\n                    let workplace = {\r\n                        workplaceName, workplaceId\r\n                    }\r\n                    let id = orgArr[repeatFlogNum].organizationId\r\n                    workplaceJson[`${id}`] = workplace\r\n                } else {\r\n                    let connectKey = connectionKey || ''\r\n                    let json = {\r\n                        organizationId,\r\n                        organizationName: name,\r\n                        connectionKey: connectKey,\r\n                        roleId,\r\n\r\n                    }\r\n                    let workplace = [{\r\n                        workplaceName, workplaceId\r\n                    }]\r\n                    workplaceJson[`${organizationId}`] = workplace\r\n\r\n                    orgArr.push(json)\r\n                }\r\n            }\r\n        }\r\n        // console.log('-----转换后的组织信息--', orgArr, workplaceJson);\r\n        this.setState({\r\n            orgArr,\r\n            workplaceJson,\r\n            connectionKey: storage.connectionKey,\r\n            selectRoleId: storage.roleId,\r\n            connectionKey: storage.connectionKey\r\n        })\r\n\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        // console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        let { height, width } = window.screen\r\n        let windowsHeight = height > width ? width : height\r\n        ipcRenderer.send('Lowbig')\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let { orgArr, selectOrgId } = this.state\r\n        let option = orgArr.map((item, index) => {\r\n            let bac = `${selectOrgId}` === `${item.organizationId}` ? '#e1206d' : '#fff'\r\n            let col = `${selectOrgId}` === `${item.organizationId}` ? '#fff' : '#000'\r\n            return <li key={`${item.organizationId}`}\r\n                style={{ background: bac, color: col }}\r\n                onClick={() => {\r\n\r\n                    this.setState({\r\n                        selectOrgId: item.organizationId,\r\n                        connectionKey: item.connectionKey,\r\n                        selectRoleId: item.roleId\r\n                    })\r\n                    // storage.roleId = item.roleId\r\n                }}\r\n            >\r\n                <div className=\"org\" style={{ fontSize: px(16), }}>{item.organizationName}</div>\r\n\r\n            </li>\r\n        })\r\n        return (\r\n            <div id=\"connectworkplace\">\r\n                <div className=\"heard\">\r\n                    <Heart\r\n                        onReturn={() => {\r\n                            this.props.history.goBack()\r\n                        }}\r\n                        onSearch={(data) => {\r\n\r\n                            storage.doctorExam = JSON.stringify(data)\r\n\r\n                            storage.doctorList = JSON.stringify(this.state.data)\r\n                            if (storage.isClinical === 'true') {\r\n                                this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n                            } else {\r\n                                this.props.history.push({ pathname: '/page10', })\r\n                            }\r\n                        }}\r\n                        menu8Click={() => {\r\n                            // console.log('--', storage.identity);\r\n                            switch (storage.identity) {\r\n                                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                                    break;\r\n                                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                                    break;\r\n                                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                                    break;\r\n\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n\r\n                <div className=\"body\" >\r\n                    <div className=\"top\">\r\n                        <div className=\"title flex\">\r\n                            <p style={{ fontSize: px(24), fontWeight: '800' }}>Connected Workplaces</p>\r\n                            <div className=\"addbtn flex\" style={{ height: px(45) }}\r\n                                onClick={() => this.props.history.push('/menuOptions/NewOrg')}\r\n                            >\r\n\r\n                                <p>+ Add Workplace</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"tablebox\">\r\n                            <div className=\"table\" style={{ height: px(220) }}>\r\n                                <ul>\r\n                                    {option}\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"center\"></div>\r\n                    <div className=\"footer flex\">\r\n                        <div className=\"saveBtn flex\" style={{ height: px(45) }}\r\n                            onClick={() => {\r\n                                let { selectOrgId, selectRoleId, connectionKey, workplaceJson } = this.state\r\n                                // console.log({ selectOrgId, selectRoleId, connectionKey, workplaceJson });\r\n                                storage.roleId = selectRoleId\r\n                                storage.lastOrganization = selectOrgId\r\n                                try {\r\n                                    let key = parseInt(selectOrgId)\r\n                                    let lastWorkplaceId = workplaceJson[key][0].workplaceId\r\n                                    // console.log(lastWorkplaceId);\r\n                                    storage.lastWorkplaceId = lastWorkplaceId\r\n                                } catch (error) {\r\n\r\n                                }\r\n                                storage.connectionKey = connectionKey\r\n                                this.props.history.replace('/menuOptions/settings')\r\n\r\n                            }}\r\n                        >\r\n                            <p style={{ fontSize: px(18) }}>Save Changes</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* <MyModal visible={this.state.loading} /> */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\InviteTeam.jsx",["895","896","897","898","899","900","901","902","903","904"],"import React, { Component, } from 'react'\r\nimport {\r\n    Tag,\r\n    Input,\r\n    Tooltip,\r\n    message,\r\n    // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './inviteTeam.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\n\r\nexport default class Team extends Component {\r\n\r\n    state = {\r\n\r\n        tags: [],\r\n        inputVisible: false,\r\n        inputValue: '',\r\n        editInputIndex: -1,\r\n        editInputValue: '',\r\n        visible: false\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n\r\n        //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    }\r\n    componentWillUnmount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n    handleClose = removedTag => {\r\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n        console.log(tags);\r\n        this.setState({ tags });\r\n    };\r\n\r\n    showInput = () => {\r\n        this.setState({ inputVisible: true }, () => this.input.focus());\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({ inputValue: e.target.value });\r\n    };\r\n\r\n    handleInputConfirm = () => {\r\n        const { inputValue } = this.state;\r\n        let { tags } = this.state;\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n            console.log('输入的内容为：', inputValue);\r\n            message.destroy()\r\n            fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n                .then(res => {\r\n\r\n\r\n                    console.log('检测邮箱存不存在', res);\r\n\r\n                    if (res.code) {\r\n                        switch (res.code) {\r\n\r\n                            case 11011:\r\n                                console.log('邮箱存在，发送邮件');\r\n                                tags = [...tags, inputValue];\r\n                                console.log(tags);\r\n\r\n                                this.setState({\r\n                                    tags,\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n                            case 11012:\r\n                                console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n                            case 11013:\r\n                                console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n                            case 11014:\r\n                                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                                message.error('This mailbox was not found!', 3)\r\n                                this.setState({\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n\r\n                        }\r\n                    } else {\r\n                        console.log('系统错误', res);\r\n                        message.error('system error')\r\n                        this.setState({\r\n                            spin: false\r\n                        })\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                    message.error(`Error:${err.message}`)\r\n                    console.log('检测邮箱号的接口出错了', err);\r\n                })\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    saveInputRef = input => {\r\n        this.input = input;\r\n    };\r\n\r\n    saveEditInputRef = input => {\r\n        this.editInput = input;\r\n    };\r\n\r\n    _next = () => {\r\n        message.destroy()\r\n        let { tags } = this.state\r\n        let { userId } = temporaryStorage.logupSuccessData\r\n        let { organizationId } = temporaryStorage.logupOrganization\r\n        console.log({ tags, userId, organizationId });\r\n        if (tags.length === 0) {\r\n            this._logIn()\r\n        }\r\n        this.setState({\r\n            visible: true\r\n        })\r\n        console.log('入参:', tags);\r\n        fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                    console.log('成功，跳转');\r\n                    message.success('Invitation successful', 3)\r\n                    this._logIn()\r\n                } else {\r\n                    this.setState({\r\n                        visible: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n                message.error(err.message, 3)\r\n            })\r\n    }\r\n    _logIn = () => {\r\n\r\n        let storage = window.localStorage;\r\n        let sign = storage.saveSign\r\n        try {\r\n            sign = JSON.parse(sign)\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n        let { email, hash } = sign\r\n        let params = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n            identityTypeId: '1'\r\n        }\r\n        console.log('登录入参:', params);\r\n        fetchRequest('/user/mellaLogin', 'POST', params)\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                if (res.status && res.status === 404) {\r\n                    message.error('system error');\r\n                    return\r\n                }\r\n                if (res.code === 10001 && res.msg === '账号错误') {\r\n                    message.error('Account error');\r\n                    return\r\n                }\r\n                if (res.code === 10002 && res.msg === '密码错误') {\r\n                    message.error('wrong password')\r\n                    return;\r\n                }\r\n                if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n                    message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n                    return\r\n                }\r\n\r\n                if (res.code === 0 && res.msg === 'success') {\r\n                    console.log('账号密码正确，登录进去了');\r\n                    let { userWorkplace, lastOrganization, token } = res.success\r\n                    storage.token = token\r\n                    storage.userId = ''\r\n\r\n                    storage.userId = res.success.userId\r\n                    storage.roleId = res.success.roleId\r\n\r\n                    //每次登陆后清空宠物列表缓存的数据\r\n                    storage.doctorList = ''\r\n                    storage.defaultCurrent = ''\r\n\r\n\r\n\r\n\r\n                    if (userWorkplace) {\r\n                        storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                        let connectionKey = ''\r\n                        for (let i = 0; i < userWorkplace.length; i++) {\r\n                            const element = userWorkplace[i];\r\n                            if (element.organizationEntity) {\r\n                                if (element.organizationEntity.organizationId === lastOrganization) {\r\n\r\n                                    if (element.organizationEntity.connectionKey) {\r\n                                        connectionKey = element.organizationEntity.connectionKey\r\n                                    }\r\n                                    if (element.roleId) {\r\n                                        console.log(element.roleId);\r\n                                        storage.roleId = element.roleId\r\n                                    }\r\n\r\n                                    break\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        console.log('----------key值为：', connectionKey);\r\n                        storage.connectionKey = connectionKey\r\n\r\n                    } else {\r\n                        storage.userWorkplace = ''\r\n                        storage.connectionKey = ''\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    this.props.history.push('/menuOptions/ConnectWorkplace')\r\n\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render () {\r\n        const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n        // console.log('---', editInputIndex);\r\n        return (\r\n            <div id=\"inviteTeam\" >\r\n                {/* 关闭缩小 */}\r\n                <div className=\"heard\">\r\n                    <MaxMin\r\n                        onClick={() => { this.props.history.push('/') }}\r\n                        onClick1={() => this.props.history.goBack()}\r\n                    />\r\n                    <div className=\"text\">Invite your Team</div>\r\n\r\n                    <div className=\"addF\">\r\n                        <p>To:</p>\r\n                        <div className=\"add\">\r\n\r\n                            <>\r\n                                {tags.map((tag, index) => {\r\n                                    const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                                    const tagElem = (\r\n                                        <Tag\r\n                                            className=\"edit-tag\"\r\n                                            key={tag}\r\n                                            closable={true}\r\n                                            onClose={() => this.handleClose(tag)}\r\n                                        >\r\n                                            <span>\r\n                                                {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                                            </span>\r\n                                        </Tag>\r\n                                    );\r\n                                    return isLongTag ? (\r\n                                        <Tooltip title={tag} key={tag}>\r\n                                            {tagElem}\r\n                                        </Tooltip>\r\n                                    ) : (\r\n                                        tagElem\r\n                                    );\r\n                                })}\r\n                                {inputVisible && (\r\n                                    <Input\r\n                                        ref={this.saveInputRef}\r\n                                        type=\"text\"\r\n                                        size=\"small\"\r\n                                        className=\"tag-input\"\r\n                                        value={inputValue}\r\n                                        onChange={this.handleInputChange}\r\n                                        onBlur={this.handleInputConfirm}\r\n                                        onPressEnter={this.handleInputConfirm}\r\n                                    />\r\n                                )}\r\n                                {!inputVisible && (\r\n                                    <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                                        <PlusOutlined />Press Enter to add mailbox\r\n                                    </Tag>\r\n                                )}\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"btn\"\r\n                    style={{ padding: `${px(40)}px 0` }}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._logIn}\r\n                        text={'Skip'}\r\n                    >\r\n                        Skip\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._next}\r\n                        text={'Send'}\r\n                    >\r\n\r\n                    </Button>\r\n                </div>\r\n                <MyModal visible={this.state.visible} />\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\px.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",["905","906"],"\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\AddDevice.jsx",["907","908","909","910","911","912","913","914","915","916","917","918","919","920","921"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport electronStore from '../../utils/electronStore';\r\nimport blueSearch from './../../assets/img/blueSerch.png'\r\nimport biggieHome from './../../assets/img/searchType-biggieHome.png'\r\nimport biggiePro from './../../assets/img/searchType-biggiePro.png'\r\nimport mellaHome from './../../assets/img/searchType-home.png'\r\nimport mellaPro from './../../assets/img/searchType-mellaPro.png'\r\nimport maeBowl from './../../assets/img/searchType-maeBowl.png'\r\nimport other from './../../assets/img/searchType-other.png'\r\nimport possum from './../../assets/img/searchType-possum.png'\r\nimport rfid from './../../assets/img/searchType-rfid.png'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport redclose from '../../assets/img/redclose.png'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './mainbody.less'\r\nimport { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList } from '../../store/actions';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\r\n    //是否有底座设备\r\n    const [noUSB, setNoUSB] = useState(false)\r\n    //设备列表\r\n    const [devicesList, setDevicesList] = useState([])\r\n    //选择的设备\r\n    const [selectDevice, setSelectDevice] = useState(null)\r\n    //重命名\r\n    const [reName, setReName] = useState('')\r\n    //房间号\r\n    const [examRoom, setExamRoom] = useState('')\r\n    //已经保存过的设备的macid\r\n    const [saveDeviceMac, setSaveDeviceMac] = useState([])\r\n    //顶部文本\r\n    const [topText, setTopText] = useState(' Pair Device')\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        setNoUSB(false)\r\n        setDevicesList([])\r\n        setSelectDevice(null)\r\n        setReName('')\r\n        setSaveDeviceMac([])\r\n        setTopText(' Pair Device')\r\n        //组件渲染完毕后要先清空广播的硬件信息\r\n        setReceiveBroadcastHardwareInfoFun({\r\n            deviceType: '',\r\n            macId: '',\r\n            name: ''\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (hardwareList.length > 0) {\r\n            let saveDeviceMac = []\r\n            for (let i = 0; i < hardwareList.length; i++) {\r\n                const element = hardwareList[i];\r\n                for (let j = 0; j < element.devices.length; j++) {\r\n                    const device = element.devices[j];\r\n                    saveDeviceMac.push(device.mac)\r\n                }\r\n            }\r\n            setSaveDeviceMac(saveDeviceMac)\r\n\r\n        }\r\n    }, [hardwareList])\r\n    useEffect(() => {\r\n        if (!selectDevice) {\r\n            setTopText(' Pair Device')\r\n        } else {\r\n            setTopText('Device Connected')\r\n        }\r\n\r\n    }, [selectDevice])\r\n    useEffect(() => {\r\n        setNoUSB(!isHaveUsbDevice)\r\n    }, [isHaveUsbDevice])\r\n    useEffect(() => {\r\n        let sameFlog = devicesList.some((device, index) => {\r\n            return device.macId === receiveBroadcastHardwareInfo.macId\r\n        })\r\n        if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\r\n            return\r\n        }\r\n        console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\r\n        let deviceArr = [].concat(devicesList)\r\n        deviceArr.push(receiveBroadcastHardwareInfo)\r\n        setDevicesList(deviceArr)\r\n\r\n\r\n\r\n    }, [receiveBroadcastHardwareInfo])\r\n\r\n    const addDevice = () => {\r\n        //从redux拿到列表中的所有硬件设备 hardwareList\r\n        console.log('hardwareList', hardwareList);\r\n        //拿到硬件的macid 类型 名称 房间号\r\n        console.log('selectDevice', selectDevice);\r\n        let sameFlog = hardwareList.some((item, index) => {\r\n            return item.type === selectDevice.deviceType\r\n        })\r\n        let hardwareArr = [].concat(hardwareList)\r\n        let { deviceType, macId, name } = selectDevice\r\n        let newDevice = {\r\n            name: reName || name,\r\n            mac: macId,\r\n            deviceType,\r\n            examRoom: examRoom || '',\r\n        }\r\n        console.log('newDevice', newDevice);\r\n        if (sameFlog) {\r\n            //相同就代表有这个硬件类型,可以直接去push\r\n\r\n            for (let i = 0; i < hardwareArr.length; i++) {\r\n                if (hardwareArr[i].type === selectDevice.deviceType) {\r\n                    hardwareArr[i].devices.push(newDevice)\r\n                    break\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //没有就要新建一个硬件类型\r\n            let json = {\r\n                type: selectDevice.deviceType,\r\n                devices: [newDevice]\r\n            }\r\n            hardwareArr.push(json)\r\n        }\r\n        setReName('')\r\n        setExamRoom('')\r\n        setHardwareList(hardwareArr)\r\n\r\n        return newDevice\r\n\r\n\r\n    }\r\n\r\n    const body = () => {\r\n\r\n        if (selectDevice) {\r\n            return <div className=\"addDevice1 flex\">\r\n                <div className=\"addDeviceTop flex\">\r\n                    <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\r\n                        {`this ${selectDevice.name} device?`}</div>\r\n\r\n                    <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\r\n                        {`SN: ${selectDevice.macId}`}</div>\r\n\r\n\r\n                    <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\r\n                        <input type=\"text\" style={{ height: px(45) }}\r\n                            value={reName}\r\n                            onChange={(value) => {\r\n                                setReName(value.target.value)\r\n\r\n                            }}\r\n                            placeholder={`${selectDevice.name} Device Name`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\r\n                        <input type=\"text\" style={{ height: px(45) }}\r\n                            value={examRoom}\r\n                            onChange={(value) => {\r\n                                setExamRoom(value.target.value)\r\n\r\n                            }}\r\n                            placeholder={`Exam Room Name`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\r\n                        on the Exam Room. Write<br /> the name\r\n                        on the sticker provided so it is easy\r\n                        to select<br /> your device in the future.</div>\r\n                </div>\r\n                <div className=\"addDeviceFoot flex\">\r\n                    <div className=\"btn\"\r\n                        onClick={() => {\r\n                            addDevice()\r\n                            setSelectDevice(null)\r\n                            setSelectHardwareType('add')\r\n\r\n                        }}\r\n                    >\r\n                        <p className='btnText'>Add Another Device</p>\r\n                    </div>\r\n                    <div className=\"btn\"\r\n                        onClick={() => {\r\n                            let newDevice = addDevice()\r\n                            setSelectHardwareType(selectDevice.deviceType)\r\n\r\n\r\n                            electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\r\n                            setSelectDevice(null)\r\n                        }}\r\n                    >\r\n                        <p className='btnText'>Finish</p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        } else {\r\n            if (noUSB) {\r\n                return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\r\n                    <img src={redclose} alt=\"\" style={{ width: px(80) }} />\r\n\r\n                    <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\r\n                </div>\r\n            } else {\r\n                if (devicesList.length === 0) {\r\n                    let options = (val) => {\r\n                        let arr = []\r\n                        if (val === 1) {\r\n                            arr = [mellaPro, mellaHome, biggiePro, biggieHome, rfid]\r\n                        } else {\r\n                            arr = [possum, maeBowl, other]\r\n                        }\r\n                        let option = arr.map((item, index) => {\r\n                            let imgWidth = px(80)\r\n                            imgWidth = index === 2 ? px(65) : imgWidth\r\n                            return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\r\n                                <div className=\"searchType-item\" key={index} >\r\n                                    <img src={item} alt=\"\" width={imgWidth} />\r\n                                </div>\r\n                            </li>)\r\n                        })\r\n                        return (\r\n                            <ul>\r\n                                {option}\r\n                            </ul>\r\n                        )\r\n                    }\r\n                    return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n\r\n\r\n                        <div className=\"addDeviceContent\">\r\n                            <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\r\n                                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\r\n                                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                                    <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\r\n                                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\r\n                            </div>\r\n                            <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\r\n                                <div className=\"btnText\">\r\n                                    Scan For Devices\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\r\n                                Or\r\n                            </div>\r\n                            <div className=\"select\">\r\n                                Select device type to\r\n                            </div>\r\n                            <div className=\"add\">\r\n                                add manually\r\n                            </div>\r\n\r\n                            <div className=\"item\">\r\n                                {options(1)}\r\n                                {options(2)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\r\n                          \r\n                            <p>\r\n                                {'searching...'}\r\n                            </p>\r\n                        </div> */}\r\n                    </div>\r\n                } else {\r\n                    let options = devicesList.map((item, index) => {\r\n\r\n                        let flog = saveDeviceMac.some((device, index) => {\r\n                            return device === item.macId\r\n                        })\r\n                        let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\r\n                        return <li\r\n                            className='flex'\r\n                            style={{ marginBottom: px(20) }}\r\n                            key={`${index}`}\r\n                            onClick={() => {\r\n                                if (!flog) {\r\n                                    setSelectDevice(item)\r\n\r\n                                } else {\r\n                                    message.destroy();\r\n                                    message.error('This device has already been added')\r\n                                }\r\n\r\n                            }}\r\n                        >\r\n\r\n                            <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\r\n                            <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\r\n\r\n                        </li>\r\n                    })\r\n                    return <div className='deviceList ' >\r\n                        <ul>\r\n                            {options}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='addDevice' style={{ height: bodyHeight }}>\r\n            <div className=\"addDeviceTitle\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>\r\n                {topText}\r\n            </div>\r\n\r\n            {body()}\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAddDevice.propTypes = {\r\n    bodyHeight: PropTypes.number,\r\n    devicesTypeList: PropTypes.array\r\n}\r\n//默认值\r\nAddDevice.defaultProps = {\r\n    bodyHeight: 0,\r\n    devicesTypeList: []\r\n}\r\nexport default connect(\r\n    state => ({\r\n        hardwareReducer: state.hardwareReduce,\r\n        isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\r\n        receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\r\n        hardwareList: state.hardwareReduce.hardwareList,\r\n    }),\r\n    { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\r\n)(AddDevice)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",["922","923","924","925"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil3.js",["926","927","928","929"],"\r\n// let COMMON_URL = 'http://192.168.0.36:8080/mellaserver';//本地\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/mellaserver'\r\n\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest3 (url, method, params = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain'\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["930","931","932","933","934","935","936","937","938","939","940"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Progress, Layout, Carousel } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\r\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\r\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\r\n// import HeaderItem from './headerItem';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport \"./measurement.less\";\r\nimport electronStore from \"../../../utils/electronStore\";\r\n\r\nlet storage = window.localStorage;\r\nconst { Content, Header } = Layout;\r\n\r\nconst Measurement = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\r\n  const [percent, setPercent] = useState(0);\r\n  const [value, setValue] = useState(0);\r\n  const [timers, setTimers] = useState(0);\r\n  const [isHua, setIsHua] = useState(true);\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    const random = 1;\r\n    setValue(value + random);\r\n    setTimers(timers + random);\r\n  };\r\n\r\n  //圆滑里面的文字\r\n  const ProgressTitle = (percent) => {\r\n    let num = parseFloat(percent);\r\n    if (isHua) {\r\n      num = parseInt((num * 1.8 + 32) * 10) / 10;\r\n    }\r\n    return (\r\n      <>\r\n        {mellaMeasurePart !== \"耳温\" ? (\r\n          <p className=\"ProgressTitle\">\r\n            {num}\r\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\r\n          </p>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <p className=\"ProgressTitle\">Measuring</p>\r\n      </>\r\n    );\r\n  };\r\n  //图片切换\r\n  const checkImage = () => {\r\n    switch (timers) {\r\n      case 0:\r\n        return <img src={Animation_1} />;\r\n      case 1:\r\n        return <img src={Animation_2} />;\r\n      case 2:\r\n        return <img src={Animation_3} />;\r\n      case 3:\r\n        return <img src={Animation_3} />;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (timers > 2) {\r\n      setTimers(0);\r\n    }\r\n    return () => {};\r\n  });\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    const timer = setInterval(tick, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (hardSet) {\r\n      let { isHua } = hardSet;\r\n      setIsHua(isHua);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* <HeaderItem /> */}\r\n      <Content className={\"contentBox\"}>\r\n        <Progress\r\n          type=\"dashboard\"\r\n          percent={_.round(mellaMeasureValue, 1)}\r\n          gapDegree={30}\r\n          width={\"260px\"}\r\n          strokeWidth={\"8\"}\r\n          format={(percent) => ProgressTitle(percent)}\r\n        />\r\n        {checkImage()}\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(Measurement);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",["941","942","943","944","945","946","947","948"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { ConfigProvider, Table } from 'antd';\r\nimport { useHistory } from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './petTable.less'\r\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\r\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\r\n\r\n\r\n\r\n\r\n\r\nconst PetTable = ({ petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type }) => {\r\n    let history = useHistory()\r\n    const [heardSearchText, setHeardSearchText] = useState('')\r\n    //搜索后展示的宠物列表\r\n    const [searchData, setSearchData] = useState([])\r\n    const _search = (value) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\r\n        let keyWord = value || heardSearchText\r\n        /**\r\n         * 使用indexof方法实现模糊查询\r\n         *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n         *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n         *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n         *  \r\n         * list         原数组\r\n         * keyWord      查询关键词\r\n         * searchData   查询的结果\r\n         * \r\n         * toLowerCase（）方法：将字符串统一转成小写\r\n         * toUpperCase（）方法：将字符串统一转成大写\r\n         * \r\n         */\r\n        let list = petListArr\r\n        let searchData = []\r\n        for (let i = 0; i < list.length; i++) {\r\n            let petName = list[i].petName.toLowerCase() || ''\r\n            let patientId = list[i].patientId.toLowerCase() || ''\r\n            let rfid = list[i].rfid || ''\r\n            if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n                || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n                || `${rfid}`.indexOf(keyWord) !== -1\r\n            ) {\r\n                searchData.push(list[i])\r\n            }\r\n        }\r\n        console.log(searchData);\r\n        setSearchData(searchData)\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Time',\r\n            dataIndex: 'insertedAt',\r\n            key: 'insertedAt',\r\n            width: '16%',\r\n            // ...this.getColumnSearchProps('insertedAt'),\r\n            render: (text, record, index) => {\r\n                let chazhi = new Date().getTimezoneOffset()\r\n                // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n                let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\r\n                let time = moment(parseInt(text) * 1000).format('hh:mm a');\r\n                let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n                // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n                return (\r\n                    <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\r\n                        <p>{`${year}`}</p>\r\n                        <p>{`${time}`}</p>\r\n                    </div>\r\n                )\r\n            },\r\n\r\n        },\r\n        {\r\n            title: 'Pet ID',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('patientId'),\r\n        },\r\n        {\r\n            title: 'Pet Name',\r\n            dataIndex: 'petName',\r\n            key: 'petName',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('petName'),\r\n        },\r\n        {\r\n            title: 'Owner',\r\n            dataIndex: 'owner',\r\n            key: 'owner',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('owner'),\r\n        },\r\n        {\r\n            title: 'Breed',\r\n            dataIndex: 'breed',\r\n            key: 'breed',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('breed'),\r\n            render: (text, record, index) => {\r\n                if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{'unknown'}</p>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{text}</p>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        {\r\n            title: 'Gender',\r\n            dataIndex: 'gender',\r\n            key: 'gender',\r\n            width: '12%',\r\n            // width: '30%',\r\n            // ...this.getColumnSearchProps('gender'),\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n            width: '12%',\r\n            // width: '20%',\r\n            render: (text, record, index) => {\r\n                // console.log(text);\r\n\r\n                if (`${text}` === 'NaN') {\r\n                    return (\r\n                        <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{text}</p>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n\r\n    ];\r\n    const noData = () => {\r\n        return (\r\n            <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\r\n                <p style={{ fontSize: px(22) }}>No pet found, </p>  &nbsp;&nbsp;\r\n                <a style={{ fontSize: px(22) }} href=\"#\"\r\n                    onClick={(e) => {\r\n                        console.log('我要去添加宠物');\r\n                        try {\r\n                            if (type === 'scheduled') {\r\n                                setMenuNum('AddScheduledPet')\r\n                            } else {\r\n                                setMenuNum('AddPet')\r\n                            }\r\n                        } catch (error) {\r\n                            console.log('错误信息', error);\r\n                        }\r\n                        e.preventDefault();\r\n\r\n                    }}\r\n\r\n                >{`go to add`}</a>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='petTable' >\r\n            <div className=\"pet_table_heard\" style={{ marginTop: px(40) }}>\r\n                <div className=\"search\" style={{ height: px(28) }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"&#xe61b;    search\"\r\n                        value={heardSearchText}\r\n                        onChange={(e) => {\r\n                            setHeardSearchText(e.target.value)\r\n                            _search(e.target.value)\r\n                        }\r\n                        }\r\n\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(28), width: px(80) }}\r\n                        onClick={_search}\r\n                    >\r\n                        <div className=\"walkText\">Search</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"heard2 flex\" style={{ marginTop: px(40), marginBottom: px(8), marginLeft: px(20) }}>\r\n\r\n                <div className=\"sort flex\" >\r\n                    <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\r\n\r\n                    <SelectionBox\r\n                        listArr={[\r\n                            { key: 'time', value: 'Time' },\r\n                            { key: 'petid', value: 'Pet ID' },\r\n                            { key: 'owner', value: 'Owner' },\r\n                            { key: 'breed', value: 'Breed' },\r\n                            { key: 'petname', value: 'Pet Name' },\r\n                            { key: 'gender', value: 'Gender' },\r\n                        ]}\r\n                        clickItem={(item) => {\r\n                            let petList = [].concat(petListArr)\r\n                            switch (item.key) {\r\n                                case 'time':\r\n                                    petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n                                    break;\r\n                                case 'petid':\r\n                                    petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n                                    break;\r\n                                case 'owner':\r\n                                    petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n                                    break;\r\n                                case 'breed':\r\n                                    petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n                                    break;\r\n                                case 'petname':\r\n                                    petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n                                    break;\r\n                                case 'gender':\r\n                                    petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n                                    break;\r\n                            }\r\n                            resetPetList(petList)\r\n\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            <div className=\"table\" >\r\n                <ConfigProvider renderEmpty={noData}>\r\n                    <Table\r\n                        style={{\r\n                            // border: ' #979797 1px solid',\r\n                            padding: 0,\r\n                            margin: 0,\r\n                            width: '95%',\r\n                            // height: px(500)\r\n                        }}\r\n                        rowKey={data => data.id}\r\n                        bordered={false}\r\n                        columns={columns}\r\n                        dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\r\n                        loading={loading}\r\n                        locale={{ filterConfirm: <div>111</div> }}\r\n                        pagination={false}\r\n                        scroll={{\r\n                            y: px(480)\r\n                        }}\r\n                        onRow={(record) => {\r\n                            return {\r\n                                onClick: (event) => {\r\n                                    setMenuNum('1')\r\n                                    petDetailInfoFun(record)\r\n                                    console.log('record', record);\r\n                                }, // 点击行\r\n\r\n                            };\r\n                        }}\r\n                    />\r\n                </ConfigProvider>\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nPetTable.propTypes = {\r\n    petListArr: PropTypes.array,\r\n    resetPetList: PropTypes.func,\r\n}\r\n//默认值\r\nPetTable.defaultProps = {\r\n    bodyHeight: 0,\r\n    petListArr: [],\r\n    resetPetList: () => { },\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, }\r\n)(PetTable)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardAndPetsUI.jsx",["949","950","951"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { px } from '../../utils/px'\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport xia from './../../assets/img/xia.png'\r\nimport { selectHardwareModalShowFun } from './../../store/actions'\r\nimport PetsUI from './PetsUI.jsx'\r\nimport electronStore from '../../utils/electronStore'\r\n\r\n\r\nimport './mainbody.less'\r\nimport HardListModal from './HardListModal'\r\nlet storage = window.localStorage\r\n\r\n\r\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun,hardwareInfo }) => {\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\r\n  useEffect(() => {\r\n    console.log('初始化硬件和宠物界面', hardwareList);\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || []\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfo = hardwareInfo || {}\r\n        console.log('------=========--------', selectHardwareInfo);\r\n        if (selectHardwareInfo === {}) {\r\n          let selectHardwareInfo = list[0] || {}\r\n          setSelectHardwareDetail(selectHardwareInfo)\r\n        } else {\r\n          let sameFlag = false\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\r\n              setSelectHardwareDetail(selectHardwareInfo)\r\n              sameFlag = true\r\n              break\r\n            }\r\n          }\r\n          console.log('sameFlag', sameFlag);\r\n          if (!sameFlag) {\r\n            console.log('设置了默认值');\r\n            let selectHardwareInfo = list[0] || {}\r\n            setSelectHardwareDetail(selectHardwareInfo)\r\n          }\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }, [selectHardwareType, hardwareList,])\r\n\r\n\r\n\r\n  return (\r\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\r\n      <div className='deviceAndPets-title' style={{ height: devicesTitleHeight }}\r\n        onClick={(e) => {\r\n          //react阻止冒泡\r\n          e.stopPropagation()\r\n          selectHardwareModalShowFun(!selectHardwareModalShow)\r\n        }}\r\n      >\r\n        <div className=\"devicesName\" style={{ fontSize: px(26) }}>\r\n          {selectHardwareDetail.name}\r\n        </div>\r\n        <div className=\"imgBox\" style={{ marginLeft: px(7) }}>\r\n          <img src={xia} alt=\"\" width={px(32)} />\r\n        </div>\r\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\r\n          setSelectHardwareDetail(item)\r\n        }} />}\r\n      </div>\r\n      <PetsUI\r\n        bodyHeight={bodyHeight}\r\n\r\n      />\r\n\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nHardAndPetsUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array\r\n}\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: []\r\n}\r\nexport default connect(\r\n  state => ({\r\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\r\n  }),\r\n  { selectHardwareModalShowFun }\r\n)(HardAndPetsUI)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil5.js",["952","953","954","955"],"\r\n\r\nlet COMMON_URL = 'https://api.rhapsody.vet/graphql';//集成Rhapsody\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRhapsody (url, method, params = '', token = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let headers = null\r\n    if (token !== '') {\r\n      headers = {\r\n        'authorization': token,\r\n      };\r\n    }\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else if (method === 'POST') {\r\n\r\n\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (token !== '') {\r\n      header = {\r\n        'authorization': token,\r\n        \"Content-type\": \"application/json\"\r\n      };\r\n    }\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/merge-patch+json\",\r\n      authorization: token\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectExam\\EzyVetSelectExam.js",["956","957","958","959","960","961","962","963","964","965","966","967","968","969","970"],"//这里主要是直接从ezyVet获取数据\r\n//这是ezyVet的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message\r\n\r\n} from 'antd';\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './ezyVetSelectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { FetchEszVet } from '../../utils/FetchEszVet'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2'\r\nimport gender from './../../utils/gender'\r\n\r\nlet storage = window.localStorage;\r\n\r\n\r\nexport default class EzyVetSelectExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n    unixToURI: '',\r\n    ezyVetToken: '',\r\n    current: 1\r\n  }\r\n  componentWillMount () {\r\n    try {\r\n      if ((this.props.location.listDate)) {\r\n        console.log('------------', this.props.location);\r\n        let data = JSON.parse(this.props.location.listDate)\r\n        this.setState({\r\n          data,\r\n          current: parseInt(this.props.location.defaultCurrent)\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (window.screen.height < 950) {\r\n      ipcRenderer.send('table')\r\n    } else {\r\n      ipcRenderer.send('big')\r\n    }\r\n    storage.identity = '2'\r\n    if (storage.unixToURI !== '' && storage.unixToURI !== undefined) {\r\n      this.setState({\r\n        unixToURI: storage.unixToURI\r\n      })\r\n    }\r\n\r\n    if (storage.ezyVetToken !== '' && storage.ezyVetToken !== undefined) {\r\n      this.setState({\r\n        ezyVetToken: storage.ezyVetToken\r\n      })\r\n    }\r\n\r\n\r\n\r\n    if ((this.props.location.listDate)) {\r\n      console.log('------------', this.props.location);\r\n      let data = JSON.parse(this.props.location.listDate)\r\n      this.setState({\r\n        data,\r\n        current: parseInt(this.props.location.defaultCurrent)\r\n      })\r\n    } else {\r\n      this._getExam()\r\n    }\r\n\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    console.log(storage.unixToURI, '------------', storage.ezyVetToken);\r\n    let params = {\r\n      limit: '100',\r\n      timestamp: storage.unixToURI\r\n    }\r\n\r\n    //1.获取病历单号但是缺少宠物信息\r\n    let url = `/healthstatus?limit=100&timestamp=${storage.unixToURI}`\r\n    if (storage.selectPatientId) {\r\n      url += `&animal_id=${storage.selectPatientId}`\r\n    }\r\n    FetchEszVet(url, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n      .then(res => {\r\n        console.log('------------------------------res', res);\r\n        if (res.messages.length === 0) {\r\n          let examArr = res.items\r\n          console.log('examArr', examArr);\r\n          let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n          for (let i = 0; i < examArr.length; i++) {\r\n            if (examArr[i].healthstatus.active !== '1') {\r\n              console.log(examArr[i]);\r\n              continue\r\n            }\r\n            let { animal_id, consult_id, created_at, id, timestamp, modified_at, heart_rate, notes, weight } = examArr[i].healthstatus\r\n            if (weight) {\r\n              weight = parseFloat(weight).toFixed(1)\r\n              weight += ' kg'\r\n            } else {\r\n              weight = 'unknown'\r\n            }\r\n\r\n            let json = {\r\n              animal_id,\r\n              consult_id,\r\n              insertedAt: timestamp,\r\n              key: id,\r\n              created_at,\r\n              heart_rate, notes,\r\n              modified_at,\r\n              weight\r\n            }\r\n\r\n            healthStatusArr.push(json)\r\n            if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n              animalIdArr.push(parseInt(animal_id))\r\n            }\r\n          }\r\n\r\n          console.log(healthStatusArr, animalIdArr);\r\n          let animal = `{\"in\":[${animalIdArr}]}`\r\n          let uri = encodeURIComponent(animal)\r\n          console.log('宠物id集合：', uri)\r\n          //2.获取宠物信息\r\n          FetchEszVet(`/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n            .then(res => {\r\n              console.log('获取到的宠物信息1:', res, `Bearer ${storage.ezyVetToken}`);\r\n              if (res.messages.length === 0) {\r\n\r\n                let animalArr = res.items\r\n                let animalInfoArr = []\r\n                let breedIdArr = [], contactIDArr = []\r\n\r\n                for (let i = 0; i < animalArr.length; i++) {\r\n                  let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, animalcolour_id, guid,\r\n                    referring_clinic_id, referring_vet_id, residence_contact_id, species_id, created_at, modified_at, notes } = animalArr[i].animal\r\n                  let animalInfo = {\r\n                    breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, animalcolour_id, guid,\r\n                    referring_clinic_id, referring_vet_id, residence_contact_id, species_id, created_at, modified_at, notes\r\n                  }\r\n                  if (breedIdArr.indexOf(breed_id) === -1) {\r\n                    breedIdArr.push(breed_id)\r\n                  }\r\n                  if (contactIDArr.indexOf(contact_id) === -1) {\r\n                    contactIDArr.push(contact_id)\r\n                  }\r\n                  animalInfoArr.push(animalInfo)\r\n\r\n                }\r\n                console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n                //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n                let endArr = healthStatusArr.map((data, index) => {\r\n                  let oneExam = data\r\n\r\n                  for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n                    if (animalInfoArr[i].id === oneExam.animal_id) {\r\n                      let { breed_id, date_of_birth, name, weight, weight_unit, contact_id, sex_id,\r\n\r\n                        bree_id, animalcolour_id, guid,\r\n                        referring_clinic_id, referring_vet_id, residence_contact_id, species_id\r\n\r\n                      } = animalInfoArr[i]\r\n                      let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n                      oneExam.age = age\r\n                      oneExam.breed = breed_id\r\n                      oneExam.gender = gender[sex_id]\r\n                      oneExam.contact_id = contact_id\r\n                      oneExam.petName = name\r\n                      // oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n                      oneExam.weightNum = `${parseInt(weight).toFixed(1)}`\r\n                      oneExam.weight_unit = weight_unit\r\n                      oneExam.animal = animalInfoArr[i]\r\n\r\n                      break\r\n                    }\r\n\r\n                  }\r\n                  return oneExam\r\n                })\r\n\r\n                console.log('融合后', endArr);\r\n                let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n                let contactIDUri = encodeURIComponent(contactIDStr)\r\n                console.log(contactIDStr);\r\n\r\n                let getContactArr = []\r\n                //4. 获取宠物主人信息\r\n                FetchEszVet(`/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n                  .then(res => {\r\n                    console.log('-------宠物主人信息：', res);\r\n                    if (res.messages.length === 0) {\r\n                      let items = res.items\r\n                      for (let i = 0; i < items.length; i++) {\r\n\r\n                        const { first_name, last_name, id, address_physical, address_postal, business_name, code, contact_detail_list, created_at,\r\n                          is_business, is_customer, is_staff_member, is_supplier, is_syndicate, is_vet, modified_at, ownership_id } = items[i].contact\r\n                        let name = ''\r\n                        if (first_name === '' && last_name === '') {\r\n                          name = 'unknown'\r\n                        } else {\r\n                          name = `${last_name} ${first_name}`\r\n                        }\r\n                        let json = {\r\n                          name,\r\n                          id,\r\n                          first_name, last_name, address_physical, address_postal, business_name, code, contact_detail_list, created_at,\r\n                          is_business, is_customer, is_staff_member, is_supplier, is_syndicate, is_vet, modified_at, ownership_id\r\n                        }\r\n                        getContactArr.push(json)\r\n                      }\r\n\r\n                      console.log('endArr', endArr);\r\n                      //5.把宠物信息并到病历单-----缺少品种\r\n                      let dataArr = endArr.map((data) => {\r\n                        let oneExam = data\r\n                        for (let i = 0; i < getContactArr.length; i++) {\r\n                          if (getContactArr[i].id === oneExam.contact_id) {\r\n                            let { name } = getContactArr[i]\r\n                            oneExam.owner = name\r\n                            oneExam.contact = getContactArr[i]\r\n                          }\r\n\r\n                        }\r\n                        return oneExam\r\n                      })\r\n                      console.log('添加过主人信息的记录：', dataArr);\r\n\r\n                      //6.获取病历单\r\n                      let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n                      let breedIdUri = encodeURIComponent(breedIdStr)\r\n                      console.log(breedIdUri);\r\n\r\n                      let getbreedIdArr = []\r\n\r\n                      FetchEszVet(`/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n                        .then(res => {\r\n                          console.log('获取到了品种信息', res);\r\n\r\n                          if (res.messages.length === 0) {\r\n\r\n                            let items = res.items\r\n                            for (let i = 0; i < items.length; i++) {\r\n\r\n                              const { name, id, created_at, modified_at, species_id } = items[i].breed\r\n\r\n                              if (name === '') {\r\n                                name = 'unKnown'\r\n                              }\r\n                              let json = {\r\n                                name,\r\n                                id,\r\n                                created_at, modified_at, species_id\r\n                              }\r\n                              getbreedIdArr.push(json)\r\n                            }\r\n\r\n                            console.log('endArr', endArr);\r\n                            //5.把宠物品种并到病历单\r\n                            let endExamArr = dataArr.map((data, index) => {\r\n                              let oneExam = data\r\n\r\n                              for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n                                if (getbreedIdArr[i].id === oneExam.breed) {\r\n                                  let { name } = getbreedIdArr[i]\r\n                                  oneExam.breed = name\r\n                                  oneExam.allBreed = getbreedIdArr[i]\r\n                                }\r\n\r\n                              }\r\n                              return oneExam\r\n                            })\r\n                            console.log('最终合成的数据：', endExamArr);\r\n                            this.setState({\r\n                              data: endExamArr,\r\n                              loading: false,\r\n                              spin: false\r\n                            })\r\n                          }\r\n                        })\r\n                        .catch(err => {\r\n                          console.log(err);\r\n                          this.setState({\r\n                            loading: false,\r\n                            spin: false\r\n                          })\r\n                        })\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                  })\r\n                  .catch(err => {\r\n                    this.setState({\r\n                      loading: false,\r\n                      spin: false\r\n                    })\r\n                    console.log(err);\r\n                  })\r\n\r\n\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                loading: false,\r\n                spin: false\r\n              })\r\n              console.log(err);\r\n            })\r\n\r\n        } else {\r\n          console.log('很有可能是令牌过期了');\r\n          if (res.messages[0].text.indexOf(`Check the \\\"access token\\\" parameter`) !== -1 ||\r\n            res.messages[0].text.indexOf(`The resource owner or authorization server denied the reques`) !== -1) {\r\n            console.log('令牌就是过期了');\r\n            if (storage.ezyVetReLogin) {\r\n              let data = JSON.parse(storage.ezyVetReLogin)\r\n              let { client_id, client_secret, partner_id } = data\r\n              let prams = {\r\n                clientId: client_id,\r\n                clientSecret: client_secret,\r\n                partnerId: partner_id\r\n              }\r\n              let url = '/EzyVet/ezyvetauth'\r\n              fetchRequest2(url, \"GET\", prams)\r\n                .then(res => {\r\n                  console.log('重新获取token', res);\r\n                  if (res.flag === true && res.data) {\r\n                    storage.ezyVetToken = res.data\r\n                    this._getExam()\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                })\r\n            } else {\r\n              // this.props.history.push('ezyVetLogin')\r\n              message.error('The access token is invalid, please obtain it again')\r\n              this.setState({\r\n                loading: false,\r\n                spin: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false,\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n  ForwardRankingDate = (data, p) => {\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      for (let j = 0; j < data.length - 1 - i; j++) {\r\n        // console.log(Date.parse(data[j][p]));\r\n        if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n          var temp = data[j];\r\n          data[j] = data[j + 1];\r\n          data[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    // this._getData()\r\n    this._getExam()\r\n  }\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        //   width: '30%',\r\n        ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        //   width: '20%',\r\n        ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        ...this.getColumnSearchProps('breed'),\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        // width: '30%',\r\n        ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        // width: '20%',\r\n        render: (text, record, index) => {\r\n          // console.log(text);\r\n\r\n          if (`${text}` === 'NaN') {\r\n            return (\r\n              <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n        key: 'weight',\r\n        ...this.getColumnSearchProps('weight'),\r\n      },\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n          // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n          let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n          // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin } = this.state\r\n    return (\r\n\r\n      <div id=\"ezyVetSelectExam\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push({ pathname: '/EzyVetSelectTime' })}\r\n        />\r\n\r\n        <div className=\"textfa1\">\r\n          <div className=\"textfa\">\r\n            <div className=\"text\">Select Patient Exam</div>\r\n            <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n          </div>\r\n          <div className=\"r\"\r\n            ref={add => this.add = add}\r\n            onClick={() => {\r\n              let electron = window.electron\r\n              electron.shell.openExternal('https://apisandbox.trial.ezyvet.com/#')\r\n            }}\r\n            onMouseDown={() => {\r\n              this.add.style.color = 'rgba(0,0,0,0.3)'\r\n            }}\r\n            onMouseUp={() => {\r\n              this.add.style.color = 'rgba(0,0,0)'\r\n            }}\r\n          >+</div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            loading={loading}\r\n            locale={{ filterConfirm: <div>111</div> }}\r\n            pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true, defaultCurrent: this.state.current }}\r\n            onRow={(record) => {\r\n              return {\r\n                onClick: (event) => {\r\n\r\n                  console.log('record', record);\r\n\r\n                  if (record.consult_id === '') {\r\n                    message.error('This record cannot be updated. Please try another record', 10)\r\n                    return\r\n                  }\r\n\r\n                  let { allBreed, animal, contact } = record\r\n                  let { animalcolour_id, breed_id, contact_id, date_of_birth, guid, id, name, referring_clinic_id, referring_vet_id,\r\n                    residence_contact_id, sex_id, species_id, weight, weight_unit, created_at, modified_at\r\n                  } = animal\r\n                  let { address_physical, address_postal, business_name, contact_detail_list, first_name, is_business, is_customer,\r\n                    is_staff_member, is_supplier, is_syndicate, is_vet, last_name, ownership_id, code, notes\r\n                  } = contact\r\n                  let breed = {}\r\n                  if (allBreed) {\r\n                    breed = {\r\n                      id: allBreed.id,\r\n                      created_at: allBreed.created_at,\r\n                      modified_at: allBreed.modified_at,\r\n                      name: allBreed.name,\r\n                      species_id: allBreed.species_id\r\n                    }\r\n                  }\r\n                  let params = [{\r\n                    id,\r\n                    created_at,\r\n                    modified_at,\r\n                    name,\r\n                    sex_id,\r\n                    animalcolour_id,\r\n                    species_id,\r\n                    breed_id,\r\n                    contact_id,\r\n                    date_of_birth,\r\n                    referring_clinic_id,\r\n                    referring_vet_id,\r\n                    residence_contact_id,\r\n                    weight,\r\n                    weight_unit,\r\n                    notes,\r\n                    guid,\r\n                    sex: '',\r\n                    breed,\r\n                    species: {\r\n                      id: \"\",\r\n                      created_at: \"\",\r\n                      modified_at: \"\",\r\n                      name: \"\",\r\n                      icon: \"\"\r\n                    },\r\n                    contact: {\r\n                      id: contact.id,\r\n                      created_at: contact.created_at,\r\n                      modified_at: contact.modified_at,\r\n                      code,\r\n                      first_name,\r\n                      last_name,\r\n                      business_name,\r\n                      is_business,\r\n                      is_customer,\r\n                      is_supplier,\r\n                      is_vet,\r\n                      is_syndicate,\r\n                      is_staff_member,\r\n                      contact_detail_list,\r\n                      address_physical,\r\n                      address_postal,\r\n                      ownership_id\r\n                    }\r\n                  }]\r\n                  console.log('入参：', params);\r\n                  fetchRequest2('/EzyVet/checkAndSaveAnimalList', 'POST', params)\r\n                    .then(res => {\r\n                      console.log('====', res);\r\n                      if (res.flag === true) {\r\n                        storage.ezyVetSelectHealthstatus = JSON.stringify(record)\r\n                        storage.ezyVetList = JSON.stringify(this.state.data)\r\n                        let selectNum = document.getElementsByClassName('ant-pagination-item-active')\r\n\r\n                        storage.defaultCurrent = selectNum[0].title\r\n\r\n                        // this.props.history.push({ pathname: '/page10', })\r\n                        if (storage.isClinical === 'true') {\r\n                          this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.animal_id })\r\n                        } else {\r\n                          this.props.history.push({ pathname: '/page10', })\r\n                        }\r\n                      }\r\n                    })\r\n                    .catch(err => {\r\n                      console.log(err);\r\n                    })\r\n                }, // 点击行\r\n\r\n              };\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//下面这一块是通过后台获取到exam且进行集成\r\n// import React, { Component } from 'react'\r\n// import {\r\n//   Table,\r\n//   Input,\r\n//   Button,\r\n//   Space,\r\n//   message\r\n\r\n// } from 'antd';\r\n// import moment from 'moment'\r\n// //import 'antd/dist/antd.css';\r\n// import { SyncOutlined } from '@ant-design/icons';\r\n// import MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\n// import './ezyVetSelectExam.less'\r\n\r\n// import Highlighter from 'react-highlight-words';\r\n// import { SearchOutlined } from '@ant-design/icons';\r\n// import { FetchEszVet } from '../../utils/FetchEszVet'\r\n// import { fetchToken } from '../../utils/Fetch_token'\r\n// import gender from './../../utils/gender'\r\n\r\n// let storage = window.localStorage;\r\n\r\n\r\n// export default class EzyVetSelectExam extends Component {\r\n//   state = {\r\n//     loading: false,\r\n//     api: '',\r\n//     id: '',  //选择location的id\r\n//     locations: [],\r\n//     data: [],\r\n//     searchText: '',\r\n//     searchedColumn: '',\r\n//     seleceID: '',  //宠物医生id\r\n//     spin: false,   //刷新按钮是否旋转\r\n\r\n\r\n\r\n//     unixToURI: '',\r\n//     ezyVetToken: ''\r\n//   }\r\n\r\n//   componentDidMount () {\r\n//     let ipcRenderer = window.electron.ipcRenderer\r\n//     ipcRenderer.send('big')\r\n//     if (storage.unixToURI !== '' && storage.unixToURI !== undefined) {\r\n//       this.setState({\r\n//         unixToURI: storage.unixToURI\r\n//       })\r\n//     }\r\n\r\n//     if (storage.ezyVetToken !== '' && storage.ezyVetToken !== undefined) {\r\n//       this.setState({\r\n//         ezyVetToken: storage.ezyVetToken\r\n//       })\r\n//     }\r\n\r\n//     this._getExam()\r\n\r\n//   }\r\n//   componentWillUnmount () {\r\n//     message.destroy()\r\n//   }\r\n\r\n//   _getExam = async () => {\r\n//     console.log('进来了');\r\n//     this.setState({\r\n//       loading: true\r\n//     })\r\n//     console.log(storage.unixToURI, '------------', storage.ezyVetToken);\r\n//     let params = {\r\n//       limit: '100',\r\n//       timestamp: storage.unixToURI\r\n//     }\r\n\r\n//     //1.获取病历单号但是缺少宠物信息\r\n//     fetchToken(`/EzyVet/healthstatus`, \"GET\", params, `Bearer ${storage.ezyVetToken}`)\r\n//       .then(res => {\r\n//         console.log('res', res);\r\n//         if (res.msg === 'success') {\r\n//           let examArr = res.data.items\r\n//           console.log(examArr);\r\n//           let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n//           for (let i = 0; i < examArr.length; i++) {\r\n//             let { animal_id, consult_id, created_at, id, timestamp, modified_at } = examArr[i]\r\n\r\n//             let json = {\r\n//               animal_id,\r\n//               consult_id,\r\n//               insertedAt: timestamp,\r\n//               key: id\r\n//             }\r\n//             healthStatusArr.push(json)\r\n//             if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n//               animalIdArr.push(parseInt(animal_id))\r\n//             }\r\n//           }\r\n\r\n//           console.log(healthStatusArr, animalIdArr);\r\n//           let animal = `{\"in\":[${animalIdArr}]}`\r\n//           let uri = encodeURIComponent(animal)\r\n//           console.log('宠物id集合：', uri)\r\n//           //2.获取宠物信息\r\n//           fetchToken(`/EzyVet/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//             .then(res => {\r\n//               console.log('获取到的宠物信息:', res, `Bearer ${storage.ezyVetToken}`);\r\n//               if (res.msg === 'success') {\r\n\r\n//                 let animalArr = res.data.items\r\n//                 let animalInfoArr = []\r\n//                 let breedIdArr = [], contactIDArr = []\r\n\r\n//                 for (let i = 0; i < animalArr.length; i++) {\r\n//                   let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalArr[i]\r\n//                   let animalInfo = {\r\n//                     breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id\r\n//                   }\r\n//                   if (breedIdArr.indexOf(breed_id) === -1) {\r\n//                     breedIdArr.push(breed_id)\r\n//                   }\r\n//                   if (contactIDArr.indexOf(contact_id) === -1) {\r\n//                     contactIDArr.push(contact_id)\r\n//                   }\r\n\r\n//                   animalInfoArr.push(animalInfo)\r\n\r\n//                 }\r\n//                 console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n//                 //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n//                 let endArr = healthStatusArr.map((data, index) => {\r\n//                   let oneExam = data\r\n\r\n//                   for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n//                     if (animalInfoArr[i].id === oneExam.animal_id) {\r\n//                       let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalInfoArr[i]\r\n//                       let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n//                       oneExam.age = age\r\n//                       oneExam.breed = breed_id\r\n//                       oneExam.gender = gender[sex_id]\r\n//                       oneExam.contact_id = contact_id\r\n//                       oneExam.petName = name\r\n//                       oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n//                       break\r\n//                     }\r\n\r\n//                   }\r\n//                   return oneExam\r\n//                 })\r\n\r\n//                 console.log('融合后', endArr);\r\n//                 let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n//                 let contactIDUri = encodeURIComponent(contactIDStr)\r\n//                 console.log(contactIDStr);\r\n\r\n//                 let getContactArr = []\r\n//                 //4. 获取宠物主人信息\r\n//                 fetchToken(`/EzyVet/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//                   .then(res => {\r\n//                     console.log('-------宠物主人信息：', res);\r\n//                     if (res.msg === 'success') {\r\n//                       let items = res.data\r\n//                       for (let i = 0; i < items.length; i++) {\r\n\r\n//                         const { first_name, last_name, id } = items[i]\r\n//                         let name = ''\r\n//                         if (first_name === '' && last_name === '') {\r\n//                           name = 'UnKnown'\r\n//                         } else {\r\n//                           name = `${last_name} ${first_name}`\r\n//                         }\r\n//                         let json = {\r\n//                           name,\r\n//                           id\r\n//                         }\r\n//                         getContactArr.push(json)\r\n//                       }\r\n\r\n//                       console.log('endArr', endArr);\r\n//                       //5.把宠物信息并到病历单-----缺少品种\r\n//                       let dataArr = endArr.map((data) => {\r\n//                         let oneExam = data\r\n//                         for (let i = 0; i < getContactArr.length; i++) {\r\n//                           if (getContactArr[i].id === oneExam.contact_id) {\r\n//                             let { name } = getContactArr[i]\r\n//                             oneExam.owner = name\r\n//                           }\r\n\r\n//                         }\r\n//                         return oneExam\r\n//                       })\r\n\r\n\r\n//                       //6.获取病历单\r\n//                       let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n//                       let breedIdUri = encodeURIComponent(breedIdStr)\r\n//                       console.log(breedIdUri);\r\n\r\n//                       let getbreedIdArr = []\r\n\r\n//                       fetchToken(`/EzyVet/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//                         .then(res => {\r\n//                           console.log('获取到了品种信息', res);\r\n\r\n\r\n\r\n//                           let items = res.data\r\n//                           for (let i = 0; i < items.length; i++) {\r\n\r\n//                             const { name, id } = items[i]\r\n\r\n//                             if (name === '') {\r\n//                               name = 'UnKnown'\r\n//                             }\r\n//                             let json = {\r\n//                               name,\r\n//                               id\r\n//                             }\r\n//                             getbreedIdArr.push(json)\r\n//                           }\r\n\r\n//                           console.log('endArr', endArr);\r\n//                           //5.把宠物品种并到病历单\r\n//                           let endExamArr = dataArr.map((data, index) => {\r\n//                             let oneExam = data\r\n\r\n//                             for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n//                               if (getbreedIdArr[i].id === oneExam.breed) {\r\n//                                 let { name } = getbreedIdArr[i]\r\n//                                 oneExam.breed = name\r\n//                               }\r\n\r\n//                             }\r\n//                             return oneExam\r\n//                           })\r\n//                           this.setState({\r\n//                             data: endExamArr,\r\n//                             loading: false,\r\n//                             spin: false\r\n//                           })\r\n//                         })\r\n//                         .catch(err => {\r\n//                           console.log(err);\r\n//                           this.setState({\r\n//                             loading: false,\r\n//                             spin: false\r\n//                           })\r\n//                         })\r\n\r\n\r\n\r\n\r\n//                     }\r\n\r\n//                   })\r\n//                   .catch(err => {\r\n//                     this.setState({\r\n//                       loading: false,\r\n//                       spin: false\r\n//                     })\r\n//                     console.log(err);\r\n//                   })\r\n\r\n\r\n//               }\r\n//             })\r\n//             .catch(err => {\r\n//               this.setState({\r\n//                 loading: false,\r\n//                 spin: false\r\n//               })\r\n//               console.log(err);\r\n//             })\r\n\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         this.setState({\r\n//           loading: false,\r\n//           spin: false\r\n//         })\r\n//         console.log(err);\r\n//       })\r\n\r\n\r\n\r\n//     // FetchEszVet(`/healthstatus?limit=100&timestamp=${storage.unixToURI}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //   .then(res => {\r\n//     //     console.log(res);\r\n//     //     let examArr = res.items\r\n//     //     console.log(examArr);\r\n//     //     let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n//     //     for (let i = 0; i < examArr.length; i++) {\r\n//     //       let { animal_id, consult_id, created_at, id, timestamp, modified_at } = examArr[i].healthstatus\r\n\r\n//     //       let json = {\r\n//     //         animal_id,\r\n//     //         consult_id,\r\n//     //         insertedAt: timestamp,\r\n//     //         key: id\r\n//     //       }\r\n//     //       healthStatusArr.push(json)\r\n//     //       if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n//     //         animalIdArr.push(parseInt(animal_id))\r\n//     //       }\r\n//     //     }\r\n\r\n//     //     console.log(healthStatusArr, animalIdArr);\r\n//     //     let animal = `{\"in\":[${animalIdArr}]}`\r\n//     //     // console.log(animal);\r\n//     //     let uri = encodeURIComponent(animal)\r\n//     //     //2.获取宠物信息\r\n//     //     FetchEszVet(`/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //       .then(res => {\r\n//     //         console.log('宠物信息', res);\r\n//     //         let animalArr = res.items\r\n//     //         let animalInfoArr = []\r\n//     //         let breedIdArr = [], contactIDArr = []\r\n\r\n//     //         for (let i = 0; i < animalArr.length; i++) {\r\n//     //           let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalArr[i].animal\r\n//     //           let animalInfo = {\r\n//     //             breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id\r\n//     //           }\r\n//     //           if (breedIdArr.indexOf(breed_id) === -1) {\r\n//     //             breedIdArr.push(breed_id)\r\n//     //           }\r\n//     //           if (contactIDArr.indexOf(contact_id) === -1) {\r\n//     //             contactIDArr.push(contact_id)\r\n//     //           }\r\n\r\n//     //           animalInfoArr.push(animalInfo)\r\n\r\n//     //         }\r\n//     //         console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n//     //         //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n//     //         let endArr = healthStatusArr.map((data, index) => {\r\n//     //           let oneExam = data\r\n\r\n//     //           for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n//     //             if (animalInfoArr[i].id === oneExam.animal_id) {\r\n//     //               let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalInfoArr[i]\r\n//     //               let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n//     //               oneExam.age = age\r\n//     //               oneExam.breed = breed_id\r\n//     //               oneExam.gender = gender[sex_id]\r\n//     //               oneExam.contact_id = contact_id\r\n//     //               oneExam.petName = name\r\n//     //               oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n//     //               break\r\n//     //             }\r\n\r\n//     //           }\r\n//     //           return oneExam\r\n//     //         })\r\n\r\n//     //         console.log(endArr);\r\n//     //         let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n//     //         let contactIDUri = encodeURIComponent(contactIDStr)\r\n//     //         console.log(contactIDStr);\r\n\r\n//     //         let getContactArr = []\r\n//     //         //4. 获取宠物信息\r\n//     //         FetchEszVet(`/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //           .then(res => {\r\n//     //             console.log('-------宠物主人信息：', res);\r\n//     //             let items = res.items\r\n//     //             for (let i = 0; i < items.length; i++) {\r\n\r\n//     //               const { first_name, last_name, id } = items[i].contact\r\n//     //               let name = ''\r\n//     //               if (first_name === '' && last_name === '') {\r\n//     //                 name = 'UnKnown'\r\n//     //               } else {\r\n//     //                 name = `${last_name} ${first_name}`\r\n//     //               }\r\n//     //               let json = {\r\n//     //                 name,\r\n//     //                 id\r\n//     //               }\r\n//     //               getContactArr.push(json)\r\n//     //             }\r\n\r\n//     //             console.log('endArr', endArr);\r\n//     //             //5.把宠物信息并到病历单-----缺少品种\r\n//     //             let dataArr = endArr.map((data) => {\r\n//     //               let oneExam = data\r\n//     //               for (let i = 0; i < getContactArr.length; i++) {\r\n//     //                 if (getContactArr[i].id === oneExam.contact_id) {\r\n//     //                   let { name } = getContactArr[i]\r\n//     //                   oneExam.owner = name\r\n//     //                 }\r\n\r\n//     //               }\r\n//     //               return oneExam\r\n//     //             })\r\n\r\n\r\n//     //             //6.获取病历单\r\n//     //             let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n//     //             let breedIdUri = encodeURIComponent(breedIdStr)\r\n//     //             console.log(breedIdUri);\r\n\r\n//     //             let getbreedIdArr = []\r\n\r\n//     //             FetchEszVet(`/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //               .then(res => {\r\n//     //                 console.log('获取到了品种信息', res);\r\n\r\n\r\n\r\n//     //                 let items = res.items\r\n//     //                 for (let i = 0; i < items.length; i++) {\r\n\r\n//     //                   const { name, id } = items[i].breed\r\n\r\n//     //                   if (name === '') {\r\n//     //                     name = 'UnKnown'\r\n//     //                   }\r\n//     //                   let json = {\r\n//     //                     name,\r\n//     //                     id\r\n//     //                   }\r\n//     //                   getbreedIdArr.push(json)\r\n//     //                 }\r\n\r\n//     //                 console.log('endArr', endArr);\r\n//     //                 //5.把宠物品种并到病历单\r\n//     //                 let endExamArr = dataArr.map((data, index) => {\r\n//     //                   let oneExam = data\r\n\r\n//     //                   for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n//     //                     if (getbreedIdArr[i].id === oneExam.breed) {\r\n//     //                       let { name } = getbreedIdArr[i]\r\n//     //                       oneExam.breed = name\r\n//     //                     }\r\n\r\n//     //                   }\r\n//     //                   return oneExam\r\n//     //                 })\r\n//     //                 this.setState({\r\n//     //                   data: endExamArr,\r\n//     //                   loading: false,\r\n//     //                   spin: false\r\n//     //                 })\r\n//     //               })\r\n//     //               .catch(err => {\r\n//     //                 console.log(err);\r\n//     //                 this.setState({\r\n//     //                   loading: false,\r\n//     //                   spin: false\r\n//     //                 })\r\n//     //               })\r\n\r\n//     //           })\r\n//     //           .catch(err => {\r\n//     //             console.log(err);\r\n//     //             this.setState({\r\n//     //               loading: false,\r\n//     //               spin: false\r\n//     //             })\r\n//     //           })\r\n\r\n\r\n\r\n//     //       })\r\n//     //       .catch(err => {\r\n//     //         this.setState({\r\n//     //           loading: false,\r\n//     //           spin: false\r\n//     //         })\r\n//     //         console.log(err);\r\n//     //       })\r\n\r\n\r\n//     //   })\r\n//     //   .catch(err => {\r\n//     //     console.log(err);\r\n//     //     this.setState({\r\n//     //       loading: false,\r\n//     //       spin: false\r\n//     //     })\r\n//     //   })\r\n\r\n//   }\r\n\r\n//   //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n//   ForwardRankingDate = (data, p) => {\r\n//     for (let i = 0; i < data.length - 1; i++) {\r\n//       for (let j = 0; j < data.length - 1 - i; j++) {\r\n//         // console.log(Date.parse(data[j][p]));\r\n//         if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n//           var temp = data[j];\r\n//           data[j] = data[j + 1];\r\n//           data[j + 1] = temp;\r\n//         }\r\n//       }\r\n//     }\r\n//     return data;\r\n//   }\r\n\r\n\r\n//   getColumnSearchProps = dataIndex => ({\r\n//     //dataIndex 是标题名称\r\n//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n//       <div style={{ padding: 8 }}>\r\n//         <Input\r\n//           ref={node => {\r\n//             this.searchInput = node;\r\n//           }}\r\n//           placeholder={`Search ${dataIndex}`}\r\n//           value={selectedKeys[0]}\r\n//           onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n//           onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n//           style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n//         />\r\n//         <Space>\r\n//           <Button\r\n//             type=\"primary\"\r\n//             onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n//             icon={<SearchOutlined />}\r\n//             size=\"small\"\r\n//             style={{ width: 90 }}\r\n//           >\r\n//             Search\r\n//           </Button>\r\n//           <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n//             Reset\r\n//           </Button>\r\n//         </Space>\r\n//       </div>\r\n//     ),\r\n//     //自定义Icon\r\n//     filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n//     //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n//     onFilter: (value, record) => {\r\n//       console.log(value, record, dataIndex);\r\n//       return record[dataIndex]\r\n//         ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n//         : ''\r\n//     },\r\n//     onFilterDropdownVisibleChange: visible => {\r\n//       if (visible) {\r\n//         setTimeout(() => this.searchInput.select(), 100);\r\n//       }\r\n//     },\r\n//     render: text =>\r\n//       this.state.searchedColumn === dataIndex ? (\r\n//         <Highlighter\r\n//           highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n//           searchWords={[this.state.searchText]}\r\n//           autoEscape\r\n//           textToHighlight={text ? text.toString() : ''}\r\n//         />\r\n//       ) : (\r\n//         text\r\n//       ),\r\n//   });\r\n\r\n//   handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n//     confirm();\r\n//     this.setState({\r\n//       searchText: selectedKeys[0],\r\n//       searchedColumn: dataIndex,\r\n//     });\r\n//   };\r\n\r\n//   handleReset = clearFilters => {\r\n//     clearFilters();\r\n//     this.setState({ searchText: '' });\r\n//   };\r\n//   _refresh = () => {\r\n//     console.log('点击了');\r\n//     this.setState({\r\n//       spin: true\r\n//     })\r\n//     // this._getData()\r\n//     this._getExam()\r\n//   }\r\n//   render () {\r\n//     const columns = [\r\n//       {\r\n//         title: 'Pet Name',\r\n//         dataIndex: 'petName',\r\n//         key: 'petName',\r\n//         //   width: '30%',\r\n//         ...this.getColumnSearchProps('petName'),\r\n//       },\r\n//       {\r\n//         title: 'Owner',\r\n//         dataIndex: 'owner',\r\n//         key: 'owner',\r\n//         //   width: '20%',\r\n//         ...this.getColumnSearchProps('owner'),\r\n//       },\r\n//       {\r\n//         title: 'Breed',\r\n//         dataIndex: 'breed',\r\n//         key: 'breed',\r\n//         ...this.getColumnSearchProps('breed'),\r\n//       },\r\n\r\n//       {\r\n//         title: 'Gender',\r\n//         dataIndex: 'gender',\r\n//         key: 'gender',\r\n//         // width: '30%',\r\n//         ...this.getColumnSearchProps('gender'),\r\n//       },\r\n//       {\r\n//         title: 'Age',\r\n//         dataIndex: 'age',\r\n//         key: 'age',\r\n//         // width: '20%',\r\n//         render: (text, record, index) => {\r\n//           // console.log(text);\r\n\r\n//           if (`${text}` === 'NaN') {\r\n//             return (\r\n//               <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n//             )\r\n//           } else {\r\n//             return (\r\n//               <p style={{ textAlign: 'center' }}>{text}</p>\r\n//             )\r\n//           }\r\n\r\n//         }\r\n//       },\r\n//       {\r\n//         title: 'Weight',\r\n//         dataIndex: 'weight',\r\n//         key: 'weight',\r\n//         ...this.getColumnSearchProps('weight'),\r\n//       },\r\n//       {\r\n//         title: 'Creation time',\r\n//         dataIndex: 'insertedAt',\r\n//         key: 'insertedAt',\r\n//         render: (text, record, index) => {\r\n//           let chazhi = new Date().getTimezoneOffset()\r\n//           // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n//           let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n//           // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n//           return (\r\n//             <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n//           )\r\n\r\n//         }\r\n//       },\r\n\r\n//     ];\r\n//     const { loading, data, api, id, seleceID, spin } = this.state\r\n//     return (\r\n\r\n//       <div id=\"ezyVetSelectExam\">\r\n//         {/* 关闭缩小 */}\r\n//         <MaxMin\r\n//           onClick={() => { this.props.history.push('/') }}\r\n//           onClick1={() => this.props.history.push({ pathname: '/EzyVetSelectTime' })}\r\n//         />\r\n\r\n//         <div className=\"textfa1\">\r\n//           <div className=\"textfa\">\r\n//             <div className=\"text\">Select Patient Exam</div>\r\n//             <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n//           </div>\r\n//           <div className=\"r\" onClick={() => {\r\n//             let electron = window.electron\r\n//             electron.shell.openExternal('https://mella.vetspire.com/clients')\r\n//           }}>+</div>\r\n//         </div>\r\n\r\n\r\n//         <div className=\"table\">\r\n//           <Table\r\n//             columns={columns}\r\n//             dataSource={data}\r\n//             loading={loading}\r\n//             locale={{ filterConfirm: <div>111</div> }}\r\n//             pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true }}\r\n//             onRow={(record) => {\r\n//               return {\r\n//                 onClick: (event) => {\r\n\r\n//                   console.log(record);\r\n//                   if (record.consult_id === '') {\r\n//                     message.error('This record cannot be updated. Please try another record', 10)\r\n//                     return\r\n//                   }\r\n//                   storage.ezyVetSelectHealthstatus = JSON.stringify(record)\r\n\r\n//                   // let patientId = record.key\r\n//                   // let petName = record.petName\r\n\r\n//                   // console.log(patientId, petName);\r\n//                   // storage.selectExamId = record.key\r\n//                   // storage.selectPatientId = record.patientId\r\n\r\n//                   // storage.selectAge = record.age\r\n//                   // storage.selectBreed = record.breed\r\n//                   // storage.selectOwner = record.owner\r\n//                   // storage.selectWeight = record.weight\r\n//                   // storage.selectPetName = record.petName\r\n\r\n//                   this.props.history.push({ pathname: '/page10', })\r\n\r\n//                 }, // 点击行\r\n\r\n//               };\r\n//             }}\r\n//           />\r\n//         </div>\r\n\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectMella\\SelectMella.jsx",["971"],"import React, { Component } from 'react'\r\nimport {\r\n  Button,\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\n\r\nimport './selectMella.less'\r\nexport default class SelectMella extends Component {\r\n\r\n  state = {\r\n    radiobgc1: '#E1206D',\r\n    radiobgc2: '',\r\n    radiobgc3: '',\r\n    chooseNum: 1,\r\n    isNotAsk: false,\r\n    isDefault: true\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n  }\r\n  _radio = (i) => {\r\n    console.log(i);\r\n    switch (i) {\r\n      case 1:\r\n        this.setState({\r\n          radiobgc1: '#E1206D',\r\n          radiobgc2: '',\r\n          radiobgc3: '',\r\n          chooseNum: 1\r\n        })\r\n        break;\r\n\r\n      case 2:\r\n        this.setState({\r\n          radiobgc1: '',\r\n          radiobgc2: '#E1206D',\r\n          radiobgc3: '',\r\n          chooseNum: 2\r\n        })\r\n        break;\r\n      case 3:\r\n        this.setState({\r\n          radiobgc1: '',\r\n          radiobgc2: '',\r\n          radiobgc3: '#E1206D',\r\n          chooseNum: 3\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n  _next = () => {\r\n    const { chooseNum } = this.state\r\n    this.props.history.push({ pathname: '/VetSpireSelectExam' })\r\n  }\r\n  render () {\r\n    const { radiobgc1, radiobgc2, radiobgc3 } = this.state\r\n    return (\r\n      <div id=\"selectMella\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick1={() => { this.props.history.push('/page3') }}\r\n          onClick={() => this.props.history.push('/')}\r\n        />\r\n\r\n        {/* 文本 */}\r\n        <div className=\"text\">Select Your Mella</div>\r\n\r\n        {/* 单选框 */}\r\n        <div className=\"radios\">\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(1)}>\r\n            <div className=\"radioText1\">Mella 001</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc1 }}></div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(2)}>\r\n            <div className=\"radioText1\">Mella 002</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc2 }}></div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(3)}>\r\n            <div className=\"radioText1\">Mella 003</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc3 }}></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"select\">\r\n          <div className=\"notAsk\">\r\n            <div\r\n              className=\"zheng\"\r\n              onClick={() => {\r\n                console.log(123);\r\n                this.setState({\r\n                  isNotAsk: !this.state.isNotAsk\r\n                })\r\n              }}>\r\n              {(this.state.isNotAsk) ? (<img src={dui} alt='' width='40px' />) : (null)}\r\n            </div>\r\n            <p>Don’t ask again</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"select\">\r\n          <div className=\"notAsk\">\r\n            <div className=\"zheng\" onClick={() => this.setState({ isDefault: !this.state.isDefault })}>\r\n              {(this.state.isDefault) ? (<img src={dui} alt='' width='40px' />) : (null)}\r\n            </div>\r\n            <p>Default Device &nbsp; </p>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        {/* 按钮 */}\r\n        <div className=\"btn\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'>\r\n            New Device\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._next}>\r\n            Connect\r\n          </Button>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectAllExam.jsx",["972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999"],"////这是普通用户的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message,\r\n  Menu,\r\n  Modal,\r\n  Select,\r\n  ConfigProvider\r\n\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport Button1 from '../../utils/button/Button'\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport Heard from '../../utils/heard/Heard'\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './doctorSelectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { FetchEszVet } from '../../utils/FetchEszVet'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport gender from '../../utils/gender'\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { MTop, mTop, pX, px, win } from '../../utils/px';\r\nimport { stopBubble } from '../../utils/current'\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\r\nimport jinggao from './../../assets/img/jinggao.png'\r\nimport redclose from './../../assets/img/redclose.png'\r\nimport blackTriangle from './../../assets/img/blackTriangle.png'\r\nimport refresh from './../../assets/img/Refresh.png'\r\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\r\n\r\nimport electronStore from '../../utils/electronStore';\r\n\r\nconst { SubMenu } = Menu;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\n\r\n\r\n\r\nexport default class DoctorSelectAllExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchData: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n    unixToURI: '',\r\n    ezyVetToken: '',\r\n    current: 1,\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    heardSearchText: '',\r\n\r\n    isNotFound: true,\r\n    modalVis: false,\r\n\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n    sortBy: 'Time',\r\n    showsortBy: false\r\n  }\r\n  componentWillMount () {\r\n    // console.log('------------', this.props.location.listDate);\r\n    try {\r\n      if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n        // console.log('------------', this.props.location);\r\n        let data = JSON.parse(this.props.location.listDate)\r\n        this.setState({\r\n          data,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    // ipcRenderer.send('big')\r\n    message.destroy()\r\n\r\n\r\n\r\n    storage.identity = '3'\r\n\r\n    if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n      let data = JSON.parse(this.props.location.listDate)\r\n      this.setState({\r\n        data,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        loading: true,\r\n      })\r\n    }\r\n    this._getExam()\r\n    temporaryStorage.logupVetInfo = {}\r\n    temporaryStorage.logupSelectOrganization = {}\r\n    temporaryStorage.logupSuccessData = {}\r\n    temporaryStorage.logupOrganization = {}\r\n    temporaryStorage.logupEmailCode = ''\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = \"5px 5px\"\r\n      style.textAlign = 'center'\r\n\r\n\r\n    }\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  rhapsody = async (patientsArr) => {\r\n\r\n    // console.log(patientsArr);\r\n    let dataArr = []\r\n    try {\r\n      for (let i = 0; i < patientsArr.length; i++) {\r\n        let params = { query: `query { patient (id:\"${patientsArr[i].patientId}\") {  vitals { data{ id, weight{value}, createdAt, updatedAt}}}}` }\r\n        let item = await fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n        if (item.data) {\r\n\r\n          let { vitals } = item.data.patient\r\n          let vitalData = vitals.data\r\n          console.log('-----------', vitalData);\r\n          let weight = ''\r\n          if (vitalData.length > 0) {\r\n            vitalData.sort((a, b) => {\r\n              return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n            })\r\n            if (vitalData[0].weight && vitalData[0].weight.value) {\r\n              patientsArr[i].weight = (vitalData[0].weight.value * 0.45).toFixed(1)\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n      console.log(patientsArr);\r\n      patientsArr.sort((a, b) => {\r\n        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n      })\r\n      this.setState({\r\n        data: patientsArr,\r\n        loading: false\r\n      })\r\n\r\n      electronStore.set('doctorExam', patientsArr)\r\n    } catch (error) {\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n      message.destroy()\r\n      message.error('Medical record acquisition failed')\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n\r\n\r\n\r\n\r\n\r\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n    if (storage.lastOrganization === '34') {\r\n\r\n      console.log(storage.connectionKey);\r\n      //1.获取用户id\r\n\r\n      let params = { query: `query { business { id, name, state } }` }\r\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n\r\n        .then(res => {\r\n          console.log('---', res);\r\n          if (res.errors) {\r\n            this.setState({\r\n              loading: false,\r\n              spin: false\r\n            })\r\n            message.destroy()\r\n            message.error('Data acquisition failed')\r\n\r\n          } else {\r\n            console.log('获取到了businessId');\r\n            let businessId = res.data.business.id\r\n            // let param = {\r\n            //   query: `query  { patients (businessId:\"${businessId}\") { data{ id, clientId, name,gender, dateOfBirth\r\n            //   species{id,name},\r\n            //   breeds{id,name},\r\n            //   createdAt,owners{owner{firstName,lastName} }}}` }\r\n            let param = {\r\n              query: `query { \r\n                patients (businessId:\"${businessId}\") {\r\n                    data{ \r\n                         id, \r\n                         clientId, \r\n                         businessId, \r\n                         name  \r\n                         gender,\r\n                         dateOfBirth,\r\n                         species{id,name},\r\n                         breeds{id,name},\r\n                         createdAt ,\r\n                         owners{owner{firstName,lastName}}\r\n                    }\r\n                }\r\n            }`\r\n            }\r\n\r\n            console.log('获取病历单的入参', param, JSON.stringify(param));\r\n            fetchRhapsody('', 'POST', param, storage.connectionKey)\r\n              .then(res => {\r\n                console.log(res);\r\n                if (res.errors) {\r\n                  this.setState({\r\n                    loading: false,\r\n                    spin: false\r\n                  })\r\n                  message.destroy()\r\n                  message.error('Failed to get pet list')\r\n\r\n                } else {\r\n                  let patientsArr = res.data.patients.data\r\n                  let dataArr = []\r\n                  for (let i = 0; i < patientsArr.length; i++) {\r\n                    const patient = patientsArr[i];\r\n                    let { id, name, gender, dateOfBirth, breeds, owners, createdAt } = patient\r\n\r\n                    createdAt = moment(createdAt).format('X')\r\n                    let owner = 'unknown'\r\n                    if (owners.length > 0) {\r\n                      let ownerItem = owners[0]\r\n                      if (ownerItem && ownerItem.owner) {\r\n                        let { firstName, lastName } = ownerItem.owner\r\n                        if (firstName || lastName) {\r\n                          owner = `${lastName} ${firstName}`\r\n                        }\r\n                      }\r\n\r\n                    }\r\n\r\n                    let breed = 'unknown'\r\n                    if (breeds.length > 0 && breeds[0].name) {\r\n                      breed = breeds[0].name\r\n                    }\r\n\r\n                    let petAge = 'unknown'\r\n                    if (dateOfBirth) {\r\n                      petAge = moment(new Date()).diff(moment(dateOfBirth), 'years')\r\n                      // console.log('petAge', petAge);\r\n                    }\r\n\r\n                    let json = {\r\n                      insertedAt: createdAt,\r\n                      patientId: id,\r\n                      petName: name,\r\n                      owner,\r\n                      breed,\r\n                      gender: gender || 'unknown',\r\n                      age: petAge,\r\n                      petId: '',\r\n                      id: `${i}`,\r\n                      weight: null,\r\n                      rfid: null,\r\n                      url: null,\r\n                      speciesId: null,\r\n                    }\r\n                    dataArr.push(json)\r\n\r\n\r\n                  }\r\n\r\n                  console.log(dataArr);\r\n\r\n\r\n\r\n                  this.rhapsody(dataArr)\r\n                }\r\n\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                this.setState({\r\n                  loading: false,\r\n                  spin: false\r\n                })\r\n                message.destroy()\r\n                message.error('Failed to get pet list')\r\n              })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n          message.destroy()\r\n          message.error('Data acquisition failed')\r\n        })\r\n\r\n\r\n\r\n\r\n      return\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    console.log('查询宠物的入参', params);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n      // fetchRequest('/new/pet/subscribe/page', 'POST', params)\r\n\r\n      .then(res => {\r\n        console.log('查询到的宠物列表,/user/listAllPetInfo', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let data = []\r\n          let oldList = res.data\r\n          // let oldList = res.data.list\r\n          for (let i = 0; i < oldList.length; i++) {\r\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n              h2tLength, torsoLength } = oldList[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n              h2tLength, torsoLength,\r\n              pethubId, macId,\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          console.log('列表的数据：', data);\r\n          storage.doctorList = JSON.stringify(data)\r\n          this.setState({\r\n            data,\r\n            loading: false,\r\n            spin: false\r\n          })\r\n\r\n          electronStore.set('doctorExam', data)\r\n\r\n\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n          spin: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    // this._getData()\r\n    this._getExam()\r\n  }\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n\r\n    switch (e.key) {\r\n      case '1': this.props.history.push('/page11'); break;\r\n      case '2': this.props.history.push('/'); break;\r\n      case '3':\r\n        try {\r\n\r\n          let selectNum = document.getElementsByClassName('ant-pagination-item-active')\r\n          // storage.defaultCurrent = selectNum[0].title\r\n          storage.doctorList = JSON.stringify(this.state.data)\r\n        } catch (error) {\r\n          console.log('错误信息', error);\r\n        }\r\n\r\n\r\n        this.props.history.push('/page8'); break;\r\n      case '4': this.props.history.push('/page12'); break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n\r\n  _search1 = (search) => {       //这个是搜索调用后台的函数，现在废弃20210929\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      petName: search,\r\n    }\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n    console.log('搜索的数据', params);\r\n    fetchRequest('/pet/listPetsLike', \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n\r\n        if (res.flag === true) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { age, createTime, patientId, petName, firstName, birthday, lastName, breedName, gender, petId, weight } = res.data[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n              // console.log('petAge', petAge);\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            searchData: data,\r\n            loading: false\r\n          })\r\n        } else {\r\n          this.setState({\r\n            searchData: [],\r\n            loading: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _search = (keyWord) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\r\n\r\n    /**\r\n     * 使用indexof方法实现模糊查询\r\n     *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n     *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n     *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n     *  \r\n     * list         原数组\r\n     * keyWord      查询关键词\r\n     * searchData   查询的结果\r\n     * \r\n     * toLowerCase（）方法：将字符串统一转成小写\r\n     * toUpperCase（）方法：将字符串统一转成大写\r\n     * \r\n     */\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    let list = this.state.data\r\n    let searchData = []\r\n    for (let i = 0; i < list.length; i++) {\r\n      let petName = list[i].petName.toLowerCase() || ''\r\n      let patientId = list[i].patientId.toLowerCase() || ''\r\n      let rfid = list[i].rfid || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        searchData.push(list[i])\r\n      }\r\n    }\r\n    console.log(searchData);\r\n    this.setState({\r\n      searchData,\r\n      loading: false\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  RFIDSearch = () => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest4(`/pet/getPetInfoByRFID/${this.state.heardSearchText}/${storage.lastOrganization}`, 'GET')\r\n      .then(res => {\r\n        console.log('----RFID搜索结果', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let { createTime, patientId, petName, firstName, lastName, breedName, gender, birthday, petId, rfid, weight } = res.data\r\n          patientId = patientId || 'unknown'\r\n          petName = petName || 'unknown'\r\n          breedName = breedName || 'unknown'\r\n          weight = weight || 'unknown'\r\n          let owner = ''\r\n          if (!firstName) {\r\n            firstName = ''\r\n          }\r\n          if (!lastName) {\r\n            lastName = ''\r\n          }\r\n          if (lastName === '' && firstName === '') {\r\n            owner = 'unknown'\r\n          } else {\r\n            owner = `${lastName} ${firstName}`\r\n          }\r\n          createTime = moment(createTime).format('X')\r\n          let petGender = ''\r\n          switch (`${gender}`) {\r\n            case '1': petGender = 'F'\r\n\r\n              break;\r\n            case '0': petGender = \"M\"\r\n              break;\r\n            default: petGender = 'unknown'\r\n              break;\r\n          }\r\n          let petAge = 'unknown'\r\n          if (birthday) {\r\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            // console.log('petAge', petAge);\r\n          }\r\n          let json = {\r\n            insertedAt: createTime,\r\n            patientId,\r\n            petName,\r\n            owner,\r\n            breed: breedName,\r\n            gender: petGender,\r\n            age: petAge,\r\n            petId,\r\n            id: 0,\r\n            weight,\r\n            rfid\r\n          }\r\n          let searchData = []\r\n          searchData.push(json)\r\n          this.setState({\r\n            searchData,\r\n            loading: false\r\n          })\r\n\r\n\r\n\r\n\r\n        } else if (res.flag === true && res.msg === '该组织下无此宠物信息') {\r\n          console.log('找到了但是不是在这个组织下');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: false,\r\n            heardSearchText: ''\r\n          })\r\n        } else {\r\n          console.log('没有找到');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: true,\r\n            heardSearchText: ''\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n        console.log('抛出异常:', err);\r\n        this.setState({\r\n          loading: false,\r\n        })\r\n      })\r\n  }\r\n  draggleRef = React.createRef();\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        width: '16%',\r\n        // ...this.getColumnSearchProps('insertedAt'),\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n          // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n          let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\r\n          let time = moment(parseInt(text) * 1000).format('hh:mm a');\r\n          let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n          // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n          return (\r\n            <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\r\n              <p>{`${year}`}</p>\r\n              <p>{`${time}`}</p>\r\n            </div>\r\n          )\r\n        },\r\n\r\n      },\r\n      {\r\n        title: 'Pet ID',\r\n        dataIndex: 'patientId',\r\n        key: 'patientId',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('patientId'),\r\n      },\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('breed'),\r\n        render: (text, record, index) => {\r\n          if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        width: '12%',\r\n        // width: '30%',\r\n        // ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        width: '12%',\r\n        // width: '20%',\r\n        render: (text, record, index) => {\r\n          // console.log(text);\r\n\r\n          if (`${text}` === 'NaN') {\r\n            return (\r\n              <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin, closeColor, closebgc, minbgc, disabled, bounds, modalVis, sortBy, showsortBy } = this.state\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = `5px 5px`\r\n      style.textAlign = 'center'\r\n    }\r\n    const noData = () => {\r\n      return (\r\n        <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\r\n          <p style={{ fontSize: px(22) }}>No pet found, </p>  &nbsp;&nbsp;\r\n          <a style={{ fontSize: px(22) }} href=\"#\"\r\n            onClick={(e) => {\r\n              console.log('我要去添加宠物');\r\n              try {\r\n\r\n                storage.doctorList = JSON.stringify(this.state.data)\r\n              } catch (error) {\r\n                console.log('错误信息', error);\r\n              }\r\n              // /pet/doctorAddPet\r\n              this.props.history.push({ pathname: '/pet/doctorAddPet' })\r\n\r\n              e.preventDefault();\r\n\r\n            }}\r\n\r\n          >{`go to add`}</a>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div id=\"doctorSelectExam\" onClick={(e) => {\r\n        console.log('隐藏');\r\n        this.setState({\r\n          showsortBy: false\r\n        })\r\n      }}>\r\n        {/* 关闭缩小 */}\r\n        <Heard\r\n          onReturn={() => {\r\n            this.props.history.push('/page11')\r\n          }}\r\n          onSearch={(data) => {\r\n\r\n            storage.doctorExam = JSON.stringify(data)\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data)\r\n            if (storage.isClinical === 'true') {\r\n              this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n            } else {\r\n              this.props.history.push({ pathname: '/page10', })\r\n            }\r\n          }}\r\n          menu8Click={() => {\r\n            this.props.history.push({ pathname: '/uesr/selectExam', })\r\n          }}\r\n          blueSearch={true}\r\n        />\r\n\r\n\r\n        <div className=\"hread flex\">\r\n          <div className=\"hread1 flex\" style={{ marginTop: px(30) }}>\r\n            <div className=\"heard1L flex\">\r\n              <div className=\"title\" style={{ fontSize: px(25) }}>Client Results</div>\r\n              <div className=\"refresh flex\"\r\n                style={{ fontSize: px(25), marginLeft: px(10) }}\r\n              >\r\n                <SyncOutlined onClick={this._refresh} spin={spin} />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"walkin flex\"\r\n              style={{ borderRadius: px(50), height: px(45), fontSize: px(20) }}\r\n              onClick={() => {\r\n                storage.doctorExam = JSON.stringify('')\r\n                storage.doctorList = JSON.stringify(this.state.data)\r\n                if (storage.isClinical === 'true') {\r\n                  this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: null })\r\n                } else {\r\n                  this.props.history.push({ pathname: '/page10', })\r\n                }\r\n\r\n              }}\r\n            >Walk-In</div>\r\n\r\n          </div>\r\n          <div className=\"heard2 flex\" style={{ marginTop: px(8), marginBottom: px(8) }}>\r\n\r\n            <div className=\"sort flex\" >\r\n              <p style={{ fontSize: px(16), marginRight: px(10) }}>sort By:</p>\r\n\r\n              <SelectionBox\r\n                listArr={[\r\n                  { key: 'time', value: 'Time' },\r\n                  { key: 'petid', value: 'Pet ID' },\r\n                  { key: 'owner', value: 'Owner' },\r\n                  { key: 'breed', value: 'Breed' },\r\n                  { key: 'petname', value: 'Pet Name' },\r\n                  { key: 'gender', value: 'Gender' },\r\n                ]}\r\n                clickItem={(item) => {\r\n                  let petList = [].concat(data)\r\n                  switch (item.key) {\r\n                    case 'time':\r\n                      petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n                      break;\r\n                    case 'petid':\r\n                      petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n                      break;\r\n                    case 'owner':\r\n                      petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n                      break;\r\n                    case 'breed':\r\n                      petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n                      break;\r\n                    case 'petname':\r\n                      petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n                      break;\r\n                    case 'gender':\r\n                      petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n                      break;\r\n                  }\r\n\r\n                  this.setState({\r\n                    sortBy: item.value,\r\n                    showsortBy: false,\r\n                    data: petList\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\" >\r\n          <ConfigProvider renderEmpty={noData}>\r\n            <Table\r\n              style={{\r\n                // border: ' #979797 1px solid',\r\n                padding: 0,\r\n                margin: 0,\r\n                width: '95%',\r\n                // height: px(500)\r\n              }}\r\n              rowKey={data => data.id}\r\n              bordered={false}\r\n              columns={columns}\r\n              dataSource={(this.state.heardSearchText.length === 0) ? this.state.data : this.state.searchData}\r\n              loading={loading}\r\n              locale={{ filterConfirm: <div>111</div> }}\r\n              // pagination={{ showSizeChanger: false, showQuickJumper: true, defaultCurrent: this.state.current }}\r\n              pagination={false}\r\n              scroll={{\r\n                y: px(600)\r\n              }}\r\n              onRow={(record) => {\r\n                return {\r\n                  onClick: (event) => {\r\n\r\n                    console.log('record', record);\r\n                    storage.doctorExam = JSON.stringify(record)\r\n                    storage.doctorList = JSON.stringify(this.state.data)\r\n\r\n                    if (storage.isClinical === 'true') {\r\n                      this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.patientId })\r\n                    } else {\r\n                      this.props.history.push({ pathname: '/page10', })\r\n                    }\r\n\r\n\r\n                  }, // 点击行\r\n\r\n                };\r\n              }}\r\n            />\r\n          </ConfigProvider>\r\n        </div>\r\n\r\n        <Modal\r\n\r\n          // visible={isOrg}\r\n          visible={modalVis}\r\n          onCancel={() => this.setState({ modalVis: false })}\r\n          width={350}\r\n          footer={[]}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"doctorSelectExamModal\"\r\n        >\r\n          <div id='doctorSelectExamModal'>\r\n            <div className=\"text\"\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n\r\n            >{this.state.isNotFound ? 'Pet not found!' : 'Pet found!'}</div>\r\n            <div className='Img'>\r\n              {this.state.isNotFound ?\r\n                <img src={redclose} width=\"50px\" /> :\r\n                <img src={jinggao} width=\"50px\" />\r\n              }\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {this.state.isNotFound ? <p > This pet is not on your database</p> :\r\n              <p >Pet Identified but does not <br /> belong to your organization.</p>}\r\n\r\n\r\n            <div style={{ marginTop: px(20) }}>\r\n              <Button1\r\n                text={'OK'}\r\n\r\n                onClick={() => this.setState({\r\n                  modalVis: false\r\n                })}\r\n              />\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\joinOrganizationByOption\\JoinOrganizationByOption.jsx",["1000","1001","1002","1003","1004","1005","1006","1007"],"import React, { Component } from 'react'\r\nimport {\r\n  // Button,\r\n  message,\r\n  Modal,\r\n  Input\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\nimport { createFromIconfontCN, SyncOutlined } from '@ant-design/icons';\r\nimport Button from './../../../utils/button/Button'\r\nimport Close from './../../../assets/img/close.png'\r\nimport left1 from './../../../assets/img/left1.png'\r\n\r\n\r\n\r\nimport './joinOrganizationByOption.less'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { px } from '../../../utils/px'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nexport default class FindWorkplace extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    listData: [],\r\n    searchData: [],\r\n    selectId: {},\r\n    isOrg: false,       //nodel框是否显示\r\n    isWorkplace: false,\r\n    workplaceList: [],\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    selectworkplace: {}\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    fetchRequest(`/organization/listAll`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            listData: res.data\r\n          })\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n    this.setState({\r\n      selectId: temporaryStorage.logupSelectOrganization\r\n    })\r\n    temporaryStorage.logupSelectOrganization = {}\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n  _logIn = () => {\r\n\r\n    let storage = window.localStorage;\r\n    let { email, hash } = temporaryStorage.logupVetInfo\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: '1'\r\n    }\r\n    console.log('---登录入参', params);\r\n    fetchRequest('/user/mellaLogin', 'POST', params)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        if (res.status && res.status === 404) {\r\n          message.error('system error');\r\n          return\r\n        }\r\n        if (res.status && res.status === 500) {\r\n          message.error('Internal Server Error');\r\n          return\r\n        }\r\n        if (res.code === 10001 && res.msg === '账号错误') {\r\n          message.error('Account error');\r\n          return\r\n        }\r\n        if (res.code === 10002 && res.msg === '密码错误') {\r\n          message.error('wrong password')\r\n          return;\r\n        }\r\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n          return\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === 'success') {\r\n          console.log('账号密码正确，登录进去了');\r\n          let { userWorkplace, lastOrganization, token } = res.success\r\n          storage.token = token\r\n          storage.userId = ''\r\n\r\n          storage.userId = res.success.userId\r\n          storage.roleId = res.success.roleId\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = ''\r\n          storage.defaultCurrent = ''\r\n          this.setState({\r\n            isOrg: false,\r\n            isWorkplace: false\r\n          })\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace)\r\n            let connectionKey = ''\r\n            const element = userWorkplace[0];\r\n            storage.lastOrganization = element.organizationEntity.organizationId\r\n            storage.lastWorkplaceId = element.workplaceEntity.workplaceId\r\n            if (element.organizationEntity.connectionKey) {\r\n              connectionKey = element.organizationEntity.connectionKey\r\n            }\r\n            if (element.roleId) {\r\n              console.log(element.roleId);\r\n              storage.roleId = element.roleId\r\n            }\r\n            if (userWorkplace.length === 1) {\r\n              this.props.history.push(\"/MainBody\");\r\n\r\n            } else {\r\n              this.props.history.push('/page12')\r\n            }\r\n          } else {\r\n            storage.userWorkplace = ''\r\n            storage.connectionKey = ''\r\n            this.props.history.push(\"/MainBody\");\r\n            storage.lastOrganization = ''\r\n            storage.lastWorkplaceId = ''\r\n          }\r\n\r\n        }\r\n        if (res.code === 10000 && res.msg === '系统内部错误') {\r\n          message.error('system error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        message.error('Login failed')\r\n      })\r\n  }\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n  _searchworkPlace = (val) => {\r\n    let search = val.target.value\r\n    let listData = this.state.workplaceList\r\n    console.log('----------------', listData);\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.organizationId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          temporaryStorage.logupSelectOrganization = item\r\n\r\n\r\n        }}\r\n\r\n      >\r\n        <div className=\"item\"> {item.name}</div>\r\n\r\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  _list1 = () => {\r\n    const { search, workplaceList, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : workplaceList\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.workplaceId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectworkplace: item\r\n          })\r\n          console.log(item);\r\n\r\n        }}\r\n\r\n      >\r\n\r\n        {item.workplaceName}\r\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  _goNewOrg = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    this.props.history.push('/uesr/logUp/NewOrganization')\r\n  }\r\n  _goNewWorkplace = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    this.props.history.push('/uesr/logUp/NewWorkplace')\r\n  }\r\n  _goWorkplace = () => {\r\n    console.log('前往工作场所');\r\n    fetchRequest(`/workplace/listAllWorkplaceByOrganizationId/${temporaryStorage.logupSelectOrganization.organizationId}`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            workplaceList: res.data,\r\n            isOrg: false,\r\n\r\n          }, () => {\r\n            this.setState({\r\n              isWorkplace: true\r\n            })\r\n          })\r\n        } else {\r\n          console.log('请求错误');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  _addworkplaced = () => {\r\n    let params = {\r\n      userId: temporaryStorage.logupSuccessData.userId,\r\n      roleId: 2,\r\n      workplaceId: this.state.selectworkplace.workplaceId,\r\n      organizationId: this.state.selectworkplace.organizationId\r\n    }\r\n    console.log('入参：', params);\r\n    this.setState({\r\n      isLoading: true,\r\n      isWorkplace: false,\r\n      isOrg: false\r\n    })\r\n\r\n    fetchRequest('/user/updateUserInfo', 'POST', params)\r\n      .then(res => {\r\n        console.log(res);\r\n\r\n        if (res.flag === true) {\r\n          message.success('Join successfully', 3)\r\n\r\n          console.log('成功',);\r\n          this._logIn()\r\n        } else {\r\n          this.setState({\r\n            isLoading: false\r\n          })\r\n          message.error('Join failed', 3)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  render () {\r\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\r\n    return (\r\n      <div id=\"joinOrganizationByOption\">\r\n        <div className=\"heard\">\r\n          {/* 关闭缩小 */}\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"text\">Join an Organization</div>\r\n\r\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n                // this.props.history.push('/uesr/logUp/FindMyOrganization')\r\n                this.setState({\r\n                  isOrg: true\r\n                })\r\n                console.log('搜索名称加入');\r\n              }}\r\n            >\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-search' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n\r\n                <div className=\"title\">Search organization</div>\r\n\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n                console.log('创建');\r\n                this.props.history.push('/uesr/logUp/NewOrganization')\r\n              }}>\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n                <div className=\"listtext\">\r\n                  <div className=\"title\">Create an organization</div>\r\n                </div>\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n\r\n                let params = {\r\n                  userId: temporaryStorage.logupSuccessData.userId,\r\n                  roleId: 2,\r\n                }\r\n                message.destroy()\r\n                this.setState({\r\n                  isLoading: true\r\n                })\r\n                console.log('搜索id加入', params);\r\n                fetchRequest2('/user/updateUserInfo', 'POST', params)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.flag === true) {\r\n\r\n                      console.log('成功',);\r\n                      this._logIn()\r\n                    } else {\r\n                      this.setState({\r\n                        isLoading: false\r\n                      })\r\n                      message.error('Identity update failed')\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                    message.error(err.message, 3)\r\n                  })\r\n              }}>\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-guanbi2' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n                <div className=\"listtext\">\r\n                  <div className=\"title\">Continue without organization</div>\r\n                </div>\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={isOrg}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                  // className=\" iconfont icon-left return\"\r\n                  // onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    {/* <img src={left1} alt=\"\" style={{ height: px(25) }} /> */}\r\n                  </div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"text\"\r\n                  onMouseOver={() => {\r\n                    if (disabled) {\r\n                      this.setState({\r\n                        disabled: false,\r\n                      });\r\n                    }\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    this.setState({\r\n                      disabled: true,\r\n                    });\r\n                  }}\r\n\r\n                >Find my organization</div>\r\n\r\n                <div className=\"searchBox\">\r\n\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search organization\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._search}\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\"\r\n\r\n              >\r\n                {this._list()}\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Organization'}\r\n                  onClick={this._goWorkplace}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\r\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n\r\n        />\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={isWorkplace}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                    // className=\" iconfont icon-left return\"\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    <img src={left1} alt=\"\" style={{ height: px(25) }} />\r\n                  </div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\r\n\r\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search workplace\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._searchworkPlace}\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\"\r\n\r\n              >\r\n                {this._list1()}\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Workplace'}\r\n                  onClick={this._addworkplaced}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\r\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n\r\n        />\r\n        <MyModal\r\n          visible={this.state.isLoading}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\advancedSettings\\AdvancedSettings.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\addDevice\\AddDevice.jsx",["1008","1009","1010","1011","1012","1013","1014","1015","1016","1017"],"import React, { Component } from 'react'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './addDevice.less'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\nimport redclose from '../../../assets/img/redclose.png'\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport { mTop, px, MTop, pX } from '../../../utils/px';\r\nimport electronStore from '../../../utils/electronStore';\r\n\r\nlet storage = window.localStorage;\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\nlet num07 = 0       //接收到07命令行的次数\r\n\r\n\r\nexport default class AddDevice extends Component {\r\n\r\n  state = {\r\n    noUSB: false,\r\n    devicesList: [],\r\n    selectDevice: null,\r\n    // selectDevice: true,\r\n    reName: '',\r\n    saveDeviceMac: []  //这是已经保存过的设备的macid\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    message.destroy()\r\n\r\n    ipcRenderer.send('small')\r\n    // 监听分辨率是否改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\r\n    if (devicesList) {\r\n      let saveDeviceMac = []\r\n      for (let i = 0; i < devicesList.length; i++) {\r\n        const element = devicesList[i];\r\n        saveDeviceMac.push(element.macId)\r\n      }\r\n      this.setState({\r\n        saveDeviceMac\r\n      })\r\n    }\r\n\r\n\r\n\r\n    // const timer = setTimeout(() => {\r\n    //   let deviceList = [\r\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\r\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\r\n    //   ]\r\n    //   this.setState({\r\n    //     devicesList: deviceList\r\n    //   })\r\n    //   clearTimeout(timer)\r\n    // }, 500);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        // message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    // console.log(data);\r\n    this.command(data)()\r\n  }\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    const instruction = [255]\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n    // console.log(dataArr1);\r\n    const commandArr = {\r\n      255: () => {//蓝牙软尺广播的数据\r\n        let length = newArr.length\r\n        let frameLength = newArr[1]   //帧长\r\n        let itemLength = newArr[3] + 1  //数据位的长度   13\r\n        let dataIndex = 0\r\n\r\n        let bluName = ''\r\n        let bluData = []\r\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\r\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\r\n          let itemData = []\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5])\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = ''\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16)\r\n                str += String.fromCharCode(item)\r\n              }\r\n              bluName = str\r\n              break;\r\n            case 255:\r\n              bluData = itemData\r\n              break;\r\n            case 7: console.log('---UUID'); break;\r\n            case 239:\r\n              // console.log('---mac地址'); \r\n              break;\r\n            case 3: console.log('----尺子的,不知道什么用'); break;\r\n            default: console.log('直接跳出循环'); return;\r\n          }\r\n          dataIndex = itemLength\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\r\n        }\r\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n        let macId = ''\r\n        if (bluData.length > 7) {\r\n          macId = this.getMac(bluName, bluData)\r\n        }\r\n\r\n\r\n        let sameFlog = this.state.devicesList.some((device, index) => {\r\n          return device.macId === macId\r\n        })\r\n        if (sameFlog || !macId) {   //重复直接退出\r\n          return\r\n        }\r\n        let deviceType = ''\r\n        switch (bluName) {\r\n          case 'Biggie':        //这是体脂称\r\n            deviceType = 'biggie'\r\n\r\n            break;\r\n          case 'C19':        //这是体脂称\r\n            deviceType = 'biggie'\r\n\r\n            break;\r\n\r\n          case 'MaeBowl':   //这是称量碗\r\n            deviceType = 'maeBowl'\r\n            break;\r\n\r\n          case 'Mella Measure': //这是蓝牙尺\r\n            deviceType = 'tape'\r\n            break;\r\n\r\n        }\r\n        if (macId && deviceType && bluName) {\r\n          let json = {\r\n            name: bluName,\r\n            deviceType,\r\n            macId\r\n          }\r\n          let deviceArr = [].concat(this.state.devicesList)\r\n          deviceArr.push(json)\r\n          this.setState({\r\n            devicesList: deviceArr\r\n          })\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n  }\r\n  getMac = (bluName, bluData) => {\r\n    switch (bluName) {\r\n      case 'Biggie':\r\n      case 'MaeBowl':\r\n      case 'Mella Measure':\r\n      case 'C19':\r\n        let str = bluData[1]\r\n        for (let i = 2; i < 7; i++) {\r\n          str += `:${bluData[i]}`\r\n        }\r\n        return str\r\n\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  changeFenBianLv = (e) => {\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n    })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  body = () => {\r\n    let { noUSB, devicesList, selectDevice, reName } = this.state\r\n    if (selectDevice) {\r\n      return <div className=\"addDevice flex\">\r\n        <div className=\"addDeviceTop flex\">\r\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\r\n            this Mella device?</div>\r\n\r\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\r\n            <input type=\"text\" style={{ height: px(45) }}\r\n              value={reName}\r\n              onChange={(value) => {\r\n                this.setState({\r\n                  reName: value.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\r\n          on the Exam Room. Write the name\r\n          on the sticker provided so it is easy\r\n            to select your device in the future.</div>\r\n        </div>\r\n        <div className=\"addDeviceFoot flex\">\r\n          <div className=\"btn\"\r\n            onClick={() => {\r\n              let { reName, selectDevice } = this.state\r\n              console.log(reName, selectDevice);\r\n              if (reName) {\r\n                selectDevice.name = reName\r\n              }\r\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\r\n              console.log('---', deviceList);\r\n              deviceList.push(selectDevice)\r\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\r\n              let { saveDeviceMac } = this.state\r\n              saveDeviceMac.push(selectDevice.macId)\r\n              this.setState({\r\n                saveDeviceMac,\r\n                selectDevice: null,\r\n                reName: ''\r\n              })\r\n\r\n            }}\r\n          >\r\n            <p className='btnText'>Add Another</p>\r\n          </div>\r\n          <div className=\"btn\"\r\n            onClick={() => {\r\n              let { reName, selectDevice } = this.state\r\n              console.log(reName, selectDevice);\r\n              if (reName) {\r\n                selectDevice.name = reName\r\n              }\r\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\r\n              deviceList.push(selectDevice)\r\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\r\n              this.props.history.goBack()\r\n\r\n            }}\r\n          >\r\n            <p className='btnText'>Finish</p>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    } else {\r\n      if (noUSB) {\r\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\r\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\r\n\r\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\r\n        </div>\r\n      } else {\r\n        if (devicesList.length === 0) {\r\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n            {/* < MyModal\r\n              visible={true}\r\n              element={\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n                  <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                    <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n                  </div>\r\n                  <p>\r\n                    {'searching...'}\r\n                  </p>\r\n                </div>\r\n              }\r\n            /> */}\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\r\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\r\n              </div>\r\n              <p>\r\n                {'searching...'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        } else {\r\n          let options = devicesList.map((item, index) => {\r\n            let { saveDeviceMac } = this.state\r\n            let flog = saveDeviceMac.some((device, index) => {\r\n              return device === item.macId\r\n            })\r\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\r\n            return <li\r\n              className='flex'\r\n              style={{ marginBottom: px(20) }}\r\n              key={`${index}`}\r\n              onClick={() => {\r\n                if (!flog) {\r\n                  this.setState({\r\n                    selectDevice: item\r\n                  })\r\n                } else {\r\n                  message.destroy();\r\n                  message.error('This device has already been added')\r\n                }\r\n\r\n              }}\r\n            >\r\n\r\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\r\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\r\n\r\n            </li>\r\n          })\r\n          return <div className='deviceList'>\r\n            <ul>\r\n              {options}\r\n            </ul>\r\n          </div>\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"addDevice\">\r\n        <div className=\"heaed\">\r\n          <div className=\"l\"\r\n          >\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                let { selectDevice } = this.state\r\n                if (selectDevice) {\r\n                  this.setState({\r\n                    selectDevice: null\r\n                  })\r\n                } else {\r\n                  this.props.history.goBack()\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body flex\">\r\n          {this.body()}\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\gender.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js",["1018","1019","1020","1021"],"\r\n// let COMMON_URL = 'http://106.14.220.139:8043/mellaserver';//本地\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/mellaserver';//企业AWS\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest (url, method, params = '', Authorization = '') {\r\n\r\n    if (method === 'GET' || method === 'DELETE') {\r\n        let header = {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            // 定一个空数组\r\n            let paramsArray = [];\r\n            //  拆分对象\r\n            Object.keys(params).forEach(key =>\r\n                paramsArray.push(key + \"=\" + params[key])\r\n            );\r\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n            if (url.search(/\\?/) === -1) {\r\n                url = url + \"?\" + paramsArray.join(\"&\");\r\n            } else {\r\n                url = url + \"&\" + paramsArray.join(\"&\");\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": 'text/plain'\r\n                    }\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else {\r\n        let header = {\r\n            \"Content-type\": \"application/json\"\r\n        };\r\n        if (Authorization) {\r\n            header.Authorization = Authorization\r\n        }\r\n        // console.log(header);\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            console.log('进入着了', Authorization, header);\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    // mode: 'cors',\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx",["1022"],"\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './selectionBox.less'\r\nimport { px } from './../px'\r\nimport { stopBubble } from './../current'\r\n\r\nimport blackTriangle from './../../assets/img/blackTriangle.png'\r\n\r\n\r\nconst SelectionBox = ({ listArr, clickItem, clickitemBgc, clickItemColor, initSelectVale }) => {\r\n    const [selectValue, setSelectValue] = useState('')\r\n    const [mouseValue, setMouseValue] = useState('')\r\n    const [showSelect, setShowSelect] = useState(false)\r\n    // const [bacColor, setBacColor] = useState('#fff')\r\n    // const [textColor, setTextColor] = useState('#000')\r\n\r\n    useEffect(() => {\r\n        console.log(listArr[0]);\r\n        setSelectValue(listArr[0].value)\r\n        setMouseValue(listArr[0].value)\r\n        if (initSelectVale) {\r\n            setSelectValue(initSelectVale)\r\n        }\r\n    }, [])\r\n\r\n    const selection = () => {\r\n        let option = listArr.map((item, index) => {\r\n            let bacColor = item.value === selectValue ? clickitemBgc : item.value === mouseValue ? '#e7e7e7' : '#fff'\r\n            let textColor = item.value === selectValue ? clickItemColor : '#000'\r\n\r\n\r\n            // setBacColor(bacColor1)\r\n            // setTextColor(textColor1)\r\n            return <li\r\n                key={item.key}\r\n                style={{ paddingTop: px(5), paddingBottom: px(5), backgroundColor: bacColor, color: textColor }}\r\n                onClick={() => {\r\n                    setSelectValue(item.value)\r\n                    setShowSelect(false)\r\n                    clickItem(item)\r\n                }}\r\n                onMouseMove={() => {\r\n                    console.log();\r\n                    if (item.value !== selectValue) {\r\n                        setMouseValue(item.value)\r\n                    }\r\n                }}\r\n                onMouseLeave={() => {\r\n                    if (item.value !== selectValue) {\r\n                        // setBacColor('#fff')\r\n                        setMouseValue('')\r\n                    }\r\n                }}\r\n            >{item.value}</li>\r\n        })\r\n        return (\r\n            <ul>\r\n                {option}\r\n            </ul>\r\n        )\r\n\r\n\r\n    }\r\n    return (\r\n        <div className='selectionbox'>\r\n\r\n            <div className=\"select flex\" style={{ height: px(26) }}>\r\n                <div className=\"flex box\" onClick={(e) => {\r\n                    setShowSelect(true)\r\n                    stopBubble(e)\r\n                }}>\r\n                    <p style={{ fontSize: px(16), }}>{selectValue}</p>\r\n                    <img src={blackTriangle} alt=\"\" style={{ height: '50%' }} />\r\n                </div>\r\n\r\n                {\r\n                    showSelect &&\r\n                    true &&\r\n                    <div className=\"sortList\" style={{ top: px(26), }}>\r\n                        {selection()}\r\n                    </div>\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nSelectionBox.propTypes = {\r\n    listArr: PropTypes.array.isRequired,\r\n    clickItem: PropTypes.func,\r\n    clickitemBgc: PropTypes.string,\r\n    clickItemColor: PropTypes.string,\r\n    initSelectVale: PropTypes.string\r\n\r\n\r\n}\r\nSelectionBox.defaultProps = {\r\n    clickitemBgc: '#e1206d',\r\n    clickItemColor: '#fff',\r\n    initSelectVale: '',\r\n    clickItem: () => {\r\n\r\n    }\r\n}\r\nexport default SelectionBox","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\hardWareTypeUI.jsx",["1023","1024","1025"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\r\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\r\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\r\nimport tape from \"./../../assets/img/hardList-tape.png\";\r\nimport add from \"./../../assets/img/hardList-add.png\";\r\nimport maeBowl from \"./../../assets/img/hardList-maeBowl.png\";\r\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nlet storage = window.localStorage;\r\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\r\nconst HardWareTypeUI = ({\r\n  bodyHeight,\r\n  devicesTypeList,\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  selectHardwareType,\r\n  setMenuNum,\r\n  menuNum,\r\n}) => {\r\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\r\n\r\n  let options = devicesTypeList.map((item, index) => {\r\n    let img = null;\r\n    switch (item.type) {\r\n      case \"mellaPro\":\r\n        img = mellaPro;\r\n        break;\r\n\r\n      case \"biggie\":\r\n        img = biggie;\r\n        break;\r\n\r\n      case \"rfid\":\r\n        img = rfid;\r\n        break;\r\n\r\n      case \"tape\":\r\n        img = tape;\r\n        break;\r\n      case \"maeBowl\":\r\n        img = maeBowl;\r\n        break;\r\n      case \"add\":\r\n        img = add;\r\n        break;\r\n\r\n      case \"otterEQ\":\r\n        img = otterEQ;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    let borderStyle = ``;\r\n    if (item.type === selectHardwareType) {\r\n      borderStyle = ` 2px solid #3B3A3A`;\r\n    }\r\n\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        style={{ padding: `${px(10)}px 0` }}\r\n        onClick={() => {\r\n          console.log(item.type);\r\n\r\n          if (menuNum !== \"6\"&&!electronStore.get(`${storage.userId}-isClical`)) {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType(item.type);\r\n            if (item.type === \"add\") {\r\n            } else {\r\n              let devicesInfo = electronStore.get(\r\n                `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\r\n              );\r\n\r\n              //要做个处理,看保存的数据是否和当前的一致，如果不一致，就把当前的保存下来\r\n\r\n              if (!devicesInfo && item.devices[0]) {\r\n                devicesInfo = item.devices[0];\r\n                electronStore.set(\r\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\r\n                  devicesInfo\r\n                );\r\n              }\r\n\r\n              selectHardwareInfoFun(devicesInfo);\r\n            }\r\n          } else {\r\n            setSelectHardwareType(\"mellaPro\");\r\n          }\r\n        }}\r\n      >\r\n        <div\r\n          style={{ border: borderStyle, padding: px(2), borderRadius: px(10) }}\r\n        >\r\n          <img src={img} alt=\"\" width={px(55)} />\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    let Index = null;\r\n    for (let i = 0; i < devicesTypeList.length; i++) {\r\n      const element = devicesTypeList[i];\r\n      if (element.type === selectHardwareType) {\r\n        Index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (Index === null) {\r\n      return;\r\n    }\r\n\r\n    let hard = devicesTypeList[Index];\r\n    if (hard && hard.type !== \"add\") {\r\n      let devicesInfo = electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\r\n      );\r\n\r\n      if (!devicesInfo) {\r\n        devicesInfo = hard.devices[0];\r\n        electronStore.set(\r\n          `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n          devicesInfo\r\n        );\r\n      } else {\r\n        let sameFlag = false;\r\n        console.log(\"============\", hard.devices, devicesInfo);\r\n        for (let i = 0; i < hard.devices.length; i++) {\r\n          const element = hard.devices[i];\r\n          if (\r\n            element.mac === devicesInfo.mac &&\r\n            element.name === devicesInfo.name\r\n          ) {\r\n            sameFlag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!sameFlag) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n      }\r\n\r\n      console.log(\"保存的折本信息\", devicesInfo);\r\n\r\n      selectHardwareInfoFun(devicesInfo);\r\n    }\r\n  }, [devicesTypeList]);\r\n\r\n  return (\r\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\r\n      <ul>{options}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nHardWareTypeUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array,\r\n};\r\n//默认值\r\nHardWareTypeUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: [],\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    menuNum: state.userReduce.menuNum,\r\n  }),\r\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\r\n)(HardWareTypeUI);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",["1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport PetTable from '../../components/petTable';\r\nimport './allPet.less'\r\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\r\nimport moment from 'moment'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\r\n\r\n    //初始化获取宠物列表数据\r\n    const [petListArr, setPetListArr] = useState([])\r\n    //定义宠物列表是否加载中\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [spin, setSpin] = useState(false)\r\n\r\n    useEffect(() => {\r\n        //获取宠物列表\r\n        _getExam()\r\n    }, [])\r\n    const _getExam = async () => {\r\n        console.log('进来了');\r\n\r\n\r\n        let params = {\r\n            doctorId: storage.userId,\r\n            offset: 0,\r\n            size: 100,\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n\r\n\r\n        console.log('查询宠物的入参', params);\r\n        const isUnKnow = (val) => {\r\n            if (val) {\r\n                return val\r\n            } else {\r\n                return 'unknown'\r\n            }\r\n        }\r\n        setLoading(true)\r\n\r\n        fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n\r\n            .then(res => {\r\n                console.log('查询到的宠物列表,/user/listAllPetInfo', res);\r\n                if (res.flag === true && res.data) {\r\n                    let data = []\r\n                    let oldList = res.data\r\n                    setPetListArrFun(oldList)\r\n                    // let oldList = res.data.list\r\n                    for (let i = 0; i < oldList.length; i++) {\r\n                        let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n                            h2tLength, torsoLength } = oldList[i]\r\n                        let owner = ''\r\n                        patientId = isUnKnow(patientId)\r\n                        petName = isUnKnow(petName)\r\n                        breedName = isUnKnow(breedName)\r\n                        age = isUnKnow(age)\r\n                        weight = isUnKnow(weight)\r\n                        if (!firstName) {\r\n                            firstName = ''\r\n                        }\r\n                        if (!lastName) {\r\n                            lastName = ''\r\n                        }\r\n                        if (lastName === '' && firstName === '') {\r\n                            owner = 'unknown'\r\n                        } else {\r\n                            owner = `${lastName} ${firstName}`\r\n                        }\r\n                        createTime = moment(createTime).format('X')\r\n                        let petGender = ''\r\n                        switch (`${gender}`) {\r\n                            case '1': petGender = 'F'\r\n\r\n                                break;\r\n                            case '0': petGender = \"M\"\r\n                                break;\r\n                            default: petGender = 'unknown'\r\n                                break;\r\n                        }\r\n                        let petAge = 'unknown'\r\n                        if (birthday) {\r\n                            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n                        }\r\n\r\n                        let json = {\r\n                            insertedAt: createTime,\r\n                            patientId,\r\n                            petName,\r\n                            owner,\r\n                            breed: breedName,\r\n                            gender: petGender,\r\n                            age: petAge,\r\n                            petId,\r\n                            id: i,\r\n                            weight,\r\n                            rfid,\r\n                            url,\r\n                            speciesId,\r\n                            l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                            h2tLength, torsoLength,\r\n                            pethubId, macId,\r\n\r\n                        }\r\n                        data.push(json)\r\n\r\n                    }\r\n                    data.sort((a, b) => {\r\n                        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                    })\r\n                    console.log('列表的数据：', data);\r\n                    setPetListArr(data)\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setLoading(false)\r\n                setSpin(false)\r\n            })\r\n\r\n\r\n\r\n    }\r\n    const _refresh = () => {\r\n        console.log('点击了');\r\n        setSpin(true)\r\n        _getExam()\r\n    }\r\n\r\n    return (\r\n        <div id='allPets' style={{ height: bodyHeight }}>\r\n            <div className=\"allPetHeard\">\r\n                <div className=\"addDeviceTitle flex\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>\r\n                    <div className=\"title\">Client Results</div>\r\n                    <div className=\"refresh flex\"\r\n                        style={{ fontSize: px(25), marginLeft: px(10) }}\r\n                    >\r\n                        <SyncOutlined onClick={_refresh} spin={spin} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(40), width: px(200) }}\r\n                        onClick={() => {\r\n                            let json = {\r\n                                isWalkIn: true,\r\n                                petId: null,\r\n                                petName: null,\r\n                                owner: null,\r\n                                breed: null,\r\n\r\n                            }\r\n                            petDetailInfoFun(json)\r\n                            setMenuNum(\"1\")\r\n                        }}\r\n                    >\r\n                        <div className=\"walkText\">Walk-In</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <PetTable\r\n                bodyHeight={bodyHeight - devicesTitleHeight}\r\n                petListArr={petListArr}\r\n                loading={loading}\r\n                resetPetList={(val) => setPetListArr(val)}\r\n\r\n            />\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAllPet.propTypes = {\r\n\r\n}\r\n//默认值\r\nAllPet.defaultProps = {\r\n    bodyHeight: 0,\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, setPetListArrFun }\r\n)(AllPet)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",["1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",["1050"],"\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\linkEquipment.jsx",["1051","1052","1053","1054","1055","1056"],"import React, {\r\n    useEffect,\r\n    useState,\r\n} from 'react';\r\nimport { Image, Layout } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun\r\n} from '../../../store/actions';\r\nimport _ from 'lodash';\r\nimport './linkEquipment.less';\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n    let { mellaConnectStatus } = hardwareMessage;\r\n    return (\r\n\r\n        <Content className={\"contentBox\"}>\r\n            <div className='chackPatientBox'>\r\n                <p className='chackPatientTitle'>Select a patient</p>\r\n            </div>\r\n        </Content>\r\n\r\n    );\r\n}\r\nexport default connect(\r\n    state => ({\r\n        petMessage: state.petReduce.petDetailInfo,\r\n        hardwareMessage: state.hardwareReduce,\r\n    }),\r\n    {\r\n        selectHardwareModalShowFun,\r\n        petSortTypeFun,\r\n        petDetailInfoFun,\r\n        setMellaConnectStatusFun,\r\n        setMellaMeasureValueFun,\r\n        setMellaPredictValueFun,\r\n        setMellaMeasurePartFun\r\n    }\r\n)(LinkEquipment);","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["1057","1058","1059","1060","1061","1062","1063","1064","1065","1066"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Image,\r\n  Layout,\r\n  Dropdown,\r\n  Col,\r\n  Row,\r\n  Avatar,\r\n  Space,\r\n  Card,\r\n  Menu,\r\n  Progress,\r\n} from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\nimport Charlie from \"./../../../assets/img/Charlie.png\";\r\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\r\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\r\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\r\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\r\n\r\nimport connectBle from \"./../../../assets/img/connectBle.png\";\r\nimport redcat from \"./../../../assets/images/redcat.png\";\r\nimport reddog from \"./../../../assets/images/reddog.png\";\r\nimport redother from \"./../../../assets/images/redother.png\";\r\nimport { connect } from \"react-redux\";\r\nimport { devicesTitleHeight } from \"../../../utils/InitDate\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n  setMellaPredictReturnValueFun,\r\n} from \"../../../store/actions\";\r\nimport moment from \"moment\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\nimport _ from \"lodash\";\r\nimport \"./headerItem.less\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst HeaderItem = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  timeNum = 15,\r\n  setMellaPredictReturnValueFun,\r\n}) => {\r\n  let history = useHistory();\r\n  let {\r\n    petName,\r\n    patientId,\r\n    firstName,\r\n    lastName,\r\n    gender,\r\n    breedName,\r\n    birthday,\r\n    weight,\r\n    url,\r\n    petSpeciesBreedId,\r\n    petId,\r\n    isWalkIn,\r\n  } = petMessage;\r\n  let {\r\n    mellaConnectStatus,\r\n    mellaPredictValue,\r\n    mellaMeasureValue,\r\n    mellaMeasurePart,\r\n    rulerConnectStatus,\r\n    biggieConnectStatus,\r\n    selectHardwareInfo,\r\n    selectHardwareType,\r\n  } = hardwareMessage;\r\n  const [value, setValue] = useState(0);\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    let random = null;\r\n    if (timeNum === 15) {\r\n      random = 7;\r\n    } else if (timeNum === 30) {\r\n      random = 3.5;\r\n    } else {\r\n      random = 1.75;\r\n    }\r\n    setValue(value + random);\r\n  };\r\n  //展示宠物照片方法\r\n  const petPicture = (size) => {\r\n    if (_.isEmpty(url)) {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <Avatar src={redcat} size={size} />;\r\n      } else if (\r\n        petSpeciesBreedId === 12001 ||\r\n        _.inRange(petSpeciesBreedId, 136, 456)\r\n      ) {\r\n        return <Avatar src={reddog} size={size} />;\r\n      } else if (petSpeciesBreedId === 13001) {\r\n        return <Avatar src={redother} size={size} />;\r\n      } else {\r\n        return <Avatar src={redother} size={size} />;\r\n      }\r\n    } else {\r\n      return <Avatar src={url} size={size} />;\r\n    }\r\n  };\r\n  //展示名字或id方法\r\n  const showNameOrId = () => {\r\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\r\n      return \"unknown\";\r\n    } else if (!_.isEmpty(petName)) {\r\n      return petName;\r\n    } else {\r\n      return patientId;\r\n    }\r\n  };\r\n  //展示主人名字方法\r\n  const ownerName = () => {\r\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return firstName + \" \" + lastName;\r\n    }\r\n  };\r\n  //计算宠物年龄\r\n  const calculateAge = () => {\r\n    if (_.isEmpty(birthday)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\r\n    }\r\n  };\r\n  //计算宠物体重\r\n  const calculateWeight = () => {\r\n    if (_.isEmpty(weight)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\r\n    }\r\n  };\r\n  //头部弹出卡片\r\n  const cardItem = () => {\r\n    return (\r\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\r\n        <Menu.Item className=\"topItem\">\r\n          <div className=\"cardTopBox\">\r\n            <div className=\"topLeftBox\">\r\n              {petPicture(91)}\r\n              <p className=\"cardTitle\">{showNameOrId()}</p>\r\n              <p className=\"cardTitle\">{ownerName()}</p>\r\n            </div>\r\n            <div className=\"topRightBox\">\r\n              <p className=\"cardTitle\">{calculateAge()}</p>\r\n              <p className=\"cardTitle\">{calculateWeight()}</p>\r\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\r\n              <p className=\"cardTitle\">{breedName}</p>\r\n            </div>\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item key={\"editPetInfo\"}>\r\n          <p className=\"itemList\">Edit Pet Profile</p>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <p className=\"itemList\">Export Temperature History</p>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <p className=\"itemList\">Export All Vitals History</p>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const clilkMenu = (item) => {\r\n    console.log(\"---item\", item);\r\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\r\n      //跳转到编辑宠物信息页面\r\n      history.push(\"/page9\");\r\n    }\r\n  };\r\n  //超过15s后调用接口\r\n  const prediction = () => {\r\n    let parame = {\r\n      ambient_temperature: 17,\r\n      data: mellaPredictValue,\r\n      deviceId: \"11111\",\r\n      sampling_rate: \"135ms\",\r\n    };\r\n    let url = \"/clinical/catv12Predict\";\r\n    console.log(\"-----调用接口入参\", parame);\r\n    fetchRequest(url, \"POST\", parame)\r\n      .then((res) => {\r\n        console.log(\"res\", res);\r\n        let ipcRenderer = window.electron.ipcRenderer;\r\n        if (res.message === \"Success\") {\r\n          let prediction = res.result.prediction.toFixed(2);\r\n          console.log(\"------yuce\", prediction);\r\n\r\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\r\n          setMellaPredictReturnValueFun(num);\r\n\r\n          let tempArr = prediction.split(\".\");\r\n          let intNum = tempArr[0];\r\n          let flotNum = tempArr[1];\r\n          if (intNum.length < 2) {\r\n            intNum = \"0\" + intNum;\r\n          }\r\n          if (flotNum.length < 2) {\r\n            flotNum = \"0\" + flotNum;\r\n          }\r\n          const timeID = setTimeout(() => {\r\n            ipcRenderer.send(\"usbdata\", {\r\n              command: \"42\",\r\n              arr: [intNum, flotNum],\r\n            });\r\n\r\n            timeID && clearTimeout(timeID);\r\n          }, 10);\r\n        } else {\r\n          const timeID = setTimeout(() => {\r\n            // this.sendData('41', [])\r\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\r\n\r\n            clearTimeout(timeID);\r\n          }, 10);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  };\r\n  //判断仪器是否连接从而判断选择什么图片\r\n  const isConnect = () => {\r\n    const checkImage = () => {\r\n      if (mellaMeasurePart === \"腋温\") {\r\n        return AxillaryBluetooth;\r\n      }else if(mellaMeasurePart === \"耳温\"){\r\n        return EarBluetoothIcon;\r\n      }else{\r\n        return RectalBluetoothIcon;\r\n      }\r\n    };\r\n    switch (selectHardwareType) {\r\n      case \"mellaPro\":\r\n        return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Progress\r\n            width={48}\r\n            type=\"circle\"\r\n            percent={value}\r\n            format={() => <Avatar size={40} src={checkImage()} />}\r\n          />\r\n        );\r\n      case \"biggie\":\r\n        return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Avatar size={40} src={connectBle} />\r\n        );\r\n      case \"tape\":\r\n        return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Avatar size={40} src={connectBle} />\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (value === 105 && timeNum !== 60) {\r\n      prediction();\r\n    } else if (value === 105 && timeNum === 60) {\r\n      let ipcRenderer = window.electron.ipcRenderer;\r\n      const timeID = setTimeout(() => {\r\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\r\n        clearTimeout(timeID);\r\n      }, 10);\r\n    }\r\n    return () => {};\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    let timer = null;\r\n    if (mellaConnectStatus === \"isMeasuring\") {\r\n      setValue(0);\r\n      timer = setInterval(tick, 1000);\r\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\r\n      clearInterval(timer);\r\n    }else if(mellaConnectStatus === \"disconnected\"){\r\n      setValue(0);\r\n    };\r\n    if (mellaConnectStatus === \"complete\") {\r\n      // let ipcRenderer = window.electron.ipcRenderer;\r\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [mellaConnectStatus]);\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        className=\"headerBox\"\r\n        style={{ height: devicesTitleHeight, background: \"#fff\" }}\r\n      >\r\n        {_.isEmpty(petId) && !isWalkIn ? (\r\n          <></>\r\n        ) : (\r\n          <Row className=\"heardRow\">\r\n            {/*头部左侧 */}\r\n            <Col flex={10}>\r\n              {isWalkIn ? (\r\n                <span className=\"walkInTitle\">Walk-In</span>\r\n              ) : (\r\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\r\n                  <div\r\n                    className=\"petMessageBox\"\r\n                    onClick={(e) => e.preventDefault()}\r\n                  >\r\n                    {petPicture(40)}\r\n                    <div className=\"petMessageBox\">\r\n                      <p className=\"petName\">\r\n                        {!_.isEmpty(petMessage.patientId)\r\n                          ? petMessage.patientId\r\n                          : \"unknown\"}\r\n                        ,{\" \"}\r\n                        {!_.isEmpty(petMessage.petName)\r\n                          ? petMessage.petName\r\n                          : \"unknown\"}\r\n                      </p>\r\n                      <DownOutlined\r\n                        style={{ fontSize: \"22px\", marginLeft: \"10px\" }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Dropdown>\r\n              )}\r\n            </Col>\r\n            {/*头部右侧 */}\r\n            <Col flex={1}>\r\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </Header>\r\n    </>\r\n  );\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n    setMellaPredictReturnValueFun,\r\n  }\r\n)(HeaderItem);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",["1067","1068","1069","1070","1071","1072","1073"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Image, Layout, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\r\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\r\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\r\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\r\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\r\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\r\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\r\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\r\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\r\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\r\n\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HistoryTable from \"../../../components/historyTable\";\r\nimport moment from \"moment\";\r\nimport \"./linkEquipment.less\";\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\r\n  let imageMap = [\r\n    Standing_Dog,\r\n    Standing_Cat,\r\n    Sitting_Dog,\r\n    Sitting_Cat,\r\n    Laying_Dog,\r\n    Laying_Cat,\r\n  ];\r\n\r\n  const [type, setType] = useState(false); //是否显示轮播图\r\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    setCarouselIndex(carouselIndex + 1);\r\n  };\r\n\r\n  //切换图片\r\n  const checkImage = () => {\r\n    if (mellaMeasurePart === \"腋温\") {\r\n      return AxillaryPlacement;\r\n    } else if (mellaMeasurePart === \"耳温\") {\r\n      return EarPlacement;\r\n    } else {\r\n      return RectalPlacement;\r\n    }\r\n  };\r\n  //点击进入轮播图\r\n  const clickIntoTip = () => {\r\n    setType(true);\r\n  };\r\n  //小圆点点击事件\r\n  const clickPoint = (index) => {\r\n    setCarouselIndex(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (carouselIndex === 6) {\r\n      setCarouselIndex(0);\r\n    }\r\n  }, [carouselIndex]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    let timer = null;\r\n    if (type && mellaConnectStatus === \"connected\") {\r\n      timer = setInterval(tick, 1500);\r\n    }\r\n    if (mellaConnectStatus !== \"connected\") {\r\n      setType(false);\r\n      setCarouselIndex(0);\r\n      clearInterval(timer);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [type, mellaConnectStatus]);\r\n\r\n  return (\r\n    <>\r\n      <Content className={\"contentBox\"}>\r\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\r\n          <>\r\n            <div className=\"startBox\">\r\n              <p className=\"startTitle\">\r\n                Turn on your\r\n                <br />\r\n                Mella Thermometer\r\n                <br />\r\n                or Pair New Mella\r\n              </p>\r\n              <img src={PressButton_Pro} />\r\n            </div>\r\n            <div className=\"tableBox\">\r\n              <HistoryTable tableColumnType='temperature' />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"startBox\">\r\n              <p className=\"startTitle\">\r\n                {!type\r\n                  ? \"Ready, place under foreleg\"\r\n                  : \"Place Under Foreleg Standing\"}\r\n              </p>\r\n              {!type ? (\r\n                <>\r\n                  <img src={checkImage()}></img>\r\n                  {mellaMeasurePart === \"腋温\" ? (\r\n                    <div className=\"bottomTip\">\r\n                      <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\r\n                        Need Help With Accurate Placement On Pet?\r\n                      </p>\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"carouselBox\">\r\n                    {_.map(imageMap, (item, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <img\r\n                            className=\"contentStyle\"\r\n                            src={item}\r\n                            style={{\r\n                              display: carouselIndex === index ? \"\" : \"none\",\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div className=\"dotBox\">\r\n                    <ul className=\"dotList\">\r\n                      {_.map(imageMap, (item, index) => {\r\n                        return (\r\n                          <li key={index}>\r\n                            <Button\r\n                              className=\"dotItem\"\r\n                              onClick={() => clickPoint(index)}\r\n                              style={{\r\n                                background:\r\n                                  carouselIndex === index\r\n                                    ? \"#0a0a0a\"\r\n                                    : \"#bdbaba\",\r\n                              }}\r\n                            >\r\n                              {index}\r\n                            </Button>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(LinkEquipment);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",["1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newOrganization\\NewOrganization.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil2.js",["1108","1109","1110","1111"],"\r\n// let COMMON_URL = 'http://192.168.0.36:8080/melladesk';//本地\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/melladesk';//企业AWS\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest2 (url, method, params = '', Authorization) {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain'\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",["1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop, } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport electronStore from '../../utils/electronStore';\r\nimport dog from './../../assets/images/pinkdog.png'\r\nimport cat from './../../assets/images/pinkcat.png'\r\nimport redDog from './../../assets/images/reddog.png'\r\nimport redCat from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\nimport other from './../../assets/images/other.png'\r\nimport redJinggao from './../../assets/img/redjinggao.png'\r\n\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './addScheduledPet.less'\r\nimport { setMenuNum } from '../../store/actions';\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\nimport MYButton from './../../utils/button/Button'\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\n\r\nlet defaultData = {\r\n    patientId: \"\",\r\n    wuzhong: 'dog',\r\n    petName: '',\r\n    miaoshu: ''\r\n}\r\n\r\nlet storage = window.localStorage;\r\nconst AddScheduledPet = ({ bodyHeight, setMenuNum }) => {\r\n    const [addPetist1, setAddPetist] = useState([]);\r\n    const [petName, setPetName] = useState('');\r\n    const [wuzhong, setWuzhong] = useState('dog');\r\n    const [patientId, setPatientId] = useState('');\r\n    const [miaoshu, setMiaoshu] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isSave, setIsSave] = useState(false);\r\n\r\n    const selsectwuzhong = (val) => {\r\n        setWuzhong(val);\r\n\r\n    }\r\n    console.log('addPetist1', addPetist1);\r\n\r\n    const add = () => {\r\n        message.destroy()\r\n        if (!patientId) {\r\n            message.error(`Please enter the pet's patientId`)\r\n            return\r\n        }\r\n        setLoading(true)\r\n\r\n        let petSpeciesBreedId = 12001\r\n        switch (wuzhong) {\r\n            case 'dog': petSpeciesBreedId = 12001; break;\r\n            case 'cat': petSpeciesBreedId = 11001; break;\r\n            case 'other': petSpeciesBreedId = 13001; break;\r\n            default:\r\n                break;\r\n        }\r\n        let params = {\r\n            description: miaoshu,\r\n            doctorId: storage.userId,\r\n            patientId,\r\n            petName,\r\n            petSpeciesBreedId\r\n        }\r\n\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        console.log('入参', params);\r\n        fetchRequest('/new/petall/subscribe', \"POST\", params)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag) {\r\n                    let json = {\r\n                        patientId,\r\n                        wuzhong,\r\n                        petName,\r\n                        miaoshu\r\n                    }\r\n                    let list = [].concat(addPetist1)\r\n                    list.push(json)\r\n                    setAddPetist(list)\r\n                    setLoading(false)\r\n                    setPatientId('')\r\n                    setWuzhong('')\r\n                    setPetName('')\r\n                    setMiaoshu('')\r\n\r\n                } else {\r\n\r\n                    setLoading(false)\r\n                    message.error('add failed')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('错误原因', err);\r\n                setLoading(false)\r\n                message.error('add failed')\r\n            })\r\n\r\n    }\r\n    const body = () => {\r\n        let addPetist = [].concat(addPetist1)\r\n        addPetist.push(defaultData)\r\n        console.log('新的:', addPetist);\r\n\r\n        let options = addPetist.map((item, index) => {\r\n\r\n\r\n            if (index === addPetist.length - 1) {\r\n                return <li key={`${index}`} style={{ width: '100%', }}>\r\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={patientId}\r\n                                onChange={value => {\r\n                                    setPatientId(value.target.value)\r\n\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={petName}\r\n                                onChange={value => {\r\n\r\n                                    setPetName(value.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('dog')\r\n                                }}>\r\n                                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n                            </div>\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('cat')\r\n                                }}>\r\n                                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('other')\r\n                                }}>\r\n                                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={miaoshu}\r\n                                onChange={value => {\r\n\r\n                                    setMiaoshu(value.target.value)\r\n                                }}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n                            <div\r\n                                className='flex'\r\n                                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\r\n                                onClick={add}\r\n\r\n                            >\r\n\r\n                                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </li>\r\n            } else {\r\n                let { patientId, wuzhong, petName, miaoshu } = item\r\n                return <li key={`${index}`} style={{ width: '100%', }}>\r\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <div className='tableText'>\r\n                                {patientId}\r\n                            </div>\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <div className='tableText'> {petName}</div>\r\n                        </div>\r\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n                            <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n                            <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n                            <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n                            <div className='tableText'>{miaoshu}</div>\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </li>\r\n            }\r\n\r\n\r\n        })\r\n\r\n        return (\r\n            <div style={{ width: '100%', marginTop: px(30), height: px(500), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%', }}>\r\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                    <div className='tableHeard'>Patient Id</div>\r\n                    <div className='tableHeard'>Pet Name</div>\r\n                    <div className='tableHeard'>species</div>\r\n                    <div className='tableHeard' style={{ width: '30%' }}>description</div>\r\n                    <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\r\n\r\n                </div>\r\n                <ul >\r\n                    {options}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='addScjediled' style={{ height: bodyHeight }}>\r\n            <div className=\"addDeviceTitle\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>Create New Scheduled </div>\r\n            <div className='addSBody' style={{ width: '100%', height: bodyHeight - devicesTitleHeight, }}>\r\n                {body()}\r\n\r\n\r\n                <div className='continueBox'>\r\n                    <div className='continueBtn'\r\n                        style={{ borderRadius: px(50), height: px(45), fontSize: px(20), }}\r\n                        onClick={() => {\r\n\r\n                            if (!patientId) {\r\n                                setMenuNum('3')\r\n                            } else {\r\n                                setIsSave(true)\r\n                            }\r\n                        }}\r\n                    >Continue</div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <MyModal\r\n                visible={loading}\r\n            />\r\n            <MyModal\r\n                visible={isSave}\r\n                element={\r\n                    <div className='isSave'\r\n                    //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\r\n                    >\r\n                        <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n                        <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\r\n                        <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                            <MYButton\r\n                                text={'Cancel'}\r\n                                onClick={() => {\r\n                                    setIsSave(false)\r\n\r\n                                }}\r\n                                textBoxStyle={{\r\n                                    width: '40%',\r\n                                    height: px(40)\r\n                                }}\r\n                            />\r\n                            <MYButton\r\n                                text={'Exit'}\r\n                                onClick={() => {\r\n                                    setIsSave(false)\r\n                                    setMenuNum('3')\r\n                                }}\r\n                                textBoxStyle={{\r\n                                    width: '40%',\r\n                                    height: px(40)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAddScheduledPet.propTypes = {\r\n\r\n}\r\n//默认值\r\nAddScheduledPet.defaultProps = {\r\n\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { setMenuNum }\r\n)(AddScheduledPet)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",["1124","1125","1126","1127"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Menu, PageHeader } from \"antd\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport ScanPet from \"./components/scanPet\";\r\nimport \"./index.less\";\r\n\r\nconst ScanPage = ({ petMessage, hardwareMessage }) => {\r\n  let { petId, isWalkIn } = petMessage;\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"homeBox\">\r\n        <HeaderItem />\r\n        {_.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet />}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(ScanPage);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardListModal.jsx",["1128"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { px } from \"../../utils/px\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\nimport \"./mainbody.less\";\r\nimport { compareObject } from \"../../utils/current\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25) }}\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => {},\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\Biggie.jsx",["1129","1130","1131","1132","1133","1134","1135","1136","1137"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { px, mTop } from './../../utils/px'\r\nimport cir from './../../assets/images/cir.png'\r\nimport xia from './../../assets/img/xia.png'\r\n\r\n//import 'antd/dist/antd.css';\r\nimport './biggie.less'\r\n\r\n/**\r\n * \r\n * @param {string} weight   体重值\r\n * @param {string} bodyFat   体脂\r\n * @param {string} score   健康指数\r\n * @param {string} impedance   阻抗值\r\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\r\n * @param {function} onPress   点击按钮调用的函数\r\n * \r\n * @returns \r\n */\r\n\r\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\r\n\r\n  // let { weight, bodyFat, score } = this.props\r\n\r\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\r\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\r\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\r\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\r\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\r\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\r\n\r\n  return (\r\n    <div className=\"biggie\" >\r\n      <div className=\"top\">\r\n\r\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\r\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\r\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\r\n          </div>\r\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(5) }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div style={{ height: px(240), borderRadius: px(150), marginBottom: px(50) }} className='cen'>\r\n          <div style={{ borderRadius: px(75) }} className='lT'>\r\n            <img\r\n              src={cir}\r\n              width={'100%'}\r\n            />\r\n          </div>\r\n          <div className='cTText' style={{ top: px(45), fontSize: px(32), fontWeight: '800' }}>{weight}</div>\r\n          <div style={{ top: px(95), fontSize: px(25) }} className='cTText'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\r\n          <div className='cenCText' style={{ fontSize: px(24) }}>Weight</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(6) }}\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\r\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\r\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\r\n          </div>\r\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(5) }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <div className='biggiefoot' style={{ marginTop: px(10), }}>\r\n        {isHaveSaveBtn &&\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\r\n            <div\r\n              className='biggiefootbtn'\r\n              style={{ height: px(36), }}\r\n              onClick={() => {\r\n                discardOnPress()\r\n              }}\r\n            >\r\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\r\n            </div>\r\n\r\n\r\n            <div\r\n              className='biggiefootbtn'\r\n              style={{ height: px(36), }}\r\n              onClick={() => {\r\n                onPress()\r\n              }}\r\n            >\r\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {(impedance && impedance > 0) ? <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10) }}>{`Impedance ${impedance} Ohms`}</div> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nBiggie.propTypes = {\r\n  weight: PropTypes.string || PropTypes.number,\r\n  bodyFat: PropTypes.number || PropTypes.string,\r\n  score: PropTypes.number || PropTypes.string,\r\n  impedance: PropTypes.number || PropTypes.string,\r\n  issave: PropTypes.bool,\r\n  onPress: PropTypes.func,\r\n  isIbs: PropTypes.bool\r\n}\r\nexport default Biggie","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\apiKey\\APIKey.jsx",["1138","1139","1140","1141"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\settings\\Settings.jsx",["1142","1143","1144","1145","1146","1147","1148","1149","1150"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from './../../../utils/button/Button'\r\nimport electronStore from './../../../utils/electronStore'\r\nimport temporaryStorage from './../../../utils/temporaryStorage'\r\nimport { mTop, px, win } from '../../../utils/px';\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport redJinggao from './../../../assets/img/redjinggao.png'\r\nimport './settings.less'\r\n\r\nimport SelectionBox from './../../../utils/selectionBox/SelectionBox'\r\nconst { Option } = Select;\r\nlet storage = window.localStorage\r\n\r\nexport default class Settings extends Component {\r\n\r\n  state = {\r\n    self_tarting: false,      //自启动，\r\n    isHua: true,              //为true代表为华氏度，为false代表℃\r\n    is15: true,               //腋温测量时长，为true则是15秒，为false则是35秒\r\n    isClicleStudy: false,     //是否处于临床测试，为true则在处于，false则不处于\r\n    isBacklight: true,        //是否开启背光，为true则是开启背光，为false则是关闭背光\r\n    isBeep: true,             //是否开启蜂鸣器，为true则是开启蜂鸣器，反之则是关闭蜂鸣器\r\n    backlightTimer: { length: 140, number: '45' },//背光时长，长度指的是在滑轨上面的距离，number指的是显示的秒数\r\n    autoOff: { length: 0, number: '30' },  //无操作自动关机，长度指的是在滑轨上面的距离，number指的是关闭的秒数\r\n\r\n\r\n    oldIsHua: true,\r\n    oldIs15: true,\r\n    oldIsBacklight: true,\r\n    oldIsBeep: true,\r\n    oldBacklightTimer: { length: 140, number: '45' },\r\n    oldAutoOff: { length: 0, number: '30' },\r\n    oldIsClicleStudy: false,\r\n\r\n    isSave: false,\r\n\r\n    num0: '',\r\n    num1: '',\r\n    num2: '',\r\n    num3: '',\r\n    num4: '',\r\n    num5: '',\r\n    verifyNum: '',\r\n\r\n    maxLength: 1, //验证码长度\r\n    valueA: \"\", //验证码第一位\r\n    valueB: \"\", //二\r\n    valueC: \"\", //三\r\n    valueD: \"\", //四\r\n    valueE: \"\", //5\r\n    valueF: \"\", //6\r\n    isClicleStudyModal: false\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('setting', win())\r\n    }\r\n    //这里要根据保存的时候存到哪个位置的，然后拿出来更新state\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`)\r\n    console.log('----', hardSet);\r\n    let isClicleStudy = storage.isClinical === 'true' ? true : false\r\n    if (hardSet) {\r\n      console.log('不是第一次进来，有设置的');\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\r\n\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy,\r\n\r\n      })\r\n    } else {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false,  //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: '45' },\r\n        autoOff: { length: 0, number: '30' },\r\n      }\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = settings\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy\r\n\r\n\r\n      })\r\n    }\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _save = () => {\r\n    console.log('点击保存');\r\n    /**\r\n     * 分别两部分保存保存，\r\n     * 本地存储：程序自启动、测量单位、背光、蜂鸣器、背光时间、硬件自动关机时间、腋温测量时间\r\n     * 临时存储：处于临床测试状态\r\n     */\r\n    this.setState({\r\n      isSave: false\r\n    })\r\n    let { self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 } = this.state\r\n    // console.log({ self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 });\r\n    let settings = {\r\n      isHua,\r\n      is15,\r\n      self_tarting,\r\n      isBacklight,\r\n      isBeep,\r\n      backlightTimer,\r\n      autoOff,\r\n    }\r\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n    // temporaryStorage.isClicleStudy = isClicleStudy\r\n    storage.isClinical = `${isClicleStudy}`\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (self_tarting) {\r\n      ipcRenderer.send('openAutoStart')\r\n    } else {\r\n      ipcRenderer.send('closeAutoStart')\r\n    }\r\n    let setArr = ['03', 'ed', '07', 'dd', autoOff.number, isBacklight ? backlightTimer.number : '00', isBeep ? '11' : '00', isHua ? '00' : '01']\r\n    console.log('setArr', setArr);\r\n\r\n\r\n\r\n    ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n\r\n    this.props.history.goBack()\r\n  }\r\n  _goback = () => {\r\n    console.log('返回');\r\n    let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff, isClicleStudy,\r\n      oldAutoOff, oldBacklightTimer, oldIs15, oldIsBacklight, oldIsBeep, oldIsClicleStudy, oldIsHua, } = this.state\r\n    if (isHua !== oldIsHua || is15 !== oldIs15 || isBacklight !== oldIsBacklight || isBeep !== oldIsBeep || backlightTimer !== oldBacklightTimer\r\n      || autoOff !== oldAutoOff || isClicleStudy !== oldIsClicleStudy) {\r\n      console.log('做了更改');\r\n      this.setState({\r\n        isSave: true\r\n      })\r\n\r\n    } else {\r\n      this.props.history.goBack()\r\n    }\r\n\r\n  }\r\n\r\n  //验证码光标后移\r\n  handleInputValue = (e, type) => {\r\n\r\n    const { value = \"\" } = e.target;\r\n    switch (type) {\r\n      case \"A\":\r\n        if (value) this.secondFoucs.focus();\r\n\r\n        this.setState({\r\n          valueA: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n\r\n      case \"B\":\r\n        if (value) this.tridFoucs.focus();\r\n\r\n        this.setState({\r\n          valueB: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"C\":\r\n        if (value) this.fourFoucs.focus();\r\n\r\n        this.setState({\r\n          valueC: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"D\":\r\n        if (value) this.fiveFoucs.focus();\r\n\r\n        this.setState({\r\n          valueD: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"E\":\r\n        if (value) this.sixFoucs.focus();\r\n\r\n        this.setState({\r\n          valueE: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n      default:\r\n        this.setState({\r\n          valueF: value.slice(0, 1),\r\n          isShow: true\r\n        });\r\n        break;\r\n    }\r\n\r\n  };\r\n  //删除验证码\r\n  handleDel = e => {\r\n    const BACK_SPACE = 8;\r\n    const isBackSpaceKey = e.keyCode === BACK_SPACE;\r\n    if (isBackSpaceKey && e.target.value.length === 0) {\r\n      let previous = e.target;\r\n      //上一个兄弟节点\r\n      previous = previous.previousElementSibling;\r\n      while (previous) {\r\n        if (previous === null) break;\r\n        if (previous.tagName.toLowerCase() === \"input\") {\r\n          previous.focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  moceCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    if (index < 5) {\r\n      inputs[++index].focus()\r\n    }\r\n  }\r\n  backCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    inputs[--index].focus()\r\n  }\r\n  _device = () => {\r\n\r\n    let userId = storage.userId\r\n    let deviceList = electronStore.get(`${userId}-deviceList`)\r\n    console.log('---', deviceList);\r\n    if (!deviceList) {\r\n      let str = `${getRamNumber()}`\r\n      for (let i = 0; i < 5; i++) {\r\n        str += `:${getRamNumber()}`\r\n      }\r\n      console.log('随机生成的mac地址:', str);\r\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\r\n      electronStore.set(`${userId}-deviceList`, deviceList)\r\n    }\r\n\r\n\r\n    function getRamNumber() {\r\n      var result = '';\r\n      for (var i = 0; i < 2; i++) {\r\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\r\n      }\r\n      //默认字母小写，手动转大写\r\n      return result.toLowerCase();//另toLowerCase()转小写\r\n    }\r\n    let deviceArr = []\r\n    let selectDevice = electronStore.get(`${storage.userId}-selectDevice`)\r\n    let selectDeviceName = ''\r\n    for (let i = 0; i < deviceList.length; i++) {\r\n      const element = deviceList[i];\r\n      let json = {\r\n        key: element.macId, value: element.name\r\n      }\r\n      deviceArr.push(json)\r\n      if (selectDevice === element.macId) {\r\n        selectDeviceName = element.name\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"item\" style={{ marginTop: px(15) }}>\r\n        <div className=\"l\">\r\n          <div className=\"hardSetting\">{`Hardware Settings`}</div>\r\n        </div>\r\n\r\n\r\n        {/* <div className=\"l\">\r\n          <div className=\"text\">Device:</div>\r\n\r\n          <div className=\"selebox\" style={{ width: px(200) }}>\r\n            <SelectionBox\r\n              listArr={deviceArr}\r\n              clickItem={(value) => {\r\n                console.log('选择的设备:', value);\r\n                electronStore.set(`${storage.userId}-selectDevice`, value.key)\r\n\r\n              }}\r\n              initSelectVale={selectDeviceName}\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n        </div> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    let { isClicleStudy, isBacklight, isBeep, backlightTimer, valueA, valueB, valueC, valueD, isClicleStudyModal, valueE, valueF, maxLength, sortBy, showsortBy } = this.state\r\n\r\n    let bodyHeight = '90%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div id=\"settings\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={this._goback}\r\n            // onSearch={(val) => { console.log(val); }}\r\n            menu8Click={() => {\r\n              switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\">\r\n          <div className=\"setting\">\r\n            {/* 桌面设计 */}\r\n            <div className=\"desk\">\r\n              <div className=\"title\">Desktop Settings</div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Launch Mella on Computer Startup</div>\r\n                  <div className=\"icon\"\r\n                    onClick={() => this.setState({ self_tarting: !this.state.self_tarting })}\r\n                  >\r\n                    {(this.state.self_tarting) && <span  >&#xe619;</span>}\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"l\" style={{ paddingLeft: px(50), paddingRight: px(50) }}>\r\n                  <div className=\"text\">Units:</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°F / lbs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°C / kg</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                {/* <div className=\"l\">\r\n                  <div className=\"text\">Clinical Study Mode</div>\r\n                  <div className=\"switch\">\r\n                    <Switch\r\n                      checked={isClicleStudy}\r\n                      onClick={() => {\r\n                        if (isClicleStudy === false) {\r\n                          this.setState({\r\n                            isClicleStudy: !isClicleStudy,\r\n                            isClicleStudyModal: true\r\n                          })\r\n                        } else {\r\n                          this.setState({\r\n                            isClicleStudy: !isClicleStudy\r\n                          })\r\n                          // temporaryStorage.isClicleStudy = false\r\n                          storage.isClinical = `${false}`\r\n\r\n                          this.props.history.push({ pathname: '/page10' })\r\n                        }\r\n\r\n                      }}\r\n                      size='small'\r\n                    />\r\n                  </div>\r\n\r\n                </div> */}\r\n\r\n                {/* \r\n                <div className=\"l\" style={{ height: '50px' }}>\r\n\r\n                </div> */}\r\n              </div>\r\n\r\n            </div>\r\n\r\n            {/* 用户设计 */}\r\n            {\r\n              // storage.roleId === '3' &&\r\n              <div className=\"desk\">\r\n                <div className=\"title user\">User Admin</div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\" onClick={() => { this.props.history.push('/menuOptions/ConnectWorkplace') }}>\r\n                    <div className=\"text\">{`Org & Practice Profiles`}</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l\" onClick={() => { this.props.history.push('/menuOptions/invite') }}>\r\n                    <div className=\"text\">Invite Your Team</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\"\r\n                    onClick={() => {\r\n                      console.log(storage.roleId);\r\n                      message.destroy()\r\n                      if (storage.roleId === '3') {\r\n                        this.props.history.push('/menuOptions/veterinarians')\r\n                      } else {\r\n                        message.error('You do not have administrator rights')\r\n                      }\r\n                    }}\r\n\r\n                  >\r\n                    <div className=\"text\">Vet Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l \"\r\n                    onClick={() => this.props.history.push('/menuOptions/petAndParents')}\r\n\r\n                    style={{ marginTop: '25px', marginBottom: '20px' }}>\r\n                    <div className=\"text\">Pet and Parents Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            }\r\n\r\n\r\n            {/* 硬件设置 */}\r\n\r\n            <div className=\"desk\">\r\n\r\n              {this._device()}\r\n              <div className=\"item\" style={{ marginTop: px(25) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Backlight</div>\r\n                  <Switch\r\n                    checked={isBacklight}\r\n                    onClick={() => this.setState({ isBacklight: !isBacklight })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Action Beep</div>\r\n                  <Switch\r\n                    checked={isBeep}\r\n                    onClick={() => this.setState({ isBeep: !isBeep })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"item\" style={{ marginTop: px(35) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Backlight Timer</div>\r\n                    <div className=\"solid\">\r\n                      10 Secs\r\n                      <div className=\"slider\" >\r\n                        <Slider\r\n                          min={10}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { console.log(e); this.setState({ backlightTimer: e }) }}\r\n                          left={backlightTimer.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"l\" >\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Auto Off After</div>\r\n                    <div className=\"solid\">\r\n                      30 Secs\r\n                      <div className=\"slider\">\r\n                        <Slider\r\n                          min={30}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { this.setState({ autoOff: e }) }}\r\n                          left={this.state.autoOff.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\" style={{ marginTop: px(35) }}>\r\n\r\n\r\n\r\n                <div className=\"l\" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                  <div className=\"text\">Measurement Time for Axillary Sensor</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">15 Secs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">30 Secs</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"l\" onClick={() => this.props.history.push('/menuOptions/advancedsettings')}>\r\n                  <div className=\"text\">Advanced Settings</div>\r\n                  <div className=\"rightIcon\">&#xe60c;</div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              text={'Save Changes'}\r\n              onClick={this._save}\r\n            />\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.isSave}\r\n          element={\r\n            <div className='isSave'\r\n            //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\r\n            >\r\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n              <p>Settings changed - save?</p>\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <Button\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isSave: false\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'OK'}\r\n                  onClick={this._save}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n        <MyModal\r\n          visible={isClicleStudyModal}\r\n          element={\r\n            <div className='isSave'\r\n              style={{ width: '40%' }}\r\n            >\r\n\r\n              <div className=\"title\" style={{ marginTop: px(60) }}>\r\n                Are you sure you want to enter<br />\r\n                Clinical Study Mode?<br />\r\n                Please enter code to enter.\r\n              </div>\r\n\r\n\r\n\r\n              <div className='verify' style={{ margin: `${px(20)}px 0` }}>\r\n\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.firstFoucs = ref;\r\n                  }}\r\n                  value={valueA}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"A\")}\r\n                  autoFocus={'autofocus'}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.secondFoucs = ref;\r\n                  }}\r\n                  value={valueB}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"B\")}\r\n                />\r\n                <input\r\n                  foucs\r\n\r\n                  ref={ref => {\r\n                    this.tridFoucs = ref;\r\n                  }}\r\n                  value={valueC}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"C\")}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.fourFoucs = ref;\r\n                  }}\r\n                  value={valueD}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"D\")}\r\n                />\r\n\r\n\r\n\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.fiveFoucs = ref;\r\n                  }}\r\n                  value={valueE}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"E\")}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.sixFoucs = ref;\r\n                  }}\r\n                  value={valueF}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"F\")}\r\n                />\r\n              </div>\r\n\r\n\r\n\r\n\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <Button\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isClicleStudyModal: false,\r\n                      isClicleStudy: false,\r\n                      valueA: '',\r\n                      valueB: '',\r\n                      valueC: '',\r\n                      valueD: '',\r\n                      valueE: '',\r\n                      valueF: ''\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'OK'}\r\n                  onClick={() => {\r\n                    if (valueA && valueB && valueC && valueD && valueE && valueF) {\r\n                      this.setState({\r\n                        isClicleStudyModal: false\r\n                      })\r\n                      // temporaryStorage.isClicleStudy = true\r\n\r\n                      // let storage = window.localStorage;\r\n                      storage.isClinical = `${true}`\r\n                      this.props.history.push({ pathname: '/page8', identity: storage.identity });\r\n                    }\r\n\r\n\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\NewOrganization.jsx",["1151"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.js",["1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport PetTable from '../../components/petTable';\r\nimport './scheduled.less'\r\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\r\nimport moment from 'moment'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst ScheduledPetPage = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\r\n\r\n    //初始化获取宠物列表数据\r\n    const [petListArr, setPetListArr] = useState([])\r\n    //定义宠物列表是否加载中\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [spin, setSpin] = useState(false)\r\n\r\n    useEffect(() => {\r\n        //获取宠物列表\r\n        _getExam()\r\n    }, [])\r\n    const _getExam = async () => {\r\n        console.log('进来了');\r\n\r\n\r\n        let startDay = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n        let endDay = moment().endOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n        let chazhi = new Date().getTimezoneOffset()\r\n        let newstartTime = moment(startDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n        let newendTime = moment(endDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n\r\n\r\n        let params = {\r\n            doctorId: storage.userId,\r\n            offset: 0,\r\n            size: 100,\r\n            subStartTime: newstartTime,\r\n            subEndTime: newendTime\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n\r\n\r\n        console.log('查询宠物的入参', params);\r\n        const isUnKnow = (val) => {\r\n            if (val) {\r\n                return val\r\n            } else {\r\n                return 'unknown'\r\n            }\r\n        }\r\n        setLoading(true)\r\n\r\n        fetchRequest('/new/pet/subscribe/page', 'POST', params)\r\n\r\n            .then(res => {\r\n                if (res.flag === true && res.data) {\r\n                    let data = []\r\n                    let oldList = res.data.list\r\n                    for (let i = 0; i < oldList.length; i++) {\r\n                        let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n                            h2tLength, torsoLength } = oldList[i]\r\n                        let owner = ''\r\n                        patientId = isUnKnow(patientId)\r\n                        petName = isUnKnow(petName)\r\n                        breedName = isUnKnow(breedName)\r\n                        age = isUnKnow(age)\r\n                        weight = isUnKnow(weight)\r\n                        if (!firstName) {\r\n                            firstName = ''\r\n                        }\r\n                        if (!lastName) {\r\n                            lastName = ''\r\n                        }\r\n                        if (lastName === '' && firstName === '') {\r\n                            owner = 'unknown'\r\n                        } else {\r\n                            owner = `${lastName} ${firstName}`\r\n                        }\r\n                        createTime = moment(createTime).format('X')\r\n                        let petGender = ''\r\n                        switch (`${gender}`) {\r\n                            case '1': petGender = 'F'\r\n\r\n                                break;\r\n                            case '0': petGender = \"M\"\r\n                                break;\r\n                            default: petGender = 'unknown'\r\n                                break;\r\n                        }\r\n                        let petAge = 'unknown'\r\n                        if (birthday) {\r\n                            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n                        }\r\n\r\n                        let json = {\r\n                            insertedAt: createTime,\r\n                            patientId,\r\n                            petName,\r\n                            owner,\r\n                            breed: breedName,\r\n                            gender: petGender,\r\n                            age: petAge,\r\n                            petId,\r\n                            id: i,\r\n                            weight,\r\n                            rfid,\r\n                            url,\r\n                            speciesId,\r\n                            l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                            h2tLength, torsoLength,\r\n                            pethubId, macId,\r\n\r\n                        }\r\n                        data.push(json)\r\n\r\n                    }\r\n                    data.sort((a, b) => {\r\n                        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                    })\r\n                    console.log('列表的数据：', data);\r\n                    setPetListArr(data)\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setLoading(false)\r\n                setSpin(false)\r\n            })\r\n\r\n\r\n\r\n    }\r\n    const _refresh = () => {\r\n        console.log('点击了');\r\n        setSpin(true)\r\n        _getExam()\r\n    }\r\n\r\n    return (\r\n        <div id='scheduled' style={{ height: bodyHeight }}>\r\n            <div className=\"allPetHeard\">\r\n                <div className=\"addDeviceTitle flex\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>\r\n                    <div className=\"title\">Scheduled Patients</div>\r\n                    <div className=\"refresh flex\"\r\n                        style={{ fontSize: px(25), marginLeft: px(10) }}\r\n                    >\r\n                        <SyncOutlined onClick={_refresh} spin={spin} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(40), width: px(200) }}\r\n                        onClick={() => {\r\n                            let json = {\r\n                                isWalkIn: true,\r\n                                petId: null,\r\n                                petName: null,\r\n                                owner: null,\r\n                                breed: null,\r\n\r\n                            }\r\n                            petDetailInfoFun(json)\r\n                            setMenuNum(\"1\")\r\n                        }}\r\n                    >\r\n                        <div className=\"walkText\">Walk-In</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"body111\" style={{ height: bodyHeight - devicesTitleHeight }}>\r\n\r\n                <PetTable\r\n                    // bodyHeight={bodyHeight - devicesTitleHeight}\r\n                    petListArr={petListArr}\r\n                    loading={loading}\r\n                    resetPetList={(val) => setPetListArr(val)}\r\n                    type={'scheduled'}\r\n\r\n                />\r\n                <div className=\"hread flex\" style={{ alignItem: 'center' }}>\r\n                    <div className=\"hread1\" style={{ marginTop: px(10), justifyContent: 'flex-end', display: 'flex', }}>\r\n                        <div className=\"walkin flex\"\r\n                            style={{ borderRadius: px(50), height: px(45), fontSize: px(20), marginRight: px(10) }}\r\n                            onClick={() => {\r\n                                setMenuNum('AddScheduledPet')\r\n\r\n                            }}\r\n                        >Create New Scheduled</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nScheduledPetPage.propTypes = {\r\n\r\n}\r\n//默认值\r\nScheduledPetPage.defaultProps = {\r\n    bodyHeight: 0,\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, setPetListArrFun }\r\n)(ScheduledPetPage)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["1163","1164","1165","1166","1167","1168"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Menu, PageHeader } from \"antd\";\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport Measurement from \"./components/measurement\";\r\nimport MeasuredData from \"./components/measuredData\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HeaderItem from \"./components/headerItem\";\r\nimport \"./index.less\";\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst TemperaturePage = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaConnectStatus } = hardwareMessage;\r\n  //测量温度中的页面变化\r\n  const changePage = () => {\r\n    // return <MeasuredData />\r\n    switch (mellaConnectStatus) {\r\n      case \"isMeasuring\":\r\n        return <Measurement />;\r\n      case \"complete\":\r\n        return <MeasuredData />;\r\n      case \"connected\":\r\n        return <LinkEquipment />;\r\n      case \"disconnected\":\r\n        return <LinkEquipment />;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Layout className=\"homeBox\">\r\n        <HeaderItem />\r\n        {_.isEmpty(petMessage) ? (\r\n          <div className=\"chackPatientBox\">\r\n            <p className=\"chackPatientTitle\">Select a patient</p>\r\n          </div>\r\n        ) : (\r\n          changePage()\r\n        )}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(TemperaturePage);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\NorMalMeasurement.jsx",["1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195"],"import React, { Component } from 'react'\r\nimport { Menu, Table, Popconfirm, Tooltip, message, Select, Progress, Input, Modal } from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, LoadingOutlined, SyncOutlined } from '@ant-design/icons';\r\n\r\n\r\n\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport { fetchRequest1 } from './../../utils/FetchUtil'\r\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\r\nimport { FetchEszVet } from './../../utils/FetchEszVet'\r\n\r\nimport ye from './../../assets/images/ye1.png'\r\nimport er from './../../assets/images/er3.png'\r\nimport gang from './../../assets/images/gang3.png'\r\nimport edit from './../../assets/images/edit.png'\r\nimport del from './../../assets/images/del.png'\r\nimport scale from './../../assets/images/scale.png'\r\nimport placement_gang from './../../assets/images/placement_gang.png'\r\nimport placement_er from './../../assets/images/placement_er.png'\r\nimport palcement_ye from './../../assets/images/palcement_ye.png'\r\nimport careacte from './../../assets/images/dogMessage.png'\r\nimport catcareacte from './../../assets/images/catMessage.png'\r\nimport dog from './../../assets/img/redDog.png'\r\nimport cat from './../../assets/img/redcat.png'\r\nimport other from './../../assets/images/other.png'\r\n\r\nimport dog1 from './../../assets/images/pinkdog.png'\r\nimport cat1 from './../../assets/images/pinkcat.png'\r\nimport redDog1 from './../../assets/images/reddog.png'\r\nimport redCat1 from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\n\r\n\r\n\r\nimport electronStore from './../../utils/electronStore'\r\n\r\n\r\nimport './normalMeasurement.less'\r\nimport { fetchToken } from '../../utils/Fetch_token';\r\nimport { mTop, px, pX, win } from '../../utils/px';\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport Biggie from './../../pages/biggiePage/Biggie.jsx'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport Heard from '../../utils/heard/Heard';\r\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet saveHistoryTime = null, getSerialTime = null\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\nlet detectTimer = null, countdownTimer = null, lastConnectionTime = null;\r\n\r\nlet storage = window.localStorage;\r\n//用于预测的东西\r\nlet clinicalYuce = [], clinicalIndex = 0, endflog = false\r\nlet temp15 = ''\r\nlet is97Time = null, //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\r\n  initTime = null\r\nlet firstEar = true\r\nlet isMeasurement = false //正在测量为true，反之为false\r\nlet num07 = 0       //接收到07命令行的次数\r\n\r\nlet isClick = true\r\n\r\nlet sameBiggieNum = 0, keyboardBiggieFlog = false\r\n\r\nlet nextFlog = false //用来判断是否按下了尺子的确认键\r\nlet avoidRepetition = false //避免重复，防止尺子数据过来后持续刷新\r\n\r\nlet confirmBtnFlog = ''\r\n//因为biggie样机测量完成控制字从02(测量中)变成03(测量完成),但是会发多组03,因此做一个限制,当控制字为02时biggieSave=false,第一次为03时变成true\r\nlet biggieSave = false\r\n\r\nexport default class NorMalMeasurement extends Component {\r\n  state = {\r\n    dogImg: redDog1,\r\n    catImg: cat1,\r\n    otherImg: other,\r\n    selectWZ: 'dog',\r\n\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    value: '',\r\n    api: '',\r\n    id: '',\r\n    dataArr: [],\r\n    seleceID: '',//医生id\r\n    data: { ci: [''], wen: [] },\r\n\r\n    temColor: '',\r\n    Temp: '',\r\n    isMeasure: false,\r\n    mearsurePart: 1,\r\n    historyData: [],\r\n    patientId: '',\r\n    spin: false,        //patientId后面的刷新按钮是否旋转\r\n    petName: '',\r\n    addpatient_petName: '',\r\n    addpatient_description: '',\r\n    addpatient_species: 1,\r\n    roomTemperature: '',\r\n    referenceRectalTemperature: '',\r\n    bodyConditionScore: '',\r\n    furLength: '',\r\n    bodyType: '',\r\n    heartRate: '',\r\n    bloodPressure: '',\r\n    respiratoryRate: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    units: '℉',\r\n    measuerStatus: 'disconnected',\r\n    isconnected: false,\r\n    countdown: 15,\r\n    petVitalTypeId: '01',  //测量部位\r\n    probeID: '',         //探头id\r\n    org: 1,\r\n    err07Visible: false,\r\n\r\n\r\n    //左侧的宠物信息\r\n    petId: '',\r\n    owner: '',\r\n    breedName: '',\r\n    isMix: false,\r\n    age: '',\r\n    weight: '',\r\n    url: '',\r\n    speciesId: '',\r\n\r\n    //圆环的一些信息\r\n    temp_statu: 'Ready',\r\n    progress: 0,\r\n    endMeasure: false,\r\n    initFlog: false,\r\n    isEarMeasure: false,\r\n\r\n\r\n    //底部的信息\r\n    isNotes: true,\r\n    notes: '',\r\n    petSpeciesBreedId: 0,\r\n    consult_id: '',\r\n    healthStatus: '',\r\n\r\n\r\n    editId: '',\r\n    memo: '',\r\n    macAddr: '',\r\n    loading: false,\r\n\r\n    noUSB: false,  //是否有usb底座，为true代表没有\r\n    devicesType: 'biggie',\r\n    isHaveBigieDate: false, //为false则展示把宠物放到秤上的文本，为true则展示体重值\r\n\r\n    biggieDate: '', //体脂称体重值（磅）\r\n    sendWeight: '', //体脂称体重值（kg）\r\n    impedance: '',   //阻抗\r\n    isWeightSave: false,  //保存体重数据跳出的上传中弹框\r\n\r\n\r\n    //宠物特征信息\r\n    l2rarmDistance: '',           //左右手间距，这里用他临时替换成头部周长\r\n    neckCircumference: '',        //脖子周长\r\n    upperTorsoCircumference: '',  //上躯干周长\r\n    lowerTorsoCircumference: '',  //下躯干周长\r\n    h2tLength: '',                //头尾长度\r\n    torsoLength: \"\",             //躯干长度\r\n\r\n    rulerUnit: 'cm',               //尺子的单位\r\n    itemIndex: 1,                //代表现在是第几个宠物特征\r\n    updatePetAttributes: false,    //上传宠物属性的弹框\r\n\r\n    isWalkIn: false,               //是否是从walkIn进来的\r\n  }\r\n  componentWillMount () {\r\n    try {\r\n      console.log('--------------', this.props.location.isconnected);\r\n      if (this.props.location.isconnected === false || this.props.location.isconnected === true) {\r\n        if (this.props.location.isconnected === false) {\r\n\r\n        } else {\r\n          this.setState({\r\n            measuerStatus: 'connented',\r\n            isconnected: true,\r\n            isEarMeasure: false\r\n\r\n          })\r\n          is97Time = new Date()\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    ipcRenderer.send('big', win())\r\n    storage.isClinical = 'false'\r\n    if (storage.identity === '2') {\r\n      let ezyVetSelectHealthstatus = JSON.parse(storage.ezyVetSelectHealthstatus)\r\n      console.log(ezyVetSelectHealthstatus);\r\n      let { age, animal_id, breed, consult_id, gender, key, owner, petName, weight, url, speciesId } = ezyVetSelectHealthstatus\r\n      let petAge = null\r\n      if (`${age}` === '' || `${age}` === 'null') {\r\n        petAge = 0\r\n      } else {\r\n        petAge = age\r\n      }\r\n      this.setState({\r\n        petName,\r\n        owner,\r\n        breedName: breed,\r\n        weight,\r\n        age: petAge,\r\n        consult_id,\r\n        healthStatus: key,\r\n        patientId: animal_id,\r\n        org: 4,\r\n        url,\r\n        speciesId\r\n      }, () => {\r\n        this._getPetInfo('ezyVet')\r\n      })\r\n    } else if (storage.identity === '1') {\r\n      this.setState({\r\n        petName: storage.selectPetName,\r\n        owner: storage.selectOwner,\r\n        breedName: storage.selectBreed,\r\n        weight: storage.selectWeight,\r\n        age: storage.selectAge,\r\n        patientId: storage.selectPatientId,\r\n        org: 1\r\n      }, () => {\r\n        this._getPetInfo('vetspire')\r\n      })\r\n    } else {\r\n      let hardSet = electronStore.get('hardwareConfiguration')\r\n      console.log('测量单位', hardSet);\r\n      let rulerUnit = 'in'\r\n      if (!hardSet) {\r\n        let settings = {\r\n          isHua: true,\r\n          is15: true,\r\n          self_tarting: false,\r\n          isBacklight: true,\r\n          isBeep: true,\r\n          backlightTimer: { length: 140, number: '45' },\r\n          autoOff: { length: 0, number: '30' },\r\n        }\r\n        electronStore.set('hardwareConfiguration', settings)\r\n        this.setState({\r\n          units: '℉',\r\n          rulerUnit: 'in',\r\n          countdown: 15\r\n        })\r\n      } else {\r\n        let units = hardSet.isHua ? '℉' : '℃'\r\n        rulerUnit = hardSet.isHua ? 'in' : 'cm'\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        console.log('测量单位', units);\r\n        this.setState({\r\n          units,\r\n          countdown,\r\n          rulerUnit\r\n        })\r\n      }\r\n\r\n\r\n\r\n\r\n      let data = JSON.parse(storage.doctorExam)\r\n      console.log('从列表里面传过来的数据', data);\r\n      if (!data) {\r\n        console.log('从walk-in来的');\r\n        this.setState({\r\n          isWalkIn: true\r\n        })\r\n\r\n      } else {\r\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength, weight, url, speciesId } = data\r\n\r\n        // l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n        // neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n        // upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n        // lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n        // h2tLength = h2tLength ? `${h2tLength}` : ''\r\n        // torsoLength = torsoLength ? `${torsoLength}` : ''\r\n        console.log('+++++++++++', l2rarmDistance);\r\n\r\n        l2rarmDistance = changeNum(l2rarmDistance)\r\n        console.log('++++++0+++++', l2rarmDistance);\r\n        neckCircumference = changeNum(neckCircumference)\r\n        upperTorsoCircumference = changeNum(upperTorsoCircumference)\r\n        lowerTorsoCircumference = changeNum(lowerTorsoCircumference)\r\n        h2tLength = changeNum(h2tLength)\r\n        torsoLength = changeNum(torsoLength)\r\n\r\n        function changeNum (params) {\r\n\r\n          if (params) {\r\n            if (rulerUnit === 'cm') {\r\n              return `${params}`\r\n            } else {\r\n              return `${(params / 2.54).toFixed(2)}`\r\n            }\r\n          } else {\r\n            return ''\r\n          }\r\n\r\n        }\r\n\r\n\r\n        if (weight && weight !== 'unknown') {\r\n          weight = parseFloat(weight).toFixed(1)\r\n        }\r\n        let breedName = data.breed\r\n        if (!breedName) {\r\n          breedName = 'unknown'\r\n        }\r\n        switch (breedName) {\r\n          case 'defaultdog':\r\n            breedName = 'Dog'\r\n\r\n            break;\r\n          case 'defaultother':\r\n            breedName = 'Other'\r\n\r\n            break;\r\n          case 'defaultcat':\r\n            breedName = 'Cat'\r\n            break;\r\n\r\n        }\r\n        this.setState({\r\n          petName: data.petName,\r\n          owner: data.owner,\r\n          breedName,\r\n          weight,\r\n          age: data.age,\r\n          patientId: data.patientId,\r\n          petId: data.petId,\r\n          l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength,\r\n          url, speciesId,\r\n          isWalkIn: false\r\n        }, () => {\r\n          this._getHistory()\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('usbDetect', this.usbDetect)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n\r\n    this._whether_to_connect_to_mella()\r\n    //刚进入测量界面需要获取以前的历史数据，测量一次就添加一个记录\r\n    // this._getHistory()\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    if (temporaryStorage.devicesType) {\r\n      this.setState({\r\n        devicesType: temporaryStorage.devicesType\r\n      })\r\n    }\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('usbDetect', this.usbDetect)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    clearInterval(detectTimer)\r\n    detectTimer && clearInterval(detectTimer)\r\n    countdownTimer && clearInterval(countdownTimer)\r\n    getSerialTime && clearTimeout(getSerialTime)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    lastConnectionTime = null;\r\n    clinicalYuce = []\r\n    clinicalIndex = 0\r\n    message.destroy()\r\n\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    this.command(data)()\r\n  }\r\n  /**\r\n   * \r\n   *usb检测，为true代表插上了设备，false代表拔出了设备\r\n   */\r\n  usbDetect = (event, data) => {\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    if (data === true) {\r\n      this._whether_to_connect_to_mella()\r\n    } else {\r\n      this.detectTimer && clearInterval(this.detectTimer)\r\n      num07 = 0\r\n    }\r\n  }\r\n  _whether_to_connect_to_mella = () => {\r\n    message.destroy()\r\n    this.detectTimer = setInterval(() => {\r\n      if (isMeasurement) {\r\n        return\r\n      }\r\n      if (!initTime) {\r\n        // console.log('断开连接');\r\n\r\n        firstEar = true\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n        initTime = new Date()\r\n      } else {\r\n        ipcRenderer.send('usbdata', { command: '07', arr: ['5A'] })\r\n        if (new Date() - initTime < 5000) {\r\n          // console.log('连接成功');\r\n\r\n        } else {\r\n          console.log('2断开连接');\r\n          firstEar = true\r\n          let hardSet = electronStore.get('hardwareConfiguration')\r\n          let countdown = hardSet.is15 ? 15 : 30\r\n          this.setState({\r\n            measuerStatus: 'disconnected',\r\n            countdown,\r\n            isMeasure: false,\r\n            isconnected: false,\r\n            isEarMeasure: false\r\n          })\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n\r\n\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n\r\n    switch (e.key) {\r\n      case '1':\r\n        switch (storage.identity) {\r\n          case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n          case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n            break;\r\n          case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n\r\n        break;\r\n\r\n      case '2': this.props.history.push('/'); break;\r\n      case '3': this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: this.state.patientId, isconnected: this.state.isconnected }); break;\r\n      case '4': this.props.history.push('/page12'); break;\r\n      case '5': this.props.history.push('/menuOptions/settings'); break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n\r\n    const instruction = [209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255]\r\n    if (newArr[2] !== 7) {\r\n      initTime = new Date()\r\n      num07 = 0\r\n    } else {\r\n      num07++\r\n    }\r\n\r\n\r\n\r\n    isMeasurement = false\r\n    const commandArr = {\r\n      209: () => {  //腋温\r\n        if (firstEar) {\r\n          firstEar = false\r\n          console.log('去获取探头id');\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n        }\r\n        isMeasurement = true\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${(dataArr1[4])}`)\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${(dataArr1[6])}`)\r\n        // let Temp = parseFloat(temp0.toFixed(1))\r\n        let Temp = temp0\r\n        console.log(Temp);\r\n        if (Temp === 24.7 || Temp === 0 || Temp === null || Temp === undefined) {\r\n          return\r\n        }\r\n\r\n\r\n        if (this.state.isMeasure === false) {\r\n\r\n          if (countdownTimer) {\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n            this.setState({\r\n              countdown\r\n            })\r\n          }\r\n\r\n          countdownTimer = setInterval(() => {\r\n            let { countdown, isconnected } = this.state\r\n            this.setState({\r\n              countdown: countdown - 1\r\n\r\n            })\r\n\r\n            if (countdown === 0) {\r\n              console.log('调用15秒的接口');\r\n              this._prediction()\r\n              countdownTimer && clearInterval(countdownTimer)\r\n              this.setState({\r\n                countdown: 0\r\n              })\r\n              // ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n            }\r\n\r\n            if (isconnected === false) {\r\n              countdownTimer && clearInterval(countdownTimer)\r\n\r\n            }\r\n          }, 1000);\r\n        }\r\n        lastConnectionTime = new Date();\r\n\r\n\r\n\r\n        let progress = (Temp - 25) * 5\r\n        let dataS = {\r\n          sample: clinicalIndex++,\r\n          data0: temp0,\r\n          data1: temp1\r\n        }\r\n        clinicalYuce.push(dataS)\r\n        if (clinicalIndex < 10) {\r\n          clinicalYuce.push({\r\n            sample: clinicalIndex++,\r\n            data0: temp0,\r\n            data1: temp1\r\n          })\r\n        }\r\n        this.setState({\r\n          Temp,\r\n          isMeasure: true,\r\n          // mearsurePart: 1,\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          progress,\r\n          endMeasure: false,\r\n          initFlog: true,\r\n          isEarMeasure: false\r\n        })\r\n\r\n      },\r\n      208: () => {  //耳温\r\n\r\n        lastConnectionTime = new Date();\r\n        isMeasurement = true\r\n        if (firstEar) {\r\n          firstEar = false\r\n          console.log('去获取探头id');\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n        }\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n        let Temp = temp0\r\n\r\n        console.log(Temp, temp0);\r\n        let progress = (Temp - 25) * 5\r\n        this.setState({\r\n          Temp,\r\n          isMeasure: false,\r\n          mearsurePart: 3,\r\n          measuerStatus: '测量中',\r\n          isconnected: true,\r\n          progress,\r\n          endMeasure: false,\r\n          initFlog: true,\r\n          isEarMeasure: true,\r\n          petVitalTypeId: '03'\r\n        })\r\n\r\n      },\r\n      193: () => {  //硬件发送结束命令\r\n        this.time193 && clearTimeout(this.time193)\r\n        this.time193 = setTimeout(() => {\r\n          endflog = true\r\n          countdownTimer && clearInterval(countdownTimer)\r\n          this.setState({\r\n            isMeasure: false,\r\n            endMeasure: true,\r\n            isEarMeasure: false\r\n          })\r\n          lastConnectionTime = new Date();\r\n          if (saveHistoryTime != null) {\r\n            clearTimeout(saveHistoryTime)\r\n          }\r\n\r\n          clinicalYuce = []\r\n          clinicalIndex = 0\r\n          firstEar = true\r\n          this.time193 && clearTimeout(this.time193)\r\n          console.log('-----------=======最终结果值========---------', this.state.Temp);\r\n          let { Temp, units } = this.state\r\n          let temp = units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\r\n          if (this.state.devicesType === 'mella') {\r\n            ipcRenderer.send('keyboardWriting', temp)\r\n          }\r\n\r\n        }, 1000);\r\n\r\n\r\n      },\r\n      194: () => {       //硬件收到机器学习结果并停止测量，通知我们一声\r\n        endflog = true\r\n        countdownTimer && clearInterval(countdownTimer)\r\n        this.setState({\r\n          isMeasure: false,\r\n          endMeasure: true,\r\n          isEarMeasure: false\r\n        })\r\n        lastConnectionTime = new Date();\r\n        if (saveHistoryTime != null) {\r\n          clearTimeout(saveHistoryTime)\r\n        }\r\n\r\n        clinicalYuce = []\r\n        clinicalIndex = 0\r\n        isMeasurement = false\r\n      },\r\n\r\n      192: () => {   //开始测量返回结果\r\n        switch (newArr[3]) {\r\n          case 90: console.log('有探头，开始测量的返回指令·'); break;\r\n          case 11: console.log('没有探头，开始测量的返回值'); break;\r\n\r\n        }\r\n      },\r\n      129: () => {      //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n        lastConnectionTime = new Date();\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          isEarMeasure: false\r\n\r\n        })\r\n      },\r\n      135: () => {          //硬件的一些基本信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间\r\n         * newArr[8] 背光时间\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let beep = hardSet.isBeep ? '11' : '00'\r\n        let unit = hardSet.isHua ? '00' : '01'\r\n\r\n        if (dataArr1[7] === hardSet.autoOff.number && dataArr1[8] === hardSet.backlightTimer.number &&\r\n          dataArr1[9] === beep && dataArr1[10] === unit) {\r\n        } else {\r\n          console.log('不相同，去发送命令');\r\n          let setArr = ['03', 'ed', '07', 'dd', hardSet.autoOff.number, hardSet.isBacklight ? hardSet.backlightTimer.number : '00', hardSet.isBeep ? '11' : '00', hardSet.isHua ? '00' : '01']\r\n          ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n        }\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n        })\r\n\r\n      },\r\n      238: () => {     //探头松动\r\n        console.log('探头松动');\r\n        this.setState({\r\n          isMeasure: false,\r\n          endMeasure: true\r\n        })\r\n        message.error('The probe is loose, please re-install and measure again', 5)\r\n        clinicalYuce = []\r\n        clinicalIndex = 0\r\n        countdownTimer && clearInterval(countdownTimer)\r\n      },\r\n      194: () => {       //硬件收到了机器学习预测的温度\r\n        this.setState({\r\n          isMeasure: false,\r\n          endMeasure: true,\r\n          APIFlog: true,\r\n          isEarMeasure: false\r\n        })\r\n        clinicalYuce = []\r\n        clinicalIndex = 0\r\n        endflog = true\r\n\r\n\r\n        countdownTimer && clearInterval(countdownTimer)\r\n\r\n\r\n      },\r\n      98: () => { //蓝牙连接断开\r\n        console.log('断开连接---断开连接---断开连接---断开连接---断开连接---断开连接');\r\n        firstEar = true\r\n        console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 1000) {\r\n          return\r\n        }\r\n\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      },\r\n      97: () => {       //蓝牙连接\r\n        console.log('连接成功---连接成功---连接成功---连接成功---连接成功---连接成功');\r\n        // disconnectedNum = 0\r\n        // lastConnectionTime = new Date();\r\n        //  disconnectedNum = 0\r\n        // lastConnectionTime = new Date();\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          isEarMeasure: false\r\n\r\n        })\r\n        is97Time = new Date()\r\n      },\r\n      177: () => {         //探头id\r\n        let dataArr1 = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n\r\n\r\n        let id = ''\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i]\r\n\r\n        }\r\n        console.log(id, dataArr1[7]);\r\n\r\n        this.setState({\r\n          probeID: id,\r\n          petVitalTypeId: dataArr1[7]\r\n        })\r\n        if (dataArr1[7] === '01') {\r\n          this.setState({\r\n            mearsurePart: 1\r\n          })\r\n        } else if (dataArr1[7] === '02') {\r\n          this.setState({\r\n            mearsurePart: 2\r\n          })\r\n        } else if (dataArr1[7] === '03') {\r\n          this.setState({\r\n            mearsurePart: 3\r\n          })\r\n        }\r\n\r\n\r\n\r\n      },\r\n      7: () => {  //发什么收什么，需要去重新插拔底座\r\n        console.log('重新插拔底座');\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true\r\n          })\r\n        }\r\n      },\r\n      99: () => { //体脂称的广播信息\r\n        function getVal (shi, xiaoshuo) {\r\n\r\n          if (shi.length < 2) {\r\n            shi = `0${shi}`\r\n          }\r\n          if (xiaoshuo.length < 2) {\r\n            xiaoshuo = `0${xiaoshuo}`\r\n          }\r\n          return `0x${shi}${xiaoshuo}`\r\n        }\r\n\r\n\r\n        let weight = getVal((dataArr1[3]).toString(16), (dataArr1[4]).toString(16))\r\n        let impedance = getVal((dataArr1[5]).toString(16), (dataArr1[6]).toString(16))\r\n        let sendWeight = null\r\n        try {\r\n          sendWeight = parseInt(weight) / 100\r\n          weight = parseInt(weight) / 100 * 2.2046\r\n          if (impedance) {\r\n            impedance = parseInt(impedance)\r\n          }\r\n          weight = weight.toFixed(1)\r\n\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n\r\n        if (weight) {\r\n          // console.log(sameBiggieNum, keyboardBiggieFlog);\r\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n            sameBiggieNum++\r\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n              console.log('键盘写入');\r\n              let { units, sendWeight, biggieDate } = this.state\r\n\r\n              let weight = units === '℃' ? sendWeight : biggieDate\r\n              ipcRenderer.send('keyboardWriting', weight)\r\n            }\r\n\r\n          } else {\r\n            sameBiggieNum = 0\r\n            keyboardBiggieFlog = false\r\n          }\r\n\r\n          this.setState({\r\n            biggieDate: weight,\r\n            impedance,\r\n            sendWeight,\r\n            isHaveBigieDate: true\r\n          })\r\n        }\r\n\r\n      },\r\n      100: () => {//蓝牙软尺广播的数据\r\n        let confirmBtn = newArr[6]    //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\r\n        let rulerUnitNum = newArr[11] //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\r\n        let newVal = null             //为测量数值，和单位匹配对应\r\n        const ITEMINDEX = 6\r\n\r\n        //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n        let num1 = dataArr1[7]\r\n        let num2 = dataArr1[8]\r\n        let num = getVal(num1, num2)\r\n        try {\r\n          newVal = (parseInt(num) / 100)\r\n          if (newVal < 3) {\r\n            newVal = 0\r\n          }\r\n\r\n          if (rulerUnitNum >= 80) {\r\n            newVal = (newVal * 0.3937).toFixed(2)\r\n\r\n          } else {\r\n            newVal = newVal.toFixed(1)\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n\r\n\r\n        function getVal (shi, xiaoshuo) {\r\n\r\n          if (shi.length < 2) {\r\n            shi = `0${shi}`\r\n          }\r\n          if (xiaoshuo.length < 2) {\r\n            xiaoshuo = `0${xiaoshuo}`\r\n          }\r\n          return `0x${shi}${xiaoshuo}`\r\n        }\r\n\r\n        //点击了确认按钮\r\n        let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength\r\n        } = this.state\r\n        if (confirmBtn === 161) {\r\n          if (!nextFlog) {\r\n            nextFlog = true\r\n\r\n\r\n            let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n            if (itemIndex === ITEMINDEX) {\r\n              // this._next()\r\n              return\r\n            }\r\n            let newitemIndex = itemIndex >= ITEMINDEX ? ITEMINDEX : itemIndex + 1\r\n            let textValue = ''\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n              default:\r\n                break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) > 0) {\r\n\r\n              switch (itemIndex) {\r\n                case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                default: this.setState({\r\n                  itemIndex: newitemIndex\r\n                  , units\r\n                })\r\n                  break;\r\n              }\r\n            } else {\r\n              this.setState({\r\n                itemIndex: newitemIndex,\r\n                units\r\n              })\r\n            }\r\n\r\n\r\n\r\n          }\r\n        } else if (confirmBtn === 160) {\r\n          nextFlog = false\r\n          let textValue = ''\r\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n\r\n          switch (itemIndex) {\r\n            case 1: textValue = l2rarmDistance; break;\r\n            case 2: textValue = h2tLength; break;\r\n            case 3: textValue = torsoLength; break;\r\n            case 4: textValue = neckCircumference; break;\r\n            case 5: textValue = upperTorsoCircumference; break;\r\n            case 6: textValue = lowerTorsoCircumference; break;\r\n          }\r\n\r\n          if (newVal !== textValue && parseInt(newVal) > 0) {\r\n            if (!avoidRepetition) {\r\n              avoidRepetition = true\r\n              this.avoidRepetition = setTimeout(() => {\r\n                avoidRepetition = false\r\n                this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n              }, 100);\r\n              switch (itemIndex) {\r\n                case 1: this.setState({ l2rarmDistance: newVal, units }); break;\r\n                case 2: this.setState({ h2tLength: newVal, units }); break;\r\n                case 3: this.setState({ torsoLength: newVal, units }); break;\r\n                case 4: this.setState({ neckCircumference: newVal, units }); break;\r\n                case 5: this.setState({ upperTorsoCircumference: newVal, units }); break;\r\n                case 6: this.setState({ lowerTorsoCircumference: newVal, units }); break;\r\n                default:\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n      },\r\n      255: () => {\r\n        // console.log(dataArr1);\r\n        let length = newArr.length\r\n        let frameLength = newArr[1]   //帧长\r\n        let itemLength = newArr[3] + 1  //数据位的长度   13\r\n        let dataIndex = 0\r\n\r\n        let bluName = ''\r\n        let bluData = []\r\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\r\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\r\n          let itemData = []\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5])\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = ''\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16)\r\n                str += String.fromCharCode(item)\r\n\r\n              }\r\n              bluName = str\r\n              // console.log('--蓝牙名称:', bluName);\r\n\r\n\r\n              break;\r\n\r\n            case 255:\r\n              bluData = itemData\r\n              break;\r\n            case 7: console.log('---UUID'); break;\r\n            case 239:\r\n              // console.log('---mac地址'); \r\n              break;\r\n\r\n            case 3: console.log('----尺子的,不知道什么用'); break;\r\n\r\n            default: console.log('直接跳出循环'); return;\r\n          }\r\n          dataIndex = itemLength\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\r\n        }\r\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n\r\n        if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\r\n\r\n          let weight = `0x${bluData[10]}${bluData[11]}`\r\n          let impedance = `0x${bluData[12]}${bluData[13]}`\r\n          let sendWeight = null\r\n          try {\r\n            //sendWeight的值单位是kg,weight的值为lb(磅)\r\n            sendWeight = parseInt(weight) / 100\r\n            weight = parseInt(weight) / 100 * 2.2046\r\n            if (impedance) {\r\n              impedance = parseInt(impedance)\r\n            }\r\n            weight = weight.toFixed(1)\r\n\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n          // console.log('----秤', weight, impedance);\r\n\r\n          if (weight) {\r\n            // console.log(sameBiggieNum, keyboardBiggieFlog);\r\n            if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n              sameBiggieNum++\r\n              if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n                console.log('键盘写入');\r\n                let { units, sendWeight, biggieDate } = this.state\r\n\r\n                let weight = units === '℃' ? sendWeight : biggieDate\r\n                ipcRenderer.send('keyboardWriting', weight)\r\n              }\r\n\r\n            } else {\r\n              sameBiggieNum = 0\r\n              keyboardBiggieFlog = false\r\n            }\r\n\r\n            this.setState({\r\n              biggieDate: weight,\r\n              impedance,\r\n              sendWeight,\r\n              isHaveBigieDate: true\r\n            })\r\n          }\r\n        } else if (bluName.indexOf('Tape') !== -1) {\r\n\r\n          let confirmBtn = parseInt(bluData[8], 16)     //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[13], 16) //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\r\n          let newVal = null             //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 7\r\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9]\r\n          let num2 = bluData[10]\r\n          let num = getVal(num1, num2)\r\n          try {\r\n            newVal = (parseInt(num) / 100)\r\n            if (newVal < 3) {\r\n              newVal = 0\r\n            }\r\n\r\n            if (rulerUnitNum >= 80) {\r\n              newVal = (newVal * 0.3937).toFixed(2)\r\n\r\n            } else {\r\n              newVal = newVal.toFixed(1)\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n\r\n\r\n          function getVal (shi, xiaoshuo) {\r\n\r\n            if (shi.length < 2) {\r\n              shi = `0${shi}`\r\n            }\r\n            if (xiaoshuo.length < 2) {\r\n              xiaoshuo = `0${xiaoshuo}`\r\n            }\r\n            return `0x${shi}${xiaoshuo}`\r\n          }\r\n\r\n          //点击了确认按钮\r\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n            h2tLength, torsoLength\r\n          } = this.state\r\n          if (confirmBtn === 161) {\r\n            if (!nextFlog) {\r\n              nextFlog = true\r\n\r\n              if (itemIndex === ITEMINDEX) {\r\n                this._updatePetAttributes()\r\n                return\r\n              }\r\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\r\n\r\n              let textValue = ''\r\n              switch (itemIndex) {\r\n                case 1: textValue = l2rarmDistance; break;\r\n                case 2: textValue = h2tLength; break;\r\n                case 3: textValue = torsoLength; break;\r\n                case 4: textValue = neckCircumference; break;\r\n                case 5: textValue = upperTorsoCircumference; break;\r\n                case 6: textValue = lowerTorsoCircumference; break;\r\n                default:\r\n                  break;\r\n              }\r\n\r\n              if (newVal !== textValue && parseInt(newVal) > 0) {\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  default: this.setState({\r\n                    itemIndex: newitemIndex\r\n                    , rulerUnit: units\r\n                  })\r\n                    break;\r\n                }\r\n              } else {\r\n                this.setState({\r\n                  itemIndex: newitemIndex,\r\n                  rulerUnit: units\r\n                })\r\n              }\r\n\r\n\r\n\r\n            }\r\n          } else if (confirmBtn === 160) {\r\n            nextFlog = false\r\n            let textValue = ''\r\n\r\n\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) > 0) {\r\n              if (!avoidRepetition) {\r\n                avoidRepetition = true\r\n                this.avoidRepetition = setTimeout(() => {\r\n                  avoidRepetition = false\r\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n                }, 100);\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        } else if (bluName.indexOf('Mella Measure') !== -1 && this.state.devicesType === 'biggie') {\r\n          //255\r\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n            h2tLength, torsoLength\r\n          } = this.state\r\n          // console.log('结束循环蓝牙名称', bluData)\r\n          let confirmBtn = bluData[8]     //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n\r\n          let rulerUnitNum = parseInt(bluData[11], 16) //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null             //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6\r\n          let units = rulerUnitNum === 0 ? 'cm' : 'in'\r\n\r\n\r\n          if (units !== this.state.rulerUnit) {\r\n            if (units === 'cm') {\r\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) * 2.54).toFixed(1)}` : ''\r\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) * 2.54).toFixed(1)}` : ''\r\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) * 2.54).toFixed(1)}` : ''\r\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) * 2.54).toFixed(1)}` : ''\r\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) * 2.54).toFixed(1)}` : ''\r\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) * 2.54).toFixed(1)}` : ''\r\n            } else {\r\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) / 2.54).toFixed(2)}` : ''\r\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) / 2.54).toFixed(2)}` : ''\r\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) / 2.54).toFixed(2)}` : ''\r\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) / 2.54).toFixed(2)}` : ''\r\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) / 2.54).toFixed(2)}` : ''\r\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) / 2.54).toFixed(2)}` : ''\r\n            }\r\n\r\n            this.setState({\r\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n              h2tLength, torsoLength,\r\n              rulerUnit: units\r\n            })\r\n\r\n\r\n          }\r\n\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9]\r\n          let num2 = bluData[10]\r\n          let num = getVal(num1, num2)\r\n          try {\r\n            newVal = parseFloat(num)\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2)\r\n\r\n            } else {\r\n              newVal = newVal.toFixed(1)\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n\r\n\r\n          function getVal (shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16)\r\n            let num2 = parseInt(xiaoshuo, 16)\r\n\r\n            return `${num1}.${num2}`\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (confirmBtn[1] === '2' && confirmBtn[0] !== confirmBtnFlog) {\r\n            confirmBtnFlog = confirmBtn[0]\r\n            if (!nextFlog) {\r\n              nextFlog = true\r\n\r\n              if (itemIndex === ITEMINDEX) {\r\n                this._updatePetAttributes()\r\n                return\r\n              }\r\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\r\n\r\n              let textValue = ''\r\n              try {\r\n                switch (itemIndex) {\r\n                  case 1: textValue = l2rarmDistance; this.input2 && this.input2.focus(); break;\r\n                  case 2: textValue = h2tLength; this.input3 && this.input3.focus(); break;\r\n                  case 3: textValue = torsoLength; this.input4 && this.input4.focus(); break;\r\n                  case 4: textValue = neckCircumference; this.input5 && this.input5.focus(); break;\r\n                  case 5: textValue = upperTorsoCircumference; this.input6 && this.input6.focus(); break;\r\n                  case 6: textValue = lowerTorsoCircumference; this.input7 && this.input7.focus(); break;\r\n                  default:\r\n                    break;\r\n                }\r\n              } catch (error) {\r\n                console.log(error);\r\n              }\r\n\r\n\r\n\r\n\r\n              if (newVal !== textValue && parseInt(newVal) >= 0) {\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  default: this.setState({\r\n                    itemIndex: newitemIndex\r\n                    , rulerUnit: units\r\n                  })\r\n                    break;\r\n                }\r\n              } else {\r\n                this.setState({\r\n                  itemIndex: newitemIndex,\r\n                  rulerUnit: units\r\n                })\r\n              }\r\n\r\n\r\n\r\n            }\r\n          } else if (confirmBtn === '01') {\r\n            nextFlog = false\r\n            let textValue = ''\r\n\r\n\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) >= 0) {\r\n              if (!avoidRepetition) {\r\n                avoidRepetition = true\r\n                this.avoidRepetition = setTimeout(() => {\r\n                  avoidRepetition = false\r\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n                }, 100);\r\n                try {\r\n                  switch (itemIndex) {\r\n                    case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); this.input1 && this.input1.focus(); break;\r\n                    case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); this.input2 && this.input2.focus(); break;\r\n                    case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); this.input3 && this.input3.focus(); break;\r\n                    case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); this.input4 && this.input4.focus(); break;\r\n                    case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); this.input5 && this.input5.focus(); break;\r\n                    case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); this.input6 && this.input6.focus(); break;\r\n                    default:\r\n                      break;\r\n                  }\r\n                } catch (error) {\r\n                  console.log(error);\r\n                }\r\n\r\n              }\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n        // if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\r\n        // console.log(bluData);\r\n\r\n        else if (bluName.indexOf('Biggie') !== -1 && this.state.devicesType === 'biggie' && bluData.length > 10) {\r\n          function getVal (shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`\r\n            }\r\n            return `${shi}`\r\n\r\n          }\r\n\r\n          let newArr = bluData\r\n\r\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(newArr[10].toString(16))}`\r\n          weight = parseInt(weight, 16)\r\n\r\n\r\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(newArr[13].toString(16))}`\r\n          impedance = parseInt(impedance, 16)\r\n\r\n          let arr11 = getVal(newArr[11].toString(16))\r\n\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]))\r\n          // console.log('重量为', weight);\r\n          let weightUnits = 'kg'\r\n          let sendWeight, biggieDate\r\n          switch (arr11[1]) {\r\n            case '0':\r\n              weightUnits = 'kg';\r\n              sendWeight = weight;\r\n              biggieDate = (weight * 2.2046).toFixed(2)\r\n              break;\r\n            case '1':\r\n              weightUnits = 'lb';\r\n              sendWeight = weight;\r\n              biggieDate = (weight * 2).toFixed(2)\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          // if (`${getVal(newArr[8].toString(16))}` === '03') {\r\n          //   //进入了结束测量\r\n          //   if (!biggieSave) {\r\n          //     //第一条测量完成指令\r\n          //     console.log('键盘写入');\r\n          //     let { units, } = this.state\r\n\r\n          //     let weight = units === '℃' ? sendWeight : biggieDate\r\n          //     ipcRenderer.send('keyboardWriting', weight)\r\n\r\n          //   }\r\n          //   biggieSave = true\r\n          // } else {\r\n          //   biggieSave = false\r\n          // }\r\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n            sameBiggieNum++\r\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n              console.log('键盘写入');\r\n              let { units, } = this.state\r\n\r\n              let weight = units === '℃' ? sendWeight : biggieDate\r\n              ipcRenderer.send('keyboardWriting', weight)\r\n            }\r\n\r\n          } else {\r\n            sameBiggieNum = 0\r\n            keyboardBiggieFlog = false\r\n          }\r\n\r\n\r\n\r\n          if (weight >= 0) {\r\n\r\n            this.setState({\r\n              biggieDate,\r\n              impedance,\r\n              sendWeight,\r\n              isHaveBigieDate: true\r\n            })\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n  }\r\n  testCheck = (arr) => {\r\n    if (arr.length < 7) {\r\n      return false\r\n    }\r\n    let i = 7\r\n    let checkFloag = arr[i];\r\n\r\n\r\n    for (i = 8; i < arr.length - 2; i++) {\r\n      checkFloag = checkFloag ^ arr[i];\r\n    }\r\n    return checkFloag;\r\n  }\r\n  getMac = (arr) => {\r\n    // console.log(arr);\r\n    let str = arr[1].toString(16)\r\n    if (str.length === 1) {\r\n      str = '0' + str\r\n    }\r\n    for (let i = 2; i < 7; i++) {\r\n\r\n      let item = arr[i].toString(16)\r\n      if (item.length === 1) {\r\n        item = '0' + item\r\n      }\r\n      str += `:${item}`\r\n      // }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return str\r\n  }\r\n  //15秒的预测程序\r\n  _time15 = (val) => {\r\n\r\n    let isDog = true\r\n    let { petSpeciesBreedId } = this.state\r\n    if (petSpeciesBreedId < 136) {\r\n      isDog = false\r\n    }\r\n    let parame = {\r\n      ambient_temperature: 25,\r\n      data: clinicalYuce,\r\n      deviceId: '11111111111111111111111111',\r\n\r\n      sampling_rate: '104ms'\r\n    }\r\n\r\n    console.log('预测传入数据', parame);\r\n\r\n    let url = !isDog ? '/clinical/dogPredict' : '/clinical/catPredict'\r\n    console.log(url)\r\n    console.log('预测发送只', parame);\r\n\r\n    fetchRequest(url, 'POST', parame)\r\n      .then((res) => {\r\n        // predictionFlog = false\r\n        if (res.message === 'Success') {\r\n          console.log('预测返回值：', res);\r\n\r\n          let prediction = res.result.prediction.toFixed(2)\r\n          temp15 = parseFloat(prediction)\r\n\r\n        } else {\r\n          console.log('system error')\r\n        }\r\n\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(`:${err}`)\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  //预测程序\r\n  _prediction = (val) => {\r\n\r\n    let isDog = true\r\n    let { petSpeciesBreedId } = this.state\r\n    if (petSpeciesBreedId < 136) {\r\n      isDog = false\r\n    }\r\n    let parame = {\r\n      // ambient_temperature: this.state.huanwen,\r\n      ambient_temperature: 17,\r\n\r\n      data: clinicalYuce,\r\n      deviceId: `${this.state.probeId}`,\r\n      // deviceId: '11111111111111111111111111',\r\n\r\n      sampling_rate: '135ms'\r\n    }\r\n\r\n    console.log('预测传入数据', parame);\r\n\r\n    clinicalYuce = []\r\n    clinicalIndex = 0\r\n\r\n    let url = isDog ? '/clinical/dogv12Predict' : '/clinical/catv12Predict'\r\n    console.log(url, petSpeciesBreedId)\r\n    console.log('预测发送只', parame);\r\n\r\n    fetchRequest(url, 'POST', parame)\r\n      .then((res) => {\r\n        console.log('预测结果：', res);\r\n        // predictionFlog = false\r\n        if (res.message === 'Success') {\r\n          console.log('预测返回值：', res);\r\n\r\n          let prediction = res.result.prediction.toFixed(2)\r\n          console.log(prediction);\r\n\r\n\r\n          let tempArr = prediction.split('.')\r\n          let intNum = tempArr[0]\r\n          let flotNum = tempArr[1]\r\n          if (intNum.length < 2) {\r\n            intNum = '0' + intNum\r\n          }\r\n          if (flotNum.length < 2) {\r\n            flotNum = '0' + flotNum\r\n          }\r\n          endflog = false\r\n\r\n\r\n          //1.这里先注释掉,后面忘了取消注释\r\n          const timeID1 = setInterval(() => {\r\n            if (endflog) {\r\n              let Temp = parseFloat(prediction)\r\n              let progress = (Temp - 25) * 5\r\n              this.setState({\r\n                Temp,\r\n                progress\r\n              })\r\n              endflog = false\r\n\r\n              timeID1 && clearInterval(timeID1)\r\n            } else {\r\n              const timeID = setTimeout(() => {\r\n                ipcRenderer.send('usbdata', { command: '42', arr: [intNum, flotNum] })\r\n                timeID && clearTimeout(timeID)\r\n              }, 10)\r\n\r\n            }\r\n          }, 200)\r\n\r\n\r\n\r\n        } else {\r\n          const timeID = setTimeout(() => {\r\n            // this.sendData('41', [])\r\n            ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n            clearTimeout(timeID)\r\n          }, 10)\r\n          console.log('system error')\r\n        }\r\n\r\n\r\n      })\r\n      .catch((err) => {\r\n        // predictionFlog = false\r\n        console.log(err);\r\n        const timeID = setTimeout(() => {\r\n          // this.sendData('41', [])\r\n          ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n          clearTimeout(timeID)\r\n        }, 10)\r\n        console.log(`:${err}`)\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _mearsurePort = () => {\r\n    switch (this.state.devicesType) {\r\n      case 'mella':\r\n        switch (this.state.mearsurePart) {\r\n          case 1: return (\r\n            <div >\r\n              <div className='part'>\r\n                Axillary\r\n                <img src={ye} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n          case 2: return (\r\n            <div >\r\n              <div className='part'>\r\n                Rectal\r\n                <img src={gang} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n          default: return (\r\n            <div >\r\n              <div className='part'>\r\n                Ear\r\n                <img src={er} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        break;\r\n      case 'biggie':\r\n        return (\r\n          <div className='part'>\r\n            Scale\r\n            <img src={scale} alt=\"\" width=\"50px\" />\r\n\r\n          </div>\r\n        )\r\n        break\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n  _getHistory = () => {\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamByPetId/${this.state.petId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          console.log('-------', datas);\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            let data = datas[i]\r\n            let { petId, examId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime,\r\n              modifiedTime, fat, weight } = data\r\n            // console.log(createTime);\r\n            let time = null\r\n            if (storage.vetspireOrEzyvet === '2') {\r\n              time = modifiedTime\r\n              if (modifiedTime === '' || modifiedTime === null) {\r\n                time = createTime\r\n              }\r\n            } else {\r\n              time = createTime\r\n            }\r\n            let json = {\r\n              time,\r\n              Temp: temperature,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n              fat, weight\r\n            }\r\n            // console.log(json);\r\n            historys.push(json)\r\n\r\n\r\n          }\r\n          console.log('----', historys);\r\n          let historyData = []\r\n          for (let i = 0; i < historys.length; i++) {\r\n            let history = historys[i]\r\n            let { bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId, examId, time, fat, weight } = history\r\n            let placement = history.placement\r\n            if (placement === null || placement === '') {\r\n              placement = 1\r\n            }\r\n            let str = {\r\n              date: moment(time).format('MMM DD'),\r\n              time: moment(time).format('hh:mm A'),\r\n              temp: history.Temp,\r\n              placement,\r\n              note: history.note,\r\n              historyId: history.historyId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId,\r\n              key: examId,\r\n              fat, weight\r\n            }\r\n            historyData.push(str)\r\n          }\r\n          console.log('historyData:', historyData);\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n\r\n\r\n  _getPetInfo = (value) => {\r\n    let datas = null\r\n\r\n    datas = {\r\n      patientId: this.state.patientId,\r\n      org: this.state.org\r\n    }\r\n\r\n\r\n\r\n    console.log('入参：', datas);\r\n    fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n      .then(res => {\r\n        console.log('宠物信息', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          //有宠物，进入1\r\n          let { petId, petSpeciesBreedId } = res.data[0]\r\n          console.log('------------', petId);\r\n          this.setState({\r\n            petId,\r\n            petSpeciesBreedId\r\n          }, () => {\r\n            console.log('去获取历史记录');\r\n            this._getHistory()\r\n          })\r\n        } else {\r\n          //没有宠物，进入2\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n  _changeDeviceType = (val, e) => {\r\n    console.log(val, e)\r\n    this.setState({\r\n      devicesType: val\r\n    })\r\n\r\n    if (val === 'biggie' && this.state.isHaveBigieDate) {\r\n      this.setState({\r\n        isHaveBigieDate: false\r\n      })\r\n      keyboardBiggieFlog = false\r\n      sameBiggieNum = 0\r\n    }\r\n\r\n    temporaryStorage.devicesType = val\r\n\r\n\r\n\r\n\r\n  }\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true,  //\r\n      // addpatient_description: '',\r\n      // addpatient_petName: '',\r\n      // addpatient_species: 1\r\n    })\r\n    if (this.state.addpatient_patientId === '') {\r\n      this.setState({\r\n        spin: false\r\n      })\r\n    } else {\r\n      let list = electronStore.get('doctorExam')\r\n\r\n      let searchData = []\r\n      let keyWord = this.state.addpatient_patientId\r\n      for (let i = 0; i < list.length; i++) {\r\n        let patientId = list[i].patientId\r\n        if (`${patientId}` === keyWord) {\r\n          searchData.push(list[i])\r\n        }\r\n      }\r\n      console.log('搜索到的宠物为', searchData);\r\n      if (searchData.length > 0) {\r\n        let data = searchData[0]\r\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength } = data\r\n\r\n        l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n        neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n        upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n        lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n        h2tLength = h2tLength ? `${h2tLength}` : ''\r\n        torsoLength = torsoLength ? `${torsoLength}` : ''\r\n        let weight = data.weight\r\n        if (weight && weight !== 'unknown') {\r\n          weight = parseFloat(weight).toFixed(1)\r\n        }\r\n        let breedName = data.breed\r\n        if (!breedName) {\r\n          breedName = 'unknown'\r\n        }\r\n        switch (breedName) {\r\n          case 'defaultdog':\r\n            breedName = 'Dog'\r\n\r\n            break;\r\n          case 'defaultother':\r\n            breedName = 'Other'\r\n\r\n            break;\r\n          case 'defaultcat':\r\n            breedName = 'Cat'\r\n            break;\r\n\r\n        }\r\n        console.log('-----------', weight);\r\n        this.setState({\r\n          petName: data.petName,\r\n          owner: data.owner,\r\n          breedName,\r\n          weight,\r\n          age: data.age,\r\n          patientId: data.patientId,\r\n          petId: data.petId,\r\n          itemIndex: 1,\r\n          l2rarmDistance,\r\n          neckCircumference,\r\n          upperTorsoCircumference,\r\n          lowerTorsoCircumference,\r\n          h2tLength,\r\n          torsoLength,\r\n          isWalkIn: false\r\n        }, () => {\r\n          this._getHistory()\r\n        })\r\n      } else {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  selectWZ = (val) => {\r\n    switch (val) {\r\n      case 'dog':\r\n        this.setState({\r\n          catImg: cat1,\r\n          dogImg: redDog1,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n        })\r\n\r\n        break;\r\n\r\n      case 'cat':\r\n        this.setState({\r\n          catImg: redCat1,\r\n          dogImg: dog1,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n        })\r\n\r\n        break;\r\n\r\n      case 'other':\r\n        this.setState({\r\n          catImg: cat1,\r\n          dogImg: dog1,\r\n          otherImg: redother,\r\n          selectWZ: val,\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  _topLeft = () => {\r\n    let { patientId, breedName, isMix, age, petName, owner, weight, url, speciesId, petId, isWalkIn, spin, dogImg, catImg, otherImg, addpatient_patientId } = this.state\r\n    if (isWalkIn) {\r\n\r\n      return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\r\n            >\r\n\r\n              <div className=\"ltitle\" style={{ marginLeft: px(30) }}>\r\n                <p > {`Walk-In Exam`}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"walkPetinfo\"\r\n              style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(30), }}\r\n            >\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(10), }}\r\n              >\r\n                <p style={{ width: '80px', }}>Patient ID:</p>\r\n                <Input\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={addpatient_patientId}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    this.setState({\r\n                      addpatient_patientId: item.target.value.replace(/\\s/g, \"\")\r\n                    })\r\n                  }}\r\n                  onKeyDown={(e) => {\r\n                    // console.log('------', e);\r\n                    if (e.keyCode === 13) {\r\n                      this._refresh()\r\n                    }\r\n                  }}\r\n                />\r\n                <SyncOutlined className='refresh'\r\n                  style={{ fontSize: px(25) }}\r\n                  onClick={this._refresh} spin={spin} />\r\n              </div>\r\n\r\n              <div className='newPet'>\r\n                <div className=\"patirntID\"\r\n                  style={{ marginTop: px(10) }}\r\n                >\r\n                  <p style={{ width: '80px' }}>Pet Name*:</p>\r\n                  <Input\r\n                    // style={{ border: 'none', outline: 'medium' }}\r\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                    value={this.state.addpatient_petName}\r\n                    bordered={false}\r\n                    onChange={(item) => {\r\n                      // console.log(item);\r\n                      this.setState({\r\n                        addpatient_petName: item.target.value\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"patirntID\"\r\n                  style={{ marginTop: px(10) }}\r\n                >\r\n                  <p style={{ width: '80px' }}>Description:</p>\r\n                  <Input\r\n                    // style={{ border: 'none', outline: 'medium' }}\r\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                    value={this.state.addpatient_description}\r\n                    bordered={false}\r\n                    onChange={(item) => {\r\n                      // console.log(item);\r\n                      this.setState({\r\n                        addpatient_description: item.target.value\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"species\" style={{ marginBottom: px(20), height: px(70), marginTop: px(10) }}>\r\n\r\n                  <ul>\r\n                    <li >\r\n                      <div className='speciesChild' >\r\n                        <div className='dog'\r\n\r\n                          onClick={() => { this.selectWZ('dog') }}>\r\n                          <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                        </div>\r\n                        Dog\r\n                      </div>\r\n                    </li>\r\n                    <li>\r\n                      <div className='speciesChild' >\r\n                        <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                          <img src={catImg} alt=\"\" style={{ height: px(40) }} />\r\n                        </div>\r\n                        Cat\r\n                      </div>\r\n                    </li>\r\n                    <li >\r\n                      <div className='speciesChild' >\r\n                        <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                          <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                        </div>\r\n                        Other\r\n                      </div>\r\n                    </li>\r\n\r\n                  </ul>\r\n                </div>\r\n\r\n\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n\r\n          <div className=\"deviceInfo\">\r\n            <div className=\"heard1\"\r\n              style={{ height: px(40), marginTop: px(10), paddingRight: px(10), paddingLeft: px(30) }}\r\n            >\r\n              <span>Device Info</span>\r\n            </div>\r\n            <div className=\"devicesBody\"\r\n              style={{ marginTop: mTop(23) }}\r\n            >\r\n              <div className=\"devices\"\r\n                style={{ paddingLeft: px(31) }}\r\n              >\r\n                <p>Device:</p>\r\n                <Select\r\n                  value={this.state.devicesType}\r\n                  style={{ width: 120 }}\r\n                  size={'small'}\r\n                  onChange={this._changeDeviceType}\r\n                >\r\n                  <Option value=\"mella\">Mella</Option>\r\n                  <Option value=\"biggie\">Biggie</Option>\r\n                </Select>\r\n              </div>\r\n              {this._mearsurePort()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    }\r\n\r\n    if (breedName === null) {\r\n      breedName = ''\r\n    }\r\n    let mix = ''\r\n    if (isMix === true) {\r\n      mix = 'Mix'\r\n    }\r\n    let title = ''\r\n    if (petName && `${petName}`.toLowerCase() !== 'unknown') {\r\n      title += `${petName}`\r\n    }\r\n    if (petName && `${petName}`.toLowerCase() !== 'unknown' && patientId && `${patientId}`.toLowerCase() !== 'unknown') {\r\n      title += `, \\xa0 `\r\n    }\r\n    if (patientId && `${patientId}`.toLowerCase() !== 'unknown') {\r\n      title += `ID: ${patientId}`\r\n    }\r\n\r\n    let wei = (weight && `${weight}`.toLowerCase() !== 'unknown') ? `${weight}` : ''\r\n    if (wei && wei.indexOf(`kg`) === -1) {\r\n      wei += 'kg'\r\n    }\r\n    let image = `url(${other})`\r\n    if (url) {\r\n      image = `url(${url}?download=0&width=80)`\r\n    } else {\r\n      switch (speciesId) {\r\n        case 1: image = `url(${cat})`; break;\r\n        case 2: image = `url(${dog})`; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"l\">\r\n        <div className=\"petinfo\">\r\n          <div className=\"heard\"\r\n            style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\r\n          >\r\n            <div className=\"avaterBox\">\r\n              <div className='avatar'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  // marginRight: px(20),\r\n                  backgroundImage: image,\r\n                  marginLeft: px(20)\r\n\r\n\r\n                }}\r\n                onClick={() => {\r\n                  storage.goEditPet = 'nomalmeasurement'\r\n                  this.props.history.push({ pathname: '/page9', participate: { patientId, petName, petId } })\r\n                }}\r\n              >\r\n                {(storage.identity === '3') &&\r\n                  <img className='edit' src={edit} alt=\"\" width='18px' />}\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"ltitle\">\r\n              <p > {title}</p>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n          <div className=\"info\"\r\n            style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(60) }}\r\n          >\r\n            <p>Owner: {(owner && `${owner}`.toLowerCase() !== 'unknown') ? `${owner}` : ''}</p>\r\n            <p>Breed: {(breedName && `${breedName}`.toLowerCase() !== 'unknown') ? `${breedName}  ${mix}` : ''}</p>\r\n            <p>Age: {((age && `${age}`.toLowerCase() !== 'unknown') || age === 0) ? `${age} yrs` : ''} </p>\r\n            <p>Weight: {wei}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"deviceInfo\">\r\n          <div className=\"heard1\"\r\n            style={{ height: mTop(40), marginTop: mTop(10), paddingRight: px(10), paddingLeft: px(30) }}\r\n          >\r\n            <span>Device Info</span>\r\n          </div>\r\n          <div className=\"devicesBody\"\r\n            style={{ marginTop: mTop(23) }}\r\n          >\r\n            <div className=\"devices\"\r\n              style={{ paddingLeft: px(31) }}\r\n            >\r\n              <p>Device:</p>\r\n              <Select\r\n                value={this.state.devicesType}\r\n                style={{ width: 120 }}\r\n                size={'small'}\r\n                onChange={this._changeDeviceType}\r\n              >\r\n                <Option value=\"mella\">Mella</Option>\r\n                <Option value=\"biggie\">Biggie</Option>\r\n              </Select>\r\n            </div>\r\n            {this._mearsurePort()}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n\r\n\r\n  }\r\n  handleChange = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      furLength: index\r\n    })\r\n  };\r\n  handleChange1 = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      bodyType: index\r\n    })\r\n  };\r\n\r\n  _foot = () => {\r\n\r\n    // console.log('所有的历史记录：', historyData);\r\n\r\n\r\n\r\n    let lbgc = '', rbgc = ''\r\n    if (this.state.isNotes) {\r\n      lbgc = 'rgba(25,173,228,0.5)'; rbgc = 'rgba(105,201,237,1)'\r\n    } else {\r\n      lbgc = 'rgba(105,201,237,1)'; rbgc = 'rgba(25,173,228,0.5)'\r\n    }\r\n\r\n    return (\r\n      <div className=\"clinical_foot\">\r\n        <div className=\"top\"\r\n          style={{ height: '10%', }}\r\n        >\r\n          <div className=\"foot_l\" style={{ backgroundColor: lbgc }} onClick={() => this.setState({ isNotes: true })}>\r\n            Notes\r\n          </div>\r\n          <div className=\"foot_l\" style={{ backgroundColor: rbgc }} onClick={() => this.setState({ isNotes: false })}>\r\n            History\r\n          </div>\r\n        </div>\r\n        {(this.state.isNotes) ? (\r\n          this._notes()\r\n        ) : (this._history())}\r\n\r\n      </div >\r\n    )\r\n  }\r\n  _notes = () => {\r\n    let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n      h2tLength, torsoLength, rulerUnit, updatePetAttributes } = this.state\r\n    function num (val) {\r\n      let weight = val.target.value\r\n      let newText = weight.replace(/[^\\d.]/g, \"\");\r\n      newText = newText.replace(/^\\./g, \"\");\r\n      newText = newText.replace(/\\.{2,}/g, \".\");\r\n      newText = newText.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\");\r\n      newText = newText.replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3');//只能输入两个小数  \r\n      if (newText.indexOf(\".\") < 0 && newText != \"\") {//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额  \r\n        newText = parseFloat(newText)\r\n      }\r\n      return `${newText}`\r\n\r\n    }\r\n    if (this.state.devicesType === 'mella') {\r\n      return (\r\n        <div className=\"note\" style={{ height: mTop(256), marginTop: mTop(10) }}>\r\n          <textarea\r\n            rows=\"10\"\r\n            cols=\"30\"\r\n            value={this.state.notes}\r\n            onChange={(val) => {\r\n              console.log(val);\r\n              this.setState({\r\n                notes: val.target.value\r\n              })\r\n            }}\r\n          >\r\n          </textarea>\r\n        </div>\r\n      )\r\n    } else {\r\n      let { speciesId } = this.state\r\n      let species = speciesId === 1 ? catcareacte : careacte\r\n      return (\r\n        <div className=\"characteristics flex\">\r\n          <div className=\"careacterL flex\">\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Head Circumference:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{\r\n                    borderRadius: px(40), fontSize: px(17),\r\n                    paddingRight: px(20)\r\n                  }}\r\n                  value={l2rarmDistance}\r\n                  ref={(input) => { this.input1 = input }}\r\n                  // autoFocus={true}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    console.log(data);\r\n                    this.setState({\r\n                      l2rarmDistance: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 1\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(15) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Heard to Tail Length:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input2 = input }}\r\n                  value={h2tLength}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      h2tLength: data\r\n                    })\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 2\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck to Tail Length:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input3 = input }}\r\n                  value={torsoLength}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      torsoLength: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 3\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input4 = input }}\r\n                  value={neckCircumference}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      neckCircumference: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 4\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Upper Torso:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  value={upperTorsoCircumference}\r\n                  ref={(input1) => { this.input5 = input1 }}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      upperTorsoCircumference: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 5\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Lower Torso:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  value={`${lowerTorsoCircumference}`}\r\n                  ref={(input) => { this.input6 = input }}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      lowerTorsoCircumference: data\r\n                    })\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 6\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n          <div className=\"careacterR flex\">\r\n            <div className=\"imgBox flex\" style={{ borderRadius: px(20) }}>\r\n              <img src={species} alt=\"\" style={{ width: '80%' }} />\r\n            </div>\r\n          </div>\r\n\r\n          <MyModal\r\n            visible={updatePetAttributes}\r\n            text={'Uploading pet information to database'}\r\n          />\r\n        </div >\r\n      )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  //更新宠物的属性值，比如头尾、上躯干周长等\r\n  _updatePetAttributes = () => {\r\n    let { l2rarmDistance, lowerTorsoCircumference, upperTorsoCircumference, neckCircumference, rulerUnit, petId, h2tLength, torsoLength } = this.state\r\n\r\n\r\n    l2rarmDistance = newNum(l2rarmDistance)\r\n    lowerTorsoCircumference = newNum(lowerTorsoCircumference)\r\n    upperTorsoCircumference = newNum(upperTorsoCircumference)\r\n    neckCircumference = newNum(neckCircumference)\r\n    h2tLength = newNum(h2tLength)\r\n    torsoLength = newNum(torsoLength)\r\n\r\n    function newNum (val) {\r\n      if (val) {\r\n        if (rulerUnit === 'in') {\r\n          return parseFloat((parseFloat(val) * 2.54).toFixed(1))\r\n\r\n        } else {\r\n          return parseFloat(val)\r\n        }\r\n\r\n      } else {\r\n        return ''\r\n      }\r\n\r\n\r\n    }\r\n\r\n    let prams = {\r\n      l2rarmDistance: l2rarmDistance || null,\r\n      lowerTorsoCircumference: lowerTorsoCircumference || null,\r\n      upperTorsoCircumference: upperTorsoCircumference || null,\r\n      neckCircumference: neckCircumference || null,\r\n      h2tLength: h2tLength || null,\r\n      torsoLength: torsoLength || null,\r\n    }\r\n    this.setState({\r\n      updatePetAttributes: true\r\n    })\r\n    let url = `/pet/updatePetInfo/${storage.userId}/${this.state.petId}`\r\n    console.log('入参:', prams);\r\n    fetchRequest(url, 'POST', prams)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          updatePetAttributes: false,\r\n          itemIndex: 1\r\n        })\r\n        this.input1.focus();\r\n\r\n        if (res.flag) {\r\n          message.success('Uploaded successfully')\r\n        } else {\r\n          message.error('upload failed')\r\n        }\r\n\r\n\r\n\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          updatePetAttributes: false\r\n        })\r\n        message.error('update failed')\r\n        console.log(err);\r\n\r\n\r\n      })\r\n  }\r\n  _history = () => {\r\n    const _del = (key, record) => {\r\n      console.log('删除', key, record);\r\n\r\n\r\n      /**------------这里还要删除后台的数据------------ */\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, 'DELETE')\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n            console.log('删除成功');\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key)\r\n            });\r\n          } else {\r\n            console.log('删除失败');\r\n          }\r\n        })\r\n    }\r\n    const _edit = (key, record) => {\r\n      console.log('编辑', key, record);\r\n      this.setState({\r\n        visible: true,\r\n        editId: key,\r\n        memo: record.note\r\n      })\r\n\r\n\r\n\r\n    }\r\n\r\n    let { historyData, devicesType } = this.state\r\n    let listData = [], columns = []\r\n    switch (devicesType) {\r\n      case 'biggie':\r\n        for (let i = 0; i < historyData.length; i++) {\r\n          const element = historyData[i];\r\n          if (element.weight) {\r\n            listData.push(element)\r\n          }\r\n\r\n        }\r\n\r\n        columns = [\r\n          {\r\n            title: '',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            width: '15%',\r\n            render: (text, record, index) => {\r\n              // console.log('狩猎:', text, record, index);\r\n              //record:\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\r\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n                  </Popconfirm>\r\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                    onClick={() => _edit(record.historyId, record)}\r\n                  />\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Date',\r\n            dataIndex: 'date',\r\n            key: 'date',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Time',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: `Weight`,\r\n            key: 'weight',\r\n            dataIndex: 'weight',\r\n            width: '13%',\r\n            render: (text, record, index) => {\r\n\r\n\r\n              let bag = '#58BDE6', tem = ''\r\n\r\n              if (this.state.units === '℃') {\r\n                if (text) {\r\n                  tem = `${text.toFixed(1)}kgs`\r\n                }\r\n              } else {\r\n\r\n                tem = `${(text * 2.2046).toFixed(1)}lbs`\r\n\r\n              }\r\n              return (\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n\r\n                  <p style={{ margin: 0, padding: 0, color: bag }}>{tem}</p>\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'BF%',\r\n            dataIndex: 'fat',\r\n            key: 'fat',\r\n            align: 'center',\r\n            width: '11%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'BCS',\r\n            dataIndex: 'bodyConditionScore',\r\n            key: 'bodyConditionScore',\r\n            align: 'center',\r\n            width: '18%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Note',\r\n            dataIndex: 'note',\r\n            key: 'note',\r\n            width: '11%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ width: '70px' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n        ];\r\n\r\n\r\n        break;\r\n      case 'mella':\r\n        for (let i = 0; i < historyData.length; i++) {\r\n          const element = historyData[i];\r\n          if (element.temp) {\r\n            listData.push(element)\r\n          }\r\n\r\n        }\r\n        columns = [\r\n          {\r\n            title: '',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            width: '15%',\r\n            render: (text, record, index) => {\r\n              // console.log('狩猎:', text, record, index);\r\n              //record:\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\r\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n                  </Popconfirm>\r\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                    onClick={() => _edit(record.historyId, record)}\r\n                  />\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Date',\r\n            dataIndex: 'date',\r\n            key: 'date',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Time',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: `Temp(${this.state.units})`,\r\n            key: 'temp',\r\n            dataIndex: 'temp',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n              // console.log(text, record);\r\n\r\n\r\n              /**\r\n              * bag：温度数值前的圆圈的背景颜色\r\n              * tem：展示的温度\r\n              * endvalue:将从后台得到的数据全部转化成华氏度\r\n              * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n              * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n              * \r\n              */\r\n\r\n              let bag = '', tem = ''\r\n\r\n              let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n              let min = 99.5, max = 102.2\r\n              //99.5 = 37.5   102.2=39\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              if (endValue > max) {\r\n                bag = '#E1206D'\r\n              } else if (endValue < min) {\r\n                bag = '#98DA86'\r\n              } else {\r\n                bag = '#58BDE6'\r\n              }\r\n\r\n\r\n\r\n              if (this.state.units === '℃') {\r\n                if (text) {\r\n                  tem = `${text.toFixed(1)}${this.state.units}`\r\n                }\r\n              } else {\r\n                if (text) {\r\n                  if (text > 55) {\r\n                    tem = `${text}${this.state.units}`\r\n                  } else {\r\n                    tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n                  }\r\n\r\n                }\r\n              }\r\n              return (\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                  {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n                  <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Placement',\r\n            dataIndex: 'placement',\r\n            key: 'placement',\r\n            align: 'center',\r\n            width: '18%',\r\n            render: (text, record, index) => {\r\n              // console.log(text, record, index);\r\n              /**\r\n               * old:   1:腋温  2：肛温 3：耳温\r\n               * new:   1.腋温  2：大腿温度 3.肛温  4：耳温\r\n               */\r\n              switch (record.placement) {\r\n                case 0: return (    //腋温\r\n                  <div>\r\n                    <img src={placement_er} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 1: return (    //腋温\r\n                  <div>\r\n                    <img src={palcement_ye} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 3: return (     //肛温\r\n                  <div>\r\n                    <img src={placement_gang} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 2: return (     //肛温\r\n                  <div>\r\n                    <img src={placement_gang} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 4: return (    //耳温\r\n                  <div>\r\n                    <img src={placement_er} alt=\"\" />\r\n                  </div>\r\n                )\r\n                default: break;\r\n              }\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Note',\r\n            dataIndex: 'note',\r\n            key: 'note',\r\n            width: '16%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ width: '100%', textAlign: 'left', }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n        ];\r\n\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const pas = window.screen.height < 1000 ? 2 : 3\r\n\r\n    let hisHe = mTop(200)\r\n    try {\r\n      let historyElement = document.querySelectorAll('#clinicalMeasure .historyTable')\r\n      hisHe = historyElement[0].clientHeight - mTop(100)\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='historyTable' style={{ height: '85%' }}>\r\n        <Table\r\n          loading={this.state.loading}\r\n          columns={columns}\r\n          dataSource={listData}\r\n          rowKey={columns => columns.historyId}\r\n          pagination={false}\r\n          scroll={{\r\n            y: hisHe\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _ciral = () => {\r\n\r\n    let num = px(280)\r\n    let windowWidth = document.documentElement.clientHeight\r\n    if (windowWidth) {\r\n      num = windowWidth * 0.30\r\n    }\r\n    return (\r\n      <div className=\"crial\" style={{ marginTop: mTop(50), }}>\r\n        {!this.state.isconnected && <div className=\"bb1\"\r\n          style={{ top: mTop(-40) }}\r\n        >\r\n          <div className=\"btn5\"\r\n            style={{ width: px(230), height: mTop(30), fontSize: px(16), }}\r\n            onClick={() => {\r\n              console.log('点击了切换按钮');\r\n\r\n              if (isClick === true) {\r\n                isClick = false\r\n                console.log('发送给主进程切换按钮');\r\n                ipcRenderer.send('qiehuan')\r\n                // ipcRenderer.send('getSerialPort')\r\n                const time = setTimeout(() => {\r\n                  isClick = true\r\n                  clearTimeout(time)\r\n                }, 2500)\r\n              }\r\n            }}\r\n          >Re-sync Base</div>\r\n        </div>}\r\n        <div className='flex' >\r\n          <Progress\r\n\r\n            type=\"dashboard\"\r\n\r\n            strokeColor={{\r\n              \"100%\": \"#108ee9\",\r\n              \"30%\": \"#87d068\"\r\n            }}\r\n            format={() => ``}\r\n            percent={this.state.progress}\r\n            gapDegree={30}\r\n            width={num}\r\n            strokeWidth={10}\r\n            success={{ strokeColor: 'red' }}\r\n\r\n          />\r\n          <div className=\"crialtext\"\r\n          // style={{ height: mTop(50), top: mTop(135) }}\r\n          >\r\n            {this._crialText()}\r\n          </div>\r\n        </div>\r\n\r\n\r\n        {this._btnEndTime()}\r\n      </div>\r\n    )\r\n  }\r\n  _save = () => {\r\n    if (this.state.isWalkIn) {\r\n      let { Temp, addpatient_description, addpatient_petName, addpatient_species } = this.state\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      let datas = {\r\n\r\n        temperature: parseFloat(Temp),  //测量温度\r\n        doctorId: storage.userId,\r\n        memo: this.state.notes,\r\n        clinicalDataEntityList: [{\r\n          data0: parseFloat(Temp),\r\n          data1: parseFloat(Temp),\r\n          data2: parseFloat(Temp),\r\n        }],\r\n        petVitalTypeId: petVitalId,\r\n        petName: addpatient_petName,\r\n        description: addpatient_description,\r\n        speciesId: addpatient_species,\r\n\r\n      }\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n      console.log('入参', datas);\r\n\r\n      fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n              isWeightSave: false\r\n            })\r\n            temp15 = 0\r\n            message.success('Data successfully saved in Mella')\r\n\r\n          } else {\r\n            message.error('Save failed')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error('Save failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n        })\r\n\r\n\r\n      return\r\n    }\r\n    console.log(storage.vetspireOrEzyvet);\r\n    if (storage.identity === '2') {\r\n      let parames = {\r\n        consult_id: this.state.consult_id,\r\n        temperature: this.state.Temp\r\n      }\r\n      if (this.state.macAddr) {\r\n        parames.macAddr = this.state.macAddr\r\n      }\r\n      console.log(parames, storage.ezyVetToken);\r\n      //petVitalId是宠物测量部位\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      console.log('ezy请求地址：', `/EzyVet/healthstatus/${this.state.healthStatus}/${this.state.probeID}/${this.state.petVitalTypeId}/${petVitalId}`);\r\n      fetchToken(`/EzyVet/healthstatus/${this.state.healthStatus}/${petVitalId}`, 'PATCH', parames, `Bearer ${storage.ezyVetToken}`)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.msg === 'success') {\r\n            console.log('成功');\r\n            message.success('Saved successfully')\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n            })\r\n            temp15 = 0\r\n            this._getHistory()\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        })\r\n      return\r\n    } else if (storage.identity === '1') {\r\n      //这是vetspire的保存测量记录\r\n      let parames = {\r\n        APIkey: storage.API,\r\n        vitalId: storage.selectExamId,\r\n        temp: parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\r\n\r\n\r\n      }\r\n\r\n      console.log('------------------', parames);\r\n\r\n      fetchRequest1('/VetSpire/updateVitalsTemperatureByVitalId', 'POST', parames)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.flag === true) {\r\n            if (res.data.updateVitals !== null) {\r\n              message.success('Saved successfully')\r\n            } else {\r\n              message.error('Save failed')\r\n            }\r\n            let sendData = {\r\n              petId: this.state.petId,\r\n              temperature: this.state.Temp,\r\n              memo: this.state.notes,\r\n              petVitalTypeId: this.state.petVitalTypeId\r\n            }\r\n            console.log('send', sendData);\r\n            fetchRequest('/pet/savePetExam', 'POST', sendData)\r\n              .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                  let hardSet = electronStore.get('hardwareConfiguration')\r\n                  let countdown = hardSet.is15 ? 15 : 30\r\n                  this.setState({\r\n                    initFlog: false,\r\n                    endMeasure: false,\r\n                    Temp: 0,\r\n                    progress: 0,\r\n                    countdown,\r\n                  })\r\n                  temp15 = 0\r\n                  this._getHistory()\r\n                }\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n              })\r\n          } else {\r\n            message.error('Save failed')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        })\r\n    } else {\r\n\r\n      //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n      if (storage.lastOrganization === '34') {\r\n        console.log(this.state.patientId, this.state.petId);\r\n        let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\r\n\r\n        this.setState({\r\n          isWeightSave: true\r\n        })\r\n        fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n          .then(res => {\r\n            console.log('---', res);\r\n\r\n\r\n            if (res.errors) {\r\n              message.error('Failed to obtain case list')\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n            } else {\r\n              let { vitals } = res.data.patient\r\n              let vitalArr = vitals.data\r\n              if (vitalArr.length > 0) {\r\n                vitalArr.sort((a, b) => {\r\n                  return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                })\r\n                let temperature = parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\r\n\r\n                let params = {}\r\n                if (vitalArr[0].weight && vitalArr[0].weight.value) {\r\n                  params = {\r\n                    query: `mutation {\r\n                      updateVital(      \r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${vitalArr[0].weight.value}}\r\n                              temperature:{value:${temperature}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n                } else {\r\n                  params = {\r\n                    query: `mutation {\r\n                      updateVital(      \r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                              temperature:{value:${temperature}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                console.log('---入参---', { patientID: this.state.patientId, vitalId: vitalArr[0].id, temperature });\r\n\r\n                fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.errors) {\r\n                      message.error('Data saving failed')\r\n                      this.setState({\r\n                        isWeightSave: false\r\n                      })\r\n                    } else {\r\n                      let hardSet = electronStore.get('hardwareConfiguration')\r\n                      let countdown = hardSet.is15 ? 15 : 30\r\n                      this.setState({\r\n                        initFlog: false,\r\n                        endMeasure: false,\r\n                        Temp: 0,\r\n                        progress: 0,\r\n                        countdown,\r\n                        isWeightSave: false\r\n                      })\r\n                      message.success('Data saved successfully')\r\n                    }\r\n\r\n\r\n                  })\r\n                  .catch(err => {\r\n                    message.error('Data saving failed')\r\n                    this.setState({\r\n                      isWeightSave: false\r\n                    })\r\n                    console.log(err);\r\n                  })\r\n\r\n              } else {\r\n                this.setState({\r\n                  isWeightSave: false\r\n                })\r\n                message.error('There is no case sheet for this pet')\r\n              }\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n            message.error('Failed to obtain case list')\r\n            console.log(err);\r\n          })\r\n        return\r\n      }\r\n\r\n\r\n\r\n\r\n      console.log('我是普通医生，不带集成的');\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      let params = {\r\n        petId: this.state.petId,\r\n        doctorId: storage.userId,\r\n        temperature: this.state.Temp,\r\n        petVitalTypeId: petVitalId,\r\n        memo: this.state.notes\r\n      }\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n\r\n      fetchRequest('/exam/addClamantPetExam', 'POST', params)\r\n        .then(res => {\r\n          console.log('res', res);\r\n          if (res.flag === true) {\r\n\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n\r\n            let copyTemp = this.state.Temp\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n            })\r\n            temp15 = 0\r\n            switch (storage.lastOrganization) {\r\n              case '3'://vetspire\r\n                this.updataVetspire(copyTemp)\r\n\r\n                break;\r\n\r\n              case '4'://ezyVet\r\n                this.updataEzyvet(copyTemp)\r\n                break;\r\n\r\n              default: message.success('Data successfully saved in Mella')\r\n                this.setState({\r\n                  isWeightSave: false\r\n                })\r\n                break;\r\n            }\r\n            this._getHistory()\r\n          } else {\r\n            message.error('Save failed')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          message.error('Save failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  updataEzyvet = (Temp) => {\r\n    let { patientId } = this.state\r\n\r\n    let params = {\r\n      id: patientId\r\n    }\r\n    // this.setState({\r\n    //   isWeightSave: false\r\n    // })\r\n    console.log('入参:', params, storage.connectionKey);\r\n\r\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\r\n      .then(res => {\r\n        console.log('宠物最新病历单获取:', res);\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            console.log('最新病历单获取失败');\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let temperature = Temp\r\n          // if (this.state.units === '℉') {\r\n          //   temperature = ((Temp - 32) / 1.8).toFixed(1)\r\n          // } else {\r\n          //   temperature = Temp\r\n          // }\r\n          let parames1 = {\r\n            consult_id,\r\n            temperature\r\n          }\r\n          let petVitalId = null\r\n          switch (this.state.petVitalTypeId) {\r\n            case '01': petVitalId = 1; break;\r\n            case '02': petVitalId = 3; break;\r\n            case '03': petVitalId = 4; break;\r\n            default: petVitalId = 1; break;\r\n          }\r\n          console.log('入参', parames1, storage.connectionKey);\r\n          fetchRequest2(`/EzyVet/healthstatus/${paramId}/${petVitalId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\r\n            .then(res => {\r\n              console.log('更新ezyvet的体重', res);\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              if (res.flag) {\r\n                console.log('更新ezyvet的体重成功');\r\n                message.success('Data successfully saved in EzyVet')\r\n\r\n                //Toast.success('Temperature update successful')\r\n              } else {\r\n                //Toast.fail('Temperature update failed')\r\n                console.log('更新ezyvet的体重失败');\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              //Toast.fail('Temperature update failed')\r\n              console.log('更新ezyvet的体重', err);\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          //Toast.fail('Temperature update failed')\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n        console.log('宠物最新病历单获取', err);\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n\r\n        //Toast.fail('Temperature update failed')\r\n      })\r\n\r\n\r\n  }\r\n  updataVetspire = (Temp) => {\r\n    let datas = {\r\n      APIkey: storage.connectionKey,\r\n      patientId: this.state.patientId\r\n    }\r\n    console.log('更新vetspire的数值', datas);\r\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag) {\r\n          let data = res.data.encounters[0].vitals\r\n          let encountersId = data.id\r\n\r\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\r\n          // if (this.state.units === '℉') {\r\n          //   temperature = Temp\r\n          // } else {\r\n          //   temperature = (Temp * 1.8 + 32).toFixed(1)\r\n          // }\r\n          let params = {\r\n            vitalId: encountersId,\r\n            APIkey: storage.connectionKey,\r\n            temp: temperature\r\n          }\r\n          console.log('写数据到vetspire', params);\r\n          fetchRequest2(`/VetSpire/updateVitalsTemperatureByVitalId`, \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('写数据到vetspire', res);\r\n              if (res.flag) {\r\n                console.log('vetspire写成功');\r\n                message.success('Data successfully saved in Vetspire')\r\n              } else {\r\n                message.error('Data failed saved in Vetspire')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('vetspire写失败', err);\r\n              message.error('Data failed saved in Vetspire')\r\n              //Toast.fail('Temperature update failed')\r\n            })\r\n        } else {\r\n          console.log('最新病历单获取失败');\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n\r\n          //Toast.fail('Temperature update failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n\r\n\r\n        console.log('最新病历单获取失败', err);\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n      })\r\n\r\n  }\r\n\r\n\r\n  _btnEndTime = () => {\r\n    let { endMeasure, isconnected, initFlog } = this.state\r\n    if (initFlog === false) {\r\n      return\r\n    }\r\n\r\n    if (endMeasure === true) {\r\n      // if (isconnected === true) {\r\n      return (\r\n        <>\r\n          <div className=\"btn\"\r\n            style={{ marginTop: mTop(30) }}\r\n          >\r\n            <div className=\"btn1\"\r\n              style={{ width: px(120), height: mTop(35) }}\r\n              onClick={() => {\r\n                console.log('点击了Discard');\r\n                let hardSet = electronStore.get('hardwareConfiguration') ||{}\r\n                let countdown = hardSet.is15 ? 15 : 30\r\n                this.setState({\r\n                  endMeasure: false,\r\n                  Temp: 0,\r\n                  progress: 0,\r\n                  countdown,\r\n                  initFlog: false\r\n                })\r\n                temp15 = 0\r\n              }}\r\n            >\r\n              Discard\r\n            </div>\r\n\r\n            <div className=\"btn1\"\r\n              style={{ width: px(120), height: mTop(35) }}\r\n              onClick={() => {\r\n                this.timer && clearTimeout(this.timer)\r\n                this.timer = setTimeout(() => {\r\n                  this._save()\r\n                  clearTimeout(this.timer)\r\n                }, 500);\r\n              }}>\r\n              Save\r\n            </div>\r\n          </div>\r\n          {isconnected === true ? null : <p style={{ fontSize: px(30), color: '#3B3A3A', marginTop: mTop(10) }}> disconnected</p>}\r\n        </>\r\n      )\r\n    } else {\r\n      if (isconnected === true) {\r\n        if (this.state.isEarMeasure) {\r\n          return\r\n        }\r\n        return (\r\n          <div className=\"time\"\r\n            style={{ fontSize: px(32), marginTop: mTop(35) }}\r\n          >\r\n            <p>{`Measuring time  ${this.state.countdown}  s`}</p>\r\n          </div>\r\n        )\r\n      } else {\r\n        return (\r\n          null\r\n        )\r\n      }\r\n    }\r\n  }\r\n  _crialText = () => {\r\n    let { endMeasure, isMeasure, isconnected, Temp } = this.state\r\n    Temp = parseFloat(Temp)\r\n\r\n    let temp = this.state.units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\r\n    let text = '', temColor = ''\r\n    if (Temp > 15) {\r\n      if (Temp > 39) {\r\n        text = 'High'\r\n        temColor = '#E1206D'\r\n      } else if (Temp < 31) {\r\n        text = 'Low'\r\n        temColor = '#47C2ED'\r\n\r\n      } else {\r\n        text = 'Normal'\r\n        temColor = '#78D35D'\r\n      }\r\n    }\r\n    if (endMeasure === true) {\r\n      if (`${Temp}` === 'NaN' || `${Temp}` === '0') {\r\n        if (isconnected === true) {\r\n\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\r\n          )\r\n        }\r\n        else {\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\r\n          )\r\n        }\r\n      } else {\r\n\r\n\r\n        return (\r\n          <div style={{ color: temColor }}>\r\n            <span >{temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\r\n            <span style={{ fontSize: px(22) }}>{text}</span>\r\n          </div>\r\n        )\r\n      }\r\n    } else {\r\n      if (isMeasure === true) {\r\n        return (\r\n          <>\r\n            <span style={{ fontSize: px(36), color: temColor, display: 'flex', alignItems: 'center' }}>\r\n              {temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\r\n          </>\r\n        )\r\n      } else {\r\n        if (this.state.isEarMeasure) {\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>measuring</p>\r\n          )\r\n        } else {\r\n          if (isconnected === true) {\r\n\r\n            return (\r\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\r\n            )\r\n          }\r\n          else {\r\n            return (\r\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\r\n            )\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n  _modal = () => {\r\n    let that = this\r\n\r\n    function save () {\r\n      let datas = {\r\n        memo: that.state.memo\r\n      }\r\n\r\n      console.log('入参：', datas, that.state.editId);\r\n      fetchRequest(`/pet/updatePetExam/${that.state.editId}`, 'POST', datas)\r\n        .then(res => {\r\n          console.log(res);\r\n          that.setState({\r\n            visible: false,\r\n          })\r\n          that._getHistory()\r\n\r\n        })\r\n        .catch(err => {\r\n          that.setState({\r\n            spin: false\r\n          })\r\n          console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, visible } = this.state\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Edit Note\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onCancel={this.handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Notes</p>\r\n            {/* <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n              }}\r\n             \r\n            /> */}\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"40\"\r\n              style={{ textIndent: '10px' }}\r\n              value={that.state.memo}\r\n              onChange={(val) => {\r\n                that.setState({\r\n                  memo: val.target.value\r\n                })\r\n              }}\r\n\r\n            >\r\n            </textarea>\r\n          </div>\r\n          <div className=\"btn\" style={{ width: '60%' }} onClick={save}>Save Changes</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n    )\r\n\r\n  }\r\n\r\n  biggie = () => {\r\n    let { isHaveBigieDate, biggieDate, sendWeight, impedance, units } = this.state\r\n    if (isHaveBigieDate) {\r\n      let bodyFat = impedance ? 20 : null\r\n      let score = impedance ? 5 : null\r\n\r\n      let isIbs = units === '℃' ? false : true\r\n      let weight = units === '℃' ? sendWeight : biggieDate\r\n\r\n      let issave = storage.connectionKey ? false : true\r\n      return (\r\n        <Biggie\r\n          issave={issave}\r\n          weight={`${weight}`}\r\n          onPress={this._saveWeight}\r\n          bodyFat={bodyFat}\r\n          score={score}\r\n          impedance={impedance}\r\n          isIbs={isIbs}\r\n          discardOnPress={() => {\r\n            this.setState({\r\n              isHaveBigieDate: false\r\n            })\r\n            keyboardBiggieFlog = false\r\n            sameBiggieNum = 0\r\n          }}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>\r\n          <h1 style={{ fontWeight: 'bold', width: '80%', textAlign: 'center', }}>Ready, place pet onto scale</h1>\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  _saveWeight = () => {\r\n    console.log('开始去保存了', storage.lastOrganization, storage.connectionKey);\r\n\r\n\r\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n    if (storage.lastOrganization === '34') {\r\n      let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\r\n\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n\r\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n        .then(res => {\r\n          console.log('---', res);\r\n          if (res.errors) {\r\n            message.error('Failed to obtain case list')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          } else {\r\n            let { vitals } = res.data.patient\r\n            let vitalArr = vitals.data\r\n            if (vitalArr.length > 0) {\r\n              vitalArr.sort((a, b) => {\r\n                return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n              })\r\n\r\n              console.log('-----', vitalArr);\r\n\r\n\r\n              let params = {}\r\n              if (vitalArr[0].temperature && vitalArr[0].temperature.value) {\r\n                params = {\r\n                  query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${this.state.biggieDate}}\r\n                            temperature:{value:${vitalArr[0].temperature.value}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n              } else {\r\n                params = {\r\n                  query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${this.state.biggieDate}}\r\n                            \r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n              }\r\n\r\n              console.log('---入参---', params);\r\n\r\n\r\n\r\n              fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  if (res.errors) {\r\n                    this.setState({\r\n                      isWeightSave: false\r\n                    })\r\n                    message.error('Data saving failed')\r\n                  } else {\r\n                    this.setState({\r\n                      isHaveBigieDate: false,\r\n                      isWeightSave: false\r\n                    })\r\n                    keyboardBiggieFlog = false\r\n                    sameBiggieNum = 0\r\n                    message.success('Data saved successfully')\r\n                  }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    isWeightSave: false\r\n                  })\r\n                  message.error('Data saving failed')\r\n                  console.log(err);\r\n                })\r\n\r\n\r\n            } else {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              message.error('There is no case sheet for this pet')\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error('Failed to obtain case list')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          console.log(err);\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      return\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n    let fat = this.state.impedance ? 20 : null\r\n    let bodyConditionScore = this.state.impedance ? 5 : null\r\n\r\n    let params = {\r\n      petId: this.state.petId,\r\n      doctorId: storage.userId,\r\n      weight: this.state.sendWeight,\r\n      memo: this.state.notes,\r\n      fat,\r\n      bodyConditionScore\r\n    }\r\n    console.log('---体重保存入参--：', params);\r\n    fetchRequest('/exam/addClamantPetExam', 'POST', params)\r\n      .then(res => {\r\n        console.log('res', res);\r\n        if (res.flag === true) {\r\n          switch (storage.lastOrganization) {\r\n            case '3'://vetspire\r\n              this.updataWeightVetspire()\r\n\r\n              break;\r\n\r\n            case '4'://ezyVet\r\n              this.updataWeightEzyvet()\r\n              break;\r\n\r\n            default:\r\n              this.setState({\r\n                isHaveBigieDate: false,\r\n                isWeightSave: false\r\n              })\r\n              keyboardBiggieFlog = false\r\n              sameBiggieNum = 0\r\n              message.success('Data successfully saved in Mella')\r\n              break;\r\n          }\r\n\r\n          this._getHistory()\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  updataWeightVetspire = () => {\r\n    console.log('保存到vetspire');\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n\r\n    let datas = {\r\n      APIkey: storage.connectionKey,\r\n      patientId: this.state.patientId\r\n    }\r\n    console.log('更新vetspire的数值', datas);\r\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag) {\r\n\r\n          let data = res.data.encounters[0].vitals\r\n          let encountersId = data.id\r\n\r\n          let params = {\r\n            vitalId: encountersId,\r\n            APIkey: storage.connectionKey,\r\n            weight: this.state.biggieDate\r\n          }\r\n          console.log('写数据到vetspire', params);\r\n          fetchRequest4(`/VetSpire/vetspireUpdateWeight`, \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n\r\n              console.log('写数据到vetspire', res);\r\n              if (res.flag) {\r\n                console.log('vetspire写成功');\r\n                this.setState({\r\n                  isHaveBigieDate: false\r\n                })\r\n                keyboardBiggieFlog = false\r\n                sameBiggieNum = 0\r\n                message.success('Data successfully saved in Vetspire')\r\n              } else {\r\n                message.error('Data failed saved in Vetspire')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('vetspire写失败', err);\r\n              message.error('Data failed saved in Vetspire')\r\n              //Toast.fail('Temperature update failed')\r\n            })\r\n        } else {\r\n          console.log('最新病历单获取失败');\r\n          message.error('Failed to obtain the latest medical record')\r\n\r\n          // Toast.fail('Update failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n        console.log('最新病历单获取失败', err);\r\n        message.error('Failed to obtain the latest medical record')\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n      })\r\n\r\n  }\r\n  updataWeightEzyvet = () => {\r\n    console.log('保存到ezyVet');\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n\r\n    let { patientId } = this.state\r\n\r\n    let params = {\r\n      id: patientId\r\n    }\r\n    console.log('入参:', params, storage.connectionKey);\r\n\r\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\r\n      .then(res => {\r\n        console.log('宠物最新病历单获取:', res);\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            console.log('最新病历单获取失败');\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let parames1 = {\r\n            consult_id,\r\n            weight: this.state.sendWeight\r\n          }\r\n\r\n          console.log('入参', parames1, storage.connectionKey);\r\n          fetchRequest4(`/EzyVet/ezyvetUpdateWeight/${paramId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\r\n            .then(res => {\r\n              console.log('更新ezyvet的体重', res);\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              if (res.flag) {\r\n                console.log('更新ezyvet的体重成功');\r\n                message.success('Data successfully saved in EzyVet')\r\n                this.setState({\r\n                  isHaveBigieDate: false\r\n                })\r\n                keyboardBiggieFlog = false\r\n                sameBiggieNum = 0\r\n                //Toast.success('Temperature update successful')\r\n              } else {\r\n                //Toast.fail('Temperature update failed')\r\n                console.log('更新ezyvet的体重失败');\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              //Toast.fail('Temperature update failed')\r\n              console.log('更新ezyvet的体重', err);\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n\r\n          //Toast.fail('Temperature update failed')\r\n          message.error('Failed to obtain the latest medical record')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('宠物最新病历单获取', err);\r\n        message.error('Failed to obtain the latest medical record')\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n        //Toast.fail('Temperature update failed')\r\n      })\r\n\r\n\r\n  }\r\n\r\n\r\n  render () {\r\n    const { closeColor, closebgc, minbgc, isWeightSave } = this.state\r\n    // console.dir(this.input1)\r\n    // try {\r\n    //   console.log(this.input1.checked)\r\n    // } catch (error) {\r\n\r\n    // }\r\n\r\n    return (\r\n      <div id=\"clinicalMeasure\">\r\n\r\n        <div style={{ height: '60%', }}>\r\n          <div className=\"heard\">\r\n            <Heard\r\n              onSearch={(data) => {\r\n                console.log('搜索到的宠物', data);\r\n                let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                  h2tLength, torsoLength } = data\r\n\r\n                l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n                neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n                upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n                lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n                h2tLength = h2tLength ? `${h2tLength}` : ''\r\n                torsoLength = torsoLength ? `${torsoLength}` : ''\r\n                let weight = data.weight\r\n                if (weight && weight !== 'unknown') {\r\n                  weight = parseFloat(weight).toFixed(1)\r\n                }\r\n                let breedName = data.breed\r\n                if (!breedName) {\r\n                  breedName = 'unknown'\r\n                }\r\n                switch (breedName) {\r\n                  case 'defaultdog':\r\n                    breedName = 'Dog'\r\n\r\n                    break;\r\n                  case 'defaultother':\r\n                    breedName = 'Other'\r\n\r\n                    break;\r\n                  case 'defaultcat':\r\n                    breedName = 'Cat'\r\n                    break;\r\n\r\n                }\r\n                console.log('-----------', weight);\r\n                this.setState({\r\n                  petName: data.petName,\r\n                  owner: data.owner,\r\n                  breedName,\r\n                  weight,\r\n                  age: data.age,\r\n                  patientId: data.patientId,\r\n                  petId: data.petId,\r\n                  itemIndex: 1,\r\n                  l2rarmDistance,\r\n                  neckCircumference,\r\n                  upperTorsoCircumference,\r\n                  lowerTorsoCircumference,\r\n                  h2tLength,\r\n                  torsoLength,\r\n                  isWalkIn: false\r\n                }, () => {\r\n                  this._getHistory()\r\n                })\r\n\r\n              }}\r\n              menu8Click={() => {\r\n                switch (storage.identity) {\r\n                  case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n                  case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                    break;\r\n                  case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n\r\n                  default:\r\n                    break;\r\n                }\r\n              }}\r\n              onReturn={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n\r\n          {/* 宠物信息与圆环部分部分 */}\r\n          <div className='clinical_top'\r\n          // style={{ height: mTop(480) }}\r\n          >\r\n            {this._topLeft()}\r\n            <div className=\"r\"\r\n\r\n            >\r\n              {\r\n                this.state.devicesType === 'mella' ?\r\n                  this._ciral() :\r\n                  this.biggie()\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        {/* 底部宠物信息 */}\r\n        {this._foot()}\r\n        {this._modal()}\r\n        {/* {this._table()} */}\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n\r\n                  })\r\n                  num07 = 0\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n\r\n                  })\r\n                  num07 = 0\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n\r\n        <MyModal\r\n          visible={isWeightSave}\r\n          element={\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n              <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n                <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n              </div>\r\n              <p>\r\n                Data is being saved\r\n              </p>\r\n            </div>\r\n          }\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\AddYuding.jsx",["1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newWorkplace\\NewWorkplace.jsx",["1212","1213","1214","1215","1216"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  Input,\r\n  Form,\r\n  Select,\r\n  Space,\r\n  Modal,\r\n\r\n  message\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './newWorkplace.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest2 } from './../../../utils/FetchUtil2'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport countryList from './../../../utils/areaCode/country';\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\n\r\nconst { Option } = Select;\r\nexport default class NewWorkplace extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    phone: '',\r\n    practiceName: '',\r\n    address: '',\r\n    country: '',\r\n    city: '',\r\n    state: '',\r\n    zipcode: '',\r\n    address1: '',\r\n    address2: '',\r\n    workplaceTypeId: 1,\r\n    email: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('middle')\r\n\r\n  }\r\n\r\n\r\n\r\n  _next = () => {\r\n    let { practiceName, workplaceTypeId, code, phone, country, city, state, address1, address2, zipcode, email } = this.state\r\n    message.destroy()\r\n\r\n    if (!practiceName) {\r\n      message.error('Please enter an Practice name', 3)\r\n      return;\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the contact email', 3)\r\n      return;\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    if (!phone) {\r\n      message.error('Please enter the phone number', 3)\r\n      return;\r\n    }\r\n    if (!country) {\r\n      message.error('Please enter country name', 3)\r\n      return;\r\n    }\r\n    if (!city) {\r\n      message.error('Please enter the city name', 3)\r\n      return;\r\n    }\r\n    if (!address1) {\r\n      message.error('Please enter address1', 3)\r\n      return;\r\n    }\r\n    if (!address2) {\r\n      message.error('Please enter address2', 3)\r\n      return;\r\n    }\r\n    if (!zipcode) {\r\n      message.error('Please enter the postal code', 3)\r\n      return;\r\n    }\r\n\r\n\r\n    let params = {\r\n      organizationId: temporaryStorage.logupSelectOrganization.organizationId,\r\n      workplaceName: practiceName,\r\n      workplaceTypeId,\r\n      address1,\r\n      address2,\r\n      phone: `+${code}${phone}`,\r\n      country,\r\n      city,\r\n      state,\r\n      zipcode,\r\n      email\r\n    }\r\n\r\n    console.log('入参信息：', params);\r\n    let { userId } = temporaryStorage.logupSuccessData\r\n    fetchRequest(`/workplace/addWorkplace/${userId}`, \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.code === 20000) {\r\n          this.props.history.push('/uesr/logUp/FindMyWorkplace')\r\n        } else if (res.code === 11029) {\r\n          message.error('The workplace has been registered!', 3)\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render () {\r\n\r\n    let { disabled, visible, bounds, address1, address2, phone, practiceName, country, city, state, zipcode, workplaceTypeId, email } = this.state\r\n    return (\r\n      <div id=\"newWorkplace\" >\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.goBack()}\r\n        />\r\n        <div className=\"text\">\r\n          New Practice\r\n        </div>\r\n        <div className=\"text1\">Tell us more about the place you will be using Mella!</div>\r\n        <div className=\"form\">\r\n          <div className=\"item\">\r\n            <div className=\"l\">\r\n              <p>Practice Name*</p>\r\n              <input\r\n                type=\"text\"\r\n                value={practiceName}\r\n                placeholder={'Practice Name'}\r\n                onChange={(value) => {\r\n                  let data = value.target.value\r\n                  this.setState({\r\n                    practiceName: data\r\n                  })\r\n                }}\r\n              />\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"item\">\r\n\r\n\r\n\r\n            <div className=\"l\">\r\n              <p>Contact Email*</p>\r\n              <input\r\n                type=\"Email\"\r\n                value={email}\r\n                placeholder={'Contact Email'}\r\n                onChange={(value) => {\r\n                  let data = value.target.value\r\n                  this.setState({\r\n                    email: data\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n\r\n            <div className=\"l\">\r\n              <p>Type of Practice*</p>\r\n              <div className=\"select\" >\r\n                <Select\r\n                  value={workplaceTypeId}\r\n                  style={{ width: '100%', borderRadius: '100px' }}\r\n                  onChange={(value) => { this.setState({ workplaceTypeId: value }) }}\r\n                >\r\n                  <Option value={1}>practice </Option>\r\n                  <Option value={2}>clinic </Option>\r\n                  <Option value={3}>shelter</Option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"l\">\r\n              <ul id=\"list\">\r\n                {countryList.map((item, index) => {\r\n                  let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                  return (\r\n                    <li key={index}>\r\n                      <div key={index}\r\n                        style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                        onClick={() => {\r\n                          console.log(item, index);\r\n                          this.setState({\r\n                            code: item.code,\r\n                            imgArrayIndex: index\r\n                          })\r\n                          document.getElementById('list').style.display = \"none\"\r\n                        }}\r\n                      >\r\n                        <img src={url} alt=\"\" />\r\n                        <p >{`${item.en}   +${item.code}`}</p>\r\n                      </div>\r\n                    </li>\r\n                  )\r\n                })}\r\n              </ul>\r\n\r\n              <p>Contact Number*</p>\r\n              <div className='phone'>\r\n                <div\r\n                  style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                  onClick={() => {\r\n                    document.getElementById('list').style.display = \"block\"\r\n                  }}\r\n                >\r\n                  <img style={{ zIndex: '888' }}\r\n                    src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                  />\r\n                  <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                </div>\r\n\r\n\r\n                <input\r\n                  type=\"Phone\"\r\n                  value={phone}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      phone: data.replace(/[^\\-?\\d]/g, '')\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"item\">\r\n            <div className=\"l\">\r\n              <p>Address*</p>\r\n              <div className=\"inputs\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={country}\r\n                  placeholder={'country'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      country: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={city}\r\n                  placeholder={'city'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      city: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={state}\r\n                  placeholder={'state'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      state: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={address1}\r\n                  placeholder={'address1'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      address1: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={address2}\r\n                  placeholder={'address2'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      address2: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={zipcode}\r\n                  placeholder={'zipcode'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      zipcode: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* 按钮 */}\r\n          <div className=\"btn\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          title={\r\n            <div\r\n              style={{\r\n                width: '100%',\r\n                cursor: 'move',\r\n                height: '20px',\r\n                fontWeight: '700'\r\n              }}\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n            >\r\n              remind\r\n            </div>\r\n          }\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          footer={[\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false,\r\n                  email: ''\r\n                })\r\n              }}\r\n            >Cancel</button>,\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false\r\n                })\r\n                this.props.history.replace('/uesr/logUp/FindMyOrganization')\r\n              }}\r\n            >Join</button>\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n        >\r\n          <div id='vetPrifileModal'>\r\n\r\n            <p>This organization has already been registered, do you want to join?</p>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\petAndParents\\PetAndParents.jsx",["1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from '../../../utils/button/Button'\r\nimport electronStore from '../../../utils/electronStore'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport parent from './../../../assets/img/parent.png'\r\nimport dog from '../../../assets/images/reddog.png'\r\nimport cat from '../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport moment from 'moment'\r\nimport './petAndParents.less'\r\nimport { parseGeoJSON } from 'echarts'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class PetAndParents extends Component {\r\n\r\n  state = {\r\n    parentList: [],       //宠物主人列表\r\n    petList: [],          //宠物列表\r\n    loading: false,       //加载中\r\n    parentSearchArr: [],  //搜索后的宠物主人列表\r\n    petSearchArr: [],     //搜索后的宠物列表\r\n    searchText: '',        //搜索文本\r\n    parentAndPetList: [],  //宠物主人下的所有宠物,\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      offset: 0,\r\n      size: 500,\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    fetchRequest(`/petall/pet/${storage.lastOrganization}/petall`, 'POST', params)\r\n      .then(res => {\r\n        console.log('查询到的宠物列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = []\r\n          let list = res.data.list\r\n          let owerList = []\r\n          let parentAndPetList = []\r\n          for (let i = 0; i < list.length; i++) {\r\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\r\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: petName,\r\n              petId,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              type: 'pet',\r\n              patientId,\r\n              petBirthday: birthday,\r\n              breedName,\r\n              gender\r\n            }\r\n            data.push(json)\r\n            if (userId) {\r\n              let flogNum = -1\r\n\r\n              for (let i = 0; i < owerList.length; i++) {\r\n                let ower = owerList[i]\r\n                if (ower.userId === userId) {\r\n                  flogNum = i\r\n                  break;\r\n                }\r\n\r\n              }\r\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\r\n                let owerJson = {\r\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n                }\r\n                owerList.push(owerJson)\r\n                let parentAndPetJson = {\r\n                  parent: owerJson,\r\n                  pets: [json]\r\n                }\r\n                // console.log('-----', parentAndPetJson);\r\n                parentAndPetList.push(parentAndPetJson)\r\n              } else {\r\n                parentAndPetList[flogNum].pets.push(json)\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            // if (userId) {\r\n            //   let sameFlog = owerList.some((ower => {\r\n            //     return ower.userId === userId\r\n            //   }))\r\n            //   if (!sameFlog) {\r\n            //     let owerJson = {\r\n            //       userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n            //     }\r\n            //     owerList.push(owerJson)\r\n            //   }\r\n            // }\r\n          }\r\n          // console.log(parentAndPetList);\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            petList: data,\r\n            parentList: owerList,\r\n            parentAndPetList\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = (value) => {\r\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\r\n    let data = []\r\n    if (value === 'parent') {\r\n      if (searchText.length > 0) {\r\n        data = parentSearchArr\r\n      } else {\r\n        data = parentList\r\n      }\r\n    } else {\r\n      if (searchText.length > 0) {\r\n        data = petSearchArr\r\n      } else {\r\n        data = petList\r\n      }\r\n    }\r\n\r\n    let options = data.map((item, index) => {\r\n      let { speciesId, url, userImageUrl, patientId, petId, name } = item\r\n      let images = null\r\n      if (value === 'parent') {\r\n        images = `url(${userImageUrl}?download=0&width=150)`\r\n        if (!userImageUrl) {\r\n          images = `url(${parent})`\r\n        }\r\n      } else {\r\n        images = `url(${url}?download=0&width=150)`\r\n        if (!url) {\r\n          switch (speciesId) {\r\n            case 1: images = `url(${cat})`\r\n              break;\r\n            case 2: images = `url(${dog})`\r\n              break\r\n            default: images = `url(${other})`\r\n              break;\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20) }}\r\n          onClick={() => {\r\n            if (item.type !== 'pet') {\r\n              // console.log('跳转到宠物用户详情页', item,);\r\n              let params = []\r\n              for (let i = 0; i < parentAndPetList.length; i++) {\r\n                if (item.userId === parentAndPetList[i].parent.userId) {\r\n\r\n                  params = parentAndPetList[i]\r\n                  break\r\n                }\r\n\r\n              }\r\n\r\n\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', parent: params })\r\n            } else {\r\n              console.log(item);\r\n              this.props.history.push({ pathname: '/page9', participate: { patientId, petName: name, petId } })\r\n\r\n            }\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 6) {\r\n      liStyle = { height: px(560), overflowY: 'auto' }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { parentList, petList } = this.state\r\n    console.log(parentList, petList);\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n    for (let i = 0; i < parentList.length; i++) {\r\n      let petName = parentList[i].name.toLowerCase() || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        parentSearchData.push(parentList[i])\r\n      }\r\n    }\r\n\r\n    let petSearchData = []\r\n    for (let i = 0; i < petList.length; i++) {\r\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\r\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\r\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        petSearchData.push(petList[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      petSearchArr: petSearchData,\r\n      parentSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"PetAndParents\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n            onSearch={(data) => {\r\n\r\n              storage.doctorExam = JSON.stringify(data)\r\n\r\n              storage.doctorList = JSON.stringify(this.state.data)\r\n              if (storage.isClinical === 'true') {\r\n                this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n              } else {\r\n                this.props.history.push({ pathname: '/page10', })\r\n              }\r\n            }}\r\n            menu8Click={() => {\r\n              console.log('--', storage.identity, storage.doctorList);\r\n              switch (storage.identity) {\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <h1 style={{ fontSize: px(38) }}>{`Pet & Parents Profile Management`}</h1>\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n          <div className=\"btns\">\r\n            <div className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}>\r\n              + New Parent\r\n            </div>\r\n            <div\r\n              className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}\r\n              onClick={() => {\r\n                this.props.history.push('/pet/doctorAddPet')\r\n              }}\r\n\r\n            >\r\n              + New Pet\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"lists\">\r\n            <div className=\"listsL\">\r\n              {this.list('parent')}\r\n            </div>\r\n\r\n            <div className=\"listsL\">\r\n              {this.list('pet')}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",["1229","1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\Fetch_token.js",["1251","1252","1253","1254"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\home\\Home.jsx",["1255","1256"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\ishavePMS\\IsHavePMS.jsx",["1257","1258","1259"],{"ruleId":"1260","severity":1,"message":"1261","line":3,"column":10,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1264","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":17},{"ruleId":"1265","replacedBy":"1266"},{"ruleId":"1267","replacedBy":"1268"},{"ruleId":"1265","replacedBy":"1269"},{"ruleId":"1267","replacedBy":"1270"},{"ruleId":"1260","severity":1,"message":"1271","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1272","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1273","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1274","line":17,"column":10,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1275","line":3,"column":5,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1276","line":49,"column":29,"nodeType":"1262","messageId":"1263","endLine":49,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1277","line":49,"column":38,"nodeType":"1262","messageId":"1263","endLine":49,"endColumn":49},{"ruleId":"1260","severity":1,"message":"1278","line":49,"column":57,"nodeType":"1262","messageId":"1263","endLine":49,"endColumn":68},{"ruleId":"1279","severity":1,"message":"1280","line":243,"column":33,"nodeType":"1281","messageId":"1282","endLine":243,"endColumn":35},{"ruleId":"1279","severity":1,"message":"1280","line":243,"column":92,"nodeType":"1281","messageId":"1282","endLine":243,"endColumn":94},{"ruleId":"1279","severity":1,"message":"1280","line":243,"column":130,"nodeType":"1281","messageId":"1282","endLine":243,"endColumn":132},{"ruleId":"1260","severity":1,"message":"1283","line":6,"column":3,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1284","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1285","line":8,"column":3,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1286","line":15,"column":10,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1287","line":15,"column":16,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1272","line":17,"column":10,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1288","line":17,"column":32,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1289","line":17,"column":46,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1290","line":18,"column":10,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":22},{"ruleId":"1265","replacedBy":"1291"},{"ruleId":"1267","replacedBy":"1292"},{"ruleId":"1260","severity":1,"message":"1285","line":2,"column":60,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":64},{"ruleId":"1260","severity":1,"message":"1293","line":3,"column":8,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1289","line":6,"column":32,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1294","line":31,"column":9,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1295","line":33,"column":7,"nodeType":"1262","messageId":"1263","endLine":33,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1296","line":38,"column":5,"nodeType":"1262","messageId":"1263","endLine":38,"endColumn":8},{"ruleId":"1297","severity":1,"message":"1298","line":75,"column":9,"nodeType":"1299","messageId":"1282","endLine":75,"endColumn":15},{"ruleId":"1300","severity":1,"message":"1301","line":116,"column":9,"nodeType":"1302","messageId":"1303","endLine":122,"endColumn":10},{"ruleId":"1304","severity":1,"message":"1305","line":129,"column":51,"nodeType":"1306","messageId":"1307","endLine":129,"endColumn":53},{"ruleId":"1304","severity":1,"message":"1305","line":168,"column":51,"nodeType":"1306","messageId":"1307","endLine":168,"endColumn":53},{"ruleId":"1260","severity":1,"message":"1308","line":277,"column":15,"nodeType":"1262","messageId":"1263","endLine":277,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1309","line":277,"column":53,"nodeType":"1262","messageId":"1263","endLine":277,"endColumn":59},{"ruleId":"1260","severity":1,"message":"1310","line":350,"column":15,"nodeType":"1262","messageId":"1263","endLine":350,"endColumn":28},{"ruleId":"1311","severity":1,"message":"1312","line":554,"column":29,"nodeType":"1313","endLine":554,"endColumn":77},{"ruleId":"1260","severity":1,"message":"1314","line":577,"column":9,"nodeType":"1262","messageId":"1263","endLine":577,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1315","line":578,"column":15,"nodeType":"1262","messageId":"1263","endLine":578,"endColumn":24},{"ruleId":"1311","severity":1,"message":"1312","line":612,"column":29,"nodeType":"1313","endLine":612,"endColumn":77},{"ruleId":"1300","severity":1,"message":"1301","line":643,"column":9,"nodeType":"1302","messageId":"1303","endLine":646,"endColumn":10},{"ruleId":"1300","severity":1,"message":"1301","line":648,"column":9,"nodeType":"1302","messageId":"1303","endLine":651,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1316","line":732,"column":17,"nodeType":"1262","messageId":"1263","endLine":732,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1317","line":732,"column":29,"nodeType":"1262","messageId":"1263","endLine":732,"endColumn":37},{"ruleId":"1260","severity":1,"message":"1318","line":732,"column":39,"nodeType":"1262","messageId":"1263","endLine":732,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1319","line":732,"column":47,"nodeType":"1262","messageId":"1263","endLine":732,"endColumn":55},{"ruleId":"1260","severity":1,"message":"1320","line":798,"column":97,"nodeType":"1262","messageId":"1263","endLine":798,"endColumn":102},{"ruleId":"1260","severity":1,"message":"1321","line":798,"column":135,"nodeType":"1262","messageId":"1263","endLine":798,"endColumn":157},{"ruleId":"1260","severity":1,"message":"1322","line":3,"column":3,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1284","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1323","line":10,"column":8,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1290","line":12,"column":10,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1272","line":8,"column":10,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1288","line":8,"column":32,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1287","line":14,"column":20,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":22},{"ruleId":"1265","replacedBy":"1324"},{"ruleId":"1267","replacedBy":"1325"},{"ruleId":"1260","severity":1,"message":"1293","line":8,"column":8,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1272","line":9,"column":10,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1286","line":20,"column":10,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1287","line":20,"column":16,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1314","line":24,"column":7,"nodeType":"1262","messageId":"1263","endLine":24,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1319","line":321,"column":21,"nodeType":"1262","messageId":"1263","endLine":321,"endColumn":29},{"ruleId":"1260","severity":1,"message":"1326","line":321,"column":31,"nodeType":"1262","messageId":"1263","endLine":321,"endColumn":37},{"ruleId":"1327","severity":1,"message":"1328","line":481,"column":36,"nodeType":"1313","endLine":481,"endColumn":71},{"ruleId":"1260","severity":1,"message":"1288","line":5,"column":32,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1286","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1329","line":30,"column":9,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1293","line":9,"column":8,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1272","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1330","line":10,"column":32,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1331","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1286","line":19,"column":10,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":14},{"ruleId":"1300","severity":1,"message":"1301","line":85,"column":25,"nodeType":"1302","messageId":"1303","endLine":114,"endColumn":26},{"ruleId":"1332","severity":1,"message":"1333","line":103,"column":29,"nodeType":"1334","messageId":"1335","endLine":104,"endColumn":68},{"ruleId":"1332","severity":1,"message":"1333","line":105,"column":29,"nodeType":"1334","messageId":"1335","endLine":112,"endColumn":39},{"ruleId":"1260","severity":1,"message":"1336","line":214,"column":42,"nodeType":"1262","messageId":"1263","endLine":214,"endColumn":58},{"ruleId":"1260","severity":1,"message":"1337","line":235,"column":29,"nodeType":"1262","messageId":"1263","endLine":235,"endColumn":42},{"ruleId":"1260","severity":1,"message":"1338","line":270,"column":49,"nodeType":"1262","messageId":"1263","endLine":270,"endColumn":63},{"ruleId":"1260","severity":1,"message":"1339","line":270,"column":65,"nodeType":"1262","messageId":"1263","endLine":270,"endColumn":79},{"ruleId":"1260","severity":1,"message":"1322","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":2,"column":17,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1341","line":2,"column":48,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":56},{"ruleId":"1260","severity":1,"message":"1342","line":2,"column":58,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1343","line":2,"column":63,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":66},{"ruleId":"1260","severity":1,"message":"1285","line":2,"column":68,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":72},{"ruleId":"1260","severity":1,"message":"1293","line":3,"column":8,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1289","line":6,"column":32,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1344","line":11,"column":8,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1345","line":12,"column":8,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1273","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1346","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1347","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1294","line":23,"column":9,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1348","line":24,"column":9,"nodeType":"1262","messageId":"1263","endLine":24,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1295","line":25,"column":7,"nodeType":"1262","messageId":"1263","endLine":25,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1349","line":28,"column":5,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1350","line":29,"column":5,"nodeType":"1262","messageId":"1263","endLine":29,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1296","line":30,"column":5,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1296","line":92,"column":61,"nodeType":"1262","messageId":"1263","endLine":92,"endColumn":64},{"ruleId":"1260","severity":1,"message":"1351","line":92,"column":66,"nodeType":"1262","messageId":"1263","endLine":92,"endColumn":75},{"ruleId":"1327","severity":1,"message":"1328","line":277,"column":15,"nodeType":"1313","endLine":283,"endColumn":16},{"ruleId":"1265","replacedBy":"1352"},{"ruleId":"1267","replacedBy":"1353"},{"ruleId":"1260","severity":1,"message":"1354","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1355","line":13,"column":8,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1340","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1356","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1357","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1358","line":20,"column":8,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1359","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1360","line":22,"column":8,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1348","line":32,"column":9,"nodeType":"1262","messageId":"1263","endLine":32,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1361","line":55,"column":11,"nodeType":"1262","messageId":"1263","endLine":55,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1362","line":55,"column":19,"nodeType":"1262","messageId":"1263","endLine":55,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1363","line":71,"column":9,"nodeType":"1262","messageId":"1263","endLine":71,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1364","line":154,"column":18,"nodeType":"1262","messageId":"1263","endLine":154,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1365","line":154,"column":29,"nodeType":"1262","messageId":"1263","endLine":154,"endColumn":37},{"ruleId":"1311","severity":1,"message":"1312","line":558,"column":19,"nodeType":"1313","endLine":565,"endColumn":61},{"ruleId":"1327","severity":1,"message":"1328","line":573,"column":19,"nodeType":"1313","endLine":581,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1286","line":14,"column":10,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1340","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":14},{"ruleId":"1297","severity":1,"message":"1366","line":48,"column":5,"nodeType":"1299","messageId":"1282","endLine":48,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1363","line":59,"column":9,"nodeType":"1262","messageId":"1263","endLine":59,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1363","line":95,"column":9,"nodeType":"1262","messageId":"1263","endLine":95,"endColumn":22},{"ruleId":"1304","severity":1,"message":"1305","line":213,"column":41,"nodeType":"1306","messageId":"1307","endLine":213,"endColumn":43},{"ruleId":"1304","severity":1,"message":"1305","line":226,"column":47,"nodeType":"1306","messageId":"1307","endLine":226,"endColumn":49},{"ruleId":"1260","severity":1,"message":"1367","line":397,"column":23,"nodeType":"1262","messageId":"1263","endLine":397,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1368","line":450,"column":21,"nodeType":"1262","messageId":"1263","endLine":450,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1369","line":3,"column":5,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":10},{"ruleId":"1279","severity":1,"message":"1370","line":94,"column":16,"nodeType":"1281","messageId":"1282","endLine":94,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1286","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1287","line":4,"column":20,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":22},{"ruleId":"1300","severity":1,"message":"1301","line":381,"column":9,"nodeType":"1302","messageId":"1303","endLine":388,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1371","line":589,"column":15,"nodeType":"1262","messageId":"1263","endLine":589,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1372","line":633,"column":17,"nodeType":"1262","messageId":"1263","endLine":633,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1373","line":808,"column":11,"nodeType":"1262","messageId":"1263","endLine":808,"endColumn":22},{"ruleId":"1374","severity":1,"message":"1375","line":997,"column":9,"nodeType":"1376","messageId":"1377","endLine":997,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1369","line":7,"column":5,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1378","line":20,"column":9,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":15},{"ruleId":"1279","severity":1,"message":"1370","line":23,"column":16,"nodeType":"1281","messageId":"1282","endLine":23,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":74,"column":16,"nodeType":"1281","messageId":"1282","endLine":74,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1379","line":2,"column":27,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1380","line":3,"column":10,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1286","line":8,"column":14,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1381","line":13,"column":10,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1287","line":13,"column":14,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1369","line":6,"column":5,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1378","line":12,"column":13,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":19},{"ruleId":"1279","severity":1,"message":"1370","line":15,"column":20,"nodeType":"1281","messageId":"1282","endLine":15,"endColumn":22},{"ruleId":"1279","severity":1,"message":"1370","line":59,"column":20,"nodeType":"1281","messageId":"1282","endLine":59,"endColumn":22},{"ruleId":"1382","severity":1,"message":"1383","line":1,"column":1,"nodeType":"1384","endLine":256,"endColumn":3},{"ruleId":"1260","severity":1,"message":"1385","line":15,"column":9,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1386","line":15,"column":26,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":32},{"ruleId":"1260","severity":1,"message":"1387","line":15,"column":34,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":39},{"ruleId":"1388","severity":1,"message":"1389","line":93,"column":6,"nodeType":"1390","endLine":93,"endColumn":22,"suggestions":"1391"},{"ruleId":"1260","severity":1,"message":"1356","line":11,"column":8,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":21},{"ruleId":"1388","severity":1,"message":"1392","line":44,"column":6,"nodeType":"1390","endLine":44,"endColumn":8,"suggestions":"1393"},{"ruleId":"1300","severity":1,"message":"1301","line":82,"column":5,"nodeType":"1302","messageId":"1303","endLine":101,"endColumn":6},{"ruleId":"1265","replacedBy":"1394"},{"ruleId":"1267","replacedBy":"1395"},{"ruleId":"1260","severity":1,"message":"1396","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1397","line":11,"column":3,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1285","line":13,"column":3,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1272","line":19,"column":3,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1288","line":20,"column":3,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1398","line":27,"column":8,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1399","line":31,"column":8,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1400","line":32,"column":8,"nodeType":"1262","messageId":"1263","endLine":32,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1401","line":33,"column":8,"nodeType":"1262","messageId":"1263","endLine":33,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1358","line":34,"column":8,"nodeType":"1262","messageId":"1263","endLine":34,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1359","line":35,"column":8,"nodeType":"1262","messageId":"1263","endLine":35,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1360","line":36,"column":8,"nodeType":"1262","messageId":"1263","endLine":36,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1402","line":40,"column":8,"nodeType":"1262","messageId":"1263","endLine":40,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1403","line":44,"column":8,"nodeType":"1262","messageId":"1263","endLine":44,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1404","line":54,"column":7,"nodeType":"1262","messageId":"1263","endLine":54,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1405","line":88,"column":17,"nodeType":"1262","messageId":"1263","endLine":88,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1406","line":100,"column":10,"nodeType":"1262","messageId":"1263","endLine":100,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1407","line":104,"column":10,"nodeType":"1262","messageId":"1263","endLine":104,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1408","line":107,"column":18,"nodeType":"1262","messageId":"1263","endLine":107,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1409","line":127,"column":11,"nodeType":"1262","messageId":"1263","endLine":127,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1410","line":440,"column":22,"nodeType":"1262","messageId":"1263","endLine":440,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1412","line":694,"column":34,"nodeType":"1413","messageId":"1414","endLine":694,"endColumn":35,"suggestions":"1415"},{"ruleId":"1411","severity":1,"message":"1416","line":699,"column":31,"nodeType":"1413","messageId":"1414","endLine":699,"endColumn":32,"suggestions":"1417"},{"ruleId":"1411","severity":1,"message":"1412","line":734,"column":34,"nodeType":"1413","messageId":"1414","endLine":734,"endColumn":35,"suggestions":"1418"},{"ruleId":"1411","severity":1,"message":"1416","line":739,"column":31,"nodeType":"1413","messageId":"1414","endLine":739,"endColumn":32,"suggestions":"1419"},{"ruleId":"1411","severity":1,"message":"1412","line":774,"column":34,"nodeType":"1413","messageId":"1414","endLine":774,"endColumn":35,"suggestions":"1420"},{"ruleId":"1411","severity":1,"message":"1416","line":779,"column":31,"nodeType":"1413","messageId":"1414","endLine":779,"endColumn":32,"suggestions":"1421"},{"ruleId":"1411","severity":1,"message":"1412","line":822,"column":34,"nodeType":"1413","messageId":"1414","endLine":822,"endColumn":35,"suggestions":"1422"},{"ruleId":"1411","severity":1,"message":"1416","line":827,"column":31,"nodeType":"1413","messageId":"1414","endLine":827,"endColumn":32,"suggestions":"1423"},{"ruleId":"1411","severity":1,"message":"1412","line":861,"column":34,"nodeType":"1413","messageId":"1414","endLine":861,"endColumn":35,"suggestions":"1424"},{"ruleId":"1411","severity":1,"message":"1416","line":866,"column":31,"nodeType":"1413","messageId":"1414","endLine":866,"endColumn":32,"suggestions":"1425"},{"ruleId":"1411","severity":1,"message":"1412","line":902,"column":34,"nodeType":"1413","messageId":"1414","endLine":902,"endColumn":35,"suggestions":"1426"},{"ruleId":"1411","severity":1,"message":"1416","line":907,"column":31,"nodeType":"1413","messageId":"1414","endLine":907,"endColumn":32,"suggestions":"1427"},{"ruleId":"1411","severity":1,"message":"1412","line":1448,"column":34,"nodeType":"1413","messageId":"1414","endLine":1448,"endColumn":35,"suggestions":"1428"},{"ruleId":"1411","severity":1,"message":"1416","line":1453,"column":31,"nodeType":"1413","messageId":"1414","endLine":1453,"endColumn":32,"suggestions":"1429"},{"ruleId":"1411","severity":1,"message":"1412","line":1469,"column":34,"nodeType":"1413","messageId":"1414","endLine":1469,"endColumn":35,"suggestions":"1430"},{"ruleId":"1411","severity":1,"message":"1416","line":1474,"column":31,"nodeType":"1413","messageId":"1414","endLine":1474,"endColumn":32,"suggestions":"1431"},{"ruleId":"1388","severity":1,"message":"1432","line":1692,"column":6,"nodeType":"1390","endLine":1692,"endColumn":23,"suggestions":"1433"},{"ruleId":"1388","severity":1,"message":"1434","line":1721,"column":6,"nodeType":"1390","endLine":1721,"endColumn":26,"suggestions":"1435"},{"ruleId":"1388","severity":1,"message":"1436","line":1727,"column":6,"nodeType":"1390","endLine":1727,"endColumn":18,"suggestions":"1437"},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1438","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1439","line":4,"column":8,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1440","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1441","line":19,"column":9,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1385","line":19,"column":18,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1442","line":22,"column":9,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1443","line":23,"column":19,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":28,"column":11,"nodeType":"1313","endLine":28,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1444","line":1,"column":38,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1396","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1445","line":6,"column":3,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1446","line":13,"column":3,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1385","line":42,"column":18,"nodeType":"1262","messageId":"1263","endLine":42,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1447","line":56,"column":10,"nodeType":"1262","messageId":"1263","endLine":56,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1448","line":56,"column":19,"nodeType":"1262","messageId":"1263","endLine":56,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":152,"column":11,"nodeType":"1313","endLine":152,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":154,"column":11,"nodeType":"1313","endLine":154,"endColumn":32},{"ruleId":"1311","severity":1,"message":"1312","line":158,"column":11,"nodeType":"1313","endLine":158,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":160,"column":11,"nodeType":"1313","endLine":160,"endColumn":32},{"ruleId":"1311","severity":1,"message":"1312","line":164,"column":11,"nodeType":"1313","endLine":164,"endColumn":30},{"ruleId":"1311","severity":1,"message":"1312","line":166,"column":11,"nodeType":"1313","endLine":166,"endColumn":33},{"ruleId":"1311","severity":1,"message":"1312","line":170,"column":11,"nodeType":"1313","endLine":170,"endColumn":30},{"ruleId":"1311","severity":1,"message":"1312","line":172,"column":11,"nodeType":"1313","endLine":172,"endColumn":33},{"ruleId":"1311","severity":1,"message":"1312","line":176,"column":11,"nodeType":"1313","endLine":176,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":178,"column":11,"nodeType":"1313","endLine":178,"endColumn":32},{"ruleId":"1311","severity":1,"message":"1312","line":182,"column":11,"nodeType":"1313","endLine":182,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":184,"column":11,"nodeType":"1313","endLine":184,"endColumn":32},{"ruleId":"1311","severity":1,"message":"1312","line":188,"column":11,"nodeType":"1313","endLine":188,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":190,"column":11,"nodeType":"1313","endLine":190,"endColumn":32},{"ruleId":"1388","severity":1,"message":"1449","line":248,"column":6,"nodeType":"1390","endLine":248,"endColumn":29,"suggestions":"1450"},{"ruleId":"1388","severity":1,"message":"1451","line":270,"column":6,"nodeType":"1390","endLine":270,"endColumn":25,"suggestions":"1452"},{"ruleId":"1388","severity":1,"message":"1453","line":292,"column":6,"nodeType":"1390","endLine":292,"endColumn":13,"suggestions":"1454"},{"ruleId":"1388","severity":1,"message":"1455","line":319,"column":6,"nodeType":"1390","endLine":319,"endColumn":44,"suggestions":"1456"},{"ruleId":"1388","severity":1,"message":"1457","line":330,"column":6,"nodeType":"1390","endLine":330,"endColumn":17,"suggestions":"1458"},{"ruleId":"1260","severity":1,"message":"1440","line":4,"column":8,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1379","line":6,"column":10,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":19},{"ruleId":"1265","replacedBy":"1459"},{"ruleId":"1267","replacedBy":"1460"},{"ruleId":"1260","severity":1,"message":"1380","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1396","line":4,"column":5,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1461","line":5,"column":5,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1340","line":6,"column":5,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1283","line":7,"column":5,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1286","line":15,"column":10,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":15,"column":20,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1356","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":21},{"ruleId":"1304","severity":1,"message":"1305","line":49,"column":36,"nodeType":"1306","messageId":"1307","endLine":49,"endColumn":38},{"ruleId":"1304","severity":1,"message":"1305","line":65,"column":32,"nodeType":"1306","messageId":"1307","endLine":65,"endColumn":34},{"ruleId":"1304","severity":1,"message":"1305","line":74,"column":37,"nodeType":"1306","messageId":"1307","endLine":74,"endColumn":39},{"ruleId":"1304","severity":1,"message":"1305","line":80,"column":23,"nodeType":"1306","messageId":"1307","endLine":80,"endColumn":25},{"ruleId":"1304","severity":1,"message":"1305","line":82,"column":31,"nodeType":"1306","messageId":"1307","endLine":82,"endColumn":33},{"ruleId":"1279","severity":1,"message":"1370","line":86,"column":32,"nodeType":"1281","messageId":"1282","endLine":86,"endColumn":34},{"ruleId":"1388","severity":1,"message":"1463","line":104,"column":8,"nodeType":"1390","endLine":104,"endColumn":10,"suggestions":"1464"},{"ruleId":"1304","severity":1,"message":"1305","line":114,"column":39,"nodeType":"1306","messageId":"1307","endLine":114,"endColumn":41},{"ruleId":"1304","severity":1,"message":"1305","line":115,"column":49,"nodeType":"1306","messageId":"1307","endLine":115,"endColumn":51},{"ruleId":"1279","severity":1,"message":"1280","line":124,"column":39,"nodeType":"1281","messageId":"1282","endLine":124,"endColumn":41},{"ruleId":"1304","severity":1,"message":"1305","line":137,"column":39,"nodeType":"1306","messageId":"1307","endLine":137,"endColumn":41},{"ruleId":"1388","severity":1,"message":"1465","line":152,"column":8,"nodeType":"1390","endLine":152,"endColumn":20,"suggestions":"1466"},{"ruleId":"1327","severity":1,"message":"1467","line":202,"column":21,"nodeType":"1313","endLine":207,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1379","line":2,"column":5,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1468","line":3,"column":5,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1438","line":5,"column":10,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1440","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1385","line":19,"column":18,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1442","line":22,"column":11,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":29},{"ruleId":"1260","severity":1,"message":"1272","line":8,"column":10,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1348","line":18,"column":9,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1271","line":11,"column":3,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1469","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1274","line":26,"column":10,"nodeType":"1262","messageId":"1263","endLine":26,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1470","line":28,"column":8,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":30,"column":10,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1286","line":30,"column":16,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1471","line":31,"column":10,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1472","line":36,"column":8,"nodeType":"1262","messageId":"1263","endLine":36,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1473","line":37,"column":8,"nodeType":"1262","messageId":"1263","endLine":37,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1294","line":42,"column":9,"nodeType":"1262","messageId":"1263","endLine":42,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1295","line":43,"column":7,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1474","line":166,"column":9,"nodeType":"1262","messageId":"1263","endLine":166,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1475","line":176,"column":15,"nodeType":"1262","messageId":"1263","endLine":176,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1476","line":630,"column":15,"nodeType":"1262","messageId":"1263","endLine":630,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1477","line":905,"column":15,"nodeType":"1262","messageId":"1263","endLine":905,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1478","line":909,"column":15,"nodeType":"1262","messageId":"1263","endLine":909,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1479","line":993,"column":28,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":31},{"ruleId":"1260","severity":1,"message":"1480","line":993,"column":33,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":35},{"ruleId":"1260","severity":1,"message":"1481","line":993,"column":37,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1316","line":993,"column":53,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":63},{"ruleId":"1260","severity":1,"message":"1317","line":993,"column":65,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":73},{"ruleId":"1260","severity":1,"message":"1318","line":993,"column":75,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":81},{"ruleId":"1260","severity":1,"message":"1482","line":993,"column":111,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":117},{"ruleId":"1260","severity":1,"message":"1483","line":993,"column":119,"nodeType":"1262","messageId":"1263","endLine":993,"endColumn":129},{"ruleId":"1327","severity":1,"message":"1328","line":1005,"column":11,"nodeType":"1313","endLine":1021,"endColumn":12},{"ruleId":"1300","severity":1,"message":"1301","line":1104,"column":19,"nodeType":"1302","messageId":"1303","endLine":1123,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":1233,"column":17,"nodeType":"1313","endLine":1233,"endColumn":52},{"ruleId":"1311","severity":1,"message":"1312","line":1234,"column":17,"nodeType":"1313","endLine":1234,"endColumn":51},{"ruleId":"1260","severity":1,"message":"1484","line":18,"column":10,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1479","line":358,"column":28,"nodeType":"1262","messageId":"1263","endLine":358,"endColumn":31},{"ruleId":"1260","severity":1,"message":"1480","line":358,"column":33,"nodeType":"1262","messageId":"1263","endLine":358,"endColumn":35},{"ruleId":"1260","severity":1,"message":"1481","line":358,"column":37,"nodeType":"1262","messageId":"1263","endLine":358,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1285","line":2,"column":60,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":64},{"ruleId":"1260","severity":1,"message":"1293","line":3,"column":8,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1288","line":6,"column":32,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1289","line":6,"column":46,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1294","line":31,"column":9,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1296","line":38,"column":5,"nodeType":"1262","messageId":"1263","endLine":38,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1485","line":118,"column":29,"nodeType":"1262","messageId":"1263","endLine":118,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1365","line":118,"column":38,"nodeType":"1262","messageId":"1263","endLine":118,"endColumn":46},{"ruleId":"1260","severity":1,"message":"1364","line":118,"column":48,"nodeType":"1262","messageId":"1263","endLine":118,"endColumn":57},{"ruleId":"1260","severity":1,"message":"1315","line":118,"column":59,"nodeType":"1262","messageId":"1263","endLine":118,"endColumn":68},{"ruleId":"1300","severity":1,"message":"1301","line":161,"column":5,"nodeType":"1302","messageId":"1303","endLine":167,"endColumn":6},{"ruleId":"1304","severity":1,"message":"1305","line":174,"column":41,"nodeType":"1306","messageId":"1307","endLine":174,"endColumn":43},{"ruleId":"1486","severity":1,"message":"1487","line":318,"column":34,"nodeType":"1281","messageId":"1488","endLine":318,"endColumn":48},{"ruleId":"1486","severity":1,"message":"1487","line":369,"column":29,"nodeType":"1281","messageId":"1488","endLine":369,"endColumn":42},{"ruleId":"1260","severity":1,"message":"1308","line":457,"column":11,"nodeType":"1262","messageId":"1263","endLine":457,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1310","line":590,"column":11,"nodeType":"1262","messageId":"1263","endLine":590,"endColumn":24},{"ruleId":"1311","severity":1,"message":"1312","line":786,"column":15,"nodeType":"1313","endLine":786,"endColumn":63},{"ruleId":"1260","severity":1,"message":"1314","line":850,"column":5,"nodeType":"1262","messageId":"1263","endLine":850,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1315","line":851,"column":11,"nodeType":"1262","messageId":"1263","endLine":851,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":886,"column":15,"nodeType":"1313","endLine":886,"endColumn":63},{"ruleId":"1300","severity":1,"message":"1301","line":917,"column":5,"nodeType":"1302","messageId":"1303","endLine":920,"endColumn":6},{"ruleId":"1300","severity":1,"message":"1301","line":922,"column":5,"nodeType":"1302","messageId":"1303","endLine":925,"endColumn":6},{"ruleId":"1260","severity":1,"message":"1489","line":1059,"column":61,"nodeType":"1262","messageId":"1263","endLine":1059,"endColumn":78},{"ruleId":"1260","severity":1,"message":"1320","line":1059,"column":80,"nodeType":"1262","messageId":"1263","endLine":1059,"endColumn":85},{"ruleId":"1260","severity":1,"message":"1315","line":1059,"column":118,"nodeType":"1262","messageId":"1263","endLine":1059,"endColumn":127},{"ruleId":"1260","severity":1,"message":"1340","line":2,"column":17,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1490","line":2,"column":40,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1288","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1290","line":14,"column":10,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1484","line":17,"column":10,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1286","line":18,"column":10,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":18,"column":20,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1287","line":18,"column":26,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1491","line":21,"column":20,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":29},{"ruleId":"1260","severity":1,"message":"1295","line":23,"column":7,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1492","line":346,"column":11,"nodeType":"1262","messageId":"1263","endLine":346,"endColumn":17},{"ruleId":"1297","severity":1,"message":"1493","line":360,"column":15,"nodeType":"1299","messageId":"1282","endLine":360,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1494","line":415,"column":19,"nodeType":"1262","messageId":"1263","endLine":415,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1495","line":416,"column":9,"nodeType":"1262","messageId":"1263","endLine":416,"endColumn":13},{"ruleId":"1327","severity":1,"message":"1328","line":583,"column":15,"nodeType":"1313","endLine":583,"endColumn":50},{"ruleId":"1260","severity":1,"message":"1285","line":6,"column":3,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1272","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1288","line":10,"column":32,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":44},{"ruleId":"1300","severity":1,"message":"1301","line":78,"column":11,"nodeType":"1302","messageId":"1303","endLine":103,"endColumn":12},{"ruleId":"1332","severity":1,"message":"1333","line":94,"column":13,"nodeType":"1334","messageId":"1335","endLine":101,"endColumn":20},{"ruleId":"1374","severity":1,"message":"1375","line":101,"column":15,"nodeType":"1376","messageId":"1377","endLine":101,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1336","line":133,"column":32,"nodeType":"1262","messageId":"1263","endLine":133,"endColumn":48},{"ruleId":"1260","severity":1,"message":"1337","line":150,"column":15,"nodeType":"1262","messageId":"1263","endLine":150,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1496","line":58,"column":9,"nodeType":"1262","messageId":"1263","endLine":58,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1293","line":9,"column":8,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1272","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1330","line":10,"column":32,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1331","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1357","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1286","line":19,"column":10,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1339","line":159,"column":61,"nodeType":"1262","messageId":"1263","endLine":159,"endColumn":75},{"ruleId":"1260","severity":1,"message":"1354","line":4,"column":5,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1355","line":12,"column":8,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1340","line":13,"column":8,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1356","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1357","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1286","line":16,"column":10,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1398","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1497","line":18,"column":8,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1358","line":19,"column":8,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1359","line":20,"column":8,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1360","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1290","line":22,"column":10,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1498","line":23,"column":8,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1348","line":26,"column":9,"nodeType":"1262","messageId":"1263","endLine":26,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1361","line":40,"column":15,"nodeType":"1262","messageId":"1263","endLine":40,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1362","line":40,"column":23,"nodeType":"1262","messageId":"1263","endLine":40,"endColumn":28},{"ruleId":"1297","severity":1,"message":"1499","line":129,"column":13,"nodeType":"1299","messageId":"1282","endLine":129,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1363","line":143,"column":13,"nodeType":"1262","messageId":"1263","endLine":143,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1293","line":9,"column":8,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1272","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1330","line":10,"column":32,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1331","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1286","line":19,"column":10,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":14},{"ruleId":"1300","severity":1,"message":"1301","line":85,"column":25,"nodeType":"1302","messageId":"1303","endLine":114,"endColumn":26},{"ruleId":"1332","severity":1,"message":"1333","line":103,"column":29,"nodeType":"1334","messageId":"1335","endLine":104,"endColumn":68},{"ruleId":"1332","severity":1,"message":"1333","line":105,"column":29,"nodeType":"1334","messageId":"1335","endLine":112,"endColumn":39},{"ruleId":"1260","severity":1,"message":"1338","line":290,"column":49,"nodeType":"1262","messageId":"1263","endLine":290,"endColumn":63},{"ruleId":"1260","severity":1,"message":"1339","line":290,"column":65,"nodeType":"1262","messageId":"1263","endLine":290,"endColumn":79},{"ruleId":"1260","severity":1,"message":"1379","line":2,"column":27,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1286","line":7,"column":14,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1322","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":4,"column":17,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1285","line":4,"column":34,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":38},{"ruleId":"1260","severity":1,"message":"1490","line":4,"column":40,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1272","line":5,"column":10,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1288","line":5,"column":32,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1500","line":9,"column":8,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1501","line":18,"column":8,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1502","line":19,"column":8,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1503","line":20,"column":8,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1504","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1398","line":23,"column":8,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1287","line":24,"column":26,"nodeType":"1262","messageId":"1263","endLine":24,"endColumn":28},{"ruleId":"1388","severity":1,"message":"1505","line":60,"column":8,"nodeType":"1390","endLine":60,"endColumn":10,"suggestions":"1506"},{"ruleId":"1388","severity":1,"message":"1507","line":102,"column":8,"nodeType":"1390","endLine":102,"endColumn":38,"suggestions":"1508"},{"ruleId":"1260","severity":1,"message":"1386","line":28,"column":26,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":32},{"ruleId":"1260","severity":1,"message":"1387","line":28,"column":34,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":39},{"ruleId":"1388","severity":1,"message":"1509","line":115,"column":6,"nodeType":"1390","endLine":115,"endColumn":8,"suggestions":"1510"},{"ruleId":"1311","severity":1,"message":"1312","line":167,"column":17,"nodeType":"1313","endLine":167,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1369","line":5,"column":5,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1378","line":11,"column":9,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":15},{"ruleId":"1279","severity":1,"message":"1370","line":14,"column":16,"nodeType":"1281","messageId":"1282","endLine":14,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":58,"column":16,"nodeType":"1281","messageId":"1282","endLine":58,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1340","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1446","line":2,"column":36,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1511","line":3,"column":10,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1385","line":23,"column":18,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1512","line":27,"column":10,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1513","line":27,"column":19,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":62,"column":16,"nodeType":"1313","endLine":62,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":64,"column":16,"nodeType":"1313","endLine":64,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":66,"column":16,"nodeType":"1313","endLine":66,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":68,"column":16,"nodeType":"1313","endLine":68,"endColumn":41},{"ruleId":"1388","severity":1,"message":"1514","line":74,"column":3,"nodeType":"1262","endLine":74,"endColumn":12,"suggestions":"1515"},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":27,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1286","line":8,"column":10,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":8,"column":20,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1516","line":18,"column":9,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1477","line":68,"column":21,"nodeType":"1262","messageId":"1263","endLine":68,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1478","line":72,"column":21,"nodeType":"1262","messageId":"1263","endLine":72,"endColumn":28},{"ruleId":"1327","severity":1,"message":"1328","line":160,"column":17,"nodeType":"1313","endLine":176,"endColumn":18},{"ruleId":"1300","severity":1,"message":"1301","line":224,"column":29,"nodeType":"1302","messageId":"1303","endLine":243,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1356","line":9,"column":8,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1349","line":14,"column":5,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":12},{"ruleId":"1388","severity":1,"message":"1517","line":53,"column":6,"nodeType":"1390","endLine":53,"endColumn":41,"suggestions":"1518"},{"ruleId":"1260","severity":1,"message":"1369","line":4,"column":5,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":10},{"ruleId":"1279","severity":1,"message":"1370","line":16,"column":16,"nodeType":"1281","messageId":"1282","endLine":16,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":67,"column":16,"nodeType":"1281","messageId":"1282","endLine":67,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":101,"column":16,"nodeType":"1281","messageId":"1282","endLine":101,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1519","line":102,"column":9,"nodeType":"1262","messageId":"1263","endLine":102,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1520","line":191,"column":25,"nodeType":"1262","messageId":"1263","endLine":191,"endColumn":32},{"ruleId":"1260","severity":1,"message":"1521","line":191,"column":34,"nodeType":"1262","messageId":"1263","endLine":191,"endColumn":49},{"ruleId":"1260","severity":1,"message":"1522","line":191,"column":51,"nodeType":"1262","messageId":"1263","endLine":191,"endColumn":55},{"ruleId":"1260","severity":1,"message":"1523","line":192,"column":25,"nodeType":"1262","messageId":"1263","endLine":192,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1524","line":192,"column":46,"nodeType":"1262","messageId":"1263","endLine":192,"endColumn":62},{"ruleId":"1260","severity":1,"message":"1525","line":192,"column":64,"nodeType":"1262","messageId":"1263","endLine":192,"endColumn":84},{"ruleId":"1260","severity":1,"message":"1526","line":192,"column":86,"nodeType":"1262","messageId":"1263","endLine":192,"endColumn":96},{"ruleId":"1527","severity":1,"message":"1528","line":281,"column":33,"nodeType":"1262","messageId":"1529","endLine":281,"endColumn":37},{"ruleId":"1411","severity":1,"message":"1530","line":350,"column":55,"nodeType":"1531","messageId":"1414","endLine":350,"endColumn":56,"suggestions":"1532"},{"ruleId":"1411","severity":1,"message":"1530","line":350,"column":69,"nodeType":"1531","messageId":"1414","endLine":350,"endColumn":70,"suggestions":"1533"},{"ruleId":"1260","severity":1,"message":"1477","line":548,"column":15,"nodeType":"1262","messageId":"1263","endLine":548,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1479","line":560,"column":28,"nodeType":"1262","messageId":"1263","endLine":560,"endColumn":31},{"ruleId":"1260","severity":1,"message":"1480","line":560,"column":33,"nodeType":"1262","messageId":"1263","endLine":560,"endColumn":35},{"ruleId":"1260","severity":1,"message":"1481","line":560,"column":37,"nodeType":"1262","messageId":"1263","endLine":560,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1534","line":60,"column":13,"nodeType":"1262","messageId":"1263","endLine":60,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1271","line":11,"column":3,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1469","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1274","line":26,"column":10,"nodeType":"1262","messageId":"1263","endLine":26,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1470","line":28,"column":8,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":30,"column":10,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1286","line":30,"column":16,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1471","line":31,"column":10,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1472","line":36,"column":8,"nodeType":"1262","messageId":"1263","endLine":36,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1473","line":37,"column":8,"nodeType":"1262","messageId":"1263","endLine":37,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1294","line":42,"column":9,"nodeType":"1262","messageId":"1263","endLine":42,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1295","line":43,"column":7,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1474","line":166,"column":9,"nodeType":"1262","messageId":"1263","endLine":166,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1475","line":176,"column":15,"nodeType":"1262","messageId":"1263","endLine":176,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1476","line":626,"column":15,"nodeType":"1262","messageId":"1263","endLine":626,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1477","line":901,"column":15,"nodeType":"1262","messageId":"1263","endLine":901,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1478","line":905,"column":15,"nodeType":"1262","messageId":"1263","endLine":905,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1479","line":989,"column":28,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":31},{"ruleId":"1260","severity":1,"message":"1480","line":989,"column":33,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":35},{"ruleId":"1260","severity":1,"message":"1481","line":989,"column":37,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":45},{"ruleId":"1260","severity":1,"message":"1316","line":989,"column":53,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":63},{"ruleId":"1260","severity":1,"message":"1317","line":989,"column":65,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":73},{"ruleId":"1260","severity":1,"message":"1318","line":989,"column":75,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":81},{"ruleId":"1260","severity":1,"message":"1482","line":989,"column":111,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":117},{"ruleId":"1260","severity":1,"message":"1483","line":989,"column":119,"nodeType":"1262","messageId":"1263","endLine":989,"endColumn":129},{"ruleId":"1327","severity":1,"message":"1328","line":1001,"column":11,"nodeType":"1313","endLine":1017,"endColumn":12},{"ruleId":"1300","severity":1,"message":"1301","line":1099,"column":19,"nodeType":"1302","messageId":"1303","endLine":1118,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":1214,"column":17,"nodeType":"1313","endLine":1214,"endColumn":52},{"ruleId":"1311","severity":1,"message":"1312","line":1215,"column":17,"nodeType":"1313","endLine":1215,"endColumn":51},{"ruleId":"1260","severity":1,"message":"1283","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1293","line":8,"column":8,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1288","line":11,"column":32,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1336","line":132,"column":32,"nodeType":"1262","messageId":"1263","endLine":132,"endColumn":48},{"ruleId":"1260","severity":1,"message":"1337","line":154,"column":15,"nodeType":"1262","messageId":"1263","endLine":154,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1326","line":353,"column":21,"nodeType":"1262","messageId":"1263","endLine":353,"endColumn":27},{"ruleId":"1327","severity":1,"message":"1328","line":519,"column":17,"nodeType":"1313","endLine":519,"endColumn":54},{"ruleId":"1327","severity":1,"message":"1328","line":577,"column":17,"nodeType":"1313","endLine":577,"endColumn":60},{"ruleId":"1260","severity":1,"message":"1322","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":2,"column":17,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1285","line":2,"column":34,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":38},{"ruleId":"1260","severity":1,"message":"1490","line":2,"column":40,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1272","line":3,"column":10,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1288","line":3,"column":32,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1398","line":11,"column":8,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1287","line":12,"column":26,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1535","line":18,"column":5,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":10},{"ruleId":"1300","severity":1,"message":"1301","line":164,"column":9,"nodeType":"1302","messageId":"1303","endLine":182,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1369","line":4,"column":5,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1378","line":10,"column":13,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":19},{"ruleId":"1279","severity":1,"message":"1370","line":13,"column":20,"nodeType":"1281","messageId":"1282","endLine":13,"endColumn":22},{"ruleId":"1279","severity":1,"message":"1370","line":61,"column":20,"nodeType":"1281","messageId":"1282","endLine":61,"endColumn":22},{"ruleId":"1388","severity":1,"message":"1536","line":27,"column":8,"nodeType":"1390","endLine":27,"endColumn":10,"suggestions":"1537"},{"ruleId":"1260","severity":1,"message":"1538","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1468","line":1,"column":39,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":47},{"ruleId":"1388","severity":1,"message":"1539","line":162,"column":6,"nodeType":"1390","endLine":162,"endColumn":23,"suggestions":"1540"},{"ruleId":"1260","severity":1,"message":"1541","line":2,"column":8,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1322","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":4,"column":17,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1284","line":4,"column":25,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":32},{"ruleId":"1260","severity":1,"message":"1285","line":4,"column":34,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":38},{"ruleId":"1260","severity":1,"message":"1490","line":4,"column":40,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1272","line":5,"column":10,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1289","line":5,"column":46,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1286","line":9,"column":10,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":9,"column":20,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1287","line":9,"column":26,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":28},{"ruleId":"1388","severity":1,"message":"1542","line":30,"column":8,"nodeType":"1390","endLine":30,"endColumn":10,"suggestions":"1543"},{"ruleId":"1260","severity":1,"message":"1544","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1545","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":6},{"ruleId":"1260","severity":1,"message":"1546","line":44,"column":16,"nodeType":"1262","messageId":"1263","endLine":44,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":99,"column":18,"nodeType":"1313","endLine":99,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":101,"column":18,"nodeType":"1313","endLine":101,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":103,"column":18,"nodeType":"1313","endLine":103,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":105,"column":18,"nodeType":"1313","endLine":105,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":127,"column":11,"nodeType":"1313","endLine":134,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":139,"column":13,"nodeType":"1313","endLine":139,"endColumn":33},{"ruleId":"1279","severity":1,"message":"1280","line":204,"column":28,"nodeType":"1281","messageId":"1282","endLine":204,"endColumn":30},{"ruleId":"1388","severity":1,"message":"1547","line":301,"column":6,"nodeType":"1390","endLine":301,"endColumn":18,"suggestions":"1548"},{"ruleId":"1388","severity":1,"message":"1549","line":309,"column":6,"nodeType":"1390","endLine":309,"endColumn":8,"suggestions":"1550"},{"ruleId":"1260","severity":1,"message":"1468","line":2,"column":17,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1379","line":2,"column":5,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1468","line":3,"column":5,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1438","line":5,"column":10,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1440","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1385","line":19,"column":18,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1442","line":22,"column":11,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":29},{"ruleId":"1260","severity":1,"message":"1438","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1544","line":10,"column":3,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1551","line":11,"column":3,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1552","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1553","line":69,"column":5,"nodeType":"1262","messageId":"1263","endLine":69,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1554","line":73,"column":5,"nodeType":"1262","messageId":"1263","endLine":73,"endColumn":23},{"ruleId":"1555","severity":1,"message":"1556","line":131,"column":61,"nodeType":"1281","messageId":"1557","endLine":131,"endColumn":62},{"ruleId":"1555","severity":1,"message":"1556","line":139,"column":45,"nodeType":"1281","messageId":"1557","endLine":139,"endColumn":46},{"ruleId":"1388","severity":1,"message":"1558","line":283,"column":6,"nodeType":"1390","endLine":283,"endColumn":13,"suggestions":"1559"},{"ruleId":"1388","severity":1,"message":"1560","line":305,"column":6,"nodeType":"1390","endLine":305,"endColumn":26,"suggestions":"1561"},{"ruleId":"1260","severity":1,"message":"1438","line":2,"column":10,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1498","line":27,"column":8,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1385","line":30,"column":18,"nodeType":"1262","messageId":"1263","endLine":30,"endColumn":24},{"ruleId":"1388","severity":1,"message":"1562","line":74,"column":6,"nodeType":"1390","endLine":74,"endColumn":21,"suggestions":"1563"},{"ruleId":"1311","severity":1,"message":"1312","line":107,"column":15,"nodeType":"1313","endLine":107,"endColumn":44},{"ruleId":"1311","severity":1,"message":"1312","line":123,"column":19,"nodeType":"1313","endLine":123,"endColumn":43},{"ruleId":"1311","severity":1,"message":"1312","line":140,"column":27,"nodeType":"1313","endLine":146,"endColumn":29},{"ruleId":"1260","severity":1,"message":"1461","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1340","line":6,"column":3,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1283","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1288","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1564","line":11,"column":10,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1565","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1566","line":28,"column":8,"nodeType":"1262","messageId":"1263","endLine":28,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1567","line":29,"column":8,"nodeType":"1262","messageId":"1263","endLine":29,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1501","line":31,"column":8,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1568","line":43,"column":8,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1294","line":45,"column":9,"nodeType":"1262","messageId":"1263","endLine":45,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1295","line":46,"column":7,"nodeType":"1262","messageId":"1263","endLine":46,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1569","line":50,"column":7,"nodeType":"1262","messageId":"1263","endLine":50,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1570","line":110,"column":10,"nodeType":"1262","messageId":"1263","endLine":110,"endColumn":19},{"ruleId":"1260","severity":1,"message":"1571","line":110,"column":20,"nodeType":"1262","messageId":"1263","endLine":110,"endColumn":32},{"ruleId":"1332","severity":1,"message":"1333","line":168,"column":7,"nodeType":"1334","messageId":"1335","endLine":169,"endColumn":31},{"ruleId":"1332","severity":1,"message":"1333","line":170,"column":7,"nodeType":"1334","messageId":"1335","endLine":173,"endColumn":15},{"ruleId":"1332","severity":1,"message":"1572","line":180,"column":7,"nodeType":"1334","messageId":"1573","endLine":181,"endColumn":15},{"ruleId":"1388","severity":1,"message":"1574","line":198,"column":6,"nodeType":"1390","endLine":198,"endColumn":8,"suggestions":"1575"},{"ruleId":"1260","severity":1,"message":"1576","line":235,"column":13,"nodeType":"1262","messageId":"1263","endLine":235,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":818,"column":17,"nodeType":"1313","endLine":818,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":824,"column":17,"nodeType":"1313","endLine":824,"endColumn":65},{"ruleId":"1327","severity":1,"message":"1328","line":858,"column":15,"nodeType":"1313","endLine":863,"endColumn":16},{"ruleId":"1327","severity":1,"message":"1328","line":864,"column":15,"nodeType":"1313","endLine":870,"endColumn":16},{"ruleId":"1311","severity":1,"message":"1312","line":950,"column":17,"nodeType":"1313","endLine":950,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":955,"column":15,"nodeType":"1313","endLine":955,"endColumn":64},{"ruleId":"1327","severity":1,"message":"1328","line":1048,"column":13,"nodeType":"1313","endLine":1050,"endColumn":14},{"ruleId":"1327","severity":1,"message":"1328","line":1113,"column":15,"nodeType":"1313","endLine":1115,"endColumn":16},{"ruleId":"1327","severity":1,"message":"1328","line":1129,"column":13,"nodeType":"1313","endLine":1131,"endColumn":14},{"ruleId":"1327","severity":1,"message":"1328","line":1197,"column":15,"nodeType":"1313","endLine":1199,"endColumn":16},{"ruleId":"1327","severity":1,"message":"1328","line":1212,"column":15,"nodeType":"1313","endLine":1214,"endColumn":16},{"ruleId":"1311","severity":1,"message":"1312","line":1253,"column":13,"nodeType":"1313","endLine":1253,"endColumn":58},{"ruleId":"1311","severity":1,"message":"1312","line":1450,"column":17,"nodeType":"1313","endLine":1450,"endColumn":52},{"ruleId":"1311","severity":1,"message":"1312","line":1451,"column":17,"nodeType":"1313","endLine":1451,"endColumn":51},{"ruleId":"1260","severity":1,"message":"1369","line":4,"column":5,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1378","line":10,"column":9,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":15},{"ruleId":"1279","severity":1,"message":"1370","line":13,"column":16,"nodeType":"1281","messageId":"1282","endLine":13,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":58,"column":16,"nodeType":"1281","messageId":"1282","endLine":58,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":27,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1541","line":2,"column":8,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1322","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":4,"column":17,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1285","line":4,"column":34,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":38},{"ruleId":"1260","severity":1,"message":"1490","line":4,"column":40,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1288","line":5,"column":32,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1289","line":5,"column":46,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1356","line":8,"column":8,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1286","line":18,"column":10,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":18,"column":20,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1287","line":18,"column":26,"nodeType":"1262","messageId":"1263","endLine":18,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1468","line":1,"column":28,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1396","line":3,"column":18,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1445","line":3,"column":24,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":34},{"ruleId":"1388","severity":1,"message":"1577","line":231,"column":6,"nodeType":"1390","endLine":231,"endColumn":26,"suggestions":"1578"},{"ruleId":"1260","severity":1,"message":"1468","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":27,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1288","line":3,"column":10,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1272","line":3,"column":24,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":44},{"ruleId":"1260","severity":1,"message":"1564","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":24},{"ruleId":"1311","severity":1,"message":"1312","line":44,"column":11,"nodeType":"1313","endLine":47,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":53,"column":13,"nodeType":"1313","endLine":56,"endColumn":15},{"ruleId":"1311","severity":1,"message":"1312","line":61,"column":11,"nodeType":"1313","endLine":64,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":74,"column":11,"nodeType":"1313","endLine":77,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1579","line":6,"column":5,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1580","line":10,"column":10,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1581","line":10,"column":30,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":42},{"ruleId":"1260","severity":1,"message":"1295","line":19,"column":7,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1357","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1286","line":17,"column":10,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1582","line":22,"column":8,"nodeType":"1262","messageId":"1263","endLine":22,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1348","line":23,"column":9,"nodeType":"1262","messageId":"1263","endLine":23,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1583","line":344,"column":9,"nodeType":"1262","messageId":"1263","endLine":344,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1584","line":381,"column":11,"nodeType":"1262","messageId":"1263","endLine":381,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1482","line":381,"column":142,"nodeType":"1262","messageId":"1263","endLine":381,"endColumn":148},{"ruleId":"1260","severity":1,"message":"1483","line":381,"column":150,"nodeType":"1262","messageId":"1263","endLine":381,"endColumn":160},{"ruleId":"1260","severity":1,"message":"1585","line":385,"column":7,"nodeType":"1262","messageId":"1263","endLine":385,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1357","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1541","line":2,"column":8,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1322","line":4,"column":10,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1340","line":4,"column":17,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1284","line":4,"column":25,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":32},{"ruleId":"1260","severity":1,"message":"1285","line":4,"column":34,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":38},{"ruleId":"1260","severity":1,"message":"1490","line":4,"column":40,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":47},{"ruleId":"1260","severity":1,"message":"1272","line":5,"column":10,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1289","line":5,"column":46,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":61},{"ruleId":"1260","severity":1,"message":"1286","line":9,"column":10,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":9,"column":20,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1287","line":9,"column":26,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":28},{"ruleId":"1260","severity":1,"message":"1379","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1468","line":1,"column":28,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":36},{"ruleId":"1260","severity":1,"message":"1396","line":3,"column":18,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1445","line":3,"column":24,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":34},{"ruleId":"1260","severity":1,"message":"1441","line":20,"column":9,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1385","line":20,"column":18,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1397","line":2,"column":35,"nodeType":"1262","messageId":"1263","endLine":2,"endColumn":42},{"ruleId":"1260","severity":1,"message":"1274","line":13,"column":10,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1287","line":43,"column":20,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1294","line":50,"column":9,"nodeType":"1262","messageId":"1263","endLine":50,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1295","line":52,"column":7,"nodeType":"1262","messageId":"1263","endLine":52,"endColumn":13},{"ruleId":"1260","severity":1,"message":"1586","line":79,"column":5,"nodeType":"1262","messageId":"1263","endLine":79,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1587","line":212,"column":48,"nodeType":"1262","messageId":"1263","endLine":212,"endColumn":54},{"ruleId":"1300","severity":1,"message":"1301","line":331,"column":9,"nodeType":"1302","messageId":"1303","endLine":344,"endColumn":10},{"ruleId":"1300","severity":1,"message":"1301","line":744,"column":9,"nodeType":"1302","messageId":"1303","endLine":748,"endColumn":10},{"ruleId":"1260","severity":1,"message":"1588","line":752,"column":9,"nodeType":"1262","messageId":"1263","endLine":752,"endColumn":27},{"ruleId":"1297","severity":1,"message":"1589","line":798,"column":7,"nodeType":"1299","messageId":"1282","endLine":798,"endColumn":10},{"ruleId":"1300","severity":1,"message":"1301","line":1051,"column":11,"nodeType":"1302","messageId":"1303","endLine":1058,"endColumn":12},{"ruleId":"1300","severity":1,"message":"1301","line":1274,"column":13,"nodeType":"1302","messageId":"1303","endLine":1281,"endColumn":14},{"ruleId":"1300","severity":1,"message":"1301","line":1431,"column":13,"nodeType":"1302","messageId":"1303","endLine":1438,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1590","line":1502,"column":15,"nodeType":"1262","messageId":"1263","endLine":1502,"endColumn":26},{"ruleId":"1374","severity":1,"message":"1375","line":1789,"column":9,"nodeType":"1376","messageId":"1377","endLine":1789,"endColumn":15},{"ruleId":"1374","severity":1,"message":"1375","line":1798,"column":9,"nodeType":"1376","messageId":"1377","endLine":1798,"endColumn":14},{"ruleId":"1300","severity":1,"message":"1301","line":2024,"column":9,"nodeType":"1302","messageId":"1303","endLine":2037,"endColumn":10},{"ruleId":"1411","severity":1,"message":"1416","line":2430,"column":36,"nodeType":"1413","messageId":"1414","endLine":2430,"endColumn":37,"suggestions":"1591"},{"ruleId":"1279","severity":1,"message":"1280","line":2431,"column":47,"nodeType":"1281","messageId":"1282","endLine":2431,"endColumn":49},{"ruleId":"1260","severity":1,"message":"1367","line":2632,"column":107,"nodeType":"1262","messageId":"1263","endLine":2632,"endColumn":112},{"ruleId":"1260","severity":1,"message":"1592","line":3057,"column":11,"nodeType":"1262","messageId":"1263","endLine":3057,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1593","line":3694,"column":17,"nodeType":"1262","messageId":"1263","endLine":3694,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1316","line":4322,"column":13,"nodeType":"1262","messageId":"1263","endLine":4322,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1317","line":4322,"column":25,"nodeType":"1262","messageId":"1263","endLine":4322,"endColumn":33},{"ruleId":"1260","severity":1,"message":"1318","line":4322,"column":35,"nodeType":"1262","messageId":"1263","endLine":4322,"endColumn":41},{"ruleId":"1300","severity":1,"message":"1301","line":4355,"column":17,"nodeType":"1302","messageId":"1303","endLine":4368,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1275","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1322","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1340","line":6,"column":3,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1544","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1283","line":10,"column":3,"nodeType":"1262","messageId":"1263","endLine":10,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1271","line":11,"column":3,"nodeType":"1262","messageId":"1263","endLine":11,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1594","line":12,"column":3,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1293","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1568","line":16,"column":8,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1498","line":17,"column":8,"nodeType":"1262","messageId":"1263","endLine":17,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1288","line":20,"column":10,"nodeType":"1262","messageId":"1263","endLine":20,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1469","line":21,"column":8,"nodeType":"1262","messageId":"1263","endLine":21,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1462","line":27,"column":10,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1286","line":27,"column":16,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1287","line":27,"column":22,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1294","line":39,"column":9,"nodeType":"1262","messageId":"1263","endLine":39,"endColumn":16},{"ruleId":"1260","severity":1,"message":"1322","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1595","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":7},{"ruleId":"1260","severity":1,"message":"1544","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1272","line":13,"column":10,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":30},{"ruleId":"1260","severity":1,"message":"1596","line":19,"column":10,"nodeType":"1262","messageId":"1263","endLine":19,"endColumn":23},{"ruleId":"1260","severity":1,"message":"1354","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1355","line":12,"column":8,"nodeType":"1262","messageId":"1263","endLine":12,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1340","line":13,"column":8,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1356","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1357","line":15,"column":8,"nodeType":"1262","messageId":"1263","endLine":15,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1286","line":16,"column":10,"nodeType":"1262","messageId":"1263","endLine":16,"endColumn":14},{"ruleId":"1260","severity":1,"message":"1597","line":25,"column":10,"nodeType":"1262","messageId":"1263","endLine":25,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1348","line":27,"column":9,"nodeType":"1262","messageId":"1263","endLine":27,"endColumn":15},{"ruleId":"1260","severity":1,"message":"1361","line":43,"column":11,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":17},{"ruleId":"1260","severity":1,"message":"1362","line":43,"column":19,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":24},{"ruleId":"1260","severity":1,"message":"1363","line":59,"column":9,"nodeType":"1262","messageId":"1263","endLine":59,"endColumn":22},{"ruleId":"1260","severity":1,"message":"1598","line":78,"column":11,"nodeType":"1262","messageId":"1263","endLine":78,"endColumn":19},{"ruleId":"1260","severity":1,"message":"1340","line":3,"column":3,"nodeType":"1262","messageId":"1263","endLine":3,"endColumn":9},{"ruleId":"1260","severity":1,"message":"1599","line":4,"column":3,"nodeType":"1262","messageId":"1263","endLine":4,"endColumn":11},{"ruleId":"1260","severity":1,"message":"1544","line":5,"column":3,"nodeType":"1262","messageId":"1263","endLine":5,"endColumn":8},{"ruleId":"1260","severity":1,"message":"1545","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":7,"endColumn":6},{"ruleId":"1260","severity":1,"message":"1381","line":31,"column":10,"nodeType":"1262","messageId":"1263","endLine":31,"endColumn":12},{"ruleId":"1260","severity":1,"message":"1553","line":43,"column":9,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":26},{"ruleId":"1260","severity":1,"message":"1442","line":43,"column":28,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":46},{"ruleId":"1260","severity":1,"message":"1600","line":43,"column":48,"nodeType":"1262","messageId":"1263","endLine":43,"endColumn":64},{"ruleId":"1260","severity":1,"message":"1546","line":45,"column":16,"nodeType":"1262","messageId":"1263","endLine":45,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1601","line":58,"column":10,"nodeType":"1262","messageId":"1263","endLine":58,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1602","line":58,"column":20,"nodeType":"1262","messageId":"1263","endLine":58,"endColumn":31},{"ruleId":"1311","severity":1,"message":"1312","line":135,"column":11,"nodeType":"1313","endLine":142,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":147,"column":13,"nodeType":"1313","endLine":147,"endColumn":33},{"ruleId":"1311","severity":1,"message":"1312","line":195,"column":18,"nodeType":"1313","endLine":195,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":197,"column":18,"nodeType":"1313","endLine":197,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":199,"column":18,"nodeType":"1313","endLine":199,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":201,"column":18,"nodeType":"1313","endLine":201,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":225,"column":11,"nodeType":"1313","endLine":232,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":237,"column":13,"nodeType":"1313","endLine":237,"endColumn":63},{"ruleId":"1388","severity":1,"message":"1547","line":341,"column":6,"nodeType":"1390","endLine":341,"endColumn":18,"suggestions":"1603"},{"ruleId":"1388","severity":1,"message":"1604","line":349,"column":6,"nodeType":"1390","endLine":349,"endColumn":15,"suggestions":"1605"},{"ruleId":"1388","severity":1,"message":"1549","line":357,"column":6,"nodeType":"1390","endLine":357,"endColumn":8,"suggestions":"1606"},{"ruleId":"1260","severity":1,"message":"1369","line":6,"column":5,"nodeType":"1262","messageId":"1263","endLine":6,"endColumn":10},{"ruleId":"1279","severity":1,"message":"1370","line":18,"column":16,"nodeType":"1281","messageId":"1282","endLine":18,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":61,"column":16,"nodeType":"1281","messageId":"1282","endLine":61,"endColumn":18},{"ruleId":"1279","severity":1,"message":"1370","line":95,"column":16,"nodeType":"1281","messageId":"1282","endLine":95,"endColumn":18},{"ruleId":"1260","severity":1,"message":"1356","line":13,"column":8,"nodeType":"1262","messageId":"1263","endLine":13,"endColumn":21},{"ruleId":"1260","severity":1,"message":"1582","line":14,"column":8,"nodeType":"1262","messageId":"1263","endLine":14,"endColumn":20},{"ruleId":"1260","severity":1,"message":"1468","line":1,"column":17,"nodeType":"1262","messageId":"1263","endLine":1,"endColumn":25},{"ruleId":"1260","severity":1,"message":"1541","line":8,"column":8,"nodeType":"1262","messageId":"1263","endLine":8,"endColumn":17},{"ruleId":"1607","severity":1,"message":"1608","line":16,"column":20,"nodeType":"1609","messageId":"1282","endLine":16,"endColumn":23},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Praviders' is defined but never used.","no-native-reassign",["1610"],"no-negated-in-lhs",["1611"],["1610"],["1611"],"'Select' is defined but never used.","'createFromIconfontCN' is defined but never used.","'dui' is defined but never used.","'FetchEszVet' is defined but never used.","'Table' is defined but never used.","'address' is assigned a value but never used.","'displayName' is assigned a value but never used.","'phoneNumber' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Modal' is defined but never used.","'message' is defined but never used.","'Spin' is defined but never used.","'mTop' is defined but never used.","'pX' is defined but never used.","'SyncOutlined' is defined but never used.","'LoadingOutlined' is defined but never used.","'fetchRequest' is defined but never used.",["1610"],["1611"],"'Draggable' is defined but never used.","'SubMenu' is assigned a value but never used.","'MyIcon' is assigned a value but never used.","'url' is assigned a value but never used.","no-dupe-keys","Duplicate key 'imgurl'.","ObjectExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petSpecies' is assigned a value but never used.","'imgurl' is assigned a value but never used.","'onPanelChange' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'options' is assigned a value but never used.","'breedName' is assigned a value but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'disabled' is assigned a value but never used.","'isMix' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'Input' is defined but never used.","'mellaLogo' is defined but never used.",["1610"],["1611"],"'bounds' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'_resend' is assigned a value but never used.","'CaretDownFilled' is defined but never used.","'imgArray' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'lastOrganization' is assigned a value but never used.","'connectionKey' is assigned a value but never used.","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'Button' is defined but never used.","'Calendar' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'horse' is defined but never used.","'rabbit' is defined but never used.","'female' is defined but never used.","'male' is defined but never used.","'Option' is assigned a value but never used.","'storage' is assigned a value but never used.","'errPatientId' is assigned a value but never used.","'userImage' is assigned a value but never used.",["1610"],["1611"],"'Switch' is defined but never used.","'Slider' is defined but never used.","'electronStore' is defined but never used.","'temporaryStorage' is defined but never used.","'dog' is defined but never used.","'cat' is defined but never used.","'other' is defined but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'windowsHeight' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","Duplicate key 'disabled'.","'petId' is assigned a value but never used.","'assignOwnerName' is assigned a value but never used.","'token' is assigned a value but never used.","Expected '===' and instead saw '=='.","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'header' is assigned a value but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'px' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.","ArrayExpression",["1612"],"React Hook useEffect has missing dependencies: '_getExam' and 'petList'. Either include them or remove the dependency array. You can also do a functional update 'setPetList(p => ...)' if you only need 'petList' in the 'setPetList' call.",["1613"],["1610"],["1611"],"'Menu' is defined but never used.","'Tooltip' is defined but never used.","'MyModal' is defined but never used.","'ye' is defined but never used.","'er' is defined but never used.","'gang' is defined but never used.","'redjinggao' is defined but never used.","'close' is defined but never used.","'echartsDataLength' is assigned a value but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1614","1615"],"Unnecessary escape character: \\-.",["1616","1617"],["1618","1619"],["1620","1621"],["1622","1623"],["1624","1625"],["1626","1627"],["1628","1629"],["1630","1631"],["1632","1633"],["1634","1635"],["1636","1637"],["1638","1639"],["1640","1641"],["1642","1643"],["1644","1645"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1646"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1647"],"React Hook useEffect has a missing dependency: 'getOption'. Either include it or remove the dependency array.",["1648"],"'Image' is defined but never used.","'PressButton_Pro' is defined but never used.","'_' is defined but never used.","'Content' is assigned a value but never used.","'mellaConnectStatus' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'useRef' is defined but never used.","'PageHeader' is defined but never used.","'Carousel' is defined but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1649"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1650"],"React Hook useEffect has missing dependencies: 'petLengthDataConvert' and 'petMessage'. Either include them or remove the dependency array.",["1651"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array.",["1652"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'headValue', 'lowerValue', 'neckValue', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1653"],["1610"],["1611"],"'Popover' is defined but never used.","'MTop' is defined but never used.","React Hook useEffect has a missing dependency: 'listDate'. Either include it or remove the dependency array.",["1654"],"React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1655"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'MaxMin' is defined but never used.","'gender' is defined but never used.","'stopBubble' is defined but never used.","'blackTriangle' is defined but never used.","'refresh' is defined but never used.","'dataArr' is assigned a value but never used.","'weight' is assigned a value but never used.","'selectNum' is assigned a value but never used.","'chazhi' is assigned a value but never used.","'newTime' is assigned a value but never used.","'api' is assigned a value but never used.","'id' is assigned a value but never used.","'seleceID' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'showsortBy' is assigned a value but never used.","'fetchRequest1' is defined but never used.","'petName' is assigned a value but never used.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","'petSpeciesBreedId' is assigned a value but never used.","'BackTop' is defined but never used.","'addQRCode' is defined but never used.","'isCode' is assigned a value but never used.","Duplicate key 'opacity'.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","'mar' is assigned a value but never used.","'parent' is defined but never used.","'moment' is defined but never used.","Duplicate key 'connectionKey'.","'blueSearch' is defined but never used.","'MinClose' is defined but never used.","'MouseDiv' is defined but never used.","'back_white' is defined but never used.","'back_hui' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1656"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1657"],"React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1658"],"'PlusOutlined' is defined but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1659"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareInfo'. Either include it or remove the dependency array.",["1660"],"'params' is assigned a value but never used.","'bree_id' is assigned a value but never used.","'animalcolour_id' is assigned a value but never used.","'guid' is assigned a value but never used.","'referring_clinic_id' is assigned a value but never used.","'referring_vet_id' is assigned a value but never used.","'residence_contact_id' is assigned a value but never used.","'species_id' is assigned a value but never used.","no-const-assign","'name' is constant.","const","Unnecessary escape character: \\\".","TemplateElement",["1661","1662"],["1663","1664"],"'chooseNum' is assigned a value but never used.","'num07' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initSelectVale' and 'listArr'. Either include them or remove the dependency array. If 'setSelectValue' needs the current value of 'listArr', you can also switch to useReducer instead of useState and read 'listArr' in the reducer.",["1665"],"'Component' is defined but never used.","React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1666"],"'PropTypes' is defined but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1667"],"'Space' is defined but never used.","'Tag' is defined but never used.","'memo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["1668"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1669"],"'Card' is defined but never used.","'Charlie' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1670"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1671"],"React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1672"],"'SearchOutlined' is defined but never used.","'triangle' is defined but never used.","'heardLeft' is defined but never used.","'blueSearchPng' is defined but never used.","'Button1' is defined but never used.","'allPetList' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","Expected a 'break' statement before 'default'.","default","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["1673"],"'bluData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1674"],"'Alert' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'SelectionBox' is defined but never used.","'selectDeviceName' is assigned a value but never used.","'isClicleStudy' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'biggieSave' is assigned a value but never used.","'gender' is assigned a value but never used.","'lastConnectionTime' is assigned a value but never used.","Duplicate key '194'.","'weightUnits' is assigned a value but never used.",["1675","1676"],"'pas' is assigned a value but never used.","'temp15' is assigned a value but never used.","'ConfigProvider' is defined but never used.","'Form' is defined but never used.","'fetchRequest2' is defined but never used.","'parseGeoJSON' is defined but never used.","'isUnKnow' is assigned a value but never used.","'Progress' is defined but never used.","'mellaMeasurePart' is assigned a value but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.",["1677"],"React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1678"],["1679"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","no-global-assign","no-unsafe-negation",{"desc":"1680","fix":"1681"},{"desc":"1682","fix":"1683"},{"messageId":"1684","fix":"1685","desc":"1686"},{"messageId":"1687","fix":"1688","desc":"1689"},{"messageId":"1684","fix":"1690","desc":"1686"},{"messageId":"1687","fix":"1691","desc":"1689"},{"messageId":"1684","fix":"1692","desc":"1686"},{"messageId":"1687","fix":"1693","desc":"1689"},{"messageId":"1684","fix":"1694","desc":"1686"},{"messageId":"1687","fix":"1695","desc":"1689"},{"messageId":"1684","fix":"1696","desc":"1686"},{"messageId":"1687","fix":"1697","desc":"1689"},{"messageId":"1684","fix":"1698","desc":"1686"},{"messageId":"1687","fix":"1699","desc":"1689"},{"messageId":"1684","fix":"1700","desc":"1686"},{"messageId":"1687","fix":"1701","desc":"1689"},{"messageId":"1684","fix":"1702","desc":"1686"},{"messageId":"1687","fix":"1703","desc":"1689"},{"messageId":"1684","fix":"1704","desc":"1686"},{"messageId":"1687","fix":"1705","desc":"1689"},{"messageId":"1684","fix":"1706","desc":"1686"},{"messageId":"1687","fix":"1707","desc":"1689"},{"messageId":"1684","fix":"1708","desc":"1686"},{"messageId":"1687","fix":"1709","desc":"1689"},{"messageId":"1684","fix":"1710","desc":"1686"},{"messageId":"1687","fix":"1711","desc":"1689"},{"messageId":"1684","fix":"1712","desc":"1686"},{"messageId":"1687","fix":"1713","desc":"1689"},{"messageId":"1684","fix":"1714","desc":"1686"},{"messageId":"1687","fix":"1715","desc":"1689"},{"messageId":"1684","fix":"1716","desc":"1686"},{"messageId":"1687","fix":"1717","desc":"1689"},{"messageId":"1684","fix":"1718","desc":"1686"},{"messageId":"1687","fix":"1719","desc":"1689"},{"desc":"1720","fix":"1721"},{"desc":"1722","fix":"1723"},{"desc":"1724","fix":"1725"},{"desc":"1726","fix":"1727"},{"desc":"1728","fix":"1729"},{"desc":"1730","fix":"1731"},{"desc":"1732","fix":"1733"},{"desc":"1734","fix":"1735"},{"desc":"1736","fix":"1737"},{"desc":"1738","fix":"1739"},{"desc":"1740","fix":"1741"},{"desc":"1742","fix":"1743"},{"desc":"1744","fix":"1745"},{"desc":"1746","fix":"1747"},{"desc":"1748","fix":"1749"},{"messageId":"1684","fix":"1750","desc":"1686"},{"messageId":"1687","fix":"1751","desc":"1689"},{"messageId":"1684","fix":"1752","desc":"1686"},{"messageId":"1687","fix":"1753","desc":"1689"},{"desc":"1754","fix":"1755"},{"desc":"1756","fix":"1757"},{"desc":"1758","fix":"1759"},{"desc":"1760","fix":"1761"},{"desc":"1762","fix":"1763"},{"desc":"1764","fix":"1765"},{"desc":"1766","fix":"1767"},{"desc":"1768","fix":"1769"},{"desc":"1770","fix":"1771"},{"desc":"1772","fix":"1773"},{"messageId":"1684","fix":"1774","desc":"1686"},{"messageId":"1687","fix":"1775","desc":"1689"},{"desc":"1760","fix":"1776"},{"desc":"1777","fix":"1778"},{"desc":"1762","fix":"1779"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1780","text":"1781"},"Update the dependencies array to be: [_getExam, petList]",{"range":"1782","text":"1783"},"removeEscape",{"range":"1784","text":"1785"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1786","text":"1787"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1788","text":"1785"},{"range":"1789","text":"1787"},{"range":"1790","text":"1785"},{"range":"1791","text":"1787"},{"range":"1792","text":"1785"},{"range":"1793","text":"1787"},{"range":"1794","text":"1785"},{"range":"1795","text":"1787"},{"range":"1796","text":"1785"},{"range":"1797","text":"1787"},{"range":"1798","text":"1785"},{"range":"1799","text":"1787"},{"range":"1800","text":"1785"},{"range":"1801","text":"1787"},{"range":"1802","text":"1785"},{"range":"1803","text":"1787"},{"range":"1804","text":"1785"},{"range":"1805","text":"1787"},{"range":"1806","text":"1785"},{"range":"1807","text":"1787"},{"range":"1808","text":"1785"},{"range":"1809","text":"1787"},{"range":"1810","text":"1785"},{"range":"1811","text":"1787"},{"range":"1812","text":"1785"},{"range":"1813","text":"1787"},{"range":"1814","text":"1785"},{"range":"1815","text":"1787"},{"range":"1816","text":"1785"},{"range":"1817","text":"1787"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1818","text":"1819"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1820","text":"1821"},"Update the dependencies array to be: [echarsData, getOption]",{"range":"1822","text":"1823"},"Update the dependencies array to be: [finishScan, inputIndex, newData, patientId]",{"range":"1824","text":"1825"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1826","text":"1827"},"Update the dependencies array to be: [petId, petLengthDataConvert, petMessage]",{"range":"1828","text":"1829"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount, rulerMeasureValue]",{"range":"1830","text":"1831"},"Update the dependencies array to be: [bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",{"range":"1832","text":"1833"},"Update the dependencies array to be: [listDate]",{"range":"1834","text":"1835"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1836","text":"1837"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1838","text":"1839"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1840","text":"1841"},"Update the dependencies array to be: [hardwareList]",{"range":"1842","text":"1843"},"Add dependencies array: [callBack, timers]",{"range":"1844","text":"1845"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo]",{"range":"1846","text":"1847"},{"range":"1848","text":"1785"},{"range":"1849","text":"1787"},{"range":"1850","text":"1785"},{"range":"1851","text":"1787"},"Update the dependencies array to be: [initSelectVale, listArr]",{"range":"1852","text":"1853"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"1854","text":"1855"},"Update the dependencies array to be: [_getExam]",{"range":"1856","text":"1857"},"Update the dependencies array to be: [getPetTemperatureData, petMessage]",{"range":"1858","text":"1859"},"Update the dependencies array to be: [storage.userId]",{"range":"1860","text":"1861"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1862","text":"1863"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1864","text":"1865"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1866","text":"1867"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1868","text":"1869"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"1870","text":"1871"},{"range":"1872","text":"1785"},{"range":"1873","text":"1787"},{"range":"1874","text":"1859"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1875","text":"1876"},{"range":"1877","text":"1861"},[2913,2929],"[hardwareReduce, weight]",[1393,1395],"[_getExam, petList]",[21161,21162],"",[21161,21161],"\\",[21367,21368],[21367,21367],[22472,22473],[22472,22472],[22678,22679],[22678,22678],[23781,23782],[23781,23781],[23987,23988],[23987,23987],[25424,25425],[25424,25424],[25630,25631],[25630,25630],[26694,26695],[26694,26694],[26900,26901],[26900,26900],[28058,28059],[28058,28058],[28264,28265],[28264,28264],[44144,44145],[44144,44144],[44350,44351],[44350,44350],[44896,44897],[44896,44896],[45102,45103],[45102,45102],[51458,51475],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[52174,52194],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[52357,52369],"[echarsData, getOption]",[6560,6583],"[finishScan, inputIndex, newData, patientId]",[7054,7073],"[inputIndex, rulerConfirmCount]",[7708,7715],"[petId, petLengthDataConvert, petMessage]",[8357,8395],"[inputIndex, rulerConfirmCount, rulerMeasureValue]",[8829,8840],"[bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",[3366,3368],"[listDate]",[5113,5125],"[letterListCopy, phoneListCopy, searchText]",[2680,2682],"[setReceiveBroadcastHardwareInfoFun]",[3991,4021],"[devicesList, receiveBroadcastHardwareInfo]",[3289,3291],"[hardwareList]",[2304,2304],", [callBack, timers]",[2013,2048],"[selectHardwareType, hardwareList, hardwareInfo]",[12789,12790],[12789,12789],[12803,12804],[12803,12803],[885,887],"[initSelectVale, listArr]",[4564,4581],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[1031,1033],"[_getExam]",[8309,8321],"[getPetTemperatureData, petMessage]",[8517,8519],"[storage.userId]",[8347,8354],"[callBack, prediction, timeNum, value]",[8995,9015],"[mellaConnectStatus, value]",[2313,2328],"[callBack, carouselIndex]",[6578,6580],"[_noUSB, _send, blueSearch]",[7225,7245],"[hardwareList, selectHardwareInfo, selectHardwareType]",[75103,75104],[75103,75103],[9307,9319],[9474,9483],"[getPetTemperatureData, reRender, saveNum]",[9679,9681]]