[{"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/linkEquipment.jsx":"1","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/index.js":"2","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/praviders/Praviders.jsx":"3","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/editPetInfo/EditPetInfo.jsx":"4","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/orgAndPractice/InviteTeam.jsx":"5","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/AddDevice.jsx":"6","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/clinicalStudyPage/index.jsx":"7","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/biggiePage/Biggie.jsx":"8","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/petTable/index.jsx":"9","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/phoneBook/PhoneBook.jsx":"10","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/home/Home.jsx":"11","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/heard/Heard.js":"12","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/AddYuding.jsx":"13","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/createAccount/ishavePMS/IsHavePMS.jsx":"14","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/unassigned/Unassigned.jsx":"15","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/reducers/userReduce.js":"16","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/areaCode/country.js":"17","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/allPetsPage/index.jsx":"18","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/userAction.js":"19","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/userType.js":"20","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/measure/NorMalMeasurement.jsx":"21","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/areaCode/imgArray.js":"22","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/index.js":"23","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/scanPage/components/scanPet.jsx":"24","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/selectExam/SelectExam.jsx":"25","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorAddPet/DoctorAddPet.jsx":"26","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/orgAndPractice/NewOrganization.jsx":"27","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/temporaryStorage.js":"28","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/FetchUtil.js":"29","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/addScheduledPet/index.jsx":"30","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/historyTable/index.jsx":"31","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/index.jsx":"32","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/PetsUI.jsx":"33","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/biggiePage/index.jsx":"34","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/appversion.js":"35","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/DoctorSelectScheduledExam.jsx":"36","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/px.js":"37","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/myModal/MyModal.jsx":"38","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/headerItem.jsx":"39","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/petAction.js":"40","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/signIn/resetPassword/ResetPassword.jsx":"41","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/admin_VetProfile/Veterinarians.jsx":"42","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/index.js":"43","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/DoctorSelectAllExam.jsx":"44","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/createAccount/newOrganization/NewOrganization.jsx":"45","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/petAndParents/PetAndParents.jsx":"46","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/mouseDiv/MouseDiv.js":"47","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/FetchUtil3.js":"48"},{"size":6126,"mtime":1657529691549,"results":"49","hashOfConfig":"50"},{"size":555,"mtime":1655269876082,"results":"51","hashOfConfig":"50"},{"size":6255,"mtime":1655269876067,"results":"52","hashOfConfig":"50"},{"size":40197,"mtime":1655719343130,"results":"53","hashOfConfig":"50"},{"size":13114,"mtime":1655269876064,"results":"54","hashOfConfig":"50"},{"size":14344,"mtime":1656392763259,"results":"55","hashOfConfig":"50"},{"size":54973,"mtime":1657507971278,"results":"56","hashOfConfig":"50"},{"size":4467,"mtime":1655726154499,"results":"57","hashOfConfig":"50"},{"size":11797,"mtime":1655464363174,"results":"58","hashOfConfig":"50"},{"size":7938,"mtime":1655269876168,"results":"59","hashOfConfig":"50"},{"size":6204,"mtime":1657515873237,"results":"60","hashOfConfig":"50"},{"size":48353,"mtime":1657521583745,"results":"61","hashOfConfig":"50"},{"size":12510,"mtime":1655465386474,"results":"62","hashOfConfig":"50"},{"size":1605,"mtime":1655269876046,"results":"63","hashOfConfig":"50"},{"size":38143,"mtime":1656483089194,"results":"64","hashOfConfig":"50"},{"size":340,"mtime":1655452584535,"results":"65","hashOfConfig":"50"},{"size":17767,"mtime":1655269876086,"results":"66","hashOfConfig":"50"},{"size":7436,"mtime":1655462758292,"results":"67","hashOfConfig":"50"},{"size":280,"mtime":1655452088388,"results":"68","hashOfConfig":"50"},{"size":57,"mtime":1655451970438,"results":"69","hashOfConfig":"50"},{"size":137339,"mtime":1655378427105,"results":"70","hashOfConfig":"50"},{"size":11196,"mtime":1655269876151,"results":"71","hashOfConfig":"50"},{"size":85,"mtime":1655451978574,"results":"72","hashOfConfig":"50"},{"size":14822,"mtime":1656669619162,"results":"73","hashOfConfig":"50"},{"size":12336,"mtime":1655269876068,"results":"74","hashOfConfig":"50"},{"size":38775,"mtime":1655269876050,"results":"75","hashOfConfig":"50"},{"size":15732,"mtime":1655269876064,"results":"76","hashOfConfig":"50"},{"size":1251,"mtime":1655269876170,"results":"77","hashOfConfig":"50"},{"size":3314,"mtime":1655269876084,"results":"78","hashOfConfig":"50"},{"size":12674,"mtime":1655686821305,"results":"79","hashOfConfig":"50"},{"size":11843,"mtime":1657519719973,"results":"80","hashOfConfig":"50"},{"size":34000,"mtime":1657525764256,"results":"81","hashOfConfig":"50"},{"size":7856,"mtime":1657521203314,"results":"82","hashOfConfig":"50"},{"size":4874,"mtime":1657526743317,"results":"83","hashOfConfig":"50"},{"size":74,"mtime":1657529987141,"results":"84","hashOfConfig":"50"},{"size":38204,"mtime":1654166626112,"results":"85","hashOfConfig":"50"},{"size":2868,"mtime":1655269876168,"results":"86","hashOfConfig":"50"},{"size":1357,"mtime":1655269876167,"results":"87","hashOfConfig":"50"},{"size":10862,"mtime":1656669619163,"results":"88","hashOfConfig":"50"},{"size":513,"mtime":1655454782838,"results":"89","hashOfConfig":"50"},{"size":7379,"mtime":1655269876071,"results":"90","hashOfConfig":"50"},{"size":15338,"mtime":1655269876061,"results":"91","hashOfConfig":"50"},{"size":89,"mtime":1655452097264,"results":"92","hashOfConfig":"50"},{"size":37156,"mtime":1655795177439,"results":"93","hashOfConfig":"50"},{"size":15935,"mtime":1655269876048,"results":"94","hashOfConfig":"50"},{"size":12192,"mtime":1655269876065,"results":"95","hashOfConfig":"50"},{"size":1383,"mtime":1655269876164,"results":"96","hashOfConfig":"50"},{"size":2536,"mtime":1655269876085,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15mxaen",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"105"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"105"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"120"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"102"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"120"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"132"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"102"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/linkEquipment.jsx",["211","212","213","214","215","216","217","218"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/index.js",[],["219","220"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/praviders/Praviders.jsx",[],["221","222"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/editPetInfo/EditPetInfo.jsx",["223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/orgAndPractice/InviteTeam.jsx",["248","249","250","251","252","253","254","255","256","257"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/AddDevice.jsx",["258","259","260","261","262","263","264","265","266","267","268","269","270","271","272"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Input, Button, message, Spin, BackTop } from 'antd';\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\n\nimport { devicesTitleHeight } from '../../utils/InitDate'\nimport electronStore from '../../utils/electronStore';\nimport blueSearch from './../../assets/img/blueSerch.png'\nimport biggieHome from './../../assets/img/searchType-biggieHome.png'\nimport biggiePro from './../../assets/img/searchType-biggiePro.png'\nimport mellaHome from './../../assets/img/searchType-home.png'\nimport mellaPro from './../../assets/img/searchType-mellaPro.png'\nimport maeBowl from './../../assets/img/searchType-maeBowl.png'\nimport other from './../../assets/img/searchType-other.png'\nimport possum from './../../assets/img/searchType-possum.png'\nimport rfid from './../../assets/img/searchType-rfid.png'\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport back_white from '../../assets/img/back-white.png'\nimport back_hui from '../../assets/img/back-hui.png'\nimport redclose from '../../assets/img/redclose.png'\nimport MyModal from './../../utils/myModal/MyModal'\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport './mainbody.less'\nimport { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList } from '../../store/actions';\n\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n    //是否有底座设备\n    const [noUSB, setNoUSB] = useState(false)\n    //设备列表\n    const [devicesList, setDevicesList] = useState([])\n    //选择的设备\n    const [selectDevice, setSelectDevice] = useState(null)\n    //重命名\n    const [reName, setReName] = useState('')\n    //房间号\n    const [examRoom, setExamRoom] = useState('')\n    //已经保存过的设备的macid\n    const [saveDeviceMac, setSaveDeviceMac] = useState([])\n    //顶部文本\n    const [topText, setTopText] = useState(' Pair Device')\n\n    //初始化\n    useEffect(() => {\n        setNoUSB(false)\n        setDevicesList([])\n        setSelectDevice(null)\n        setReName('')\n        setSaveDeviceMac([])\n        setTopText(' Pair Device')\n        //组件渲染完毕后要先清空广播的硬件信息\n        setReceiveBroadcastHardwareInfoFun({\n            deviceType: '',\n            macId: '',\n            name: ''\n        })\n    }, [])\n\n    useEffect(() => {\n\n        if (hardwareList.length > 0) {\n            let saveDeviceMac = []\n            for (let i = 0; i < hardwareList.length; i++) {\n                const element = hardwareList[i];\n                for (let j = 0; j < element.devices.length; j++) {\n                    const device = element.devices[j];\n                    saveDeviceMac.push(device.mac)\n                }\n            }\n            setSaveDeviceMac(saveDeviceMac)\n\n        }\n    }, [hardwareList])\n    useEffect(() => {\n        if (!selectDevice) {\n            setTopText(' Pair Device')\n        } else {\n            setTopText('Device Connected')\n        }\n\n    }, [selectDevice])\n    useEffect(() => {\n        setNoUSB(!isHaveUsbDevice)\n    }, [isHaveUsbDevice])\n    useEffect(() => {\n        let sameFlog = devicesList.some((device, index) => {\n            return device.macId === receiveBroadcastHardwareInfo.macId\n        })\n        if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n            return\n        }\n        console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n        let deviceArr = [].concat(devicesList)\n        deviceArr.push(receiveBroadcastHardwareInfo)\n        setDevicesList(deviceArr)\n\n\n\n    }, [receiveBroadcastHardwareInfo])\n\n    const addDevice = () => {\n        //从redux拿到列表中的所有硬件设备 hardwareList\n        console.log('hardwareList', hardwareList);\n        //拿到硬件的macid 类型 名称 房间号\n        console.log('selectDevice', selectDevice);\n        let sameFlog = hardwareList.some((item, index) => {\n            return item.type === selectDevice.deviceType\n        })\n        let hardwareArr = [].concat(hardwareList)\n        let { deviceType, macId, name } = selectDevice\n        let newDevice = {\n            name: reName || name,\n            mac: macId,\n            deviceType,\n            examRoom: examRoom || '',\n        }\n        console.log('newDevice', newDevice);\n        if (sameFlog) {\n            //相同就代表有这个硬件类型,可以直接去push\n\n            for (let i = 0; i < hardwareArr.length; i++) {\n                if (hardwareArr[i].type === selectDevice.deviceType) {\n                    hardwareArr[i].devices.push(newDevice)\n                    break\n                }\n            }\n\n        } else {\n            //没有就要新建一个硬件类型\n            let json = {\n                type: selectDevice.deviceType,\n                devices: [newDevice]\n            }\n            hardwareArr.push(json)\n        }\n        setReName('')\n        setExamRoom('')\n        setHardwareList(hardwareArr)\n\n        return newDevice\n\n\n    }\n\n    const body = () => {\n\n        if (selectDevice) {\n            return <div className=\"addDevice1 flex\">\n                <div className=\"addDeviceTop flex\">\n                    <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n                        {`this ${selectDevice.name} device?`}</div>\n\n                    <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n                        {`SN: ${selectDevice.macId}`}</div>\n\n\n                    <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n                        <input type=\"text\" style={{ height: px(45) }}\n                            value={reName}\n                            onChange={(value) => {\n                                setReName(value.target.value)\n\n                            }}\n                            placeholder={`${selectDevice.name} Device Name`}\n                        />\n                    </div>\n                    <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n                        <input type=\"text\" style={{ height: px(45) }}\n                            value={examRoom}\n                            onChange={(value) => {\n                                setExamRoom(value.target.value)\n\n                            }}\n                            placeholder={`Exam Room Name`}\n                        />\n                    </div>\n                    <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n                        on the Exam Room. Write<br /> the name\n                        on the sticker provided so it is easy\n                        to select<br /> your device in the future.</div>\n                </div>\n                <div className=\"addDeviceFoot flex\">\n                    <div className=\"btn\"\n                        onClick={() => {\n                            addDevice()\n                            setSelectDevice(null)\n                            setSelectHardwareType('add')\n\n                        }}\n                    >\n                        <p className='btnText'>Add Another Device</p>\n                    </div>\n                    <div className=\"btn\"\n                        onClick={() => {\n                            let newDevice = addDevice()\n                            setSelectHardwareType(selectDevice.deviceType)\n\n\n                            electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n                            setSelectDevice(null)\n                        }}\n                    >\n                        <p className='btnText'>Finish</p>\n                    </div>\n                </div>\n\n\n            </div>\n        } else {\n            if (noUSB) {\n                return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n                    <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n                    <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n                </div>\n            } else {\n                if (devicesList.length === 0) {\n                    let options = (val) => {\n                        let arr = []\n                        if (val === 1) {\n                            arr = [mellaPro, mellaHome, biggiePro, biggieHome, rfid]\n                        } else {\n                            arr = [possum, maeBowl, other]\n                        }\n                        let option = arr.map((item, index) => {\n                            let imgWidth = px(80)\n                            imgWidth = index === 2 ? px(65) : imgWidth\n                            return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                                <div className=\"searchType-item\" key={index} >\n                                    <img src={item} alt=\"\" width={imgWidth} />\n                                </div>\n                            </li>)\n                        })\n                        return (\n                            <ul>\n                                {option}\n                            </ul>\n                        )\n                    }\n                    return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n                        <div className=\"addDeviceContent\">\n                            <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                                    <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                                </div>\n                            </div>\n                            <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n                            </div>\n                            <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                                <div className=\"btnText\">\n                                    Scan For Devices\n                                </div>\n                            </div>\n                            <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                                Or\n                            </div>\n                            <div className=\"select\">\n                                Select device type to\n                            </div>\n                            <div className=\"add\">\n                                add manually\n                            </div>\n\n                            <div className=\"item\">\n                                {options(1)}\n                                {options(2)}\n                            </div>\n                        </div>\n\n                        {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n                          \n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n                    </div>\n                } else {\n                    let options = devicesList.map((item, index) => {\n\n                        let flog = saveDeviceMac.some((device, index) => {\n                            return device === item.macId\n                        })\n                        let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n                        return <li\n                            className='flex'\n                            style={{ marginBottom: px(20) }}\n                            key={`${index}`}\n                            onClick={() => {\n                                if (!flog) {\n                                    setSelectDevice(item)\n\n                                } else {\n                                    message.destroy();\n                                    message.error('This device has already been added')\n                                }\n\n                            }}\n                        >\n\n                            <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n                            <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n                        </li>\n                    })\n                    return <div className='deviceList ' >\n                        <ul>\n                            {options}\n                        </ul>\n                    </div>\n                }\n            }\n        }\n\n    }\n\n    return (\n        <div className='addDevice' style={{ height: bodyHeight }}>\n            <div className=\"addDeviceTitle\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>\n                {topText}\n            </div>\n\n            {body()}\n        </div >\n\n    )\n}\n\n\nAddDevice.propTypes = {\n    bodyHeight: PropTypes.number,\n    devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n    bodyHeight: 0,\n    devicesTypeList: []\n}\nexport default connect(\n    state => ({\n        hardwareReducer: state.hardwareReduce,\n        isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n        receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n        hardwareList: state.hardwareReduce.hardwareList,\n    }),\n    { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/clinicalStudyPage/index.jsx",["273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  message,\n  Input,\n  Menu,\n  Modal,\n  Table,\n  Popconfirm,\n  Tooltip,\n  Select,\n  Spin,\n} from \"antd\";\nimport ReactECharts from \"echarts-for-react\";\nimport propTypes from \"prop-types\";\nimport moment from \"moment\";\nimport {\n  createFromIconfontCN,\n  SyncOutlined,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\nimport Draggable from \"react-draggable\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport { px, mTop } from \"../../utils/px\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport MyModal from \"./../../utils/myModal/MyModal\";\nimport electronStore from \"../../utils/electronStore\";\nimport _ from \"lodash\";\n\nimport ye from \"./../../assets/images/ye1.png\";\nimport er from \"./../../assets/images/er3.png\";\nimport gang from \"./../../assets/images/gang3.png\";\nimport dog from \"./../../assets/images/dog.png\";\nimport cat from \"./../../assets/images/cat.png\";\nimport other from \"./../../assets/images/other.png\";\nimport edit from \"./../../assets/images/edit.png\";\nimport del from \"./../../assets/images/del.png\";\nimport start from \"./../../assets/img/start.png\";\nimport redjinggao from \"./../../assets/img/redjinggao.png\";\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\nimport placement_er from \"./../../assets/images/placement_er.png\";\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\nimport close from \"./../../assets/img/close.png\";\n\nimport \"./clinical.less\";\nimport { fetchRequest } from \"../../utils/FetchUtil1\";\nimport { fetchRequest3 } from \"../../utils/FetchUtil3\";\n\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\nlet storage = window.localStorage;\n\n//定义echarts的数据个数\nconst echartsDataLength = 0;\nconst { Option } = Select;\nlet saveHistoryTime = null;\nconst ClinicalStudy = ({\n  bodyHeight,\n  mellaConnectStatus,\n  mellaMeasureValue,\n  mellaMeasureNum,\n  petDetailInfo,\n}) => {\n  const [units, setUnits] = useState(\"\");\n  const [temperature, setTemp] = useState(0);\n  const echartsElement = useRef(null);\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\n  const [echarsData, setEcharsData] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n\n  const [echarsData1, setEcharsData1] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\n    useState(\"\");\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\n  const [furLength, setFurLength] = useState(\"\");\n  const [heartRate, setHeartRate] = useState(\"\");\n  const [bloodPressure, setBloodPressure] = useState(\"\");\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\n  const [historyData, setHistoryData] = useState([]);\n  const [editRectal, setEditRectal] = useState(\"\");\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\n  const [editVisible, setEditVisible] = useState(false);\n  const [editId, setEditId] = useState(\"\");\n  const [editMemo, setEditMemo] = useState(\"\");\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\n  const [editFurLength, setEditFurLength] = useState(\"\");\n  const [tipSpin, setTipSpin] = useState(false);\n  const [tip, setTip] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [memo, setMemo] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(px(550));\n\n  const clinicalRef = useRef(null);\n  const resize = () => {\n    if (clinicalRef.current) {\n      let { offsetWidth } = clinicalRef.current;\n      //   console.log(\"改变\", offsetWidth);\n      setWindowWidth(offsetWidth);\n    }\n  };\n  const addClinical = () => {\n    console.log(\"调用接口进行保存数据\");\n    let emerData = [];\n    let { Eci, wen0, wen1 } = echarsData;\n    for (let i = 0; i < wen0.length; i++) {\n      const element = wen0[i];\n      let str = {\n        data0: element,\n        data1: wen1[i],\n      };\n      emerData.push(str);\n    }\n\n    saveHistoryTime && clearTimeout(saveHistoryTime);\n    saveHistoryTime = setTimeout(() => {\n      let BCS =\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\n      let respireatoryR =\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\n\n      let roomT =\n        roomTemperature === \"\"\n          ? null\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\n\n      let referenceT =\n        referenceRectalTemperature === \"\"\n          ? null\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\n\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\n\n      let petVitalId = 1;\n\n      let datas = {\n        temperature: parseFloat(temperature), //测量温度\n        roomTemperature: roomT, //室温\n        bodyConditionScore: BCS, //身体状况评分\n        heartRate: hrartR, //心率\n        respiratoryRate: respireatoryR, //呼吸率\n        referenceRectalTemperature: referenceT, //参考腹部温度\n        furLength: furL, //毛发长度\n        bloodPressure: bloodPressure, //血压\n        memo: notes,\n        petVitalTypeId: petVitalId,\n        clinicalDataEntityList: emerData,\n      };\n      if (storage.roleId === `1`) {\n        datas.userId = storage.userId;\n      } else {\n        datas.doctorId = storage.userId;\n        datas.userId = storage.userId;\n      }\n      let { petId, isWalkIn } = petDetailInfo;\n      if (petId && !isWalkIn) {\n        datas.petId = petId;\n        console.log(\"入参数据:\", datas);\n        fetchRequest(`/clinical/addAllClinical`, \"POST\", datas)\n          .then((res) => {\n            console.log(res);\n\n            if (res.flag === true) {\n              console.log(\"上传成功\");\n              message.success(\"Uploaded successfully\");\n              _getHistory11(petDetailInfo.petId);\n            } else {\n              console.log(\"上传失败\");\n\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n            message.error(\"upload failed\");\n          });\n      } else if (isWalkIn) {\n        console.log(\"温度数据保存入参：\", datas);\n\n        fetchRequest(`/clinical/addAllClinical`, \"POST\", datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n\n              _getEmergencyHistory();\n            } else {\n              console.log(\"上传失败\");\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n            message.error(err);\n          });\n      }\n    }, 500);\n  };\n  const _getHistory11 = (petId) => {\n    let historys = [];\n    setLoading(true);\n    fetchRequest(`/pet/getPetExamAndClinicalByPetId/${petId}`, \"GET\", \"\") //userID要自动的\n      .then((res) => {\n        console.log(\"获取历史记录\", res);\n        setLoading(false);\n\n        if (res.flag === true) {\n          let datas = res.data;\n          console.log(\"-------\", datas);\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i];\n\n            let {\n              petId,\n              examId,\n              clinicalDatagroupId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n              modifiedTime,\n            } = data;\n\n            if (!clinicalDatagroupId) {\n              continue;\n            }\n            let Tem = temperature;\n            if (clinicalDataEntity) {\n              Tem = Tem || clinicalDataEntity.data0;\n            }\n            // console.log('==============', Tem);\n            Tem = Tem ? Tem : 0;\n\n            let time = null;\n            if (\n              modifiedTime &&\n              `${modifiedTime}` !== \"\" &&\n              `${modifiedTime}` !== `undefined`\n            ) {\n              time = modifiedTime;\n            } else {\n              time = createTime;\n            }\n            let json = {\n              time,\n              Temp: Tem,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(json);\n          }\n          console.log(\"---\", historys);\n          let historyData = [];\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i];\n            let {\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              examId,\n            } = history;\n            // console.log('--------', history.placement);\n            let placement = history.placement;\n            if (placement === null || placement === \"\") {\n              placement = 1;\n            }\n            let str = {\n              date: moment(history.time).format(\"MMM DD\"),\n              time: moment(history.time).format(\"hh:mm A\"),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              key: examId,\n            };\n            historyData.push(str);\n          }\n          // this.setState({\n          //     historyData\n          // })\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          loading: false,\n        });\n        console.log(err);\n      });\n  };\n  const _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    setLoading(true);\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, \"GET\", \"\") //userID要自动的\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let Tem = temperature;\n              try {\n                Tem = temperature || clinicalDataEntity.data0;\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n              };\n\n              historys.push(str);\n            }\n          }\n\n          //把所有数据拿完后做个排序\n\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const getOption = () => {\n    let min, max;\n    if (units === \"℃\") {\n      min = 25;\n      max = 45;\n    } else {\n      min = 75;\n      max = 115;\n    }\n    let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci) ? echarsData : echarsData1;\n    let option = {\n      color: [\"#81b22f\"],\n      tooltip: {\n        /*返回需要的信息*/\n        trigger: \"axis\",\n        triggerOn: \"mousemove\",\n        enterable: true,\n        formatter: function (param) {\n          var value = param[0].value;\n          return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\n            1\n          )}${units}</div>`;\n        },\n      },\n      xAxis: {\n        name: \"SPL\",\n        nameLocation: \"end\",\n        nameTextStyle: {\n          align: \"left\",\n        },\n        type: \"category\",\n        data: Eci,\n        axisLine: {\n          lineStyle: {\n            // 设置x轴颜色\n            color: \"#A0A0A0\",\n            show: true,\n          },\n        },\n        // 设置X轴数据旋转倾斜\n        axisLabel: {\n          rotate: 0, // 旋转角度\n          interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\n        },\n      },\n      yAxis: {\n        name: \"temperature\",\n        type: \"value\",\n        min, // 设置y轴刻度的最小值\n        max, // 设置y轴刻度的最大值\n        splitNumber: 0, // 设置y轴刻度间隔个数\n        nameTextStyle: {\n          padding: [0, 0, 0, 8],\n          // backgroundColor: 'pink',\n          width: \"1200px\",\n          // fontSize: 20,\n          align: \"left\",\n        },\n\n        axisLine: {\n          lineStyle: {\n            // 设置x轴颜色\n            color: \"#A0A0A0\",\n            show: true,\n          },\n        },\n        splitLine: {\n          show: false,\n        },\n      },\n      series: [\n        {\n          name: \"模拟数据\",\n          type: \"line\",\n          showSymbol: false,\n          hoverAnimation: false,\n          // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\n          data: wen0,\n          smooth: 0.5,\n          symbol: \"none\",\n          // itemStyle: {\n          //     normal: {\n\n          //     }\n          // }\n          lineStyle: {\n            // 系列级个性化折线样式\n            width: 2,\n            type: \"solid\",\n            color: {\n              type: \"linear\",\n              x: 0,\n              y: 1,\n              x2: 0,\n              y2: 0,\n              colorStops: [\n                {\n                  offset: 0.5,\n                  color: \"#47C2ED\", // 0% 处的颜色  蓝\n                },\n                {\n                  offset: 1,\n                  color: \"#78D35D\", // 50% 处的颜色  绿\n                },\n                // {\n                //   offset: 1, color: 'red' // 100% 处的颜色   红\n                // }\n              ],\n              globalCoord: false, // 缺省为 false\n            },\n          },\n        },\n      ],\n    };\n    return option;\n  };\n  const _status = () => {\n    let text = \"\",\n      unit = \"\",\n      temColor = \"\";\n    let Temp = parseFloat(temperature);\n    if (mellaConnectStatus === \"disconnected\") {\n      if (!showHistoryEchart) {\n        Temp = \"\";\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      } else {\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      }\n    }else if(mellaConnectStatus === \"connected\"){\n      Temp = \"\";\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n    }\n     else {\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n      if (Temp > 15) {\n        unit = units;\n        if (Temp > 39) {\n          text = \"High\";\n          temColor = \"#E1206D\";\n        } else if (Temp < 31) {\n          text = \"Low\";\n          temColor = \"#47C2ED\";\n        } else {\n          text = \"Normal\";\n          temColor = \"#78D35D\";\n        }\n      }\n    }\n    let temp = \"\";\n    if (`${Temp}` !== \"NaN\" && Temp !== \"\") {\n      temp =\n        units === \"℉\" ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1);\n    }\n    let lowFlog = false;\n    if (unit === \"℃\") {\n      if (temp < 24.8) {\n        lowFlog = true;\n      }\n    } else {\n      if (temp < 76.6) {\n        lowFlog = true;\n      }\n    }\n    return (\n      <div\n        className=\"Tem\"\n        style={{\n          color: temColor,\n          right: px(100),\n          bottom: mTop(120),\n          pointerEvents: \"none\",\n        }}\n      >\n        {mellaConnectStatus !== \"isMeasuring\" ? (\n          showHistoryEchart ? (\n            <>\n              <span style={{ fontSize: px(46),fontWeight:'bold' }}>\n                {temp} <sup style={{ fontSize: px(28),fontWeight:'bold' }}>{units}</sup>\n              </span>\n              <br />\n              {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\n\n              <span\n                style={{ fontSize: px(32), color: \"#8a8a8a\",fontWeight:'bold' }}\n              >{`History`}</span>\n            </>\n          ) : (\n            <>\n              <span style={{ fontSize: px(46) ,fontWeight:'bold'}}>\n                {temp < 3 ? null : temp}{\" \"}\n                <sup style={{ fontSize: px(28),fontWeight:'bold' }}>{unit}</sup>\n              </span>\n              <br />\n              <span style={{ fontSize: px(32),fontWeight:'bold' }}>{text}</span>\n            </>\n          )\n        ) : lowFlog ? (\n          <>\n            <span style={{ fontSize: px(46),fontWeight:'bold' }}>{\"Low\"}</span>\n            <br />\n          </>\n        ) : (\n          <>\n            <span style={{ fontSize: px(46),fontWeight:'bold' }}>\n              {temp} <sup style={{ fontSize: px(28),fontWeight:'bold' }}>{unit}</sup>\n            </span>\n            <br />\n          </>\n        )}\n      </div>\n    );\n  };\n  const handleChange = (index) => {\n    console.log(\"---------\", index);\n    setFurLength(index);\n  };\n  const _petCharacteristics = () => {\n    let placeholder = \"\";\n    switch (`${furLength}`) {\n      case \"1\":\n        placeholder = \"smooth\";\n        break;\n      case \"2\":\n        placeholder = \"short\";\n        break;\n      case \"3\":\n        placeholder = \"medium\";\n        break;\n      case \"4\":\n        placeholder = \"long\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div\n        className=\"petChaeacteristics\"\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\n      >\n        <div className=\"child\" style={{ marginTop: mTop(30) }}>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Room Temperature: </p>\n            <Input\n              className=\"inp\"\n              // style={{ border: 'none', outline: 'medium' }}\n              // style={{ width: px(105), height: mTop(33), fontSize: px(18), marginRight: px(6) }}\n\n              value={`${roomTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRoomTemperature(str);\n              }}\n            />\n            <span\n              style={{\n                position: \"absolute\",\n                top: \"5%\",\n                right: \"5%\",\n                display: \"table-cell\",\n                whiteSpace: \"nowrap\",\n                paddingTop: \"5px\",\n                paddingRight: \"5px\",\n              }}\n            >\n              ℉\n            </span>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Reference Rectal Temperature: </p>\n            <Input\n              className=\"inp\"\n              // style={{ border: 'none', outline: 'medium' }}\n\n              value={`${referenceRectalTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setReferenceRectalTemperature(str);\n              }}\n            />\n            <span\n              style={{\n                position: \"absolute\",\n                top: \"10%\",\n                right: \"5%\",\n                display: \"table-cell\",\n                whiteSpace: \"nowrap\",\n                paddingTop: \"5px\",\n                paddingRight: \"5px\",\n              }}\n            >\n              ℉\n            </span>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Body Condition Score: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bodyConditionScore}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBodyConditionScore(str);\n              }}\n            />\n          </div>\n          <div className=\"furLength\">\n            <p style={{ width: \"150px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={handleChange}\n              style={{\n                width: \"105px\",\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={placeholder}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Heart Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${heartRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setHeartRate(str);\n              }}\n            />\n            <span\n              style={{\n                position: \"absolute\",\n                top: \"2%\",\n                right: \"5%\",\n                display: \"table-cell\",\n                whiteSpace: \"nowrap\",\n                paddingTop: \"5px\",\n                paddingRight: \"1px\",\n              }}\n            >\n              bpm\n            </span>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Blood Pressure: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bloodPressure}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBloodPressure(str);\n              }}\n            />\n            <span\n              style={{\n                position: \"absolute\",\n                top: \"2%\",\n                right: \"5%\",\n                display: \"table-cell\",\n                whiteSpace: \"nowrap\",\n                paddingTop: \"5px\",\n                paddingRight: \"5px\",\n              }}\n            >\n              mm\n            </span>\n          </div>\n        </div>\n        <div className=\"child\" style={{ marginBottom: px(40) }}>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Respiratory Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${respiratoryRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRespiratoryRate(str);\n              }}\n            />\n            <span\n              style={{\n                position: \"absolute\",\n                top: \"2%\",\n                right: \"5%\",\n                display: \"table-cell\",\n                whiteSpace: \"nowrap\",\n                paddingTop: \"5px\",\n                paddingRight: \"1px\",\n              }}\n            >\n              bpm\n            </span>\n          </div>\n          <div className=\"furLength\" id=\"_bodyType\"></div>\n        </div>\n      </div>\n    );\n  };\n  const _history = () => {\n    const _del = (key, record) => {\n      // console.log(\"删除\", key, record);\n      /**------------这里还要删除后台的数据------------ */\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, \"DELETE\").then(\n        (res) => {\n          if (res.flag === true) {\n            const historyData1 = [...historyData];\n            console.log(\"删除成功\", historyData1);\n            setHistoryData(\n              historyData1.filter((item) => item.historyId !== key)\n            );\n          } else {\n            console.log(\"删除失败\");\n          }\n        }\n      );\n    };\n    const _edit = (key, record) => {\n      let {\n        heartRate,\n        bloodPressure,\n        respiratoryRate,\n        referenceRectalTemperature,\n        roomTemperature,\n        bodyConditionScore,\n        furLength,\n        note,\n      } = record;\n      console.log(\"转换前：\", record);\n      let editHeartRate =\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\n      let editBloodPressure =\n        bloodPressure !== null && bloodPressure !== undefined\n          ? bloodPressure\n          : \"\";\n      let editRespiratoryRate =\n        respiratoryRate !== null && respiratoryRate !== undefined\n          ? respiratoryRate\n          : \"\";\n      let editRectal =\n        referenceRectalTemperature !== null &&\n        referenceRectalTemperature !== undefined\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editRoomTemperature =\n        roomTemperature !== null && roomTemperature !== undefined\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editBodyConditionScore =\n        bodyConditionScore !== null && bodyConditionScore !== undefined\n          ? bodyConditionScore\n          : \"\";\n      let editFurLength = furLength;\n      let mome = note ? note : \"\";\n\n      console.log(\n        editRectal,\n        editRoomTemperature,\n        editHeartRate,\n        editBloodPressure,\n        editRespiratoryRate\n      );\n\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\n      setEditRectal(editRectal);\n      setEditRoomTemperature(editRoomTemperature);\n      setEditHeartRate(editHeartRate);\n      setEditBloodPressure(editBloodPressure);\n      setEditRespiratoryRate(editRespiratoryRate);\n      setEditVisible(true);\n      setEditId(key);\n      setEditMemo(record.note);\n      setEditBodyConditionScore(editBodyConditionScore);\n      setEditFurLength(editFurLength);\n      setMemo(mome);\n    };\n    const see = (id, record) => {\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      console.log(id, record);\n      setTip(\"data is loading\");\n      setTipSpin(true);\n      fetchRequest3(`/exam/getClinicalDataByExamId/${id}`, \"GET\")\n        .then((res) => {\n          console.log(\"此条记录的全部数据：\", res);\n          setTip(\"\");\n          setTipSpin(false);\n          if (res.flag) {\n            let datas = res.data.clinicalDataEntityList;\n            if (datas) {\n              let echarsData = {\n                Eci: [],\n                wen0: [],\n                wen1: [],\n              };\n              let { wen0, wen1, Eci } = echarsData;\n              for (let i = 0; i < datas.length; i++) {\n                let { data0, data1 } = datas[i];\n\n                Eci.push(i);\n                if (units === \"℃\") {\n                  wen0.push(data0);\n                  wen1.push(data1);\n                } else {\n                  wen0.push(data0 * 1.8 + 32);\n                  wen1.push(data1 * 1.8 + 32);\n                }\n              }\n              let Temp = datas[datas.length - 1].data0 || \"\";\n              console.log(\"----------------\", Temp);\n              setEcharsData(echarsData);\n              setTemp(Temp);\n              setShowHistoryEchart(true);\n            }\n          }\n        })\n        .catch((err) => {\n          setTip(\"\");\n          setTipSpin(false);\n          console.log(err);\n        });\n    };\n    const isflog = window.screen.height < 1000 ? true : false;\n\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        width: \"16%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          // console.log('狩猎:', text, record, index);\n          //record:\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                alignItems: \"center\",\n                padding: `${px(18)}px 0`,\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" style={{ width: px(25) }} />\n              </Popconfirm>\n              {petDetailInfo.isWalkIn ? (\n                <div\n                  className=\"assign\"\n                  style={{\n                    width: mTop(60),\n                    height: mTop(28),\n                    fontSize: px(14),\n                  }}\n                  onClick={() => {\n                    console.log(text, record, index);\n                    this.setState({\n                      visible: true,\n                      seleceEmergencies: record,\n                    });\n                  }}\n                >\n                  Assign\n                </div>\n              ) : (\n                <>\n                  <img\n                    src={edit}\n                    alt=\"\"\n                    style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                  />\n\n                  <img\n                    src={start}\n                    alt=\"\"\n                    style={{ width: px(25) }}\n                    onClick={() => see(record.historyId, record)}\n                  />\n                </>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        width: \"14%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        width: \"14%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: `Temp(${units})`,\n        // title: `Temp(℉)`,\n        key: \"temp\",\n        dataIndex: \"temp\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        width: \"14%\",\n        render: (text, record, index) => {\n          // console.log(text, record);\n\n          /**\n           * bag：温度数值前的圆圈的背景颜色\n           * tem：展示的温度\n           * endvalue:将从后台得到的数据全部转化成华氏度\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           *\n           */\n\n          let bag = \"\",\n            tem = \"\";\n\n          let endValue =\n            text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10;\n          let min = 100.4,\n            max = 102.56;\n\n          if (endValue > max) {\n            bag = \"#E1206D\";\n          } else if (endValue < min) {\n            bag = \"#98DA86\";\n          } else {\n            bag = \"#58BDE6\";\n          }\n\n          if (units === \"℃\") {\n            if (text) {\n              tem = `${text}${units}`;\n              if (text > 55) {\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\n              } else {\n                tem = `${text.toFixed(1)}${units}`;\n              }\n            }\n          } else {\n            if (text) {\n              if (text > 55) {\n                tem = `${text}${units}`;\n              } else {\n                tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${units}`;\n              }\n            }\n          }\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {tem ? (\n                <div\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"8px\",\n                    backgroundColor: bag,\n                    marginRight: \"3px\",\n                  }}\n                />\n              ) : null}\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n            </div>\n          );\n        },\n      },\n      {\n        title: `Rectal Temperature`,\n        key: \"referenceRectalTemperature\",\n        dataIndex: \"referenceRectalTemperature\",\n        width: \"15%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          // console.log('肛温的值：', text);\n          let num = text;\n          if (text !== null) {\n            num = (text * 1.8 + 32).toFixed(1);\n          }\n\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {text !== null && (\n                <p style={{ margin: 0, padding: 0 }}>\n                  {num} <span>{\"℉\"}</span>\n                </p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Placement\",\n        dataIndex: \"placement\",\n        key: \"placement\",\n        align: \"center\",\n        width: \"15%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          switch (record.placement) {\n            case 1:\n              return (\n                //腋温\n                <div>\n                  <img src={palcement_ye} alt=\"\" />\n                </div>\n              );\n            case 3:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 2:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 4:\n              return (\n                //耳温\n                <div>\n                  <img src={placement_er} alt=\"\" />\n                </div>\n              );\n            default:\n              return null;\n          }\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        width: \"12%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        render: (text, record, index) => {\n          return <p style={{ width: \"100%\" }}>{text}</p>;\n        },\n      },\n    ];\n\n    let hisHe = mTop(200);\n    try {\n      let historyElement = document.querySelectorAll(\n        \"#clinicalMeasure11 .historyTable\"\n      );\n      hisHe = historyElement[0].clientHeight - mTop(100);\n    } catch (error) {}\n\n    return (\n      <div className=\"historyTable\" style={{ height: \"90%\" }}>\n        <Table\n          columns={columns}\n          loading={loading}\n          dataSource={historyData}\n          rowKey={(columns) => columns.historyId}\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\n          pagination={false}\n          scroll={{\n            y: hisHe,\n          }}\n        />\n      </div>\n    );\n  };\n  const _editModal = () => {\n    function save() {\n      let datas = {\n        memo: memo,\n        bodyConditionScore: parseInt(editBodyConditionScore),\n        furLength: parseInt(editFurLength),\n        heartRate: editHeartRate,\n        bloodPressure: editBloodPressure,\n        respiratoryRate: editRespiratoryRate,\n      };\n      if (editRoomTemperature) {\n        datas.roomTemperature = (\n          (parseFloat(editRoomTemperature) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n      if (editRectal) {\n        datas.referenceRectalTemperature = (\n          (parseFloat(editRectal) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n\n      console.log(\"入参：\", datas, editId);\n      setEditVisible(false);\n      setTip(\"Data is being modified\");\n      setTipSpin(true);\n\n      fetchRequest(`/pet/updatePetExam/${editId}`, \"POST\", datas)\n        .then((res) => {\n          console.log(res);\n          setTipSpin(false);\n          setTip(\"\");\n          message.success(\"Data modified successfully\");\n\n          _getHistory11(petDetailInfo.petId);\n        })\n        .catch((err) => {\n          setTipSpin(false);\n          setTip(\"\");\n\n          message.success(\" Data modification failed\");\n\n          console.log(err);\n        });\n    }\n\n    let furLength = \"\";\n    if (editFurLength !== null && editFurLength !== undefined) {\n      switch (`${editFurLength}`) {\n        case \"1\":\n          furLength = \"smooth\";\n          break;\n        case \"2\":\n          furLength = \"short\";\n          break;\n        case \"3\":\n          furLength = \"medium\";\n          break;\n        case \"4\":\n          furLength = \"long\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => {}}\n            onBlur={() => {}}\n            // end\n          >\n            Modification history information\n          </div>\n        }\n        visible={editVisible}\n        // visible={true}\n        onCancel={() => {\n          setEditVisible(false);\n        }}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRoomTemperature}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n\n                setEditRoomTemperature(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRectal}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setEditRectal(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBodyConditionScore}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n\n                setEditBodyConditionScore(str);\n              }}\n            />\n          </div>\n\n          <div className=\"bodyType11\">\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={(index) => {\n                console.log(index);\n                setEditFurLength(index);\n              }}\n              style={{\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={furLength}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editHeartRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditHeartRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBloodPressure}\n              onChange={(item) => {\n                setEditBloodPressure(item.target.value);\n              }}\n            />\n            <span>mm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRespiratoryRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditRespiratoryRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"2\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              value={memo}\n              onChange={(val) => {\n                setMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n\n          <div className=\"btn\" onClick={save}>\n            Save\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n  const _foot = () => {\n    let lbgc = \"\",\n      rbgc = \"\";\n    if (isPetCharacteristics) {\n      lbgc = \"rgba(25,173,228,0.5)\";\n      rbgc = \"rgba(105,201,237,1)\";\n    } else {\n      lbgc = \"rgba(105,201,237,1)\";\n      rbgc = \"rgba(25,173,228,0.5)\";\n    }\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\" style={{ height: px(40) }}>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: lbgc }}\n            onClick={() => setIsPetCharacteristics(true)}\n          >\n            Pet Characteristics\n          </div>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: rbgc }}\n            onClick={() => setIsPetCharacteristics(false)}\n          >\n            History\n          </div>\n        </div>\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\n      </div>\n    );\n  };\n  //获取本地数据\n  const getLocalSetting = () => {\n    let settings = {\n      isHua: true,\n      is15: true,\n      self_tarting: false, //自启动\n      isBacklight: true,\n      isBeep: true,\n      backlightTimer: { length: 140, number: \"45\" },\n      autoOff: { length: 0, number: \"30\" },\n    };\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n  };\n\n  useEffect(() => {\n    if (petDetailInfo.petId) {\n      _getHistory11(petDetailInfo.petId);\n    } else if (petDetailInfo.isWalkIn) {\n      _getEmergencyHistory();\n    }\n    return () => {};\n  }, [petDetailInfo]);\n\n  useEffect(() => {\n    return () => {\n      saveHistoryTime && clearTimeout(saveHistoryTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", resize);\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    // console.log('监听', mellaMeasureValue);\n    setTemp(mellaMeasureValue);\n    let { Eci, wen0, wen1 } = echarsData;\n    //两个数组合并成一个数组\n    let EciCopy = [...Eci];\n\n    let win0Copy = [...wen0];\n    let wen1Copy = [...wen1];\n    EciCopy.push(EciCopy.length + 1);\n    win0Copy.push(mellaMeasureValue);\n    wen1Copy.push(mellaMeasureValue);\n    let json = {\n      Eci: EciCopy,\n      wen0: win0Copy,\n      wen1: wen1Copy,\n    };\n\n    setEcharsData(json);\n\n    let Eci1 = echarsData1.Eci;\n    let wen01 = echarsData1.wen0;\n    let wen11 = echarsData1.wen1;\n    let EciCopy1 = [...Eci1];\n\n    let win0Copy1 = [...wen01];\n    let wen1Copy1 = [...wen11];\n    EciCopy1.push(EciCopy1.length + 1);\n    let num =\n      units === \"℃\"\n        ? mellaMeasureValue\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\n    win0Copy1.push(num);\n    wen1Copy1.push(num);\n    let json1 = {\n      Eci: EciCopy1,\n      wen0: win0Copy1,\n      wen1: wen1Copy1,\n    };\n    setEcharsData1(json1);\n\n    // const option = getOption();\n    // echartsElement.current.getEchartsInstance().setOption(option);\n    return () => {};\n  }, [mellaMeasureNum]);\n\n  useEffect(() => {\n    // console.log(\n    //   \"=======监听mellaConnectStatus\",\n    //   mellaConnectStatus,\n    //   echarsData.Eci.length\n    // );\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\n      addClinical();\n    }\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\n      setEcharsData({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n    }\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setShowHistoryEchart(false);\n    }\n\n    setMellaStatus(mellaConnectStatus);\n    return () => {};\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    const option = getOption();\n    echartsElement.current.getEchartsInstance().setOption(option); // 实时改变\n    return () => {};\n  }, [echarsData]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      getLocalSetting();\n    } else {\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\n    }\n    return () => {};\n  }, []);\n\n  return (\n    <div\n      id=\"clinical\"\n      style={{\n        height: bodyHeight,\n        minWidth: px(200),\n        minHeight: bodyHeight,\n        overflow: \"hidden\",\n      }}\n      ref={clinicalRef}\n    >\n      <div className=\"clinicalTitle\">\n        <Layout>\n          <HeaderItem timeNum={60} />\n        </Layout>\n      </div>\n      <div\n        className=\"clinicalBody\"\n        style={{ width: \"100%\", height: bodyHeight - devicesTitleHeight }}\n      >\n        <div className=\"clinical_top\">\n          <div className=\"r\">\n            {/*顶部按钮Re-sync Base*/}\n            {mellaConnectStatus === \"disconnected\" && (\n              <div\n                className=\"bb1\"\n                // style={{ left: px(150) }}\n              >\n                <div\n                  className=\"btn78\"\n                  style={{ width: px(220), height: mTop(30), fontSize: px(16) }}\n                  onClick={() => {\n                    console.log(\"点击了切换按钮\");\n\n                    if (resyncDeviceIsClick === true) {\n                      resyncDeviceIsClick = false;\n                      console.log(\"发送给主进程切换按钮\");\n                      let ipcRenderer = window.electron.ipcRenderer;\n                      ipcRenderer.send(\"qiehuan\");\n                      const time = setTimeout(() => {\n                        resyncDeviceIsClick = true;\n                        clearTimeout(time);\n                      }, 2500);\n                    }\n                  }}\n                >\n                  Re-sync Base\n                </div>\n              </div>\n            )}\n            <div\n              id=\"myCharts\"\n              style={{ marginTop: mTop(50), width: windowWidth }}\n            >\n              <ReactECharts\n                option={getOption()}\n                theme=\"Imooc\"\n                style={{ height: mTop(380) }}\n                notMerge={true}\n                lazyUpdate={true}\n                // theme={\"theme_name\"}\n                ref={echartsElement}\n              />\n\n              {_status()}\n            </div>\n\n            {/* 底部宠物信息 */}\n            {_foot()}\n            {_editModal()}\n\n            {tipSpin && (\n              // true &&\n              <div className=\"modal\">\n                <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                  <LoadingOutlined\n                    style={{\n                      fontSize: 30,\n                      color: \"#fff\",\n                      marginTop: mTop(-30),\n                    }}\n                  />\n                </div>\n                <p>data is loading...</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nClinicalStudy.propTypes = {\n  bodyHeight: propTypes.number,\n};\nClinicalStudy.defaultProps = {\n  bodyHeight: 0,\n};\nexport default connect(\n  (state) => ({\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  {}\n)(ClinicalStudy);\n",["313","314"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/biggiePage/Biggie.jsx",["315","316","317","318","319","320","321","322","323"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { px, mTop } from './../../utils/px'\nimport cir from './../../assets/images/cir.png'\nimport xia from './../../assets/img/xia.png'\n\n//import 'antd/dist/antd.css';\nimport './biggie.less'\n\n/**\n * \n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * \n * @returns \n */\n\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n\n  // let { weight, bodyFat, score } = this.props\n\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n\n\n        <div style={{ height: px(240), borderRadius: px(150), marginBottom: px(50) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ top: px(45), fontSize: px(32), fontWeight: '800' }}>{weight}</div>\n          <div style={{ top: px(95), fontSize: px(25) }} className='cTText'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText' style={{ fontSize: px(24) }}>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n\n\n\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n\n\n\n\n      <div className='biggiefoot' style={{ marginTop: px(10), }}>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              style={{ height: px(36), }}\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n\n\n            <div\n              className='biggiefootbtn'\n              style={{ height: px(36), }}\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n\n\n          </div>\n        }\n\n\n        {(impedance && impedance > 0) ? <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10) }}>{`Impedance ${impedance} Ohms`}</div> : null}\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie",["324","325"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/petTable/index.jsx",["326","327","328","329","330","331","332","333"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { ConfigProvider, Table } from 'antd';\nimport { useHistory } from 'react-router-dom'\nimport moment from 'moment'\n\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport './petTable.less'\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\n\n\n\n\n\nconst PetTable = ({ petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type }) => {\n    let history = useHistory()\n    const [heardSearchText, setHeardSearchText] = useState('')\n    //搜索后展示的宠物列表\n    const [searchData, setSearchData] = useState([])\n    const _search = (value) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\n        let keyWord = value || heardSearchText\n        /**\n         * 使用indexof方法实现模糊查询\n         *     语法：stringObject.indexOf(searchvalue, fromindex)\n         *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n         *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n         *  \n         * list         原数组\n         * keyWord      查询关键词\n         * searchData   查询的结果\n         * \n         * toLowerCase（）方法：将字符串统一转成小写\n         * toUpperCase（）方法：将字符串统一转成大写\n         * \n         */\n        let list = petListArr\n        let searchData = []\n        for (let i = 0; i < list.length; i++) {\n            let petName = list[i].petName.toLowerCase() || ''\n            let patientId = list[i].patientId.toLowerCase() || ''\n            let rfid = list[i].rfid || ''\n            if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n                || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n                || `${rfid}`.indexOf(keyWord) !== -1\n            ) {\n                searchData.push(list[i])\n            }\n        }\n        console.log(searchData);\n        setSearchData(searchData)\n\n\n\n\n\n    }\n\n    const columns = [\n        {\n            title: 'Time',\n            dataIndex: 'insertedAt',\n            key: 'insertedAt',\n            width: '16%',\n            // ...this.getColumnSearchProps('insertedAt'),\n            render: (text, record, index) => {\n                let chazhi = new Date().getTimezoneOffset()\n                // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\n                let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\n                let time = moment(parseInt(text) * 1000).format('hh:mm a');\n                let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\n                // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\n                return (\n                    <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\n                        <p>{`${year}`}</p>\n                        <p>{`${time}`}</p>\n                    </div>\n                )\n            },\n\n        },\n        {\n            title: 'Pet ID',\n            dataIndex: 'patientId',\n            key: 'patientId',\n            width: '15%',\n            // ...this.getColumnSearchProps('patientId'),\n        },\n        {\n            title: 'Pet Name',\n            dataIndex: 'petName',\n            key: 'petName',\n            width: '15%',\n            // ...this.getColumnSearchProps('petName'),\n        },\n        {\n            title: 'Owner',\n            dataIndex: 'owner',\n            key: 'owner',\n            width: '15%',\n            // ...this.getColumnSearchProps('owner'),\n        },\n        {\n            title: 'Breed',\n            dataIndex: 'breed',\n            key: 'breed',\n            width: '15%',\n            // ...this.getColumnSearchProps('breed'),\n            render: (text, record, index) => {\n                if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\n                    return (\n                        <p style={{ textAlign: 'center' }}>{'unknown'}</p>\n                    )\n                } else {\n                    return (\n                        <p style={{ textAlign: 'center' }}>{text}</p>\n                    )\n                }\n\n            }\n        },\n\n        {\n            title: 'Gender',\n            dataIndex: 'gender',\n            key: 'gender',\n            width: '12%',\n            // width: '30%',\n            // ...this.getColumnSearchProps('gender'),\n        },\n        {\n            title: 'Age',\n            dataIndex: 'age',\n            key: 'age',\n            width: '12%',\n            // width: '20%',\n            render: (text, record, index) => {\n                // console.log(text);\n\n                if (`${text}` === 'NaN') {\n                    return (\n                        <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\n                    )\n                } else {\n                    return (\n                        <p style={{ textAlign: 'center' }}>{text}</p>\n                    )\n                }\n\n            }\n        },\n\n\n    ];\n    const noData = () => {\n        return (\n            <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\n                <p style={{ fontSize: px(22) }}>No pet found, </p>  &nbsp;&nbsp;\n                <a style={{ fontSize: px(22) }} href=\"#\"\n                    onClick={(e) => {\n                        console.log('我要去添加宠物');\n                        try {\n                            if (type === 'scheduled') {\n                                setMenuNum('AddScheduledPet')\n                            } else {\n                                setMenuNum('AddPet')\n                            }\n                        } catch (error) {\n                            console.log('错误信息', error);\n                        }\n                        e.preventDefault();\n\n                    }}\n\n                >{`go to add`}</a>\n            </div>\n        )\n    }\n    return (\n        <div className='petTable' >\n            <div className=\"pet_table_heard\" style={{ marginTop: px(40) }}>\n                <div className=\"search\" style={{ height: px(28) }}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"&#xe61b;    search\"\n                        value={heardSearchText}\n                        onChange={(e) => {\n                            setHeardSearchText(e.target.value)\n                            _search(e.target.value)\n                        }\n                        }\n\n                    />\n                </div>\n\n                <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\n                    <div\n                        className=\"walkbtnBox\"\n                        style={{ height: px(28), width: px(80) }}\n                        onClick={_search}\n                    >\n                        <div className=\"walkText\">Search</div>\n                    </div>\n                </div>\n\n            </div>\n            <div className=\"heard2 flex\" style={{ marginTop: px(40), marginBottom: px(8), marginLeft: px(20) }}>\n\n                <div className=\"sort flex\" >\n                    <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\n\n                    <SelectionBox\n                        listArr={[\n                            { key: 'time', value: 'Time' },\n                            { key: 'petid', value: 'Pet ID' },\n                            { key: 'owner', value: 'Owner' },\n                            { key: 'breed', value: 'Breed' },\n                            { key: 'petname', value: 'Pet Name' },\n                            { key: 'gender', value: 'Gender' },\n                        ]}\n                        clickItem={(item) => {\n                            let petList = [].concat(petListArr)\n                            switch (item.key) {\n                                case 'time':\n                                    petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n                                    break;\n                                case 'petid':\n                                    petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n                                    break;\n                                case 'owner':\n                                    petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n                                    break;\n                                case 'breed':\n                                    petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n                                    break;\n                                case 'petname':\n                                    petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n                                    break;\n                                case 'gender':\n                                    petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n                                    break;\n                            }\n                            resetPetList(petList)\n\n                        }}\n                    />\n                </div>\n\n\n\n            </div>\n            <div className=\"table\" >\n                <ConfigProvider renderEmpty={noData}>\n                    <Table\n                        style={{\n                            // border: ' #979797 1px solid',\n                            padding: 0,\n                            margin: 0,\n                            width: '95%',\n                            // height: px(500)\n                        }}\n                        rowKey={data => data.id}\n                        bordered={false}\n                        columns={columns}\n                        dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\n                        loading={loading}\n                        locale={{ filterConfirm: <div>111</div> }}\n                        pagination={false}\n                        scroll={{\n                            y: px(480)\n                        }}\n                        onRow={(record) => {\n                            return {\n                                onClick: (event) => {\n                                    setMenuNum('1')\n                                    petDetailInfoFun(record)\n                                    console.log('record', record);\n                                }, // 点击行\n\n                            };\n                        }}\n                    />\n                </ConfigProvider>\n            </div>\n\n        </div >\n\n    )\n}\n\n\nPetTable.propTypes = {\n    petListArr: PropTypes.array,\n    resetPetList: PropTypes.func,\n}\n//默认值\nPetTable.defaultProps = {\n    bodyHeight: 0,\n    petListArr: [],\n    resetPetList: () => { },\n}\nexport default connect(\n    state => ({\n\n    }),\n    { petDetailInfoFun, setMenuNum, }\n)(PetTable)","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/phoneBook/PhoneBook.jsx",["334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport {\n    Menu,\n    Popover,\n    Button,\n    Modal\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport pinyin from 'pinyin';\n\n\n//import 'antd/dist/antd.css';\nimport './phoneBook.less'\nimport { mTop, px, MTop } from '../px';\nimport electronStore from '../electronStore';\n\n\n/**\n * \n * @param {function} onReturn  点击返回按钮后调用的函数\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\n * @returns \n */\n\n\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\n    const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\n    const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\n\n    const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\n    const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\n\n    const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\n\n    useEffect(() => {\n        if (confirmSelectBreed !== -1) {\n            setSelectBreed(confirmSelectBreed)\n        }\n    }, [confirmSelectBreed])\n\n\n    console.log('listsDate', phoneList)\n\n    useEffect(() => {\n        // console.log('listsDate', listDate)\n        console.log('进来了');\n        let test = []\n        listDate.map((item, index) => {\n            let data = {\n                name: item.breedName,\n                hidden: false,\n                petSpeciesBreedId: item.petSpeciesBreedId\n            }\n            test.push(data)\n        })\n        // 暂时静态数据替换\n        //获取联系人列表\n        console.log('11111111111', test)\n        let list = test;\n        let sections = [], letterArr = [];\n        // console.log('原始的数据:',list)\n\n        // 右侧字母栏数据处理\n        list.map((item, index) => {\n            letterArr.push(pinyin(item.name.substring(0, 1), {\n                style: pinyin.STYLE_FIRST_LETTER,\n            })[0][0].toUpperCase());\n\n            letterArr = [...new Set(letterArr)].sort();\n        });\n\n        // 分组数据处理\n        letterArr.map((item, index) => {\n            sections.push({\n                title: item,\n                data: []\n            })\n        });\n        list.map(item => {\n            let listItem = item;\n            sections.map(item => {\n                // console.log('}}}}}}}}}}}}}}',item)\n                let first = listItem.name.substring(0, 1);\n                let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\n                if (item.title == test) {\n                    item.data.push({\n                        firstName: first,\n                        name: listItem.name,\n                        hidden: listItem.hidden,\n                        petSpeciesBreedId: listItem.petSpeciesBreedId\n                    });\n                }\n            })\n        });\n\n        //letterArr:[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"]\n        //sections   [{title: \"A\", data:[ {firstName: \"C\", name: \"Canaan Dog\", hidden: false, petSpeciesBreedId: 201}} ]]\n        // console.log('-1----', sections, letterArr);\n        setPhoneList(sections)\n        setPhoneListCopy(sections)\n        setLetterList(letterArr)\n        setLetterListCopy(letterArr)\n    }, [])\n    useEffect(() => {\n        // if (searchText) {\n        console.log('搜索内容', searchText, letterListCopy);\n        if (letterListCopy.length > 0) {\n\n            let allData = phoneListCopy\n            let newArr = []\n            let arr = []\n            if (searchText.length > 0) {\n                allData.map((item, i) => {\n                    item.data.map((data, index) => {\n                        // console.log(index)\n                        let dataName = data.name ? data.name.toUpperCase() : ''\n                        let keyData = searchText ? searchText.toUpperCase() : ''\n                        if (dataName.search(keyData) !== -1) {\n                            newArr.push(data)\n                        }\n                    })\n                    // console.log('一组数据：', newArr)\n                    if (newArr.length != 0) {\n                        let oneGreep = {\n                            title: item.title,\n                            data: newArr\n                        }\n                        //   console.log('一11组数据：', oneGreep)\n                        arr.push(oneGreep)\n                    }\n\n                    newArr = []\n                })\n                //   console.log('--------------------------', arr)\n                let letterArr = []\n                arr.map((item, index) => {\n                    letterArr.push(item.title)\n                })\n                // newArr = []\n                // // console.log('---||-----',newArr)\n                setPhoneList(arr)\n                setLetterList(letterArr)\n            } else {\n\n                setPhoneList(phoneListCopy)\n                setLetterList(letterListCopy)\n            }\n        }\n\n\n    }, [searchText])\n\n\n\n    const _phoneList = () => {\n\n        let option = phoneList.map((item, index) => {\n            let data = item.data\n            let option1 = data.map((value, index1) => {\n                return (\n                    <li\n                        key={`option1${index1}`}\n                        onClick={() => {\n                            // console.log(value.petSpeciesBreedId);\n                            setSelectBreed(value.petSpeciesBreedId)\n                            selectFun(value)\n                        }}>\n                        {value.name}\n                        {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\n                    </li>\n                )\n            })\n\n            return (\n                <div className=\"phoneBody\">\n                    <div className=\"title\" id={`${item.title}`} >{item.title} </div>\n                    <ul>\n                        {option1}\n                    </ul>\n                </div>\n            )\n\n        })\n\n        return (\n            <ul>\n                {option}\n            </ul>\n        )\n    }\n    const _letterList = () => {\n\n        let option = letterList.map((item, index) => {\n\n\n            return (\n                <li\n                    key={`${index}`}\n\n                    style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\n                    <a\n\n                        onClick={() => {\n                            litterClick(item)\n                        }}\n                    >{item}</a>\n                </li>\n            )\n\n        })\n\n        return (\n            <ul className=\"letterUL\">\n                {option}\n            </ul>\n        )\n    }\n    const litterClick = (anchorName) => {\n        // console.log(anchorName);\n        if (anchorName) {\n            // 找到锚点\n            let anchorElement = document.getElementById(anchorName);\n            // console.log(anchorElement);\n            // 如果对应id的锚点存在，就跳转到锚点\n            if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\n        }\n        // e.preventDefault();\n    }\n\n\n\n    return (\n        <div id=\"phoneBook\">\n            <div className=\"phone\">\n                {_phoneList()}\n            </div>\n            <div className=\"litter\">\n                {_letterList()}\n            </div>\n        </div >\n    )\n}\n\nPhoneBook.propTypes = {\n\n    listDate: PropTypes.array,\n    selectFun: PropTypes.func,\n    searchText: PropTypes.string,\n    confirmSelectBreed: PropTypes.number\n}\nPhoneBook.defaultProps = {\n    listDate: [],\n    selectFun: () => { },\n    searchText: '',\n    confirmSelectBreed: -1,\n}\n\nexport default PhoneBook","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/home/Home.jsx",["355","356"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/heard/Heard.js",["357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390"],"import React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Menu,\n  Popover,\n  Button,\n  Modal\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport { SyncOutlined, createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\nimport { SearchOutlined } from '@ant-design/icons';\nimport moment from 'moment'\nimport MyModal from './../myModal/MyModal'\nimport { connect } from 'react-redux'\nimport { setMenuNum, setSelectHardwareType, petDetailInfoFun } from '../../store/actions';\n\n//import 'antd/dist/antd.css';\nimport './heard.less'\nimport help from './../../assets/images/help.png'\nimport message from './../../assets/images/message.png'\nimport triangle from './../../assets/img/triangle.png'\nimport { mTop, px, MTop } from '../px';\nimport electronStore from '../electronStore';\nimport dog from './../../assets/images/reddog.png'\nimport cat from './../../assets/images/redcat.png'\nimport other from './../../assets/images/redother.png'\nimport menu from './../../assets/img/menu.png'\nimport heardLeft from './../../assets/img/heardLeft.png'\nimport blueSearchPng from './../../assets/img/blueSearch.png'\nimport close from './../../assets/img/close.png'\nimport MinClose from '../../utils/minClose/MinClose';\nimport jinggao from './../../assets/img/jinggao.png'\nimport redclose from './../../assets/img/redclose.png'\n\nimport rMin_red from './../../assets/img/min-red.png'\nimport rClose_red from './../../assets/img/close-red.png'\n\nimport rMin_white from './../../assets/img/min-white.png'\nimport rClose_white from './../../assets/img/close-white.png'\nimport mellaLogo from './../../assets/images/mellaLogo.png'\nimport { version, updateTime } from './../appversion'\nimport { fetchRequest4 } from '../FetchUtil4';\nimport Button1 from '../button/Button';\n\nconst { SubMenu } = Menu;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\n\nconst allPetList = electronStore.get('doctorExam')\nlet storage = window.localStorage\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet mouseoutTimer = null\nlet matchingTimer = null\n\n/**\n * \n * @param {function} onReturn  点击返回按钮后调用的函数\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\n * @returns \n */\n\n\nconst Heard = ({\n  onReturn,\n  onSearch,\n  menu1Click,\n  menu2Click,\n  menu3Click,\n  menu4Click,\n  menu5Click,\n  menu6Click,\n  menu7Click,\n  menu8Click,\n  menu9Click,\n  blueSearch,\n  setMenuNum,\n  menuNum,\n  setSelectHardwareType,\n  petListArr,\n  petDetailInfoFun\n}) => {\n  const [minbgc, setMinbgc] = useState('')        //最小化的背景颜色\n  const [closebgc, setClosebgc] = useState('')    //关闭按钮的背景色\n  const [rMin, setRMin] = useState(rMin_red)      //最小化的图标\n  const [rClose, setRClose] = useState(rClose_red) //关闭按钮图标\n  const [value, setValue] = useState('')          //搜索框输入的内容\n  const [visible, setVisible] = useState(false)   //搜索框下面的搜索model\n  const [loading, setLoading] = useState(false)     //搜索宠物过程中的加载图标\n  const [petList, setPetList] = useState([])        //搜索到的宠物列表\n  const [menuVisible, setMenuVisible] = useState(false)//菜单图标下面的菜单内容图标\n  const [menuMouseOverIndex, setMenuMouseOverIndex] = useState('')//用来定位鼠标滑到哪个菜单选项\n\n\n  const [modalvisible, setModalVisible] = useState(false)       //关于的弹窗\n  const [modalVis, setModalVis] = useState(false)               //RFID搜索是否有宠物的弹窗\n  const [isNotFound, setIsNotFound] = useState(false)           //是否找到RFID对应的图标\n  const [deviceModel, setDeviceModel] = useState(false)         //我的设备弹窗\n\n  const [noUSB, setNoUSB] = useState(false)                 //没有底座设备\n  const [searchMac, setSearchMac] = useState(false)         //是否展示狗牌mac搜索图标下面的Modal框\n  const [bluDevice, setBluDevice] = useState([])            //搜索到的狗牌设备mac地址\n\n  const [isShowBlePetList, setIsShowBlePetList] = useState(false)  //是否展示狗牌对应宠物\n  const [isMatchPet, setIsMatchPet] = useState(false)      //正在匹配狗牌对应的宠物\n  const [macMatchPetList, setMacMatchPetList] = useState([])\n  const [updateStatus, setUpdateStatus] = useState('init')\n  const [lastVersion, setLastVersion] = useState(version)\n  const [downLoadNum, setDownLoadingNum] = useState(0)\n  const [selectDeviceMac, setSelectDeviceMac] = useState('')\n  const [clickType, setClickType] = useState(false);\n\n  //这里是为了模拟数据所做出来的,后期要改成接口\n  const testPetList = [\n\n    { macId: \"E0:7C:62:30:08:08\", petName: 'Mella', petId: \"b9de0868-9202-4fc9-9f1b-325220ceeccf\" },\n    { macId: \"E0:7C:62:03:75:32\", petName: 'Possum', petId: \"e4b11580-1277-4b10-bd64-46b097f6f882\" },\n    { macId: \"E0:7D:EA:A8:8D:7E\", petName: 'Charlie', petId: \"b4e7a185-1c7e-4885-ab95-4a7d2d2ada83\" },\n    { macId: \"E0:7C:62:32:76:8C\", petName: 'Noah', petId: \"01b34bf2-47e6-4036-884f-47299447cb6a\" },\n\n    { macId: \"84:C2:E4:03:C3:06\", petName: \"Whitey\", petId: \"f713a238-f5df-4c85-8c4f-5766b0770c07\" },\n  ]\n\n\n\n\n\n  useEffect(() => {\n    console.log('mac列表为空,初始化');\n    mouseoutTimer && clearTimeout(mouseoutTimer)\n    setBluDevice([])\n    return () => {\n      matchingTimer && clearTimeout(matchingTimer)\n    }\n  }, [])\n  useEffect(() => {\n    ipcRenderer.on('uploadMessage', uploadMessage)\n    return () => {\n      ipcRenderer.removeListener('uploadMessage', uploadMessage)\n    }\n  }, [])\n\n  const uploadMessage = (e, data) => {\n    switch (data.payload.status) {\n      case -1:\n        console.log('查询异常');\n        setUpdateStatus('error')\n        break;\n\n      case 0:\n        console.log('正在检查应用程序更新');\n        setUpdateStatus('check')\n        break;\n\n      case 2:\n        console.log('正在检查应用程序更新');\n        setUpdateStatus('lastVersion')\n        break;\n\n      case 1:\n        console.log('检测到新版本');\n        let version = data.output.version\n        setLastVersion(version)\n\n        setUpdateStatus('newVersion')\n        break;\n\n      case 3:\n        console.log('下载新版成功');\n      case 4:\n        console.log('取消背景下载');\n      case 5:\n        console.log('取消安装');\n        setUpdateStatus('init')\n        break;\n      case 6:\n        console.log('正在下载');\n        setUpdateStatus('downLoading')\n        let loadNum = data.output.percent ? (data.output.percent / 100).toFixed(1) : 0\n        setDownLoadingNum(loadNum)\n\n      default:\n        break;\n    }\n  }\n\n\n  useEffect(() => {\n    if (blueSearch) {\n      console.log('---渲染时执行----??????');\n      ipcRenderer.on('sned', _send)\n      ipcRenderer.on('noUSB', _noUSB)\n      return () => {\n        console.log('----卸载----?????????/');\n        ipcRenderer.removeListener('sned', _send)\n        ipcRenderer.removeListener('noUSB', _noUSB)\n      }\n    }\n\n  }, [])\n\n  const _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      setNoUSB(false)\n    } else {\n      if (!noUSB) {\n        setNoUSB(true)\n      }\n    }\n  }\n  const _send = (event, data) => {\n    command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  const command = (newArr) => {\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    console.log(dataArr1);\n    const instruction = [255]\n    const commandArr = {\n\n      255: () => {\n        // console.log(dataArr1);\n        // console.log(bluDevice);\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let MAC = ''\n        let bluData = []\n        let UUID = ''\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('循环得到的数据', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              break;\n            case 255:\n              break;\n            case 3: break;\n            case 239:\n              // console.log('---mac地址');\n              let str = itemData[0]\n              for (let i = 1; i < itemData.length; i++) {\n                str += `:${itemData[i]}`\n              }\n              MAC = str.toUpperCase()\n\n              break;\n            case 7:\n              console.log('uuid');\n              let uuid = ''\n              for (let i = 0; i < itemData.length; i++) {\n                uuid += `${itemData[i]}`\n              }\n              UUID = uuid\n              break\n            default: return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n\n          // console.log(itemLength, itemLength < length && (itemLength + 3 <= frameLength));\n        }\n        console.log('----mac', MAC, '-----uuid', UUID);\n        if (UUID === 'd7895ab1acc74de3b9919e825c24c809') {\n          // console.log('uuid相等', bluDevice, bluDevice.indexOf(MAC) === -1,);\n          if (bluDevice.indexOf(MAC) === -1) {\n            let dataArr = [].concat(bluDevice)\n            dataArr.push(MAC)\n            setBluDevice(dataArr)\n          }\n\n        }\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n\n  let history = useHistory();\n  //最小化，关闭的\n  const MINCOLOSE = {\n    minMouseEnter: () => {\n      setMinbgc('rgba(70, 70, 70, 0.5)')\n      setRMin(rMin_white)\n    },\n    minMouseLeave: () => {\n      setMinbgc('')\n      setRMin(rMin_red)\n    },\n    minClock: () => {\n      setMinbgc('')\n      setRMin(rMin_red)\n      let ipcRenderer = window.electron.ipcRenderer\n      ipcRenderer.send('window-min')\n\n    },\n    closeMouseEnter: () => {\n      setClosebgc('rgba(232,17,35)')\n      setRClose(rClose_white)\n    },\n    closeMouseLeave: () => {\n      setClosebgc('')\n      setRClose(rClose_red)\n    },\n    closeClock: () => {\n      let ipcRenderer = window.electron.ipcRenderer\n      ipcRenderer.send('window-close')\n    },\n  }\n\n  //搜索框内容\n  const searchPetBody = () => {\n\n\n    if (loading) {\n      //加载中\n      return (\n        <div className='searchPetLoading' style={{ padding: `${20}px 0` }}>\n          <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n            <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginTop: mTop(-30), }} />\n          </div>\n          <p style={{ color: '#e1206d', marginTop: px(5) }}>\n            loading...\n          </p>\n        </div>\n      )\n    } else {\n      // console.log('-----展示', petList.length);\n      if (petList.length > 0) {\n        //找到了宠物，展示出来\n\n        // let petList = electronStore.get('doctorExam')\n        // console.log(petList);\n\n        let option = petList.map((item, index) => {\n          let { speciesId, url } = item\n\n          let images = `url(${url}?download=0&width=150)`\n          if (!url) {\n            switch (speciesId) {\n              case 1: images = `url(${cat})`\n\n                break;\n              case 2: images = `url(${dog})`\n                break\n              default: images = `url(${other})`\n                break;\n            }\n          }\n          return (\n            <li\n              key={`${index}`}\n              style={{ margin: `${px(20)}px 0` }}\n              onClick={() => {\n                setValue('')\n                setVisible(false)\n                setPetList([])\n                petDetailInfoFun(item)\n                onSearch(item)\n              }}\n            >\n              <div className='item' style={{ paddingLeft: px(40) }}>\n                <div\n                  className='img'\n                  style={{\n                    width: px(50),\n                    height: px(50),\n                    marginRight: px(40),\n                    borderRadius: px(60),\n                    backgroundImage: images,\n                    // backgroundColor: 'hotpink',\n\n                  }}>\n                  {/* <img src={images} style={{ width: px(40) }} /> */}\n                </div>\n\n                <div className='petInfo'>\n                  <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.petName}</p>\n                  <p style={{ color: '#797979', fontSize: px(18) }}>{`Patient ID: ${item.patientId}`}</p>\n                  <p style={{ color: '#797979', fontSize: px(18) }}>{`Owner: ${item.owner}`}</p>\n                </div>\n              </div>\n            </li >\n          )\n\n        })\n        let liStyle = { backgroundColor: '#fff', }\n        if (petList.length > 4) {\n          liStyle = { height: px(500), overflowY: 'auto' }\n        }\n\n\n        return (\n          <div className='searchPetList'>\n            <ul style={liStyle}>\n              {option}\n            </ul>\n          </div>\n        )\n      } else {\n        //没有发现这个宠物\n        return (\n          <div className='searchPetLoading' style={{ padding: `${10}px 0` }}>\n\n            <p style={{ width: '80%', fontSize: px(18) }}>\n              Pet not found. Would you like\n              to add a new patient?\n            </p>\n\n            <div\n              className='searchPetBtn'\n              style={{ fontSize: px(18) }}\n              onClick={() => {\n                history.push('/pet/doctorAddPet')\n              }}\n            >\n              <p style={{ padding: `${px(8)}px 0` }}>+ New Patient</p>\n            </div>\n          </div>\n        )\n      }\n\n    }\n\n  }\n\n  const inputChange = (text) => {\n\n    function isNumber(val) {\n      var regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\n      var regNeg = /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\n      if (regPos.test(val) || regNeg.test(val)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    //去除前后空格\n    let search = text.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\")\n    setValue(search)\n    if (search.length > 0) {\n      setVisible(true)\n      setLoading(true)\n\n      //搜索分成两种，一种是通过手输入数据搜索，一种是通过RFID扫描过后搜索\n\n      if (search.length === 15 && isNumber(search)) {\n        //这是RFID扫描后的搜索\n        fetchRequest4(`/pet/getPetInfoByRFID/${search}/${storage.lastOrganization}`, 'GET')\n          .then(res => {\n            console.log('----RFID搜索结果', res);\n\n            if (res.flag === true && res.data) {\n              let { createTime, patientId, petName, firstName, lastName, url, speciesId, breedName, gender, birthday, petId, rfid, weight } = res.data\n              patientId = patientId || 'unknown'\n              petName = petName || 'unknown'\n              breedName = breedName || 'unknown'\n              weight = weight || 'unknown'\n              let owner = ''\n              if (!firstName) {\n                firstName = ''\n              }\n              if (!lastName) {\n                lastName = ''\n              }\n              if (lastName === '' && firstName === '') {\n                owner = 'unknown'\n              } else {\n                owner = `${lastName} ${firstName}`\n              }\n              createTime = moment(createTime).format('X')\n              let petGender = ''\n              switch (`${gender}`) {\n                case '1': petGender = 'F'\n\n                  break;\n                case '0': petGender = \"M\"\n                  break;\n                default: petGender = 'unknown'\n                  break;\n              }\n              let petAge = 'unknown'\n              if (birthday) {\n                petAge = moment(new Date()).diff(moment(birthday), 'years')\n                // console.log('petAge', petAge);\n              }\n              let json = {\n                insertedAt: createTime,\n                patientId,\n                petName,\n                owner,\n                breed: breedName,\n                gender: petGender,\n                age: petAge,\n                petId,\n                id: 0,\n                weight,\n                rfid,\n                url,\n                speciesId\n              }\n              let searchData = []\n              searchData.push(json)\n              setLoading(false)\n              setPetList(searchData)\n\n\n\n            } else if (res.flag === true && res.msg === '该组织下无此宠物信息') {\n              console.log('找到了但是不是在这个组织下');\n              setLoading(false)\n              setModalVis(true)\n              setIsNotFound(false)\n              setValue('')\n              setVisible(false)\n\n\n              // this.setState({\n              //   loading: false,\n              //   modalVis: true,\n              //   isNotFound: false,\n              //   heardSearchText: ''\n              // })\n            } else {\n              console.log('没有找到');\n              setLoading(false)\n              setModalVis(true)\n              setIsNotFound(true)\n              setValue('')\n              setVisible(false)\n\n\n              // this.setState({\n              //   loading: false,\n              //   modalVis: true,\n              //   isNotFound: true,\n              //   heardSearchText: ''\n              // })\n            }\n          })\n          .catch(err => {\n\n            console.log('抛出异常:', err);\n            setLoading(false)\n          })\n        return\n      }\n\n      /**\n       * 使用indexof方法实现模糊查询\n       *     语法：stringObject.indexOf(searchvalue, fromindex)\n       *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n       *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n       *  \n       * list         原数组\n       * keyWord      查询关键词\n       * searchData   查询的结果\n       * \n       * toLowerCase（）方法：将字符串统一转成小写\n       * toUpperCase（）方法：将字符串统一转成大写\n       * \n       */\n      // let list = allPetList \n      let list = petListArr || []\n\n      let searchData = []\n      let keyWord = search\n      for (let i = 0; i < list.length; i++) {\n        let petName = list[i].petName ? list[i].petName.toLowerCase() : ''\n        let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : ''\n        let rfid = list[i].rfid || ''\n        if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${rfid}`.indexOf(keyWord) !== -1\n        ) {\n          searchData.push(list[i])\n        }\n      }\n      // console.log('找到的宠物', searchData);\n      console.log('---搜索词：', search, '---搜索数组：', list, '----搜索结果：', searchData);\n      setLoading(false)\n      setPetList(searchData)\n\n    } else {\n      setVisible(false)\n    }\n\n\n\n  }\n\n  //左侧菜单栏\n  const menuList = () => {\n    let name = electronStore.get(`${storage.userId}-isClical`) ? 'Exit Clinical Study Mode' : 'Enter Clinical Study Mode'\n    let menulistArr = [\n      { name: 'Home', index: '1' },\n      { name: 'All Patients', index: '2' },\n      { name: 'Scheduled Patients', index: '3' },\n      { name: 'My Account', index: '4' },\n      { name: 'Settings', index: '5' },\n      { name: name, index: '6' },\n      { name: `Billing & Subscriptions`, index: '7' },\n      { name: 'About Mella', index: '8' },\n      { name: 'Log Out', index: '9' },\n\n    ]\n    let menuOption = menulistArr.map((item, index) => {\n\n      let pColor = menuMouseOverIndex === item.index ? '#e1206d' : '#1a1a1a'\n      return (\n        <li\n          key={item.index}\n          style={{ padding: `${px(15)}px ${px(20)}px` }}\n          onClick={() => {\n            menulistClick(item)\n\n          }}\n          onMouseOver={(e) => {\n            setMenuMouseOverIndex(item.index)\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOver()\n          }}\n          onMouseOut={(e) => {\n            setMenuMouseOverIndex('')\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOut()\n          }}\n        >\n          <div className='item'>\n            <p style={{ color: pColor }}>{item.name}</p>\n          </div>\n        </li >\n      )\n\n    })\n\n    return (\n      <ul>\n        {menuOption}\n      </ul>\n    )\n\n\n  }\n  const menulistClick = e => {\n    mouseoutTimer && clearTimeout(mouseoutTimer)\n    setMenuVisible(false)\n    setMenuMouseOverIndex('')\n    console.log('click ', e);\n\n    switch (e.index) {\n      case \"1\":\n        history.push('/MainBody')\n        setMenuNum(e.index)\n        break;\n      case \"2\":\n        history.push('/MainBody')\n        console.log('全部的宠物');\n        setMenuNum(e.index)\n        break;\n      case \"3\":\n        history.push('/MainBody')\n        console.log('预约宠物');\n        setMenuNum(e.index)\n        break;\n      case \"4\":\n        console.log('我的账号');\n        break;\n      case \"5\":\n        //跳转到设置\n        // menu5Click()\n        history.push('/menuOptions/settings');\n        // setMenuNum(e.index)\n        break;\n      case \"6\":\n        if (e.name === \"Exit Clinical Study Mode\") {\n          setMenuNum('1');\n          electronStore.set(`${storage.userId}-isClical`, false)\n        } else {\n          setMenuNum(e.index);\n          electronStore.set(`${storage.userId}-isClical`, true)\n          setSelectHardwareType(\"mellaPro\");\n        }\n        history.push('/MainBody')\n        console.log('临床测试');\n        break;\n      case \"7\":\n        console.log('billing');\n        break;\n\n      case \"8\":\n        setModalVisible(true)\n        console.log('关于');\n        break;\n      case \"9\":\n        console.log('退出登录');\n        storage.userId = ''\n        storage.roleId = ''\n        storage.userWorkplace = ''\n        storage.lastOrganization = ''\n        storage.lastWorkplaceId = ''\n        storage.connectionKey = ''\n        storage.isClinical = 'false'\n        setMenuNum('1')\n        history.push('/')\n        break;\n\n\n      default:\n        break;\n    }\n  }\n  const menuMouseOut = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer)\n    mouseoutTimer = setTimeout(() => {\n\n      setMenuVisible(false)\n      mouseoutTimer && clearTimeout(mouseoutTimer)\n    }, 1000);\n\n\n  }\n  const menuMouseOver = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer)\n    setMenuVisible(true)\n  }\n  const updatePage = () => {\n    switch (updateStatus) {\n      case 'init':\n        return (\n          <div className='updateBtn' style={{ height: px(40), }}\n            onClick={() => {\n              setDownLoadingNum(0)\n              setUpdateStatus('check')\n\n              ipcRenderer.send('clickUpdateBtn')\n            }}\n          >\n            Check for Updates\n          </div>\n        )\n      case 'check':\n        return (\n          <div className='updateLoading flex' >\n            <div className=\"loadIcon1\" >\n              <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginRight: px(20) }} />\n            </div>\n            <p style={{ color: '#e1206d', }}>Checking for updates</p>\n          </div>\n        )\n      case 'lastVersion':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            already the latest version\n          </div>\n        )\n      case 'error':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            Failed to get the latest version, please try again later\n          </div>\n        )\n\n\n      case 'newVersion':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            {`Found new version V${lastVersion}`}\n\n          </div>\n        )\n      case 'downLoading':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            {`Download progress: ${downLoadNum}%`}\n\n          </div>\n        )\n\n      default:\n        break;\n    }\n\n\n\n\n  }\n  //关于界面\n  const modal = () => {\n    return (\n      <div className='settingModal' style={{ height: `${document.documentElement.clientHeight}px` }} >\n        <div className='writeBox' style={{ borderRadius: px(25) }} >\n          <div className='modalHeadr'>\n            <div className='close'>\n              <div className='imgBox'\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => {\n                  setModalVisible(false)\n                  setUpdateStatus('init')\n                }}\n              >\n                <img src={close} style={{ width: px(23), }} />\n              </div>\n\n            </div>\n            <div className='heaerCenter'>\n              <div className='heaerCenterL'>\n                <img src={mellaLogo} style={{ width: '80%' }} />\n\n              </div>\n              <div className='heaerCenterR'>\n                <h1 style={{ fontSize: px(45), marginBottom: px(10) }}>About the System</h1>\n                <div className='version'>\n                  <div className='versionL' style={{ fontSize: px(22), width: px(180) }}>Version</div>\n                  <div className='versionR' style={{ fontSize: px(24) }}>{version}</div>\n                </div>\n                <div className='version'>\n                  <div className='versionL' style={{ fontSize: px(22), width: px(180) }}>Last Checked</div>\n                  <div className='versionR' style={{ fontSize: px(24) }}>{updateTime}</div>\n                </div>\n\n                <div className='check' style={{ marginTop: px(20) }}>\n                  {updatePage()}\n\n\n\n\n\n\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n          <div className='modalfoot'>\n            <div className='about' style={{ marginTop: px(40), fontSize: px(18) }}>\n              Nanjing Jiubian Technology Co., Ltd. was founded in 2019, located in Nanjing Yuhuatai Software Valley Branch City, the company brings together medical sensors, mobile Internet and other industry's top professionals, business areas covering artificial intelligence, smart medical, pet health, sleep monitoring, etc., is a design, research and development, production, sales, service in one of the high-tech companies. The nine-sided science and technology to \"the number of heavens and earths, starting from one, finally nine\" as the cultural concept, adhering to the essence of Chinese artisans, with an international vision, always standing in the forefront of bio-intelligent medical monitoring technology.\n            </div>\n\n            <div className='aLable'>\n              <a href=\"#\"\n                style={{ fontSize: px(18), marginRight: px(50) }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >Terms and Agreements</a>\n              <a\n                href=\"#\"\n                style={{ fontSize: px(18), }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >Privacy Policy</a>\n            </div>\n\n            <div className='foot' style={{ marginBottom: px(40) }}>© 2021 Mella Pet Care All RIghts Reserved</div>\n\n          </div>\n\n        </div>\n\n      </div>\n    )\n  }\n\n  //设备列表界面\n  const devices = () => {\n\n    let userId = storage.userId\n    // electronStore.delete(`${userId}-deviceList`)\n    let deviceList = electronStore.get(`${userId}-deviceList`)\n    console.log('---', deviceList);\n    if (!deviceList) {\n      let str = `${getRamNumber()}`\n      for (let i = 0; i < 5; i++) {\n        str += `:${getRamNumber()}`\n      }\n      console.log('随机生成的mac地址:', str);\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\n      electronStore.set(`${userId}-deviceList`, deviceList)\n    }\n\n\n    function getRamNumber() {\n      var result = '';\n      for (var i = 0; i < 2; i++) {\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\n      }\n      //默认字母小写，手动转大写\n      return result.toLowerCase();//另toLowerCase()转小写\n    }\n\n\n    // deviceList = [\n    //   // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //   { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //   { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:51:66' },\n    //   { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:35:66' },\n    //   { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:24:33:44:55:66' },\n    //   { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:25:66' },\n    //   { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:56:66' },\n    // ]\n\n    let options = deviceList.map((item, index) => {\n      return <li\n        className='flex'\n        key={`${index}`}\n        style={{ marginBottom: px(15), marginTop: px(5), }}\n        onClick={() => {\n          console.log(item.macId);\n          setSelectDeviceMac(item.macId)\n        }}\n      >\n        <div className='liLeft' style={{ fontSize: px(16) }}>{item.name}</div>\n        <div className='liCenter' style={{ fontSize: px(16) }}>{item.macId}</div>\n        <div className='liRight'>\n          <div className='circle flex' style={{ width: px(18), height: px(18) }}>\n            {selectDeviceMac === item.macId && <div className='redCircle' />}\n          </div>\n        </div>\n      </li>\n    })\n\n    return (\n      <div className='settingModal' style={{ height: `${document.documentElement.clientHeight}px` }} >\n        <div className='writeBox devices' style={{ borderRadius: px(25), width: px(400) }} >\n          <div className='deviceHeadr'>\n            <div className='close'>\n              <div className='imgBox'\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => setDeviceModel(false)}\n              >\n                <img src={close} style={{ width: px(23), }} />\n              </div>\n\n            </div>\n            <div className='logo flex'>\n              <img src={mellaLogo} style={{ width: px(60) }} />\n              <div style={{ fontSize: px(22), marginTop: px(30) }}>Devices</div>\n              <div className='bodyText' style={{ fontSize: px(18), marginTop: px(40) }}>Select the device you would<br />\n                like to use or add a new device.</div>\n            </div>\n\n          </div>\n\n          <div className='deviceCenter'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n          <div className='deviceFooter flex' style={{ borderBottomLeftRadius: px(25), borderBottomRightRadius: px(25) }}>\n            <div className='btn' style={{ height: px(40) }}\n              onMouseDown={() => {\n                let button = document.querySelectorAll('#heard .deviceFooter .btn')\n                button[0].style.opacity = \"0.5\"\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll('#heard .deviceFooter .btn')\n                button[0].style.opacity = \"1\"\n              }}\n              onClick={() => {\n                setDeviceModel(false)\n                history.push('/menuOptions/AddDevice');\n\n              }}\n\n            >\n              <p className='btnText' style={{ fontSize: px(18) }}>New Device</p>\n            </div>\n            <div className='btn' style={{ height: px(40) }}\n\n              onMouseDown={() => {\n                let button = document.querySelectorAll('#heard .deviceFooter .btn')\n                button[1].style.opacity = \"0.5\"\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll('#heard .deviceFooter .btn')\n                button[1].style.opacity = \"1\"\n              }}\n              onClick={() => {\n                electronStore.set(`${storage.userId}-selectDevice`, selectDeviceMac)\n                setDeviceModel(false)\n              }}\n            >\n              <p className='btnText' style={{ fontSize: px(18) }}>Connect</p>\n            </div>\n          </div>\n\n\n        </div>\n\n      </div>\n    )\n  }\n\n  //点击蓝牙搜索图标\n  const blueClick = () => {\n    console.log('点击了蓝牙图标');\n    setIsShowBlePetList(false)\n    setSearchMac(true)\n\n\n  }\n  //点击取消链接\n  const cencleClick = (e) => {\n    console.log('mac列表为空,点击取消');\n    setBluDevice([])\n    setSearchMac(false)\n    setIsShowBlePetList(false)\n    setIsMatchPet(false)\n    setMacMatchPetList([])\n    if (e) {\n      e.preventDefault()\n    }\n    matchingTimer && clearTimeout(matchingTimer)\n\n\n  }\n  //搜索狗牌的蓝牙\n  const blusearchBody = () => {\n    console.log('搜索狗牌的蓝牙', searchMac, bluDevice);\n    if (isShowBlePetList) {\n      if (isMatchPet) {\n        return (\n          <div className='searchPetLoading' style={{ padding: `${20}px 0`, width: '100%' }}>\n            <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n              <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginTop: mTop(-30), }} />\n            </div>\n            <p style={{ color: '#e1206d', marginTop: px(5), width: '80%' }}>matching...</p>\n\n            <a href=\"#\" style={{ color: '#e1206d', marginTop: px(30) }}\n              onClick={cencleClick}\n            >Cencle</a>\n          </div>\n        )\n      } else {\n        if (macMatchPetList.length > 0) {\n\n          let option = macMatchPetList.map((item, index) => {\n            let { speciesId, url } = item\n\n            let images = `url(${url}?download=0&width=150)`\n            if (!url) {\n              switch (speciesId) {\n                case 1: images = `url(${cat})`\n                  break;\n                case 2: images = `url(${dog})`\n                  break\n                default: images = `url(${other})`\n                  break;\n              }\n            }\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  cencleClick()\n                  onSearch(item)\n                }}\n              >\n                <div className='item' style={{ paddingLeft: px(40) }}>\n                  <div\n                    className='img'\n                    style={{\n                      width: px(50),\n                      height: px(50),\n                      marginRight: px(40),\n                      borderRadius: px(60),\n                      backgroundImage: images,\n                    }}>\n                    {/* <img src={images} style={{ width: px(40) }} /> */}\n                  </div>\n\n                  <div className='petInfo'>\n                    <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20), textAlign: 'start' }}>{item.petName}</p>\n                    <p style={{ color: '#797979', fontSize: px(18) }}>{`Patient ID: ${item.patientId}`}</p>\n                    <p style={{ color: '#797979', fontSize: px(18) }}>{`Owner: ${item.owner}`}</p>\n                  </div>\n                </div>\n              </li >\n            )\n\n          })\n          let liStyle = { backgroundColor: '#fff', }\n          if (petList.length > 4) {\n            liStyle = { height: px(500), overflowY: 'auto' }\n          }\n\n\n          return (\n            <div className='searchPetList flex' >\n              <ul style={liStyle}>\n                {option}\n              </ul>\n              <a href=\"#\" style={{ color: '#e1206d', marginTop: px(10), marginBottom: px(21) }}\n                onClick={cencleClick}\n              >Cencle</a>\n            </div>\n          )\n        }\n      }\n    } else {\n      if (noUSB) {\n        return (\n          <div className='searchPetLoading' style={{ padding: `${10}px 0` }}>\n\n            <p style={{ width: '80%', fontSize: px(18) }}>\n              Please insert address and scan\n            </p>\n\n            <a href=\"#\" style={{ color: '#e1206d' }}\n              onClick={cencleClick}\n            >Cencle</a>\n          </div>\n        )\n      } else {\n        if (bluDevice.length > 0) {\n          let option = bluDevice.map((item, index) => {\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  console.log('mac列表为空,点击列表内容');\n                  setBluDevice([])\n                  // setSearchMac(false)\n                  setIsShowBlePetList(true)\n                  setIsMatchPet(true)\n                  matchingTimer && clearTimeout(matchingTimer)\n                  matchingTimer = setTimeout(() => {\n                    let haveFlog = false, index = -1\n                    for (let i = 0; i < testPetList.length; i++) {\n                      if (testPetList[i].macId === item) {\n                        haveFlog = true\n                        index = i\n                        break;\n                      }\n                    }\n                    if (haveFlog) {\n                      if (storage.lastOrganization === '1') {\n                        matchPet(testPetList[index].petId)\n                      } else {\n                        setModalVis(true)\n                        setIsNotFound(false)\n                        cencleClick()\n\n                      }\n                    } else {\n                      setModalVis(true)\n                      setIsNotFound(true)\n                      cencleClick()\n                    }\n\n\n                    setIsMatchPet(false)\n                    matchingTimer && clearTimeout(matchingTimer)\n                  }, 2000);\n\n\n                }}\n              >\n                <div className='item' style={{ paddingLeft: px(40) }}>\n                  <div className='petInfo'>\n                    <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>mac:{item}</p>\n                  </div>\n                </div>\n              </li >\n            )\n          })\n          let liStyle = { backgroundColor: '#fff', }\n          if (bluDevice.length > 4) {\n            liStyle = { height: px(500), overflowY: 'auto' }\n          }\n          return (\n            <div className='searchPetList' style={{ flexDirection: 'column' }}>\n              <ul style={liStyle}>\n                {option}\n              </ul>\n              <a href=\"#\" style={{ color: '#e1206d', marginTop: px(10), marginBottom: px(21) }}\n                onClick={cencleClick}\n              >Cencle</a>\n            </div>\n          )\n        } else {\n          return (\n            <div className='searchPetLoading' style={{ padding: `${20}px 0`, width: '100%' }}>\n              <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginTop: mTop(-30), }} />\n              </div>\n              <p style={{ color: '#e1206d', marginTop: px(5), width: '80%' }}>\n                scanning...\n              </p>\n\n              <a href=\"#\" style={{ color: '#e1206d', marginTop: px(30) }}\n                onClick={cencleClick}\n              >Cencle</a>\n            </div>\n          )\n        }\n      }\n    }\n\n  }\n  const matchPet = (searchValue) => {\n    console.log('搜索词:', searchValue);\n    let list = electronStore.get('doctorExam')\n\n    let searchData = []\n    let keyWord = searchValue\n    for (let i = 0; i < list.length; i++) {\n\n      let petName = `${list[i].petId}`\n      if (keyWord === petName) {\n        searchData.push(list[i])\n      }\n    }\n\n\n    setIsMatchPet(false)\n\n    setMacMatchPetList(searchData)\n  }\n\n\n\n  return (\n    <div id=\"heard\"\n      style={{ height: px(50) }}\n    >\n      <div className='l'>\n        <div className='menuF' style={{ marginLeft: px(40), marginRight: px(40) }}>\n          <div className=\"menu\"\n            onMouseOver={menuMouseOver}\n            onMouseOut={menuMouseOut}>\n            <img src={menu} style={{ width: px(20), }} />\n            {\n              menuVisible\n                // true\n                ? <div\n                  className='manuBody'\n                  style={{ top: px(20), left: px(-40) }}\n                >\n                  <div className='triangle'\n                    style={{\n                      borderLeft: `${px(10)}px solid transparent`,\n                      borderRight: `${px(10)}px solid transparent`,\n                      borderBottom: `${px(13)}px solid #fff`,\n                      left: px(40)\n                    }} />\n\n                  <div className='manuBodyList' style={{ marginTop: px(13) }}>\n                    {menuList()}\n                  </div>\n                </div>\n                : null\n            }\n\n\n\n\n\n\n          </div>\n        </div>\n\n\n\n        <div className=\"search\" style={{ width: px(300) }}>\n\n          <input\n            placeholder=\"Search Pet    &#xe63f;\"\n            style={{ fontSize: px(16), paddingLeft: px(20) }}\n            value={value}\n            onChange={(text) => {\n              inputChange(text)\n            }}\n\n            onKeyUp={(e) => {\n              // console.log(e);\n              if (e.keyCode === 13) {\n                console.log('回车,去搜索');\n              }\n              if (e.keyCode === 27) {\n                console.log('清空');\n                setValue('')\n                setVisible(false)\n              }\n            }}\n\n          />\n          {\n            blueSearch ?\n              <div className=\"searchIconFa bluSearch\"\n              // style={{ cursor: 'pointer', backgroundColor: 'pink' }}\n              // onClick={blueClick}\n              >\n                <div onClick={blueClick} >\n                  {/* <img src={blueSearchPng} style={{ width: '50%' }} /> */}\n                  <span className=\" iconfont icon-sousuo searchIcon\"\n                    style={{ fontSize: px(25) }}\n                  />\n                </div>\n\n                {\n                  searchMac ?\n                    // true ?\n                    <div className='searchPet flex' style={{ width: px(400), }}>\n                      <div className='triangle'\n                        style={{\n                          borderLeft: `${px(20)}px solid transparent`,\n                          borderRight: `${px(20)}px solid transparent`,\n                          borderBottom: `${px(25)}px solid #fff`,\n                          // marginLeft: px(30),\n                          zIndex: 999,\n\n                        }} />\n\n                      <div className='searchPetBody' style={{ width: '100%' }} >\n                        {blusearchBody()}\n                      </div>\n                    </div>\n                    : null\n                }\n\n              </div>\n              : <div className=\"searchIconFa\">\n                <span className=\" iconfont icon-sousuo searchIcon\"\n                  style={{ fontSize: px(25) }}\n                />\n              </div>\n          }\n\n\n\n\n\n\n          {\n            visible ?\n              // true ?\n              <div className='searchPet' style={{ top: px(35), width: px(400), }}>\n                <div className='triangle'\n                  style={{\n                    borderLeft: `${px(20)}px solid transparent`,\n                    borderRight: `${px(20)}px solid transparent`,\n                    borderBottom: `${px(25)}px solid #fff`,\n                    marginLeft: px(30),\n                    zIndex: 999,\n\n                  }} />\n\n                <div className='searchPetBody' >\n                  {searchPetBody()}\n                </div>\n              </div>\n              : null\n          }\n\n\n\n\n\n        </div>\n      </div >\n\n\n      <div className=\"r\"\n      >\n\n\n        <div className='heardCenter'>\n          <div className=\"message\"\n            onClick={() => history.push('/menuOptions/unassigned')}\n          >\n            <img src={message} alt=\"\" style={{ height: px(25), width: px(25) }} />\n          </div>\n          <div className=\"help\"\n            style={{ margin: `0 ${px(25)}px` }}\n            onClick={() => history.push('/menuOptions/help')}\n          >\n            <img src={help} alt=\"\" style={{ height: px(25) }} />\n          </div>\n\n        </div>\n        <div className=\"min_close\" style={{ paddingRight: px(15) }}>\n          <div\n            className='min_icon'\n            onClick={MINCOLOSE.minClock}\n            style={{ backgroundColor: minbgc, height: px(50), width: px(50) }}\n            onMouseEnter={MINCOLOSE.minMouseEnter}\n            onMouseLeave={MINCOLOSE.minMouseLeave}\n          >\n            <img src={rMin} alt=\"\" style={{ width: px(20) }} />\n          </div>\n          <div\n            className='min_icon'\n            onClick={MINCOLOSE.closeClock}\n            style={{ backgroundColor: closebgc, height: px(50), width: px(50) }}\n            onMouseEnter={MINCOLOSE.closeMouseEnter}\n            onMouseLeave={MINCOLOSE.closeMouseLeave}\n          >\n            <img src={rClose} alt=\"\" style={{ width: px(20) }} />\n          </div>\n        </div>\n      </div>\n\n      {modalvisible && modal()}\n      {deviceModel && devices()}\n\n      <MyModal\n        // visible={true}\n        visible={modalVis}\n        element={\n          <div className='tip' style={{ width: px(420), height: px(480), borderRadius: px(20) }}>\n            <div className='close'\n              style={{ height: px(60) }}\n              onClick={() => setModalVis(false)}\n            >\n              <div className='flex' style={{ height: px(60), width: px(60), }}>\n                <img src={close} alt=\"\" style={{ width: px(20) }} />\n              </div>\n\n\n\n            </div>\n            <div className=\"text\">\n              <h1 style={{ fontSize: px(36), marginTop: px(30) }}> {isNotFound ? 'Pet not found!' : 'Pet found!'}</h1>\n\n            </div>\n            <div className='flex' style={{ margin: `${px(20)}px 0` }}>\n              {isNotFound ?\n                <img src={redclose} width=\"50px\" /> :\n                <img src={jinggao} width=\"50px\" />\n              }\n            </div>\n            <div className='textbody' style={{ marginTop: px(30), color: '#000' }}>\n              {isNotFound ? <p style={{ fontSize: px(22) }}> This pet is not on your database</p> :\n                <p style={{ fontSize: px(22) }}>Pet Identified but does not <br /> belong to your organization.</p>}\n            </div>\n\n\n\n            <div className='flex' style={{ marginTop: px(30), width: '100%', }}>\n\n              <div\n                className='btn flex'\n                style={{ height: px(40) }}\n                onClick={() => {\n                  setModalVis(false)\n                  cencleClick()\n                }}\n              >\n                <p>OK</p>\n              </div>\n            </div>\n          </div>\n        }\n      />\n\n    </div >\n  )\n}\n\nHeard.propTypes = {\n  onReturn: PropTypes.func,\n  onSearch: PropTypes.func,\n  menu1Click: PropTypes.func,\n  menu2Click: PropTypes.func,\n  menu3Click: PropTypes.func,\n  menu4Click: PropTypes.func,\n  menu5Click: PropTypes.func,\n  menu6Click: PropTypes.func,\n  menu7Click: PropTypes.func,\n  menu8Click: PropTypes.func,\n  menu9Click: PropTypes.func,\n  blueSearch: PropTypes.bool\n\n}\nHeard.defaultProps = {\n  onSearch: () => { },\n  onReturn: () => { },\n  menu1Click: () => { },\n  menu2Click: () => { },\n  menu3Click: () => { },\n  menu4Click: () => { },\n  menu5Click: () => { },\n  menu6Click: () => { },\n  menu7Click: () => { },\n  menu8Click: () => { },\n  menu9Click: () => { },\n  blueSearch: false,\n}\n\n\nexport default connect(\n  state => ({\n    menuNum: state.userReduce.menuNum,\n    petListArr: state.petReduce.petListArr,\n  }),\n  { setMenuNum, setSelectHardwareType, petDetailInfoFun }\n)(Heard)",["391","392"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/AddYuding.jsx",["393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408"],"////这是普通用户的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\nimport React, { Component } from 'react'\nimport {\n  Table,\n  Input,\n  Button,\n  Space,\n  message,\n  Menu,\n  Modal,\n  Select,\n  ConfigProvider\n\n} from 'antd';\nimport Draggable from \"react-draggable\";\nimport Button1 from '../../utils/button/Button'\nimport moment from 'moment'\n//import 'antd/dist/antd.css';\nimport Heard from '../../utils/heard/Heard'\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport MYButton from './../../utils/button/Button'\nimport './doctorSelectExam.less'\n\n\nimport { fetchRequest } from '../../utils/FetchUtil1'\nimport { MTop, mTop, pX, px, win } from '../../utils/px';\n\nimport dog from './../../assets/images/pinkdog.png'\nimport cat from './../../assets/images/pinkcat.png'\nimport redDog from './../../assets/images/reddog.png'\nimport redCat from './../../assets/images/redcat.png'\nimport redother from './../../assets/images/redother.png'\nimport other from './../../assets/images/other.png'\nimport redJinggao from './../../assets/img/redjinggao.png'\n\nimport MyModal from '../../utils/myModal/MyModal';\n\nconst { SubMenu } = Menu;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\n\nlet storage = window.localStorage;\n\nlet defaultData = {\n  patientId: \"\",\n  wuzhong: 'dog',\n  petName: '',\n  miaoshu: ''\n}\n\n\nexport default class DoctorSelectExam extends Component {\n  state = {\n    addPetist: [],\n    petName: '',\n    wuzhong: 'dog',\n    patientId: '',\n    miaoshu: '',\n    loading: false,\n    isSave: false\n  }\n\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    console.log(windowsHeight, height, width);\n    if (windowsHeight < 900) {\n      ipcRenderer.send('table', win())\n    } else {\n      ipcRenderer.send('big', win())\n    }\n    // ipcRenderer.send('big')\n    message.destroy()\n\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    message.destroy()\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    console.log(windowsHeight, height, width);\n    if (windowsHeight < 900) {\n      ipcRenderer.send('table', win())\n    } else {\n      ipcRenderer.send('big', win())\n    }\n    this.setState({\n\n    })\n  }\n\n  selsectwuzhong = (val) => {\n    this.setState({\n      wuzhong: val\n    })\n  }\n  add = () => {\n    message.destroy()\n    let { patientId, petName, wuzhong, miaoshu, addPetist } = this.state\n    if (!patientId) {\n      message.error(`Please enter the pet's patientId`)\n      return\n    }\n    this.setState({\n      loading: true\n    })\n\n    let petSpeciesBreedId = 12001\n    switch (wuzhong) {\n      case 'dog': petSpeciesBreedId = 12001; break;\n      case 'cat': petSpeciesBreedId = 11001; break;\n      case 'other': petSpeciesBreedId = 13001; break;\n      default:\n        break;\n    }\n    let params = {\n      description: miaoshu,\n      doctorId: storage.userId,\n      patientId,\n      petName,\n      petSpeciesBreedId\n    }\n\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    console.log('入参', params);\n    fetchRequest('/new/petall/subscribe', \"POST\", params)\n      .then(res => {\n        console.log(res);\n        if (res.flag) {\n          let json = {\n            patientId,\n            wuzhong,\n            petName,\n            miaoshu\n          }\n          let list = [].concat(addPetist)\n          list.push(json)\n          this.setState({\n            loading: false,\n            patientId: '',\n            wuzhong: 'dog',\n            petName: '',\n            miaoshu: '',\n            addPetist: list\n          })\n        } else {\n          this.setState({\n            loading: false\n          })\n          message.error('add failed')\n        }\n      })\n      .catch(err => {\n        console.log('错误原因', err);\n        this.setState({\n          loading: false\n        })\n        message.error('add failed')\n      })\n\n  }\n  render() {\n    let addPetist = [].concat(this.state.addPetist)\n    addPetist.push(defaultData)\n\n    let options = addPetist.map((item, index) => {\n\n\n      if (index === addPetist.length - 1) {\n        let { patientId, wuzhong, petName, miaoshu } = this.state\n        return <li key={`${index}`} style={{ width: '100%', }}>\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n              <input type=\"text\" className='tableInput'\n                value={patientId}\n                onChange={value => {\n                  this.setState({\n                    patientId: value.target.value\n                  })\n                }}\n              />\n            </div>\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n              <input type=\"text\" className='tableInput'\n                value={petName}\n                onChange={value => {\n                  this.setState({\n                    petName: value.target.value\n                  })\n                }}\n              />\n            </div>\n            <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n              <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                  this.selsectwuzhong('dog')\n                }}>\n                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n              </div>\n              <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                  this.selsectwuzhong('cat')\n                }}>\n                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n              </div>\n\n              <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                  this.selsectwuzhong('other')\n                }}>\n                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n              </div>\n\n\n\n            </div>\n            <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n              <input type=\"text\" className='tableInput'\n                value={miaoshu}\n                onChange={value => {\n                  this.setState({\n                    miaoshu: value.target.value\n                  })\n                }}\n\n              />\n            </div>\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n\n\n\n              <div\n                className='flex'\n                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\n                onClick={this.add}\n\n              >\n\n                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\n              </div>\n\n\n\n\n\n\n\n            </div>\n\n          </div>\n        </li>\n      } else {\n        let { patientId, wuzhong, petName, miaoshu } = item\n        return <li key={`${index}`} style={{ width: '100%', }}>\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n              <div className='tableText'>\n                {patientId}\n              </div>\n            </div>\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n              <div className='tableText'> {petName}</div>\n            </div>\n            <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n              <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n              <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n              <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n            </div>\n            <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n              <div className='tableText'>{miaoshu}</div>\n            </div>\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n\n            </div>\n          </div>\n\n\n        </li>\n      }\n\n\n    })\n\n\n\n\n\n\n    return (\n\n      <div id=\"doctorSelectExam\" onClick={(e) => {\n        console.log('隐藏');\n        this.setState({\n          showsortBy: false\n        })\n      }}>\n        {/* 关闭缩小 */}\n        <Heard\n          onReturn={() => {\n            let { patientId } = this.state\n            if (!patientId) {\n              this.props.history.goBack()\n            } else {\n              this.setState({\n                isSave: true\n              })\n            }\n\n          }}\n          onSearch={(data) => {\n\n            storage.doctorExam = JSON.stringify(data)\n\n            storage.doctorList = JSON.stringify(this.state.data)\n            if (storage.isClinical === 'true') {\n              this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\n            } else {\n              this.props.history.push({ pathname: '/page10', })\n            }\n          }}\n          blueSearch={true}\n        />\n        <div style={{ width: '100%', marginTop: px(80), height: px(650), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%' }}>\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n            <div className='tableHeard'>Patient Id</div>\n            <div className='tableHeard'>Pet Name</div>\n            <div className='tableHeard'>species</div>\n            <div className='tableHeard' style={{ width: '30%' }}>description</div>\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\n\n          </div>\n\n          <ul >\n            {options}\n          </ul>\n\n\n        </div>\n\n\n\n        <div className='continueBox'>\n          <div className='continueBtn'\n            style={{ borderRadius: px(50), height: px(45), fontSize: px(20), }}\n            onClick={() => {\n              let { patientId } = this.state\n              if (!patientId) {\n                this.props.history.goBack()\n              } else {\n                this.setState({\n                  isSave: true\n                })\n              }\n            }}\n          >Continue</div>\n        </div>\n\n        <MyModal\n          visible={this.state.loading}\n        />\n        <MyModal\n          visible={this.state.isSave}\n          element={\n            <div className='isSave'\n            //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\n            >\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n              <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                <MYButton\n                  text={'Cancel'}\n                  onClick={() => {\n                    this.setState({\n                      isSave: false\n                    })\n                  }}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n                <MYButton\n                  text={'Exit'}\n                  onClick={() => {\n                    this.setState({\n                      isSave: false\n                    })\n                    this.props.history.goBack()\n                  }}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n              </div>\n            </div>\n          }\n        />\n\n\n\n\n\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/createAccount/ishavePMS/IsHavePMS.jsx",["409","410","411"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/unassigned/Unassigned.jsx",["412","413","414","415","416","417","418","419","420"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/reducers/userReduce.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/areaCode/country.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/allPetsPage/index.jsx",["421","422","423","424","425","426","427","428","429","430","431","432"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Input, Button, message, Spin, BackTop } from 'antd';\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\n\nimport { devicesTitleHeight } from '../../utils/InitDate'\n\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport PetTable from '../../components/petTable';\nimport './allPet.less'\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\nimport moment from 'moment'\nimport { fetchRequest } from '../../utils/FetchUtil1';\n\n\nlet storage = window.localStorage;\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\n\n    //初始化获取宠物列表数据\n    const [petListArr, setPetListArr] = useState([])\n    //定义宠物列表是否加载中\n    const [loading, setLoading] = useState(true)\n\n    const [spin, setSpin] = useState(false)\n\n    useEffect(() => {\n        //获取宠物列表\n        _getExam()\n    }, [])\n    const _getExam = async () => {\n        console.log('进来了');\n\n\n        let params = {\n            doctorId: storage.userId,\n            offset: 0,\n            size: 100,\n        }\n        if (storage.lastWorkplaceId) {\n            params.workplaceId = storage.lastWorkplaceId\n        }\n        if (storage.lastOrganization) {\n            params.organizationId = storage.lastOrganization\n        }\n\n\n        console.log('查询宠物的入参', params);\n        const isUnKnow = (val) => {\n            if (val) {\n                return val\n            } else {\n                return 'unknown'\n            }\n        }\n        setLoading(true)\n\n        fetchRequest('/user/listAllPetInfo', 'GET', params)\n\n            .then(res => {\n                console.log('查询到的宠物列表,/user/listAllPetInfo', res);\n                if (res.flag === true && res.data) {\n                    let data = []\n                    let oldList = res.data\n                    setPetListArrFun(oldList)\n                    // let oldList = res.data.list\n                    for (let i = 0; i < oldList.length; i++) {\n                        let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n                            h2tLength, torsoLength } = oldList[i]\n                        let owner = ''\n                        patientId = isUnKnow(patientId)\n                        petName = isUnKnow(petName)\n                        breedName = isUnKnow(breedName)\n                        age = isUnKnow(age)\n                        weight = isUnKnow(weight)\n                        if (!firstName) {\n                            firstName = ''\n                        }\n                        if (!lastName) {\n                            lastName = ''\n                        }\n                        if (lastName === '' && firstName === '') {\n                            owner = 'unknown'\n                        } else {\n                            owner = `${lastName} ${firstName}`\n                        }\n                        createTime = moment(createTime).format('X')\n                        let petGender = ''\n                        switch (`${gender}`) {\n                            case '1': petGender = 'F'\n\n                                break;\n                            case '0': petGender = \"M\"\n                                break;\n                            default: petGender = 'unknown'\n                                break;\n                        }\n                        let petAge = 'unknown'\n                        if (birthday) {\n                            petAge = moment(new Date()).diff(moment(birthday), 'years')\n                        }\n\n                        let json = {\n                            insertedAt: createTime,\n                            patientId,\n                            petName,\n                            owner,\n                            breed: breedName,\n                            gender: petGender,\n                            age: petAge,\n                            petId,\n                            id: i,\n                            weight,\n                            rfid,\n                            url,\n                            speciesId,\n                            l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n                            h2tLength, torsoLength,\n                            pethubId, macId,\n\n                        }\n                        data.push(json)\n\n                    }\n                    data.sort((a, b) => {\n                        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n                    })\n                    console.log('列表的数据：', data);\n                    setPetListArr(data)\n                    setLoading(false)\n                    setSpin(false)\n\n\n\n\n                } else {\n                    setLoading(false)\n                    setSpin(false)\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                setLoading(false)\n                setSpin(false)\n            })\n\n\n\n    }\n    const _refresh = () => {\n        console.log('点击了');\n        setSpin(true)\n        _getExam()\n    }\n\n    return (\n        <div id='allPets' style={{ height: bodyHeight }}>\n            <div className=\"allPetHeard\">\n                <div className=\"addDeviceTitle flex\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>\n                    <div className=\"title\">Client Results</div>\n                    <div className=\"refresh flex\"\n                        style={{ fontSize: px(25), marginLeft: px(10) }}\n                    >\n                        <SyncOutlined onClick={_refresh} spin={spin} />\n                    </div>\n\n                </div>\n\n                <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\n                    <div\n                        className=\"walkbtnBox\"\n                        style={{ height: px(40), width: px(200) }}\n                        onClick={() => {\n                            let json = {\n                                isWalkIn: true,\n                                petId: null,\n                                petName: null,\n                                owner: null,\n                                breed: null,\n\n                            }\n                            petDetailInfoFun(json)\n                            setMenuNum(\"1\")\n                        }}\n                    >\n                        <div className=\"walkText\">Walk-In</div>\n                    </div>\n                </div>\n\n            </div>\n\n            <PetTable\n                bodyHeight={bodyHeight - devicesTitleHeight}\n                petListArr={petListArr}\n                loading={loading}\n                resetPetList={(val) => setPetListArr(val)}\n\n            />\n        </div >\n\n    )\n}\n\n\nAllPet.propTypes = {\n\n}\n//默认值\nAllPet.defaultProps = {\n    bodyHeight: 0,\n}\nexport default connect(\n    state => ({\n\n    }),\n    { petDetailInfoFun, setMenuNum, setPetListArrFun }\n)(AllPet)","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/userAction.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/userType.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/measure/NorMalMeasurement.jsx",["433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459"],"import React, { Component } from 'react'\nimport { Menu, Table, Popconfirm, Tooltip, message, Select, Progress, Input, Modal } from 'antd';\nimport Draggable from \"react-draggable\";\nimport moment from 'moment'\n//import 'antd/dist/antd.css';\nimport { createFromIconfontCN, LoadingOutlined, SyncOutlined } from '@ant-design/icons';\n\n\n\nimport { fetchRequest } from './../../utils/FetchUtil1'\nimport { fetchRequest1 } from './../../utils/FetchUtil'\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\nimport { FetchEszVet } from './../../utils/FetchEszVet'\n\nimport ye from './../../assets/images/ye1.png'\nimport er from './../../assets/images/er3.png'\nimport gang from './../../assets/images/gang3.png'\nimport edit from './../../assets/images/edit.png'\nimport del from './../../assets/images/del.png'\nimport scale from './../../assets/images/scale.png'\nimport placement_gang from './../../assets/images/placement_gang.png'\nimport placement_er from './../../assets/images/placement_er.png'\nimport palcement_ye from './../../assets/images/palcement_ye.png'\nimport careacte from './../../assets/images/dogMessage.png'\nimport catcareacte from './../../assets/images/catMessage.png'\nimport dog from './../../assets/img/redDog.png'\nimport cat from './../../assets/img/redcat.png'\nimport other from './../../assets/images/other.png'\n\nimport dog1 from './../../assets/images/pinkdog.png'\nimport cat1 from './../../assets/images/pinkcat.png'\nimport redDog1 from './../../assets/images/reddog.png'\nimport redCat1 from './../../assets/images/redcat.png'\nimport redother from './../../assets/images/redother.png'\n\n\n\nimport electronStore from './../../utils/electronStore'\n\n\nimport './normalMeasurement.less'\nimport { fetchToken } from '../../utils/Fetch_token';\nimport { mTop, px, pX, win } from '../../utils/px';\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport Biggie from './../../pages/biggiePage/Biggie.jsx'\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\nconst { SubMenu } = Menu;\nconst { Option } = Select;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet saveHistoryTime = null, getSerialTime = null\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet detectTimer = null, countdownTimer = null, lastConnectionTime = null;\n\nlet storage = window.localStorage;\n//用于预测的东西\nlet clinicalYuce = [], clinicalIndex = 0, endflog = false\nlet temp15 = ''\nlet is97Time = null, //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\n  initTime = null\nlet firstEar = true\nlet isMeasurement = false //正在测量为true，反之为false\nlet num07 = 0       //接收到07命令行的次数\n\nlet isClick = true\n\nlet sameBiggieNum = 0, keyboardBiggieFlog = false\n\nlet nextFlog = false //用来判断是否按下了尺子的确认键\nlet avoidRepetition = false //避免重复，防止尺子数据过来后持续刷新\n\nlet confirmBtnFlog = ''\n//因为biggie样机测量完成控制字从02(测量中)变成03(测量完成),但是会发多组03,因此做一个限制,当控制字为02时biggieSave=false,第一次为03时变成true\nlet biggieSave = false\n\nexport default class NorMalMeasurement extends Component {\n  state = {\n    dogImg: redDog1,\n    catImg: cat1,\n    otherImg: other,\n    selectWZ: 'dog',\n\n    closebgc: '',\n    minbgc: '',\n    closeColor: '',\n    value: '',\n    api: '',\n    id: '',\n    dataArr: [],\n    seleceID: '',//医生id\n    data: { ci: [''], wen: [] },\n\n    temColor: '',\n    Temp: '',\n    isMeasure: false,\n    mearsurePart: 1,\n    historyData: [],\n    patientId: '',\n    spin: false,        //patientId后面的刷新按钮是否旋转\n    petName: '',\n    addpatient_petName: '',\n    addpatient_description: '',\n    addpatient_species: 1,\n    roomTemperature: '',\n    referenceRectalTemperature: '',\n    bodyConditionScore: '',\n    furLength: '',\n    bodyType: '',\n    heartRate: '',\n    bloodPressure: '',\n    respiratoryRate: '',\n    visible: false,       //nodel框是否显示\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    units: '℉',\n    measuerStatus: 'disconnected',\n    isconnected: false,\n    countdown: 15,\n    petVitalTypeId: '01',  //测量部位\n    probeID: '',         //探头id\n    org: 1,\n    err07Visible: false,\n\n\n    //左侧的宠物信息\n    petId: '',\n    owner: '',\n    breedName: '',\n    isMix: false,\n    age: '',\n    weight: '',\n    url: '',\n    speciesId: '',\n\n    //圆环的一些信息\n    temp_statu: 'Ready',\n    progress: 0,\n    endMeasure: false,\n    initFlog: false,\n    isEarMeasure: false,\n\n\n    //底部的信息\n    isNotes: true,\n    notes: '',\n    petSpeciesBreedId: 0,\n    consult_id: '',\n    healthStatus: '',\n\n\n    editId: '',\n    memo: '',\n    macAddr: '',\n    loading: false,\n\n    noUSB: false,  //是否有usb底座，为true代表没有\n    devicesType: 'biggie',\n    isHaveBigieDate: false, //为false则展示把宠物放到秤上的文本，为true则展示体重值\n\n    biggieDate: '', //体脂称体重值（磅）\n    sendWeight: '', //体脂称体重值（kg）\n    impedance: '',   //阻抗\n    isWeightSave: false,  //保存体重数据跳出的上传中弹框\n\n\n    //宠物特征信息\n    l2rarmDistance: '',           //左右手间距，这里用他临时替换成头部周长\n    neckCircumference: '',        //脖子周长\n    upperTorsoCircumference: '',  //上躯干周长\n    lowerTorsoCircumference: '',  //下躯干周长\n    h2tLength: '',                //头尾长度\n    torsoLength: \"\",             //躯干长度\n\n    rulerUnit: 'cm',               //尺子的单位\n    itemIndex: 1,                //代表现在是第几个宠物特征\n    updatePetAttributes: false,    //上传宠物属性的弹框\n\n    isWalkIn: false,               //是否是从walkIn进来的\n  }\n  componentWillMount () {\n    try {\n      console.log('--------------', this.props.location.isconnected);\n      if (this.props.location.isconnected === false || this.props.location.isconnected === true) {\n        if (this.props.location.isconnected === false) {\n\n        } else {\n          this.setState({\n            measuerStatus: 'connented',\n            isconnected: true,\n            isEarMeasure: false\n\n          })\n          is97Time = new Date()\n        }\n      }\n    } catch (error) {\n\n    }\n  }\n\n  componentDidMount () {\n    ipcRenderer.send('big', win())\n    storage.isClinical = 'false'\n    if (storage.identity === '2') {\n      let ezyVetSelectHealthstatus = JSON.parse(storage.ezyVetSelectHealthstatus)\n      console.log(ezyVetSelectHealthstatus);\n      let { age, animal_id, breed, consult_id, gender, key, owner, petName, weight, url, speciesId } = ezyVetSelectHealthstatus\n      let petAge = null\n      if (`${age}` === '' || `${age}` === 'null') {\n        petAge = 0\n      } else {\n        petAge = age\n      }\n      this.setState({\n        petName,\n        owner,\n        breedName: breed,\n        weight,\n        age: petAge,\n        consult_id,\n        healthStatus: key,\n        patientId: animal_id,\n        org: 4,\n        url,\n        speciesId\n      }, () => {\n        this._getPetInfo('ezyVet')\n      })\n    } else if (storage.identity === '1') {\n      this.setState({\n        petName: storage.selectPetName,\n        owner: storage.selectOwner,\n        breedName: storage.selectBreed,\n        weight: storage.selectWeight,\n        age: storage.selectAge,\n        patientId: storage.selectPatientId,\n        org: 1\n      }, () => {\n        this._getPetInfo('vetspire')\n      })\n    } else {\n      let hardSet = electronStore.get('hardwareConfiguration')\n      console.log('测量单位', hardSet);\n      let rulerUnit = 'in'\n      if (!hardSet) {\n        let settings = {\n          isHua: true,\n          is15: true,\n          self_tarting: false,\n          isBacklight: true,\n          isBeep: true,\n          backlightTimer: { length: 140, number: '45' },\n          autoOff: { length: 0, number: '30' },\n        }\n        electronStore.set('hardwareConfiguration', settings)\n        this.setState({\n          units: '℉',\n          rulerUnit: 'in',\n          countdown: 15\n        })\n      } else {\n        let units = hardSet.isHua ? '℉' : '℃'\n        rulerUnit = hardSet.isHua ? 'in' : 'cm'\n        let countdown = hardSet.is15 ? 15 : 30\n        console.log('测量单位', units);\n        this.setState({\n          units,\n          countdown,\n          rulerUnit\n        })\n      }\n\n\n\n\n      let data = JSON.parse(storage.doctorExam)\n      console.log('从列表里面传过来的数据', data);\n      if (!data) {\n        console.log('从walk-in来的');\n        this.setState({\n          isWalkIn: true\n        })\n\n      } else {\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n          h2tLength, torsoLength, weight, url, speciesId } = data\n\n        // l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\n        // neckCircumference = neckCircumference ? `${neckCircumference}` : ''\n        // upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\n        // lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\n        // h2tLength = h2tLength ? `${h2tLength}` : ''\n        // torsoLength = torsoLength ? `${torsoLength}` : ''\n        console.log('+++++++++++', l2rarmDistance);\n\n        l2rarmDistance = changeNum(l2rarmDistance)\n        console.log('++++++0+++++', l2rarmDistance);\n        neckCircumference = changeNum(neckCircumference)\n        upperTorsoCircumference = changeNum(upperTorsoCircumference)\n        lowerTorsoCircumference = changeNum(lowerTorsoCircumference)\n        h2tLength = changeNum(h2tLength)\n        torsoLength = changeNum(torsoLength)\n\n        function changeNum (params) {\n\n          if (params) {\n            if (rulerUnit === 'cm') {\n              return `${params}`\n            } else {\n              return `${(params / 2.54).toFixed(2)}`\n            }\n          } else {\n            return ''\n          }\n\n        }\n\n\n        if (weight && weight !== 'unknown') {\n          weight = parseFloat(weight).toFixed(1)\n        }\n        let breedName = data.breed\n        if (!breedName) {\n          breedName = 'unknown'\n        }\n        switch (breedName) {\n          case 'defaultdog':\n            breedName = 'Dog'\n\n            break;\n          case 'defaultother':\n            breedName = 'Other'\n\n            break;\n          case 'defaultcat':\n            breedName = 'Cat'\n            break;\n\n        }\n        this.setState({\n          petName: data.petName,\n          owner: data.owner,\n          breedName,\n          weight,\n          age: data.age,\n          patientId: data.patientId,\n          petId: data.petId,\n          l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n          h2tLength, torsoLength,\n          url, speciesId,\n          isWalkIn: false\n        }, () => {\n          this._getHistory()\n        })\n      }\n    }\n\n\n\n\n\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('usbDetect', this.usbDetect)\n    ipcRenderer.on('noUSB', this._noUSB)\n\n    this._whether_to_connect_to_mella()\n    //刚进入测量界面需要获取以前的历史数据，测量一次就添加一个记录\n    // this._getHistory()\n\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (temporaryStorage.devicesType) {\n      this.setState({\n        devicesType: temporaryStorage.devicesType\n      })\n    }\n\n  }\n  componentWillUnmount () {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('usbDetect', this.usbDetect)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n\n    clearInterval(detectTimer)\n    detectTimer && clearInterval(detectTimer)\n    countdownTimer && clearInterval(countdownTimer)\n    getSerialTime && clearTimeout(getSerialTime)\n    this.detectTimer && clearInterval(this.detectTimer)\n    this.detectTimer && clearInterval(this.detectTimer)\n    lastConnectionTime = null;\n    clinicalYuce = []\n    clinicalIndex = 0\n    message.destroy()\n\n\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    this.setState({\n\n    })\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n        message.error('The base is not detected. Please insert the base', 0)\n        this.setState({\n          noUSB: true\n        })\n      }\n\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    this.command(data)()\n  }\n  /**\n   * \n   *usb检测，为true代表插上了设备，false代表拔出了设备\n   */\n  usbDetect = (event, data) => {\n    this.detectTimer && clearInterval(this.detectTimer)\n    if (data === true) {\n      this._whether_to_connect_to_mella()\n    } else {\n      this.detectTimer && clearInterval(this.detectTimer)\n      num07 = 0\n    }\n  }\n  _whether_to_connect_to_mella = () => {\n    message.destroy()\n    this.detectTimer = setInterval(() => {\n      if (isMeasurement) {\n        return\n      }\n      if (!initTime) {\n        // console.log('断开连接');\n\n        firstEar = true\n        let hardSet = electronStore.get('hardwareConfiguration')\n        let countdown = hardSet.is15 ? 15 : 30\n        this.setState({\n          measuerStatus: 'disconnected',\n          countdown,\n          isMeasure: false,\n          isconnected: false,\n          isEarMeasure: false\n        })\n        initTime = new Date()\n      } else {\n        ipcRenderer.send('usbdata', { command: '07', arr: ['5A'] })\n        if (new Date() - initTime < 5000) {\n          // console.log('连接成功');\n\n        } else {\n          console.log('2断开连接');\n          firstEar = true\n          let hardSet = electronStore.get('hardwareConfiguration')\n          let countdown = hardSet.is15 ? 15 : 30\n          this.setState({\n            measuerStatus: 'disconnected',\n            countdown,\n            isMeasure: false,\n            isconnected: false,\n            isEarMeasure: false\n          })\n        }\n      }\n    }, 2000);\n\n\n\n  }\n  /**------------------顶部start------------------------ */\n  _close = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('关闭程序');\n    ipcRenderer.send('window-close')\n  }\n  _min = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('最小化程序');\n    ipcRenderer.send('window-min')\n    this.setState({\n      minbgc: '',\n    })\n  }\n  _minMove = () => {\n\n    this.setState({\n      minbgc: 'rgb(211, 205, 205)'\n    })\n  }\n  _minLeave = () => {\n    this.setState({\n      minbgc: ''\n    })\n  }\n  _closeMove = () => {\n    this.setState({\n      closeColor: 'red',\n      closebgc: '#fff'\n    })\n  }\n  _closeLeave = () => {\n    this.setState({\n      closeColor: '#fff',\n      closebgc: ''\n    })\n  }\n\n\n  handleClick = e => {\n    console.log('click ', e);\n\n    switch (e.key) {\n      case '1':\n        switch (storage.identity) {\n          case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\n\n            break;\n          case '1': this.props.history.push('/VetSpireSelectExam')\n\n            break;\n          case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\n\n            break;\n\n          default:\n            break;\n        }\n\n        break;\n\n      case '2': this.props.history.push('/'); break;\n      case '3': this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: this.state.patientId, isconnected: this.state.isconnected }); break;\n      case '4': this.props.history.push('/page12'); break;\n      case '5': this.props.history.push('/menuOptions/settings'); break;\n      default:\n        break;\n    }\n\n  };\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n\n    const instruction = [209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255]\n    if (newArr[2] !== 7) {\n      initTime = new Date()\n      num07 = 0\n    } else {\n      num07++\n    }\n\n\n\n    isMeasurement = false\n    const commandArr = {\n      209: () => {  //腋温\n        if (firstEar) {\n          firstEar = false\n          console.log('去获取探头id');\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\n        }\n        isMeasurement = true\n        let temp1 = parseFloat(`${dataArr1[3]}.${(dataArr1[4])}`)\n        let temp0 = parseFloat(`${dataArr1[5]}.${(dataArr1[6])}`)\n        // let Temp = parseFloat(temp0.toFixed(1))\n        let Temp = temp0\n        console.log(Temp);\n        if (Temp === 24.7 || Temp === 0 || Temp === null || Temp === undefined) {\n          return\n        }\n\n\n        if (this.state.isMeasure === false) {\n\n          if (countdownTimer) {\n            let hardSet = electronStore.get('hardwareConfiguration')\n            let countdown = hardSet.is15 ? 15 : 30\n            this.setState({\n              countdown\n            })\n          }\n\n          countdownTimer = setInterval(() => {\n            let { countdown, isconnected } = this.state\n            this.setState({\n              countdown: countdown - 1\n\n            })\n\n            if (countdown === 0) {\n              console.log('调用15秒的接口');\n              this._prediction()\n              countdownTimer && clearInterval(countdownTimer)\n              this.setState({\n                countdown: 0\n              })\n              // ipcRenderer.send('usbdata', { command: '41', arr: [] })\n\n            }\n\n            if (isconnected === false) {\n              countdownTimer && clearInterval(countdownTimer)\n\n            }\n          }, 1000);\n        }\n        lastConnectionTime = new Date();\n\n\n\n        let progress = (Temp - 25) * 5\n        let dataS = {\n          sample: clinicalIndex++,\n          data0: temp0,\n          data1: temp1\n        }\n        clinicalYuce.push(dataS)\n        if (clinicalIndex < 10) {\n          clinicalYuce.push({\n            sample: clinicalIndex++,\n            data0: temp0,\n            data1: temp1\n          })\n        }\n        this.setState({\n          Temp,\n          isMeasure: true,\n          // mearsurePart: 1,\n          measuerStatus: 'connented',\n          isconnected: true,\n          progress,\n          endMeasure: false,\n          initFlog: true,\n          isEarMeasure: false\n        })\n\n      },\n      208: () => {  //耳温\n\n        lastConnectionTime = new Date();\n        isMeasurement = true\n        if (firstEar) {\n          firstEar = false\n          console.log('去获取探头id');\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\n        }\n        //现在探头0可能不存在，所以把探头0改为探头1\n        let temp0 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\n        let Temp = temp0\n\n        console.log(Temp, temp0);\n        let progress = (Temp - 25) * 5\n        this.setState({\n          Temp,\n          isMeasure: false,\n          mearsurePart: 3,\n          measuerStatus: '测量中',\n          isconnected: true,\n          progress,\n          endMeasure: false,\n          initFlog: true,\n          isEarMeasure: true,\n          petVitalTypeId: '03'\n        })\n\n      },\n      193: () => {  //硬件发送结束命令\n        this.time193 && clearTimeout(this.time193)\n        this.time193 = setTimeout(() => {\n          endflog = true\n          countdownTimer && clearInterval(countdownTimer)\n          this.setState({\n            isMeasure: false,\n            endMeasure: true,\n            isEarMeasure: false\n          })\n          lastConnectionTime = new Date();\n          if (saveHistoryTime != null) {\n            clearTimeout(saveHistoryTime)\n          }\n\n          clinicalYuce = []\n          clinicalIndex = 0\n          firstEar = true\n          this.time193 && clearTimeout(this.time193)\n          console.log('-----------=======最终结果值========---------', this.state.Temp);\n          let { Temp, units } = this.state\n          let temp = units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\n          if (this.state.devicesType === 'mella') {\n            ipcRenderer.send('keyboardWriting', temp)\n          }\n\n        }, 1000);\n\n\n      },\n      194: () => {       //硬件收到机器学习结果并停止测量，通知我们一声\n        endflog = true\n        countdownTimer && clearInterval(countdownTimer)\n        this.setState({\n          isMeasure: false,\n          endMeasure: true,\n          isEarMeasure: false\n        })\n        lastConnectionTime = new Date();\n        if (saveHistoryTime != null) {\n          clearTimeout(saveHistoryTime)\n        }\n\n        clinicalYuce = []\n        clinicalIndex = 0\n        isMeasurement = false\n      },\n\n      192: () => {   //开始测量返回结果\n        switch (newArr[3]) {\n          case 90: console.log('有探头，开始测量的返回指令·'); break;\n          case 11: console.log('没有探头，开始测量的返回值'); break;\n\n        }\n      },\n      129: () => {      //返回硬件版本号\n        console.log(`返回的版本号为${newArr[3]}`);\n        lastConnectionTime = new Date();\n        this.setState({\n          measuerStatus: 'connented',\n          isconnected: true,\n          isEarMeasure: false\n\n        })\n      },\n      135: () => {          //硬件的一些基本信息\n        /**\n         * ______________新版、旧版没法控制温度计__________________\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\n         * newArr[7] 无操作关机时间\n         * newArr[8] 背光时间\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\n         * newArr[10] 测量单位    01代表℃，00代表℉\n         */\n\n        let hardSet = electronStore.get('hardwareConfiguration')\n        let beep = hardSet.isBeep ? '11' : '00'\n        let unit = hardSet.isHua ? '00' : '01'\n\n        if (dataArr1[7] === hardSet.autoOff.number && dataArr1[8] === hardSet.backlightTimer.number &&\n          dataArr1[9] === beep && dataArr1[10] === unit) {\n        } else {\n          console.log('不相同，去发送命令');\n          let setArr = ['03', 'ed', '07', 'dd', hardSet.autoOff.number, hardSet.isBacklight ? hardSet.backlightTimer.number : '00', hardSet.isBeep ? '11' : '00', hardSet.isHua ? '00' : '01']\n          ipcRenderer.send('usbdata', { command: '21', arr: setArr })\n        }\n        this.setState({\n          measuerStatus: 'connented',\n          isconnected: true\n        })\n\n      },\n      238: () => {     //探头松动\n        console.log('探头松动');\n        this.setState({\n          isMeasure: false,\n          endMeasure: true\n        })\n        message.error('The probe is loose, please re-install and measure again', 5)\n        clinicalYuce = []\n        clinicalIndex = 0\n        countdownTimer && clearInterval(countdownTimer)\n      },\n      194: () => {       //硬件收到了机器学习预测的温度\n        this.setState({\n          isMeasure: false,\n          endMeasure: true,\n          APIFlog: true,\n          isEarMeasure: false\n        })\n        clinicalYuce = []\n        clinicalIndex = 0\n        endflog = true\n\n\n        countdownTimer && clearInterval(countdownTimer)\n\n\n      },\n      98: () => { //蓝牙连接断开\n        console.log('断开连接---断开连接---断开连接---断开连接---断开连接---断开连接');\n        firstEar = true\n        console.log(new Date() - is97Time);\n        if (new Date() - is97Time < 1000) {\n          return\n        }\n\n        let hardSet = electronStore.get('hardwareConfiguration')\n        let countdown = hardSet.is15 ? 15 : 30\n        this.setState({\n          measuerStatus: 'disconnected',\n          countdown,\n          isMeasure: false,\n          isconnected: false,\n          isEarMeasure: false\n        })\n\n\n\n\n\n\n\n\n      },\n      97: () => {       //蓝牙连接\n        console.log('连接成功---连接成功---连接成功---连接成功---连接成功---连接成功');\n        // disconnectedNum = 0\n        // lastConnectionTime = new Date();\n        //  disconnectedNum = 0\n        // lastConnectionTime = new Date();\n        this.setState({\n          measuerStatus: 'connented',\n          isconnected: true,\n          isEarMeasure: false\n\n        })\n        is97Time = new Date()\n      },\n      177: () => {         //探头id\n        let dataArr1 = newArr.map(item => {\n          if (item.toString(16).length < 2) {\n            return '0' + item.toString(16)\n          } else {\n            return item.toString(16)\n          }\n        })\n\n\n        let id = ''\n        for (let i = 3; i < dataArr1.length - 2; i++) {\n          id += dataArr1[i]\n\n        }\n        console.log(id, dataArr1[7]);\n\n        this.setState({\n          probeID: id,\n          petVitalTypeId: dataArr1[7]\n        })\n        if (dataArr1[7] === '01') {\n          this.setState({\n            mearsurePart: 1\n          })\n        } else if (dataArr1[7] === '02') {\n          this.setState({\n            mearsurePart: 2\n          })\n        } else if (dataArr1[7] === '03') {\n          this.setState({\n            mearsurePart: 3\n          })\n        }\n\n\n\n      },\n      7: () => {  //发什么收什么，需要去重新插拔底座\n        console.log('重新插拔底座');\n        if (num07 === 3 && this.state.err07Visible === false) {\n          this.setState({\n            err07Visible: true\n          })\n        }\n      },\n      99: () => { //体脂称的广播信息\n        function getVal (shi, xiaoshuo) {\n\n          if (shi.length < 2) {\n            shi = `0${shi}`\n          }\n          if (xiaoshuo.length < 2) {\n            xiaoshuo = `0${xiaoshuo}`\n          }\n          return `0x${shi}${xiaoshuo}`\n        }\n\n\n        let weight = getVal((dataArr1[3]).toString(16), (dataArr1[4]).toString(16))\n        let impedance = getVal((dataArr1[5]).toString(16), (dataArr1[6]).toString(16))\n        let sendWeight = null\n        try {\n          sendWeight = parseInt(weight) / 100\n          weight = parseInt(weight) / 100 * 2.2046\n          if (impedance) {\n            impedance = parseInt(impedance)\n          }\n          weight = weight.toFixed(1)\n\n        } catch (error) {\n          console.log(error);\n        }\n\n        if (weight) {\n          // console.log(sameBiggieNum, keyboardBiggieFlog);\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\n\n            sameBiggieNum++\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\n              console.log('键盘写入');\n              let { units, sendWeight, biggieDate } = this.state\n\n              let weight = units === '℃' ? sendWeight : biggieDate\n              ipcRenderer.send('keyboardWriting', weight)\n            }\n\n          } else {\n            sameBiggieNum = 0\n            keyboardBiggieFlog = false\n          }\n\n          this.setState({\n            biggieDate: weight,\n            impedance,\n            sendWeight,\n            isHaveBigieDate: true\n          })\n        }\n\n      },\n      100: () => {//蓝牙软尺广播的数据\n        let confirmBtn = newArr[6]    //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\n        let rulerUnitNum = newArr[11] //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\n        let newVal = null             //为测量数值，和单位匹配对应\n        const ITEMINDEX = 6\n\n        //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n        let num1 = dataArr1[7]\n        let num2 = dataArr1[8]\n        let num = getVal(num1, num2)\n        try {\n          newVal = (parseInt(num) / 100)\n          if (newVal < 3) {\n            newVal = 0\n          }\n\n          if (rulerUnitNum >= 80) {\n            newVal = (newVal * 0.3937).toFixed(2)\n\n          } else {\n            newVal = newVal.toFixed(1)\n          }\n        } catch (error) {\n          console.log(error);\n        }\n\n\n        function getVal (shi, xiaoshuo) {\n\n          if (shi.length < 2) {\n            shi = `0${shi}`\n          }\n          if (xiaoshuo.length < 2) {\n            xiaoshuo = `0${xiaoshuo}`\n          }\n          return `0x${shi}${xiaoshuo}`\n        }\n\n        //点击了确认按钮\n        let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n          h2tLength, torsoLength\n        } = this.state\n        if (confirmBtn === 161) {\n          if (!nextFlog) {\n            nextFlog = true\n\n\n            let units = rulerUnitNum >= 80 ? 'in' : 'cm'\n            if (itemIndex === ITEMINDEX) {\n              // this._next()\n              return\n            }\n            let newitemIndex = itemIndex >= ITEMINDEX ? ITEMINDEX : itemIndex + 1\n            let textValue = ''\n            switch (itemIndex) {\n              case 1: textValue = l2rarmDistance; break;\n              case 2: textValue = h2tLength; break;\n              case 3: textValue = torsoLength; break;\n              case 4: textValue = neckCircumference; break;\n              case 5: textValue = upperTorsoCircumference; break;\n              case 6: textValue = lowerTorsoCircumference; break;\n              default:\n                break;\n            }\n\n            if (newVal !== textValue && parseInt(newVal) > 0) {\n\n              switch (itemIndex) {\n                case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, units }); break;\n                case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, units }); break;\n                case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, units }); break;\n                case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, units }); break;\n                // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\n                case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\n                case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\n                default: this.setState({\n                  itemIndex: newitemIndex\n                  , units\n                })\n                  break;\n              }\n            } else {\n              this.setState({\n                itemIndex: newitemIndex,\n                units\n              })\n            }\n\n\n\n          }\n        } else if (confirmBtn === 160) {\n          nextFlog = false\n          let textValue = ''\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\n\n          switch (itemIndex) {\n            case 1: textValue = l2rarmDistance; break;\n            case 2: textValue = h2tLength; break;\n            case 3: textValue = torsoLength; break;\n            case 4: textValue = neckCircumference; break;\n            case 5: textValue = upperTorsoCircumference; break;\n            case 6: textValue = lowerTorsoCircumference; break;\n          }\n\n          if (newVal !== textValue && parseInt(newVal) > 0) {\n            if (!avoidRepetition) {\n              avoidRepetition = true\n              this.avoidRepetition = setTimeout(() => {\n                avoidRepetition = false\n                this.avoidRepetition && clearTimeout(this.avoidRepetition)\n              }, 100);\n              switch (itemIndex) {\n                case 1: this.setState({ l2rarmDistance: newVal, units }); break;\n                case 2: this.setState({ h2tLength: newVal, units }); break;\n                case 3: this.setState({ torsoLength: newVal, units }); break;\n                case 4: this.setState({ neckCircumference: newVal, units }); break;\n                case 5: this.setState({ upperTorsoCircumference: newVal, units }); break;\n                case 6: this.setState({ lowerTorsoCircumference: newVal, units }); break;\n                default:\n                  break;\n              }\n            }\n          }\n        }\n\n\n\n\n      },\n      255: () => {\n        // console.log(dataArr1);\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n\n              }\n              bluName = str\n              // console.log('--蓝牙名称:', bluName);\n\n\n              break;\n\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址'); \n              break;\n\n            case 3: console.log('----尺子的,不知道什么用'); break;\n\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n\n        if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\n\n          let weight = `0x${bluData[10]}${bluData[11]}`\n          let impedance = `0x${bluData[12]}${bluData[13]}`\n          let sendWeight = null\n          try {\n            //sendWeight的值单位是kg,weight的值为lb(磅)\n            sendWeight = parseInt(weight) / 100\n            weight = parseInt(weight) / 100 * 2.2046\n            if (impedance) {\n              impedance = parseInt(impedance)\n            }\n            weight = weight.toFixed(1)\n\n          } catch (error) {\n            console.log(error);\n          }\n          // console.log('----秤', weight, impedance);\n\n          if (weight) {\n            // console.log(sameBiggieNum, keyboardBiggieFlog);\n            if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\n\n              sameBiggieNum++\n              if (!keyboardBiggieFlog && sameBiggieNum === 6) {\n                console.log('键盘写入');\n                let { units, sendWeight, biggieDate } = this.state\n\n                let weight = units === '℃' ? sendWeight : biggieDate\n                ipcRenderer.send('keyboardWriting', weight)\n              }\n\n            } else {\n              sameBiggieNum = 0\n              keyboardBiggieFlog = false\n            }\n\n            this.setState({\n              biggieDate: weight,\n              impedance,\n              sendWeight,\n              isHaveBigieDate: true\n            })\n          }\n        } else if (bluName.indexOf('Tape') !== -1) {\n\n          let confirmBtn = parseInt(bluData[8], 16)     //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\n          let rulerUnitNum = parseInt(bluData[13], 16) //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\n          let newVal = null             //为测量数值，和单位匹配对应\n          const ITEMINDEX = 7\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\n\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n          let num1 = bluData[9]\n          let num2 = bluData[10]\n          let num = getVal(num1, num2)\n          try {\n            newVal = (parseInt(num) / 100)\n            if (newVal < 3) {\n              newVal = 0\n            }\n\n            if (rulerUnitNum >= 80) {\n              newVal = (newVal * 0.3937).toFixed(2)\n\n            } else {\n              newVal = newVal.toFixed(1)\n            }\n          } catch (error) {\n            console.log(error);\n          }\n\n\n\n          function getVal (shi, xiaoshuo) {\n\n            if (shi.length < 2) {\n              shi = `0${shi}`\n            }\n            if (xiaoshuo.length < 2) {\n              xiaoshuo = `0${xiaoshuo}`\n            }\n            return `0x${shi}${xiaoshuo}`\n          }\n\n          //点击了确认按钮\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n            h2tLength, torsoLength\n          } = this.state\n          if (confirmBtn === 161) {\n            if (!nextFlog) {\n              nextFlog = true\n\n              if (itemIndex === ITEMINDEX) {\n                this._updatePetAttributes()\n                return\n              }\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\n\n              let textValue = ''\n              switch (itemIndex) {\n                case 1: textValue = l2rarmDistance; break;\n                case 2: textValue = h2tLength; break;\n                case 3: textValue = torsoLength; break;\n                case 4: textValue = neckCircumference; break;\n                case 5: textValue = upperTorsoCircumference; break;\n                case 6: textValue = lowerTorsoCircumference; break;\n                default:\n                  break;\n              }\n\n              if (newVal !== textValue && parseInt(newVal) > 0) {\n                switch (itemIndex) {\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  default: this.setState({\n                    itemIndex: newitemIndex\n                    , rulerUnit: units\n                  })\n                    break;\n                }\n              } else {\n                this.setState({\n                  itemIndex: newitemIndex,\n                  rulerUnit: units\n                })\n              }\n\n\n\n            }\n          } else if (confirmBtn === 160) {\n            nextFlog = false\n            let textValue = ''\n\n\n            switch (itemIndex) {\n              case 1: textValue = l2rarmDistance; break;\n              case 2: textValue = h2tLength; break;\n              case 3: textValue = torsoLength; break;\n              case 4: textValue = neckCircumference; break;\n              case 5: textValue = upperTorsoCircumference; break;\n              case 6: textValue = lowerTorsoCircumference; break;\n            }\n\n            if (newVal !== textValue && parseInt(newVal) > 0) {\n              if (!avoidRepetition) {\n                avoidRepetition = true\n                this.avoidRepetition = setTimeout(() => {\n                  avoidRepetition = false\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\n                }, 100);\n                switch (itemIndex) {\n                  case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); break;\n                  case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); break;\n                  case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); break;\n                  case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); break;\n                  case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); break;\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); break;\n                  default:\n                    break;\n                }\n              }\n            }\n          }\n\n        } else if (bluName.indexOf('Mella Measure') !== -1 && this.state.devicesType === 'biggie') {\n          //255\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n            h2tLength, torsoLength\n          } = this.state\n          // console.log('结束循环蓝牙名称', bluData)\n          let confirmBtn = bluData[8]     //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\n\n          let rulerUnitNum = parseInt(bluData[11], 16) //十进制数字，值等于11代表单位为in，00代表单位为cm\n          let newVal = null             //为测量数值，和单位匹配对应\n          const ITEMINDEX = 6\n          let units = rulerUnitNum === 0 ? 'cm' : 'in'\n\n\n          if (units !== this.state.rulerUnit) {\n            if (units === 'cm') {\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) * 2.54).toFixed(1)}` : ''\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) * 2.54).toFixed(1)}` : ''\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) * 2.54).toFixed(1)}` : ''\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) * 2.54).toFixed(1)}` : ''\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) * 2.54).toFixed(1)}` : ''\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) * 2.54).toFixed(1)}` : ''\n            } else {\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) / 2.54).toFixed(2)}` : ''\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) / 2.54).toFixed(2)}` : ''\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) / 2.54).toFixed(2)}` : ''\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) / 2.54).toFixed(2)}` : ''\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) / 2.54).toFixed(2)}` : ''\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) / 2.54).toFixed(2)}` : ''\n            }\n\n            this.setState({\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n              h2tLength, torsoLength,\n              rulerUnit: units\n            })\n\n\n          }\n\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n          let num1 = bluData[9]\n          let num2 = bluData[10]\n          let num = getVal(num1, num2)\n          try {\n            newVal = parseFloat(num)\n            if (rulerUnitNum === 17) {\n              newVal = newVal.toFixed(2)\n\n            } else {\n              newVal = newVal.toFixed(1)\n            }\n          } catch (error) {\n            console.log(error);\n          }\n\n\n\n          function getVal (shi, xiaoshuo) {\n            let num1 = parseInt(shi, 16)\n            let num2 = parseInt(xiaoshuo, 16)\n\n            return `${num1}.${num2}`\n          }\n\n          //点击了确认按钮\n\n          if (confirmBtn[1] === '2' && confirmBtn[0] !== confirmBtnFlog) {\n            confirmBtnFlog = confirmBtn[0]\n            if (!nextFlog) {\n              nextFlog = true\n\n              if (itemIndex === ITEMINDEX) {\n                this._updatePetAttributes()\n                return\n              }\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\n\n              let textValue = ''\n              try {\n                switch (itemIndex) {\n                  case 1: textValue = l2rarmDistance; this.input2 && this.input2.focus(); break;\n                  case 2: textValue = h2tLength; this.input3 && this.input3.focus(); break;\n                  case 3: textValue = torsoLength; this.input4 && this.input4.focus(); break;\n                  case 4: textValue = neckCircumference; this.input5 && this.input5.focus(); break;\n                  case 5: textValue = upperTorsoCircumference; this.input6 && this.input6.focus(); break;\n                  case 6: textValue = lowerTorsoCircumference; this.input7 && this.input7.focus(); break;\n                  default:\n                    break;\n                }\n              } catch (error) {\n                console.log(error);\n              }\n\n\n\n\n              if (newVal !== textValue && parseInt(newVal) >= 0) {\n                switch (itemIndex) {\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\n                  default: this.setState({\n                    itemIndex: newitemIndex\n                    , rulerUnit: units\n                  })\n                    break;\n                }\n              } else {\n                this.setState({\n                  itemIndex: newitemIndex,\n                  rulerUnit: units\n                })\n              }\n\n\n\n            }\n          } else if (confirmBtn === '01') {\n            nextFlog = false\n            let textValue = ''\n\n\n            switch (itemIndex) {\n              case 1: textValue = l2rarmDistance; break;\n              case 2: textValue = h2tLength; break;\n              case 3: textValue = torsoLength; break;\n              case 4: textValue = neckCircumference; break;\n              case 5: textValue = upperTorsoCircumference; break;\n              case 6: textValue = lowerTorsoCircumference; break;\n            }\n\n            if (newVal !== textValue && parseInt(newVal) >= 0) {\n              if (!avoidRepetition) {\n                avoidRepetition = true\n                this.avoidRepetition = setTimeout(() => {\n                  avoidRepetition = false\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\n                }, 100);\n                try {\n                  switch (itemIndex) {\n                    case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); this.input1 && this.input1.focus(); break;\n                    case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); this.input2 && this.input2.focus(); break;\n                    case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); this.input3 && this.input3.focus(); break;\n                    case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); this.input4 && this.input4.focus(); break;\n                    case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); this.input5 && this.input5.focus(); break;\n                    case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); this.input6 && this.input6.focus(); break;\n                    default:\n                      break;\n                  }\n                } catch (error) {\n                  console.log(error);\n                }\n\n              }\n            }\n          }\n\n        }\n\n        // if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\n        // console.log(bluData);\n\n        else if (bluName.indexOf('Biggie') !== -1 && this.state.devicesType === 'biggie' && bluData.length > 10) {\n          function getVal (shi) {\n            if (`${shi}`.length < 2) {\n              return `0${shi}`\n            }\n            return `${shi}`\n\n          }\n\n          let newArr = bluData\n\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(newArr[10].toString(16))}`\n          weight = parseInt(weight, 16)\n\n\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(newArr[13].toString(16))}`\n          impedance = parseInt(impedance, 16)\n\n          let arr11 = getVal(newArr[11].toString(16))\n\n          weight = weight / Math.pow(10, parseInt(arr11[0]))\n          // console.log('重量为', weight);\n          let weightUnits = 'kg'\n          let sendWeight, biggieDate\n          switch (arr11[1]) {\n            case '0':\n              weightUnits = 'kg';\n              sendWeight = weight;\n              biggieDate = (weight * 2.2046).toFixed(2)\n              break;\n            case '1':\n              weightUnits = 'lb';\n              sendWeight = weight;\n              biggieDate = (weight * 2).toFixed(2)\n              break;\n            default:\n              break;\n          }\n\n          // if (`${getVal(newArr[8].toString(16))}` === '03') {\n          //   //进入了结束测量\n          //   if (!biggieSave) {\n          //     //第一条测量完成指令\n          //     console.log('键盘写入');\n          //     let { units, } = this.state\n\n          //     let weight = units === '℃' ? sendWeight : biggieDate\n          //     ipcRenderer.send('keyboardWriting', weight)\n\n          //   }\n          //   biggieSave = true\n          // } else {\n          //   biggieSave = false\n          // }\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\n\n            sameBiggieNum++\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\n              console.log('键盘写入');\n              let { units, } = this.state\n\n              let weight = units === '℃' ? sendWeight : biggieDate\n              ipcRenderer.send('keyboardWriting', weight)\n            }\n\n          } else {\n            sameBiggieNum = 0\n            keyboardBiggieFlog = false\n          }\n\n\n\n          if (weight >= 0) {\n\n            this.setState({\n              biggieDate,\n              impedance,\n              sendWeight,\n              isHaveBigieDate: true\n            })\n          }\n\n\n\n\n\n\n        }\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  testCheck = (arr) => {\n    if (arr.length < 7) {\n      return false\n    }\n    let i = 7\n    let checkFloag = arr[i];\n\n\n    for (i = 8; i < arr.length - 2; i++) {\n      checkFloag = checkFloag ^ arr[i];\n    }\n    return checkFloag;\n  }\n  getMac = (arr) => {\n    // console.log(arr);\n    let str = arr[1].toString(16)\n    if (str.length === 1) {\n      str = '0' + str\n    }\n    for (let i = 2; i < 7; i++) {\n\n      let item = arr[i].toString(16)\n      if (item.length === 1) {\n        item = '0' + item\n      }\n      str += `:${item}`\n      // }\n\n\n    }\n\n\n\n\n    return str\n  }\n  //15秒的预测程序\n  _time15 = (val) => {\n\n    let isDog = true\n    let { petSpeciesBreedId } = this.state\n    if (petSpeciesBreedId < 136) {\n      isDog = false\n    }\n    let parame = {\n      ambient_temperature: 25,\n      data: clinicalYuce,\n      deviceId: '11111111111111111111111111',\n\n      sampling_rate: '104ms'\n    }\n\n    console.log('预测传入数据', parame);\n\n    let url = !isDog ? '/clinical/dogPredict' : '/clinical/catPredict'\n    console.log(url)\n    console.log('预测发送只', parame);\n\n    fetchRequest(url, 'POST', parame)\n      .then((res) => {\n        // predictionFlog = false\n        if (res.message === 'Success') {\n          console.log('预测返回值：', res);\n\n          let prediction = res.result.prediction.toFixed(2)\n          temp15 = parseFloat(prediction)\n\n        } else {\n          console.log('system error')\n        }\n\n\n      })\n      .catch((err) => {\n        console.log(`:${err}`)\n\n      })\n\n\n\n  }\n  //预测程序\n  _prediction = (val) => {\n\n    let isDog = true\n    let { petSpeciesBreedId } = this.state\n    if (petSpeciesBreedId < 136) {\n      isDog = false\n    }\n    let parame = {\n      // ambient_temperature: this.state.huanwen,\n      ambient_temperature: 17,\n\n      data: clinicalYuce,\n      deviceId: `${this.state.probeId}`,\n      // deviceId: '11111111111111111111111111',\n\n      sampling_rate: '135ms'\n    }\n\n    console.log('预测传入数据', parame);\n\n    clinicalYuce = []\n    clinicalIndex = 0\n\n    let url = isDog ? '/clinical/dogv12Predict' : '/clinical/catv12Predict'\n    console.log(url, petSpeciesBreedId)\n    console.log('预测发送只', parame);\n\n    fetchRequest(url, 'POST', parame)\n      .then((res) => {\n        console.log('预测结果：', res);\n        // predictionFlog = false\n        if (res.message === 'Success') {\n          console.log('预测返回值：', res);\n\n          let prediction = res.result.prediction.toFixed(2)\n          console.log(prediction);\n\n\n          let tempArr = prediction.split('.')\n          let intNum = tempArr[0]\n          let flotNum = tempArr[1]\n          if (intNum.length < 2) {\n            intNum = '0' + intNum\n          }\n          if (flotNum.length < 2) {\n            flotNum = '0' + flotNum\n          }\n          endflog = false\n\n\n          //1.这里先注释掉,后面忘了取消注释\n          const timeID1 = setInterval(() => {\n            if (endflog) {\n              let Temp = parseFloat(prediction)\n              let progress = (Temp - 25) * 5\n              this.setState({\n                Temp,\n                progress\n              })\n              endflog = false\n\n              timeID1 && clearInterval(timeID1)\n            } else {\n              const timeID = setTimeout(() => {\n                ipcRenderer.send('usbdata', { command: '42', arr: [intNum, flotNum] })\n                timeID && clearTimeout(timeID)\n              }, 10)\n\n            }\n          }, 200)\n\n\n\n        } else {\n          const timeID = setTimeout(() => {\n            // this.sendData('41', [])\n            ipcRenderer.send('usbdata', { command: '41', arr: [] })\n\n            clearTimeout(timeID)\n          }, 10)\n          console.log('system error')\n        }\n\n\n      })\n      .catch((err) => {\n        // predictionFlog = false\n        console.log(err);\n        const timeID = setTimeout(() => {\n          // this.sendData('41', [])\n          ipcRenderer.send('usbdata', { command: '41', arr: [] })\n\n          clearTimeout(timeID)\n        }, 10)\n        console.log(`:${err}`)\n\n      })\n\n\n\n  }\n  _mearsurePort = () => {\n    switch (this.state.devicesType) {\n      case 'mella':\n        switch (this.state.mearsurePart) {\n          case 1: return (\n            <div >\n              <div className='part'>\n                Axillary\n                <img src={ye} alt=\"\" width=\"50px\" />\n\n              </div>\n            </div>\n          );\n          case 2: return (\n            <div >\n              <div className='part'>\n                Rectal\n                <img src={gang} alt=\"\" width=\"50px\" />\n\n              </div>\n            </div>\n          );\n          default: return (\n            <div >\n              <div className='part'>\n                Ear\n                <img src={er} alt=\"\" width=\"50px\" />\n\n              </div>\n            </div>\n          );\n        }\n\n        break;\n      case 'biggie':\n        return (\n          <div className='part'>\n            Scale\n            <img src={scale} alt=\"\" width=\"50px\" />\n\n          </div>\n        )\n        break\n      default:\n        break;\n    }\n\n\n  }\n  _getHistory = () => {\n    let historys = []\n    this.setState({\n      loading: true\n    })\n    fetchRequest(`/pet/getPetExamByPetId/${this.state.petId}`, 'GET', '')  //userID要自动的\n      .then(res => {\n        console.log(res);\n        this.setState({\n          loading: false\n        })\n        if (res.flag === true) {\n          let datas = res.data\n          console.log('-------', datas);\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i]\n            let { petId, examId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo,\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime,\n              modifiedTime, fat, weight } = data\n            // console.log(createTime);\n            let time = null\n            if (storage.vetspireOrEzyvet === '2') {\n              time = modifiedTime\n              if (modifiedTime === '' || modifiedTime === null) {\n                time = createTime\n              }\n            } else {\n              time = createTime\n            }\n            let json = {\n              time,\n              Temp: temperature,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              fat, weight\n            }\n            // console.log(json);\n            historys.push(json)\n\n\n          }\n          console.log('----', historys);\n          let historyData = []\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i]\n            let { bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId, examId, time, fat, weight } = history\n            let placement = history.placement\n            if (placement === null || placement === '') {\n              placement = 1\n            }\n            let str = {\n              date: moment(time).format('MMM DD'),\n              time: moment(time).format('hh:mm A'),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId,\n              key: examId,\n              fat, weight\n            }\n            historyData.push(str)\n          }\n          console.log('historyData:', historyData);\n          this.setState({\n            historyData\n          })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loading: false\n        })\n        console.log(err);\n      })\n\n  }\n\n\n\n  _getPetInfo = (value) => {\n    let datas = null\n\n    datas = {\n      patientId: this.state.patientId,\n      org: this.state.org\n    }\n\n\n\n    console.log('入参：', datas);\n    fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\n      .then(res => {\n        console.log('宠物信息', res);\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          //有宠物，进入1\n          let { petId, petSpeciesBreedId } = res.data[0]\n          console.log('------------', petId);\n          this.setState({\n            petId,\n            petSpeciesBreedId\n          }, () => {\n            console.log('去获取历史记录');\n            this._getHistory()\n          })\n        } else {\n          //没有宠物，进入2\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        console.log(err);\n      })\n\n  }\n\n  draggleRef = React.createRef();\n\n  showModal = () => {\n    this.setState({\n      visible: true\n    });\n  };\n\n\n\n\n\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n  _changeDeviceType = (val, e) => {\n    console.log(val, e)\n    this.setState({\n      devicesType: val\n    })\n\n    if (val === 'biggie' && this.state.isHaveBigieDate) {\n      this.setState({\n        isHaveBigieDate: false\n      })\n      keyboardBiggieFlog = false\n      sameBiggieNum = 0\n    }\n\n    temporaryStorage.devicesType = val\n\n\n\n\n  }\n  _refresh = () => {\n    console.log('点击了');\n    this.setState({\n      spin: true,  //\n      // addpatient_description: '',\n      // addpatient_petName: '',\n      // addpatient_species: 1\n    })\n    if (this.state.addpatient_patientId === '') {\n      this.setState({\n        spin: false\n      })\n    } else {\n      let list = electronStore.get('doctorExam')\n\n      let searchData = []\n      let keyWord = this.state.addpatient_patientId\n      for (let i = 0; i < list.length; i++) {\n        let patientId = list[i].patientId\n        if (`${patientId}` === keyWord) {\n          searchData.push(list[i])\n        }\n      }\n      console.log('搜索到的宠物为', searchData);\n      if (searchData.length > 0) {\n        let data = searchData[0]\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n          h2tLength, torsoLength } = data\n\n        l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\n        neckCircumference = neckCircumference ? `${neckCircumference}` : ''\n        upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\n        lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\n        h2tLength = h2tLength ? `${h2tLength}` : ''\n        torsoLength = torsoLength ? `${torsoLength}` : ''\n        let weight = data.weight\n        if (weight && weight !== 'unknown') {\n          weight = parseFloat(weight).toFixed(1)\n        }\n        let breedName = data.breed\n        if (!breedName) {\n          breedName = 'unknown'\n        }\n        switch (breedName) {\n          case 'defaultdog':\n            breedName = 'Dog'\n\n            break;\n          case 'defaultother':\n            breedName = 'Other'\n\n            break;\n          case 'defaultcat':\n            breedName = 'Cat'\n            break;\n\n        }\n        console.log('-----------', weight);\n        this.setState({\n          petName: data.petName,\n          owner: data.owner,\n          breedName,\n          weight,\n          age: data.age,\n          patientId: data.patientId,\n          petId: data.petId,\n          itemIndex: 1,\n          l2rarmDistance,\n          neckCircumference,\n          upperTorsoCircumference,\n          lowerTorsoCircumference,\n          h2tLength,\n          torsoLength,\n          isWalkIn: false\n        }, () => {\n          this._getHistory()\n        })\n      } else {\n        this.setState({\n          spin: false\n        })\n      }\n    }\n  }\n\n  selectWZ = (val) => {\n    switch (val) {\n      case 'dog':\n        this.setState({\n          catImg: cat1,\n          dogImg: redDog1,\n          otherImg: other,\n          selectWZ: val,\n        })\n\n        break;\n\n      case 'cat':\n        this.setState({\n          catImg: redCat1,\n          dogImg: dog1,\n          otherImg: other,\n          selectWZ: val,\n        })\n\n        break;\n\n      case 'other':\n        this.setState({\n          catImg: cat1,\n          dogImg: dog1,\n          otherImg: redother,\n          selectWZ: val,\n        })\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  _topLeft = () => {\n    let { patientId, breedName, isMix, age, petName, owner, weight, url, speciesId, petId, isWalkIn, spin, dogImg, catImg, otherImg, addpatient_patientId } = this.state\n    if (isWalkIn) {\n\n      return (\n        <div className=\"l\">\n          <div className=\"petinfo\">\n            <div className=\"heard\"\n              style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\n            >\n\n              <div className=\"ltitle\" style={{ marginLeft: px(30) }}>\n                <p > {`Walk-In Exam`}</p>\n              </div>\n            </div>\n\n            <div className=\"walkPetinfo\"\n              style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(30), }}\n            >\n              <div className=\"patirntID\"\n                style={{ marginTop: px(10), }}\n              >\n                <p style={{ width: '80px', }}>Patient ID:</p>\n                <Input\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\n\n                  value={addpatient_patientId}\n                  bordered={false}\n                  onChange={(item) => {\n                    this.setState({\n                      addpatient_patientId: item.target.value.replace(/\\s/g, \"\")\n                    })\n                  }}\n                  onKeyDown={(e) => {\n                    // console.log('------', e);\n                    if (e.keyCode === 13) {\n                      this._refresh()\n                    }\n                  }}\n                />\n                <SyncOutlined className='refresh'\n                  style={{ fontSize: px(25) }}\n                  onClick={this._refresh} spin={spin} />\n              </div>\n\n              <div className='newPet'>\n                <div className=\"patirntID\"\n                  style={{ marginTop: px(10) }}\n                >\n                  <p style={{ width: '80px' }}>Pet Name*:</p>\n                  <Input\n                    // style={{ border: 'none', outline: 'medium' }}\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\n\n                    value={this.state.addpatient_petName}\n                    bordered={false}\n                    onChange={(item) => {\n                      // console.log(item);\n                      this.setState({\n                        addpatient_petName: item.target.value\n                      })\n                    }}\n                  />\n                </div>\n                <div className=\"patirntID\"\n                  style={{ marginTop: px(10) }}\n                >\n                  <p style={{ width: '80px' }}>Description:</p>\n                  <Input\n                    // style={{ border: 'none', outline: 'medium' }}\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\n\n                    value={this.state.addpatient_description}\n                    bordered={false}\n                    onChange={(item) => {\n                      // console.log(item);\n                      this.setState({\n                        addpatient_description: item.target.value\n                      })\n                    }}\n                  />\n                </div>\n\n\n                <div className=\"species\" style={{ marginBottom: px(20), height: px(70), marginTop: px(10) }}>\n\n                  <ul>\n                    <li >\n                      <div className='speciesChild' >\n                        <div className='dog'\n\n                          onClick={() => { this.selectWZ('dog') }}>\n                          <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\n                        </div>\n                        Dog\n                      </div>\n                    </li>\n                    <li>\n                      <div className='speciesChild' >\n                        <div className='dog' onClick={() => { this.selectWZ('cat') }} >\n                          <img src={catImg} alt=\"\" style={{ height: px(40) }} />\n                        </div>\n                        Cat\n                      </div>\n                    </li>\n                    <li >\n                      <div className='speciesChild' >\n                        <div className='dog' onClick={() => { this.selectWZ('other') }} >\n                          <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\n                        </div>\n                        Other\n                      </div>\n                    </li>\n\n                  </ul>\n                </div>\n\n\n              </div>\n\n            </div>\n          </div>\n\n\n\n\n          <div className=\"deviceInfo\">\n            <div className=\"heard1\"\n              style={{ height: px(40), marginTop: px(10), paddingRight: px(10), paddingLeft: px(30) }}\n            >\n              <span>Device Info</span>\n            </div>\n            <div className=\"devicesBody\"\n              style={{ marginTop: mTop(23) }}\n            >\n              <div className=\"devices\"\n                style={{ paddingLeft: px(31) }}\n              >\n                <p>Device:</p>\n                <Select\n                  value={this.state.devicesType}\n                  style={{ width: 120 }}\n                  size={'small'}\n                  onChange={this._changeDeviceType}\n                >\n                  <Option value=\"mella\">Mella</Option>\n                  <Option value=\"biggie\">Biggie</Option>\n                </Select>\n              </div>\n              {this._mearsurePort()}\n            </div>\n\n          </div>\n        </div>\n      )\n\n    }\n\n    if (breedName === null) {\n      breedName = ''\n    }\n    let mix = ''\n    if (isMix === true) {\n      mix = 'Mix'\n    }\n    let title = ''\n    if (petName && `${petName}`.toLowerCase() !== 'unknown') {\n      title += `${petName}`\n    }\n    if (petName && `${petName}`.toLowerCase() !== 'unknown' && patientId && `${patientId}`.toLowerCase() !== 'unknown') {\n      title += `, \\xa0 `\n    }\n    if (patientId && `${patientId}`.toLowerCase() !== 'unknown') {\n      title += `ID: ${patientId}`\n    }\n\n    let wei = (weight && `${weight}`.toLowerCase() !== 'unknown') ? `${weight}` : ''\n    if (wei && wei.indexOf(`kg`) === -1) {\n      wei += 'kg'\n    }\n    let image = `url(${other})`\n    if (url) {\n      image = `url(${url}?download=0&width=80)`\n    } else {\n      switch (speciesId) {\n        case 1: image = `url(${cat})`; break;\n        case 2: image = `url(${dog})`; break;\n\n        default:\n          break;\n      }\n    }\n\n\n\n\n    return (\n      <div className=\"l\">\n        <div className=\"petinfo\">\n          <div className=\"heard\"\n            style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\n          >\n            <div className=\"avaterBox\">\n              <div className='avatar'\n                style={{\n                  width: px(50),\n                  height: px(50),\n                  // marginRight: px(20),\n                  backgroundImage: image,\n                  marginLeft: px(20)\n\n\n                }}\n                onClick={() => {\n                  storage.goEditPet = 'nomalmeasurement'\n                  this.props.history.push({ pathname: '/page9', participate: { patientId, petName, petId } })\n                }}\n              >\n                {(storage.identity === '3') &&\n                  <img className='edit' src={edit} alt=\"\" width='18px' />}\n              </div>\n\n            </div>\n\n            <div className=\"ltitle\">\n              <p > {title}</p>\n            </div>\n\n\n\n          </div>\n\n          <div className=\"info\"\n            style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(60) }}\n          >\n            <p>Owner: {(owner && `${owner}`.toLowerCase() !== 'unknown') ? `${owner}` : ''}</p>\n            <p>Breed: {(breedName && `${breedName}`.toLowerCase() !== 'unknown') ? `${breedName}  ${mix}` : ''}</p>\n            <p>Age: {((age && `${age}`.toLowerCase() !== 'unknown') || age === 0) ? `${age} yrs` : ''} </p>\n            <p>Weight: {wei}</p>\n          </div>\n        </div>\n        <div className=\"deviceInfo\">\n          <div className=\"heard1\"\n            style={{ height: mTop(40), marginTop: mTop(10), paddingRight: px(10), paddingLeft: px(30) }}\n          >\n            <span>Device Info</span>\n          </div>\n          <div className=\"devicesBody\"\n            style={{ marginTop: mTop(23) }}\n          >\n            <div className=\"devices\"\n              style={{ paddingLeft: px(31) }}\n            >\n              <p>Device:</p>\n              <Select\n                value={this.state.devicesType}\n                style={{ width: 120 }}\n                size={'small'}\n                onChange={this._changeDeviceType}\n              >\n                <Option value=\"mella\">Mella</Option>\n                <Option value=\"biggie\">Biggie</Option>\n              </Select>\n            </div>\n            {this._mearsurePort()}\n          </div>\n\n        </div>\n      </div>\n    )\n\n\n\n  }\n  handleChange = index => {\n    console.log('---------', index);\n    this.setState({\n      furLength: index\n    })\n  };\n  handleChange1 = index => {\n    console.log('---------', index);\n    this.setState({\n      bodyType: index\n    })\n  };\n\n  _foot = () => {\n\n    // console.log('所有的历史记录：', historyData);\n\n\n\n    let lbgc = '', rbgc = ''\n    if (this.state.isNotes) {\n      lbgc = 'rgba(25,173,228,0.5)'; rbgc = 'rgba(105,201,237,1)'\n    } else {\n      lbgc = 'rgba(105,201,237,1)'; rbgc = 'rgba(25,173,228,0.5)'\n    }\n\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\"\n          style={{ height: '10%', }}\n        >\n          <div className=\"foot_l\" style={{ backgroundColor: lbgc }} onClick={() => this.setState({ isNotes: true })}>\n            Notes\n          </div>\n          <div className=\"foot_l\" style={{ backgroundColor: rbgc }} onClick={() => this.setState({ isNotes: false })}>\n            History\n          </div>\n        </div>\n        {(this.state.isNotes) ? (\n          this._notes()\n        ) : (this._history())}\n\n      </div >\n    )\n  }\n  _notes = () => {\n    let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n      h2tLength, torsoLength, rulerUnit, updatePetAttributes } = this.state\n    function num (val) {\n      let weight = val.target.value\n      let newText = weight.replace(/[^\\d.]/g, \"\");\n      newText = newText.replace(/^\\./g, \"\");\n      newText = newText.replace(/\\.{2,}/g, \".\");\n      newText = newText.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\");\n      newText = newText.replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3');//只能输入两个小数  \n      if (newText.indexOf(\".\") < 0 && newText != \"\") {//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额  \n        newText = parseFloat(newText)\n      }\n      return `${newText}`\n\n    }\n    if (this.state.devicesType === 'mella') {\n      return (\n        <div className=\"note\" style={{ height: mTop(256), marginTop: mTop(10) }}>\n          <textarea\n            rows=\"10\"\n            cols=\"30\"\n            value={this.state.notes}\n            onChange={(val) => {\n              console.log(val);\n              this.setState({\n                notes: val.target.value\n              })\n            }}\n          >\n          </textarea>\n        </div>\n      )\n    } else {\n      let { speciesId } = this.state\n      let species = speciesId === 1 ? catcareacte : careacte\n      return (\n        <div className=\"characteristics flex\">\n          <div className=\"careacterL flex\">\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Head Circumference:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{\n                    borderRadius: px(40), fontSize: px(17),\n                    paddingRight: px(20)\n                  }}\n                  value={l2rarmDistance}\n                  ref={(input) => { this.input1 = input }}\n                  // autoFocus={true}\n                  onChange={(val) => {\n                    let data = num(val)\n                    console.log(data);\n                    this.setState({\n                      l2rarmDistance: data\n                    })\n\n\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 1\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(15) }}>{rulerUnit}</div>\n              </div>\n            </div>\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Heard to Tail Length:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\n                  ref={(input) => { this.input2 = input }}\n                  value={h2tLength}\n                  onChange={(val) => {\n                    let data = num(val)\n                    this.setState({\n                      h2tLength: data\n                    })\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 2\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\n              </div>\n            </div>\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck to Tail Length:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\n                  ref={(input) => { this.input3 = input }}\n                  value={torsoLength}\n                  onChange={(val) => {\n                    let data = num(val)\n                    this.setState({\n                      torsoLength: data\n                    })\n\n\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 3\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\n              </div>\n            </div>\n\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\n                  ref={(input) => { this.input4 = input }}\n                  value={neckCircumference}\n                  onChange={(val) => {\n                    let data = num(val)\n                    this.setState({\n                      neckCircumference: data\n                    })\n\n\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 4\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\n              </div>\n            </div>\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Upper Torso:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\n                  value={upperTorsoCircumference}\n                  ref={(input1) => { this.input5 = input1 }}\n                  onChange={(val) => {\n                    let data = num(val)\n                    this.setState({\n                      upperTorsoCircumference: data\n                    })\n\n\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 5\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\n              </div>\n            </div>\n            <div className=\"item flex\">\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Lower Torso:</div>\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\n                <input type=\"text\"\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\n                  value={`${lowerTorsoCircumference}`}\n                  ref={(input) => { this.input6 = input }}\n                  onChange={(val) => {\n                    let data = num(val)\n                    this.setState({\n                      lowerTorsoCircumference: data\n                    })\n                  }}\n                  onFocus={() => {\n                    this.setState({\n                      itemIndex: 6\n                    })\n                  }}\n                />\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\n              </div>\n            </div>\n\n\n          </div>\n\n          <div className=\"careacterR flex\">\n            <div className=\"imgBox flex\" style={{ borderRadius: px(20) }}>\n              <img src={species} alt=\"\" style={{ width: '80%' }} />\n            </div>\n          </div>\n\n          <MyModal\n            visible={updatePetAttributes}\n            text={'Uploading pet information to database'}\n          />\n        </div >\n      )\n\n    }\n\n\n\n\n\n  }\n  //更新宠物的属性值，比如头尾、上躯干周长等\n  _updatePetAttributes = () => {\n    let { l2rarmDistance, lowerTorsoCircumference, upperTorsoCircumference, neckCircumference, rulerUnit, petId, h2tLength, torsoLength } = this.state\n\n\n    l2rarmDistance = newNum(l2rarmDistance)\n    lowerTorsoCircumference = newNum(lowerTorsoCircumference)\n    upperTorsoCircumference = newNum(upperTorsoCircumference)\n    neckCircumference = newNum(neckCircumference)\n    h2tLength = newNum(h2tLength)\n    torsoLength = newNum(torsoLength)\n\n    function newNum (val) {\n      if (val) {\n        if (rulerUnit === 'in') {\n          return parseFloat((parseFloat(val) * 2.54).toFixed(1))\n\n        } else {\n          return parseFloat(val)\n        }\n\n      } else {\n        return ''\n      }\n\n\n    }\n\n    let prams = {\n      l2rarmDistance: l2rarmDistance || null,\n      lowerTorsoCircumference: lowerTorsoCircumference || null,\n      upperTorsoCircumference: upperTorsoCircumference || null,\n      neckCircumference: neckCircumference || null,\n      h2tLength: h2tLength || null,\n      torsoLength: torsoLength || null,\n    }\n    this.setState({\n      updatePetAttributes: true\n    })\n    let url = `/pet/updatePetInfo/${storage.userId}/${this.state.petId}`\n    console.log('入参:', prams);\n    fetchRequest(url, 'POST', prams)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          updatePetAttributes: false,\n          itemIndex: 1\n        })\n        this.input1.focus();\n\n        if (res.flag) {\n          message.success('Uploaded successfully')\n        } else {\n          message.error('upload failed')\n        }\n\n\n\n\n      })\n      .catch(err => {\n        this.setState({\n          updatePetAttributes: false\n        })\n        message.error('update failed')\n        console.log(err);\n\n\n      })\n  }\n  _history = () => {\n    const _del = (key, record) => {\n      console.log('删除', key, record);\n\n\n      /**------------这里还要删除后台的数据------------ */\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, 'DELETE')\n        .then(res => {\n          if (res.flag === true) {\n            console.log('删除成功');\n            const historyData = [...this.state.historyData];\n            console.log(historyData);\n            this.setState({\n              historyData: historyData.filter((item) => item.historyId !== key)\n            });\n          } else {\n            console.log('删除失败');\n          }\n        })\n    }\n    const _edit = (key, record) => {\n      console.log('编辑', key, record);\n      this.setState({\n        visible: true,\n        editId: key,\n        memo: record.note\n      })\n\n\n\n    }\n\n    let { historyData, devicesType } = this.state\n    let listData = [], columns = []\n    switch (devicesType) {\n      case 'biggie':\n        for (let i = 0; i < historyData.length; i++) {\n          const element = historyData[i];\n          if (element.weight) {\n            listData.push(element)\n          }\n\n        }\n\n        columns = [\n          {\n            title: '',\n            dataIndex: 'operation',\n            key: 'operation',\n            width: '15%',\n            render: (text, record, index) => {\n              // console.log('狩猎:', text, record, index);\n              //record:\n              return (\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\n                  </Popconfirm>\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                  />\n                </div>\n              )\n\n            }\n          },\n          {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            width: '17%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: 'Time',\n            dataIndex: 'time',\n            key: 'time',\n            width: '17%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: `Weight`,\n            key: 'weight',\n            dataIndex: 'weight',\n            width: '13%',\n            render: (text, record, index) => {\n\n\n              let bag = '#58BDE6', tem = ''\n\n              if (this.state.units === '℃') {\n                if (text) {\n                  tem = `${text.toFixed(1)}kgs`\n                }\n              } else {\n\n                tem = `${(text * 2.2046).toFixed(1)}lbs`\n\n              }\n              return (\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n\n                  <p style={{ margin: 0, padding: 0, color: bag }}>{tem}</p>\n                </div>\n              )\n\n            }\n          },\n          {\n            title: 'BF%',\n            dataIndex: 'fat',\n            key: 'fat',\n            align: 'center',\n            width: '11%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: 'BCS',\n            dataIndex: 'bodyConditionScore',\n            key: 'bodyConditionScore',\n            align: 'center',\n            width: '18%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: 'Note',\n            dataIndex: 'note',\n            key: 'note',\n            width: '11%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ width: '70px' }}>{text}</p>\n              )\n\n            }\n          },\n        ];\n\n\n        break;\n      case 'mella':\n        for (let i = 0; i < historyData.length; i++) {\n          const element = historyData[i];\n          if (element.temp) {\n            listData.push(element)\n          }\n\n        }\n        columns = [\n          {\n            title: '',\n            dataIndex: 'operation',\n            key: 'operation',\n            width: '15%',\n            render: (text, record, index) => {\n              // console.log('狩猎:', text, record, index);\n              //record:\n              return (\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\n                  </Popconfirm>\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                  />\n                </div>\n              )\n\n            }\n          },\n          {\n            title: 'Date',\n            dataIndex: 'date',\n            key: 'date',\n            width: '17%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: 'Time',\n            dataIndex: 'time',\n            key: 'time',\n            width: '17%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ textAlign: 'center' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: `Temp(${this.state.units})`,\n            key: 'temp',\n            dataIndex: 'temp',\n            width: '17%',\n            render: (text, record, index) => {\n              // console.log(text, record);\n\n\n              /**\n              * bag：温度数值前的圆圈的背景颜色\n              * tem：展示的温度\n              * endvalue:将从后台得到的数据全部转化成华氏度\n              * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n              * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n              * \n              */\n\n              let bag = '', tem = ''\n\n              let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\n              let min = 99.5, max = 102.2\n              //99.5 = 37.5   102.2=39\n\n\n\n\n\n\n\n\n              if (endValue > max) {\n                bag = '#E1206D'\n              } else if (endValue < min) {\n                bag = '#98DA86'\n              } else {\n                bag = '#58BDE6'\n              }\n\n\n\n              if (this.state.units === '℃') {\n                if (text) {\n                  tem = `${text.toFixed(1)}${this.state.units}`\n                }\n              } else {\n                if (text) {\n                  if (text > 55) {\n                    tem = `${text}${this.state.units}`\n                  } else {\n                    tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\n                  }\n\n                }\n              }\n              return (\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                  {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\n                  <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n                </div>\n              )\n\n            }\n          },\n          {\n            title: 'Placement',\n            dataIndex: 'placement',\n            key: 'placement',\n            align: 'center',\n            width: '18%',\n            render: (text, record, index) => {\n              // console.log(text, record, index);\n              /**\n               * old:   1:腋温  2：肛温 3：耳温\n               * new:   1.腋温  2：大腿温度 3.肛温  4：耳温\n               */\n              switch (record.placement) {\n                case 0: return (    //腋温\n                  <div>\n                    <img src={placement_er} alt=\"\" />\n                  </div>\n                )\n                case 1: return (    //腋温\n                  <div>\n                    <img src={palcement_ye} alt=\"\" />\n                  </div>\n                )\n                case 3: return (     //肛温\n                  <div>\n                    <img src={placement_gang} alt=\"\" />\n                  </div>\n                )\n                case 2: return (     //肛温\n                  <div>\n                    <img src={placement_gang} alt=\"\" />\n                  </div>\n                )\n                case 4: return (    //耳温\n                  <div>\n                    <img src={placement_er} alt=\"\" />\n                  </div>\n                )\n                default: break;\n              }\n              return (\n                <p style={{ textAlign: 'center' }}>{text}</p>\n              )\n\n            }\n          },\n          {\n            title: 'Note',\n            dataIndex: 'note',\n            key: 'note',\n            width: '16%',\n            render: (text, record, index) => {\n\n              return (\n                <p style={{ width: '100%', textAlign: 'left', }}>{text}</p>\n              )\n\n            }\n          },\n        ];\n\n\n        break;\n\n      default:\n        break;\n    }\n\n\n\n\n\n    const pas = window.screen.height < 1000 ? 2 : 3\n\n    let hisHe = mTop(200)\n    try {\n      let historyElement = document.querySelectorAll('#clinicalMeasure .historyTable')\n      hisHe = historyElement[0].clientHeight - mTop(100)\n    } catch (error) {\n\n    }\n\n\n    return (\n      <div className='historyTable' style={{ height: '85%' }}>\n        <Table\n          loading={this.state.loading}\n          columns={columns}\n          dataSource={listData}\n          rowKey={columns => columns.historyId}\n          pagination={false}\n          scroll={{\n            y: hisHe\n          }}\n        />\n      </div>\n    )\n  }\n\n  _ciral = () => {\n\n    let num = px(280)\n    let windowWidth = document.documentElement.clientHeight\n    if (windowWidth) {\n      num = windowWidth * 0.30\n    }\n    return (\n      <div className=\"crial\" style={{ marginTop: mTop(50), }}>\n        {!this.state.isconnected && <div className=\"bb1\"\n          style={{ top: mTop(-40) }}\n        >\n          <div className=\"btn5\"\n            style={{ width: px(230), height: mTop(30), fontSize: px(16), }}\n            onClick={() => {\n              console.log('点击了切换按钮');\n\n              if (isClick === true) {\n                isClick = false\n                console.log('发送给主进程切换按钮');\n                ipcRenderer.send('qiehuan')\n                // ipcRenderer.send('getSerialPort')\n                const time = setTimeout(() => {\n                  isClick = true\n                  clearTimeout(time)\n                }, 2500)\n              }\n            }}\n          >Re-sync Base</div>\n        </div>}\n        <div className='flex' >\n          <Progress\n\n            type=\"dashboard\"\n\n            strokeColor={{\n              \"100%\": \"#108ee9\",\n              \"30%\": \"#87d068\"\n            }}\n            format={() => ``}\n            percent={this.state.progress}\n            gapDegree={30}\n            width={num}\n            strokeWidth={10}\n            success={{ strokeColor: 'red' }}\n\n          />\n          <div className=\"crialtext\"\n          // style={{ height: mTop(50), top: mTop(135) }}\n          >\n            {this._crialText()}\n          </div>\n        </div>\n\n\n        {this._btnEndTime()}\n      </div>\n    )\n  }\n  _save = () => {\n    if (this.state.isWalkIn) {\n      let { Temp, addpatient_description, addpatient_petName, addpatient_species } = this.state\n      let petVitalId = null\n      switch (this.state.petVitalTypeId) {\n        case '01': petVitalId = 1; break;\n        case '02': petVitalId = 3; break;\n        case '03': petVitalId = 4; break;\n        default: petVitalId = 1; break;\n      }\n      let datas = {\n\n        temperature: parseFloat(Temp),  //测量温度\n        doctorId: storage.userId,\n        memo: this.state.notes,\n        clinicalDataEntityList: [{\n          data0: parseFloat(Temp),\n          data1: parseFloat(Temp),\n          data2: parseFloat(Temp),\n        }],\n        petVitalTypeId: petVitalId,\n        petName: addpatient_petName,\n        description: addpatient_description,\n        speciesId: addpatient_species,\n\n      }\n      this.setState({\n        isWeightSave: true\n      })\n      console.log('入参', datas);\n\n      fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\n        .then(res => {\n          if (res.flag === true) {\n\n            let hardSet = electronStore.get('hardwareConfiguration')\n            let countdown = hardSet.is15 ? 15 : 30\n\n            this.setState({\n              initFlog: false,\n              endMeasure: false,\n              Temp: 0,\n              progress: 0,\n              countdown,\n              isWeightSave: false\n            })\n            temp15 = 0\n            message.success('Data successfully saved in Mella')\n\n          } else {\n            message.error('Save failed')\n            this.setState({\n              isWeightSave: false\n            })\n          }\n        })\n        .catch(err => {\n          message.error('Save failed')\n          this.setState({\n            isWeightSave: false\n          })\n        })\n\n\n      return\n    }\n    console.log(storage.vetspireOrEzyvet);\n    if (storage.identity === '2') {\n      let parames = {\n        consult_id: this.state.consult_id,\n        temperature: this.state.Temp\n      }\n      if (this.state.macAddr) {\n        parames.macAddr = this.state.macAddr\n      }\n      console.log(parames, storage.ezyVetToken);\n      //petVitalId是宠物测量部位\n      let petVitalId = null\n      switch (this.state.petVitalTypeId) {\n        case '01': petVitalId = 1; break;\n        case '02': petVitalId = 3; break;\n        case '03': petVitalId = 4; break;\n        default: petVitalId = 1; break;\n      }\n      console.log('ezy请求地址：', `/EzyVet/healthstatus/${this.state.healthStatus}/${this.state.probeID}/${this.state.petVitalTypeId}/${petVitalId}`);\n      fetchToken(`/EzyVet/healthstatus/${this.state.healthStatus}/${petVitalId}`, 'PATCH', parames, `Bearer ${storage.ezyVetToken}`)\n        .then(res => {\n          console.log(res);\n          if (res.msg === 'success') {\n            console.log('成功');\n            message.success('Saved successfully')\n            let hardSet = electronStore.get('hardwareConfiguration')\n            let countdown = hardSet.is15 ? 15 : 30\n            this.setState({\n              initFlog: false,\n              endMeasure: false,\n              Temp: 0,\n              progress: 0,\n              countdown,\n            })\n            temp15 = 0\n            this._getHistory()\n\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        })\n      return\n    } else if (storage.identity === '1') {\n      //这是vetspire的保存测量记录\n      let parames = {\n        APIkey: storage.API,\n        vitalId: storage.selectExamId,\n        temp: parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\n\n\n      }\n\n      console.log('------------------', parames);\n\n      fetchRequest1('/VetSpire/updateVitalsTemperatureByVitalId', 'POST', parames)\n        .then(res => {\n          console.log(res);\n          if (res.flag === true) {\n            if (res.data.updateVitals !== null) {\n              message.success('Saved successfully')\n            } else {\n              message.error('Save failed')\n            }\n            let sendData = {\n              petId: this.state.petId,\n              temperature: this.state.Temp,\n              memo: this.state.notes,\n              petVitalTypeId: this.state.petVitalTypeId\n            }\n            console.log('send', sendData);\n            fetchRequest('/pet/savePetExam', 'POST', sendData)\n              .then(res => {\n                console.log(res);\n                if (res.flag === true) {\n                  let hardSet = electronStore.get('hardwareConfiguration')\n                  let countdown = hardSet.is15 ? 15 : 30\n                  this.setState({\n                    initFlog: false,\n                    endMeasure: false,\n                    Temp: 0,\n                    progress: 0,\n                    countdown,\n                  })\n                  temp15 = 0\n                  this._getHistory()\n                }\n              })\n              .catch(err => {\n                console.log(err);\n              })\n          } else {\n            message.error('Save failed')\n          }\n        })\n        .catch(err => {\n          console.log(err);\n        })\n    } else {\n\n      //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\n      if (storage.lastOrganization === '34') {\n        console.log(this.state.patientId, this.state.petId);\n        let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\n\n        this.setState({\n          isWeightSave: true\n        })\n        fetchRhapsody('', 'POST', params, storage.connectionKey)\n          .then(res => {\n            console.log('---', res);\n\n\n            if (res.errors) {\n              message.error('Failed to obtain case list')\n              this.setState({\n                isWeightSave: false\n              })\n            } else {\n              let { vitals } = res.data.patient\n              let vitalArr = vitals.data\n              if (vitalArr.length > 0) {\n                vitalArr.sort((a, b) => {\n                  return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n                })\n                let temperature = parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\n\n                let params = {}\n                if (vitalArr[0].weight && vitalArr[0].weight.value) {\n                  params = {\n                    query: `mutation {\n                      updateVital(      \n                          id:\"${vitalArr[0].id}\"\n                          input:{\n                            weight:{value:${vitalArr[0].weight.value}}\n                              temperature:{value:${temperature}}\n                              patientId:\"${this.state.patientId}\"\n                          }\n                      )\n                      {\n                          id,\n                          weight{value},\n                          temperature{value}\n                      }\n                  }`}\n                } else {\n                  params = {\n                    query: `mutation {\n                      updateVital(      \n                          id:\"${vitalArr[0].id}\"\n                          input:{\n                              temperature:{value:${temperature}}\n                              patientId:\"${this.state.patientId}\"\n                          }\n                      )\n                      {\n                          id,\n                          weight{value},\n                          temperature{value}\n                      }\n                  }`}\n\n                }\n\n\n\n\n\n\n                console.log('---入参---', { patientID: this.state.patientId, vitalId: vitalArr[0].id, temperature });\n\n                fetchRhapsody('', 'POST', params, storage.connectionKey)\n                  .then(res => {\n                    console.log(res);\n                    if (res.errors) {\n                      message.error('Data saving failed')\n                      this.setState({\n                        isWeightSave: false\n                      })\n                    } else {\n                      let hardSet = electronStore.get('hardwareConfiguration')\n                      let countdown = hardSet.is15 ? 15 : 30\n                      this.setState({\n                        initFlog: false,\n                        endMeasure: false,\n                        Temp: 0,\n                        progress: 0,\n                        countdown,\n                        isWeightSave: false\n                      })\n                      message.success('Data saved successfully')\n                    }\n\n\n                  })\n                  .catch(err => {\n                    message.error('Data saving failed')\n                    this.setState({\n                      isWeightSave: false\n                    })\n                    console.log(err);\n                  })\n\n              } else {\n                this.setState({\n                  isWeightSave: false\n                })\n                message.error('There is no case sheet for this pet')\n              }\n            }\n          })\n          .catch(err => {\n            this.setState({\n              isWeightSave: false\n            })\n            message.error('Failed to obtain case list')\n            console.log(err);\n          })\n        return\n      }\n\n\n\n\n      console.log('我是普通医生，不带集成的');\n      let petVitalId = null\n      switch (this.state.petVitalTypeId) {\n        case '01': petVitalId = 1; break;\n        case '02': petVitalId = 3; break;\n        case '03': petVitalId = 4; break;\n        default: petVitalId = 1; break;\n      }\n      let params = {\n        petId: this.state.petId,\n        doctorId: storage.userId,\n        temperature: this.state.Temp,\n        petVitalTypeId: petVitalId,\n        memo: this.state.notes\n      }\n      this.setState({\n        isWeightSave: true\n      })\n\n\n\n\n\n\n      fetchRequest('/exam/addClamantPetExam', 'POST', params)\n        .then(res => {\n          console.log('res', res);\n          if (res.flag === true) {\n\n            let hardSet = electronStore.get('hardwareConfiguration')\n            let countdown = hardSet.is15 ? 15 : 30\n\n            let copyTemp = this.state.Temp\n            this.setState({\n              initFlog: false,\n              endMeasure: false,\n              Temp: 0,\n              progress: 0,\n              countdown,\n            })\n            temp15 = 0\n            switch (storage.lastOrganization) {\n              case '3'://vetspire\n                this.updataVetspire(copyTemp)\n\n                break;\n\n              case '4'://ezyVet\n                this.updataEzyvet(copyTemp)\n                break;\n\n              default: message.success('Data successfully saved in Mella')\n                this.setState({\n                  isWeightSave: false\n                })\n                break;\n            }\n            this._getHistory()\n          } else {\n            message.error('Save failed')\n            this.setState({\n              isWeightSave: false\n            })\n          }\n        })\n        .catch(err => {\n          console.log(err);\n          message.error('Save failed')\n          this.setState({\n            isWeightSave: false\n          })\n        })\n    }\n  }\n\n  updataEzyvet = (Temp) => {\n    let { patientId } = this.state\n\n    let params = {\n      id: patientId\n    }\n    // this.setState({\n    //   isWeightSave: false\n    // })\n    console.log('入参:', params, storage.connectionKey);\n\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\n      .then(res => {\n        console.log('宠物最新病历单获取:', res);\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            console.log('最新病历单获取失败');\n            this.setState({\n              isWeightSave: false\n            })\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          // if (this.state.units === '℉') {\n          //   temperature = ((Temp - 32) / 1.8).toFixed(1)\n          // } else {\n          //   temperature = Temp\n          // }\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n          let petVitalId = null\n          switch (this.state.petVitalTypeId) {\n            case '01': petVitalId = 1; break;\n            case '02': petVitalId = 3; break;\n            case '03': petVitalId = 4; break;\n            default: petVitalId = 1; break;\n          }\n          console.log('入参', parames1, storage.connectionKey);\n          fetchRequest2(`/EzyVet/healthstatus/${paramId}/${petVitalId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\n            .then(res => {\n              console.log('更新ezyvet的体重', res);\n              this.setState({\n                isWeightSave: false\n              })\n              if (res.flag) {\n                console.log('更新ezyvet的体重成功');\n                message.success('Data successfully saved in EzyVet')\n\n                //Toast.success('Temperature update successful')\n              } else {\n                //Toast.fail('Temperature update failed')\n                console.log('更新ezyvet的体重失败');\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              this.setState({\n                isWeightSave: false\n              })\n              //Toast.fail('Temperature update failed')\n              console.log('更新ezyvet的体重', err);\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          this.setState({\n            isWeightSave: false\n          })\n          //Toast.fail('Temperature update failed')\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isWeightSave: false\n        })\n        console.log('宠物最新病历单获取', err);\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n\n        //Toast.fail('Temperature update failed')\n      })\n\n\n  }\n  updataVetspire = (Temp) => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: this.state.patientId\n    }\n    console.log('更新vetspire的数值', datas);\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\n      .then(res => {\n        console.log(res);\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\n          // if (this.state.units === '℉') {\n          //   temperature = Temp\n          // } else {\n          //   temperature = (Temp * 1.8 + 32).toFixed(1)\n          // }\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            temp: temperature\n          }\n          console.log('写数据到vetspire', params);\n          fetchRequest2(`/VetSpire/updateVitalsTemperatureByVitalId`, \"POST\", params)\n            .then(res => {\n              this.setState({\n                isWeightSave: false\n              })\n\n              console.log('写数据到vetspire', res);\n              if (res.flag) {\n                console.log('vetspire写成功');\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              this.setState({\n                isWeightSave: false\n              })\n\n              console.log('vetspire写失败', err);\n              message.error('Data failed saved in Vetspire')\n              //Toast.fail('Temperature update failed')\n            })\n        } else {\n          console.log('最新病历单获取失败');\n          this.setState({\n            isWeightSave: false\n          })\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n\n          //Toast.fail('Temperature update failed')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isWeightSave: false\n        })\n\n\n        console.log('最新病历单获取失败', err);\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n\n  }\n\n\n  _btnEndTime = () => {\n    let { endMeasure, isconnected, initFlog } = this.state\n    if (initFlog === false) {\n      return\n    }\n\n    if (endMeasure === true) {\n      // if (isconnected === true) {\n      return (\n        <>\n          <div className=\"btn\"\n            style={{ marginTop: mTop(30) }}\n          >\n            <div className=\"btn1\"\n              style={{ width: px(120), height: mTop(35) }}\n              onClick={() => {\n                console.log('点击了Discard');\n                let hardSet = electronStore.get('hardwareConfiguration') ||{}\n                let countdown = hardSet.is15 ? 15 : 30\n                this.setState({\n                  endMeasure: false,\n                  Temp: 0,\n                  progress: 0,\n                  countdown,\n                  initFlog: false\n                })\n                temp15 = 0\n              }}\n            >\n              Discard\n            </div>\n\n            <div className=\"btn1\"\n              style={{ width: px(120), height: mTop(35) }}\n              onClick={() => {\n                this.timer && clearTimeout(this.timer)\n                this.timer = setTimeout(() => {\n                  this._save()\n                  clearTimeout(this.timer)\n                }, 500);\n              }}>\n              Save\n            </div>\n          </div>\n          {isconnected === true ? null : <p style={{ fontSize: px(30), color: '#3B3A3A', marginTop: mTop(10) }}> disconnected</p>}\n        </>\n      )\n    } else {\n      if (isconnected === true) {\n        if (this.state.isEarMeasure) {\n          return\n        }\n        return (\n          <div className=\"time\"\n            style={{ fontSize: px(32), marginTop: mTop(35) }}\n          >\n            <p>{`Measuring time  ${this.state.countdown}  s`}</p>\n          </div>\n        )\n      } else {\n        return (\n          null\n        )\n      }\n    }\n  }\n  _crialText = () => {\n    let { endMeasure, isMeasure, isconnected, Temp } = this.state\n    Temp = parseFloat(Temp)\n\n    let temp = this.state.units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\n    let text = '', temColor = ''\n    if (Temp > 15) {\n      if (Temp > 39) {\n        text = 'High'\n        temColor = '#E1206D'\n      } else if (Temp < 31) {\n        text = 'Low'\n        temColor = '#47C2ED'\n\n      } else {\n        text = 'Normal'\n        temColor = '#78D35D'\n      }\n    }\n    if (endMeasure === true) {\n      if (`${Temp}` === 'NaN' || `${Temp}` === '0') {\n        if (isconnected === true) {\n\n          return (\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\n          )\n        }\n        else {\n          return (\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\n          )\n        }\n      } else {\n\n\n        return (\n          <div style={{ color: temColor }}>\n            <span >{temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\n            <span style={{ fontSize: px(22) }}>{text}</span>\n          </div>\n        )\n      }\n    } else {\n      if (isMeasure === true) {\n        return (\n          <>\n            <span style={{ fontSize: px(36), color: temColor, display: 'flex', alignItems: 'center' }}>\n              {temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\n          </>\n        )\n      } else {\n        if (this.state.isEarMeasure) {\n          return (\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>measuring</p>\n          )\n        } else {\n          if (isconnected === true) {\n\n            return (\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\n            )\n          }\n          else {\n            return (\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\n            )\n          }\n        }\n\n      }\n    }\n\n  }\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n      emerPatientID: ''\n    });\n  };\n  _modal = () => {\n    let that = this\n\n    function save () {\n      let datas = {\n        memo: that.state.memo\n      }\n\n      console.log('入参：', datas, that.state.editId);\n      fetchRequest(`/pet/updatePetExam/${that.state.editId}`, 'POST', datas)\n        .then(res => {\n          console.log(res);\n          that.setState({\n            visible: false,\n          })\n          that._getHistory()\n\n        })\n        .catch(err => {\n          that.setState({\n            spin: false\n          })\n          console.log(err);\n        })\n\n    }\n\n\n    let { disabled, bounds, visible } = this.state\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: '100%',\n              cursor: 'move',\n              height: '20px',\n              textAlign: 'center'\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          >\n            Edit Note\n          </div>\n        }\n        visible={visible}\n        // visible={true}\n        onCancel={this.handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: '80px' }}>Notes</p>\n            {/* <Input\n              style={{ border: 'none', outline: 'medium' }}\n              bordered={false}\n              onChange={(item) => {\n              }}\n             \n            /> */}\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: '10px' }}\n              value={that.state.memo}\n              onChange={(val) => {\n                that.setState({\n                  memo: val.target.value\n                })\n              }}\n\n            >\n            </textarea>\n          </div>\n          <div className=\"btn\" style={{ width: '60%' }} onClick={save}>Save Changes</div>\n        </div>\n\n      </Modal>\n\n    )\n\n  }\n\n  biggie = () => {\n    let { isHaveBigieDate, biggieDate, sendWeight, impedance, units } = this.state\n    if (isHaveBigieDate) {\n      let bodyFat = impedance ? 20 : null\n      let score = impedance ? 5 : null\n\n      let isIbs = units === '℃' ? false : true\n      let weight = units === '℃' ? sendWeight : biggieDate\n\n      let issave = storage.connectionKey ? false : true\n      return (\n        <Biggie\n          issave={issave}\n          weight={`${weight}`}\n          onPress={this._saveWeight}\n          bodyFat={bodyFat}\n          score={score}\n          impedance={impedance}\n          isIbs={isIbs}\n          discardOnPress={() => {\n            this.setState({\n              isHaveBigieDate: false\n            })\n            keyboardBiggieFlog = false\n            sameBiggieNum = 0\n          }}\n        />\n      )\n    } else {\n      return (\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>\n          <h1 style={{ fontWeight: 'bold', width: '80%', textAlign: 'center', }}>Ready, place pet onto scale</h1>\n        </div>\n\n      )\n    }\n\n\n\n  }\n\n  _saveWeight = () => {\n    console.log('开始去保存了', storage.lastOrganization, storage.connectionKey);\n\n\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\n    if (storage.lastOrganization === '34') {\n      let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\n\n      this.setState({\n        isWeightSave: true\n      })\n\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\n        .then(res => {\n          console.log('---', res);\n          if (res.errors) {\n            message.error('Failed to obtain case list')\n            this.setState({\n              isWeightSave: false\n            })\n          } else {\n            let { vitals } = res.data.patient\n            let vitalArr = vitals.data\n            if (vitalArr.length > 0) {\n              vitalArr.sort((a, b) => {\n                return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n              })\n\n              console.log('-----', vitalArr);\n\n\n              let params = {}\n              if (vitalArr[0].temperature && vitalArr[0].temperature.value) {\n                params = {\n                  query: `mutation {\n                      updateVital(\n                          id:\"${vitalArr[0].id}\"\n                          input:{\n                            weight:{value:${this.state.biggieDate}}\n                            temperature:{value:${vitalArr[0].temperature.value}}\n                              patientId:\"${this.state.patientId}\"\n                          }\n                      )\n                      {\n                          id,\n                          weight{value},\n                          temperature{value}\n                      }\n                  }`}\n              } else {\n                params = {\n                  query: `mutation {\n                      updateVital(\n                          id:\"${vitalArr[0].id}\"\n                          input:{\n                            weight:{value:${this.state.biggieDate}}\n                            \n                              patientId:\"${this.state.patientId}\"\n                          }\n                      )\n                      {\n                          id,\n                          weight{value},\n                          temperature{value}\n                      }\n                  }`}\n              }\n\n              console.log('---入参---', params);\n\n\n\n              fetchRhapsody('', 'POST', params, storage.connectionKey)\n                .then(res => {\n                  console.log(res);\n                  if (res.errors) {\n                    this.setState({\n                      isWeightSave: false\n                    })\n                    message.error('Data saving failed')\n                  } else {\n                    this.setState({\n                      isHaveBigieDate: false,\n                      isWeightSave: false\n                    })\n                    keyboardBiggieFlog = false\n                    sameBiggieNum = 0\n                    message.success('Data saved successfully')\n                  }\n\n\n                })\n                .catch(err => {\n                  this.setState({\n                    isWeightSave: false\n                  })\n                  message.error('Data saving failed')\n                  console.log(err);\n                })\n\n\n            } else {\n              this.setState({\n                isWeightSave: false\n              })\n              message.error('There is no case sheet for this pet')\n            }\n\n\n\n\n\n\n\n\n          }\n        })\n        .catch(err => {\n          message.error('Failed to obtain case list')\n          this.setState({\n            isWeightSave: false\n          })\n          console.log(err);\n        })\n\n\n\n\n\n\n\n\n      return\n    }\n\n\n\n\n\n\n\n\n\n\n    this.setState({\n      isWeightSave: true\n    })\n    let fat = this.state.impedance ? 20 : null\n    let bodyConditionScore = this.state.impedance ? 5 : null\n\n    let params = {\n      petId: this.state.petId,\n      doctorId: storage.userId,\n      weight: this.state.sendWeight,\n      memo: this.state.notes,\n      fat,\n      bodyConditionScore\n    }\n    console.log('---体重保存入参--：', params);\n    fetchRequest('/exam/addClamantPetExam', 'POST', params)\n      .then(res => {\n        console.log('res', res);\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              this.updataWeightVetspire()\n\n              break;\n\n            case '4'://ezyVet\n              this.updataWeightEzyvet()\n              break;\n\n            default:\n              this.setState({\n                isHaveBigieDate: false,\n                isWeightSave: false\n              })\n              keyboardBiggieFlog = false\n              sameBiggieNum = 0\n              message.success('Data successfully saved in Mella')\n              break;\n          }\n\n          this._getHistory()\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n\n\n\n\n\n  }\n\n  updataWeightVetspire = () => {\n    console.log('保存到vetspire');\n    this.setState({\n      isWeightSave: true\n    })\n\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: this.state.patientId\n    }\n    console.log('更新vetspire的数值', datas);\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\n      .then(res => {\n        console.log(res);\n        if (res.flag) {\n\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            weight: this.state.biggieDate\n          }\n          console.log('写数据到vetspire', params);\n          fetchRequest4(`/VetSpire/vetspireUpdateWeight`, \"POST\", params)\n            .then(res => {\n              this.setState({\n                isWeightSave: false\n              })\n\n\n              console.log('写数据到vetspire', res);\n              if (res.flag) {\n                console.log('vetspire写成功');\n                this.setState({\n                  isHaveBigieDate: false\n                })\n                keyboardBiggieFlog = false\n                sameBiggieNum = 0\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              this.setState({\n                isWeightSave: false\n              })\n\n              console.log('vetspire写失败', err);\n              message.error('Data failed saved in Vetspire')\n              //Toast.fail('Temperature update failed')\n            })\n        } else {\n          console.log('最新病历单获取失败');\n          message.error('Failed to obtain the latest medical record')\n\n          // Toast.fail('Update failed')\n          this.setState({\n            isWeightSave: false\n          })\n\n        }\n      })\n      .catch(err => {\n\n        console.log('最新病历单获取失败', err);\n        message.error('Failed to obtain the latest medical record')\n        this.setState({\n          isWeightSave: false\n        })\n      })\n\n  }\n  updataWeightEzyvet = () => {\n    console.log('保存到ezyVet');\n    this.setState({\n      isWeightSave: true\n    })\n\n    let { patientId } = this.state\n\n    let params = {\n      id: patientId\n    }\n    console.log('入参:', params, storage.connectionKey);\n\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\n      .then(res => {\n        console.log('宠物最新病历单获取:', res);\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            console.log('最新病历单获取失败');\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: this.state.sendWeight\n          }\n\n          console.log('入参', parames1, storage.connectionKey);\n          fetchRequest4(`/EzyVet/ezyvetUpdateWeight/${paramId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\n            .then(res => {\n              console.log('更新ezyvet的体重', res);\n              this.setState({\n                isWeightSave: false\n              })\n\n              if (res.flag) {\n                console.log('更新ezyvet的体重成功');\n                message.success('Data successfully saved in EzyVet')\n                this.setState({\n                  isHaveBigieDate: false\n                })\n                keyboardBiggieFlog = false\n                sameBiggieNum = 0\n                //Toast.success('Temperature update successful')\n              } else {\n                //Toast.fail('Temperature update failed')\n                console.log('更新ezyvet的体重失败');\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              this.setState({\n                isWeightSave: false\n              })\n\n              //Toast.fail('Temperature update failed')\n              console.log('更新ezyvet的体重', err);\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          this.setState({\n            isWeightSave: false\n          })\n\n          //Toast.fail('Temperature update failed')\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        console.log('宠物最新病历单获取', err);\n        message.error('Failed to obtain the latest medical record')\n        this.setState({\n          isWeightSave: false\n        })\n        //Toast.fail('Temperature update failed')\n      })\n\n\n  }\n\n\n  render () {\n    const { closeColor, closebgc, minbgc, isWeightSave } = this.state\n    // console.dir(this.input1)\n    // try {\n    //   console.log(this.input1.checked)\n    // } catch (error) {\n\n    // }\n\n    return (\n      <div id=\"clinicalMeasure\">\n\n        <div style={{ height: '60%', }}>\n          <div className=\"heard\">\n            <Heard\n              onSearch={(data) => {\n                console.log('搜索到的宠物', data);\n                let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n                  h2tLength, torsoLength } = data\n\n                l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\n                neckCircumference = neckCircumference ? `${neckCircumference}` : ''\n                upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\n                lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\n                h2tLength = h2tLength ? `${h2tLength}` : ''\n                torsoLength = torsoLength ? `${torsoLength}` : ''\n                let weight = data.weight\n                if (weight && weight !== 'unknown') {\n                  weight = parseFloat(weight).toFixed(1)\n                }\n                let breedName = data.breed\n                if (!breedName) {\n                  breedName = 'unknown'\n                }\n                switch (breedName) {\n                  case 'defaultdog':\n                    breedName = 'Dog'\n\n                    break;\n                  case 'defaultother':\n                    breedName = 'Other'\n\n                    break;\n                  case 'defaultcat':\n                    breedName = 'Cat'\n                    break;\n\n                }\n                console.log('-----------', weight);\n                this.setState({\n                  petName: data.petName,\n                  owner: data.owner,\n                  breedName,\n                  weight,\n                  age: data.age,\n                  patientId: data.patientId,\n                  petId: data.petId,\n                  itemIndex: 1,\n                  l2rarmDistance,\n                  neckCircumference,\n                  upperTorsoCircumference,\n                  lowerTorsoCircumference,\n                  h2tLength,\n                  torsoLength,\n                  isWalkIn: false\n                }, () => {\n                  this._getHistory()\n                })\n\n              }}\n              menu8Click={() => {\n                switch (storage.identity) {\n                  case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\n\n                    break;\n                  case '1': this.props.history.push('/VetSpireSelectExam')\n\n                    break;\n                  case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\n\n                    break;\n\n                  default:\n                    break;\n                }\n              }}\n              onReturn={() => {\n                this.props.history.goBack()\n              }}\n\n            />\n          </div>\n\n\n\n          {/* 宠物信息与圆环部分部分 */}\n          <div className='clinical_top'\n          // style={{ height: mTop(480) }}\n          >\n            {this._topLeft()}\n            <div className=\"r\"\n\n            >\n              {\n                this.state.devicesType === 'mella' ?\n                  this._ciral() :\n                  this.biggie()\n              }\n            </div>\n          </div>\n        </div>\n\n\n\n        {/* 底部宠物信息 */}\n        {this._foot()}\n        {this._modal()}\n        {/* {this._table()} */}\n\n        <Modal\n\n          visible={this.state.err07Visible}\n          // visible={true}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">prompt\n            </div>\n\n            <div className='text'>Please re-plug the base device</div>\n\n\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    err07Visible: false,\n\n                  })\n                  num07 = 0\n                }}\n              >OK</button>\n\n\n            </div>\n          </div>\n\n        </Modal>\n\n        <Modal\n\n          visible={this.state.err07Visible}\n          // visible={true}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">prompt\n            </div>\n\n            <div className='text'>Please re-plug the base device</div>\n\n\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    err07Visible: false,\n\n                  })\n                  num07 = 0\n                }}\n              >OK</button>\n\n\n            </div>\n          </div>\n\n        </Modal>\n\n\n        <MyModal\n          visible={isWeightSave}\n          element={\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n              <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                Data is being saved\n              </p>\n            </div>\n          }\n        />\n\n      </div>\n    )\n  }\n}","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/areaCode/imgArray.js",["460"],"export default {\n  ac: require('./countryFlag/flag_ac.png'),\n  ad: require('./countryFlag/flag_ad.png'),\n  ae: require('./countryFlag/flag_ae.png'),\n  af: require('./countryFlag/flag_af.png'),\n  ag: require('./countryFlag/flag_ag.png'),\n  ai: require('./countryFlag/flag_ai.png'),\n  al: require('./countryFlag/flag_al.png'),\n  am: require('./countryFlag/flag_am.png'),\n  an: require('./countryFlag/flag_an.png'),\n  ao: require('./countryFlag/flag_ao.png'),\n  aq: require('./countryFlag/flag_aq.png'),\n  ar: require('./countryFlag/flag_ar.png'),\n  as: require('./countryFlag/flag_as.png'),\n  at: require('./countryFlag/flag_at.png'),\n  au: require('./countryFlag/flag_au.png'),\n  aw: require('./countryFlag/flag_aw.png'),\n  ax: require('./countryFlag/flag_ax.png'),\n  az: require('./countryFlag/flag_az.png'),\n  ba: require('./countryFlag/flag_ba.png'),\n  bb: require('./countryFlag/flag_bb.png'),\n  bd: require('./countryFlag/flag_bd.png'),\n  be: require('./countryFlag/flag_be.png'),\n  bf: require('./countryFlag/flag_bf.png'),\n  bg: require('./countryFlag/flag_bg.png'),\n  bh: require('./countryFlag/flag_bh.png'),\n  bi: require('./countryFlag/flag_bi.png'),\n  bj: require('./countryFlag/flag_bj.png'),\n  bl: require('./countryFlag/flag_bl.png'),\n  bm: require('./countryFlag/flag_bm.png'),\n  bn: require('./countryFlag/flag_bn.png'),\n  bo: require('./countryFlag/flag_bo.png'),\n  bq: require('./countryFlag/flag_bq.png'),\n  br: require('./countryFlag/flag_br.png'),\n  bs: require('./countryFlag/flag_bs.png'),\n  bt: require('./countryFlag/flag_bt.png'),\n  bv: require('./countryFlag/flag_bv.png'),\n  bw: require('./countryFlag/flag_bw.png'),\n  by: require('./countryFlag/flag_by.png'),\n  bz: require('./countryFlag/flag_bz.png'),\n  ca: require('./countryFlag/flag_ca.png'),\n  cc: require('./countryFlag/flag_cc.png'),\n  cd: require('./countryFlag/flag_cd.png'),\n  cf: require('./countryFlag/flag_cf.png'),\n  cg: require('./countryFlag/flag_cg.png'),\n  ch: require('./countryFlag/flag_ch.png'),\n  ci: require('./countryFlag/flag_ci.png'),\n  ck: require('./countryFlag/flag_ck.png'),\n  cl: require('./countryFlag/flag_cl.png'),\n  cm: require('./countryFlag/flag_cm.png'),\n  cn: require('./countryFlag/flag_cn.png'),\n  co: require('./countryFlag/flag_co.png'),\n  cr: require('./countryFlag/flag_cr.png'),\n  cu: require('./countryFlag/flag_cu.png'),\n  cv: require('./countryFlag/flag_cv.png'),\n  cw: require('./countryFlag/flag_cw.png'),\n  cx: require('./countryFlag/flag_cx.png'),\n  cy: require('./countryFlag/flag_cy.png'),\n  cz: require('./countryFlag/flag_cz.png'),\n  de: require('./countryFlag/flag_de.png'),\n  dj: require('./countryFlag/flag_dj.png'),\n  dk: require('./countryFlag/flag_dk.png'),\n  dm: require('./countryFlag/flag_dm.png'),\n  do: require('./countryFlag/flag_do.png'),\n  dz: require('./countryFlag/flag_dz.png'),\n  ec: require('./countryFlag/flag_ec.png'),\n  ee: require('./countryFlag/flag_ee.png'),\n  eg: require('./countryFlag/flag_eg.png'),\n  eh: require('./countryFlag/flag_eh.png'),\n  er: require('./countryFlag/flag_er.png'),\n  es: require('./countryFlag/flag_es.png'),\n  et: require('./countryFlag/flag_et.png'),\n  fi: require('./countryFlag/flag_fi.png'),\n  fj: require('./countryFlag/flag_fj.png'),\n  fk: require('./countryFlag/flag_fk.png'),\n  fm: require('./countryFlag/flag_fm.png'),\n  fo: require('./countryFlag/flag_fo.png'),\n  fr: require('./countryFlag/flag_fr.png'),\n  fx: require('./countryFlag/flag_fx.png'),\n  ga: require('./countryFlag/flag_ga.png'),\n  gb: require('./countryFlag/flag_gb.png'),\n  gd: require('./countryFlag/flag_gd.png'),\n  ge: require('./countryFlag/flag_ge.png'),\n  gf: require('./countryFlag/flag_gf.png'),\n  gg: require('./countryFlag/flag_gg.png'),\n  gh: require('./countryFlag/flag_gh.png'),\n  gi: require('./countryFlag/flag_gi.png'),\n  gl: require('./countryFlag/flag_gl.png'),\n  gm: require('./countryFlag/flag_gm.png'),\n  gn: require('./countryFlag/flag_gn.png'),\n  gp: require('./countryFlag/flag_gp.png'),\n  gq: require('./countryFlag/flag_gq.png'),\n  gr: require('./countryFlag/flag_gr.png'),\n  gs: require('./countryFlag/flag_gs.png'),\n  gt: require('./countryFlag/flag_gt.png'),\n  gu: require('./countryFlag/flag_gu.png'),\n  gw: require('./countryFlag/flag_gw.png'),\n  gy: require('./countryFlag/flag_gy.png'),\n  hk: require('./countryFlag/flag_hk.png'),\n  hm: require('./countryFlag/flag_hm.png'),\n  hn: require('./countryFlag/flag_hn.png'),\n  hr: require('./countryFlag/flag_hr.png'),\n  ht: require('./countryFlag/flag_ht.png'),\n  hu: require('./countryFlag/flag_hu.png'),\n  id: require('./countryFlag/flag_id.png'),\n  ie: require('./countryFlag/flag_ie.png'),\n  il: require('./countryFlag/flag_il.png'),\n  im: require('./countryFlag/flag_im.png'),\n  in: require('./countryFlag/flag_in.png'),\n  io: require('./countryFlag/flag_io.png'),\n  iq: require('./countryFlag/flag_iq.png'),\n  ir: require('./countryFlag/flag_ir.png'),\n  is: require('./countryFlag/flag_is.png'),\n  it: require('./countryFlag/flag_it.png'),\n  je: require('./countryFlag/flag_je.png'),\n  jm: require('./countryFlag/flag_jm.png'),\n  jo: require('./countryFlag/flag_jo.png'),\n  jp: require('./countryFlag/flag_jp.png'),\n  ke: require('./countryFlag/flag_ke.png'),\n  kg: require('./countryFlag/flag_kg.png'),\n  kh: require('./countryFlag/flag_kh.png'),\n  ki: require('./countryFlag/flag_ki.png'),\n  km: require('./countryFlag/flag_km.png'),\n  kn: require('./countryFlag/flag_kn.png'),\n  kp: require('./countryFlag/flag_kp.png'),\n  kr: require('./countryFlag/flag_kr.png'),\n  kw: require('./countryFlag/flag_kw.png'),\n  ky: require('./countryFlag/flag_ky.png'),\n  kz: require('./countryFlag/flag_kz.png'),\n  la: require('./countryFlag/flag_la.png'),\n  lb: require('./countryFlag/flag_lb.png'),\n  lc: require('./countryFlag/flag_lc.png'),\n  li: require('./countryFlag/flag_li.png'),\n  lk: require('./countryFlag/flag_lk.png'),\n  lr: require('./countryFlag/flag_lr.png'),\n  ls: require('./countryFlag/flag_ls.png'),\n  lt: require('./countryFlag/flag_lt.png'),\n  lu: require('./countryFlag/flag_lu.png'),\n  lv: require('./countryFlag/flag_lv.png'),\n  ly: require('./countryFlag/flag_ly.png'),\n  ma: require('./countryFlag/flag_ma.png'),\n  mc: require('./countryFlag/flag_mc.png'),\n  md: require('./countryFlag/flag_md.png'),\n  me: require('./countryFlag/flag_me.png'),\n  mf: require('./countryFlag/flag_mf.png'),\n  mg: require('./countryFlag/flag_mg.png'),\n  mh: require('./countryFlag/flag_mh.png'),\n  mk: require('./countryFlag/flag_mk.png'),\n  ml: require('./countryFlag/flag_ml.png'),\n  mm: require('./countryFlag/flag_mm.png'),\n  mn: require('./countryFlag/flag_mn.png'),\n  mo: require('./countryFlag/flag_mo.png'),\n  mp: require('./countryFlag/flag_mp.png'),\n  mq: require('./countryFlag/flag_mq.png'),\n  mr: require('./countryFlag/flag_mr.png'),\n  ms: require('./countryFlag/flag_ms.png'),\n  mt: require('./countryFlag/flag_mt.png'),\n  mu: require('./countryFlag/flag_mu.png'),\n  mv: require('./countryFlag/flag_mv.png'),\n  mw: require('./countryFlag/flag_mw.png'),\n  mx: require('./countryFlag/flag_mx.png'),\n  my: require('./countryFlag/flag_my.png'),\n  mz: require('./countryFlag/flag_mz.png'),\n  na: require('./countryFlag/flag_na.png'),\n  nc: require('./countryFlag/flag_nc.png'),\n  ne: require('./countryFlag/flag_ne.png'),\n  nf: require('./countryFlag/flag_nf.png'),\n  ng: require('./countryFlag/flag_ng.png'),\n  ni: require('./countryFlag/flag_ni.png'),\n  nl: require('./countryFlag/flag_nl.png'),\n  no: require('./countryFlag/flag_no.png'),\n  np: require('./countryFlag/flag_np.png'),\n  nr: require('./countryFlag/flag_nr.png'),\n  nu: require('./countryFlag/flag_nu.png'),\n  nz: require('./countryFlag/flag_nz.png'),\n  om: require('./countryFlag/flag_om.png'),\n  pa: require('./countryFlag/flag_pa.png'),\n  pe: require('./countryFlag/flag_pe.png'),\n  pf: require('./countryFlag/flag_pf.png'),\n  pg: require('./countryFlag/flag_pg.png'),\n  ph: require('./countryFlag/flag_ph.png'),\n  pk: require('./countryFlag/flag_pk.png'),\n  pl: require('./countryFlag/flag_pl.png'),\n  pm: require('./countryFlag/flag_pm.png'),\n  pn: require('./countryFlag/flag_pn.png'),\n  pr: require('./countryFlag/flag_pr.png'),\n  ps: require('./countryFlag/flag_ps.png'),\n  pt: require('./countryFlag/flag_pt.png'),\n  pw: require('./countryFlag/flag_pw.png'),\n  py: require('./countryFlag/flag_py.png'),\n  qa: require('./countryFlag/flag_qa.png'),\n  re: require('./countryFlag/flag_re.png'),\n  ro: require('./countryFlag/flag_ro.png'),\n  rs: require('./countryFlag/flag_rs.png'),\n  ru: require('./countryFlag/flag_ru.png'),\n  rw: require('./countryFlag/flag_rw.png'),\n  sa: require('./countryFlag/flag_sa.png'),\n  sb: require('./countryFlag/flag_sb.png'),\n  sc: require('./countryFlag/flag_sc.png'),\n  sd: require('./countryFlag/flag_sd.png'),\n  se: require('./countryFlag/flag_se.png'),\n  sg: require('./countryFlag/flag_sg.png'),\n  sh: require('./countryFlag/flag_sh.png'),\n  si: require('./countryFlag/flag_si.png'),\n  sj: require('./countryFlag/flag_sj.png'),\n  sk: require('./countryFlag/flag_sk.png'),\n  sl: require('./countryFlag/flag_sl.png'),\n  sm: require('./countryFlag/flag_sm.png'),\n  sn: require('./countryFlag/flag_sn.png'),\n  so: require('./countryFlag/flag_so.png'),\n  sr: require('./countryFlag/flag_sr.png'),\n  ss: require('./countryFlag/flag_ss.png'),\n  st: require('./countryFlag/flag_st.png'),\n  sv: require('./countryFlag/flag_sv.png'),\n  sx: require('./countryFlag/flag_sx.png'),\n  sy: require('./countryFlag/flag_sy.png'),\n  sz: require('./countryFlag/flag_sz.png'),\n  tc: require('./countryFlag/flag_tc.png'),\n  td: require('./countryFlag/flag_td.png'),\n  tf: require('./countryFlag/flag_tf.png'),\n  tg: require('./countryFlag/flag_tg.png'),\n  th: require('./countryFlag/flag_th.png'),\n  tj: require('./countryFlag/flag_tj.png'),\n  tk: require('./countryFlag/flag_tk.png'),\n  tl: require('./countryFlag/flag_tl.png'),\n  tm: require('./countryFlag/flag_tm.png'),\n  tn: require('./countryFlag/flag_tn.png'),\n  to: require('./countryFlag/flag_to.png'),\n  tr: require('./countryFlag/flag_tr.png'),\n  tt: require('./countryFlag/flag_tt.png'),\n  tv: require('./countryFlag/flag_tv.png'),\n  tw: require('./countryFlag/flag_tw.png'),\n  tz: require('./countryFlag/flag_tz.png'),\n  ua: require('./countryFlag/flag_ua.png'),\n  ug: require('./countryFlag/flag_ug.png'),\n  um: require('./countryFlag/flag_um.png'),\n  us: require('./countryFlag/flag_us.png'),\n  uy: require('./countryFlag/flag_uy.png'),\n  uz: require('./countryFlag/flag_uz.png'),\n  va: require('./countryFlag/flag_va.png'),\n  vc: require('./countryFlag/flag_vc.png'),\n  ve: require('./countryFlag/flag_ve.png'),\n  vg: require('./countryFlag/flag_vg.png'),\n  vi: require('./countryFlag/flag_vi.png'),\n  vn: require('./countryFlag/flag_vn.png'),\n  vu: require('./countryFlag/flag_vu.png'),\n  wf: require('./countryFlag/flag_wf.png'),\n  ws: require('./countryFlag/flag_ws.png'),\n  xk: require('./countryFlag/flag_xk.png'),\n  ye: require('./countryFlag/flag_ye.png'),\n  yt: require('./countryFlag/flag_yt.png'),\n  yu: require('./countryFlag/flag_yu.png'),\n  za: require('./countryFlag/flag_za.png'),\n  zm: require('./countryFlag/flag_zm.png'),\n  zw: require('./countryFlag/flag_zw.png'),\n};\n","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/index.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/scanPage/components/scanPet.jsx",["461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/selectExam/SelectExam.jsx",["487","488","489","490"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorAddPet/DoctorAddPet.jsx",["491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/orgAndPractice/NewOrganization.jsx",["516"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/temporaryStorage.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/FetchUtil.js",["517","518","519","520"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/addScheduledPet/index.jsx",["521","522","523","524","525","526","527","528","529","530","531","532"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Input, Button, message, Spin, BackTop, } from 'antd';\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\n\nimport { devicesTitleHeight } from '../../utils/InitDate'\nimport electronStore from '../../utils/electronStore';\nimport dog from './../../assets/images/pinkdog.png'\nimport cat from './../../assets/images/pinkcat.png'\nimport redDog from './../../assets/images/reddog.png'\nimport redCat from './../../assets/images/redcat.png'\nimport redother from './../../assets/images/redother.png'\nimport other from './../../assets/images/other.png'\nimport redJinggao from './../../assets/img/redjinggao.png'\n\nimport MyModal from '../../utils/myModal/MyModal';\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport './addScheduledPet.less'\nimport { setMenuNum } from '../../store/actions';\nimport { fetchRequest } from '../../utils/FetchUtil1';\nimport MYButton from './../../utils/button/Button'\n\nconst MyIcon = createFromIconfontCN({\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\n\nlet defaultData = {\n    patientId: \"\",\n    wuzhong: 'dog',\n    petName: '',\n    miaoshu: ''\n}\n\nlet storage = window.localStorage;\nconst AddScheduledPet = ({ bodyHeight, setMenuNum }) => {\n    const [addPetist1, setAddPetist] = useState([]);\n    const [petName, setPetName] = useState('');\n    const [wuzhong, setWuzhong] = useState('dog');\n    const [patientId, setPatientId] = useState('');\n    const [miaoshu, setMiaoshu] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [isSave, setIsSave] = useState(false);\n\n    const selsectwuzhong = (val) => {\n        setWuzhong(val);\n\n    }\n    console.log('addPetist1', addPetist1);\n\n    const add = () => {\n        message.destroy()\n        if (!patientId) {\n            message.error(`Please enter the pet's patientId`)\n            return\n        }\n        setLoading(true)\n\n        let petSpeciesBreedId = 12001\n        switch (wuzhong) {\n            case 'dog': petSpeciesBreedId = 12001; break;\n            case 'cat': petSpeciesBreedId = 11001; break;\n            case 'other': petSpeciesBreedId = 13001; break;\n            default:\n                break;\n        }\n        let params = {\n            description: miaoshu,\n            doctorId: storage.userId,\n            patientId,\n            petName,\n            petSpeciesBreedId\n        }\n\n        if (storage.lastOrganization) {\n            params.organizationId = storage.lastOrganization\n        }\n        if (storage.lastWorkplaceId) {\n            params.workplaceId = storage.lastWorkplaceId\n        }\n        console.log('入参', params);\n        fetchRequest('/new/petall/subscribe', \"POST\", params)\n            .then(res => {\n                console.log(res);\n                if (res.flag) {\n                    let json = {\n                        patientId,\n                        wuzhong,\n                        petName,\n                        miaoshu\n                    }\n                    let list = [].concat(addPetist1)\n                    list.push(json)\n                    setAddPetist(list)\n                    setLoading(false)\n                    setPatientId('')\n                    setWuzhong('')\n                    setPetName('')\n                    setMiaoshu('')\n\n                } else {\n\n                    setLoading(false)\n                    message.error('add failed')\n                }\n            })\n            .catch(err => {\n                console.log('错误原因', err);\n                setLoading(false)\n                message.error('add failed')\n            })\n\n    }\n    const body = () => {\n        let addPetist = [].concat(addPetist1)\n        addPetist.push(defaultData)\n        console.log('新的:', addPetist);\n\n        let options = addPetist.map((item, index) => {\n\n\n            if (index === addPetist.length - 1) {\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={patientId}\n                                onChange={value => {\n                                    setPatientId(value.target.value)\n\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={petName}\n                                onChange={value => {\n\n                                    setPetName(value.target.value)\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('dog')\n                                }}>\n                                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            </div>\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('cat')\n                                }}>\n                                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            </div>\n\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('other')\n                                }}>\n                                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                            </div>\n\n\n\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={miaoshu}\n                                onChange={value => {\n\n                                    setMiaoshu(value.target.value)\n                                }}\n\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n                            <div\n                                className='flex'\n                                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\n                                onClick={add}\n\n                            >\n\n                                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\n                            </div>\n\n\n\n\n\n\n\n                        </div>\n\n                    </div>\n                </li>\n            } else {\n                let { patientId, wuzhong, petName, miaoshu } = item\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'>\n                                {patientId}\n                            </div>\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'> {petName}</div>\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <div className='tableText'>{miaoshu}</div>\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n\n                        </div>\n                    </div>\n\n\n                </li>\n            }\n\n\n        })\n\n        return (\n            <div style={{ width: '100%', marginTop: px(30), height: px(500), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%', }}>\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                    <div className='tableHeard'>Patient Id</div>\n                    <div className='tableHeard'>Pet Name</div>\n                    <div className='tableHeard'>species</div>\n                    <div className='tableHeard' style={{ width: '30%' }}>description</div>\n                    <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\n\n                </div>\n                <ul >\n                    {options}\n                </ul>\n            </div>\n        )\n    }\n    return (\n        <div className='addScjediled' style={{ height: bodyHeight }}>\n            <div className=\"addDeviceTitle\" style={{ height: devicesTitleHeight, fontSize: 26, paddingLeft: px(20) }}>Create New Scheduled </div>\n            <div className='addSBody' style={{ width: '100%', height: bodyHeight - devicesTitleHeight, }}>\n                {body()}\n\n\n                <div className='continueBox'>\n                    <div className='continueBtn'\n                        style={{ borderRadius: px(50), height: px(45), fontSize: px(20), }}\n                        onClick={() => {\n\n                            if (!patientId) {\n                                setMenuNum('3')\n                            } else {\n                                setIsSave(true)\n                            }\n                        }}\n                    >Continue</div>\n                </div>\n\n            </div>\n\n            <MyModal\n                visible={loading}\n            />\n            <MyModal\n                visible={isSave}\n                element={\n                    <div className='isSave'\n                    //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\n                    >\n                        <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n                        <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\n                        <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                            <MYButton\n                                text={'Cancel'}\n                                onClick={() => {\n                                    setIsSave(false)\n\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                            <MYButton\n                                text={'Exit'}\n                                onClick={() => {\n                                    setIsSave(false)\n                                    setMenuNum('3')\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                        </div>\n                    </div>\n                }\n            />\n\n\n\n\n\n\n\n        </div >\n\n    )\n}\n\n\nAddScheduledPet.propTypes = {\n\n}\n//默认值\nAddScheduledPet.defaultProps = {\n\n}\nexport default connect(\n    state => ({\n\n    }),\n    { setMenuNum }\n)(AddScheduledPet)","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/historyTable/index.jsx",["533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/index.jsx",["555","556","557","558","559","560","561"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/PetsUI.jsx",["562","563","564"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/biggiePage/index.jsx",["565","566","567","568","569"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/appversion.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/DoctorSelectScheduledExam.jsx",["570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/px.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/myModal/MyModal.jsx",["598","599"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/headerItem.jsx",["600","601","602","603","604","605","606","607","608","609"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Image,\n  Layout,\n  Dropdown,\n  Col,\n  Row,\n  Avatar,\n  Space,\n  Card,\n  Menu,\n  Progress,\n} from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\nimport Charlie from \"./../../../assets/img/Charlie.png\";\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\n\nimport connectBle from \"./../../../assets/img/connectBle.png\";\nimport redcat from \"./../../../assets/images/redcat.png\";\nimport reddog from \"./../../../assets/images/reddog.png\";\nimport redother from \"./../../../assets/images/redother.png\";\nimport { connect } from \"react-redux\";\nimport { devicesTitleHeight } from \"../../../utils/InitDate\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaPredictReturnValueFun,\n} from \"../../../store/actions\";\nimport moment from \"moment\";\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\nimport _ from \"lodash\";\nimport \"./headerItem.less\";\n\nconst { Header } = Layout;\n\nconst HeaderItem = ({\n  petMessage,\n  hardwareMessage,\n  timeNum = 15,\n  setMellaPredictReturnValueFun,\n}) => {\n  let history = useHistory();\n  let {\n    petName,\n    patientId,\n    firstName,\n    lastName,\n    gender,\n    breedName,\n    birthday,\n    weight,\n    url,\n    petSpeciesBreedId,\n    petId,\n    isWalkIn,\n  } = petMessage;\n  let {\n    mellaConnectStatus,\n    mellaPredictValue,\n    mellaMeasureValue,\n    mellaMeasurePart,\n    rulerConnectStatus,\n    biggieConnectStatus,\n    selectHardwareInfo,\n    selectHardwareType,\n  } = hardwareMessage;\n  const [value, setValue] = useState(0);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    let random = null;\n    if (timeNum === 15) {\n      random = 7;\n    } else if (timeNum === 30) {\n      random = 3.5;\n    } else {\n      random = 1.75;\n    }\n    setValue(value + random);\n  };\n  //展示宠物照片方法\n  const petPicture = (size) => {\n    if (_.isEmpty(url)) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <Avatar src={redcat} size={size} />;\n      } else if (\n        petSpeciesBreedId === 12001 ||\n        _.inRange(petSpeciesBreedId, 136, 456)\n      ) {\n        return <Avatar src={reddog} size={size} />;\n      } else if (petSpeciesBreedId === 13001) {\n        return <Avatar src={redother} size={size} />;\n      } else {\n        return <Avatar src={redother} size={size} />;\n      }\n    } else {\n      return <Avatar src={url} size={size} />;\n    }\n  };\n  //展示名字或id方法\n  const showNameOrId = () => {\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\n      return \"unknown\";\n    } else if (!_.isEmpty(petName)) {\n      return petName;\n    } else {\n      return patientId;\n    }\n  };\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\n      return \"unknown\";\n    } else {\n      return firstName + \" \" + lastName;\n    }\n  };\n  //计算宠物年龄\n  const calculateAge = () => {\n    if (_.isEmpty(birthday)) {\n      return \"unknown\";\n    } else {\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\n    }\n  };\n  //计算宠物体重\n  const calculateWeight = () => {\n    if (_.isEmpty(weight)) {\n      return \"unknown\";\n    } else {\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\n    }\n  };\n  //头部弹出卡片\n  const cardItem = () => {\n    return (\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\n        <Menu.Item className=\"topItem\">\n          <div className=\"cardTopBox\">\n            <div className=\"topLeftBox\">\n              {petPicture(91)}\n              <p className=\"cardTitle\">{showNameOrId()}</p>\n              <p className=\"cardTitle\">{ownerName()}</p>\n            </div>\n            <div className=\"topRightBox\">\n              <p className=\"cardTitle\">{calculateAge()}</p>\n              <p className=\"cardTitle\">{calculateWeight()}</p>\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\n              <p className=\"cardTitle\">{breedName}</p>\n            </div>\n          </div>\n        </Menu.Item>\n        <Menu.Item key={\"editPetInfo\"}>\n          <p className=\"itemList\">Edit Pet Profile</p>\n        </Menu.Item>\n        <Menu.Item>\n          <p className=\"itemList\">Export Temperature History</p>\n        </Menu.Item>\n        <Menu.Item>\n          <p className=\"itemList\">Export All Vitals History</p>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n  const clilkMenu = (item) => {\n    console.log(\"---item\", item);\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\n      //跳转到编辑宠物信息页面\n      history.push(\"/page9\");\n    }\n  };\n  //超过15s后调用接口\n  const prediction = () => {\n    let parame = {\n      ambient_temperature: 17,\n      data: mellaPredictValue,\n      deviceId: \"11111\",\n      sampling_rate: \"135ms\",\n    };\n    let url = \"/clinical/catv12Predict\";\n    console.log(\"-----调用接口入参\", parame);\n    fetchRequest(url, \"POST\", parame)\n      .then((res) => {\n        console.log(\"res\", res);\n        let ipcRenderer = window.electron.ipcRenderer;\n        if (res.message === \"Success\") {\n          let prediction = res.result.prediction.toFixed(2);\n          console.log(\"------yuce\", prediction);\n\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\n          setMellaPredictReturnValueFun(num);\n\n          let tempArr = prediction.split(\".\");\n          let intNum = tempArr[0];\n          let flotNum = tempArr[1];\n          if (intNum.length < 2) {\n            intNum = \"0\" + intNum;\n          }\n          if (flotNum.length < 2) {\n            flotNum = \"0\" + flotNum;\n          }\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", {\n              command: \"42\",\n              arr: [intNum, flotNum],\n            });\n\n            timeID && clearTimeout(timeID);\n          }, 10);\n        } else {\n          const timeID = setTimeout(() => {\n            // this.sendData('41', [])\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n\n            clearTimeout(timeID);\n          }, 10);\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n      });\n  };\n  //判断仪器是否连接从而判断选择什么图片\n  const isConnect = () => {\n    const checkImage = () => {\n      if (mellaMeasurePart === \"腋温\") {\n        return AxillaryBluetooth;\n      }else if(mellaMeasurePart === \"耳温\"){\n        return EarBluetoothIcon;\n      }else{\n        return RectalBluetoothIcon;\n      }\n    };\n    switch (selectHardwareType) {\n      case \"mellaPro\":\n        return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\n          <Avatar size={40} src={BluetoothNotConnected} />\n        ) : (\n          <Progress\n            width={48}\n            type=\"circle\"\n            percent={value}\n            format={() => <Avatar size={40} src={checkImage()} />}\n          />\n        );\n      case \"biggie\":\n        return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\n          <Avatar size={40} src={BluetoothNotConnected} />\n        ) : (\n          <Avatar size={40} src={connectBle} />\n        );\n      case \"tape\":\n        return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\n          <Avatar size={40} src={BluetoothNotConnected} />\n        ) : (\n          <Avatar size={40} src={connectBle} />\n        );\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (value === 105 && timeNum !== 60) {\n      prediction();\n    } else if (value === 105 && timeNum === 60) {\n      let ipcRenderer = window.electron.ipcRenderer;\n      const timeID = setTimeout(() => {\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n        clearTimeout(timeID);\n      }, 10);\n    }\n    return () => {};\n  }, [value]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setValue(0);\n      timer = setInterval(tick, 1000);\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\n      clearInterval(timer);\n    }else if(mellaConnectStatus === \"disconnected\"){\n      setValue(0);\n    };\n    if (mellaConnectStatus === \"complete\") {\n      // let ipcRenderer = window.electron.ipcRenderer;\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [mellaConnectStatus]);\n\n  return (\n    <>\n      <Header\n        className=\"headerBox\"\n        style={{ height: devicesTitleHeight, background: \"#fff\" }}\n      >\n        {_.isEmpty(petId) && !isWalkIn ? (\n          <></>\n        ) : (\n          <Row className=\"heardRow\">\n            {/*头部左侧 */}\n            <Col flex={10}>\n              {isWalkIn ? (\n                <span className=\"walkInTitle\">Walk-In</span>\n              ) : (\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\n                  <div\n                    className=\"petMessageBox\"\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {petPicture(40)}\n                    <div className=\"petMessageBox\">\n                      <p className=\"petName\">\n                        {!_.isEmpty(petMessage.patientId)\n                          ? petMessage.patientId\n                          : \"unknown\"}\n                        ,{\" \"}\n                        {!_.isEmpty(petMessage.petName)\n                          ? petMessage.petName\n                          : \"unknown\"}\n                      </p>\n                      <DownOutlined\n                        style={{ fontSize: \"22px\", marginLeft: \"10px\" }}\n                      />\n                    </div>\n                  </div>\n                </Dropdown>\n              )}\n            </Col>\n            {/*头部右侧 */}\n            <Col flex={1}>\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\n            </Col>\n          </Row>\n        )}\n      </Header>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaPredictReturnValueFun,\n  }\n)(HeaderItem);\n","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/petAction.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/signIn/resetPassword/ResetPassword.jsx",["610","611","612"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/admin_VetProfile/Veterinarians.jsx",["613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/index.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/doctorSelectExam/DoctorSelectAllExam.jsx",["629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/createAccount/newOrganization/NewOrganization.jsx",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/menuOptions/petAndParents/PetAndParents.jsx",["657","658","659","660","661","662","663","664","665","666","667","668"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/mouseDiv/MouseDiv.js",["669","670"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/FetchUtil3.js",["671","672","673","674"],{"ruleId":"675","severity":1,"message":"676","line":2,"column":10,"nodeType":"677","messageId":"678","endLine":2,"endColumn":15},{"ruleId":"675","severity":1,"message":"679","line":15,"column":10,"nodeType":"677","messageId":"678","endLine":15,"endColumn":12},{"ruleId":"675","severity":1,"message":"680","line":28,"column":8,"nodeType":"677","messageId":"678","endLine":28,"endColumn":14},{"ruleId":"675","severity":1,"message":"681","line":31,"column":18,"nodeType":"677","messageId":"678","endLine":31,"endColumn":24},{"ruleId":"682","severity":1,"message":"683","line":75,"column":6,"nodeType":"684","endLine":75,"endColumn":21,"suggestions":"685"},{"ruleId":"686","severity":1,"message":"687","line":108,"column":15,"nodeType":"688","endLine":108,"endColumn":74},{"ruleId":"686","severity":1,"message":"687","line":124,"column":19,"nodeType":"688","endLine":124,"endColumn":43},{"ruleId":"686","severity":1,"message":"687","line":141,"column":27,"nodeType":"688","endLine":147,"endColumn":29},{"ruleId":"689","replacedBy":"690"},{"ruleId":"691","replacedBy":"692"},{"ruleId":"689","replacedBy":"693"},{"ruleId":"691","replacedBy":"694"},{"ruleId":"675","severity":1,"message":"695","line":2,"column":60,"nodeType":"677","messageId":"678","endLine":2,"endColumn":64},{"ruleId":"675","severity":1,"message":"696","line":3,"column":8,"nodeType":"677","messageId":"678","endLine":3,"endColumn":17},{"ruleId":"675","severity":1,"message":"697","line":6,"column":32,"nodeType":"677","messageId":"678","endLine":6,"endColumn":44},{"ruleId":"675","severity":1,"message":"698","line":6,"column":46,"nodeType":"677","messageId":"678","endLine":6,"endColumn":61},{"ruleId":"675","severity":1,"message":"699","line":31,"column":9,"nodeType":"677","messageId":"678","endLine":31,"endColumn":16},{"ruleId":"675","severity":1,"message":"700","line":38,"column":5,"nodeType":"677","messageId":"678","endLine":38,"endColumn":8},{"ruleId":"675","severity":1,"message":"701","line":118,"column":29,"nodeType":"677","messageId":"678","endLine":118,"endColumn":36},{"ruleId":"675","severity":1,"message":"702","line":118,"column":38,"nodeType":"677","messageId":"678","endLine":118,"endColumn":46},{"ruleId":"675","severity":1,"message":"703","line":118,"column":48,"nodeType":"677","messageId":"678","endLine":118,"endColumn":57},{"ruleId":"675","severity":1,"message":"704","line":118,"column":59,"nodeType":"677","messageId":"678","endLine":118,"endColumn":68},{"ruleId":"705","severity":1,"message":"706","line":161,"column":5,"nodeType":"707","messageId":"708","endLine":167,"endColumn":6},{"ruleId":"709","severity":1,"message":"710","line":174,"column":41,"nodeType":"711","messageId":"712","endLine":174,"endColumn":43},{"ruleId":"713","severity":1,"message":"714","line":318,"column":34,"nodeType":"715","messageId":"716","endLine":318,"endColumn":48},{"ruleId":"713","severity":1,"message":"714","line":369,"column":29,"nodeType":"715","messageId":"716","endLine":369,"endColumn":42},{"ruleId":"675","severity":1,"message":"717","line":457,"column":11,"nodeType":"677","messageId":"678","endLine":457,"endColumn":21},{"ruleId":"675","severity":1,"message":"718","line":590,"column":11,"nodeType":"677","messageId":"678","endLine":590,"endColumn":24},{"ruleId":"686","severity":1,"message":"687","line":786,"column":15,"nodeType":"688","endLine":786,"endColumn":63},{"ruleId":"675","severity":1,"message":"719","line":850,"column":5,"nodeType":"677","messageId":"678","endLine":850,"endColumn":12},{"ruleId":"675","severity":1,"message":"704","line":851,"column":11,"nodeType":"677","messageId":"678","endLine":851,"endColumn":20},{"ruleId":"686","severity":1,"message":"687","line":886,"column":15,"nodeType":"688","endLine":886,"endColumn":63},{"ruleId":"705","severity":1,"message":"706","line":917,"column":5,"nodeType":"707","messageId":"708","endLine":920,"endColumn":6},{"ruleId":"705","severity":1,"message":"706","line":922,"column":5,"nodeType":"707","messageId":"708","endLine":925,"endColumn":6},{"ruleId":"675","severity":1,"message":"720","line":1059,"column":61,"nodeType":"677","messageId":"678","endLine":1059,"endColumn":78},{"ruleId":"675","severity":1,"message":"721","line":1059,"column":80,"nodeType":"677","messageId":"678","endLine":1059,"endColumn":85},{"ruleId":"675","severity":1,"message":"704","line":1059,"column":118,"nodeType":"677","messageId":"678","endLine":1059,"endColumn":127},{"ruleId":"675","severity":1,"message":"696","line":9,"column":8,"nodeType":"677","messageId":"678","endLine":9,"endColumn":17},{"ruleId":"675","severity":1,"message":"722","line":10,"column":10,"nodeType":"677","messageId":"678","endLine":10,"endColumn":30},{"ruleId":"675","severity":1,"message":"723","line":10,"column":32,"nodeType":"677","messageId":"678","endLine":10,"endColumn":47},{"ruleId":"675","severity":1,"message":"724","line":14,"column":8,"nodeType":"677","messageId":"678","endLine":14,"endColumn":16},{"ruleId":"675","severity":1,"message":"725","line":19,"column":10,"nodeType":"677","messageId":"678","endLine":19,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":85,"column":25,"nodeType":"707","messageId":"708","endLine":114,"endColumn":26},{"ruleId":"726","severity":1,"message":"727","line":103,"column":29,"nodeType":"728","messageId":"729","endLine":104,"endColumn":68},{"ruleId":"726","severity":1,"message":"727","line":105,"column":29,"nodeType":"728","messageId":"729","endLine":112,"endColumn":39},{"ruleId":"675","severity":1,"message":"730","line":290,"column":49,"nodeType":"677","messageId":"678","endLine":290,"endColumn":63},{"ruleId":"675","severity":1,"message":"731","line":290,"column":65,"nodeType":"677","messageId":"678","endLine":290,"endColumn":79},{"ruleId":"675","severity":1,"message":"732","line":4,"column":10,"nodeType":"677","messageId":"678","endLine":4,"endColumn":15},{"ruleId":"675","severity":1,"message":"733","line":4,"column":17,"nodeType":"677","messageId":"678","endLine":4,"endColumn":23},{"ruleId":"675","severity":1,"message":"695","line":4,"column":34,"nodeType":"677","messageId":"678","endLine":4,"endColumn":38},{"ruleId":"675","severity":1,"message":"734","line":4,"column":40,"nodeType":"677","messageId":"678","endLine":4,"endColumn":47},{"ruleId":"675","severity":1,"message":"722","line":5,"column":10,"nodeType":"677","messageId":"678","endLine":5,"endColumn":30},{"ruleId":"675","severity":1,"message":"697","line":5,"column":32,"nodeType":"677","messageId":"678","endLine":5,"endColumn":44},{"ruleId":"675","severity":1,"message":"735","line":9,"column":8,"nodeType":"677","messageId":"678","endLine":9,"endColumn":18},{"ruleId":"675","severity":1,"message":"736","line":18,"column":8,"nodeType":"677","messageId":"678","endLine":18,"endColumn":16},{"ruleId":"675","severity":1,"message":"737","line":19,"column":8,"nodeType":"677","messageId":"678","endLine":19,"endColumn":16},{"ruleId":"675","severity":1,"message":"738","line":20,"column":8,"nodeType":"677","messageId":"678","endLine":20,"endColumn":18},{"ruleId":"675","severity":1,"message":"739","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":16},{"ruleId":"675","severity":1,"message":"740","line":23,"column":8,"nodeType":"677","messageId":"678","endLine":23,"endColumn":15},{"ruleId":"675","severity":1,"message":"741","line":24,"column":26,"nodeType":"677","messageId":"678","endLine":24,"endColumn":28},{"ruleId":"682","severity":1,"message":"742","line":60,"column":8,"nodeType":"684","endLine":60,"endColumn":10,"suggestions":"743"},{"ruleId":"682","severity":1,"message":"744","line":102,"column":8,"nodeType":"684","endLine":102,"endColumn":38,"suggestions":"745"},{"ruleId":"675","severity":1,"message":"746","line":7,"column":3,"nodeType":"677","messageId":"678","endLine":7,"endColumn":7},{"ruleId":"675","severity":1,"message":"747","line":11,"column":3,"nodeType":"677","messageId":"678","endLine":11,"endColumn":10},{"ruleId":"675","severity":1,"message":"695","line":13,"column":3,"nodeType":"677","messageId":"678","endLine":13,"endColumn":7},{"ruleId":"675","severity":1,"message":"722","line":19,"column":3,"nodeType":"677","messageId":"678","endLine":19,"endColumn":23},{"ruleId":"675","severity":1,"message":"697","line":20,"column":3,"nodeType":"677","messageId":"678","endLine":20,"endColumn":15},{"ruleId":"675","severity":1,"message":"740","line":27,"column":8,"nodeType":"677","messageId":"678","endLine":27,"endColumn":15},{"ruleId":"675","severity":1,"message":"748","line":31,"column":8,"nodeType":"677","messageId":"678","endLine":31,"endColumn":10},{"ruleId":"675","severity":1,"message":"749","line":32,"column":8,"nodeType":"677","messageId":"678","endLine":32,"endColumn":10},{"ruleId":"675","severity":1,"message":"750","line":33,"column":8,"nodeType":"677","messageId":"678","endLine":33,"endColumn":12},{"ruleId":"675","severity":1,"message":"751","line":34,"column":8,"nodeType":"677","messageId":"678","endLine":34,"endColumn":11},{"ruleId":"675","severity":1,"message":"752","line":35,"column":8,"nodeType":"677","messageId":"678","endLine":35,"endColumn":11},{"ruleId":"675","severity":1,"message":"753","line":36,"column":8,"nodeType":"677","messageId":"678","endLine":36,"endColumn":13},{"ruleId":"675","severity":1,"message":"754","line":40,"column":8,"nodeType":"677","messageId":"678","endLine":40,"endColumn":18},{"ruleId":"675","severity":1,"message":"755","line":44,"column":8,"nodeType":"677","messageId":"678","endLine":44,"endColumn":13},{"ruleId":"675","severity":1,"message":"756","line":54,"column":7,"nodeType":"677","messageId":"678","endLine":54,"endColumn":24},{"ruleId":"675","severity":1,"message":"757","line":88,"column":17,"nodeType":"677","messageId":"678","endLine":88,"endColumn":25},{"ruleId":"675","severity":1,"message":"758","line":100,"column":10,"nodeType":"677","messageId":"678","endLine":100,"endColumn":18},{"ruleId":"675","severity":1,"message":"759","line":104,"column":10,"nodeType":"677","messageId":"678","endLine":104,"endColumn":13},{"ruleId":"675","severity":1,"message":"760","line":107,"column":18,"nodeType":"677","messageId":"678","endLine":107,"endColumn":27},{"ruleId":"675","severity":1,"message":"761","line":127,"column":11,"nodeType":"677","messageId":"678","endLine":127,"endColumn":14},{"ruleId":"675","severity":1,"message":"762","line":440,"column":22,"nodeType":"677","messageId":"678","endLine":440,"endColumn":26},{"ruleId":"763","severity":1,"message":"764","line":694,"column":34,"nodeType":"765","messageId":"766","endLine":694,"endColumn":35,"suggestions":"767"},{"ruleId":"763","severity":1,"message":"768","line":699,"column":31,"nodeType":"765","messageId":"766","endLine":699,"endColumn":32,"suggestions":"769"},{"ruleId":"763","severity":1,"message":"764","line":734,"column":34,"nodeType":"765","messageId":"766","endLine":734,"endColumn":35,"suggestions":"770"},{"ruleId":"763","severity":1,"message":"768","line":739,"column":31,"nodeType":"765","messageId":"766","endLine":739,"endColumn":32,"suggestions":"771"},{"ruleId":"763","severity":1,"message":"764","line":774,"column":34,"nodeType":"765","messageId":"766","endLine":774,"endColumn":35,"suggestions":"772"},{"ruleId":"763","severity":1,"message":"768","line":779,"column":31,"nodeType":"765","messageId":"766","endLine":779,"endColumn":32,"suggestions":"773"},{"ruleId":"763","severity":1,"message":"764","line":822,"column":34,"nodeType":"765","messageId":"766","endLine":822,"endColumn":35,"suggestions":"774"},{"ruleId":"763","severity":1,"message":"768","line":827,"column":31,"nodeType":"765","messageId":"766","endLine":827,"endColumn":32,"suggestions":"775"},{"ruleId":"763","severity":1,"message":"764","line":861,"column":34,"nodeType":"765","messageId":"766","endLine":861,"endColumn":35,"suggestions":"776"},{"ruleId":"763","severity":1,"message":"768","line":866,"column":31,"nodeType":"765","messageId":"766","endLine":866,"endColumn":32,"suggestions":"777"},{"ruleId":"763","severity":1,"message":"764","line":902,"column":34,"nodeType":"765","messageId":"766","endLine":902,"endColumn":35,"suggestions":"778"},{"ruleId":"763","severity":1,"message":"768","line":907,"column":31,"nodeType":"765","messageId":"766","endLine":907,"endColumn":32,"suggestions":"779"},{"ruleId":"763","severity":1,"message":"764","line":1448,"column":34,"nodeType":"765","messageId":"766","endLine":1448,"endColumn":35,"suggestions":"780"},{"ruleId":"763","severity":1,"message":"768","line":1453,"column":31,"nodeType":"765","messageId":"766","endLine":1453,"endColumn":32,"suggestions":"781"},{"ruleId":"763","severity":1,"message":"764","line":1469,"column":34,"nodeType":"765","messageId":"766","endLine":1469,"endColumn":35,"suggestions":"782"},{"ruleId":"763","severity":1,"message":"768","line":1474,"column":31,"nodeType":"765","messageId":"766","endLine":1474,"endColumn":32,"suggestions":"783"},{"ruleId":"682","severity":1,"message":"784","line":1692,"column":6,"nodeType":"684","endLine":1692,"endColumn":23,"suggestions":"785"},{"ruleId":"682","severity":1,"message":"786","line":1721,"column":6,"nodeType":"684","endLine":1721,"endColumn":26,"suggestions":"787"},{"ruleId":"682","severity":1,"message":"788","line":1727,"column":6,"nodeType":"684","endLine":1727,"endColumn":18,"suggestions":"789"},{"ruleId":"689","replacedBy":"790"},{"ruleId":"691","replacedBy":"791"},{"ruleId":"675","severity":1,"message":"792","line":1,"column":17,"nodeType":"677","messageId":"678","endLine":1,"endColumn":25},{"ruleId":"675","severity":1,"message":"793","line":1,"column":27,"nodeType":"677","messageId":"678","endLine":1,"endColumn":36},{"ruleId":"675","severity":1,"message":"697","line":3,"column":10,"nodeType":"677","messageId":"678","endLine":3,"endColumn":22},{"ruleId":"675","severity":1,"message":"722","line":3,"column":24,"nodeType":"677","messageId":"678","endLine":3,"endColumn":44},{"ruleId":"675","severity":1,"message":"794","line":4,"column":10,"nodeType":"677","messageId":"678","endLine":4,"endColumn":24},{"ruleId":"686","severity":1,"message":"687","line":44,"column":11,"nodeType":"688","endLine":47,"endColumn":13},{"ruleId":"686","severity":1,"message":"687","line":53,"column":13,"nodeType":"688","endLine":56,"endColumn":15},{"ruleId":"686","severity":1,"message":"687","line":61,"column":11,"nodeType":"688","endLine":64,"endColumn":13},{"ruleId":"686","severity":1,"message":"687","line":74,"column":11,"nodeType":"688","endLine":77,"endColumn":13},{"ruleId":"689","replacedBy":"795"},{"ruleId":"691","replacedBy":"796"},{"ruleId":"675","severity":1,"message":"793","line":1,"column":27,"nodeType":"677","messageId":"678","endLine":1,"endColumn":36},{"ruleId":"675","severity":1,"message":"725","line":8,"column":10,"nodeType":"677","messageId":"678","endLine":8,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":8,"column":20,"nodeType":"677","messageId":"678","endLine":8,"endColumn":24},{"ruleId":"675","severity":1,"message":"798","line":18,"column":9,"nodeType":"677","messageId":"678","endLine":18,"endColumn":16},{"ruleId":"675","severity":1,"message":"799","line":68,"column":21,"nodeType":"677","messageId":"678","endLine":68,"endColumn":27},{"ruleId":"675","severity":1,"message":"800","line":72,"column":21,"nodeType":"677","messageId":"678","endLine":72,"endColumn":28},{"ruleId":"801","severity":1,"message":"802","line":160,"column":17,"nodeType":"688","endLine":176,"endColumn":18},{"ruleId":"705","severity":1,"message":"706","line":224,"column":29,"nodeType":"707","messageId":"708","endLine":243,"endColumn":30},{"ruleId":"675","severity":1,"message":"803","line":2,"column":10,"nodeType":"677","messageId":"678","endLine":2,"endColumn":20},{"ruleId":"675","severity":1,"message":"746","line":4,"column":5,"nodeType":"677","messageId":"678","endLine":4,"endColumn":9},{"ruleId":"675","severity":1,"message":"804","line":5,"column":5,"nodeType":"677","messageId":"678","endLine":5,"endColumn":12},{"ruleId":"675","severity":1,"message":"733","line":6,"column":5,"nodeType":"677","messageId":"678","endLine":6,"endColumn":11},{"ruleId":"675","severity":1,"message":"805","line":7,"column":5,"nodeType":"677","messageId":"678","endLine":7,"endColumn":10},{"ruleId":"675","severity":1,"message":"725","line":15,"column":10,"nodeType":"677","messageId":"678","endLine":15,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":15,"column":20,"nodeType":"677","messageId":"678","endLine":15,"endColumn":24},{"ruleId":"675","severity":1,"message":"806","line":16,"column":8,"nodeType":"677","messageId":"678","endLine":16,"endColumn":21},{"ruleId":"709","severity":1,"message":"710","line":49,"column":36,"nodeType":"711","messageId":"712","endLine":49,"endColumn":38},{"ruleId":"709","severity":1,"message":"710","line":65,"column":32,"nodeType":"711","messageId":"712","endLine":65,"endColumn":34},{"ruleId":"709","severity":1,"message":"710","line":74,"column":37,"nodeType":"711","messageId":"712","endLine":74,"endColumn":39},{"ruleId":"709","severity":1,"message":"710","line":80,"column":23,"nodeType":"711","messageId":"712","endLine":80,"endColumn":25},{"ruleId":"709","severity":1,"message":"710","line":82,"column":31,"nodeType":"711","messageId":"712","endLine":82,"endColumn":33},{"ruleId":"807","severity":1,"message":"808","line":86,"column":32,"nodeType":"715","messageId":"809","endLine":86,"endColumn":34},{"ruleId":"682","severity":1,"message":"810","line":104,"column":8,"nodeType":"684","endLine":104,"endColumn":10,"suggestions":"811"},{"ruleId":"709","severity":1,"message":"710","line":114,"column":39,"nodeType":"711","messageId":"712","endLine":114,"endColumn":41},{"ruleId":"709","severity":1,"message":"710","line":115,"column":49,"nodeType":"711","messageId":"712","endLine":115,"endColumn":51},{"ruleId":"807","severity":1,"message":"812","line":124,"column":39,"nodeType":"715","messageId":"809","endLine":124,"endColumn":41},{"ruleId":"709","severity":1,"message":"710","line":137,"column":39,"nodeType":"711","messageId":"712","endLine":137,"endColumn":41},{"ruleId":"682","severity":1,"message":"813","line":152,"column":8,"nodeType":"684","endLine":152,"endColumn":20,"suggestions":"814"},{"ruleId":"801","severity":1,"message":"815","line":202,"column":21,"nodeType":"688","endLine":207,"endColumn":22},{"ruleId":"675","severity":1,"message":"806","line":13,"column":8,"nodeType":"677","messageId":"678","endLine":13,"endColumn":21},{"ruleId":"675","severity":1,"message":"816","line":14,"column":8,"nodeType":"677","messageId":"678","endLine":14,"endColumn":20},{"ruleId":"675","severity":1,"message":"804","line":5,"column":3,"nodeType":"677","messageId":"678","endLine":5,"endColumn":10},{"ruleId":"675","severity":1,"message":"733","line":6,"column":3,"nodeType":"677","messageId":"678","endLine":6,"endColumn":9},{"ruleId":"675","severity":1,"message":"805","line":7,"column":3,"nodeType":"677","messageId":"678","endLine":7,"endColumn":8},{"ruleId":"675","severity":1,"message":"697","line":10,"column":10,"nodeType":"677","messageId":"678","endLine":10,"endColumn":22},{"ruleId":"675","severity":1,"message":"794","line":11,"column":10,"nodeType":"677","messageId":"678","endLine":11,"endColumn":24},{"ruleId":"675","severity":1,"message":"817","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":16},{"ruleId":"675","severity":1,"message":"818","line":28,"column":8,"nodeType":"677","messageId":"678","endLine":28,"endColumn":17},{"ruleId":"675","severity":1,"message":"819","line":29,"column":8,"nodeType":"677","messageId":"678","endLine":29,"endColumn":21},{"ruleId":"675","severity":1,"message":"736","line":31,"column":8,"nodeType":"677","messageId":"678","endLine":31,"endColumn":16},{"ruleId":"675","severity":1,"message":"820","line":43,"column":8,"nodeType":"677","messageId":"678","endLine":43,"endColumn":15},{"ruleId":"675","severity":1,"message":"699","line":45,"column":9,"nodeType":"677","messageId":"678","endLine":45,"endColumn":16},{"ruleId":"675","severity":1,"message":"821","line":46,"column":7,"nodeType":"677","messageId":"678","endLine":46,"endColumn":13},{"ruleId":"675","severity":1,"message":"822","line":50,"column":7,"nodeType":"677","messageId":"678","endLine":50,"endColumn":17},{"ruleId":"675","severity":1,"message":"823","line":112,"column":10,"nodeType":"677","messageId":"678","endLine":112,"endColumn":19},{"ruleId":"675","severity":1,"message":"824","line":112,"column":21,"nodeType":"677","messageId":"678","endLine":112,"endColumn":33},{"ruleId":"726","severity":1,"message":"727","line":171,"column":7,"nodeType":"728","messageId":"729","endLine":172,"endColumn":31},{"ruleId":"726","severity":1,"message":"727","line":173,"column":7,"nodeType":"728","messageId":"729","endLine":176,"endColumn":15},{"ruleId":"726","severity":1,"message":"825","line":183,"column":7,"nodeType":"728","messageId":"826","endLine":184,"endColumn":15},{"ruleId":"682","severity":1,"message":"827","line":201,"column":6,"nodeType":"684","endLine":201,"endColumn":8,"suggestions":"828"},{"ruleId":"675","severity":1,"message":"829","line":238,"column":13,"nodeType":"677","messageId":"678","endLine":238,"endColumn":20},{"ruleId":"686","severity":1,"message":"687","line":827,"column":17,"nodeType":"688","endLine":827,"endColumn":63},{"ruleId":"686","severity":1,"message":"687","line":833,"column":17,"nodeType":"688","endLine":833,"endColumn":65},{"ruleId":"801","severity":1,"message":"802","line":867,"column":15,"nodeType":"688","endLine":872,"endColumn":16},{"ruleId":"801","severity":1,"message":"802","line":873,"column":15,"nodeType":"688","endLine":879,"endColumn":16},{"ruleId":"686","severity":1,"message":"687","line":959,"column":17,"nodeType":"688","endLine":959,"endColumn":63},{"ruleId":"686","severity":1,"message":"687","line":964,"column":15,"nodeType":"688","endLine":964,"endColumn":64},{"ruleId":"801","severity":1,"message":"802","line":1057,"column":13,"nodeType":"688","endLine":1059,"endColumn":14},{"ruleId":"801","severity":1,"message":"802","line":1122,"column":15,"nodeType":"688","endLine":1124,"endColumn":16},{"ruleId":"801","severity":1,"message":"802","line":1138,"column":13,"nodeType":"688","endLine":1140,"endColumn":14},{"ruleId":"801","severity":1,"message":"802","line":1206,"column":15,"nodeType":"688","endLine":1208,"endColumn":16},{"ruleId":"801","severity":1,"message":"802","line":1221,"column":15,"nodeType":"688","endLine":1223,"endColumn":16},{"ruleId":"686","severity":1,"message":"687","line":1262,"column":13,"nodeType":"688","endLine":1262,"endColumn":58},{"ruleId":"686","severity":1,"message":"687","line":1459,"column":17,"nodeType":"688","endLine":1459,"endColumn":52},{"ruleId":"686","severity":1,"message":"687","line":1460,"column":17,"nodeType":"688","endLine":1460,"endColumn":51},{"ruleId":"689","replacedBy":"830"},{"ruleId":"691","replacedBy":"831"},{"ruleId":"675","severity":1,"message":"832","line":4,"column":3,"nodeType":"677","messageId":"678","endLine":4,"endColumn":8},{"ruleId":"675","severity":1,"message":"732","line":5,"column":3,"nodeType":"677","messageId":"678","endLine":5,"endColumn":8},{"ruleId":"675","severity":1,"message":"733","line":6,"column":3,"nodeType":"677","messageId":"678","endLine":6,"endColumn":9},{"ruleId":"675","severity":1,"message":"833","line":7,"column":3,"nodeType":"677","messageId":"678","endLine":7,"endColumn":8},{"ruleId":"675","severity":1,"message":"805","line":10,"column":3,"nodeType":"677","messageId":"678","endLine":10,"endColumn":8},{"ruleId":"675","severity":1,"message":"834","line":11,"column":3,"nodeType":"677","messageId":"678","endLine":11,"endColumn":9},{"ruleId":"675","severity":1,"message":"835","line":12,"column":3,"nodeType":"677","messageId":"678","endLine":12,"endColumn":17},{"ruleId":"675","severity":1,"message":"696","line":15,"column":8,"nodeType":"677","messageId":"678","endLine":15,"endColumn":17},{"ruleId":"675","severity":1,"message":"820","line":16,"column":8,"nodeType":"677","messageId":"678","endLine":16,"endColumn":15},{"ruleId":"675","severity":1,"message":"680","line":17,"column":8,"nodeType":"677","messageId":"678","endLine":17,"endColumn":14},{"ruleId":"675","severity":1,"message":"697","line":20,"column":10,"nodeType":"677","messageId":"678","endLine":20,"endColumn":22},{"ruleId":"675","severity":1,"message":"836","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":27,"column":10,"nodeType":"677","messageId":"678","endLine":27,"endColumn":14},{"ruleId":"675","severity":1,"message":"725","line":27,"column":16,"nodeType":"677","messageId":"678","endLine":27,"endColumn":20},{"ruleId":"675","severity":1,"message":"741","line":27,"column":22,"nodeType":"677","messageId":"678","endLine":27,"endColumn":24},{"ruleId":"675","severity":1,"message":"699","line":39,"column":9,"nodeType":"677","messageId":"678","endLine":39,"endColumn":16},{"ruleId":"675","severity":1,"message":"792","line":1,"column":17,"nodeType":"677","messageId":"678","endLine":1,"endColumn":25},{"ruleId":"675","severity":1,"message":"837","line":8,"column":8,"nodeType":"677","messageId":"678","endLine":8,"endColumn":17},{"ruleId":"838","severity":1,"message":"839","line":16,"column":20,"nodeType":"840","messageId":"809","endLine":16,"endColumn":23},{"ruleId":"675","severity":1,"message":"725","line":14,"column":10,"nodeType":"677","messageId":"678","endLine":14,"endColumn":14},{"ruleId":"675","severity":1,"message":"733","line":17,"column":8,"nodeType":"677","messageId":"678","endLine":17,"endColumn":14},{"ruleId":"841","severity":1,"message":"842","line":48,"column":5,"nodeType":"843","messageId":"809","endLine":48,"endColumn":13},{"ruleId":"675","severity":1,"message":"844","line":59,"column":9,"nodeType":"677","messageId":"678","endLine":59,"endColumn":22},{"ruleId":"675","severity":1,"message":"844","line":95,"column":9,"nodeType":"677","messageId":"678","endLine":95,"endColumn":22},{"ruleId":"709","severity":1,"message":"710","line":213,"column":41,"nodeType":"711","messageId":"712","endLine":213,"endColumn":43},{"ruleId":"709","severity":1,"message":"710","line":226,"column":47,"nodeType":"711","messageId":"712","endLine":226,"endColumn":49},{"ruleId":"675","severity":1,"message":"845","line":397,"column":23,"nodeType":"677","messageId":"678","endLine":397,"endColumn":28},{"ruleId":"675","severity":1,"message":"846","line":450,"column":21,"nodeType":"677","messageId":"678","endLine":450,"endColumn":36},{"ruleId":"675","severity":1,"message":"837","line":2,"column":8,"nodeType":"677","messageId":"678","endLine":2,"endColumn":17},{"ruleId":"675","severity":1,"message":"732","line":4,"column":10,"nodeType":"677","messageId":"678","endLine":4,"endColumn":15},{"ruleId":"675","severity":1,"message":"733","line":4,"column":17,"nodeType":"677","messageId":"678","endLine":4,"endColumn":23},{"ruleId":"675","severity":1,"message":"847","line":4,"column":25,"nodeType":"677","messageId":"678","endLine":4,"endColumn":32},{"ruleId":"675","severity":1,"message":"695","line":4,"column":34,"nodeType":"677","messageId":"678","endLine":4,"endColumn":38},{"ruleId":"675","severity":1,"message":"734","line":4,"column":40,"nodeType":"677","messageId":"678","endLine":4,"endColumn":47},{"ruleId":"675","severity":1,"message":"722","line":5,"column":10,"nodeType":"677","messageId":"678","endLine":5,"endColumn":30},{"ruleId":"675","severity":1,"message":"698","line":5,"column":46,"nodeType":"677","messageId":"678","endLine":5,"endColumn":61},{"ruleId":"675","severity":1,"message":"725","line":9,"column":10,"nodeType":"677","messageId":"678","endLine":9,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":9,"column":20,"nodeType":"677","messageId":"678","endLine":9,"endColumn":24},{"ruleId":"675","severity":1,"message":"741","line":9,"column":26,"nodeType":"677","messageId":"678","endLine":9,"endColumn":28},{"ruleId":"682","severity":1,"message":"848","line":30,"column":8,"nodeType":"684","endLine":30,"endColumn":10,"suggestions":"849"},{"ruleId":"675","severity":1,"message":"747","line":2,"column":35,"nodeType":"677","messageId":"678","endLine":2,"endColumn":42},{"ruleId":"675","severity":1,"message":"850","line":13,"column":10,"nodeType":"677","messageId":"678","endLine":13,"endColumn":21},{"ruleId":"675","severity":1,"message":"741","line":43,"column":20,"nodeType":"677","messageId":"678","endLine":43,"endColumn":22},{"ruleId":"675","severity":1,"message":"699","line":50,"column":9,"nodeType":"677","messageId":"678","endLine":50,"endColumn":16},{"ruleId":"675","severity":1,"message":"821","line":52,"column":7,"nodeType":"677","messageId":"678","endLine":52,"endColumn":13},{"ruleId":"675","severity":1,"message":"851","line":79,"column":5,"nodeType":"677","messageId":"678","endLine":79,"endColumn":15},{"ruleId":"675","severity":1,"message":"852","line":212,"column":48,"nodeType":"677","messageId":"678","endLine":212,"endColumn":54},{"ruleId":"705","severity":1,"message":"706","line":331,"column":9,"nodeType":"707","messageId":"708","endLine":344,"endColumn":10},{"ruleId":"705","severity":1,"message":"706","line":744,"column":9,"nodeType":"707","messageId":"708","endLine":748,"endColumn":10},{"ruleId":"675","severity":1,"message":"853","line":752,"column":9,"nodeType":"677","messageId":"678","endLine":752,"endColumn":27},{"ruleId":"841","severity":1,"message":"854","line":798,"column":7,"nodeType":"843","messageId":"809","endLine":798,"endColumn":10},{"ruleId":"705","severity":1,"message":"706","line":1051,"column":11,"nodeType":"707","messageId":"708","endLine":1058,"endColumn":12},{"ruleId":"705","severity":1,"message":"706","line":1274,"column":13,"nodeType":"707","messageId":"708","endLine":1281,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":1431,"column":13,"nodeType":"707","messageId":"708","endLine":1438,"endColumn":14},{"ruleId":"675","severity":1,"message":"855","line":1502,"column":15,"nodeType":"677","messageId":"678","endLine":1502,"endColumn":26},{"ruleId":"856","severity":1,"message":"857","line":1789,"column":9,"nodeType":"858","messageId":"859","endLine":1789,"endColumn":15},{"ruleId":"856","severity":1,"message":"857","line":1798,"column":9,"nodeType":"858","messageId":"859","endLine":1798,"endColumn":14},{"ruleId":"705","severity":1,"message":"706","line":2024,"column":9,"nodeType":"707","messageId":"708","endLine":2037,"endColumn":10},{"ruleId":"763","severity":1,"message":"768","line":2430,"column":36,"nodeType":"765","messageId":"766","endLine":2430,"endColumn":37,"suggestions":"860"},{"ruleId":"807","severity":1,"message":"812","line":2431,"column":47,"nodeType":"715","messageId":"809","endLine":2431,"endColumn":49},{"ruleId":"675","severity":1,"message":"845","line":2632,"column":107,"nodeType":"677","messageId":"678","endLine":2632,"endColumn":112},{"ruleId":"675","severity":1,"message":"861","line":3057,"column":11,"nodeType":"677","messageId":"678","endLine":3057,"endColumn":14},{"ruleId":"675","severity":1,"message":"862","line":3694,"column":17,"nodeType":"677","messageId":"678","endLine":3694,"endColumn":23},{"ruleId":"675","severity":1,"message":"863","line":4322,"column":13,"nodeType":"677","messageId":"678","endLine":4322,"endColumn":23},{"ruleId":"675","severity":1,"message":"864","line":4322,"column":25,"nodeType":"677","messageId":"678","endLine":4322,"endColumn":33},{"ruleId":"675","severity":1,"message":"865","line":4322,"column":35,"nodeType":"677","messageId":"678","endLine":4322,"endColumn":41},{"ruleId":"705","severity":1,"message":"706","line":4355,"column":17,"nodeType":"707","messageId":"708","endLine":4368,"endColumn":18},{"ruleId":"866","severity":1,"message":"867","line":1,"column":1,"nodeType":"868","endLine":256,"endColumn":3},{"ruleId":"675","severity":1,"message":"869","line":1,"column":38,"nodeType":"677","messageId":"678","endLine":1,"endColumn":44},{"ruleId":"675","severity":1,"message":"746","line":5,"column":3,"nodeType":"677","messageId":"678","endLine":5,"endColumn":7},{"ruleId":"675","severity":1,"message":"870","line":6,"column":3,"nodeType":"677","messageId":"678","endLine":6,"endColumn":13},{"ruleId":"675","severity":1,"message":"871","line":13,"column":3,"nodeType":"677","messageId":"678","endLine":13,"endColumn":11},{"ruleId":"675","severity":1,"message":"681","line":42,"column":18,"nodeType":"677","messageId":"678","endLine":42,"endColumn":24},{"ruleId":"675","severity":1,"message":"872","line":56,"column":10,"nodeType":"677","messageId":"678","endLine":56,"endColumn":17},{"ruleId":"675","severity":1,"message":"873","line":56,"column":19,"nodeType":"677","messageId":"678","endLine":56,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":152,"column":11,"nodeType":"688","endLine":152,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":154,"column":11,"nodeType":"688","endLine":154,"endColumn":32},{"ruleId":"686","severity":1,"message":"687","line":158,"column":11,"nodeType":"688","endLine":158,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":160,"column":11,"nodeType":"688","endLine":160,"endColumn":32},{"ruleId":"686","severity":1,"message":"687","line":164,"column":11,"nodeType":"688","endLine":164,"endColumn":30},{"ruleId":"686","severity":1,"message":"687","line":166,"column":11,"nodeType":"688","endLine":166,"endColumn":33},{"ruleId":"686","severity":1,"message":"687","line":170,"column":11,"nodeType":"688","endLine":170,"endColumn":30},{"ruleId":"686","severity":1,"message":"687","line":172,"column":11,"nodeType":"688","endLine":172,"endColumn":33},{"ruleId":"686","severity":1,"message":"687","line":176,"column":11,"nodeType":"688","endLine":176,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":178,"column":11,"nodeType":"688","endLine":178,"endColumn":32},{"ruleId":"686","severity":1,"message":"687","line":182,"column":11,"nodeType":"688","endLine":182,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":184,"column":11,"nodeType":"688","endLine":184,"endColumn":32},{"ruleId":"686","severity":1,"message":"687","line":188,"column":11,"nodeType":"688","endLine":188,"endColumn":29},{"ruleId":"686","severity":1,"message":"687","line":190,"column":11,"nodeType":"688","endLine":190,"endColumn":32},{"ruleId":"682","severity":1,"message":"874","line":248,"column":6,"nodeType":"684","endLine":248,"endColumn":29,"suggestions":"875"},{"ruleId":"682","severity":1,"message":"876","line":270,"column":6,"nodeType":"684","endLine":270,"endColumn":25,"suggestions":"877"},{"ruleId":"682","severity":1,"message":"878","line":292,"column":6,"nodeType":"684","endLine":292,"endColumn":13,"suggestions":"879"},{"ruleId":"682","severity":1,"message":"880","line":319,"column":6,"nodeType":"684","endLine":319,"endColumn":44,"suggestions":"881"},{"ruleId":"682","severity":1,"message":"882","line":330,"column":6,"nodeType":"684","endLine":330,"endColumn":17,"suggestions":"883"},{"ruleId":"675","severity":1,"message":"884","line":18,"column":10,"nodeType":"677","messageId":"678","endLine":18,"endColumn":23},{"ruleId":"675","severity":1,"message":"885","line":358,"column":28,"nodeType":"677","messageId":"678","endLine":358,"endColumn":31},{"ruleId":"675","severity":1,"message":"886","line":358,"column":33,"nodeType":"677","messageId":"678","endLine":358,"endColumn":35},{"ruleId":"675","severity":1,"message":"887","line":358,"column":37,"nodeType":"677","messageId":"678","endLine":358,"endColumn":45},{"ruleId":"675","severity":1,"message":"695","line":2,"column":60,"nodeType":"677","messageId":"678","endLine":2,"endColumn":64},{"ruleId":"675","severity":1,"message":"696","line":3,"column":8,"nodeType":"677","messageId":"678","endLine":3,"endColumn":17},{"ruleId":"675","severity":1,"message":"698","line":6,"column":32,"nodeType":"677","messageId":"678","endLine":6,"endColumn":47},{"ruleId":"675","severity":1,"message":"699","line":31,"column":9,"nodeType":"677","messageId":"678","endLine":31,"endColumn":16},{"ruleId":"675","severity":1,"message":"821","line":33,"column":7,"nodeType":"677","messageId":"678","endLine":33,"endColumn":13},{"ruleId":"675","severity":1,"message":"700","line":38,"column":5,"nodeType":"677","messageId":"678","endLine":38,"endColumn":8},{"ruleId":"841","severity":1,"message":"888","line":75,"column":9,"nodeType":"843","messageId":"809","endLine":75,"endColumn":15},{"ruleId":"705","severity":1,"message":"706","line":116,"column":9,"nodeType":"707","messageId":"708","endLine":122,"endColumn":10},{"ruleId":"709","severity":1,"message":"710","line":129,"column":51,"nodeType":"711","messageId":"712","endLine":129,"endColumn":53},{"ruleId":"709","severity":1,"message":"710","line":168,"column":51,"nodeType":"711","messageId":"712","endLine":168,"endColumn":53},{"ruleId":"675","severity":1,"message":"717","line":277,"column":15,"nodeType":"677","messageId":"678","endLine":277,"endColumn":25},{"ruleId":"675","severity":1,"message":"889","line":277,"column":53,"nodeType":"677","messageId":"678","endLine":277,"endColumn":59},{"ruleId":"675","severity":1,"message":"718","line":350,"column":15,"nodeType":"677","messageId":"678","endLine":350,"endColumn":28},{"ruleId":"686","severity":1,"message":"687","line":554,"column":29,"nodeType":"688","endLine":554,"endColumn":77},{"ruleId":"675","severity":1,"message":"719","line":577,"column":9,"nodeType":"677","messageId":"678","endLine":577,"endColumn":16},{"ruleId":"675","severity":1,"message":"704","line":578,"column":15,"nodeType":"677","messageId":"678","endLine":578,"endColumn":24},{"ruleId":"686","severity":1,"message":"687","line":612,"column":29,"nodeType":"688","endLine":612,"endColumn":77},{"ruleId":"705","severity":1,"message":"706","line":643,"column":9,"nodeType":"707","messageId":"708","endLine":646,"endColumn":10},{"ruleId":"705","severity":1,"message":"706","line":648,"column":9,"nodeType":"707","messageId":"708","endLine":651,"endColumn":10},{"ruleId":"675","severity":1,"message":"863","line":732,"column":17,"nodeType":"677","messageId":"678","endLine":732,"endColumn":27},{"ruleId":"675","severity":1,"message":"864","line":732,"column":29,"nodeType":"677","messageId":"678","endLine":732,"endColumn":37},{"ruleId":"675","severity":1,"message":"865","line":732,"column":39,"nodeType":"677","messageId":"678","endLine":732,"endColumn":45},{"ruleId":"675","severity":1,"message":"890","line":732,"column":47,"nodeType":"677","messageId":"678","endLine":732,"endColumn":55},{"ruleId":"675","severity":1,"message":"721","line":798,"column":97,"nodeType":"677","messageId":"678","endLine":798,"endColumn":102},{"ruleId":"675","severity":1,"message":"891","line":798,"column":135,"nodeType":"677","messageId":"678","endLine":798,"endColumn":157},{"ruleId":"675","severity":1,"message":"892","line":17,"column":8,"nodeType":"677","messageId":"678","endLine":17,"endColumn":24},{"ruleId":"675","severity":1,"message":"893","line":6,"column":5,"nodeType":"677","messageId":"678","endLine":6,"endColumn":10},{"ruleId":"675","severity":1,"message":"894","line":12,"column":13,"nodeType":"677","messageId":"678","endLine":12,"endColumn":19},{"ruleId":"807","severity":1,"message":"808","line":15,"column":20,"nodeType":"715","messageId":"809","endLine":15,"endColumn":22},{"ruleId":"807","severity":1,"message":"808","line":59,"column":20,"nodeType":"715","messageId":"809","endLine":59,"endColumn":22},{"ruleId":"675","severity":1,"message":"793","line":1,"column":27,"nodeType":"677","messageId":"678","endLine":1,"endColumn":36},{"ruleId":"675","severity":1,"message":"837","line":2,"column":8,"nodeType":"677","messageId":"678","endLine":2,"endColumn":17},{"ruleId":"675","severity":1,"message":"732","line":4,"column":10,"nodeType":"677","messageId":"678","endLine":4,"endColumn":15},{"ruleId":"675","severity":1,"message":"733","line":4,"column":17,"nodeType":"677","messageId":"678","endLine":4,"endColumn":23},{"ruleId":"675","severity":1,"message":"695","line":4,"column":34,"nodeType":"677","messageId":"678","endLine":4,"endColumn":38},{"ruleId":"675","severity":1,"message":"734","line":4,"column":40,"nodeType":"677","messageId":"678","endLine":4,"endColumn":47},{"ruleId":"675","severity":1,"message":"697","line":5,"column":32,"nodeType":"677","messageId":"678","endLine":5,"endColumn":44},{"ruleId":"675","severity":1,"message":"698","line":5,"column":46,"nodeType":"677","messageId":"678","endLine":5,"endColumn":61},{"ruleId":"675","severity":1,"message":"806","line":8,"column":8,"nodeType":"677","messageId":"678","endLine":8,"endColumn":21},{"ruleId":"675","severity":1,"message":"725","line":18,"column":10,"nodeType":"677","messageId":"678","endLine":18,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":18,"column":20,"nodeType":"677","messageId":"678","endLine":18,"endColumn":24},{"ruleId":"675","severity":1,"message":"741","line":18,"column":26,"nodeType":"677","messageId":"678","endLine":18,"endColumn":28},{"ruleId":"675","severity":1,"message":"733","line":3,"column":3,"nodeType":"677","messageId":"678","endLine":3,"endColumn":9},{"ruleId":"675","severity":1,"message":"895","line":4,"column":3,"nodeType":"677","messageId":"678","endLine":4,"endColumn":11},{"ruleId":"675","severity":1,"message":"833","line":5,"column":3,"nodeType":"677","messageId":"678","endLine":5,"endColumn":8},{"ruleId":"675","severity":1,"message":"896","line":7,"column":3,"nodeType":"677","messageId":"678","endLine":7,"endColumn":6},{"ruleId":"675","severity":1,"message":"679","line":31,"column":10,"nodeType":"677","messageId":"678","endLine":31,"endColumn":12},{"ruleId":"675","severity":1,"message":"897","line":43,"column":9,"nodeType":"677","messageId":"678","endLine":43,"endColumn":26},{"ruleId":"675","severity":1,"message":"898","line":43,"column":28,"nodeType":"677","messageId":"678","endLine":43,"endColumn":46},{"ruleId":"675","severity":1,"message":"899","line":43,"column":48,"nodeType":"677","messageId":"678","endLine":43,"endColumn":64},{"ruleId":"675","severity":1,"message":"900","line":45,"column":16,"nodeType":"677","messageId":"678","endLine":45,"endColumn":20},{"ruleId":"675","severity":1,"message":"901","line":58,"column":10,"nodeType":"677","messageId":"678","endLine":58,"endColumn":18},{"ruleId":"675","severity":1,"message":"902","line":58,"column":20,"nodeType":"677","messageId":"678","endLine":58,"endColumn":31},{"ruleId":"686","severity":1,"message":"687","line":136,"column":11,"nodeType":"688","endLine":143,"endColumn":13},{"ruleId":"686","severity":1,"message":"687","line":148,"column":13,"nodeType":"688","endLine":148,"endColumn":33},{"ruleId":"686","severity":1,"message":"687","line":196,"column":18,"nodeType":"688","endLine":196,"endColumn":47},{"ruleId":"686","severity":1,"message":"687","line":198,"column":18,"nodeType":"688","endLine":198,"endColumn":47},{"ruleId":"686","severity":1,"message":"687","line":200,"column":18,"nodeType":"688","endLine":200,"endColumn":47},{"ruleId":"686","severity":1,"message":"687","line":202,"column":18,"nodeType":"688","endLine":202,"endColumn":47},{"ruleId":"686","severity":1,"message":"687","line":226,"column":11,"nodeType":"688","endLine":233,"endColumn":13},{"ruleId":"686","severity":1,"message":"687","line":238,"column":13,"nodeType":"688","endLine":238,"endColumn":63},{"ruleId":"682","severity":1,"message":"903","line":345,"column":6,"nodeType":"684","endLine":345,"endColumn":18,"suggestions":"904"},{"ruleId":"682","severity":1,"message":"905","line":353,"column":6,"nodeType":"684","endLine":353,"endColumn":15,"suggestions":"906"},{"ruleId":"682","severity":1,"message":"907","line":361,"column":6,"nodeType":"684","endLine":361,"endColumn":8,"suggestions":"908"},{"ruleId":"675","severity":1,"message":"725","line":4,"column":10,"nodeType":"677","messageId":"678","endLine":4,"endColumn":14},{"ruleId":"675","severity":1,"message":"741","line":4,"column":20,"nodeType":"677","messageId":"678","endLine":4,"endColumn":22},{"ruleId":"705","severity":1,"message":"706","line":381,"column":9,"nodeType":"707","messageId":"708","endLine":388,"endColumn":10},{"ruleId":"675","severity":1,"message":"909","line":591,"column":15,"nodeType":"677","messageId":"678","endLine":591,"endColumn":25},{"ruleId":"675","severity":1,"message":"910","line":635,"column":17,"nodeType":"677","messageId":"678","endLine":635,"endColumn":26},{"ruleId":"675","severity":1,"message":"911","line":810,"column":11,"nodeType":"677","messageId":"678","endLine":810,"endColumn":22},{"ruleId":"856","severity":1,"message":"857","line":999,"column":9,"nodeType":"858","messageId":"859","endLine":999,"endColumn":15},{"ruleId":"675","severity":1,"message":"806","line":11,"column":8,"nodeType":"677","messageId":"678","endLine":11,"endColumn":21},{"ruleId":"682","severity":1,"message":"912","line":47,"column":6,"nodeType":"684","endLine":47,"endColumn":8,"suggestions":"913"},{"ruleId":"705","severity":1,"message":"706","line":87,"column":5,"nodeType":"707","messageId":"708","endLine":106,"endColumn":6},{"ruleId":"675","severity":1,"message":"681","line":16,"column":9,"nodeType":"677","messageId":"678","endLine":16,"endColumn":15},{"ruleId":"675","severity":1,"message":"914","line":16,"column":26,"nodeType":"677","messageId":"678","endLine":16,"endColumn":32},{"ruleId":"675","severity":1,"message":"915","line":16,"column":34,"nodeType":"677","messageId":"678","endLine":16,"endColumn":39},{"ruleId":"682","severity":1,"message":"916","line":94,"column":6,"nodeType":"684","endLine":94,"endColumn":22,"suggestions":"917"},{"ruleId":"682","severity":1,"message":"918","line":103,"column":6,"nodeType":"684","endLine":103,"endColumn":21,"suggestions":"919"},{"ruleId":"675","severity":1,"message":"834","line":11,"column":3,"nodeType":"677","messageId":"678","endLine":11,"endColumn":9},{"ruleId":"675","severity":1,"message":"836","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":14},{"ruleId":"675","severity":1,"message":"850","line":26,"column":10,"nodeType":"677","messageId":"678","endLine":26,"endColumn":21},{"ruleId":"675","severity":1,"message":"920","line":28,"column":8,"nodeType":"677","messageId":"678","endLine":28,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":30,"column":10,"nodeType":"677","messageId":"678","endLine":30,"endColumn":14},{"ruleId":"675","severity":1,"message":"725","line":30,"column":16,"nodeType":"677","messageId":"678","endLine":30,"endColumn":20},{"ruleId":"675","severity":1,"message":"921","line":31,"column":10,"nodeType":"677","messageId":"678","endLine":31,"endColumn":20},{"ruleId":"675","severity":1,"message":"922","line":36,"column":8,"nodeType":"677","messageId":"678","endLine":36,"endColumn":21},{"ruleId":"675","severity":1,"message":"923","line":37,"column":8,"nodeType":"677","messageId":"678","endLine":37,"endColumn":15},{"ruleId":"675","severity":1,"message":"699","line":42,"column":9,"nodeType":"677","messageId":"678","endLine":42,"endColumn":16},{"ruleId":"675","severity":1,"message":"821","line":43,"column":7,"nodeType":"677","messageId":"678","endLine":43,"endColumn":13},{"ruleId":"675","severity":1,"message":"924","line":166,"column":9,"nodeType":"677","messageId":"678","endLine":166,"endColumn":16},{"ruleId":"675","severity":1,"message":"925","line":176,"column":15,"nodeType":"677","messageId":"678","endLine":176,"endColumn":21},{"ruleId":"675","severity":1,"message":"926","line":630,"column":15,"nodeType":"677","messageId":"678","endLine":630,"endColumn":24},{"ruleId":"675","severity":1,"message":"799","line":905,"column":15,"nodeType":"677","messageId":"678","endLine":905,"endColumn":21},{"ruleId":"675","severity":1,"message":"800","line":909,"column":15,"nodeType":"677","messageId":"678","endLine":909,"endColumn":22},{"ruleId":"675","severity":1,"message":"885","line":993,"column":28,"nodeType":"677","messageId":"678","endLine":993,"endColumn":31},{"ruleId":"675","severity":1,"message":"886","line":993,"column":33,"nodeType":"677","messageId":"678","endLine":993,"endColumn":35},{"ruleId":"675","severity":1,"message":"887","line":993,"column":37,"nodeType":"677","messageId":"678","endLine":993,"endColumn":45},{"ruleId":"675","severity":1,"message":"863","line":993,"column":53,"nodeType":"677","messageId":"678","endLine":993,"endColumn":63},{"ruleId":"675","severity":1,"message":"864","line":993,"column":65,"nodeType":"677","messageId":"678","endLine":993,"endColumn":73},{"ruleId":"675","severity":1,"message":"865","line":993,"column":75,"nodeType":"677","messageId":"678","endLine":993,"endColumn":81},{"ruleId":"675","severity":1,"message":"927","line":993,"column":111,"nodeType":"677","messageId":"678","endLine":993,"endColumn":117},{"ruleId":"675","severity":1,"message":"928","line":993,"column":119,"nodeType":"677","messageId":"678","endLine":993,"endColumn":129},{"ruleId":"801","severity":1,"message":"802","line":1005,"column":11,"nodeType":"688","endLine":1021,"endColumn":12},{"ruleId":"705","severity":1,"message":"706","line":1104,"column":19,"nodeType":"707","messageId":"708","endLine":1123,"endColumn":20},{"ruleId":"686","severity":1,"message":"687","line":1233,"column":17,"nodeType":"688","endLine":1233,"endColumn":52},{"ruleId":"686","severity":1,"message":"687","line":1234,"column":17,"nodeType":"688","endLine":1234,"endColumn":51},{"ruleId":"675","severity":1,"message":"679","line":13,"column":10,"nodeType":"677","messageId":"678","endLine":13,"endColumn":12},{"ruleId":"675","severity":1,"message":"741","line":13,"column":14,"nodeType":"677","messageId":"678","endLine":13,"endColumn":16},{"ruleId":"675","severity":1,"message":"676","line":4,"column":3,"nodeType":"677","messageId":"678","endLine":4,"endColumn":8},{"ruleId":"675","severity":1,"message":"833","line":10,"column":3,"nodeType":"677","messageId":"678","endLine":10,"endColumn":8},{"ruleId":"675","severity":1,"message":"929","line":11,"column":3,"nodeType":"677","messageId":"678","endLine":11,"endColumn":7},{"ruleId":"675","severity":1,"message":"930","line":16,"column":8,"nodeType":"677","messageId":"678","endLine":16,"endColumn":15},{"ruleId":"675","severity":1,"message":"897","line":69,"column":5,"nodeType":"677","messageId":"678","endLine":69,"endColumn":22},{"ruleId":"675","severity":1,"message":"931","line":73,"column":5,"nodeType":"677","messageId":"678","endLine":73,"endColumn":23},{"ruleId":"932","severity":1,"message":"933","line":131,"column":61,"nodeType":"715","messageId":"934","endLine":131,"endColumn":62},{"ruleId":"932","severity":1,"message":"933","line":139,"column":45,"nodeType":"715","messageId":"934","endLine":139,"endColumn":46},{"ruleId":"682","severity":1,"message":"935","line":283,"column":6,"nodeType":"684","endLine":283,"endColumn":13,"suggestions":"936"},{"ruleId":"682","severity":1,"message":"937","line":305,"column":6,"nodeType":"684","endLine":305,"endColumn":26,"suggestions":"938"},{"ruleId":"675","severity":1,"message":"722","line":8,"column":10,"nodeType":"677","messageId":"678","endLine":8,"endColumn":30},{"ruleId":"675","severity":1,"message":"697","line":8,"column":32,"nodeType":"677","messageId":"678","endLine":8,"endColumn":44},{"ruleId":"675","severity":1,"message":"741","line":14,"column":20,"nodeType":"677","messageId":"678","endLine":14,"endColumn":22},{"ruleId":"675","severity":1,"message":"939","line":4,"column":3,"nodeType":"677","messageId":"678","endLine":4,"endColumn":9},{"ruleId":"675","severity":1,"message":"940","line":13,"column":8,"nodeType":"677","messageId":"678","endLine":13,"endColumn":14},{"ruleId":"675","severity":1,"message":"733","line":14,"column":8,"nodeType":"677","messageId":"678","endLine":14,"endColumn":14},{"ruleId":"675","severity":1,"message":"806","line":15,"column":8,"nodeType":"677","messageId":"678","endLine":15,"endColumn":21},{"ruleId":"675","severity":1,"message":"892","line":16,"column":8,"nodeType":"677","messageId":"678","endLine":16,"endColumn":24},{"ruleId":"675","severity":1,"message":"751","line":20,"column":8,"nodeType":"677","messageId":"678","endLine":20,"endColumn":11},{"ruleId":"675","severity":1,"message":"752","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":11},{"ruleId":"675","severity":1,"message":"753","line":22,"column":8,"nodeType":"677","messageId":"678","endLine":22,"endColumn":13},{"ruleId":"675","severity":1,"message":"941","line":32,"column":9,"nodeType":"677","messageId":"678","endLine":32,"endColumn":15},{"ruleId":"675","severity":1,"message":"942","line":55,"column":11,"nodeType":"677","messageId":"678","endLine":55,"endColumn":17},{"ruleId":"675","severity":1,"message":"943","line":55,"column":19,"nodeType":"677","messageId":"678","endLine":55,"endColumn":24},{"ruleId":"675","severity":1,"message":"844","line":71,"column":9,"nodeType":"677","messageId":"678","endLine":71,"endColumn":22},{"ruleId":"675","severity":1,"message":"703","line":154,"column":18,"nodeType":"677","messageId":"678","endLine":154,"endColumn":27},{"ruleId":"675","severity":1,"message":"702","line":154,"column":29,"nodeType":"677","messageId":"678","endLine":154,"endColumn":37},{"ruleId":"686","severity":1,"message":"687","line":558,"column":19,"nodeType":"688","endLine":565,"endColumn":61},{"ruleId":"801","severity":1,"message":"802","line":573,"column":19,"nodeType":"688","endLine":581,"endColumn":30},{"ruleId":"675","severity":1,"message":"834","line":11,"column":3,"nodeType":"677","messageId":"678","endLine":11,"endColumn":9},{"ruleId":"675","severity":1,"message":"836","line":21,"column":8,"nodeType":"677","messageId":"678","endLine":21,"endColumn":14},{"ruleId":"675","severity":1,"message":"850","line":26,"column":10,"nodeType":"677","messageId":"678","endLine":26,"endColumn":21},{"ruleId":"675","severity":1,"message":"920","line":28,"column":8,"nodeType":"677","messageId":"678","endLine":28,"endColumn":14},{"ruleId":"675","severity":1,"message":"797","line":30,"column":10,"nodeType":"677","messageId":"678","endLine":30,"endColumn":14},{"ruleId":"675","severity":1,"message":"725","line":30,"column":16,"nodeType":"677","messageId":"678","endLine":30,"endColumn":20},{"ruleId":"675","severity":1,"message":"921","line":31,"column":10,"nodeType":"677","messageId":"678","endLine":31,"endColumn":20},{"ruleId":"675","severity":1,"message":"922","line":36,"column":8,"nodeType":"677","messageId":"678","endLine":36,"endColumn":21},{"ruleId":"675","severity":1,"message":"923","line":37,"column":8,"nodeType":"677","messageId":"678","endLine":37,"endColumn":15},{"ruleId":"675","severity":1,"message":"699","line":42,"column":9,"nodeType":"677","messageId":"678","endLine":42,"endColumn":16},{"ruleId":"675","severity":1,"message":"821","line":43,"column":7,"nodeType":"677","messageId":"678","endLine":43,"endColumn":13},{"ruleId":"675","severity":1,"message":"924","line":166,"column":9,"nodeType":"677","messageId":"678","endLine":166,"endColumn":16},{"ruleId":"675","severity":1,"message":"925","line":176,"column":15,"nodeType":"677","messageId":"678","endLine":176,"endColumn":21},{"ruleId":"675","severity":1,"message":"926","line":626,"column":15,"nodeType":"677","messageId":"678","endLine":626,"endColumn":24},{"ruleId":"675","severity":1,"message":"799","line":901,"column":15,"nodeType":"677","messageId":"678","endLine":901,"endColumn":21},{"ruleId":"675","severity":1,"message":"800","line":905,"column":15,"nodeType":"677","messageId":"678","endLine":905,"endColumn":22},{"ruleId":"675","severity":1,"message":"885","line":989,"column":28,"nodeType":"677","messageId":"678","endLine":989,"endColumn":31},{"ruleId":"675","severity":1,"message":"886","line":989,"column":33,"nodeType":"677","messageId":"678","endLine":989,"endColumn":35},{"ruleId":"675","severity":1,"message":"887","line":989,"column":37,"nodeType":"677","messageId":"678","endLine":989,"endColumn":45},{"ruleId":"675","severity":1,"message":"863","line":989,"column":53,"nodeType":"677","messageId":"678","endLine":989,"endColumn":63},{"ruleId":"675","severity":1,"message":"864","line":989,"column":65,"nodeType":"677","messageId":"678","endLine":989,"endColumn":73},{"ruleId":"675","severity":1,"message":"865","line":989,"column":75,"nodeType":"677","messageId":"678","endLine":989,"endColumn":81},{"ruleId":"675","severity":1,"message":"927","line":989,"column":111,"nodeType":"677","messageId":"678","endLine":989,"endColumn":117},{"ruleId":"675","severity":1,"message":"928","line":989,"column":119,"nodeType":"677","messageId":"678","endLine":989,"endColumn":129},{"ruleId":"801","severity":1,"message":"802","line":1001,"column":11,"nodeType":"688","endLine":1017,"endColumn":12},{"ruleId":"705","severity":1,"message":"706","line":1099,"column":19,"nodeType":"707","messageId":"708","endLine":1118,"endColumn":20},{"ruleId":"686","severity":1,"message":"687","line":1214,"column":17,"nodeType":"688","endLine":1214,"endColumn":52},{"ruleId":"686","severity":1,"message":"687","line":1215,"column":17,"nodeType":"688","endLine":1215,"endColumn":51},{"ruleId":"675","severity":1,"message":"939","line":4,"column":3,"nodeType":"677","messageId":"678","endLine":4,"endColumn":9},{"ruleId":"675","severity":1,"message":"940","line":12,"column":8,"nodeType":"677","messageId":"678","endLine":12,"endColumn":14},{"ruleId":"675","severity":1,"message":"733","line":13,"column":8,"nodeType":"677","messageId":"678","endLine":13,"endColumn":14},{"ruleId":"675","severity":1,"message":"806","line":14,"column":8,"nodeType":"677","messageId":"678","endLine":14,"endColumn":21},{"ruleId":"675","severity":1,"message":"892","line":15,"column":8,"nodeType":"677","messageId":"678","endLine":15,"endColumn":24},{"ruleId":"675","severity":1,"message":"725","line":16,"column":10,"nodeType":"677","messageId":"678","endLine":16,"endColumn":14},{"ruleId":"675","severity":1,"message":"944","line":25,"column":10,"nodeType":"677","messageId":"678","endLine":25,"endColumn":22},{"ruleId":"675","severity":1,"message":"941","line":27,"column":9,"nodeType":"677","messageId":"678","endLine":27,"endColumn":15},{"ruleId":"675","severity":1,"message":"942","line":43,"column":11,"nodeType":"677","messageId":"678","endLine":43,"endColumn":17},{"ruleId":"675","severity":1,"message":"943","line":43,"column":19,"nodeType":"677","messageId":"678","endLine":43,"endColumn":24},{"ruleId":"675","severity":1,"message":"844","line":59,"column":9,"nodeType":"677","messageId":"678","endLine":59,"endColumn":22},{"ruleId":"675","severity":1,"message":"945","line":78,"column":11,"nodeType":"677","messageId":"678","endLine":78,"endColumn":19},{"ruleId":"675","severity":1,"message":"793","line":2,"column":27,"nodeType":"677","messageId":"678","endLine":2,"endColumn":36},{"ruleId":"675","severity":1,"message":"725","line":7,"column":14,"nodeType":"677","messageId":"678","endLine":7,"endColumn":18},{"ruleId":"675","severity":1,"message":"893","line":5,"column":5,"nodeType":"677","messageId":"678","endLine":5,"endColumn":10},{"ruleId":"675","severity":1,"message":"894","line":11,"column":9,"nodeType":"677","messageId":"678","endLine":11,"endColumn":15},{"ruleId":"807","severity":1,"message":"808","line":14,"column":16,"nodeType":"715","messageId":"809","endLine":14,"endColumn":18},{"ruleId":"807","severity":1,"message":"808","line":58,"column":16,"nodeType":"715","messageId":"809","endLine":58,"endColumn":18},"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'px' is defined but never used.","'moment' is defined but never used.","'Header' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.","ArrayExpression",["946"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["947"],"no-negated-in-lhs",["948"],["947"],["948"],"'Spin' is defined but never used.","'Draggable' is defined but never used.","'SyncOutlined' is defined but never used.","'LoadingOutlined' is defined but never used.","'SubMenu' is assigned a value but never used.","'url' is assigned a value but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'breedName' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","'petSpecies' is assigned a value but never used.","'onPanelChange' is assigned a value but never used.","'options' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'isMix' is assigned a value but never used.","'createFromIconfontCN' is defined but never used.","'CaretDownFilled' is defined but never used.","'imgArray' is defined but never used.","'mTop' is defined but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'BackTop' is defined but never used.","'blueSearch' is defined but never used.","'MinClose' is defined but never used.","'MouseDiv' is defined but never used.","'back_white' is defined but never used.","'back_hui' is defined but never used.","'MyModal' is defined but never used.","'pX' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["949"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["950"],"'Menu' is defined but never used.","'Tooltip' is defined but never used.","'ye' is defined but never used.","'er' is defined but never used.","'gang' is defined but never used.","'dog' is defined but never used.","'cat' is defined but never used.","'other' is defined but never used.","'redjinggao' is defined but never used.","'close' is defined but never used.","'echartsDataLength' is assigned a value but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["951","952"],"Unnecessary escape character: \\-.",["953","954"],["955","956"],["957","958"],["959","960"],["961","962"],["963","964"],["965","966"],["967","968"],["969","970"],["971","972"],["973","974"],["975","976"],["977","978"],["979","980"],["981","982"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["983"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["984"],"React Hook useEffect has a missing dependency: 'getOption'. Either include it or remove the dependency array.",["985"],["947"],["948"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'SearchOutlined' is defined but never used.",["947"],["948"],"'MTop' is defined but never used.","'history' is assigned a value but never used.","'chazhi' is assigned a value but never used.","'newTime' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useHistory' is defined but never used.","'Popover' is defined but never used.","'Modal' is defined but never used.","'electronStore' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has a missing dependency: 'listDate'. Either include it or remove the dependency array.",["986"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["987"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'SelectionBox' is defined but never used.","'triangle' is defined but never used.","'heardLeft' is defined but never used.","'blueSearchPng' is defined but never used.","'Button1' is defined but never used.","'MyIcon' is assigned a value but never used.","'allPetList' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","Expected a 'break' statement before 'default'.","default","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["988"],"'bluData' is assigned a value but never used.",["947"],["948"],"'Table' is defined but never used.","'Space' is defined but never used.","'Select' is defined but never used.","'ConfigProvider' is defined but never used.","'MaxMin' is defined but never used.","'PropTypes' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","no-dupe-keys","Duplicate key 'disabled'.","ObjectExpression","'windowsHeight' is assigned a value but never used.","'petId' is assigned a value but never used.","'assignOwnerName' is assigned a value but never used.","'message' is defined but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["989"],"'FetchEszVet' is defined but never used.","'biggieSave' is assigned a value but never used.","'gender' is assigned a value but never used.","'lastConnectionTime' is assigned a value but never used.","Duplicate key '194'.","'weightUnits' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode",["990","991"],"'pas' is assigned a value but never used.","'temp15' is assigned a value but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useRef' is defined but never used.","'PageHeader' is defined but never used.","'Carousel' is defined but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["992"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["993"],"React Hook useEffect has missing dependencies: 'petLengthDataConvert' and 'petMessage'. Either include them or remove the dependency array.",["994"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array.",["995"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'headValue', 'lowerValue', 'neckValue', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["996"],"'fetchRequest1' is defined but never used.","'api' is assigned a value but never used.","'id' is assigned a value but never used.","'seleceID' is assigned a value but never used.","Duplicate key 'imgurl'.","'imgurl' is assigned a value but never used.","'disabled' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'temporaryStorage' is defined but never used.","'token' is assigned a value but never used.","'header' is assigned a value but never used.","'Progress' is defined but never used.","'Tag' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'mellaConnectStatus' is assigned a value but never used.","'mellaMeasurePart' is assigned a value but never used.","'memo' is assigned a value but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["997"],"React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["998"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["999"],"'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_getExam' and 'petList'. Either include them or remove the dependency array. You can also do a functional update 'setPetList(p => ...)' if you only need 'petList' in the 'setPetList' call.",["1000"],"'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1001"],"React Hook useEffect has a missing dependency: 'setBiggieConnectStatusFun'. Either include it or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1002"],"'gender' is defined but never used.","'stopBubble' is defined but never used.","'blackTriangle' is defined but never used.","'refresh' is defined but never used.","'dataArr' is assigned a value but never used.","'weight' is assigned a value but never used.","'selectNum' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'showsortBy' is assigned a value but never used.","'Card' is defined but never used.","'Charlie' is defined but never used.","'selectHardwareInfo' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1003"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1004"],"'Switch' is defined but never used.","'Slider' is defined but never used.","'Option' is assigned a value but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'parseGeoJSON' is defined but never used.","'isUnKnow' is assigned a value but never used.",{"desc":"1005","fix":"1006"},"no-global-assign","no-unsafe-negation",{"desc":"1007","fix":"1008"},{"desc":"1009","fix":"1010"},{"messageId":"1011","fix":"1012","desc":"1013"},{"messageId":"1014","fix":"1015","desc":"1016"},{"messageId":"1011","fix":"1017","desc":"1013"},{"messageId":"1014","fix":"1018","desc":"1016"},{"messageId":"1011","fix":"1019","desc":"1013"},{"messageId":"1014","fix":"1020","desc":"1016"},{"messageId":"1011","fix":"1021","desc":"1013"},{"messageId":"1014","fix":"1022","desc":"1016"},{"messageId":"1011","fix":"1023","desc":"1013"},{"messageId":"1014","fix":"1024","desc":"1016"},{"messageId":"1011","fix":"1025","desc":"1013"},{"messageId":"1014","fix":"1026","desc":"1016"},{"messageId":"1011","fix":"1027","desc":"1013"},{"messageId":"1014","fix":"1028","desc":"1016"},{"messageId":"1011","fix":"1029","desc":"1013"},{"messageId":"1014","fix":"1030","desc":"1016"},{"messageId":"1011","fix":"1031","desc":"1013"},{"messageId":"1014","fix":"1032","desc":"1016"},{"messageId":"1011","fix":"1033","desc":"1013"},{"messageId":"1014","fix":"1034","desc":"1016"},{"messageId":"1011","fix":"1035","desc":"1013"},{"messageId":"1014","fix":"1036","desc":"1016"},{"messageId":"1011","fix":"1037","desc":"1013"},{"messageId":"1014","fix":"1038","desc":"1016"},{"messageId":"1011","fix":"1039","desc":"1013"},{"messageId":"1014","fix":"1040","desc":"1016"},{"messageId":"1011","fix":"1041","desc":"1013"},{"messageId":"1014","fix":"1042","desc":"1016"},{"messageId":"1011","fix":"1043","desc":"1013"},{"messageId":"1014","fix":"1044","desc":"1016"},{"messageId":"1011","fix":"1045","desc":"1013"},{"messageId":"1014","fix":"1046","desc":"1016"},{"desc":"1047","fix":"1048"},{"desc":"1049","fix":"1050"},{"desc":"1051","fix":"1052"},{"desc":"1053","fix":"1054"},{"desc":"1055","fix":"1056"},{"desc":"1057","fix":"1058"},{"desc":"1059","fix":"1060"},{"messageId":"1011","fix":"1061","desc":"1013"},{"messageId":"1014","fix":"1062","desc":"1016"},{"desc":"1063","fix":"1064"},{"desc":"1065","fix":"1066"},{"desc":"1067","fix":"1068"},{"desc":"1069","fix":"1070"},{"desc":"1071","fix":"1072"},{"desc":"1073","fix":"1074"},{"desc":"1075","fix":"1076"},{"desc":"1077","fix":"1078"},{"desc":"1079","fix":"1080"},{"desc":"1081","fix":"1082"},{"desc":"1083","fix":"1084"},{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1089","text":"1090"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1091","text":"1092"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1093","text":"1094"},"removeEscape",{"range":"1095","text":"1096"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1097","text":"1098"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1099","text":"1096"},{"range":"1100","text":"1098"},{"range":"1101","text":"1096"},{"range":"1102","text":"1098"},{"range":"1103","text":"1096"},{"range":"1104","text":"1098"},{"range":"1105","text":"1096"},{"range":"1106","text":"1098"},{"range":"1107","text":"1096"},{"range":"1108","text":"1098"},{"range":"1109","text":"1096"},{"range":"1110","text":"1098"},{"range":"1111","text":"1096"},{"range":"1112","text":"1098"},{"range":"1113","text":"1096"},{"range":"1114","text":"1098"},{"range":"1115","text":"1096"},{"range":"1116","text":"1098"},{"range":"1117","text":"1096"},{"range":"1118","text":"1098"},{"range":"1119","text":"1096"},{"range":"1120","text":"1098"},{"range":"1121","text":"1096"},{"range":"1122","text":"1098"},{"range":"1123","text":"1096"},{"range":"1124","text":"1098"},{"range":"1125","text":"1096"},{"range":"1126","text":"1098"},{"range":"1127","text":"1096"},{"range":"1128","text":"1098"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1129","text":"1130"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1131","text":"1132"},"Update the dependencies array to be: [echarsData, getOption]",{"range":"1133","text":"1134"},"Update the dependencies array to be: [listDate]",{"range":"1135","text":"1136"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1137","text":"1138"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [_getExam]",{"range":"1141","text":"1142"},{"range":"1143","text":"1096"},{"range":"1144","text":"1098"},"Update the dependencies array to be: [finishScan, inputIndex, newData, patientId]",{"range":"1145","text":"1146"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1147","text":"1148"},"Update the dependencies array to be: [petId, petLengthDataConvert, petMessage]",{"range":"1149","text":"1150"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount, rulerMeasureValue]",{"range":"1151","text":"1152"},"Update the dependencies array to be: [bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",{"range":"1153","text":"1154"},"Update the dependencies array to be: [getPetTemperatureData, petMessage]",{"range":"1155","text":"1156"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1157","text":"1158"},"Update the dependencies array to be: [storage.userId]",{"range":"1159","text":"1160"},"Update the dependencies array to be: [_getExam, petList]",{"range":"1161","text":"1162"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1163","text":"1164"},"Update the dependencies array to be: [petDetailInfo, setBiggieConnectStatusFun]",{"range":"1165","text":"1166"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1167","text":"1168"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1169","text":"1170"},[2280,2295],"[callBack, carouselIndex]",[2621,2623],"[setReceiveBroadcastHardwareInfoFun]",[3890,3920],"[devicesList, receiveBroadcastHardwareInfo]",[20468,20469],"",[20468,20468],"\\",[20669,20670],[20669,20669],[21739,21740],[21739,21739],[21940,21941],[21940,21940],[23008,23009],[23008,23008],[23209,23210],[23209,23209],[24603,24604],[24603,24603],[24804,24805],[24804,24804],[25834,25835],[25834,25834],[26035,26036],[26035,26035],[27157,27158],[27157,27157],[27358,27359],[27358,27358],[42697,42698],[42697,42697],[42898,42899],[42898,42898],[43428,43429],[43428,43428],[43629,43630],[43629,43629],[49767,49784],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[50454,50474],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[50631,50643],"[echarsData, getOption]",[3263,3265],"[listDate]",[4962,4974],"[letterListCopy, phoneListCopy, searchText]",[6467,6469],"[_noUSB, _send, blueSearch]",[1002,1004],"[_getExam]",[72674,72675],[72674,72674],[6313,6336],"[finishScan, inputIndex, newData, patientId]",[6785,6804],"[inputIndex, rulerConfirmCount]",[7417,7424],"[petId, petLengthDataConvert, petMessage]",[8039,8077],"[inputIndex, rulerConfirmCount, rulerMeasureValue]",[8500,8511],"[bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",[9096,9108],"[getPetTemperatureData, petMessage]",[9256,9265],"[getPetTemperatureData, reRender, saveNum]",[9453,9455],"[storage.userId]",[1414,1416],"[_getExam, petList]",[2824,2840],"[hardwareReduce, weight]",[3028,3043],"[petDetailInfo, setBiggieConnectStatusFun]",[8065,8072],"[callBack, prediction, timeNum, value]",[8691,8711],"[mellaConnectStatus, value]"]