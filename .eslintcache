[{"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\index.js":"1","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\App.js":"2","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\index.js":"3","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx":"4","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx":"5","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx":"6","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx":"7","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx":"8","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx":"9","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx":"10","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx":"11","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx":"12","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx":"13","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx":"14","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx":"15","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx":"16","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx":"17","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx":"18","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx":"19","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx":"20","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx":"21","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx":"22","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx":"23","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx":"24","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx":"25","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx":"26","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx":"27","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx":"28","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js":"29","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js":"30","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js":"31","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx":"32","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js":"33","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx":"34","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js":"35","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx":"36","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\index.js":"37","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js":"38","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js":"39","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js":"40","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js":"41","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js":"42","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js":"43","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js":"44","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js":"45","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js":"46","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js":"47","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\current.js":"48","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx":"49","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx":"50","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx":"51","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js":"52","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js":"53","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js":"54","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js":"55","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx":"56","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx":"57","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx":"58","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"59","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx":"60","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx":"61","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js":"62","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx":"63","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx":"64","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx":"65","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx":"66","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx":"67","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx":"68","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx":"69","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js":"70","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js":"71","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js":"72","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\api.js":"73","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\config\\config.js":"74","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js":"75","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx":"76","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js":"77","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js":"78","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js":"79","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js":"80","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js":"81","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js":"82","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js":"83","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js":"84","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js":"85","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js":"86","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js":"87","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js":"88","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js":"89","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js":"90","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js":"91","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js":"92","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js":"93","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js":"94","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js":"95","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js":"96","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx":"97","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"98","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js":"99","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js":"100","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js":"101","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx":"102","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx":"103","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js":"104","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js":"105","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js":"106","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx":"107","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx":"108","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx":"109","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx":"110","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx":"111","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"112","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx":"113","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx":"114","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx":"115","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx":"116","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx":"117","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx":"118","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx":"119","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx":"120","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx":"121","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx":"122","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js":"123","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js":"124","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js":"125","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx":"126","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx":"127","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx":"128"},{"size":349,"mtime":1661943267097,"results":"129","hashOfConfig":"130"},{"size":3706,"mtime":1661943474634,"results":"131","hashOfConfig":"130"},{"size":577,"mtime":1657680900931,"results":"132","hashOfConfig":"130"},{"size":2812,"mtime":1663923487932,"results":"133","hashOfConfig":"130"},{"size":18148,"mtime":1661509757437,"results":"134","hashOfConfig":"130"},{"size":34442,"mtime":1665983596901,"results":"135","hashOfConfig":"130"},{"size":12263,"mtime":1661509757375,"results":"136","hashOfConfig":"130"},{"size":29637,"mtime":1661509757364,"results":"137","hashOfConfig":"130"},{"size":7530,"mtime":1661509757418,"results":"138","hashOfConfig":"130"},{"size":17567,"mtime":1662113861027,"results":"139","hashOfConfig":"130"},{"size":5219,"mtime":1661509757421,"results":"140","hashOfConfig":"130"},{"size":4485,"mtime":1661509757441,"results":"141","hashOfConfig":"130"},{"size":10851,"mtime":1662717639981,"results":"142","hashOfConfig":"130"},{"size":15670,"mtime":1661509757409,"results":"143","hashOfConfig":"130"},{"size":35245,"mtime":1666588287625,"results":"144","hashOfConfig":"130"},{"size":19092,"mtime":1663035986860,"results":"145","hashOfConfig":"130"},{"size":9726,"mtime":1663046451399,"results":"146","hashOfConfig":"130"},{"size":14646,"mtime":1666174545184,"results":"147","hashOfConfig":"130"},{"size":9521,"mtime":1661509757378,"results":"148","hashOfConfig":"130"},{"size":10447,"mtime":1663049218292,"results":"149","hashOfConfig":"130"},{"size":10678,"mtime":1662100192866,"results":"150","hashOfConfig":"130"},{"size":15395,"mtime":1661509757340,"results":"151","hashOfConfig":"130"},{"size":12999,"mtime":1664177756173,"results":"152","hashOfConfig":"130"},{"size":16072,"mtime":1661509757405,"results":"153","hashOfConfig":"130"},{"size":10243,"mtime":1661509757448,"results":"154","hashOfConfig":"130"},{"size":2729,"mtime":1662717508745,"results":"155","hashOfConfig":"130"},{"size":13201,"mtime":1661509757444,"results":"156","hashOfConfig":"130"},{"size":6565,"mtime":1661509757361,"results":"157","hashOfConfig":"130"},{"size":1275,"mtime":1655168677817,"results":"158","hashOfConfig":"130"},{"size":2445,"mtime":1660039584374,"results":"159","hashOfConfig":"130"},{"size":1451,"mtime":1655168677805,"results":"160","hashOfConfig":"130"},{"size":42578,"mtime":1666060090202,"results":"161","hashOfConfig":"130"},{"size":71,"mtime":1666345918833,"results":"162","hashOfConfig":"130"},{"size":3056,"mtime":1661509757473,"results":"163","hashOfConfig":"130"},{"size":300,"mtime":1663923487949,"results":"164","hashOfConfig":"130"},{"size":1410,"mtime":1655168677807,"results":"165","hashOfConfig":"130"},{"size":89,"mtime":1661509757280,"results":"166","hashOfConfig":"130"},{"size":431,"mtime":1655168677773,"results":"167","hashOfConfig":"130"},{"size":53379,"mtime":1666579542447,"results":"168","hashOfConfig":"130"},{"size":17788,"mtime":1659945946500,"results":"169","hashOfConfig":"130"},{"size":11452,"mtime":1655168677771,"results":"170","hashOfConfig":"130"},{"size":423,"mtime":1663923487950,"results":"171","hashOfConfig":"130"},{"size":465,"mtime":1657709941429,"results":"172","hashOfConfig":"130"},{"size":697,"mtime":1655467295909,"results":"173","hashOfConfig":"130"},{"size":4641,"mtime":1656498255379,"results":"174","hashOfConfig":"130"},{"size":846,"mtime":1655168677772,"results":"175","hashOfConfig":"130"},{"size":1143,"mtime":1666060090207,"results":"176","hashOfConfig":"130"},{"size":1150,"mtime":1655427981745,"results":"177","hashOfConfig":"130"},{"size":11604,"mtime":1665209511004,"results":"178","hashOfConfig":"130"},{"size":3312,"mtime":1666078462250,"results":"179","hashOfConfig":"130"},{"size":6020,"mtime":1664362615179,"results":"180","hashOfConfig":"130"},{"size":1041,"mtime":1655168677775,"results":"181","hashOfConfig":"130"},{"size":1011,"mtime":1661509757298,"results":"182","hashOfConfig":"130"},{"size":1077,"mtime":1661509757299,"results":"183","hashOfConfig":"130"},{"size":120,"mtime":1663923487946,"results":"184","hashOfConfig":"130"},{"size":14271,"mtime":1666581112522,"results":"185","hashOfConfig":"130"},{"size":8498,"mtime":1662112526381,"results":"186","hashOfConfig":"130"},{"size":1475,"mtime":1663570396052,"results":"187","hashOfConfig":"130"},{"size":2212,"mtime":1663570022044,"results":"188","hashOfConfig":"130"},{"size":2811,"mtime":1659944507368,"results":"189","hashOfConfig":"130"},{"size":4849,"mtime":1666060090204,"results":"190","hashOfConfig":"130"},{"size":2103,"mtime":1656498255375,"results":"191","hashOfConfig":"130"},{"size":8628,"mtime":1660703894009,"results":"192","hashOfConfig":"130"},{"size":59241,"mtime":1666348163058,"results":"193","hashOfConfig":"130"},{"size":12702,"mtime":1661509757337,"results":"194","hashOfConfig":"130"},{"size":6919,"mtime":1661509757429,"results":"195","hashOfConfig":"130"},{"size":5624,"mtime":1663582611080,"results":"196","hashOfConfig":"130"},{"size":2048,"mtime":1665467876650,"results":"197","hashOfConfig":"130"},{"size":9406,"mtime":1666591364137,"results":"198","hashOfConfig":"130"},{"size":267,"mtime":1661849271240,"results":"199","hashOfConfig":"130"},{"size":76,"mtime":1661509757291,"results":"200","hashOfConfig":"130"},{"size":99,"mtime":1661509757285,"results":"201","hashOfConfig":"130"},{"size":2206,"mtime":1661509757278,"results":"202","hashOfConfig":"130"},{"size":764,"mtime":1666079252975,"results":"203","hashOfConfig":"130"},{"size":3856,"mtime":1656498255377,"results":"204","hashOfConfig":"130"},{"size":8354,"mtime":1661509757395,"results":"205","hashOfConfig":"130"},{"size":336,"mtime":1663923487947,"results":"206","hashOfConfig":"130"},{"size":372,"mtime":1657709885011,"results":"207","hashOfConfig":"130"},{"size":532,"mtime":1655467295881,"results":"208","hashOfConfig":"130"},{"size":116,"mtime":1663923487942,"results":"209","hashOfConfig":"130"},{"size":71,"mtime":1657699049494,"results":"210","hashOfConfig":"130"},{"size":1023,"mtime":1666596984105,"results":"211","hashOfConfig":"130"},{"size":2855,"mtime":1662620045686,"results":"212","hashOfConfig":"130"},{"size":706,"mtime":1661849271238,"results":"213","hashOfConfig":"130"},{"size":885,"mtime":1663040187632,"results":"214","hashOfConfig":"130"},{"size":611,"mtime":1661509757305,"results":"215","hashOfConfig":"130"},{"size":583,"mtime":1661509757304,"results":"216","hashOfConfig":"130"},{"size":760,"mtime":1661509757294,"results":"217","hashOfConfig":"130"},{"size":3747,"mtime":1663052129958,"results":"218","hashOfConfig":"130"},{"size":866,"mtime":1661509757289,"results":"219","hashOfConfig":"130"},{"size":1323,"mtime":1661509757292,"results":"220","hashOfConfig":"130"},{"size":944,"mtime":1661509757290,"results":"221","hashOfConfig":"130"},{"size":664,"mtime":1661509757283,"results":"222","hashOfConfig":"130"},{"size":574,"mtime":1661509757286,"results":"223","hashOfConfig":"130"},{"size":574,"mtime":1661509757287,"results":"224","hashOfConfig":"130"},{"size":664,"mtime":1661509757282,"results":"225","hashOfConfig":"130"},{"size":31725,"mtime":1661509757309,"results":"226","hashOfConfig":"130"},{"size":11445,"mtime":1666581769179,"results":"227","hashOfConfig":"130"},{"size":69,"mtime":1663923487943,"results":"228","hashOfConfig":"130"},{"size":88,"mtime":1657709847680,"results":"229","hashOfConfig":"130"},{"size":224,"mtime":1655467295875,"results":"230","hashOfConfig":"130"},{"size":8711,"mtime":1661509757311,"results":"231","hashOfConfig":"130"},{"size":7942,"mtime":1662001546798,"results":"232","hashOfConfig":"130"},{"size":2242,"mtime":1661509757279,"results":"233","hashOfConfig":"130"},{"size":8309,"mtime":1666581017940,"results":"234","hashOfConfig":"130"},{"size":3044,"mtime":1655168677819,"results":"235","hashOfConfig":"130"},{"size":1390,"mtime":1662107565694,"results":"236","hashOfConfig":"130"},{"size":3907,"mtime":1662111155827,"results":"237","hashOfConfig":"130"},{"size":38867,"mtime":1666601191698,"results":"238","hashOfConfig":"130"},{"size":1232,"mtime":1657622269661,"results":"239","hashOfConfig":"130"},{"size":17723,"mtime":1666349008617,"results":"240","hashOfConfig":"130"},{"size":3569,"mtime":1660200016614,"results":"241","hashOfConfig":"130"},{"size":6884,"mtime":1666350222203,"results":"242","hashOfConfig":"130"},{"size":12945,"mtime":1666005241949,"results":"243","hashOfConfig":"130"},{"size":9628,"mtime":1663582942568,"results":"244","hashOfConfig":"130"},{"size":1201,"mtime":1658485132416,"results":"245","hashOfConfig":"130"},{"size":2508,"mtime":1658483803920,"results":"246","hashOfConfig":"130"},{"size":2695,"mtime":1658483746593,"results":"247","hashOfConfig":"130"},{"size":2127,"mtime":1666587930270,"results":"248","hashOfConfig":"130"},{"size":1250,"mtime":1666582178312,"results":"249","hashOfConfig":"130"},{"size":4252,"mtime":1665209998480,"results":"250","hashOfConfig":"130"},{"size":2678,"mtime":1663579815395,"results":"251","hashOfConfig":"130"},{"size":951,"mtime":1661849271242,"results":"252","hashOfConfig":"130"},{"size":899,"mtime":1661509757306,"results":"253","hashOfConfig":"130"},{"size":4251,"mtime":1663035379306,"results":"254","hashOfConfig":"130"},{"size":5765,"mtime":1661509757472,"results":"255","hashOfConfig":"130"},{"size":3836,"mtime":1661509757322,"results":"256","hashOfConfig":"130"},{"size":6440,"mtime":1665993313411,"results":"257","hashOfConfig":"130"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"261"},"14hz5vu",{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"261"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"261"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"261"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"261"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"261"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"261"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"261"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"261"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"261"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"261"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"261"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"261"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"261"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"261"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"261"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"261"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"261"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"261"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"261"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"261"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"261"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"261"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"261"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"261"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"261"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"261"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"261"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"261"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"261"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"261"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"261"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"261"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"261"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"261"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"261"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"261"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"261"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"261"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"261"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"261"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"261"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"261"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"261"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"261"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"261"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"261"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"261"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"261"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"261"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"261"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"261"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"261"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"261"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"261"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"261"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"261"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"261"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"261"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"261"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":47,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"261"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"261"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"261"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"261"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"261"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"261"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"261"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"261"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"261"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"261"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"261"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"261"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"261"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"261"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"261"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"261"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"261"},"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\index.js",["591"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n",["592","593"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\App.js",["594"],"import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\nimport Home from './pages/home/index'\n\nimport MaxMinReturn from './utils/maxminreturn/MaxMinReturn'\n\nimport EditPetInfo from './pages/editPetInfo/index'\nimport DoctorAddPet from './pages/doctorAddPet/index'\n//登录部分\nimport SignIn from './pages/signIn/index'\nimport ForgotPassword from './pages/forgotPassword/index'\nimport ResetPassword from './pages//resetPassword/index'\nimport ScanCodeLogin from './pages/scanCodeLogin/index'\n//邮箱注册的整体部分\nimport VetPrifile from './pages/signUpVetProfile'\nimport JoinOrganizationByOption from './pages/joinOrganizationByOption/index'\nimport VerifyEmail from './pages/signUpVerifyEmail/index'\nimport NewOrganization from './pages/newOrganization/index'\nimport InviteTeam from './pages/inviteTeam/index'\n//options\nimport Help from './pages/help/index'\nimport Unassigned from './pages/unassigned/index'\nimport Settings from './pages/settings/index'\nimport AdvancedSettings from './pages/advancedSettings/index'\nimport PetAndParents from './pages/petAndParents/index'\nimport EditParent from './pages/editParent/index'\nimport MyAccount from './pages/myAccount/index'\nimport Veterinarians from './pages/admin_VetProfile/index'\nimport AddDevice from './pages/addDevice/index'\nimport ConnectWorkplace from './pages/connectWorkplace'\nimport NewOrg from './pages/newOrg/index'\nimport Team from './pages/team/index'\nimport MainBody from './pages/mainbody'\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n\n\n          <Route exact path=\"/page7\" component={MaxMinReturn} />\n          <Route exact path=\"/page9\" component={EditPetInfo} />\n          <Route exact path=\"/MainBody\" component={MainBody} />\n          <Route exact path=\"/page11\" component={SignIn} />\n          <Route exact path=\"/user/login/forgotPassword\" component={ForgotPassword} />\n          <Route exact path=\"/user/login/resetPassword\" component={ResetPassword} />\n          <Route exact path=\"/user/login/scanCodeLogin\" component={ScanCodeLogin} />\n\n          <Route exact path=\"/uesr/logUp/VetPrifile\" component={VetPrifile} />\n          <Route exact path=\"/uesr/logUp/JoinOrganizationByOption\" component={JoinOrganizationByOption} />\n          <Route exact path=\"/uesr/logUp/VerifyEmail\" component={VerifyEmail} />\n          <Route exact path=\"/uesr/logUp/NewOrganization\" component={NewOrganization} />\n          <Route exact path=\"/uesr/logUp/InviteTeam\" component={InviteTeam} />\n\n\n          <Route exact path=\"/pet/doctorAddPet\" component={DoctorAddPet} />\n          <Route exact path=\"/menuOptions/help\" component={Help} />\n          <Route exact path=\"/menuOptions/unassigned\" component={Unassigned} />\n          <Route exact path=\"/menuOptions/settings\" component={Settings} />\n          <Route exact path=\"/menuOptions/advancedsettings\" component={AdvancedSettings} />\n          <Route exact path=\"/menuOptions/petAndParents\" component={PetAndParents} />\n          <Route exact path=\"/menuOptions/editParent\" component={EditParent} />\n          <Route exact path=\"/MyAccount\" component={MyAccount} />\n          <Route exact path=\"/menuOptions/veterinarians\" component={Veterinarians} />\n          <Route exact path=\"/menuOptions/AddDevice\" component={AddDevice} />\n          <Route exact path=\"/menuOptions/ConnectWorkplace\" component={ConnectWorkplace} />\n          <Route exact path=\"/menuOptions/NewOrg\" component={NewOrg} />\n          <Route exact path=\"/menuOptions/Team\" component={Team} />\n\n        </Switch>\n      </HashRouter>\n    )\n  }\n}\nexport default App\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx",["595"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  message\r\n} from 'antd';\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage'\r\nimport { px, mTop, win, timerFun } from '../../utils/px'\r\nimport MinClose from '../../utils/minClose/MinClose';\r\nimport { version } from '../../utils/appversion';\r\nimport logo from '../../assets/images/mella.png'\r\nimport './index.less';\r\n\r\nlet storage = window.localStorage;\r\n//定义变量:连续点击了几次logo\r\nlet logoClick = 0;\r\n//定义变量:点击logo的时间\r\nlet logoTime = 0;\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    imgurl: '',\r\n    size: { width: 0, height: 0 }\r\n  }\r\n  componentDidMount() {\r\n    timerFun()\r\n    ipcRenderer.send('close-loading-window', 1)\r\n    ipcRenderer.send('small', win())\r\n    storage.measurepatientId = '';\r\n    temporaryStorage.logupVetInfo = {}\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  _openUtils = () => {\r\n    console.log('点击来了', logoClick);\r\n    if (new Date() - logoTime > 500) {\r\n      logoClick = 0;\r\n      logoTime = new Date();\r\n\r\n    } else {\r\n      logoClick++;\r\n      logoTime = new Date();\r\n      if (logoClick >= 8) {\r\n        logoClick = 0;\r\n        ipcRenderer.send('openDevTools', true)\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"home\">\r\n        <div className=\"daohang\" style={{ paddingTop: px(10), paddingRight: px(20) }}>\r\n          <MinClose />\r\n        </div>\r\n        <div className='flex refresh' style={{ alignItems: 'flex-end', paddingRight: px(20) }}>\r\n          <div className='flex' style={{ flexDirection: 'row', paddingTop: px(20), paddingRight: px(18), color: '#700B33', cursor: 'pointer' }}>\r\n            V{version}\r\n          </div>\r\n        </div>\r\n        <div className=\"heard\" >\r\n          <div className=\"logo\"\r\n            onClick={this._openUtils}\r\n          >\r\n            <img src={logo} alt=\"\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"button\" style={{ marginBottom: px(25) }}>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={() => { this.props.history.push('/page11') }}\r\n            className=\"siginInBtn\"\r\n          >\r\n            Sign In\r\n          </Button>\r\n        </div>\r\n        <p className=\"text\" style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>New to Mella?</p>\r\n        <div className=\"create\" style={{ marginBottom: mTop(20), marginTop: px(25) }}>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\r\n            className=\"createBtn\"\r\n          >\r\n            Create an Account\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx",["596","597","598","599","600","601"],"import React, { Component } from \"react\";\r\nimport { Input, message, Spin } from \"antd\";\r\nimport {\r\n  createFromIconfontCN,\r\n  LoadingOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\r\nimport dui from \"./../../assets/images/dui.png\";\r\nimport back_white from \"./../../assets/img/back-white.png\";\r\nimport back_hui from \"./../../assets/img/back-hui.png\";\r\n\r\nimport { getLoginQRcode, loginWithQRcode, mellaLogin } from \"../../api\"\r\n\r\nimport temporaryStorage from \"../../utils/temporaryStorage\";\r\nimport { px, win } from \"../../utils/px\";\r\nimport MinClose from \"./../../utils/minClose/MinClose\";\r\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\r\nimport { addLogin } from \"../../utils/axios\";\r\n\r\nimport \"./index.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\r\n});\r\nlet num = 0;\r\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\r\nlet isSign = true;\r\n\r\nexport default class SignIn extends Component {\r\n  state = {\r\n    isRemember: false,\r\n    email: \"\",\r\n    hash: \"\",\r\n    isCode: false,\r\n    baseUrl: \"\",\r\n    QRToken: \"\",\r\n    isExpired: false, //二维码是否过期\r\n    spin: false,\r\n    isLoadQrCode: false, //是否正在加载二维码\r\n  };\r\n  componentDidMount() {\r\n    isSign = true;\r\n    storage.lastOrganization = \"\";\r\n    //通知main.js渲染一个small窗口\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.send(\"small\", win());\r\n    //如果有保存的账号密码则展示出来\r\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\r\n      let data = storage.signIn;\r\n      data = JSON.parse(data);\r\n      this.setState({\r\n        email: data.email,\r\n        hash: data.hash,\r\n        QRToken: \"\",\r\n      });\r\n    }\r\n    //是否勾选了保持登录\r\n    if (storage.isRemember !== undefined) {\r\n      let isRemember = storage.isRemember === \"true\" ? true : false;\r\n      this.setState({\r\n        isRemember,\r\n      });\r\n    }\r\n    // 监听分辨率是否改变\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    //清空本地的注册界面的信息\r\n    temporaryStorage.logupVetInfo = {};\r\n    this._getQRCode();\r\n  }\r\n  componentWillUnmount() {\r\n    isSign = false;\r\n    this.timer && clearInterval(this.timer);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    // ipcRenderer.send('small')\r\n    ipcRenderer.send(\"small\", win());\r\n    this.setState({});\r\n  };\r\n  _getQRCode = () => {\r\n    this.setState({\r\n      isLoadQrCode: true,\r\n    });\r\n    num = 0;\r\n\r\n    getLoginQRcode()\r\n      // addQRCode()\r\n      .then((res) => {\r\n        message.destroy();\r\n\r\n        console.log(\"---获取二维码\", res);\r\n        if (res.flag === true) {\r\n          this.setState({\r\n            baseUrl: res.data.QRcode,\r\n            QRToken: res.data.QRToken,\r\n            isLoadQrCode: false,\r\n          });\r\n          this.timer = setInterval(() => {\r\n            if (!isSign) {\r\n              this.timer && clearInterval(this.timer);\r\n            }\r\n            num++;\r\n            console.log(\"lunxin\");\r\n            this._polling();\r\n\r\n            if (num > 280) {\r\n              //超过280秒则去显示二维码过期，要重新获取\r\n              this.setState({\r\n                isExpired: true,\r\n              });\r\n              num = 0;\r\n              this.timer && clearInterval(this.timer);\r\n            }\r\n          }, 1000);\r\n        } else {\r\n          message.error(\"Failed to obtain QR code\", 10);\r\n          this.setState({\r\n            isLoadQrCode: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.error(\"Failed to obtain QR code\", 10);\r\n        this.setState({\r\n          isLoadQrCode: false,\r\n        });\r\n        console.log(err);\r\n      });\r\n  };\r\n  //轮询\r\n  _polling = () => {\r\n\r\n    loginWithQRcode(this.state.QRToken)\r\n      .then((res) => {\r\n        console.log(\"轮询结果：\", res);\r\n        if (res.flag === true) {\r\n          switch (res.code) {\r\n            case 10001:\r\n              console.log(\"未扫码\");\r\n\r\n              break;\r\n\r\n            case 11033:\r\n              console.log(\"扫码未点击登录\");\r\n              this.timer && clearInterval(this.timer);\r\n              temporaryStorage.QRToken = this.state.QRToken;\r\n              let { name, url } = res.data;\r\n              this.props.history.replace({\r\n                pathname: \"/user/login/scanCodeLogin\",\r\n                params: { name, url },\r\n              });\r\n\r\n              break;\r\n\r\n            case 11023:\r\n              console.log(\"过期\");\r\n              this.setState({\r\n                isExpired: true,\r\n              });\r\n              num = 0;\r\n              this.timer && clearInterval(this.timer);\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        console.log(\"code\", res.code);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //登录接口\r\n  _continue = () => {\r\n    const { email, hash, isRemember } = this.state;\r\n\r\n    message.destroy();\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: \"1\",\r\n    };\r\n    if (email === \"\") {\r\n      message.error(\"please input your email\");\r\n      return;\r\n    }\r\n    if (hash === \"\") {\r\n      message.error(\"please input your password\");\r\n      return;\r\n    }\r\n    console.log(params);\r\n    this.setState({\r\n      spin: true,\r\n    });\r\n    mellaLogin(params)\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({\r\n          spin: false,\r\n        });\r\n        if (res.status && res.status === 404) {\r\n          message.error(\"system error\");\r\n          return;\r\n        }\r\n        if (res.status === 500) {\r\n          message.error(\"system error\");\r\n\r\n          return;\r\n        }\r\n        if (res.code === 10001 && res.msg === \"账号错误\") {\r\n          message.error(\"Account error\");\r\n          return;\r\n        }\r\n        if (res.code === 10002 && res.msg === \"密码错误\") {\r\n          message.error(\"wrong password\");\r\n          return;\r\n        }\r\n        if (\r\n          res.code === 0 &&\r\n          res.msg === \"success\" &&\r\n          res.success.roleId === 1\r\n        ) {\r\n          message.error(\r\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\r\n            10\r\n          );\r\n          return;\r\n        }\r\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\r\n          message.error(\r\n            \"The account is restricted, please contact the management\",\r\n            10\r\n          );\r\n          return;\r\n        }\r\n        if (res.code === 10003) {\r\n          message.error(\"The password or email is incorrect, please re-enter\");\r\n          return;\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === \"success\") {\r\n          this.timer && clearInterval(this.timer);\r\n          console.log(\"账号密码正确，登录进去了\");\r\n          let { userWorkplace, lastOrganization, token } = res.success;\r\n          storage.token = token;\r\n          storage.userId = \"\";\r\n          let data = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n          };\r\n          data = JSON.stringify(data);\r\n          if (isRemember === true) {\r\n            storage.signIn = data;\r\n          } else {\r\n            storage.signIn = \"\";\r\n          }\r\n          storage.saveSign = data;\r\n\r\n          storage.userId = res.success.userId;\r\n          storage.roleId = res.success.roleId;\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = \"\";\r\n          storage.defaultCurrent = \"\";\r\n\r\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\r\n          if (res.success.lastWorkplaceId) {\r\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\r\n          } else {\r\n            storage.lastWorkplaceId = \"\";\r\n          }\r\n\r\n          if (res.success.lastOrganization) {\r\n            storage.lastOrganization = res.success.lastOrganization;\r\n          } else {\r\n            storage.lastOrganization = \"\";\r\n          }\r\n\r\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace);\r\n            let connectionKey = \"\";\r\n            for (let i = 0; i < userWorkplace.length; i++) {\r\n              const element = userWorkplace[i];\r\n              if (element.organizationEntity) {\r\n                if (\r\n                  element.organizationEntity.organizationId === lastOrganization\r\n                ) {\r\n                  if (element.organizationEntity.connectionKey) {\r\n                    connectionKey = element.organizationEntity.connectionKey;\r\n                  }\r\n                  if (element.roleId) {\r\n                    console.log(element.roleId);\r\n                    storage.roleId = element.roleId;\r\n                  }\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            console.log(\"----------key值为：\", connectionKey);\r\n            storage.connectionKey = connectionKey;\r\n          } else {\r\n            storage.userWorkplace = \"\";\r\n            storage.connectionKey = \"\";\r\n          }\r\n\r\n          this.props.history.push(\"/MainBody\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          spin: false,\r\n        });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  _signUp = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\r\n  };\r\n  _change = () => {\r\n    let { isCode } = this.state;\r\n    message.destroy();\r\n    if (isCode === false) {\r\n      this._getQRCode();\r\n    } else {\r\n      this.timer && clearInterval(this.timer);\r\n      num = 0;\r\n      this.setState({\r\n        isExpired: false,\r\n      });\r\n    }\r\n    this.setState({ isCode: !this.state.isCode });\r\n  };\r\n  //二维码界面\r\n  _qrCode = () => {\r\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\r\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\r\n\r\n    if (!isExpired) {\r\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n      return (\r\n        <div className=\"qrcode\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${baseUrl}`}\r\n            alt=\"\"\r\n            style={{\r\n              width: px(120),\r\n              height: px(120),\r\n              opacity: imgOpacity,\r\n            }}\r\n          />\r\n          {isLoadQrCode && (\r\n            // true &&\r\n\r\n            <div className=\"err\">\r\n              <Spin\r\n                indicator={antIcon}\r\n                tip=\"Loading...\"\r\n                style={{ fontSize: 16, color: \"#e1206d\" }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"qrcode\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${baseUrl}`}\r\n            alt=\"\"\r\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\r\n          />\r\n\r\n          <div className=\"err\">\r\n            <div className=\"errText\">QR code has expired</div>\r\n            <div\r\n              className=\"btn\"\r\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\r\n              onClick={this.refresh}\r\n            >\r\n              Refresh\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  //点击refresh按钮\r\n  refresh = () => {\r\n    this.setState({\r\n      isExpired: false,\r\n    });\r\n    num = 0;\r\n    this._getQRCode();\r\n  };\r\n  beforeDiv = () => {\r\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n  afterDiv = () => {\r\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n\r\n  render() {\r\n    let { isCode, baseUrl } = this.state;\r\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\r\n    return (\r\n      <div id=\"signIn\">\r\n        <div\r\n          className=\"heaed\"\r\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\r\n        >\r\n          <div className=\"l\">\r\n            <MouseDiv\r\n              className=\"mouseDiv\"\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.push(\"/\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n            <MinClose />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"logo\">\r\n            <img src={mellaLogo} alt=\"\" />\r\n          </div>\r\n          <div className=\"body\" style={{ position: \"relative\" }}>\r\n            <div\r\n              className=\"text\"\r\n            // style={{\r\n            //   fontSize: px(28),\r\n            //   marginBottom: px(20),\r\n            //   marginTop: px(30),\r\n            // }}\r\n            >\r\n              Please enter email <br />\r\n              and password\r\n            </div>\r\n\r\n            <div className=\"inpF\">\r\n              <Input\r\n                className=\"inp\"\r\n                // style={{\r\n                //   width: px(310),\r\n                //   height: px(45),\r\n                //   fontSize: px(18),\r\n                // }}\r\n                value={this.state.email}\r\n                placeholder=\"rachel@friends.com\"\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  let str = item.target.value;\r\n                  this.setState({\r\n                    email: str,\r\n                  });\r\n                }}\r\n              />\r\n              <Input.Password\r\n                className=\"inp\"\r\n                // style={{\r\n                //   width: px(310),\r\n                //   height: px(45),\r\n                //   marginLeft: px(6),\r\n                //   marginBottom: px(18),\r\n                //   fontSize: px(18),\r\n                // }}\r\n                visibilityToggle={false}\r\n                value={this.state.hash}\r\n                placeholder=\"********\"\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  let str = item.target.value;\r\n                  this.setState({\r\n                    hash: str,\r\n                  });\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  if (e.keyCode === 13) {\r\n                    this._continue();\r\n                  }\r\n                }}\r\n              />\r\n\r\n              <div\r\n                className=\"text\"\r\n              // style={{\r\n              //   fontSize: px(28),\r\n              //   lineHeight: px(1),\r\n              //   marginTop: px(10),\r\n              //   marginBottom: px(20),\r\n              // }}\r\n              >\r\n                {\"Or scan QR Code\"}\r\n              </div>\r\n            </div>\r\n\r\n            {this._qrCode()}\r\n            <div\r\n              className=\"littleText flex\"\r\n              style={{\r\n                fontSize: px(12),\r\n                marginTop: px(10),\r\n                marginBottom: px(10),\r\n              }}\r\n            >\r\n              Go to your Mella mobile app to access\r\n              <br />\r\n              the QR scanner\r\n            </div>\r\n            <div className=\"stay\">\r\n              <div className=\"remember\">\r\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\r\n                <div\r\n                  className=\"box\"\r\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\r\n                  onClick={() => {\r\n                    let { isRemember } = this.state;\r\n                    this.setState({\r\n                      isRemember: !isRemember,\r\n                    });\r\n                    storage.isRemember = !isRemember;\r\n                  }}\r\n                >\r\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"forgot\"\r\n                style={{ fontSize: px(16) }}\r\n                onMouseDown={() => {\r\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\r\n                  forget[0].style.opacity = 0.5;\r\n                }}\r\n                onMouseUp={() => {\r\n                  document.querySelectorAll(\r\n                    \"#signIn .forgot\"\r\n                  )[0].style.opacity = 1;\r\n                  if (this.state.email) {\r\n                    temporaryStorage.forgotPassword_email = this.state.email;\r\n                  }\r\n\r\n                  this.props.history.push(\"/user/login/forgotPassword\");\r\n                }}\r\n              >\r\n                Forgot?\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"button11\"\r\n          style={{ backgroundColor: \"#E7E7E7\" }}\r\n        >\r\n          <div\r\n            className=\"btn1 flex\"\r\n            onClick={this._continue}\r\n          // style={{ height: px(40) }}\r\n          >\r\n            <p>{`CONTINUE`}</p>\r\n          </div>\r\n\r\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\r\n            <p style={{ fontSize: px(17) }}>\r\n              Do not have an account?{\" \"}\r\n              <a href=\"#\" onClick={this._signUp}>\r\n                Sign Up\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.spin && (\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n              <LoadingOutlined\r\n                style={{ fontSize: 30, color: \"#fff\", marginTop: px(-30) }}\r\n              />\r\n            </div>\r\n            <p>loading...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx",["602","603","604","605","606","607","608","609","610","611","612","613","614","615","616"],"import React, { Component } from 'react'\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\nimport { createFromIconfontCN, ExclamationCircleOutlined } from '@ant-design/icons';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport selectphoto from '../../assets/images/sel.png'\nimport Close from '../../assets/img/close.png'\nimport nextImg from '../../assets/img/nextImg.png'\nimport dui from '../../assets/images/dui.png'\nimport female from '../../assets/images/female.png'\nimport male from '../../assets/images/male.png'\n\nimport { mTop, px, win } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport electronStore from '../../utils/electronStore';\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\nimport Button from '../../utils/button/Button';\nimport Avatar from '../../components/avatar/Avatar';\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\n\nimport { connect } from 'react-redux';\nimport { petDetailInfoFun } from '../../store/actions';\nimport moment from 'moment';\n\nimport {\n  checkPatientId,\n  getPetInfoByPatientIdAndPetId,\n  updatePetInfo,\n  deletePetByPetId,\n  updatePetInfo1\n} from '../../api/mellaserver/pet';\nimport {\n  listDoctorsByAdmin\n} from '../../api/mellaserver/organization';\n\nimport './index.less';\nimport _ from 'lodash';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nlet errPatientId = ''\nclass EditPetInfo extends Component {\n  state = {\n    dogImg: dog,\n    catImg: cat,\n    otherImg: other,\n    selectWZ: '',\n    closebgc: '',\n    minbgc: '',\n    closeColor: '',\n    api: '',\n    id: '',\n    seleceID: '',//医生id\n    petSpecies: 0,\n    unit: 1,\n    gender: 0,\n    isMix: false,\n    imageId: -1,\n    imgurl: '',\n    breedArr: [],\n    petSpeciesBreedId: '',\n    dogData: [],\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\n    patientId: '',\n    petName: '',\n    petId: '',\n    lastName: '',\n    firstName: '',\n    breedName: '',\n    initpetName: '',\n    initpetId: '',\n    initlastName: '',\n    initfirstName: '',\n    initbreedName: '',\n    spin: false,\n    dogBreed: [],\n    catBreed: [],\n    oldPatientId: '',\n    searchBreed: '',\n    selectBreedJson: {},\n    confirmSelectBreedJson: {},\n    selectBreed: false,\n    doctorArr: [],\n    selectUser: false,\n    selectUserJson: {},\n    selectUserId: -1,\n    confirmSelectUserJson: {},\n    petUrl: '',\n    deletePetModalVisible: false,\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    let { petDetailInfo } = this.props\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\n    if (!isWalkIn) {\n      //判断是医生诊断宠物还是用户私有宠物\n      if (this.props.history.location?.pet) {\n        this.setState({\n          patientId: this.props.history.location?.pet?.patientId,\n          petId: this.props.history.location.pet?.petId,\n          oldPatientId: this.props.history.location?.pet?.patientId,\n          breedName: this.props.history.location?.pet?.breedName\n        }, () => {\n          this._getPetInfo();\n        })\n      } else {\n        if (!patientId || patientId === 'unknown') {\n          patientId = null\n        }\n        this.setState({\n          patientId,\n          petId,\n          oldPatientId: patientId,\n          breedName: breedName\n        }, () => {\n          this._getPetInfo();\n        })\n      }\n    }\n    let dogBreed = electronStore.get('dogBreed') || []\n    let catBreed = electronStore.get('catBreed') || []\n    this.setState({\n      dogBreed,\n      catBreed\n    })\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //获取工作场所\n    // this.getUser()\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    this.setState({\n\n    })\n  }\n  //获取工作场所\n  getUser = () => {\n    let params = {\n      doctorId: storage.userId,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listDoctorsByAdmin(storage.lastOrganization, params)\n      .then(res => {\n        if (res.flag === true && res.code === 20000) {\n          let data = []\n          for (let i = 0; i < res.data.length; i++) {\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\n            let json = {\n              insertedAt: createTime,\n              breedName: `${lastName} ${firstName}`,\n              petSpeciesBreedId: userId,\n              email,\n              birthday,\n              isLimit,\n              isDeleted,\n              phone,\n              url,\n              firstName, lastName, roleId\n            }\n            data.push(json)\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            doctorArr: data,\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  //获取宠物详情信息\n  _getPetInfo = () => {\n    let { patientId, petId } = this.state\n    let datas = {\n      doctorId: storage.userId,\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.org = storage.lastOrganization\n    }\n    if (patientId && patientId !== 'undefined') {\n      datas.patientId = patientId\n    }\n    if (petId) {\n      datas.petId = petId\n    }\n    this.setState({\n      spin: true\n    })\n    getPetInfoByPatientIdAndPetId(datas)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          let datas = []\n          for (let i = 0; i < res.data.length; i++) {\n            if (res.data[i].petId === this.state.petId) {\n              datas = res.data[i]\n              break\n            }\n          }\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId } = datas\n          if (isMix !== true) {\n            isMix = false\n          }\n          lastName = isNull(lastName)\n          firstName = isNull(firstName)\n          let confirmSelectBreedJson = {}\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\n            confirmSelectBreedJson = {\n              name: breedName,\n              petSpeciesBreedId\n            }\n          }\n          url = isNull(url)\n          if (birthday != null) {\n            birthday = moment(birthday).format('MMMM D, YYYY')\n          }\n          else {\n            birthday = ''\n          }\n          if (gender === null || isNaN(gender) || `${gender}` === 'null' || `${gender}` === 'NaN') {\n            gender = 0\n          }\n          if (weight) {\n            weight = (weight * 2.2046).toFixed(1)\n          } else {\n            weight = ''\n          }\n          this.setState({\n            petId,\n            petName,\n            lastName,\n            firstName,\n            breedName,\n            isMix,\n            birthday,\n            weight,\n            imgurl: url,\n            gender,\n            initpetName: petName,\n            initlastName: lastName,\n            initfirstName: firstName,\n            confirmSelectBreedJson,\n            petSpeciesBreedId\n          })\n          // switch (petSpeciesBreedId) {\n          //   case 1: this.selectWZ('cat'); break;\n          //   case 2: this.selectWZ('dog'); break;\n\n          //   default: this.selectWZ('other'); break;\n          // }\n\n        } else {\n          message.destroy()\n          message.error('data load failed')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        console.log(err);\n        message.destroy()\n        message.error('data load failed')\n      })\n    const isNull = (value) => {\n      if (value === null || isNaN(value) || `${value}` === 'null' || `${value}` === 'NaN') {\n        return ''\n      } else {\n        return value\n      }\n    }\n  }\n  /**------------------顶部start------------------------ */\n  _close = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('关闭程序');\n    ipcRenderer.send('window-close')\n  }\n  _min = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('最小化程序');\n    ipcRenderer.send('window-min')\n    this.setState({\n      minbgc: '',\n    })\n  }\n  _minMove = () => {\n\n    this.setState({\n      minbgc: 'rgb(211, 205, 205)'\n    })\n  }\n  _minLeave = () => {\n    this.setState({\n      minbgc: ''\n    })\n  }\n  _closeMove = () => {\n    this.setState({\n      closeColor: 'red',\n      closebgc: '#fff'\n    })\n  }\n  _closeLeave = () => {\n    this.setState({\n      closeColor: '#fff',\n      closebgc: ''\n    })\n  }\n  //选择宠物默认品种\n  selectWZ = (val) => {\n    let { catBreed, dogBreed } = this.state\n    if (this.state.selectWZ !== val) {\n      switch (val) {\n        case 'dog':\n          this.setState({\n            catImg: cat,\n            dogImg: redDog,\n            otherImg: other,\n            selectWZ: val,\n            breedArr: [].concat(dogBreed),\n            confirmSelectBreedJson: {\n              name: \"defaultdog\",\n              petSpeciesBreedId: 12001\n            }\n          })\n\n          break;\n\n        case 'cat':\n          this.setState({\n            catImg: redCat,\n            dogImg: dog,\n            otherImg: other,\n            selectWZ: val,\n            breedArr: [].concat(catBreed),\n            confirmSelectBreedJson: {\n              name: \"defaultcat\",\n              petSpeciesBreedId: 11001\n            }\n          })\n\n          break;\n\n        case 'other':\n          this.setState({\n            catImg: cat,\n            dogImg: dog,\n            otherImg: redother,\n            selectWZ: val,\n            breedArr: [],\n            confirmSelectBreedJson: {\n              name: \"defaultother\",\n              petSpeciesBreedId: 13001\n            }\n          })\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n  //宠物详情第一列\n  _petSpecies = () => {\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\n\n    this.avatar = imgurl ? imgurl : selectphoto\n\n    return (\n      <div className=\"petSpecies\"\n        style={{ marginTop: mTop(30) }}\n      >\n        <div className=\"l\">\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\n          <div className=\"selectSpecies\">\n            <ul>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog'\n\n                    onClick={() => { this.selectWZ('dog') }}>\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Dog\n                </div>\n              </li>\n              <li>\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Cat\n                </div>\n              </li>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Other\n                </div>\n              </li>\n\n            </ul>\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <Avatar\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n\n              }}\n              getAllInfo={(val) => {\n                if (val.url) {\n                  this.setState({\n                    petUrl: val.url\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物详情第二列\n  _petName = () => {\n    let birthday = this.state.birthday\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\n        <div className=\"l\">\n          <p >Pet Name</p>\n          <div className=\"infoInput\">\n            <Input\n              bordered={false}\n              value={this.state.initpetName}\n              onChange={(item) => {\n                this.setState({\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\n                  initpetName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <p >Pet Birthday</p>\n          <div className=\"infoInput\" >\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\n              document.getElementById('calendar').style.display = 'block'\n            }}>{this.state.birthday}</p>\n            <div className=\"calendar\" id=\"calendar\">\n              <Calendar\n                fullscreen={false}\n                headerRender={({ value, type, onChange, onTypeChange }) => {\n                  const start = 0;\n                  const end = 12;\n                  const monthOptions = [];\n\n                  const current = value.clone();\n                  const localeData = value.localeData();\n                  const months = [];\n                  for (let i = 0; i < 12; i++) {\n                    current.month(i);\n                    months.push(localeData.monthsShort(current));\n                  }\n\n                  for (let index = start; index < end; index++) {\n                    monthOptions.push(\n                      <Select.Option className=\"month-item\" key={`${index}`}>\n                        {months[index]}\n                      </Select.Option>\n                    );\n                  }\n                  const month = value.month();\n\n                  const year = value.year();\n                  const options = [];\n                  for (let i = year - 10; i < year + 10; i += 1) {\n                    options.push(\n                      <Select.Option key={i} value={i} className=\"year-item\">\n                        {i}\n                      </Select.Option>\n                    );\n                  }\n                  return (\n                    <div style={{ padding: 8 }}>\n                      <Row gutter={8}>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            className=\"my-year-select\"\n                            onChange={(newYear) => {\n                              const now = value.clone().year(newYear);\n                              onChange(now);\n                            }}\n                            value={String(year)}\n                          >\n                            {options}\n                          </Select>\n                        </Col>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            value={String(month)}\n                            onChange={(selectedMonth) => {\n                              const newValue = value.clone();\n                              newValue.month(parseInt(selectedMonth, 10));\n                              onChange(newValue);\n                            }}\n                          >\n                            {monthOptions}\n                          </Select>\n                        </Col>\n                        {/* <Col>\n                          <div className=\"btn\" onClick={() => {\n                            document.getElementById('calendar').style.display = 'none'\n                          }}>\n                            Choose this date\n                          </div>\n\n                        </Col> */}\n                      </Row>\n                    </div>\n                  );\n                }}\n                value={birthdayValue}\n                onSelect={(value) => {\n                  console.log(value);\n                  this.setState({\n                    birthday: moment(value).format('MMMM D, YYYY')\n                  })\n                  document.getElementById('calendar').style.display = 'none'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //宠物详情第三列\n  _ownName = () => {\n    let { confirmSelectUserJson } = this.state\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\n      >\n        <div className=\"l\">\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.patientId}\n              onChange={(item) => {\n                this.setState({\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\n                  intFlog: true\n                })\n                if (item.target.value !== errPatientId) {\n                  message.destroy()\n                }\n              }}\n              onBlur={() => {\n                if (this.state.patientId === this.state.oldPatientId) {\n                  return\n                }\n                if (this.state.patientId === '' && !this.props.history.location?.pet) {\n                  message.error('The pet ID cannot be empty');\n                  return\n                }\n                let params = {\n                  patientId: this.state.patientId ? this.state.patientId : null,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n                checkPatientId(params)\n                  .then(res => {\n                    if (res.flag === false) {\n                      errPatientId = params.patientId\n                      message.error('This patient ID is already occupied, please change to a new one');\n                    } else {\n                      errPatientId = '';\n                      if (!this.props.history.location?.pet && this.state.patientId !== null) {\n                        message.success('This pet ID will work');\n                      }\n                    }\n                  })\n                  .catch(err => {\n                    console.log(err);\n                  })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\n            onClick={() => {\n              this.setState({\n                // selectUser: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //选择宠物详细品种\n  _select = (value, data) => {\n    console.log(value, data);  //value的值为id\n    this.setState({\n      petSpeciesBreedId: value,\n      breedName: data.children\n    })\n  }\n  //品种判断\n  _primaryBreed = () => {\n    let { breedName, confirmSelectBreedJson } = this.state;\n\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\n        <div className=\"l\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              this.setState({\n                selectBreed: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>\n              {\n                confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'\n              }\n            </div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n        <div className=\"r\" >\n          <div className=\"max\">\n            Mix?\n            <div className=\"selected\"\n              onClick={() => this.setState({\n                isMix: !this.state.isMix\n              })}\n            >\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //体重\n  _weight = () => {\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\n    switch (this.state.unit) {\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\n    }\n    switch (this.state.gender) {\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\n    }\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\n        <div className=\"l\">\n          <p >Pet Weight</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.weight}\n              onChange={(item) => {\n\n                this.setState({\n                  weight: item.target.value\n                })\n              }}\n            />\n            <div className=\"ibKg\">\n              <div className=\"ibs\"\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\n                onClick={() => {\n                  if (this.state.unit === 2) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight * 2.2046).toFixed(1)\n                    })\n                  }\n                }}\n              >Ibs</div>\n              <div className=\"kgs\"\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\n                onClick={() => {\n\n                  if (this.state.unit === 1) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight / 2.2046).toFixed(1)\n                    })\n                  }\n                  this.setState({ unit: 2 })\n                }}\n              >kgs</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"r\">\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\n          <div className=\"gender\">\n            <div className=\"selectGender\">\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\n                <div className=\"femaleCiral\"\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 1 })}\n                >\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\n                </div>\n                Female\n              </div>\n              <div className=\"male\" style={{ fontSize: px(18) }}>\n                <div className=\"maleCiral\"\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 0 })}\n                >\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\n                </div>\n                Male\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //确认删除弹窗\n  confirm = () => {\n    Modal.confirm({\n      title: 'Delete',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Deleting this pet also deletes all health records associated with this pet. Are you sure?',\n      centered: 'true',\n      onOk: this.deletPet\n    });\n  };\n  //删除宠物\n  deletPet = () => {\n    let data = {\n      petId: this.state.petId\n    }\n    deletePetByPetId(data)\n      .then(ref => {\n        if (ref.flag === true) {\n          message.success('Successfully Delete');\n          this.props.petDetailInfoFun({});\n          this.props.history.goBack();\n        } else {\n          message.error('Fail to Delete!');\n        }\n      })\n  }\n  //更新宠物信息\n  save = () => {\n    let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson } = this.state\n    if (unit === 1) {\n      weight = (0.45359 * weight).toFixed(2)\n    }\n    let data = {}\n    if (this.state.patientId === this.state.oldPatientId) {\n      data = {\n        petName,\n        weight: parseFloat(weight),\n        gender,\n        firstName,\n        lastName,\n      }\n    } else {\n      data = {\n        petName,\n        weight: parseFloat(weight),\n        gender,\n        firstName,\n        lastName,\n        patientId: this.state.patientId,\n      }\n    }\n    if (birthday) {\n      data.birthday = moment(birthday).format('YYYY-MM-DD')\n    }\n    if (imageId !== -1) {\n      data.imageId = imageId\n    }\n    if (confirmSelectBreedJson.name) {\n      data.breedName = confirmSelectBreedJson.name\n    }\n    if (confirmSelectUserJson.petSpeciesBreedId) {\n      data.userId = confirmSelectUserJson.petSpeciesBreedId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (this.state.patientId === '' && !this.props.history.location?.pet) {\n      message.error('The pet ID cannot be empty');\n    } else {\n      this.setState({\n        spin: true\n      })\n      //判断是用户更新宠物还是医生更新宠物\n      if (this.props.history.location?.pet) {\n        updatePetInfo1(this.props.history.location.userId, petId, data)\n          .then((res) => {\n            this.setState({\n              spin: false\n            })\n            if (res.flag === true) {\n              message.success('update successfully');\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\n            } else {\n              message.error('This patient ID is already occupied, please change to a new one')\n            }\n          })\n          .catch((err) => {\n            message.error(err)\n          })\n      } else {\n        updatePetInfo(petId, data)\n          .then(res => {\n            this.setState({\n              spin: false\n            })\n            if (res.flag === true) {\n              try {\n                if (storage.identity === '3') {\n                  let data = JSON.parse(storage.doctorExam)\n                  data.petName = petName\n                  data.weight = weight\n                  data.gender = gender\n                  data.patientId = this.state.patientId\n                  if (birthday) {\n                    data.age = moment(new Date()).diff(moment(birthday), 'years')\n                  }\n                  if (confirmSelectBreedJson.name) {\n                    data.breed = confirmSelectBreedJson.name\n                  }\n                  if (this.state.petUrl) {\n                    data.url = this.state.petUrl\n                  }\n\n                  storage.doctorExam = JSON.stringify(data)\n                }\n              } catch (error) {\n\n              }\n              this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId, weight: weight })\n              this.props.history.goBack()\n            } else {\n              message.error('This patient ID is already occupied, please change to a new one')\n            }\n          })\n          .catch(err => {\n            this.setState({\n              spin: false\n            })\n          })\n      }\n    }\n  }\n  render() {\n    const { closeColor, closebgc, minbgc } = this.state\n    return (\n      <div id=\"editPetInfo\">\n        {/* 头部 */}\n        <div className=\"close1\">\n          {/* 菜单 */}\n          <div className=\"menu\">\n            <MyIcon\n              type='icon-fanhui4'\n              className=\"icon\"\n              onClick={() => {\n                if (!_.isEmpty(this.props.history.location.userId)) {\n                  this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\n                } else {\n                  this.props.history.goBack()\n                }\n              }}\n            />\n          </div>\n          <div className=\"text\">mella</div>\n          <div className='maxmin'>\n            <div\n              className=\"min iconfont icon-64\"\n              onClick={this._min}\n              onMouseEnter={this._minMove}\n              onMouseLeave={this._minLeave}\n              style={{ backgroundColor: minbgc }}\n            ></div>\n\n            <div\n              className=\"max iconfont icon-guanbi2\"\n              onClick={this._close}\n              onMouseEnter={this._closeMove}\n              onMouseLeave={this._closeLeave}\n              style={{ backgroundColor: closebgc, color: closeColor }}\n            ></div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_top\">\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\n          {this._petSpecies()}\n          {this._petName()}\n          {this._ownName()}\n          {this._primaryBreed()}\n          {this._weight()}\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <div className='deletePet'\n            onClick={this.confirm}\n          >\n            Delete Pet\n          </div>\n          <div className=\"save\"\n            onClick={() => {\n              this.save();\n            }}\n          >Save Changes</div>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n        {\n          this.state.selectBreed && (\n            <SelectPetBreed\n              visible={this.state.selectBreed}\n              destroyOnClose\n              width={400}\n              value={this.state.petSpeciesBreedId}\n              onSelect={(value) => {\n                this.setState({\n                  selectBreed: false,\n                  selectBreedJson: value,\n                  petSpeciesBreedId: value.petSpeciesBreedId,\n                  confirmSelectBreedJson: value,\n                })\n              }}\n              onCancel={() => {\n                this.setState({\n                  selectBreed: false,\n                })\n              }}\n            />\n          )\n        }\n        {\n          this.state.selectUser && (\n            <MyModal\n              visible={this.state.selectUser}\n              element={\n                <div className='myfindOrg' >\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div>\n                      </div>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            selectUser: false,\n                            selectUserJson: {}\n                          })\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div className=\"text\" >Choose Parents</div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search name\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.searchBreed}\n                        onChange={(item) => {\n\n                          this.setState({\n                            searchBreed: item.target.value\n                          })\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\" >\n                    <PhoneBook\n                      listDate={this.state.doctorArr}\n                      confirmSelectBreed={this.state.selectUserId}\n                      selectFun={(val) => {\n                        this.setState({\n                          selectUserJson: val,\n                          selectUserId: val.petSpeciesBreedId\n                        })\n                      }}\n                      searchText={this.state.searchBreed}\n                    />\n                  </div>\n                  <div className=\"foot\">\n                    <Button\n                      text={'Select'}\n                      onClick={() => {\n                        this.setState({\n                          confirmSelectUserJson: this.state.selectUserJson,\n                          selectUser: false\n                        })\n                      }}\n                    />\n                  </div>\n                </div>\n              }\n            />\n          )\n        }\n      </div>\n    )\n  }\n}\nexport default connect(\n  state => ({\n    petDetailInfo: state.petReduce.petDetailInfo\n  }),\n  { petDetailInfoFun }\n)(EditPetInfo)\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx",["617"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../assets/images/errorIcon.png'\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { px, mTop, pX, MTop } from '../../utils/px';\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\n\r\n\r\nimport './index.less';\r\nimport { checkForgetPassword, checkUser, forgetPwd, sendActivateEmail } from '../../api';\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    checkUser(email)\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    forgetPwd(this.state.email)\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n\r\n    checkForgetPassword(this.state.email)\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    sendActivateEmail(this.state.email)\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx",["618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637"],"import React, { Component } from 'react'\r\nimport { Input, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\r\n\r\nimport dog from '../../assets/images/pinkdog.png'\r\nimport cat from '../../assets/images/pinkcat.png'\r\nimport redDog from '../../assets/images/reddog.png'\r\nimport redCat from '../../assets/images/redcat.png'\r\nimport redother from '../../assets/images/redother.png'\r\nimport other from '../../assets/images/other.png'\r\nimport nextImg from '../../assets/img/nextImg.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport dui from '../../assets/images/dui.png'\r\nimport female from '../../assets/images/female.png'\r\nimport male from '../../assets/images/male.png'\r\n\r\nimport electronStore from '../../utils/electronStore';\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport Heard from '../../utils/heard/Heard';\r\nimport Avatar from '../../components/avatar/Avatar';\r\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\r\nimport moment from 'moment';\r\n\r\nimport './index.less';\r\nimport { addDeskPet, checkPatientId, getPetInfoByPatientIdAndPetId, selectBreedBySpeciesId } from '../../api';\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nclass DoctorAddPet extends Component {\r\n  state = {\r\n    dogImg: dog,\r\n    catImg: cat,\r\n    otherImg: other,\r\n    selectWZ: '',\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    api: '',\r\n    id: '',\r\n    seleceID: '',//医生id\r\n    petSpecies: 0,\r\n    unit: 1,\r\n    gender: 0,\r\n    isMix: false,\r\n    imageId: -1,\r\n    imgurl: '',\r\n    catData: [],\r\n    petSpeciesBreedId: '',\r\n    dogData: [],\r\n    breedArr: [],\r\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n    patientId: '',\r\n    petName: '',\r\n    petId: '',\r\n    lastName: '',\r\n    firstName: '',\r\n    breedName: '',\r\n    owner: '',\r\n    intFlog: false,\r\n    spin: false,\r\n    visible: false,\r\n    dogBreed: [],\r\n    catBreed: [],\r\n    searchBreed: '',\r\n    selectBreedJson: {},\r\n    confirmSelectBreedJson: {},\r\n    selectBreed: false,\r\n    isModalVisible: false,\r\n    confirmLoading: false,\r\n    selectBreedVisible: false,\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    let dogBreed = electronStore.get('dogBreed') || []\r\n    let catBreed = electronStore.get('catBreed') || []\r\n    this.setState({\r\n      dogBreed,\r\n      catBreed\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  getBreed = (val) => {\r\n    let data = {}\r\n    switch (val) {\r\n      case 'dog':\r\n        data.speciesId = 2; break;\r\n\r\n      case 'cat':\r\n        data.speciesId = 1; break;\r\n    }\r\n\r\n    selectBreedBySpeciesId(data)\r\n      .then(res => {\r\n        console.log('---', res);\r\n        if (res.code === 0) {\r\n          let arr = []\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName\r\n            }\r\n            arr.push(data)\r\n          })\r\n          if (val === 'dog') {\r\n            this.setState({\r\n              dogBreed: arr\r\n            })\r\n            electronStore.set('dogBreed', arr)\r\n          } else if (val === 'cat') {\r\n            this.setState({\r\n              catBreed: arr\r\n            })\r\n            electronStore.set('catBreed', arr)\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  _getData = (val) => {\r\n    this.setState({\r\n      petSpecies: val,\r\n      breedName: ''\r\n    })\r\n    let data = {\r\n      speciesId: val\r\n    }\r\n    selectBreedBySpeciesId(data)\r\n      .then(res => {\r\n        console.log('--获取品种返回的数据-', res);\r\n        if (res.code === 0) {\r\n          let arr = []\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName\r\n            }\r\n            arr.push(data)\r\n          })\r\n          console.log(arr);\r\n          this.setState({\r\n            breedArr: arr\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n    const { api, id, seleceID } = this.state\r\n    if (e.key === '1') {\r\n      this.props.history.push({ pathname: '/page6', query: { api, id, seleceID } })\r\n    }\r\n    if (e.key === '2') {\r\n      this.props.history.push('/')\r\n    }\r\n\r\n  };\r\n  /**------------------顶部end------------------------ */\r\n  selectWZ = (val) => {\r\n    let { catBreed, dogBreed } = this.state\r\n    switch (val) {\r\n      case 'dog':\r\n        this.setState({\r\n          catImg: cat,\r\n          dogImg: redDog,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n          breedArr: [].concat(dogBreed)\r\n        })\r\n\r\n        break;\r\n\r\n      case 'cat':\r\n        this.setState({\r\n          catImg: redCat,\r\n          dogImg: dog,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n          breedArr: [].concat(catBreed)\r\n        })\r\n\r\n        break;\r\n\r\n      case 'other':\r\n        this.setState({\r\n          catImg: cat,\r\n          dogImg: dog,\r\n          otherImg: redother,\r\n          selectWZ: val,\r\n          breedArr: []\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  _petSpecies = () => {\r\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n    this.avatar = selectphoto\r\n    return (\r\n      <div className=\"petSpecies\"\r\n        style={{ height: mTop(80), }}\r\n      >\r\n        <div className=\"l\">\r\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n          <div className=\"selectSpecies\">\r\n            <ul>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog'\r\n                    onClick={() => { this.selectWZ('dog') }}>\r\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Dog\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Cat\r\n                </div>\r\n              </li>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Other\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _petName = () => {\r\n    let birthday = this.state.birthday\r\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n    return (\r\n      <div className=\"petName\"\r\n        style={{ marginTop: mTop(18) }}\r\n      >\r\n        <div className=\"r\">\r\n          <p >Pet Name</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.petName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  petName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <p >Pet Birthday</p>\r\n          <div className=\"infoInput\" >\r\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n              document.getElementById('calendar').style.display = 'block'\r\n            }}>{this.state.birthday}</p>\r\n            <div className=\"calendar\" id=\"calendar\" style={{ left: px(-50), top: px(-50) }}>\r\n              <Calendar\r\n                fullscreen={false}\r\n                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n                  const start = 0;\r\n                  const end = 12;\r\n                  const monthOptions = [];\r\n                  const current = value.clone();\r\n                  const localeData = value.localeData();\r\n                  const months = [];\r\n                  for (let i = 0; i < 12; i++) {\r\n                    current.month(i);\r\n                    months.push(localeData.monthsShort(current));\r\n                  }\r\n                  for (let index = start; index < end; index++) {\r\n                    monthOptions.push(\r\n                      <Select.Option className=\"month-item\" key={`${index}`}>\r\n                        {months[index]}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  const month = value.month();\r\n                  const year = value.year();\r\n                  const options = [];\r\n                  for (let i = moment(new Date()).year(); i > moment(new Date()).year() - 40; i -= 1) {\r\n                    options.push(\r\n                      <Select.Option key={i} value={i} className=\"year-item\">\r\n                        {i}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div style={{ padding: 8 }}>\r\n                      <Row gutter={8}>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            className=\"my-year-select\"\r\n                            onChange={(newYear) => {\r\n                              const now = value.clone().year(newYear);\r\n                              onChange(now);\r\n                            }}\r\n                            value={String(year)}\r\n                          >\r\n                            {options}\r\n                          </Select>\r\n                        </Col>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            value={String(month)}\r\n                            onChange={(selectedMonth) => {\r\n                              const newValue = value.clone();\r\n                              newValue.month(parseInt(selectedMonth, 10));\r\n                              onChange(newValue);\r\n                            }}\r\n                          >\r\n                            {monthOptions}\r\n                          </Select>\r\n                        </Col>\r\n                      </Row>\r\n                    </div>\r\n                  );\r\n                }}\r\n                value={birthdayValue}\r\n                onSelect={(value) => {\r\n                  console.log(value);\r\n                  this.setState({\r\n                    birthday: moment(value).format('MMMM D, YYYY')\r\n\r\n                  })\r\n                  document.getElementById('calendar').style.display = 'none'\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _ownName = () => {\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}\r\n      >\r\n        <div className=\"l\">\r\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.patientId}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                  intFlog: true\r\n                })\r\n                if (item.target.value !== errPatientId) {\r\n                  message.destroy()\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.patientId === '') {\r\n                  message.error('The pet ID cannot be empty');\r\n                  return\r\n                }\r\n                this.setState({\r\n                  spin: true\r\n                });\r\n                let params = {\r\n                  patientId: this.state.patientId,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n                if (storage.lastOrganization) {\r\n                  params.organizationId = storage.lastOrganization\r\n                }\r\n                checkPatientId(params)\r\n                  .then(res => {\r\n                    if (res.flag === false) {\r\n                      errPatientId = params.patientId;\r\n                      this.setState({\r\n                        isModalVisible: true,\r\n                        spin: false,\r\n                      })\r\n                    } else {\r\n                      errPatientId = '';\r\n                      message.success('This pet ID will work');\r\n                      this.setState({\r\n                        spin: false,\r\n                      })\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    this.setState({\r\n                      spin: false\r\n                    });\r\n                  })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              // this.setState({\r\n              //     selectBreed: true\r\n              // })\r\n            }}\r\n          >\r\n\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{'My Parents'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  _select = (value, data) => {\r\n    console.log(value, data);  //value的值为id\r\n    this.setState({\r\n      petSpeciesBreedId: value,\r\n      breedName: data.children\r\n    })\r\n  }\r\n  //选择宠物品种\r\n  _primaryBreed = () => {\r\n    let { confirmSelectBreedJson } = this.state\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\r\n        <div className=\"l\" >\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              this.setState({\r\n                selectBreedVisible: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\" style={{ paddingTop: mTop(40) }}>\r\n          <div className=\"max\">\r\n            Mix?\r\n            <div className=\"selected\"\r\n              onClick={() => this.setState({\r\n                isMix: !this.state.isMix\r\n              })}\r\n            >\r\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  _weight = () => {\r\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n    switch (this.state.unit) {\r\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n    }\r\n    switch (this.state.gender) {\r\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n    }\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Weight</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.weight}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  weight: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n            <div className=\"ibKg\">\r\n              <div className=\"ibs\"\r\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                onClick={() => {\r\n                  if (this.state.unit === 2) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight * 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                }}\r\n              >Ibs</div>\r\n              <div className=\"kgs\"\r\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                onClick={() => {\r\n\r\n                  if (this.state.unit === 1) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight / 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                  this.setState({ unit: 2 })\r\n                }}\r\n              >kgs</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n          <div className=\"gender\">\r\n            <div className=\"selectGender\">\r\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                <div className=\"femaleCiral\"\r\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 1 })}\r\n                >\r\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                </div>\r\n                Female\r\n              </div>\r\n              <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                <div className=\"maleCiral\"\r\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 0 })}\r\n                >\r\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n                Male\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  handleOk = () => {\r\n    let params = {\r\n      patientId: this.state.patientId,\r\n      doctorId: storage.userId\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.org = storage.lastOrganization\r\n    }\r\n    this.setState({\r\n      confirmLoading: true\r\n    });\r\n    getPetInfoByPatientIdAndPetId(params)\r\n      .then((res) => {\r\n        this.setState({\r\n          confirmLoading: false,\r\n          isModalVisible: false\r\n        });\r\n        if (res.flag === true) {\r\n          let oldList = res.data[0];\r\n          let {\r\n            age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender,\r\n            petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n            h2tLength, torsoLength\r\n          } = oldList;\r\n          const isUnKnow = (val) => {\r\n            if (val) {\r\n              return val\r\n            } else {\r\n              return 'unknown'\r\n            }\r\n          }\r\n          let owner = ''\r\n          patientId = isUnKnow(patientId)\r\n          petName = isUnKnow(petName)\r\n          breedName = isUnKnow(breedName)\r\n          age = isUnKnow(age)\r\n          weight = isUnKnow(weight)\r\n          if (!firstName) {\r\n            firstName = ''\r\n          }\r\n          if (!lastName) {\r\n            lastName = ''\r\n          }\r\n          if (lastName === '' && firstName === '') {\r\n            owner = 'unknown'\r\n          } else {\r\n            owner = `${lastName} ${firstName}`\r\n          }\r\n          createTime = moment(createTime).format('X')\r\n          let petGender = ''\r\n          switch (`${gender}`) {\r\n            case '1': petGender = 'F'\r\n              break;\r\n            case '0': petGender = \"M\"\r\n              break;\r\n            default: petGender = 'unknown'\r\n              break;\r\n          }\r\n          let petAge = 'unknown'\r\n          if (birthday) {\r\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n          }\r\n\r\n          let json = {\r\n            insertedAt: createTime,\r\n            patientId: this.state.patientId,\r\n            petName,\r\n            owner,\r\n            breed: breedName,\r\n            gender: petGender,\r\n            age: petAge,\r\n            petId,\r\n            weight,\r\n            rfid,\r\n            url,\r\n            speciesId,\r\n            l2rarmDistance,\r\n            neckCircumference,\r\n            upperTorsoCircumference,\r\n            lowerTorsoCircumference,\r\n            h2tLength,\r\n            torsoLength,\r\n            pethubId,\r\n            macId,\r\n          }\r\n          this.props.setMenuNum('1');\r\n          this.props.petDetailInfoFun(json);\r\n          this.props.history.push(\"/MainBody\");\r\n        } else {\r\n          message.error(res.msg);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        message.error('Jump Failure');\r\n      })\r\n  };\r\n  handleCancel = () => {\r\n    this.setState({\r\n      isModalVisible: false\r\n    })\r\n  };\r\n\r\n  render() {\r\n    const { closeColor, closebgc, minbgc, disabled, petSpeciesBreedId, isModalVisible, confirmLoading } = this.state\r\n    return (\r\n      <Spin spinning={this.state.spin} size=\"large\">\r\n        <div id=\"doctorAddPet\">\r\n          <div className=\"heard\">\r\n            <Heard />\r\n          </div>\r\n          <div className=\"editPetInfo_top\" >\r\n            <div className=\"title\" style={{ marginBottom: px(20), marginTop: px(20) }}>{`New Pet`}</div>\r\n            {this._petSpecies()}\r\n            {this._petName()}\r\n            {this._ownName()}\r\n            {this._primaryBreed()}\r\n            {this._weight()}\r\n          </div>\r\n          <div className=\"editPetInfo_foot\"  >\r\n            <div className=\"save\"\r\n              onClick={() => {\r\n                if (!this.state.patientId) {\r\n                  message.error('Please enter patient ID')\r\n                  return\r\n                }\r\n                let params = {\r\n                  patientId: this.state.patientId,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n                if (storage.lastOrganization) {\r\n                  params.organizationId = storage.lastOrganization\r\n                }\r\n\r\n                this.setState({\r\n                  spin: true\r\n                })\r\n                checkPatientId(params)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.flag === false) {\r\n                      this.setState({\r\n                        spin: false\r\n                      }, () => {\r\n                        errPatientId = params.patientId\r\n                        message.error('This patient ID is already occupied, please change to a new one')\r\n                      })\r\n                    } else {\r\n                      let { petSpecies, petName, birthday, petSpeciesBreedId, isMix, weight, gender, unit, imageId, confirmSelectBreedJson, owner, patientId, selectWZ } = this.state\r\n                      let species = null\r\n                      if (petSpeciesBreedId) {\r\n                        species = petSpeciesBreedId\r\n                      } else {\r\n                        // 11001 是cat 12001是dog 13001是other\r\n                        switch (selectWZ) {\r\n                          case 'cat': species = 11001; break;\r\n                          case 'dog': species = 12001; break;\r\n                          default: species = 13001;\r\n                            break;\r\n                        }\r\n                      }\r\n                      let data = {\r\n                        petName,\r\n                        birthday: moment(birthday).format('YYYY-MM-DD'),\r\n                        gender,\r\n                        owner,\r\n                        petSpeciesBreedId: species,\r\n                        doctorId: storage.userId\r\n                      }\r\n                      if (weight) {\r\n                        if (unit === 1) {\r\n                          weight = (0.45359 * weight).toFixed(2)\r\n                        }\r\n                        data.weight = parseFloat(weight)\r\n                      }\r\n                      if (imageId !== -1 && imageId) {\r\n                        data.imageId = imageId\r\n                      }\r\n                      if (storage.lastWorkplaceId) {\r\n                        data.workplaceId = storage.lastWorkplaceId\r\n                      }\r\n                      if (storage.lastOrganization) {\r\n                        data.organizationId = storage.lastOrganization\r\n                      }\r\n                      addDeskPet(patientId, data)\r\n                        .then(res => {\r\n                          this.setState({\r\n                            spin: false\r\n                          })\r\n                          console.log(res);\r\n                          if (res.flag === true) {\r\n                            message.success('Added successfully')\r\n                            this.handleOk();\r\n                            // this.props.history.goBack()\r\n                          }\r\n                          else {\r\n                            message.error('add failed')\r\n                          }\r\n                        })\r\n                        .catch(err => {\r\n                          this.setState({\r\n                            spin: false\r\n                          })\r\n                          message.error('add failed')\r\n                          console.log(err);\r\n                        })\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    this.setState({\r\n                      spin: false\r\n                    })\r\n                    console.log(err);\r\n                  })\r\n              }}\r\n            >Save</div>\r\n          </div>\r\n          <Modal\r\n            title=\"\"\r\n            visible={isModalVisible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n            centered\r\n            destroyOnClose\r\n            maskClosable={false}\r\n            confirmLoading={confirmLoading}\r\n          >\r\n            <div style={{ padding: px(24), fontSize: px(16) }}>\r\n              This patient ID is already occupied ! <br />Whether to switch to the pet measurement screen ?\r\n            </div>\r\n          </Modal>\r\n          <SelectPetBreed\r\n            visible={this.state.selectBreedVisible}\r\n            destroyOnClose\r\n            width={400}\r\n            value={this.state.petSpeciesBreedId}\r\n            onSelect={(value) => {\r\n              this.setState({\r\n                selectBreedVisible: false,\r\n                selectBreedJson: value,\r\n                petSpeciesBreedId: value.petSpeciesBreedId,\r\n                confirmSelectBreedJson: value,\r\n              })\r\n            }}\r\n            onCancel={() => {\r\n              this.setState({\r\n                selectBreedVisible: false,\r\n              })\r\n            }}\r\n          />\r\n        </div>\r\n      </Spin>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n\r\n  }),\r\n  { petDetailInfoFun, setMenuNum, }\r\n)(DoctorAddPet)\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx",["638","639","640","641","642"],"import React, { Component } from 'react'\nimport {\n  message,\n  Modal,\n  Input,\n  Spin\n} from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport Button from '../../utils/button/Button'\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { listAll, mellaLogin, } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { updateUserInfo } from '../../api/mellaserver'\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nexport default class FindWorkplace extends Component {\n\n  state = {\n    search: '',\n    listData: [],\n    searchData: [],\n    selectId: {},\n    isOrg: false,       //nodel框是否显示\n    isWorkplace: false,\n    workplaceList: [],\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    selectworkplace: {}\n  }\n  componentDidMount() {\n\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    listAll()\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    this.setState({\n      selectId: temporaryStorage.logupSelectOrganization\n    })\n    temporaryStorage.logupSelectOrganization = {}\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('---登录入参', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          isLoading: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.status && res.status === 500) {\n          message.error('Internal Server Error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n        if (res.code === 10000 && res.msg === '系统内部错误') {\n          message.error('system error')\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          this.setState({\n            isOrg: false,\n            isWorkplace: false\n          })\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        })\n        message.error('Login failed')\n      })\n  }\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n\n\n        }}\n\n      >\n        <div className=\"item\"> {item.name}</div>\n\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  _updateUserInfo = (params) => {\n    updateUserInfo(params)\n      .then(res => {\n        console.log(res);\n\n        if (res.flag === true) {\n          message.success('Join successfully', 3)\n\n          console.log('成功',);\n          if (!this.props.location.isSettingIn) {\n            this._logIn()\n          } else {\n            this.setState({\n              isLoading: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            isLoading: false\n          })\n          message.error('Identity update failed', 3)\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n          })\n          console.log(item);\n\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  _addworkplaced = () => {\n    let userId = this.props.location.isSettingIn ? storage.userId : temporaryStorage.logupSuccessData.userId\n    let params = {\n      userId,\n      roleId: 2,\n      workplaceId: this.state.selectworkplace.workplaceId,\n      organizationId: this.state.selectworkplace.organizationId\n    }\n    console.log('入参：', params);\n    this.setState({\n      isLoading: true,\n      isWorkplace: false,\n      isOrg: false\n    })\n    this._updateUserInfo(params)\n\n\n  }\n\n  render() {\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\n    return (\n      <div id=\"joinOrganizationByOption\">\n        <div className=\"heard\">\n          {/* 关闭缩小 */}\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            // onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\n            onClick1={() => this.props.history.goBack()}\n\n          />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"text\">Join an Organization</div>\n\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n\n                this.setState({\n                  isOrg: true\n                })\n                console.log('搜索名称加入');\n              }}\n            >\n              <div className=\"iconBox\">\n                <MyIcon type='icon-search' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n\n                <div className=\"title\">Search organization</div>\n\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                console.log('创建');\n                this.props.history.push('/uesr/logUp/NewOrganization')\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Create an organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                if (this.props.location.isSettingIn) {\n                  this.props.history.goBack()\n                } else {\n                  let params = {\n                    userId: temporaryStorage.logupSuccessData.userId,\n                    roleId: 2,\n                  }\n                  message.destroy()\n                  this.setState({\n                    isLoading: true\n                  })\n                  console.log('搜索id加入', params);\n                  this._updateUserInfo(params)\n                }\n\n\n\n\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-guanbi2' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Continue without organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={isOrg}\n          element={\n              <div className='myfindOrg' >\n                <div className=\"orgHeard\">\n                  <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                    <div></div>\n                    <div\n                      onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                    >\n                      <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                    </div>\n                  </div>\n                  <div className=\"text\"\n                    onMouseOver={() => {\n                      if (disabled) {\n                        this.setState({\n                          disabled: false,\n                        });\n                      }\n                    }}\n                    onMouseOut={() => {\n                      this.setState({\n                        disabled: true,\n                      });\n                    }}\n\n                  >Find my organization</div>\n                  <div className=\"searchBox\">\n                    <Input\n                      placeholder=\" &#xe61b; Search organization\"\n                      bordered={false}\n                      allowClear={true}\n                      value={this.state.search}\n                      onChange={this._search}\n                    />\n                  </div>\n                </div>\n                <div className=\"list\">\n                  {this._list()}\n                </div>\n                <div className=\"foot\">\n                  <Button\n                    text={'Join Organization'}\n                    onClick={this._goWorkplace}\n                  />\n                  <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                  <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n                </div>\n              </div>\n          }\n        />\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\" &#xe61b; Search workplace\"\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\"\n\n              >\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n        <MyModal\n          visible={this.state.isLoading}\n        />\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx",["643"],"import React, { useState, useEffect } from 'react'\r\nimport { message, Button } from 'antd'\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\n\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport './index.less';\r\nimport { activateUserByEmailCode, resendDeskRegistEmail } from '../../api';\r\n\r\nconst VerifyEmail = () => {\r\n  let history = useHistory()\r\n  const [code, setCode] = useState('')\r\n  const [resend, setResend] = useState(60)\r\n  const [visible, setVisible] = useState(false)\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (resend > 0) {\r\n        setResend(resend - 1)\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  })\r\n\r\n  const _resend = (e) => {\r\n\r\n    if (resend <= 0) {\r\n\r\n      //下面写逻辑代码\r\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\r\n      let params = {\r\n        firstName,\r\n        lastName,\r\n        domain, email, hash, phone,\r\n      }\r\n      if (birthday) {\r\n        params.birthday = birthday\r\n      }\r\n      console.log('重新获取验证码入参', params);\r\n\r\n      resendDeskRegistEmail(temporaryStorage.logupEmailCode, params)\r\n        .then(res => {\r\n          console.log('重新获取验证码', res);\r\n          if (res.msg === 'success') {\r\n            message.success('The email has been resent, please check', 3)\r\n            temporaryStorage.logupEmailCode = res.data\r\n            setResend(60)\r\n          } else {\r\n            message.error('Failed to send mail', 3)\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log('重新获取验证码失败');\r\n        })\r\n\r\n    }\r\n\r\n    //阻止a链接跳转\r\n    if (e && e.preventDefault)\r\n      e.preventDefault();\r\n    else\r\n      window.event.returnValue = false;\r\n  }\r\n  const _next = () => {\r\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\r\n    message.destroy()\r\n    if (code !== temporaryStorage.logupEmailCode) {\r\n      message.error('Verification code input is incorrect', 3)\r\n      return\r\n    }\r\n    else {\r\n      setVisible(true)\r\n      activateUserByEmailCode(code)\r\n        .then(res => {\r\n          setVisible(false)\r\n          console.log('验证码验证返回信息：', res);\r\n          if (res.flag === true) {\r\n            console.log('验证成功');\r\n            temporaryStorage.logupSuccessData = res.data\r\n            temporaryStorage.logupEmailCode = ''\r\n            history.push('/uesr/logUp/JoinOrganizationByOption')\r\n          } else {\r\n            message.error('Verification code verification failed', 3)\r\n          }\r\n\r\n        })\r\n        .catch(err => {\r\n          setVisible(false)\r\n          console.log('验证码验证错误：', err);\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"verifyEmail\">\r\n      <div className=\"heard\">\r\n        <MaxMin\r\n          onClick={() => { history.push('/') }}\r\n          onClick1={() => history.goBack()}\r\n        />\r\n      </div>\r\n      <div className=\"body\">\r\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\r\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\r\n        <div className=\"text\">Please enter it below to confirm your address.</div>\r\n        <div className=\"inpF\">\r\n          <input\r\n            className=\"inp\"\r\n            type=\"text\"\r\n            value={code}\r\n            placeholder=\"Code\"\r\n            onChange={(val) => { setCode(val.target.value) }}\r\n            maxLength={6}\r\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"resend\">\r\n          <a href=\"#\" onClick={_resend}>Resend</a>\r\n          {resend > 0 && `(${resend})`}\r\n        </div> */}\r\n      </div>\r\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\r\n        <div className=\"btnF\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={_next}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <MyModal\r\n        visible={visible}\r\n      />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VerifyEmail\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx",["644","645","646"],"\n/**\n *\n * this.props.location.isAddDoctor是上个组件传过来的标志,为true代表从设置里面的邀请跳转过来的\n */\nimport React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, mellaLogin } from '../../api';\nimport { inviteUserByEmail } from '../../api/melladesk/user';\nlet storage = window.localStorage;\nexport default class InviteTeam extends Component {\n  state = {\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n  }\n\n\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    let { isAddDoctor } = this.props.location\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = !isAddDoctor ? temporaryStorage.logupSuccessData : storage\n    let organizationId = !isAddDoctor ? temporaryStorage.logupOrganization.organizationId : storage.lastOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      message.error('Please enter the invitation email')\n      return\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          if (!isAddDoctor) {\n            this._logIn()\n          } else {\n            this.setState({\n              visible: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n  _food = () => {\n    if (!this.props.location.isAddDoctor) {\n\n    }\n  }\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          {\n            !this.props.location.isAddDoctor && <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._logIn}\n              text={'Skip'}\n            >\n              Skip\n            </Button>\n          }\n\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx",["647","648","649","650","651","652"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx",["653","654","655","656"],"\nimport React, { Component } from 'react'\nimport {\n  Switch,\n  Select,\n  message\n} from 'antd'\n\nimport redJinggao from '../../assets/img/redjinggao.png'\n\nimport Heart from '../../utils/heard/Heard'\nimport Slider from '../../utils/slider/Slider'\nimport Button from '../../utils/button/Button'\nimport electronStore from '../../utils/electronStore'\nimport { px, win } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport './index.less'\n\nconst { Option } = Select;\nlet storage = window.localStorage\nexport default class Settings extends Component {\n\n  state = {\n    self_tarting: false,      //自启动，\n    isHua: true,              //为true代表为华氏度，为false代表℃\n    is15: true,               //腋温测量时长，为true则是15秒，为false则是35秒\n    isClicleStudy: false,     //是否处于临床测试，为true则在处于，false则不处于\n    isBacklight: true,        //是否开启背光，为true则是开启背光，为false则是关闭背光\n    isBeep: true,             //是否开启蜂鸣器，为true则是开启蜂鸣器，反之则是关闭蜂鸣器\n    backlightTimer: { length: 140, number: '45' },//背光时长，长度指的是在滑轨上面的距离，number指的是显示的秒数\n    autoOff: { length: 0, number: '30' },  //无操作自动关机，长度指的是在滑轨上面的距离，number指的是关闭的秒数\n\n\n    oldIsHua: true,\n    oldIs15: true,\n    oldIsBacklight: true,\n    oldIsBeep: true,\n    oldBacklightTimer: { length: 140, number: '45' },\n    oldAutoOff: { length: 0, number: '30' },\n    oldIsClicleStudy: false,\n\n    isSave: false,\n\n    num0: '',\n    num1: '',\n    num2: '',\n    num3: '',\n    num4: '',\n    num5: '',\n    verifyNum: '',\n\n    maxLength: 1, //验证码长度\n    valueA: \"\", //验证码第一位\n    valueB: \"\", //二\n    valueC: \"\", //三\n    valueD: \"\", //四\n    valueE: \"\", //5\n    valueF: \"\", //6\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    // if (windowsHeight < 900) {\n    //   ipcRenderer.send('table', win())\n    // } else {\n    //   ipcRenderer.send('setting', win())\n    // }\n    ipcRenderer.send('big', win())\n    //这里要根据保存的时候存到哪个位置的，然后拿出来更新state\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`)\n    console.log('----', hardSet);\n    let isClicleStudy = storage.isClinical === 'true' ? true : false\n    if (hardSet) {\n      console.log('不是第一次进来，有设置的');\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\n\n      this.setState({\n        isHua,\n        is15,\n        isBacklight,\n        isBeep,\n        backlightTimer,\n        autoOff,\n        // isClicleStudy: temporaryStorage.isClicleStudy,\n        isClicleStudy,\n\n        oldIsHua: isHua,\n        oldIs15: is15,\n        oldIsBacklight: isBacklight,\n        oldIsBeep: isBeep,\n        oldBacklightTimer: backlightTimer,\n        oldAutoOff: autoOff,\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\n        oldIsClicleStudy: isClicleStudy,\n\n      })\n    } else {\n      let settings = {\n        isHua: true,\n        is15: true,\n        self_tarting: false,  //自启动\n        isBacklight: true,\n        isBeep: true,\n        backlightTimer: { length: 140, number: '45' },\n        autoOff: { length: 0, number: '30' },\n      }\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = settings\n      this.setState({\n        isHua,\n        is15,\n        isBacklight,\n        isBeep,\n        backlightTimer,\n        autoOff,\n        // isClicleStudy: temporaryStorage.isClicleStudy,\n        isClicleStudy,\n\n        oldIsHua: isHua,\n        oldIs15: is15,\n        oldIsBacklight: isBacklight,\n        oldIsBeep: isBeep,\n        oldBacklightTimer: backlightTimer,\n        oldAutoOff: autoOff,\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\n        oldIsClicleStudy: isClicleStudy\n\n\n      })\n    }\n\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    if (windowsHeight < 900) {\n      ipcRenderer.send('table', win())\n    } else {\n      ipcRenderer.send('big', win())\n    }\n    this.setState({\n\n    })\n  }\n\n  _save = () => {\n    console.log('点击保存');\n    /**\n     * 分别两部分保存保存，\n     * 本地存储：程序自启动、测量单位、背光、蜂鸣器、背光时间、硬件自动关机时间、腋温测量时间\n     * 临时存储：处于临床测试状态\n     */\n    this.setState({\n      isSave: false\n    })\n    let { self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 } = this.state\n    // console.log({ self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 });\n    let settings = {\n      isHua,\n      is15,\n      self_tarting,\n      isBacklight,\n      isBeep,\n      backlightTimer,\n      autoOff,\n    }\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\n    // temporaryStorage.isClicleStudy = isClicleStudy\n    storage.isClinical = `${isClicleStudy}`\n    let ipcRenderer = window.electron.ipcRenderer\n    if (self_tarting) {\n      ipcRenderer.send('openAutoStart')\n    } else {\n      ipcRenderer.send('closeAutoStart')\n    }\n    let setArr = ['03', 'ed', '07', 'dd', autoOff.number, isBacklight ? backlightTimer.number : '00', isBeep ? '11' : '00', isHua ? '00' : '01']\n    console.log('setArr', setArr);\n\n\n\n    ipcRenderer.send('usbdata', { command: '21', arr: setArr })\n\n    this.props.history.goBack()\n  }\n  _goback = () => {\n    console.log('返回');\n    let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff, isClicleStudy,\n      oldAutoOff, oldBacklightTimer, oldIs15, oldIsBacklight, oldIsBeep, oldIsClicleStudy, oldIsHua, } = this.state\n    if (isHua !== oldIsHua || is15 !== oldIs15 || isBacklight !== oldIsBacklight || isBeep !== oldIsBeep || backlightTimer !== oldBacklightTimer\n      || autoOff !== oldAutoOff || isClicleStudy !== oldIsClicleStudy) {\n      console.log('做了更改');\n      this.setState({\n        isSave: true\n      })\n\n    } else {\n      this.props.history.goBack()\n    }\n\n  }\n\n  //验证码光标后移\n  handleInputValue = (e, type) => {\n\n    const { value = \"\" } = e.target;\n    switch (type) {\n      case \"A\":\n        if (value) this.secondFoucs.focus();\n\n        this.setState({\n          valueA: value.slice(0, 1)\n        });\n\n\n        break;\n\n\n      case \"B\":\n        if (value) this.tridFoucs.focus();\n\n        this.setState({\n          valueB: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"C\":\n        if (value) this.fourFoucs.focus();\n\n        this.setState({\n          valueC: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"D\":\n        if (value) this.fiveFoucs.focus();\n\n        this.setState({\n          valueD: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"E\":\n        if (value) this.sixFoucs.focus();\n\n        this.setState({\n          valueE: value.slice(0, 1)\n        });\n\n\n        break;\n      default:\n        this.setState({\n          valueF: value.slice(0, 1),\n          isShow: true\n        });\n        break;\n    }\n\n  };\n  //删除验证码\n  handleDel = e => {\n    const BACK_SPACE = 8;\n    const isBackSpaceKey = e.keyCode === BACK_SPACE;\n    if (isBackSpaceKey && e.target.value.length === 0) {\n      let previous = e.target;\n      //上一个兄弟节点\n      previous = previous.previousElementSibling;\n      if (previous !== null && previous.tagName.toLowerCase() === \"input\") {\n        previous.focus();\n      }\n    }\n  };\n\n\n  moceCursor = (index) => {\n    let inputs = document.querySelectorAll('#settings .verify input')\n    if (index < 5) {\n      inputs[++index].focus()\n    }\n  }\n  backCursor = (index) => {\n    let inputs = document.querySelectorAll('#settings .verify input')\n    inputs[--index].focus()\n  }\n  _device = () => {\n\n    let userId = storage.userId\n    let deviceList = electronStore.get(`${userId}-deviceList`)\n    console.log('---', deviceList);\n    if (!deviceList) {\n      let str = `${getRamNumber()}`\n      for (let i = 0; i < 5; i++) {\n        str += `:${getRamNumber()}`\n      }\n      console.log('随机生成的mac地址:', str);\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\n      electronStore.set(`${userId}-deviceList`, deviceList)\n    }\n\n\n    function getRamNumber() {\n      var result = '';\n      for (var i = 0; i < 2; i++) {\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\n      }\n      //默认字母小写，手动转大写\n      return result.toLowerCase();//另toLowerCase()转小写\n    }\n    let deviceArr = []\n    let selectDevice = electronStore.get(`${storage.userId}-selectDevice`)\n    let selectDeviceName = ''\n    for (let i = 0; i < deviceList.length; i++) {\n      const element = deviceList[i];\n      let json = {\n        key: element.macId, value: element.name\n      }\n      deviceArr.push(json)\n      if (selectDevice === element.macId) {\n        selectDeviceName = element.name\n      }\n    }\n\n\n\n    return (\n      // <div className=\"item\" style={{ marginTop: px(15) }}>\n      <div className=\"title\">\n        <div className=\"hardSetting\">{`Hardware Settings`}</div>\n      </div>\n      // </div>\n    )\n  }\n\n\n  render() {\n    let { isBacklight, isBeep, backlightTimer, } = this.state\n\n    let bodyHeight = '90%'\n    try {\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\n    } catch (error) {\n\n    }\n\n\n    return (\n      <div id=\"settings\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n\n\n        <div className=\"body\">\n          <div className=\"setting\">\n            {/* 桌面设计 */}\n            <div className=\"desk\">\n              <div className=\"title\">Desktop Settings</div>\n\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\n                <div className=\"l\">\n                  <div className=\"text\">Launch Mella on Computer Startup</div>\n                  <div className=\"icon\"\n                    onClick={() => this.setState({ self_tarting: !this.state.self_tarting })}\n                  >\n                    {(this.state.self_tarting) && <span  >&#xe619;</span>}\n\n                  </div>\n\n                </div>\n\n\n                <div className=\"l\" style={{ paddingLeft: px(50), paddingRight: px(50) }}>\n                  <div className=\"text\">Units:</div>\n                  <div className=\"unit\">\n\n\n                    <div className=\"one\"\n\n                      onClick={() => { this.setState({ isHua: true }) }}\n                    >\n                      <div className=\"check\">\n                        {(this.state.isHua) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">°F / lbs</div>\n                    </div>\n                    <div className=\"one\"\n\n                      onClick={() => { this.setState({ isHua: false }) }}\n                    >\n                      <div className=\"check\">\n                        {(!this.state.isHua) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">°C / kg</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\n\n              </div>\n\n            </div>\n\n            {/* 用户设计 */}\n            {\n              // storage.roleId === '3' &&\n              <div className=\"desk\">\n                <div className=\"title\">User Admin</div>\n\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\n                  <div className=\"l\" onClick={() => { this.props.history.push('/menuOptions/ConnectWorkplace') }}>\n                    <div className=\"text\">{`Org & Practice Profiles`}</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n\n                  </div>\n\n\n                  <div className=\"l\" onClick={() => {\n                    this.props.history.push({ pathname: '/uesr/logUp/InviteTeam', isAddDoctor: true })\n                    // this.props.history.push('/uesr/logUp/InviteTeam')\n                  }}>\n                    <div className=\"text\">Invite Your Team</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n                </div>\n\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\n                  <div className=\"l\"\n                    onClick={() => {\n                      console.log(storage.roleId);\n                      message.destroy()\n                      if (storage.roleId === '3') {\n                        this.props.history.push('/menuOptions/veterinarians')\n                      } else {\n                        message.error('You do not have administrator rights')\n                      }\n                    }}\n\n                  >\n                    <div className=\"text\">Vet Profile Management</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n\n\n                  <div className=\"l \"\n                    onClick={() => this.props.history.push('/menuOptions/petAndParents')}\n\n                    style={{ marginTop: '25px', }}>\n                    <div className=\"text\">Pet and Parents Profile Management</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n                </div>\n\n              </div>\n            }\n\n\n            {/* 硬件设置 */}\n\n            <div className=\"desk\">\n\n              {this._device()}\n              <div className=\"item\">\n                <div className=\"l\">\n                  <div className=\"text\">Backlight</div>\n                  <Switch\n                    checked={isBacklight}\n                    onClick={() => this.setState({ isBacklight: !isBacklight })}\n                    size='small'\n                  />\n                </div>\n\n\n                <div className=\"l\">\n                  <div className=\"text\">Action Beep</div>\n                  <Switch\n                    checked={isBeep}\n                    onClick={() => this.setState({ isBeep: !isBeep })}\n                    size='small'\n                  />\n                </div>\n              </div>\n\n\n              <div className=\"item\">\n                <div className=\"l\">\n                  <div className=\"backlight\" style={{ width: px(300) }} >\n                    <div className=\"text\">Backlight Timer</div>\n                    <div className=\"solid\">\n                      10 Secs\n                      <div className=\"slider\" >\n                        <Slider\n                          min={10}\n                          max={60}\n                          railWidth={px(200)}\n                          getData={(e) => { console.log(e); this.setState({ backlightTimer: e }) }}\n                          left={backlightTimer.length}\n                        />\n                      </div>\n                      60 Secs\n                    </div>\n\n                  </div>\n                </div>\n\n\n                <div className=\"l\" >\n                  <div className=\"backlight\" style={{ width: px(300) }} >\n                    <div className=\"text\">Auto Off After</div>\n                    <div className=\"solid\">\n                      30 Secs\n                      <div className=\"slider\">\n                        <Slider\n                          min={30}\n                          max={60}\n                          railWidth={px(200)}\n                          getData={(e) => { this.setState({ autoOff: e }) }}\n                          left={this.state.autoOff.length}\n                        />\n                      </div>\n                      60 Secs\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"item\">\n\n\n\n                <div className=\"l\" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n                  <div className=\"text\">Measurement Time for Axillary Sensor</div>\n                  <div className=\"unit\">\n\n\n                    <div className=\"one\"\n                      onClick={() => { this.setState({ is15: true }) }}\n                    >\n                      <div className=\"check\">\n                        {(this.state.is15) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">15 Secs</div>\n                    </div>\n                    <div className=\"one\"\n                      onClick={() => { this.setState({ is15: false }) }}\n                    >\n                      <div className=\"check\">\n                        {(!this.state.is15) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">30 Secs</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"l\" onClick={() => this.props.history.push('/menuOptions/advancedsettings')}>\n                  <div className=\"text\">Advanced Settings</div>\n                  <div className=\"rightIcon\">&#xe60c;</div>\n                </div>\n              </div>\n\n\n            </div>\n\n          </div>\n\n\n          <div className=\"btnSave\">\n            <Button\n              text={'Save Changes'}\n              onClick={this._save}\n            />\n          </div>\n        </div>\n\n        <MyModal\n          visible={this.state.isSave}\n          element={\n            <div className='isSave'\n            //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\n            >\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n              <p>Settings changed - save?</p>\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                <Button\n                  text={'Cancel'}\n                  onClick={() => {\n                    this.setState({\n                      isSave: false\n                    })\n                  }}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n                <Button\n                  text={'OK'}\n                  onClick={this._save}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n              </div>\n            </div>\n          }\n        />\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx",["657","658","659","660","661","662"],"\nimport React, { Component } from 'react'\nimport {\n  Select,\n  Button,\n} from 'antd'\n\nimport parent from '../../assets/img/parent.png'\nimport dog from '../../assets/images/reddog.png'\nimport cat from '../../assets/images/redcat.png'\nimport other from '../../assets/images/redother.png'\n\nimport Heart from '../../utils/heard/Heard'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\n\nimport './index.less';\nimport { pet_petall } from '../../api'\n\nconst { Option } = Select;\nlet storage = window.localStorage;\n\nclass PetAndParents extends Component {\n\n  state = {\n    parentList: [],       //宠物主人列表\n    petList: [],          //宠物列表\n    loading: false,       //加载中\n    parentSearchArr: [],  //搜索后的宠物主人列表\n    petSearchArr: [],     //搜索后的宠物列表\n    searchText: '',        //搜索文本\n    parentAndPetList: [],  //宠物主人下的所有宠物,\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    this._getExam()\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    ipcRenderer.send('Lowbig')\n  }\n  _getExam = async () => {\n    this.setState({\n      loading: true,\n      spin: false\n    })\n    let params = {\n      offset: 0,\n      size: 500,\n    }\n    pet_petall(storage.lastOrganization, params)\n      .then(res => {\n        this.setState({\n          loading: false\n        })\n        if (res.flag === true) {\n          let data = []\n          let list = res.data.list\n          let owerList = []\n          let parentAndPetList = []\n          for (let i = 0; i < list.length; i++) {\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\n            let json = {\n              insertedAt: createTime,\n              name: petName,\n              petId,\n              rfid,\n              url,\n              speciesId,\n              type: 'pet',\n              patientId,\n              petBirthday: birthday,\n              breedName,\n              gender\n            }\n            data.push(json)\n            if (userId) {\n              let flogNum = -1\n\n              for (let i = 0; i < owerList.length; i++) {\n                let ower = owerList[i]\n                if (ower.userId === userId) {\n                  flogNum = i\n                  break;\n                }\n\n              }\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\n                let owerJson = {\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\n                }\n                owerList.push(owerJson)\n                let parentAndPetJson = {\n                  parent: owerJson,\n                  pets: [json]\n                }\n                console.log('parentAndPetJson: ', parentAndPetJson);\n\n                parentAndPetList.push(parentAndPetJson)\n              } else {\n                parentAndPetList[flogNum].pets.push(json)\n              }\n            }\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            petList: data,\n            parentList: owerList,\n            parentAndPetList\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        })\n      })\n\n\n\n  }\n  list = (value) => {\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\n    let data = []\n    if (value === 'parent') {\n      if (searchText.length > 0) {\n        data = parentSearchArr\n      } else {\n        data = parentList\n      }\n    } else {\n      if (searchText.length > 0) {\n        data = petSearchArr\n      } else {\n        data = petList\n      }\n    }\n    let options = data.map((item, index) => {\n      let { speciesId, url, userImageUrl, patientId, petId, name,userId } = item\n      let images = null\n      if (value === 'parent') {\n        images = `url(${userImageUrl}?download=0&width=150)`\n        if (!userImageUrl) {\n          images = `url(${parent})`\n        }\n      } else {\n        images = `url(${url}?download=0&width=150)`\n        if (!url) {\n          switch (speciesId) {\n            case 1: images = `url(${cat})`\n              break;\n            case 2: images = `url(${dog})`\n              break\n            default: images = `url(${other})`\n              break;\n          }\n        }\n      }\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `0 8px ${px(15)}px 0`, borderRadius: px(20) }}\n          onClick={() => {\n            let params = []\n            if (item.type !== 'pet') {\n              for (let i = 0; i < parentAndPetList.length; i++) {\n                if (item.userId === parentAndPetList[i].parent.userId) {\n                  params = parentAndPetList[i]\n                  break\n                }\n              }\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: userId })\n            } else {\n              this.props.petDetailInfoFun(item);\n              this.props.history.push({ pathname: '/page9', parent: params })\n            }\n          }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div\n              className='img'\n              style={{\n                width: px(50),\n                height: px(50),\n                marginRight: px(20),\n                borderRadius: px(60),\n                backgroundImage: images,\n              }}>\n            </div>\n\n            <div className='petInfo' >\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n\n    let liStyle = { backgroundColor: '#fff', }\n    if (this.state.petList.length > 6) {\n      liStyle = { height: px(560), overflowY: 'auto' }\n    }\n    return (\n      <div className='petList'>\n        <ul style={liStyle}>\n          {options}\n        </ul>\n      </div>\n    )\n\n  }\n  inputChange = (text) => {\n    let search = text.target.value\n    this.setState({\n      searchText: search\n    })\n\n    let { parentList, petList } = this.state\n    console.log(parentList, petList);\n    let keyWord = search\n\n    let parentSearchData = []\n    for (let i = 0; i < parentList.length; i++) {\n      let petName = parentList[i].name.toLowerCase() || ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        parentSearchData.push(parentList[i])\n      }\n    }\n\n    let petSearchData = []\n    for (let i = 0; i < petList.length; i++) {\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${rfid}`.indexOf(keyWord) !== -1\n      ) {\n        petSearchData.push(petList[i])\n      }\n    }\n    this.setState({\n      petSearchArr: petSearchData,\n      parentSearchArr: parentSearchData\n    })\n\n\n  }\n\n  render() {\n    return (\n      <div id=\"PetAndParents\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n        <div className=\"body\">\n          <div className='titleBox'>\n            <h1 style={{ fontSize: px(20) }}>{`Pet & Parents Profile Management`}</h1>\n          </div>\n          <div className=\"search\">\n            <div className=\"searchL\">\n              <input\n                type=\"text\"\n                style={{ paddingLeft: px(25), height: px(34) }}\n                placeholder=\"&#xe62c; Search \"\n                value={this.state.searchText}\n                onChange={(text) => {\n                  this.inputChange(text)\n                }}\n              />\n            </div>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              Search\n            </Button>\n          </div>\n          <div className=\"btns\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              + New Parent\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => {\n                this.props.history.push('/pet/doctorAddPet')\n              }}\n            >\n              + New Pet\n            </Button>\n          </div>\n          <div className=\"lists\">\n            <div className=\"listsL\">\n              {this.list('parent')}\n            </div>\n            <div className=\"listsL\">\n              {this.list('pet')}\n            </div>\n          </div>\n        </div>\n        <MyModal visible={this.state.loading} />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(PetAndParents);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx",["663","664"],"\nimport React, { Component } from 'react'\nimport { message, Modal, Button } from 'antd';\nimport Heart from '../../utils/heard/Heard'\nimport { px, win } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal.jsx'\nimport './index.less';\nimport { getOta } from '../../api/mellaserver/backend';\nimport { versionComarision } from '../../utils/commonFun';\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\n\nlet ipcRenderer = window.electron.ipcRenderer\nlet storage = window.localStorage;\nlet uploadType = ''\nexport default class AdvancedSettings extends Component {\n\n  state = {\n    isHaveBase: true,\n    uploadText: '',\n    isUpload: false,\n    updateModal: false,\n    progress: 0,\n    localVersion: '',\n    cloudVersion: '',\n    filePath: '',\n    isModalOpen: false,\n  }\n  componentDidMount() {\n    ipcRenderer.send(\"big\", win());\n    //检测是否有usb设备\n    ipcRenderer.on('noUSB', this._noUSB)\n    //升级过程中发送的过程信息\n    ipcRenderer.on('uploadBaseInfo', this._uploadBaseInfo)\n    //底座发过来的指令信息\n    ipcRenderer.on('sned', this._send)\n    //发送结束升级指令,相当于初始化\n    ipcRenderer.send('reUpload', {})\n    //获取插入硬件版本\n    // this.getHardwareVersion();\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('uploadBaseInfo', this._uploadBaseInfo)\n    ipcRenderer.removeListener('sned', this._send)\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\n  }\n  //进入界面时获取底座的版本\n  // getHardwareVersion = () => {\n  //   if(this.state.isHaveBase)\n  //   ipcRenderer.send('usbdata', { command: '08', arr: [''] });\n  //   this.localVersionTimer = setTimeout(() => {\n  //     //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,给出弹窗提示\n  //     this.setState({ isModalOpen: true });\n  //     this.localVersionTimer && clearTimeout(this.localVersionTimer)\n  //   }, 3000);\n  // }\n  //底座发过来的指令信息\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    console.log('_send', data);\n    let { isUpload } = this.state\n\n    if (data[2] === 54) {\n      if (isUpload) {\n        if (data[3] === 0) {\n          this.setState({\n            uploadText: 'Start the upgrade after re-plugging the base'\n          })\n          ipcRenderer.send('startUpload', {})\n        }\n      }\n\n    } else if (data[2] === 182) {\n      //为0代表底座通讯关闭成功了\n      if (data[3] === 0) {\n        if (isUpload) {\n          console.log('发送指令让底座进入升级状态');\n          ipcRenderer.send('enterUpgrade', { command: '38', arr: ['5A'] })\n        }\n\n      }\n    } else if (data[2] === 136) {\n      //获取到了版本信息,把定时器关闭,此底座不是很老版本\n      console.log('版本信息:', data);\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\n      this.setState({\n        localVersion,\n        uploadText: `The current version number is v${localVersion}, getting the latest version`\n      }, () => {\n        this.cloudVersion()\n      })\n    }\n\n  }\n  //是否插上底座设备，为false则代表插上了底座设备，反之为拔掉了底座设备\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    let { isUpload, progress } = this.state\n    if (data === false) {\n      this.setState({\n        isHaveBase: true,\n      })\n      if (isUpload) {\n        if (progress === 0) {\n          console.log('正在升级过程中检测到了拔插 前去发送升级文件', uploadType);\n          if (uploadType === 'base') {\n            console.log('底座升级');\n            ipcRenderer.send('updateBase', { state: 'base', url: this.state.filePath, fileName: `mellabase${this.state.cloudVersion}` })\n          } else if (uploadType === 'reset') {\n            console.log('底座出厂设置');\n            ipcRenderer.send('updateBase', { state: 'reset', })\n          }\n        } else if (progress === 100) {\n          this.failTimer && clearTimeout(this.failTimer)\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.success('Update Successful');\n          ipcRenderer.send('reUpload', {})\n        } else {\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.error('Upgrade failed')\n          ipcRenderer.send('reUpload', {})\n        }\n\n\n      }\n    } else {\n      if (this.state.isHaveBase) {\n        this.setState({\n          isHaveBase: false,\n\n        })\n      }\n      if (isUpload) {\n        if (progress > 0 && progress < 100) {\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.error('Upgrade failed')\n          ipcRenderer.send('reUpload', {})\n        }\n      }\n\n\n    }\n  }\n  _uploadBaseInfo = (e, data) => {\n    console.log('升级过程中的信息：', data);\n    switch (data.status) {\n      case 'error':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n          progress: 0,\n          localVersion: '',\n          cloudVersion: '',\n        })\n        message.destroy()\n        message.error(data.data)\n        ipcRenderer.send('reUpload', {})\n        break;\n      case 'error1':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n          progress: 0,\n          localVersion: '',\n          cloudVersion: '',\n        })\n        message.destroy()\n        message.error('Upgrade failed, please try again')\n        ipcRenderer.send('reUpload', {})\n        break;\n\n\n      case 'normal':\n        this.setState({\n          uploadText: data.data,\n          progress: data.progress\n        })\n        if (data.progress === 100) {\n          console.log('进度到达100了');\n          this.failTimer && clearTimeout(this.failTimer)\n          this.failTimer = setTimeout(() => {\n\n            this.setState({\n              isUpload: false,\n              updateModal: false,\n              progress: 0,\n              localVersion: '',\n              cloudVersion: '',\n            })\n            message.destroy()\n            message.error('Upgrade failed')\n            ipcRenderer.send('reUpload', {})\n          }, 5000);\n        }\n        break;\n\n      case 'success':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n        })\n        message.destroy()\n        message.success(data.data)\n        ipcRenderer.send('reUpload', {})\n\n        break;\n\n      default:\n        break;\n    }\n\n\n\n  }\n  _upload = (val) => {\n\n    let { isHaveBase } = this.state\n    if (!isHaveBase) {\n      this.setState({\n        isUpload: false,\n        updateModal: false,\n      })\n      message.destroy()\n      message.error('No base device found, please plug it in and try again')\n    } else {\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\n      this.setState({\n        uploadText: 'Detect upgrade environment',\n        isUpload: true,\n        updateModal: true,\n        progress: 0\n      })\n      uploadType = val\n      //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\n      const timer = setTimeout(() => {\n        console.log('发送指令查看底座是否已经在升级状态');\n        ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\n        clearTimeout(timer)\n      }, 100);\n\n      //2.如果能收到关闭指令，则发送开始升级指令\n\n      //3.如果如果测试检测到usb插拔，则去发送文件\n\n\n\n    }\n  }\n\n  _upload1 = (val) => {\n\n    let { isHaveBase } = this.state\n    message.destroy()\n    if (!isHaveBase) {\n      this.setState({\n        isUpload: false,\n        updateModal: false,\n        localVersion: '',\n        cloudVersion: '',\n      })\n\n      message.error('No base device found, please plug it in and try again')\n    } else {\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\n      this.setState({\n        uploadText: 'Detect upgrade environment',\n        updateModal: true,\n        progress: 0,\n        localVersion: '',\n        cloudVersion: '',\n      }, () => {\n        this.localVersion()\n      })\n      uploadType = val\n      //第一步,查询本地版本号\n\n\n\n      //2.如果能收到关闭指令，则发送开始升级指令\n\n      //3.如果如果测试检测到usb插拔，则去发送文件\n\n\n\n    }\n  }\n  //询问本地的版本号\n  localVersion = () => {\n    this.setState({\n      uploadText: 'Query the local version number',\n    })\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] })\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\n    this.localVersionTimer = setTimeout(() => {\n      //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,直接去下载文件升级\n      this.cloudVersion()\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\n    }, 3000);\n  }\n  //询问网端最新的版本号\n  cloudVersion = () => {\n    getInfoOfLatestDevice('mellabase')\n      .then(res => {\n        console.log('获取到了网端的版本号', res);\n        if (res.flag) {\n          let { firmwareVersion, updateUrl } = res.data\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion)\n          console.log('比较信息:', firmwareVersion, this.state.localVersion, cloudBigtolocal);\n          if (cloudBigtolocal || !this.state.localVersion) {\n            this.setState({\n              cloudVersion: firmwareVersion,\n              filePath: updateUrl,\n              isUpload: true,\n              uploadText: 'Start getting upgrade files'\n\n            })\n\n            //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\n            const timer = setTimeout(() => {\n              console.log('发送指令查看底座是否已经在升级状态');\n              ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\n              clearTimeout(timer)\n            }, 100);\n          } else {\n            this.setState({\n              updateModal: false\n            })\n            message.success(`The hardware version is v${firmwareVersion}, which is the latest version`)\n          }\n\n\n\n        } else {\n          console.log('没有获取到版本的文件');\n          message.error('Failed to get the latest version')\n          this.setState({\n            updateModal: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log('获取版本失败,停止升级', err);\n        message.error('Failed to get the latest version')\n        this.setState({\n          updateModal: false\n        })\n\n      })\n  }\n\n  render() {\n\n    return (\n      <div id='advancedsettings'>\n        <div className=\"heard\">\n          <Heart />\n          <div className=\"title\">\n            <h2>Advanced Settings</h2>\n          </div>\n\n        </div>\n\n        <div className=\"body\">\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                Factory Reset<br /><br />\n\n                This will erase all data from your Mella<br /> device, including:<br />\n                - All installed updates<br />\n                - User preferences and Settings<br />\n              </p>\n            </div>\n            <div className=\"rbtn\"\n              // onClick={this._reset}\n              onClick={() => this._upload('reset')}\n            >\n              <div className=\"btn\">Erase all data and reset device</div>\n            </div>\n          </div>\n\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                Mella Base\n              </p>\n            </div>\n            <div className=\"rbtn\"\n\n              onClick={() => this._upload1('base')}\n            >\n              <div className=\"btn\">Update Mella Charging Base</div>\n            </div>\n          </div>\n\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                MellaPro Thermometer\n              </p>\n            </div>\n            <div className=\"rbtn\"\n              onClick={() => {\n                // ipcRenderer.send('usbdata', { command: '01', arr: ['11'] })\n              }}\n            >\n              <div className=\"btn\">Connect Bluetooth and Update</div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={this.state.updateModal}\n          // visible={true}\n          element={\n            <div style={{ height: px(200), borderRadius: px(20) }} className=\"upload\">\n\n              {/* <p>{this.state.uploadText} </p> */}\n              <p style={{ color: '#000', padding: 0, margin: 0 }}>{this.state.uploadText}</p>\n            </div>\n          }\n        />\n        <Modal\n          open={this.state.isModalOpen}\n          // width={432}\n          className='tipModal'\n          centered\n          keyboard={false}\n          closable={false}\n          footer={null}\n        >\n          <div className='modalContentBox'>\n            <p className=\"title\">An update for the Mella Pro Charger is available</p>\n            <div className=\"modalBtnBox\">\n              <Button\n                type=\"primary\"\n                shape=\"round\"\n                size='middle'\n                onClick={() => this.setState({ isModalOpen: false })}\n                className=\"modalBtn\"\n              >\n                cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                shape=\"round\"\n                size='middle'\n                onClick={() => {\n                  this._upload1('base');\n                  this.setState({ isModalOpen: false })\n                }}\n                className=\"modalBtn\"\n              >\n                Update Mella Charging Base\n              </Button>\n            </div>\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx",["665","666","667","668","669","670"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Button,\r\n  Upload,\r\n} from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { px } from '../../utils/px';\r\nimport Heard from '../../utils/heard/Heard'\r\n\r\nimport using from '../../assets/images/using.png'\r\nimport measuring from '../../assets/images/measuring.png'\r\nimport unassigned from '../../assets/images/unassigned.png'\r\nimport adding from '../../assets/images/adding.png'\r\nimport email from '../../assets/images/email.png'\r\nimport phone from '../../assets/images/phone.png'\r\nimport complaint from '../../assets/images/complaint.png'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\nimport { savefeedback } from '../../api';\r\n\r\nlet storage = window.localStorage;\r\nconst Help = () => {\r\n  const [form] = Form.useForm();\r\n  const { TextArea } = Input;\r\n  let list = [\r\n    {\r\n      img: using,\r\n      title: 'Using the app'\r\n    }, {\r\n      img: measuring,\r\n      title: 'Measuring with Mella'\r\n    }, {\r\n      img: unassigned,\r\n      title: 'Unassigned Readings'\r\n    },\r\n    {\r\n      img: adding,\r\n      title: 'Adding New Users'\r\n    },\r\n  ];\r\n  let num = 150 / list.length;\r\n  let mar = num + 'px';\r\n  let history = useHistory();\r\n  const [opinionsVisible, setOpinionsVisible] = useState(false);//弹窗显隐\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n  const [fileList, setFileList] = useState([]);//图片组\r\n\r\n  const changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big');\r\n  }\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    setOpinionsVisible(false);\r\n    setFileList([]);\r\n  };\r\n  //提交bug优化信息\r\n  const onFinish = (e) => {\r\n    setLoading(true);\r\n    let imageIds = []\r\n    _.map(fileList, (item) => {\r\n      imageIds.push(item.response.data.imageId)\r\n    })\r\n    let data = {\r\n      ...e,\r\n      imageIds: _.toString(imageIds),\r\n      userId: storage.userId\r\n    };\r\n    savefeedback(data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          setOpinionsVisible(false);\r\n          message.success('Submit Successfully~');\r\n        } else {\r\n          message.success('submit Failure!');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.success('submit Failure!');\r\n      })\r\n\r\n\r\n  };\r\n  //提交异常\r\n  const onFinishFailed = (e) => {\r\n    message.error('Please fill in the correct information!');\r\n  };\r\n  /**\r\n * 上传文件前校验\r\n */\r\n  const beforeNormFile = (e) => {\r\n    // 检查图片类型\r\n    const isJPG = e.type === 'image/jpeg';\r\n    const isPNG = e.type === 'image/png';\r\n    const isBMP = e.type === 'image/bmp';\r\n    const isGIF = e.type === 'image/gif';\r\n    const isWEBP = e.type === 'image/webp';\r\n    const isPic = isJPG || isPNG || isBMP || isGIF || isWEBP;\r\n    //文件大小校验\r\n    const isLt2M = e.size / 1024 / 1024 < 4;\r\n    if (!isPic) {\r\n      message.error(`${e.name} not a picture file`);\r\n    } else if (!isLt2M && isPic) {\r\n      message.error(`${e.name}Upload is not allowed if the limit exceeds 4M~`);\r\n    }\r\n    return isPic && isLt2M ? true : Upload.LIST_IGNORE;\r\n  };\r\n  /**\r\n   * Base64\r\n   */\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  /**\r\n * 文件上传后处理\r\n */\r\n  const handleChange = async (info) => {\r\n    console.log('info: ', info);\r\n    if (info.file.status === 'done') {\r\n      setFileList(info.fileList);\r\n    }\r\n    if (info.file.status === 'removed') {\r\n      setFileList(info.fileList);\r\n    }\r\n\r\n    // getBase64(info.file.originFileObj, (imageUrl) => {\r\n    //   setLoading(false);\r\n    //   setImageUrl(imageUrl);\r\n    // });\r\n  };\r\n  //添加图片按钮\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Upload\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', changeFenBianLv)\r\n    return (() => {\r\n      let ipcRenderer = window.electron.ipcRenderer\r\n      ipcRenderer.removeListener('changeFenBianLv', changeFenBianLv)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('fileList', fileList);\r\n  }, [fileList])\r\n\r\n  return (\r\n    <>\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n            />\r\n          </div>\r\n          <div className=\"list\">\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}>\r\n                  <>\r\n                    <img src={data.img} alt=\"\" />\r\n                    <p>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"popularArticles\">\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"time\">\r\n            <p style={{ fontSize: px(24) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(24) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={complaint} alt=\"\" />\r\n            <div className=\"text\">Make a Suggestion</div>\r\n            <p\r\n              onClick={() => { setOpinionsVisible(true) }}\r\n            >\r\n              Submit Opinions\r\n            </p>\r\n          </div>\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" />\r\n            <div className=\"text\">Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              onClick={(e) => { }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" />\r\n            <div className=\"text\">Bark at Us!</div>\r\n            <div className=\"text\">201.977.6411</div>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          visible={opinionsVisible}\r\n          destroyOnClose={true}\r\n          centered\r\n          maskClosable={false}\r\n          width={700}\r\n          onCancel={handleCancel}\r\n          className=\"opinionsModal\"\r\n          footer={[]}\r\n        >\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input title!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Clear titles can be verified more quickly\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input description!',\r\n\r\n                },\r\n                {\r\n                  min: 15,\r\n                  message: 'No less than 15 words'\r\n                }\r\n              ]}\r\n            >\r\n              <TextArea\r\n                showCount\r\n                maxLength={500}\r\n                autoSize={{\r\n                  minRows: 3,\r\n                  maxRows: 5,\r\n                }}\r\n                placeholder=\"Please describe your proposed use scenario and your optimization/improvement plan in detail (no less than 15 words)\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"imageIds\"\r\n              label={`${'Related pictures or screenshots' + '(' + fileList.length + '/' + 5 + ')'}`}\r\n            // valuePropName=\"fileList\"\r\n            >\r\n              <Upload\r\n                accept=\"image/*\"\r\n                name=\"img\"\r\n                action=\"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/image/uploadImage\"\r\n                beforeUpload={beforeNormFile}\r\n                onChange={handleChange}\r\n                withCredentials={true}\r\n                listType=\"picture-card\"\r\n              >\r\n                {fileList.length >= 5 ? null : uploadButton}\r\n              </Upload>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <div className='bugSubmitBox'>\r\n                <Button type=\"primary\" htmlType=\"submit\" size='large' loading={loading} block>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default Help;\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx",["671","672","673","674","675","676","677","678","679"],"import React, { Component } from 'react'\nimport { Menu, message, Select, Button, Spin, Avatar } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport reddog from '../../assets/images/reddog.png'\nimport redcat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport selectphoto from '../../assets/images/sel.png'\n\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport AvatarUpload from '../../components/avatar/Avatar';\nimport { petPicture } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\nimport { getUserInfoByUserId, updateUserInfo, selectPetInfoByUserId } from '../../api/mellaserver/user';\n\nimport { getPersonPetByUserId } from '../../api/mellaserver/petall';\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nclass EditParent extends Component {\n  state = {\n    lastName: '',       //宠物主人性\n    firstName: '',      //宠物主人名\n    email: '',          //邮箱号\n    phone: '',          //电话号码\n    spin: false,        //加载中\n    imageId: null,      //图片的ID值\n    petList: [],         //当前这个宠物主人下的所有宠物\n    userId: '',          //当前这个宠物主人的userId\n    userImageUrl: '',\n    loading: false,//加载\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (this.props.history.location.userId) { //接受入参\n      let userId = this.props.history.location.userId\n      this.getPersonPet(userId);\n      this._getParent(userId);\n      this.setState({\n        userId,\n      })\n    }\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    this.setState({\n    })\n  }\n  //获取用户详情信息\n  _getParent = (data) => {\n    this.setState({\n      spin: true\n    })\n    getUserInfoByUserId(data)\n      .then(res => {\n        if (res.msg === 'success') {\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\n          firstName = firstName ? firstName : ''\n          phone = phone ? phone : ''\n          email = email ? email : ''\n          lastName = lastName ? lastName : ''\n          this.setState({\n            userImageUrl,\n            firstName,\n            lastName,\n            phone,\n            email,\n            imageId,\n            spin: false\n          })\n        } else {\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  //获取用户当前组织下的所有宠物\n  getPersonPet = (userId) => {\n    this.setState({ loading: true });\n    let newData = {\n      orgId: storage.lastOrganization,\n      userId: userId,\n    }\n    getPersonPetByUserId(newData)\n      .then((res) => {\n        this.setState({ loading: false });\n        if (res.msg === 'success') {\n          this.setState({ petList: res.data })\n        } else {\n          message.error('Failed to obtain pet information');\n        }\n      })\n      .catch((err) => {\n        message.error('Failed to obtain pet information');\n      })\n  }\n  _petSpecies = () => {\n    let { userImageUrl } = this.state\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\n    let { firstName, lastName } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>First Name</p>\n            <input\n              type=\"text\"\n              value={firstName}\n              onChange={(item) => {\n                this.setState({\n                  firstName: item.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Last Name</p>\n            <input\n              type=\"text\"\n              value={lastName}\n              onChange={(item) => {\n                this.setState({\n                  lastName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <AvatarUpload\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _petName = () => {\n    let { email, phone } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物列表\n  petList = () => {\n    let { petList } = this.state\n    let options = petList.map((item, index) => {\n      let { url, breedName, birthday, gender, petName, imageId, petSpeciesBreedId } = item\n      let images = `url(${url}?download=0&width=150)`\n      let petAge = moment(new Date()).diff(moment(birthday), 'years')\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div className=\"itemL\">\n              <Avatar src={this.shoePetPicture(petSpeciesBreedId, url)} size={50} />\n              <p\n                onClick={(e) => {\n                  let location = {\n                    pet: { ...item },\n                    userId: this.props.history.location.userId\n                  }\n                  this.props.history.push({ pathname: '/page9', ...location });\n                }}\n              >\n                {petName}\n              </p>\n            </div>\n            <div className=\"itemC\">\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\n            </div>\n            <div className=\"itemR\">\n              <p>{`${breedName}`}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\n    if (petList.length > 3) {\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\n    }\n    return (\n      <ul style={liStyle}>\n        {options}\n      </ul>\n    )\n  }\n  //保存\n  save = () => {\n    message.destroy()\n    let { firstName, lastName, email, phone, imageId, userId } = this.state\n    console.log({ firstName, lastName, email, phone, imageId });\n    let parames = {\n      userId,\n      email,\n      phone,\n      firstName,\n      lastName,\n      imageId\n    }\n    this.setState({\n      spin: true\n    })\n    message.destroy()\n    updateUserInfo(parames)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          this.props.history.goBack()\n        } else {\n          message.error('fail to edit')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        message.error('fail to edit')\n        console.log(err);\n      })\n  }\n  //选择宠物头像\n  shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  render() {\n    return (\n      <div id=\"editParent\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"editPetInfo_top\" >\n          <div className=\"parentInfo\">\n            <div className=\"title\" >{`Parent Information`}</div>\n            <div className=\"info\">\n              {this._petSpecies()}\n              {this._petName()}\n            </div>\n          </div>\n          <div className=\"pets\">\n            <div className=\"petsTitle\">\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\n              {/* <Button type=\"primary\" shape=\"round\">+ Add New Pet</Button> */}\n            </div>\n            <div className=\"petList\">\n              {this.petList()}\n            </div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              message.destroy()\n              this.props.history.push('/menuOptions/petAndParents');\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              this.save();\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n      </div>\n    )\n  }\n};\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(EditParent);\n\n\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx",["680","681","682","683","684"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { } from \"../../store/actions\";\nimport {\n  Layout,\n  Button,\n  Form,\n  Input,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n  message,\n} from \"antd\";\n\nimport changePhoto from '../../assets/images/changePhoto.png';\n\nimport { px, mTop } from \"../../utils/px\";\nimport countryList from '../../utils/areaCode/country';\nimport Avatar from '../../components/avatar/Avatar'\nimport { getUserInfoByUserId, update } from '../../api'\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst MyAccount = ({ bodyHeight }) => {\n  let storage = window.localStorage;\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [imageId, setImageId] = useState();\n  const [petUrl, setPetUrl] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [country, setCountry] = useState('US');\n  const [countryArr, setCountryArr] = useState();\n  const [infoData, setInfoDate] = useState();\n\n  const onFinish = (values) => {\n    let array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n    for (let index = 0; index < _.size(values.domain); index++) {\n      array[_.toNumber(values.domain[index])] = '1';\n    }\n    let reg = new RegExp(',', \"g\");\n    let res = _.toString(array).replace(reg, '');\n    let data = {\n      ...values,\n      imageId: imageId,\n      domain: res,\n      userId: storage.userId\n    };\n    update(data)\n      .then((res) => {\n        if (res.msg === 'success') {\n          message.success('The user information is updated successfully');\n        } else {\n          message.error('Description Failed to update user information');\n        }\n      })\n  };\n\n  useEffect(() => {\n    let arr = countryList.map(item => item.locale)\n    arr.sort(function (a, b) {\n      return a.localeCompare(b)\n    })\n    setCountryArr(arr);\n  }, []);\n\n  useEffect(() => {\n    getUserInfoByUserId(storage.userId)\n      .then((res) => {\n        if (res.flag === true) {\n          let newData = {\n            ...res.data,\n            domain: _.toArray(res.data.domain)\n\n          }\n          let arr = [];\n          for (let index = 0; index < _.size(newData.domain); index++) {\n            if (newData.domain[index] === '1') {\n              arr.push(_.toString(index));\n            }\n          }\n          newData.domain = arr;\n          form.setFieldsValue(newData);\n          setInfoDate(newData);\n          setImgUrl(res.data?.userImage?.url);\n        }\n      })\n  }, [])\n\n  return (\n    <Layout className=\"myAccountBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{\n          height: '100%',\n          backgroundColor: '#FFFFFF',\n          borderBottom: '2px solid #979797',\n          display: 'flex'\n        }}>\n          <span className=\"headerTitle\">My Account</span>\n        </div>\n      </div>\n      <div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={onFinish}\n          className=\"accountForm\"\n        >\n          <Row>\n            <Col flex={1} className=\"leftColBox\">\n              <Form.Item valuePropName=\"fileList\" name=\"imageId\" className=\"imageFormItem\">\n                <div style={{ display: 'grid', justifyItems: 'center', alignItems: 'center' }}>\n                  <Avatar\n                    init={\n                      <div className=\"ciral\">\n                        <img src={imgUrl ? imgUrl : changePhoto} alt=\"\" id=\"touxiang\" height=\"300px\" />\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Change Photo</p>\n                      </div>\n                    }\n                    getinfo={(val) => {\n                      if (val) {\n                        setImageId(val);\n                      }\n\n                    }}\n                    getAllInfo={(val) => {\n                      if (val.url) {\n                        setPetUrl(val.url);\n                      }\n                    }}\n                  />\n                </div>\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n            <Col flex={1} className=\"rightColBox\">\n              <Form.Item label=\"FirstName\" name=\"firstName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"LastName\" name=\"lastName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"Phone\" name=\"phone\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item className=\"addressFormItem\" label=\"Address\">\n            <div style={{ display: 'flex' }}>\n              <Form.Item name=\"address1\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address1\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"address2\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address2\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"city\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"city\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"state\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"state\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"zipcode\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"zipcode\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"country\">\n                <Select\n                  showSearch\n                  style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\n                  bordered={false}\n                  optionFilterProp=\"children\"\n                  defaultValue=\"US\"\n                  // onChange={onChange}\n                  onSelect={(val) => { setCountry(val) }}\n                  filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                // open\n                // dropdownClassName=\"addressSelectBox\"\n                >\n                  {_.map(countryArr, (item, index) => (\n                    <Option key={index} value={item}>{item}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </div>\n          </Form.Item>\n          <Form.Item className=\"expertiseFormItem\" label=\"Areas of Expertise\" name=\"domain\">\n            <Checkbox.Group>\n              <Row>\n                <Col span={6}>\n                  <Checkbox\n                    value='0'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Dogs\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='1'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cats\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='2'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Small Pets\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='3'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Nutrition\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='4'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Surgery\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='5'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Zoo\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='6'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Wildlife\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='7'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cardiology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='8'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Neurology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='9'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Anaesthesia\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='10'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Other\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className=\"btnFormItem\">\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\" size=\"large\" style={{ width: px(260) }}>Save Changes</Button>\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n\nMyAccount.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({}),\n)(MyAccount);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx",["685","686","687","688","689","690","691","692"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport close from '../../assets/img/close.png'\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport Avatar from '../../components/avatar/Avatar'\r\nimport moment from 'moment'\r\nimport './index.less';\r\nimport { listDoctorsByAdmin } from '../../api/mellaserver/organization'\r\nimport { admin_users } from '../../api/mellaserver/new'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    admin_users(userId, params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx",["693","694"],"import React, { Component } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport { mTop, px, MTop, } from '../../utils/px';\nimport electronStore from '../../utils/electronStore';\n\nimport back_white from '../../assets/img/back-white.png';\nimport back_hui from '../../assets/img/back-hui.png';\nimport redclose from '../../assets/img/redclose.png';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet num07 = 0       //接收到07命令行的次数\n\n\nexport default class AddDevice extends Component {\n\n  state = {\n    noUSB: false,\n    devicesList: [],\n    selectDevice: null,\n    // selectDevice: true,\n    reName: '',\n    saveDeviceMac: []  //这是已经保存过的设备的macid\n\n  }\n\n  componentDidMount() {\n    message.destroy()\n\n    ipcRenderer.send('small')\n    // 监听分辨率是否改变\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('noUSB', this._noUSB)\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\n    if (devicesList) {\n      let saveDeviceMac = []\n      for (let i = 0; i < devicesList.length; i++) {\n        const element = devicesList[i];\n        saveDeviceMac.push(element.macId)\n      }\n      this.setState({\n        saveDeviceMac\n      })\n    }\n\n\n\n    // const timer = setTimeout(() => {\n    //   let deviceList = [\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\n    //   ]\n    //   this.setState({\n    //     devicesList: deviceList\n    //   })\n    //   clearTimeout(timer)\n    // }, 500);\n\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n\n        this.setState({\n          noUSB: true\n        })\n      }\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    // console.log(data);\n    this.command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    const instruction = [255]\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    // console.log(dataArr1);\n    const commandArr = {\n      255: () => {//蓝牙软尺广播的数据\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n              }\n              bluName = str\n              break;\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n            case 3: console.log('----尺子的,不知道什么用'); break;\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let macId = ''\n        if (bluData.length > 7) {\n          macId = this.getMac(bluName, bluData)\n        }\n\n\n        let sameFlog = this.state.devicesList.some((device, index) => {\n          return device.macId === macId\n        })\n        if (sameFlog || !macId) {   //重复直接退出\n          return\n        }\n        let deviceType = ''\n        switch (bluName) {\n          case 'Biggie':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n          case 'C19':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n\n          case 'MaeBowl':   //这是称量碗\n            deviceType = 'maeBowl'\n            break;\n\n          case 'Mella Measure': //这是蓝牙尺\n            deviceType = 'tape'\n            break;\n\n        }\n        if (macId && deviceType && bluName) {\n          let json = {\n            name: bluName,\n            deviceType,\n            macId\n          }\n          let deviceArr = [].concat(this.state.devicesList)\n          deviceArr.push(json)\n          this.setState({\n            devicesList: deviceArr\n          })\n        }\n\n\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  getMac = (bluName, bluData) => {\n    switch (bluName) {\n      case 'Biggie':\n      case 'MaeBowl':\n      case 'Mella Measure':\n      case 'C19':\n        let str = bluData[1]\n        for (let i = 2; i < 7; i++) {\n          str += `:${bluData[i]}`\n        }\n        return str\n\n\n      default:\n        break;\n    }\n\n  }\n\n\n\n  changeFenBianLv = (e) => {\n    ipcRenderer.send('small')\n    this.setState({\n    })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  body = () => {\n    let { noUSB, devicesList, selectDevice, reName } = this.state\n    if (selectDevice) {\n      return <div className=\"addDevice flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\n            this Mella device?</div>\n\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                this.setState({\n                  reName: value.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write the name\n            on the sticker provided so it is easy\n            to select your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              console.log('---', deviceList);\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              let { saveDeviceMac } = this.state\n              saveDeviceMac.push(selectDevice.macId)\n              this.setState({\n                saveDeviceMac,\n                selectDevice: null,\n                reName: ''\n              })\n\n            }}\n          >\n            <p className='btnText'>Add Another</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              this.props.history.goBack()\n\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n            {/* < MyModal\n              visible={true}\n              element={\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                  <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                    <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\n                  </div>\n                  <p>\n                    {'searching...'}\n                  </p>\n                </div>\n              }\n            /> */}\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                {'searching...'}\n              </p>\n            </div>\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n            let { saveDeviceMac } = this.state\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  this.setState({\n                    selectDevice: item\n                  })\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div id=\"addDevice\">\n        <div className=\"heaed\">\n          <div className=\"l\"\n          >\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                let { selectDevice } = this.state\n                if (selectDevice) {\n                  this.setState({\n                    selectDevice: null\n                  })\n                } else {\n                  this.props.history.goBack()\n                }\n\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n        <div className=\"body flex\">\n          {this.body()}\n        </div>\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx",["695","696","697"],"import React, { Component, } from 'react'\r\nimport {\r\n  Tag,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport temporaryStorage from '../../utils/temporaryStorage'\r\nimport { px } from '../../utils/px';\r\nimport Button from '../../utils/button/Button';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\n\r\nimport './index.less';\r\nimport { checkUser, inviteUserByEmail, mellaLogin } from '../../api';\r\n\r\nexport default class Team extends Component {\r\n\r\n  state = {\r\n\r\n    tags: [],\r\n    inputVisible: false,\r\n    inputValue: '',\r\n    editInputIndex: -1,\r\n    editInputValue: '',\r\n    visible: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  handleClose = removedTag => {\r\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    console.log(tags);\r\n    this.setState({ tags });\r\n  };\r\n\r\n  showInput = () => {\r\n    this.setState({ inputVisible: true }, () => this.input.focus());\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleInputConfirm = () => {\r\n    const { inputValue } = this.state;\r\n    let { tags } = this.state;\r\n    if (inputValue && tags.indexOf(inputValue) === -1) {\r\n      console.log('输入的内容为：', inputValue);\r\n      message.destroy()\r\n      checkUser(inputValue)\r\n        .then(res => {\r\n\r\n\r\n          console.log('检测邮箱存不存在', res);\r\n\r\n          if (res.code) {\r\n            switch (res.code) {\r\n\r\n              case 11011:\r\n                console.log('邮箱存在，发送邮件');\r\n                tags = [...tags, inputValue];\r\n                console.log(tags);\r\n\r\n                this.setState({\r\n                  tags,\r\n                  inputVisible: false,\r\n                  inputValue: '',\r\n                });\r\n                break;\r\n              // case 11012:\r\n              //     console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n              // case 11013:\r\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n              case 11014:\r\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                message.error('This mailbox was not found!', 3)\r\n                this.setState({\r\n                  inputVisible: false,\r\n                  inputValue: '',\r\n                });\r\n                break;\r\n\r\n            }\r\n          } else {\r\n            console.log('系统错误', res);\r\n            message.error('system error')\r\n            this.setState({\r\n              spin: false\r\n            })\r\n          }\r\n\r\n\r\n        })\r\n        .catch(err => {\r\n          message.error(`Error:${err.message}`)\r\n          console.log('检测邮箱号的接口出错了', err);\r\n        })\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  saveInputRef = input => {\r\n    this.input = input;\r\n  };\r\n\r\n  saveEditInputRef = input => {\r\n    this.editInput = input;\r\n  };\r\n\r\n  _next = () => {\r\n    message.destroy()\r\n    let { tags } = this.state\r\n    let { userId } = temporaryStorage.logupSuccessData\r\n    let { organizationId } = temporaryStorage.logupOrganization\r\n    console.log({ tags, userId, organizationId });\r\n    if (tags.length === 0) {\r\n      this._logIn()\r\n    }\r\n    this.setState({\r\n      visible: true\r\n    })\r\n    console.log('入参:', tags);\r\n    inviteUserByEmail(userId, organizationId, tags)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag === true) {\r\n          console.log('成功，跳转');\r\n          message.success('Invitation successful', 3)\r\n          this._logIn()\r\n        } else {\r\n          this.setState({\r\n            visible: false\r\n          })\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n  _logIn = () => {\r\n\r\n    let storage = window.localStorage;\r\n    let sign = storage.saveSign\r\n    try {\r\n      sign = JSON.parse(sign)\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n    let { email, hash } = sign\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: '1'\r\n    }\r\n    console.log('登录入参:', params);\r\n    mellaLogin(params)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        if (res.status && res.status === 404) {\r\n          message.error('system error');\r\n          return\r\n        }\r\n        if (res.code === 10001 && res.msg === '账号错误') {\r\n          message.error('Account error');\r\n          return\r\n        }\r\n        if (res.code === 10002 && res.msg === '密码错误') {\r\n          message.error('wrong password')\r\n          return;\r\n        }\r\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n          return\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === 'success') {\r\n          console.log('账号密码正确，登录进去了');\r\n          let { userWorkplace, lastOrganization, token } = res.success\r\n          storage.token = token\r\n          storage.userId = ''\r\n\r\n          storage.userId = res.success.userId\r\n          storage.roleId = res.success.roleId\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = ''\r\n          storage.defaultCurrent = ''\r\n\r\n\r\n\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace)\r\n            let connectionKey = ''\r\n            for (let i = 0; i < userWorkplace.length; i++) {\r\n              const element = userWorkplace[i];\r\n              if (element.organizationEntity) {\r\n                if (element.organizationEntity.organizationId === lastOrganization) {\r\n\r\n                  if (element.organizationEntity.connectionKey) {\r\n                    connectionKey = element.organizationEntity.connectionKey\r\n                  }\r\n                  if (element.roleId) {\r\n                    console.log(element.roleId);\r\n                    storage.roleId = element.roleId\r\n                  }\r\n\r\n                  break\r\n                }\r\n              }\r\n\r\n            }\r\n            console.log('----------key值为：', connectionKey);\r\n            storage.connectionKey = connectionKey\r\n\r\n          } else {\r\n            storage.userWorkplace = ''\r\n            storage.connectionKey = ''\r\n\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          this.props.history.push('/menuOptions/ConnectWorkplace')\r\n\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n    // console.log('---', editInputIndex);\r\n    return (\r\n      <div id=\"inviteTeam\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n          <div className=\"text\">Invite your Team</div>\r\n\r\n          <div className=\"addF\">\r\n            <p>To:</p>\r\n            <div className=\"add\">\r\n\r\n              <>\r\n                {tags.map((tag, index) => {\r\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                  const tagElem = (\r\n                    <Tag\r\n                      className=\"edit-tag\"\r\n                      key={tag}\r\n                      closable={true}\r\n                      onClose={() => this.handleClose(tag)}\r\n                    >\r\n                      <span>\r\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                      </span>\r\n                    </Tag>\r\n                  );\r\n                  return isLongTag ? (\r\n                    <Tooltip title={tag} key={tag}>\r\n                      {tagElem}\r\n                    </Tooltip>\r\n                  ) : (\r\n                    tagElem\r\n                  );\r\n                })}\r\n                {inputVisible && (\r\n                  <Input\r\n                    ref={this.saveInputRef}\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    className=\"tag-input\"\r\n                    value={inputValue}\r\n                    onChange={this.handleInputChange}\r\n                    onBlur={this.handleInputConfirm}\r\n                    onPressEnter={this.handleInputConfirm}\r\n                  />\r\n                )}\r\n                {!inputVisible && (\r\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                    <PlusOutlined />Press Enter to add mailbox\r\n                  </Tag>\r\n                )}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn\"\r\n          style={{ padding: `${px(40)}px 0` }}\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._logIn}\r\n            text={'Skip'}\r\n          >\r\n            Skip\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._next}\r\n            text={'Send'}\r\n          >\r\n\r\n          </Button>\r\n        </div>\r\n        <MyModal visible={this.state.visible} />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",["698","699","700","701"],"import React, { Component } from 'react';\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\nimport './maxminreturn.less'\n\nexport default class MaxMin extends Component {\n    state = {\n        closebgc: '',\n        minbgc: '',\n        closeColor: '',\n    }\n    _close = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('关闭程序');\n        ipcRenderer.send('window-close')\n    }\n    _min = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('最小化程序');\n        ipcRenderer.send('window-min')\n        this.setState({\n            minbgc: '',\n        })\n    }\n    _minMove = () => {\n\n        this.setState({\n            minbgc: 'rgb(229,229,229)'\n        })\n    }\n    _minLeave = () => {\n        this.setState({\n            minbgc: ''\n        })\n    }\n    _closeMove = () => {\n        this.setState({\n            closeColor: 'red',\n            closebgc: '#fff'\n        })\n    }\n    _closeLeave = () => {\n        this.setState({\n            closeColor: ' rgb(245, 145, 145)',\n            closebgc: ''\n        })\n    }\n    _home = () => {\n        console.log(this.props);\n        // this.props.history.push('/')\n    }\n\n    render() {\n        const { closeColor, closebgc, minbgc } = this.state\n        return (\n            <div className=\"maxminreturn\">\n                <div className=\"heard1\">\n                    <div\n                        className=\" iconfont icon-left heard\"\n                        onClick={this.props.onClick1}\n                    />\n                </div>\n\n\n                <div className='headIconBox'>\n\n                </div>\n\n\n                <div className=\"close123\">\n                    <div className=\"home iconfont icon-zhuye3\"\n                        onClick={this.props.onClick}\n                    />\n                    <div\n                        className=\"min iconfont icon-64\"\n                        onClick={this._min}\n                        onMouseEnter={this._minMove}\n                        onMouseLeave={this._minLeave}\n                        style={{ backgroundColor: minbgc }}\n                    ></div>\n\n                    <div\n                        className=\"max iconfont icon-guanbi2\"\n                        onClick={this._close}\n                        onMouseEnter={this._closeMove}\n                        onMouseLeave={this._closeLeave}\n                        style={{ backgroundColor: closebgc, color: closeColor }}\n                    ></div>\n                </div>\n            </div>\n        )\n    }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx",["702","703","704","705","706","707"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  message\r\n} from 'antd';\r\nimport { CaretDownFilled } from '@ant-design/icons';\r\n\r\nimport imgArray from '../../utils/areaCode/imgArray'\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport countryList from '../../utils/areaCode/country';\r\nimport temporaryStorage from '../../utils/temporaryStorage'\r\nimport { px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\n\r\nimport { checkUser, deskRegistAWSSNS, registByAWSSES } from '../../api';\r\n\r\nimport moment from 'moment';\r\n\r\nimport './index.less';\r\n\r\nconst options = [\r\n  { label: 'Dogs', value: 'Dogs' },\r\n  { label: 'Cats', value: 'Cats' },\r\n  { label: 'Small Pets', value: 'Small Pets' },\r\n  { label: 'Nutrition', value: 'Nutrition' },\r\n  { label: 'Surgery', value: 'Surgery' },\r\n  { label: 'Zoo', value: 'Zoo' },\r\n  { label: 'Wildlife', value: 'Wildlife' },\r\n  { label: 'Cardiology', value: 'Cardiology' },\r\n  { label: 'Neurology', value: 'Neurology' },\r\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\r\n  { label: 'Other', value: 'Other' },\r\n]\r\nexport default class VetPrifile extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    otherText: '',\r\n    name: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    birthday: moment(),\r\n    password: '',\r\n    password1: '',\r\n    checboxtValue: [],\r\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\r\n\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    loadVisible: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('_________________config', process.env, process.env.REACT_APP_MELLASERVER_BASE_URL,);\r\n    //发送指令让main.js创建一个big窗口\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //检测是否本地是否有注册信息，有就展示出来。\r\n    console.log(temporaryStorage.logupVetInfo);\r\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\r\n      console.log('进来了');\r\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\r\n      this.setState({\r\n        name: firstName || '',\r\n        lastName,\r\n        email,\r\n        password: hash,\r\n        password1: hash,\r\n        code,\r\n        phone: initPhone || '',\r\n        imgArrayIndex\r\n      })\r\n\r\n\r\n    }\r\n\r\n\r\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\r\n    if (this.props.location && this.props.location.email) {\r\n      this.setState({\r\n        email: this.props.location.email\r\n      })\r\n    }\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _next = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n\r\n\r\n    let params = {\r\n      firstName: name,\r\n      lastName,\r\n      email,\r\n      hash: password,\r\n    }\r\n    if (phone) {\r\n      params.phone = `+${code}${phone}`\r\n    }\r\n\r\n    registByAWSSES(params)\r\n      .then(res => {\r\n\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        // console.log('注册接口返回数据：', res);\r\n        switch (res.code) {\r\n          case 11011:\r\n            console.log('用户已存在，应该跳出弹框')\r\n            this.setState({\r\n              visible: true\r\n            })\r\n\r\n            break;\r\n\r\n          case 20000:\r\n          case 200:\r\n            console.log('可以注册，跳转到下一页');\r\n            temporaryStorage.logupEmailCode = res.data\r\n            params.code = code\r\n            params.initPhone = phone\r\n            params.imgArrayIndex = this.state.imgArrayIndex\r\n            temporaryStorage.logupVetInfo = params\r\n            this.props.history.push('/uesr/logUp/VerifyEmail')\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('注册接口抛出错误：', err);\r\n      })\r\n\r\n  }\r\n  _signIn = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push('/page11')\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\r\n    return (\r\n      <div id=\"vetPrifile\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.push('/')}\r\n          />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), marginBottom: px(120) }}\r\n          >\r\n            Let’s start by creating your account\r\n          </div>\r\n          <div className=\"form\" >\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={name}\r\n                  placeholder=\"First Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      name: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  placeholder=\"Last Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      lastName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Email\"\r\n                  value={email}\r\n                  placeholder=\"Email Address*\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      email: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\r\n                  {countryList.map((item, index) => {\r\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                    return (\r\n                      <li key={index}>\r\n                        <div key={index}\r\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                          onClick={() => {\r\n                            console.log(item, index);\r\n                            this.setState({\r\n                              code: item.code,\r\n                              imgArrayIndex: index\r\n                            })\r\n                            document.getElementById('list').style.display = \"none\"\r\n                          }}\r\n                        >\r\n                          <img src={url} alt=\"\" />\r\n                          <p >{`${item.en}   +${item.code}`}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n\r\n\r\n                <div className='phone'>\r\n                  <div\r\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\r\n                    onClick={() => {\r\n                      document.getElementById('list').style.display = \"block\"\r\n                    }}\r\n                  >\r\n                    <img style={{ zIndex: '888' }}\r\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                    />\r\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                  </div>\r\n\r\n\r\n                  <input\r\n                    type=\"Phone\"\r\n                    value={phone}\r\n                    placeholder=\"Phone Number\"\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        phone: data.replace(/[^\\-?\\d]/g, '')\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password}\r\n                  placeholder=\"Create Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password1}\r\n                  placeholder=\"Confirm  Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password1: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"footText\"\r\n          >Already have an accoun? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\r\n\r\n          {/* 按钮 */}\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n\r\n          visible={this.state.loadVisible}\r\n        />\r\n\r\n        <Modal\r\n\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">Email Already Exists</div>\r\n\r\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\r\n\r\n            <div className=\"btn\">\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false,\r\n                    email: ''\r\n                  })\r\n                }}\r\n              >Try Again</button>\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false\r\n                  })\r\n                  this.props.history.replace('/page11')\r\n                }}\r\n              >Sign Up</button>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx",["708","709","710","711"],"import React, { Component } from \"react\";\r\nimport { Select } from \"antd\";\r\nimport Heart from \"../../utils/heard/Heard\";\r\nimport { px } from \"../../utils/px\";\r\nimport \"./index.less\";\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class ConnectWorkplace extends Component {\r\n  state = {\r\n    orgArr: [],\r\n    workplaceJson: {},\r\n    connectionKey: \"\",\r\n    selectOrgId: -1,\r\n    selectRoleId: \"\",\r\n  };\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    ipcRenderer.send(\"big\");\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n\r\n    let userWorkplace = [];\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\r\n    } catch (error) {\r\n      console.log(\"字符串转对象失败\", error);\r\n    }\r\n    let orgArr = [],\r\n      workplaceJson = {};\r\n    // console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i];\r\n      // console.log('每一项的值：', element);\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element;\r\n        const { name, organizationId, connectionKey } = organizationEntity;\r\n        const { workplaceName, workplaceId } = workplaceEntity;\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          this.setState({\r\n            workplaceName,\r\n            workplaceId: storage.lastWorkplaceId,\r\n          });\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n          this.setState({\r\n            organizationName: name,\r\n            organizationId: storage.lastOrganization,\r\n            selectOrgId: storage.lastOrganization,\r\n          });\r\n        }\r\n\r\n        let orgRepeatFlog = false,\r\n          repeatFlogNum = -1;\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true;\r\n            repeatFlogNum = j;\r\n            break;\r\n          }\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName,\r\n            workplaceId,\r\n          };\r\n          let id = orgArr[repeatFlogNum].organizationId;\r\n          workplaceJson[`${id}`] = workplace;\r\n        } else {\r\n          let connectKey = connectionKey || \"\";\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId,\r\n          };\r\n          let workplace = [\r\n            {\r\n              workplaceName,\r\n              workplaceId,\r\n            },\r\n          ];\r\n          workplaceJson[`${organizationId}`] = workplace;\r\n\r\n          orgArr.push(json);\r\n        }\r\n      }\r\n    }\r\n    // console.log('-----转换后的组织信息--', orgArr, workplaceJson);\r\n    this.setState({\r\n      orgArr,\r\n      workplaceJson,\r\n      connectionKey: storage.connectionKey,\r\n      selectRoleId: storage.roleId,\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    // console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    this.setState({});\r\n  };\r\n\r\n  render() {\r\n    let { orgArr, selectOrgId } = this.state;\r\n    let option = orgArr.map((item, index) => {\r\n      let bac =\r\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\r\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\r\n      return (\r\n        <li\r\n          key={`${item.organizationId}`}\r\n          style={{ background: bac, color: col }}\r\n          onClick={() => {\r\n            this.setState({\r\n              selectOrgId: item.organizationId,\r\n              connectionKey: item.connectionKey,\r\n              selectRoleId: item.roleId,\r\n            });\r\n            // storage.roleId = item.roleId\r\n          }}\r\n        >\r\n          <div className=\"org\" style={{ fontSize: px(16) }}>\r\n            {item.organizationName}\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <div id=\"connectworkplace\">\r\n        <div className=\"heard\">\r\n          <Heart />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"top\">\r\n            <div className=\"title flex\">\r\n              <p style={{ fontSize: px(24), fontWeight: \"800\" }}>\r\n                Connected Workplaces\r\n              </p>\r\n              <div\r\n                className=\"addbtn flex\"\r\n                style={{ height: px(45) }}\r\n                onClick={() => this.props.history.push(\"/menuOptions/NewOrg\")}\r\n              >\r\n                <p>+ Add Workplace</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"tablebox\">\r\n              <div className=\"table\" style={{ height: px(220) }}>\r\n                <ul>{option}</ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"center\"></div>\r\n          <div className=\"footer flex\">\r\n            <div\r\n              className=\"saveBtn flex\"\r\n              style={{ height: px(45) }}\r\n              onClick={() => {\r\n                let {\r\n                  selectOrgId,\r\n                  selectRoleId,\r\n                  connectionKey,\r\n                  workplaceJson,\r\n                } = this.state;\r\n                // console.log({ selectOrgId, selectRoleId, connectionKey, workplaceJson });\r\n                storage.roleId = selectRoleId;\r\n                storage.lastOrganization = selectOrgId;\r\n                try {\r\n                  let key = parseInt(selectOrgId);\r\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\r\n                  // console.log(lastWorkplaceId);\r\n                  storage.lastWorkplaceId = lastWorkplaceId;\r\n                } catch (error) { }\r\n                storage.connectionKey = connectionKey;\r\n                // this.props.history.replace(\"/menuOptions/settings\");\r\n                this.props.history.goBack();\r\n              }}\r\n            >\r\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <MyModal visible={this.state.loading} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",["712","713","714"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './minClose.less'\r\nimport { px, mTop } from './../px'\r\nimport rMin_red from './../../assets/img/min-red.png'\r\nimport rClose_red from './../../assets/img/close-red.png'\r\n\r\nimport rMin_white from './../../assets/img/min-white.png'\r\nimport rClose_white from './../../assets/img/close-white.png'\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, imgWidth }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(rMin_red)\r\n  const [closebgc, setClosebgc] = useState('')\r\n  const [rClose, setRClose] = useState(rClose_red)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(rMin_white)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n    ipcRenderer.send('window-min')\r\n\r\n  }\r\n\r\n\r\n  const closeMouseEnter = () => {\r\n    setClosebgc('rgba(232,17,35)')\r\n    setRClose(rClose_white)\r\n  }\r\n  const closeMouseLeave = () => {\r\n    setClosebgc('')\r\n    setRClose(rClose_red)\r\n  }\r\n  const closeClock = () => {\r\n    ipcRenderer.send('window-close')\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      id='minClose'\r\n    >\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n      <div\r\n        className='min_icon'\r\n        onClick={closeClock}\r\n        style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={closeMouseEnter}\r\n        onMouseLeave={closeMouseLeave}\r\n      >\r\n        <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.string,\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: `${px(20)}px`\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",["715","716"],"\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx",["717","718","719","720","721","722","723","724","725","726","727","728","729","730","731"],"import React, { Component } from \"react\";\r\nimport { Modal, message } from \"antd\";\r\n\r\nimport Heard from \"../../utils/heard/Heard\";\r\nimport { px, win, timerFun } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport { compareArray } from \"../../utils/current\";\r\n\r\nimport HardAndPetsUI from \"./HardAndPetsUI\";\r\nimport HardWareTypeUI from \"./hardWareTypeUI\";\r\nimport AddDevice from \"./AddDevice\";\r\n\r\nimport BiggiePage from \"../../pages/biggiePage\";\r\nimport ScanPage from \"../../pages/scanPage\";\r\nimport AllPets from \"../../pages/allPetsPage\";\r\nimport ScheduledPetPage from \"../../pages/scheduledPetsPage\";\r\nimport AddScheduledPet from \"../../pages/addScheduledPet\";\r\nimport ClininalStudy from \"../../pages/clinicalStudyPage\";\r\nimport CombineScales from \"../../pages/combineScales\";\r\nimport OtterEQPage from '../../pages/otterEQ';\r\nimport MyAccount from \"../../pages/myAccount\";\r\nimport TemperaturePage from \"../../pages/temperaturePage\";\r\nimport MabelPage from \"../mabelPage\";\r\nimport EnrolledPlan from '../enrolledPlan';\r\n\r\n\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setHardwareList,\r\n  selectHardwareModalShowFun,\r\n  setIsHaveUsbDeviceFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n  setMellaDeviceIdFun,\r\n  setMellaMeasureNumFun,\r\n  setBiggieConnectStatusFun,\r\n  setBiggieBodyFatFun,\r\n  setBiggieBodyWeightFun,\r\n  setBiggieUnitFun,\r\n  setBiggieSameWeightCountFun,\r\n  setRulerConnectStatusFun,\r\n  setRulerMeasureValueFun,\r\n  setRulerUnitFun,\r\n  setRulerConfirmCountFun,\r\n  setReceiveBroadcastHardwareInfoFun,\r\n} from \"../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\n\r\n// let ipcRenderer = window.require(\"electron\").ipcRenderer;\r\nlet ipcRenderer = window.electron.ipcRenderer;\r\nlet isMeasure = false; //是否正在测量,用于判断是否需要发送指定指令给USB,查看硬件是否连接\r\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\r\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\r\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\r\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\r\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\r\nlet time194 = 0\r\n\r\n//用于预测的东西\r\nlet clinicalYuce = [],\r\n  clinicalIndex = 0;\r\n\r\nlet storage = window.localStorage;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    //body部分窗口高度\r\n    bodyHeight: 0,\r\n    //本地保存的硬件类型数组,不包括Add这个类型\r\n    devicesTypeList: [],\r\n    //展示硬件类型的数组\r\n    showHardWareTypeList: [],\r\n    //是否有USB设备\r\n    isHaveUsbDevice: true,\r\n    //mella温度计测量状态\r\n    mellaMeasureStatus: \"disconnected\", //connected,disconnected,isMeasuring,complete\r\n\r\n    //点击菜单的序号\r\n    clickMenuIndex: \"1\",\r\n    err07Visible: false,\r\n    units: '℉'\r\n  };\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    timerFun();\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    //获取窗口高度\r\n    this.resize();\r\n    //react监听屏幕窗口改变\r\n    window.addEventListener(\"resize\", this.resize);\r\n\r\n    //获取设备类型\r\n    this.getDevicesType();\r\n\r\n    //检测USB设备发来的信息\r\n    ipcRenderer.on(\"sned\", this._send);\r\n    //检测是否有USB设备\r\n    ipcRenderer.on(\"noUSB\", this._noUSB);\r\n    //定时查看mella温度计是否与底座连接或断开\r\n    this._whether_to_connect_to_mella();\r\n\r\n    //获取本地设置\r\n    this.getLocalSetting();\r\n    //获取单位\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`) || {}\r\n    // console.log('----', hardSet);\r\n    let { isHua, } = hardSet\r\n    if (isHua === false) {\r\n      this.setState({\r\n        units: '℃'\r\n      })\r\n    } else {\r\n      this.setState({\r\n        units: '℉'\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    //组件销毁，取消监听\r\n    window.removeEventListener(\"resize\", this.resize);\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n    ipcRenderer.removeListener(\"sned\", this._send);\r\n    ipcRenderer.removeListener(\"noUSB\", this._noUSB);\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    this.rulerTimer && clearTimeout(this.rulerTimer);\r\n    message.destroy();\r\n  }\r\n  //检测到props里的hardwareList更新\r\n  UNSAFE_componentWillReceiveProps(prevProps) {\r\n    //对比props里的hardwareList和state里的hardwareList是否相同\r\n\r\n    if (!compareArray(prevProps.hardwareList, this.state.devicesTypeList)) {\r\n      let showHardWareTypeList = [].concat(prevProps.hardwareList);\r\n      showHardWareTypeList.push({\r\n        type: \"add\",\r\n        devices: [],\r\n      });\r\n      this.setState({\r\n        devicesTypeList: prevProps.hardwareList,\r\n        showHardWareTypeList,\r\n      });\r\n    }\r\n    if (!compareObject(prevProps.menuNum, this.state.clickMenuIndex)) {\r\n      this.setState({\r\n        clickMenuIndex: prevProps.menuNum,\r\n      });\r\n    }\r\n  }\r\n\r\n  changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    // ipcRenderer.send('small')\r\n    ipcRenderer.send(\"big\", win());\r\n    // this.setState({}, () => {\r\n    //   if (this.props.test) {\r\n    //     if (this.props.test.current) {\r\n    //       this.props.test.current.getEchartsInstance().dispose();\r\n    //       this.props.test.current.getEchartsInstance().clear();\r\n    //       setTimeout(() => {\r\n    //         this.props.test.current.getEchartsInstance().resize();\r\n    //       }, 500);\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n  };\r\n  //获取本地设置\r\n  getLocalSetting = () => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (!hardSet) {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false, //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: \"45\" },\r\n        autoOff: { length: 0, number: \"30\" },\r\n      };\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\r\n    }\r\n  };\r\n  //检测USB设备发来的信息\r\n  _send = (e, data) => {\r\n    // console.log('检测USB设备发来的信息', data)\r\n    //data就是测量的数据，是十进制的数字\r\n    this.command(data)();\r\n  };\r\n  //监听是否有USB设备,true代表没有USB设备，false代表有USB设备\r\n  _noUSB = (e, data) => {\r\n    if (data === false) {\r\n      message.destroy();\r\n    } else {\r\n      if (this.state.isHaveUsbDevice) {\r\n        message.destroy();\r\n        if (this.props.selectHardwareType !== \"otterEQ\") {\r\n          message.error(\"The base is not detected. Please insert the base\", 0);\r\n        }\r\n\r\n      }\r\n    }\r\n    if (data === this.props.isHaveUsbDevice) {\r\n      this.props.setIsHaveUsbDeviceFun(!data);\r\n    }\r\n    if (data === this.state.isHaveUsbDevice) {\r\n      this.setState({\r\n        isHaveUsbDevice: !data,\r\n      });\r\n    }\r\n  };\r\n  //监听mella温度计是否与底座连接或断开\r\n  _whether_to_connect_to_mella = () => {\r\n    // console.log(\"监听mella温度计是否与底座连接或断开\");\r\n    message.destroy();\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    //2秒检测一次\r\n    this.detectTimer = setInterval(() => {\r\n      exchangeNum++;\r\n      //如果正在测量或者没有USB设备，不检测\r\n      let { mellaConnectStatus } = this.props\r\n      if (this.state.isHaveUsbDevice && mellaConnectStatus !== 'isMeasuring' && mellaConnectStatus !== 'disconnected') {\r\n        if (exchangeNum % 2 === 0) {\r\n          //让底座发送查询温度计信息指令\r\n          // console.log('获取温度计07');\r\n          ipcRenderer.send(\"usbdata\", { command: \"07\", arr: [\"5A\"] });\r\n        } else {\r\n          // console.log('获取温度计31');\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n        }\r\n      }\r\n\r\n\r\n      //如果底座没有回应，则计算时间差,时间差大于5秒，则没与温度计连接\r\n      if (new Date() - initTime > 6000) {\r\n        this._disconnect_to_mella();\r\n      }\r\n    }, 2000);\r\n  };\r\n  //底座与温度计断开连接\r\n  _disconnect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus, setMellaDeviceIdFun } =\r\n      this.props;\r\n    if (mellaConnectStatus !== \"disconnected\") {\r\n      setMellaConnectStatusFun(\"disconnected\");\r\n    }\r\n    setMellaDeviceIdFun(\"\");\r\n  };\r\n  //底座与温度计连接\r\n  _connect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus } = this.props;\r\n    if (mellaConnectStatus !== \"connected\") {\r\n      setMellaConnectStatusFun(\"connected\");\r\n    }\r\n  };\r\n\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    let dataArr1 = newArr.map((item) => {\r\n      if (item.toString(16).length < 2) {\r\n        return \"0\" + item.toString(16);\r\n      } else {\r\n        return item.toString(16);\r\n      }\r\n    });\r\n    //除了255,其他都是温度计的数据\r\n    let {\r\n      setMellaConnectStatusFun,\r\n      setMellaMeasureValueFun,\r\n      setMellaPredictValueFun,\r\n      setMellaMeasurePartFun,\r\n      mellaMeasurePart,\r\n      mellaConnectStatus,\r\n      setBiggieBodyFatFun,\r\n      setBiggieBodyWeightFun,\r\n      setBiggieConnectStatusFun,\r\n      setBiggieUnitFun,\r\n      setBiggieSameWeightCountFun,\r\n    } = this.props;\r\n    let {\r\n      biggieConnectStatus,\r\n      biggieBodyFat,\r\n      biggieBodyWeight,\r\n      biggieUnit,\r\n      biggieSameWeightCount,\r\n    } = this.props.hardwareReduce;\r\n\r\n    const instruction = [\r\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255, 182,\r\n    ];\r\n\r\n    if (newArr[2] !== 7 && newArr[2] !== 255 && newArr[2] !== 182) {\r\n      initTime = new Date();\r\n      num07 = 0;\r\n      if (mellaConnectStatus === \"disconnected\") {\r\n        this._connect_to_mella();\r\n      }\r\n    } else {\r\n      num07++;\r\n    }\r\n\r\n    const commandArr = {\r\n      209: () => {\r\n        //腋温\r\n        //第一次测量去获取探头ID\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          // console.log(\"去获取探头id\");\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\r\n        let Temp = temp0;\r\n        if (\r\n          Temp === 24.7 ||\r\n          Temp === 0 ||\r\n          Temp === null ||\r\n          Temp === undefined\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        let dataS = {\r\n          sample: clinicalIndex++,\r\n          data0: temp0,\r\n          data1: temp1,\r\n        };\r\n        clinicalYuce.push(dataS);\r\n        if (clinicalYuce.length >= 30) {\r\n          setMellaPredictValueFun(clinicalYuce);\r\n        }\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n        if (mellaMeasurePart !== \"腋温\" && mellaMeasurePart !== \"肛温\") {\r\n\r\n          setMellaMeasurePartFun(\"腋温\");\r\n        }\r\n        this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\r\n      },\r\n      208: () => {\r\n        //耳温\r\n\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[4.18]}`);\r\n        let Temp = temp0;\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n\r\n        if (mellaMeasurePart !== \"耳温\") {\r\n          setMellaMeasurePartFun(\"耳温\");\r\n        }\r\n      },\r\n      193: () => {\r\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\r\n        //为了清除黏贴的数据，使用定时器\r\n        this.time193 && clearTimeout(this.time193);\r\n        this.time193 = setTimeout(() => {\r\n          if (new Date() - time194 < 1000) {\r\n            this.time193 && clearTimeout(this.time193);\r\n            return;\r\n          }\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaMeasureValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            console.log('要去写了', units, temp);\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          this.time193 && clearTimeout(this.time193);\r\n        }, 500);\r\n      },\r\n      194: () => {\r\n        //硬件收到机器学习结果并停止测量，\r\n        this.time193 && clearTimeout(this.time193);\r\n        time194 = new Date()\r\n        console.log(\"---机器学习\", newArr);\r\n        if (mellaConnectStatus !== \"complete\") {\r\n          setMellaConnectStatusFun(\"complete\");\r\n        }\r\n        const timer = setTimeout(() => {\r\n          setMellaMeasureValueFun(this.props.mellaPredictReturnValue);\r\n\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaPredictReturnValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          clearTimeout(timer);\r\n        }, 80);\r\n        clinicalYuce = [];\r\n        clinicalIndex = 0;\r\n      },\r\n      192: () => {\r\n        //温度计收到40开始数据后返回的指令\r\n        switch (newArr[3]) {\r\n          case 90:\r\n            console.log(\"有探头，开始测量的返回指令·\");\r\n            break;\r\n          case 11:\r\n            console.log(\"没有探头，开始测量的返回值\");\r\n            break;\r\n        }\r\n      },\r\n      129: () => {\r\n        //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n      },\r\n      135: () => {\r\n        //硬件的一些基本信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间\r\n         * newArr[8] 背光时间\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n\r\n        let hardSet = electronStore.get(\r\n          `${storage.userId}-hardwareConfiguration`\r\n        );\r\n        if (!hardSet) {\r\n          hardSet = {\r\n            isHua: true,\r\n            is15: true,\r\n            self_tarting: false, //自启动\r\n            isBacklight: true,\r\n            isBeep: true,\r\n            backlightTimer: { length: 140, number: \"45\" },\r\n            autoOff: { length: 0, number: \"30\" },\r\n          };\r\n        }\r\n        let { isHua, is15, self_tarting, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\r\n\r\n        let beep = isBeep ? \"11\" : \"00\";\r\n        let unit = isHua ? \"00\" : \"01\";\r\n        let autoOffNumber = autoOff.number\r\n        let backlightTimerNumber = isBacklight ? backlightTimer.number : '00'\r\n        if (\r\n          dataArr1[7] === autoOffNumber &&\r\n          dataArr1[8] === backlightTimerNumber &&\r\n          dataArr1[9] === beep &&\r\n          dataArr1[10] === unit\r\n        ) {\r\n        } else {\r\n          let setArr = [\"03\", \"ed\", \"07\", \"dd\", autoOffNumber, backlightTimerNumber, beep, unit,];\r\n          ipcRenderer.send(\"usbdata\", { command: \"21\", arr: setArr });\r\n        }\r\n      },\r\n      238: () => {\r\n        //探头松动\r\n        console.log(\"探头松动\");\r\n        message.error(\r\n          \"The probe is loose, please re-install and measure again\",\r\n          5\r\n        );\r\n      },\r\n\r\n      98: () => {\r\n        //蓝牙连接断开\r\n        console.log(\r\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\r\n        );\r\n        firstEar = true;\r\n        // console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 1300) {\r\n          return;\r\n        }\r\n        this._disconnect_to_mella();\r\n      },\r\n      97: () => {\r\n        //蓝牙连接\r\n        console.log(\r\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\r\n        );\r\n        this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        this.getIdTimer = setTimeout(() => {\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n          this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        }, 50);\r\n\r\n\r\n        is97Time = new Date();\r\n        this._connect_to_mella();\r\n      },\r\n      177: () => {\r\n        //探头id\r\n        let dataArr1 = newArr.map((item) => {\r\n          if (item.toString(16).length < 2) {\r\n            return \"0\" + item.toString(16);\r\n          } else {\r\n            return item.toString(16);\r\n          }\r\n        });\r\n\r\n        let id = \"\";\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i];\r\n        }\r\n        // console.log(id, dataArr1[7]);\r\n        setMellaDeviceIdFun(id);\r\n        // this.setState({\r\n        //   probeID: id,\r\n        //   petVitalTypeId: dataArr1[7]\r\n        // })\r\n        if (dataArr1[7] === \"01\") {\r\n          if (mellaMeasurePart !== \"腋温\") {\r\n            setMellaMeasurePartFun(\"腋温\");\r\n          }\r\n        } else if (dataArr1[7] === \"02\") {\r\n          if (mellaMeasurePart !== \"肛温\") {\r\n            setMellaMeasurePartFun(\"肛温\");\r\n          }\r\n        } else if (dataArr1[7] === \"03\") {\r\n          if (mellaMeasurePart !== \"耳温\") {\r\n            setMellaMeasurePartFun(\"耳温\");\r\n          }\r\n        }\r\n      },\r\n      7: () => {\r\n        //发什么收什么，需要去重新插拔底座\r\n        console.log(\"重新插拔底座\");\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true,\r\n          });\r\n        }\r\n      },\r\n      255: () => {\r\n        let length = newArr.length;\r\n        let frameLength = newArr[1]; //帧长\r\n        let itemLength = newArr[3] + 1; //数据位的长度   13\r\n        let dataIndex = 0;\r\n        let bluName = \"\";\r\n        let bluData = [];\r\n\r\n        while (itemLength < length && itemLength + 3 <= frameLength) {\r\n          let itemData = [];\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5]);\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = \"\";\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16);\r\n                str += String.fromCharCode(item);\r\n              }\r\n              bluName = str;\r\n              // console.log('--蓝牙名称:', bluName);\r\n\r\n              break;\r\n\r\n            case 255:\r\n              bluData = itemData;\r\n              break;\r\n            case 7:\r\n              console.log(\"---UUID\");\r\n              break;\r\n            case 239:\r\n              // console.log('---mac地址');\r\n              break;\r\n\r\n            case 3:\r\n              // console.log('----尺子的,不知道什么用');\r\n              break;\r\n\r\n            default:\r\n              console.log(\"直接跳出循环\");\r\n              return;\r\n          }\r\n          dataIndex = itemLength;\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\r\n        }\r\n        // console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n        let { setReceiveBroadcastHardwareInfoFun, hardwareReduce } = this.props;\r\n\r\n        let { receiveBroadcastHardwareInfo } = hardwareReduce;\r\n\r\n        if (bluName.indexOf(\"C19\") !== -1 && bluData.length > 10) {\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: \"00:00:00:00:00:00\",\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          let weight = `0x${bluData[10]}${bluData[11]}`;\r\n          let impedance = `0x${bluData[12]}${bluData[13]}`;\r\n          let sendWeight = null;\r\n          //C19发送的体重值单位只是KG\r\n          try {\r\n            weight = parseInt(weight) / 100;\r\n            if (impedance) {\r\n              impedance = parseInt(impedance);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n          if (weight === biggieBodyWeight) {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          } else {\r\n            setBiggieSameWeightCountFun(0);\r\n            setBiggieBodyWeightFun(weight);\r\n          }\r\n          if (impedance) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n          if (biggieConnectStatus !== \"isMeasuring\") {\r\n            setBiggieConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          if (biggieUnit !== \"kg\") {\r\n            setBiggieUnitFun(\"kg\");\r\n          }\r\n        } else if (bluName.indexOf(\"Mella Measure\") !== -1) {\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          // console.log('结束循环蓝牙名称', bluData)\r\n          let confirmBtn = bluData[8]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[11], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9];\r\n          let num2 = bluData[10];\r\n          let num = getVal(num1, num2);\r\n          try {\r\n            newVal = parseFloat(num);\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2);\r\n            } else {\r\n              newVal = newVal.toFixed(1);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            return `${num1}.${num2}`;\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n        } else if (bluName.indexOf(\"Biggie\") !== -1 && bluData.length > 13) {\r\n          // console.log(\"biggie\", bluData);\r\n          if (bluData[0] !== \"aa\") {\r\n            return;\r\n          }\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n\r\n          let newArr = bluData;\r\n\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n          //定义体重的控制字符\r\n          let weightControl = newArr[8];\r\n          //定义体重的值\r\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(\r\n            newArr[10].toString(16)\r\n          )}`;\r\n          weight = parseInt(weight, 16);\r\n          //定义体脂值\r\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(\r\n            newArr[13].toString(16)\r\n          )}`;\r\n          impedance = parseInt(impedance, 16);\r\n          let arr11 = getVal(newArr[11].toString(16));\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n\r\n          let weightUnits = arr11[1] === \"1\" ? \"lb\" : \"kg\";\r\n          let biggieStatus = \"isMeasuring\";\r\n          switch (weightControl) {\r\n            case 1:\r\n              biggieStatus = \"connected\";\r\n              break;\r\n            case 2:\r\n              biggieStatus = \"isMeasuring\";\r\n              break;\r\n            case 3:\r\n              biggieStatus = \"complete\";\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          if (biggieStatus !== biggieConnectStatus) {\r\n            setBiggieConnectStatusFun(biggieStatus);\r\n          }\r\n          if (weightUnits !== biggieUnit) {\r\n            setBiggieUnitFun(weightUnits);\r\n          }\r\n          if (weight !== biggieBodyWeight) {\r\n            setBiggieBodyWeightFun(weight);\r\n            setBiggieSameWeightCountFun(0);\r\n          } else {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          }\r\n          if (impedance !== biggieBodyFat) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n        } else if (bluName.indexOf(\"MaeBowl\") !== -1 && bluData.length > 10) {\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          //定义硬件版本号\r\n          let hardwareVersion = bluData[7] + bluData[8];\r\n          //定义软件版本号\r\n          let softwareVersion = bluData[9];\r\n          //定义wifi标志位\r\n          let wifiFlag = bluData[10];\r\n          //定义控制字\r\n          let control = bluData[11];\r\n          //定义重量\r\n          let weight = `${getVal(bluData[12].toString(16))}${getVal(\r\n            bluData[13].toString(16)\r\n          )}`\r\n          weight = parseInt(weight, 16);\r\n          let arr11 = bluData[14]\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n          let weightUnits = null\r\n          switch (arr11[1]) {\r\n            case '0':\r\n              weightUnits = 'kg'\r\n\r\n              break;\r\n            case '1':\r\n              weightUnits = 'lb'\r\n\r\n              break;\r\n            case '2':\r\n              weightUnits = 'g'\r\n\r\n              break;\r\n            case '3':\r\n              weightUnits = 'ml'\r\n\r\n              break;\r\n            case '4':\r\n              weightUnits = 'oz'\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n\r\n        } else if (bluName.indexOf(\"Tabby\") !== -1 && bluData.length > 10) {\r\n          // console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          let confirmBtn = bluData[10]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[13], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 9;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[11];\r\n          let num2 = bluData[12];\r\n          let num = getVal(num1, num2, units);\r\n          // try {\r\n          //   newVal = parseFloat(num);\r\n          //   if (rulerUnitNum === 17) {\r\n          //     newVal = newVal.toFixed(2);\r\n          //   } else {\r\n          //     newVal = newVal.toFixed(1);\r\n          //   }\r\n          // } catch (error) {\r\n          //   console.log(error);\r\n          // }\r\n          newVal = num\r\n\r\n          function getVal(shi, xiaoshuo, units) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            // console.log(shi, xiaoshuo, num1, num2, `${num1}.${num2}`, units);\r\n            if (units === 'cm') {\r\n              let value = parseFloat(`${num1}.${num2}`).toFixed(1)\r\n              return value\r\n            } else {\r\n              if (num2 < 10) {\r\n                num2 = `0${num2}`\r\n              }\r\n              let value = parseFloat(`${num1}.${num2}`).toFixed(2)\r\n              return value\r\n            }\r\n\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n\r\n\r\n\r\n\r\n        }\r\n      },\r\n      182: () => {\r\n        console.log(\"打开了底座通信\");\r\n      },\r\n    };\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]];\r\n    } else {\r\n      return () => {\r\n        console.log(\"没有控制命令\", commandArr);\r\n      };\r\n    }\r\n  };\r\n\r\n  testCheck = (arr) => {\r\n    if (arr.length < 7) {\r\n      return false;\r\n    }\r\n    let i = 7;\r\n    let checkFloag = arr[i];\r\n\r\n    for (i = 8; i < arr.length - 2; i++) {\r\n      checkFloag = checkFloag ^ arr[i];\r\n    }\r\n    return checkFloag;\r\n  };\r\n  getMac = (arr) => {\r\n    // console.log(arr);\r\n    let str = arr[1].toString(16);\r\n    if (str.length === 1) {\r\n      str = \"0\" + str;\r\n    }\r\n    for (let i = 2; i < 7; i++) {\r\n      let item = arr[i].toString(16);\r\n      if (item.length === 1) {\r\n        item = \"0\" + item;\r\n      }\r\n      str += `:${item}`;\r\n      // }\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n  //监听屏幕窗口改变\r\n  resize = () => {\r\n    let { offsetWidth, offsetHeight } = this.mainbody;\r\n    // console.log('resize', this.mainbody, { offsetWidth, offsetHeight });\r\n    if (offsetHeight !== this.state.bodyHeight) {\r\n      this.setState({\r\n        bodyHeight: offsetHeight - px(50),\r\n      });\r\n    }\r\n  };\r\n  //获取设备类型(渲染左侧硬件种类侧边栏)\r\n  getDevicesType = () => {\r\n    // let devicesTypeList = [\r\n    //   {\r\n    //     type: 'mellaPro',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'mellaPro',\r\n    //         mac: '',\r\n    //         deviceType: 'mellaPro',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'biggie',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'biggie',\r\n    //         mac: '',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       },\r\n    //       {\r\n    //         name: 'biggie002',\r\n    //         mac: '1253',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'otterEQ',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'otterEQ',\r\n    //         mac: '',\r\n    //         deviceType: 'otterEQ',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n\r\n    //   {\r\n    //     type: 'rfid',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'rfid',\r\n    //         mac: '',\r\n    //         deviceType: 'rfid',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'tape',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'tape',\r\n    //         mac: '',\r\n    //         deviceType: 'tape',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'maeBowl',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'maeBowl',\r\n    //         mac: '',\r\n    //         deviceType: 'maeBowl',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   }\r\n    // ]\r\n\r\n    let devicesTypeList =\r\n      electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-devicesTypeList`\r\n      ) || [];\r\n    // console.log(\"获取的设22222备列表\", devicesTypeList);\r\n    if (devicesTypeList.length === 0) {\r\n      devicesTypeList.push({\r\n        type: \"mellaPro\",\r\n        devices: [\r\n          {\r\n            name: \"mellaPro\",\r\n            mac: \"\",\r\n            deviceType: \"mellaPro\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"biggie\",\r\n        devices: [\r\n          {\r\n            name: \"biggie\",\r\n            mac: \"\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n          {\r\n            name: \"biggie002\",\r\n            mac: \"1253\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"tape\",\r\n        devices: [\r\n          // {\r\n          //   name: \"tape\",\r\n          //   mac: \"45264\",\r\n          //   deviceType: \"tape\",\r\n          //   examRoom: \"\",\r\n          // },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"otterEQ\",\r\n        devices: [\r\n          {\r\n            name: \"otterEQ\",\r\n            mac: \"375082\",\r\n            deviceType: \"otterEQ\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"mabel\",\r\n        devices: [\r\n          {\r\n            name: \"mabel\",\r\n            mac: \"2.1.5.123.5\",\r\n            deviceType: \"mabel\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    let hardList = [].concat(devicesTypeList);\r\n    this.props.setHardwareList(hardList);\r\n    let showHardWareTypeList = [].concat(devicesTypeList);\r\n    showHardWareTypeList.push({\r\n      type: \"add\",\r\n      devices: [],\r\n    });\r\n\r\n    this.setState({\r\n      devicesTypeList,\r\n      showHardWareTypeList,\r\n    });\r\n  };\r\n  body = () => {\r\n    let { selectHardwareType } = this.props;\r\n\r\n    let { bodyHeight, clickMenuIndex } = this.state;\r\n    let measurePage = null;\r\n    switch (clickMenuIndex) {\r\n      case \"1\":\r\n        if (electronStore.get(`${storage.userId}-isClical`)) {\r\n          return (\r\n            <>\r\n              <HardAndPetsUI bodyHeight={bodyHeight} />\r\n              <ClininalStudy bodyHeight={bodyHeight} />\r\n            </>\r\n          );\r\n        } else {\r\n          switch (selectHardwareType) {\r\n            case \"mellaPro\":\r\n              measurePage = <TemperaturePage bodyHeight={bodyHeight} />;\r\n\r\n              break;\r\n            case \"biggie\":\r\n              measurePage = <BiggiePage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            case \"tape\":\r\n              measurePage = <ScanPage bodyHeight={bodyHeight} />;\r\n              break;\r\n            case \"otterEQ\":\r\n              measurePage = <OtterEQPage bodyHeight={bodyHeight} />;\r\n              break;\r\n            case \"mabel\":\r\n              measurePage = <MabelPage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n          if (selectHardwareType === \"add\") {\r\n            return <AddDevice bodyHeight={bodyHeight} />;\r\n          } else if (selectHardwareType === 'prescribePlan') {\r\n            return <EnrolledPlan bodyHeight={bodyHeight} />;\r\n          }\r\n          else {\r\n            return (\r\n              <>\r\n                <HardAndPetsUI bodyHeight={bodyHeight} />\r\n                {measurePage}\r\n              </>\r\n            );\r\n          }\r\n        }\r\n      case \"2\":\r\n        return <AllPets bodyHeight={bodyHeight} />;\r\n      case \"CombineScales\":\r\n        return <CombineScales bodyHeight={bodyHeight} />;\r\n      case \"AddDevice\":\r\n        return <AddDevice bodyHeight={bodyHeight} />;\r\n      case \"3\":\r\n        return <ScheduledPetPage bodyHeight={bodyHeight} />;\r\n\r\n      case \"AddScheduledPet\":\r\n        return <AddScheduledPet bodyHeight={bodyHeight} />;\r\n      case \"6\":\r\n        return (\r\n          <>\r\n            <HardAndPetsUI bodyHeight={bodyHeight} />\r\n            <ClininalStudy bodyHeight={bodyHeight} />\r\n          </>\r\n        );\r\n      case \"4\":\r\n        return (\r\n          <MyAccount bodyHeight={bodyHeight} />\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { bodyHeight } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className=\"flex\"\r\n        id=\"mainbody\"\r\n        ref={(val) => (this.mainbody = val)}\r\n        onClick={() => {\r\n          if (this.props.selectHardwareModalShowFun) {\r\n            this.props.selectHardwareModalShowFun(false);\r\n          }\r\n        }}\r\n      >\r\n        <Heard />\r\n        <div className=\"mainbody-body\">\r\n          <HardWareTypeUI\r\n            bodyHeight={bodyHeight}\r\n            devicesTypeList={this.state.showHardWareTypeList}\r\n          />\r\n          {this.body()}\r\n        </div>\r\n        <Modal\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id=\"vetPrifileModal\">\r\n            <div className=\"title\">prompt</div>\r\n\r\n            <div className=\"text\">Please re-plug the base device</div>\r\n\r\n            <div\r\n              className=\"btn\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"5px\",\r\n              }}\r\n            >\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n                  });\r\n                  num07 = 0;\r\n                }}\r\n              >\r\n                OK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({\r\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\r\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\r\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\r\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\r\n    mellaMeasurePart: state.hardwareReduce.mellaMeasurePart,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareReduce: state.hardwareReduce,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\r\n    menuNum: state.userReduce.menuNum,\r\n    mellaPredictReturnValue: state.hardwareReduce.mellaPredictReturnValue,\r\n    test: state.userReduce.test\r\n  }),\r\n  {\r\n    setHardwareList,\r\n    selectHardwareModalShowFun,\r\n    setIsHaveUsbDeviceFun,\r\n\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n    setMellaDeviceIdFun,\r\n    setBiggieConnectStatusFun,\r\n    setBiggieBodyFatFun,\r\n    setBiggieBodyWeightFun,\r\n    setBiggieUnitFun,\r\n    setBiggieSameWeightCountFun,\r\n    setRulerConnectStatusFun,\r\n    setRulerMeasureValueFun,\r\n    setRulerUnitFun,\r\n    setRulerConfirmCountFun,\r\n    setReceiveBroadcastHardwareInfoFun,\r\n    setMellaMeasureNumFun,\r\n  }\r\n)(App);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx",["732","733","734","735","736","737"],"/**\r\n *\r\n * 获取屏幕分辨率宽高\r\n * let width = parseInt(window.screen.width)\r\n * let height = parseInt(window.screen.height)\r\n *\r\n * 获取应用窗口大小\r\n * document.documentElement.clientHeight\r\n * document.documentElement.clientWidth\r\n */\r\n//\r\n\r\n//\r\n\r\nconst devWidth = 1920;\r\nconst devHeight = 1040;\r\n\r\nlet size = window.screen\r\n// console.log('-------------------------分辨率的大小-----------------', size);\r\nlet width = parseInt(window.screen.availWidth);\r\nlet height = parseInt(window.screen.availHeight);\r\nif (width < height) {\r\n  let a = width;\r\n  width = height;\r\n  height = a;\r\n}\r\n\r\nexport const px = (val) => {\r\n  return val\r\n  // let width = parseInt(window.screen.availWidth);\r\n  // let height = parseInt(window.screen.availHeight);\r\n\r\n\r\n\r\n  // if (width < height) {\r\n  //   let a = width;\r\n  //   width = height;\r\n  //   height = a;\r\n  // }\r\n\r\n  // return parseInt((val / devWidth) * width);\r\n};\r\n\r\nexport const mTop = (val) => {\r\n  return val\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n\r\n  // console.log('mTop',val, parseInt(val / devHeight * height))\r\n  return parseInt((val / devHeight) * height);\r\n};\r\n\r\nexport const fs = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n};\r\nexport const pX = (val) => {\r\n  let windowWidth = document.documentElement.clientWidth;\r\n  // console.log('px', window.screen,)\r\n  return parseInt((windowWidth / 650) * val);\r\n};\r\nexport const MTop = (val) => {\r\n  return val\r\n  let windowWidth = document.documentElement.clientHeight;\r\n  console.log(\"px\", windowWidth);\r\n  return parseInt((windowWidth / 375) * val);\r\n};\r\n\r\nlet windowssize = {\r\n  width: 0,\r\n  height: 0,\r\n};\r\n\r\nexport const win = () => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n  // let win1 = JSON.stringify({\r\n  //   width, height\r\n  // })\r\n\r\n  return {\r\n    width: 1920,\r\n    height: 1080,\r\n  };\r\n};\r\n\r\nlet timer = null;\r\nexport const timerFun = () => {\r\n  // console.log(\"jianting1------------\");\r\n  // timer && clearInterval(timer);\r\n  // timer = setInterval(() => {\r\n  //   let width = parseInt(window.screen.availWidth);\r\n  //   let height = parseInt(window.screen.availHeight);\r\n  //   if (width < height) {\r\n  //     let a = width;\r\n  //     width = height;\r\n  //     height = a;\r\n  //   }\r\n  //   // console.log('jianting1', windowssize, { width, height });\r\n  //   if (width !== windowssize.width || height !== windowssize.height) {\r\n  //     windowssize.width = width;\r\n  //     windowssize.height = height;\r\n  //     let ipcRenderer = window.electron.ipcRenderer;\r\n  //     ipcRenderer.send(\"changeFenBianLv\", windowssize);\r\n  //   }\r\n  // }, 2000);\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",["738","739"],"\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",["740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",["765"],"export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\current.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx",["766","767","768"],"import React, { useState, useEffect } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport biggieHome from './../../assets/img/searchType-biggieHome.png';\nimport biggiePro from './../../assets/img/searchType-biggiePro.png';\nimport mellaHome from './../../assets/img/searchType-home.png';\nimport mellaPro from './../../assets/img/searchType-mellaPro.png';\nimport maeBowl from './../../assets/img/searchType-maeBowl.png';\nimport other from './../../assets/img/searchType-other.png';\nimport possum from './../../assets/img/searchType-possum.png';\nimport rfid from './../../assets/img/searchType-rfid.png';\nimport redclose from '../../assets/img/redclose.png';\nimport tabby from '../../assets/img/searchType-tabby.png';\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, MTop } from '../../utils/px';\n\nimport { connect } from 'react-redux'\nimport {\n  setReceiveBroadcastHardwareInfoFun,\n  setHardwareList,\n  changeselectHardwareIndex,\n  setSelectHardwareType,\n  selectHardwareList\n} from '../../store/actions';\nimport PropTypes from 'prop-types';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n  //是否有底座设备\n  const [noUSB, setNoUSB] = useState(false)\n  //设备列表\n  const [devicesList, setDevicesList] = useState([])\n  //选择的设备\n  const [selectDevice, setSelectDevice] = useState(null)\n  //重命名\n  const [reName, setReName] = useState('')\n  //房间号\n  const [examRoom, setExamRoom] = useState('')\n  //已经保存过的设备的macid\n  const [saveDeviceMac, setSaveDeviceMac] = useState([])\n  //顶部文本\n  const [topText, setTopText] = useState(' Pair Device')\n\n\n\n  const addDevice = () => {\n    //从redux拿到列表中的所有硬件设备 hardwareList\n    console.log('hardwareList', hardwareList);\n    //拿到硬件的macid 类型 名称 房间号\n    console.log('selectDevice', selectDevice);\n    let sameFlog = hardwareList.some((item, index) => {\n      return item.type === selectDevice.deviceType\n    })\n    let hardwareArr = [].concat(hardwareList)\n    let { deviceType, macId, name } = selectDevice\n    let newDevice = {\n      name: reName || name,\n      mac: macId,\n      deviceType,\n      examRoom: examRoom || '',\n    }\n    console.log('newDevice', newDevice);\n    if (sameFlog) {\n      //相同就代表有这个硬件类型,可以直接去push\n\n      for (let i = 0; i < hardwareArr.length; i++) {\n        if (hardwareArr[i].type === selectDevice.deviceType) {\n          hardwareArr[i].devices.push(newDevice)\n          break\n        }\n      }\n\n    } else {\n      //没有就要新建一个硬件类型\n      let json = {\n        type: selectDevice.deviceType,\n        devices: [newDevice]\n      }\n      hardwareArr.push(json)\n    }\n    setReName('')\n    setExamRoom('')\n    setHardwareList(hardwareArr)\n\n    return newDevice\n\n\n  }\n\n  const body = () => {\n\n    if (selectDevice) {\n      return <div className=\"addDevice1 flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n            {`this ${selectDevice.name} device?`}</div>\n\n          <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n            {`SN: ${selectDevice.macId}`}</div>\n\n\n          <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                setReName(value.target.value)\n\n              }}\n              placeholder={`${selectDevice.name} Device Name`}\n            />\n          </div>\n          <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={examRoom}\n              onChange={(value) => {\n                setExamRoom(value.target.value)\n\n              }}\n              placeholder={`Exam Room Name`}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write<br /> the name\n            on the sticker provided so it is easy\n            to select<br /> your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              addDevice()\n              setSelectDevice(null)\n              setSelectHardwareType('add')\n\n            }}\n          >\n            <p className='btnText'>Add Another Device</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let newDevice = addDevice()\n              setSelectHardwareType(selectDevice.deviceType)\n\n\n              electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n              setSelectDevice(null)\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          let options = (val) => {\n            let arr = []\n            if (val === 1) {\n              arr = [mellaPro, mellaHome, biggiePro, rfid]\n            } else {\n              arr = [possum, maeBowl, tabby, other,]\n            }\n            let option = arr.map((item, index) => {\n              let imgWidth = px(100)\n              // imgWidth = index === 2 ? px(65) : imgWidth\n              return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                <div className=\"searchType-item\" key={index} >\n                  <img src={item} alt=\"\" width={imgWidth} />\n                </div>\n              </li>)\n            })\n            return (\n              <ul>\n                {option}\n              </ul>\n            )\n          }\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n            <div className=\"addDeviceContent\">\n              <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                  <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                </div>\n              </div>\n              <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n              </div>\n              <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                <div className=\"btnText\">\n                  Scan For Devices\n                </div>\n              </div>\n              <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                Or\n              </div>\n              <div className=\"select\">\n                Select device type to\n              </div>\n              <div className=\"add\">\n                add manually\n              </div>\n\n              <div className=\"item\">\n                {options(1)}\n                {options(2)}\n              </div>\n            </div>\n\n            {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n\n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  setSelectDevice(item)\n\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList ' >\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n  //初始化\n  useEffect(() => {\n    setNoUSB(false)\n    setDevicesList([])\n    setSelectDevice(null)\n    setReName('')\n    setSaveDeviceMac([])\n    setTopText(' Pair Device')\n    //组件渲染完毕后要先清空广播的硬件信息\n    setReceiveBroadcastHardwareInfoFun({\n      deviceType: '',\n      macId: '',\n      name: ''\n    })\n  }, [])\n  useEffect(() => {\n\n    if (hardwareList.length > 0) {\n      let saveDeviceMac = []\n      for (let i = 0; i < hardwareList.length; i++) {\n        const element = hardwareList[i];\n        for (let j = 0; j < element.devices.length; j++) {\n          const device = element.devices[j];\n          saveDeviceMac.push(device.mac)\n        }\n      }\n      setSaveDeviceMac(saveDeviceMac)\n\n    }\n  }, [hardwareList])\n  useEffect(() => {\n    if (!selectDevice) {\n      setTopText(' Pair Device')\n    } else {\n      setTopText('Device Connected')\n    }\n\n  }, [selectDevice])\n  useEffect(() => {\n    setNoUSB(!isHaveUsbDevice)\n  }, [isHaveUsbDevice])\n  useEffect(() => {\n    let sameFlog = devicesList.some((device, index) => {\n      return device.macId === receiveBroadcastHardwareInfo.macId\n    })\n    if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n      return\n    }\n    console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n    let deviceArr = [].concat(devicesList)\n    deviceArr.push(receiveBroadcastHardwareInfo)\n    setDevicesList(deviceArr)\n\n\n\n  }, [receiveBroadcastHardwareInfo])\n\n  return (\n    <div className='addDevice' style={{ height: bodyHeight }}>\n      <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\n        {topText}\n      </div>\n\n      {body()}\n    </div >\n  )\n}\n\n\nAddDevice.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    hardwareReducer: state.hardwareReduce,\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n    hardwareList: state.hardwareReduce.hardwareList,\n  }),\n  { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx",["769","770"],"import React, { useState, useEffect } from 'react'\n\nimport xia from './../../assets/img/xia.png'\n\nimport { px } from '../../utils/px'\n\nimport PetsUI from './PetsUI.jsx'\nimport HardListModal from './HardListModal'\n\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { selectHardwareModalShowFun, selectHardwareInfoFun } from './../../store/actions';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun, hardwareInfo, selectHardwareInfoFun }) => {\n  //定义选择的硬件详细信息\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\n  useEffect(() => {\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\n\n    for (let i = 0; i < hardwareList.length; i++) {\n      const element = hardwareList[i];\n\n      if (element.type === selectHardwareType) {\n        let list = element.devices || []\n\n        //获取被选中的硬件的详细信息\n        let selectHardwareInfo = hardwareInfo || {}\n        if (selectHardwareInfo.mac === null && list[0]) {\n          let selectHardwareInfo = list[0]\n          selectHardwareInfoFun(selectHardwareInfo)\n\n          setSelectHardwareDetail(selectHardwareInfo)\n        } else {\n          let sameFlag = false\n          for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\n              setSelectHardwareDetail(selectHardwareInfo)\n              sameFlag = true\n              break\n            }\n          }\n          if (!sameFlag) {\n            let selectHardwareInfo = list[0] || {}\n            setSelectHardwareDetail(selectHardwareInfo)\n          }\n        }\n        break\n      }\n    }\n  }, [selectHardwareType, hardwareList,])\n\n\n  // console.log('=====----===', selectHardwareDetail);\n\n  return (\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\n      <div className='deviceAndPets-title'\n        onClick={(e) => {\n          //react阻止冒泡\n          e.stopPropagation()\n          selectHardwareModalShowFun(!selectHardwareModalShow)\n        }}\n      >\n        <div className=\"devicesName\" style={{ fontSize: px(20) }}>\n          {selectHardwareDetail.name || \"No Equipment\"}\n        </div>\n        <div className=\"imgBox\" style={{ marginLeft: px(7) }}>\n          <img src={xia} alt=\"\" width={px(20)} />\n        </div>\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\n          setSelectHardwareDetail(item)\n        }} />}\n      </div>\n      <PetsUI\n        bodyHeight={bodyHeight}\n      />\n    </div >\n  )\n}\n\n\nHardAndPetsUI.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nHardAndPetsUI.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n\n  }),\n  {\n    selectHardwareModalShowFun,\n    selectHardwareInfoFun\n  }\n)(HardAndPetsUI)\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx",["771"],"import React, { useEffect } from \"react\";\r\nimport { message } from 'antd'\r\n\r\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\r\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\r\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\r\nimport tape from \"./../../assets/img/hardList-tape.png\";\r\nimport add from \"./../../assets/img/hardList-add.png\";\r\nimport mabel from \"./../../assets/img/hardList-mabel.png\";\r\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\r\n\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { px } from \"../../utils/px\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\n\r\nlet storage = window.localStorage;\r\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\r\nconst HardWareTypeUI = ({\r\n  bodyHeight,\r\n  devicesTypeList,\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  selectHardwareType,\r\n  setMenuNum,\r\n  menuNum,\r\n}) => {\r\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\r\n\r\n  let options = devicesTypeList.map((item, index) => {\r\n    let img = null;\r\n    switch (item.type) {\r\n      case \"mellaPro\":\r\n        img = mellaPro;\r\n        break;\r\n\r\n      case \"biggie\":\r\n        img = biggie;\r\n        break;\r\n\r\n      case \"rfid\":\r\n        img = rfid;\r\n        break;\r\n\r\n      case \"tape\":\r\n        img = tape;\r\n        break;\r\n      case \"mabel\":\r\n        img = mabel;\r\n        break;\r\n      case \"add\":\r\n        img = add;\r\n        break;\r\n\r\n      case \"otterEQ\":\r\n        img = otterEQ;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    let borderStyle = ``;\r\n    if (item.type === selectHardwareType && menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n      borderStyle = ` 2px solid #3B3A3A`;\r\n    }\r\n\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        style={{ margin: `${px(10)}px 0` }}\r\n        onClick={() => {\r\n          console.log(item.type);\r\n          if (menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType(item.type);\r\n            if (item.type === \"add\") {\r\n            } else {\r\n              let devicesInfo = {\r\n                deviceType: item.type,\r\n                examRoom: null,\r\n                mac: null,\r\n                name: null\r\n              }\r\n              if (item.devices.length > 0) {\r\n                devicesInfo = electronStore.get(\r\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\r\n                ) || {};\r\n                console.log(item.devices, devicesInfo);\r\n                let isSame = item.devices.some((item) => item.mac === devicesInfo.mac)\r\n                if (!isSame) {\r\n                  devicesInfo = item.devices[0];\r\n                  electronStore.set(\r\n                    `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\r\n                    devicesInfo\r\n                  );\r\n                }\r\n              }\r\n\r\n\r\n\r\n              selectHardwareInfoFun(devicesInfo);\r\n            }\r\n          }\r\n          else {\r\n            message.destroy();\r\n            message.warning('Please exit clinical trial mode first');\r\n\r\n          }\r\n        }}\r\n      >\r\n        <div\r\n          className=\"item\"\r\n          style={{ border: borderStyle }}\r\n        >\r\n          <img src={img} alt=\"\" width={px(55)} />\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    let Index = null;\r\n    for (let i = 0; i < devicesTypeList.length; i++) {\r\n      const element = devicesTypeList[i];\r\n      if (element.type === selectHardwareType) {\r\n        Index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (Index === null) {\r\n      return;\r\n    }\r\n\r\n    let hard = devicesTypeList[Index];\r\n    if (hard && hard.type !== \"add\") {\r\n      let devicesInfo = electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\r\n      );\r\n\r\n      if (!devicesInfo) {\r\n        console.log('???', hard, hard.devices);\r\n        if (hard.devices.length > 0) {\r\n          devicesInfo = hard.devices[0];\r\n\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n\r\n      } else {\r\n        let sameFlag = false;\r\n        console.log(\"============\", hard.devices, devicesInfo);\r\n        for (let i = 0; i < hard.devices.length; i++) {\r\n          const element = hard.devices[i];\r\n          if (\r\n            element.mac === devicesInfo.mac &&\r\n            element.name === devicesInfo.name\r\n          ) {\r\n            sameFlag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!sameFlag) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.delete(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n      }\r\n\r\n      console.log(\"保存的折本信息\", devicesInfo);\r\n\r\n      selectHardwareInfoFun(devicesInfo);\r\n    }\r\n  }, [devicesTypeList]);\r\n\r\n  return (\r\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\r\n      <ul>{options}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nHardWareTypeUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array,\r\n};\r\n//默认值\r\nHardWareTypeUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: [],\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    menuNum: state.userReduce.menuNum,\r\n  }),\r\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\r\n)(HardWareTypeUI);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js",["772","773"],"/**\r\n * @file new.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/new`\r\n\r\n\r\n/**\r\n * @dec 添加预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const petall_subscribe = (params) => {\r\n    return postJson(`${baseURL}/petall/subscribe`, params)\r\n}\r\n\r\n/**\r\n * @dec 管理员添加医生\r\n * @param {string} userId 管理员id\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const admin_users = (userId, params) => {\r\n    return patch(`${baseURL}/admin/users/${userId}`, params)\r\n}\r\n\r\n\r\n/**\r\n * @dec 获取预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const pet_subscribe_page = (params) => {\r\n    return postJson(`${baseURL}/pet/subscribe/page`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js",["774"],"/**\r\n * @file organization.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/organization 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/organization`\r\n\r\n\r\n\r\n/**\r\n * @dec  管理员获取组织下的所有医生\r\n * @param {string} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\n\r\nexport const listDoctorsByAdmin = (lastOrganization, params) => {\r\n    return get(`${baseURL}/listDoctorsByAdmin/${lastOrganization}`, params)\r\n}\r\n\r\n/**\r\n * @dec 获取所有组织\r\n * @returns\r\n *\r\n */\r\nexport const listAll = () => {\r\n    return get(`${baseURL}/listAll`, '')\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 创建一个组织\r\n * @param {str} userId 用户id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const addOrganization = (userId, params) => {\r\n    return postJson(`${baseURL}/addOrganization/${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx",["775","776","777","778","779","780","781","782"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx",["783","784","785","786","787"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Checkbox, Layout, List, Avatar, Modal, Form, Input } from \"antd\";\n\nimport catFood from '../../assets/img/catFood.png';\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\nimport electronStore from \"../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst EnrolledPlan = ({ petMessage, hardwareMessage, bodyHeight,setSelectHardwareType }) => {\n  const { Content, Header } = Layout;\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [nextType, setNextType] = useState('selectIllness');//切换当前页面的组件。selectIllness：选择疾病；createPlan:创建计划；planInfo:计划详情。\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const options = [\n    {\n      label: 'Hepatic Disease',\n      value: '1',\n    },\n    {\n      label: 'Renal Disease',\n      value: '2',\n    },\n    {\n      label: 'Osteoarthritis / Mobility / Joint',\n      value: '3',\n    },\n  ];\n  const data = [\n    {\n      title: 'Title 1',\n    },\n    {\n      title: 'Title 2',\n    },\n    {\n      title: 'Title 3',\n    },\n    {\n      title: 'Title 4',\n    },\n  ];\n  //表单提交\n  const onFinish = (values) => {\n    console.log(values);\n    setSelectHardwareType(\"mabel\");\n  };\n  //选择的疾病\n  const onChange = (checkedValues) => {\n    console.log('checked = ', checkedValues);\n  };\n  //切换头部文字\n  const topTitle = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return 'Prescription Diet Matrix';\n      case 'createPlan':\n        return 'Prescription Diet Recommendations'\n      case 'planInfo':\n        return 'Feeding Plan'\n      default:\n        break;\n    }\n  }\n  //切换中间组件\n  const middleContent = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <div className=\"selectIllness\">\n            <Checkbox.Group\n              options={options}\n              onChange={onChange}\n              className=\"checkboxGroup\"\n            />\n          </div>\n        );\n      case 'createPlan':\n        return (\n          <div className=\"recommendMessageBox\">\n            <div className=\"leftBox\">\n              <img src={catFood} alt=\"\" />\n            </div>\n            <div className=\"rightBox\">\n              <p>Hill's Science Diet Adult 11+ Chicken Recipe cat food</p>\n              <p>Fluffy's Feeding Plan:</p>\n              <div className=\"descriptionTitle\">\n                <p>\n                  Based on Fluffy's BCS of 7, age 14, and osteoarthritis, we recommend feeding her 1 1/8 cups of kibble per day.\n                </p>\n                <p>443 Calories per cup</p>\n              </div>\n            </div>\n          </div>\n        )\n      case 'planInfo':\n        return (\n          <div className=\"planList\">\n            <List\n              dataSource={data}\n              renderItem={(item) => (\n                <div className=\"listBox\">\n                  <List.Item className=\"listItem\">\n                    <div className=\"item\">\n                      <div className=\"top\">\n                        <p>{item.title}</p>\n                        <p>123</p>\n                      </div>\n                      <div className=\"bottom\">\n                        <p>Weight</p>\n                        <p>465</p>\n                      </div>\n                    </div>\n                  </List.Item>\n                </div>\n              )}\n            />\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n  //切换底部按钮\n  const bottomBtn = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              electronStore.set(`${petMessage.petId}-planType`, true);\n              setNextType('createPlan');\n            }}\n          >\n            Set Recommendations\n          </Button>\n        );\n      case 'createPlan':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => { setNextType('planInfo') }}\n          >\n            Create Feeding Plan\n          </Button>\n        );\n      case 'planInfo':\n        return (\n          <>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => { }}\n              className=\"itemBtn\"\n            >\n              Email\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { }}\n            >\n              Print\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { setIsModalVisible(true) }}\n            >\n              Send to Mabel\n            </Button>\n          </>\n        );\n      default:\n        break;\n    }\n  }\n  //展示宠物照片\n  const shoePetPicture = () => {\n    if (_.isEmpty(petMessage?.url)) {\n      switch (petPicture(petMessage?.petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return petMessage?.url\n    }\n  }\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(petMessage?.firstName) && _.isEmpty(petMessage?.lastName)) {\n      return \"unknown\";\n    } else {\n      return petMessage?.firstName + \" \" + petMessage?.lastName;\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Layout className=\"planContentBox\" style={{ height: bodyHeight }}>\n      <div className=\"heardTitleBox\">\n        <p>{topTitle()}</p>\n      </div>\n      <div className=\"petMessageBox\">\n        <div className=\"left\">\n          <Avatar src={shoePetPicture()} size={64} />\n          <div className=\"petMsg\">\n            <p>{petMessage.petName ? petMessage?.petName : 'unknown'}</p>\n            <p>{ownerName()}</p>\n          </div>\n        </div>\n        <div className=\"right\">\n          <p>{calculateAge(petMessage?.birthday) === 'unknown' ? 'unknown' : `${calculateAge(petMessage?.birthday)} Years Old`}</p>\n          <p>{petMessage?.weight} lbs</p>\n          <p>{petMessage?.gender === 0 ? 'Male' : 'Female'}</p>\n          <p>{petMessage?.breedName}</p>\n        </div>\n      </div>\n      <div className=\"middleBox\">\n        {middleContent()}\n      </div>\n      <div className=\"btnBox\">\n        {bottomBtn()}\n      </div>\n      <Modal\n        title=\"Send Feeding Plan to Mabel\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        destroyOnClose\n        width={300}\n        className=\"planModal\"\n      >\n        <div className=\"modalContentBox\">\n          <div className=\"description\">\n            <p>Enter pet parent's email associated with their Mella Health App.</p>\n          </div>\n          <div className=\"formBox\">\n            <Form form={form} onFinish={onFinish} preserve={false}>\n              <Form.Item\n                name=\"mellaId\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" shape=\"round\" block htmlType=\"submit\">\n                  Send\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </Modal>\n    </Layout>\n  );\n};\n\nEnrolledPlan.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType,\n  }\n)(EnrolledPlan);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx",["788","789","790"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MabelPage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  return (\n    <Layout className=\"mabelPageBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100 }}>\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMabelPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MabelPage);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["791","792","793","794"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Measurement from \"./components/measurement\";\nimport MeasuredData from \"./components/measuredData\";\nimport HeaderItem from \"./components/headerItem\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport { px } from \"../../utils/px\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst TemperaturePage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [vibible, setVibible] = useState(false);\n\n  //测量温度中的页面变化\n  const changePage = () => {\n    // return <MeasuredData />\n    switch (mellaConnectStatus) {\n      case \"isMeasuring\":\n        return <Measurement />;\n      case \"complete\":\n        return <MeasuredData />;\n      case \"connected\":\n        return <LinkEquipment />;\n      case \"disconnected\":\n        return <LinkEquipment />;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Layout className=\"homeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\">\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {_.isEmpty(petMessage) ? (\n          <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100 }}>\n            <p className=\"chackPatientTitle\">Select a patient</p>\n          </div>\n        ) : (\n          changePage()\n        )}\n      </Layout>\n    </>\n  );\n};\n\nTemperaturePage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(TemperaturePage);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx",["795","796","797"],"import React, { useEffect, useState } from \"react\";\r\nimport { Layout, message } from \"antd\";\r\n\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport SwabPetEar from \"./components/swabPetEar\";\r\nimport ExperimentalPage from \"./components/experimental\";\r\nimport TimerPage from \"./components/timer\";\r\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\r\n\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmConnectStatus\r\n} from \"../../store/actions\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./index.less\";\r\n\r\n\r\n// const ipcRenderer = window.require(\"electron\").ipcRenderer;\r\nlet ipcRenderer = window.electron.ipcRenderer;\r\nconst SDK = require(\"qsm-otter-sdk\");\r\n\r\nconst { Content, Header } = Layout;\r\nconst OtterEQPage = ({ petMessage, hardwareMessage, bodyHeight, setQsmConnectStatus }) => {\r\n  const [cutPageType, setCutPageType] = useState('linkPage');\r\n  const [qsmConStatus, setQsmConStatus] = useState('linkPage');\r\n  const changePage = () => {\r\n    if (qsmConStatus === 'connected')\r\n      switch (cutPageType) {\r\n        case \"linkPage\":\r\n          return <LinkEquipment cutPageType={getCutPageType} />;\r\n        case \"swabPetEarPage\":\r\n          return <SwabPetEar cutPageType={getCutPageType} />;\r\n        case \"experimentalPage\":\r\n          return <ExperimentalPage cutPageType={getCutPageType} />;\r\n        case \"timerPage\":\r\n          return <TimerPage cutPageType={getCutPageType} />;\r\n        default:\r\n          break;\r\n      } else {\r\n      switch (cutPageType) {\r\n        case \"linkPage\":\r\n          return <LinkEquipment cutPageType={getCutPageType} />;\r\n        case \"swabPetEarPage\":\r\n        case \"experimentalPage\":\r\n        case \"timerPage\":\r\n          return <LinkEquipment cutPageType={getCutPageType} isNext={true} />;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getCutPageType = (type) => {\r\n    console.log('type: ', type);\r\n    if (!_.isEmpty(type)) {\r\n      setCutPageType(type);\r\n    }\r\n  }\r\n\r\n  //查看是否有QSM设备插入\r\n  const readQSMConnectionStatus = async () => {\r\n    try {\r\n      const pairInstrument = await SDK.pairInstrument()\r\n      console.log(pairInstrument)\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n\r\n    setTimeout(async () => {\r\n      const connectionStatus = await SDK.readConnectionStatus()\r\n\r\n      let a = typeof (connectionStatus)\r\n      console.log('插入情况', connectionStatus, a);\r\n      if (typeof (connectionStatus) === 'boolean') {\r\n        let status = connectionStatus ? 'connected' : 'disconnected'\r\n        setQsmConnectStatus(status)\r\n        setQsmConStatus(status)\r\n      }\r\n    }, 500);\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * @dec 从main.js传过来的usb插拔事件\r\n   * @param {*} e\r\n   * @param {*} data 值为true 代表插入设备，false为拔掉设备\r\n   */\r\n  const usbDetect = async (e, data) => {\r\n    if (data) { // readQSMConnectionStatus()\r\n      readQSMConnectionStatus()\r\n    } else {\r\n      const connectionStatus = await SDK.readConnectionStatus()\r\n\r\n      let a = typeof (connectionStatus)\r\n      console.log('插入情况', connectionStatus, a);\r\n      if (typeof (connectionStatus) === 'boolean') {\r\n        let status = connectionStatus ? 'connected' : 'disconnected'\r\n        setQsmConnectStatus(status)\r\n        setQsmConStatus(status)\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCutPageType('linkPage');\r\n    return (() => { })\r\n\r\n  }, [petMessage.petId])\r\n\r\n\r\n  //监听usb的插拔\r\n  useEffect(() => {\r\n    ipcRenderer.on(\"usbDetect\", usbDetect);\r\n    return () => {\r\n      ipcRenderer.removeListener(\"usbDetect\", usbDetect);\r\n    }\r\n  }, [])\r\n  //初始化获取设备是否插入\r\n  useEffect(() => {\r\n    readQSMConnectionStatus()\r\n    message.destroy();\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <Layout className=\"ottterEQBox\" style={{ height: bodyHeight }}>\r\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\r\n        <div style={{ height: '100%' }}>\r\n          <HeaderItem />\r\n        </div>\r\n      </div>\r\n      {_.isEmpty(petMessage) ? (\r\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100 }}>\r\n          <p className=\"chackPatientTitle\">Select a patient</p>\r\n        </div>\r\n      ) : (\r\n        <Content className=\"otterEQcontent\">\r\n          {changePage()}\r\n        </Content>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nOtterEQPage.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmConnectStatus\r\n  }\r\n)(OtterEQPage);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",["798","799","800","801","802","803"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Avatar,\n  Button,\n  Card,\n  Space,\n  message,\n  Input,\n  Modal,\n} from \"antd\";\nimport {\n  CheckCircleFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport {\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Meta } = Card;\nconst { confirm } = Modal;\nconst CombineScales = ({\n  petMessage,\n  hardwareMessage,\n  userMessage,\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n}) => {\n  let { hardwareList } = hardwareMessage;\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\n  const [confirmType, setConfirmType] = useState(false); //确认选择\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\n\n  //点击卡片选择效果\n  const onClick = (index, data) => {\n    console.log(data);\n    let changeClassName = document.getElementById(index).classList;\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\n    let cardClassNametype = document\n      .getElementById(index)\n      .classList.contains(\"cardBoxClick\");\n    cardClassNametype\n      ? changeClassName.remove(\"cardBoxClick\")\n      : changeClassName.add(\"cardBoxClick\");\n    cardClassNametype\n      ? (iconClassName.style.display = \"none\")\n      : (iconClassName.style.display = \"\");\n    let oldData = checkHardwareList;\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\n  };\n  //确认选择两个体重秤\n  const onChangeScales = () => {\n    if (_.size(checkHardwareList) > 1) {\n      setConfirmType(true);\n    } else {\n      message.error({\n        content: \"Please choose more than two scales\",\n        style: {\n          marginTop: \"20vh\",\n        },\n      });\n    }\n  };\n  //保存用户更改的名字\n  const saveChangeName = (e) => {\n    setSaveName(e.target.value);\n  };\n\n  //跳转准备测量\n  const startMeasuring = () => {\n    confirm({\n      title: \"Are you sure to incorporate the body fat scale?\",\n      icon: <ExclamationCircleOutlined />,\n      style: {\n        marginTop: \"20vh\",\n      },\n      width: 480,\n      onOk() {\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\n        let newData = {\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\n          mac: mac,\n          deviceType: \"biggie\",\n          examRoom: \"\",\n        };\n        let newHardwareList = hardwareList;\n        newHardwareList[1].devices.push({ ...newData });\n        selectHardwareList(newHardwareList);\n        selectHardwareInfoFun(newData);\n        setMenuNum(\"1\");\n      },\n    });\n  };\n\n  useEffect(() => {\n    let newData = [];\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\n      if (item.mac.indexOf(\"/\") === -1) {\n        newData.push(item);\n      }\n    });\n    setBiggieList(newData);\n    return () => { };\n  }, []);\n\n  return (\n    <>\n      <Layout className=\"mergePage\">\n        <Header className=\"mergeHeaderBox\">\n          <span className=\"headerTitle\">\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\n          </span>\n        </Header>\n        <Content className=\"combineContentBox\">\n          <div>\n            <div className=\"tipTitleBox\">\n              {!confirmType ? (\n                <span>\n                  Select the scales you'd\n                  <br />\n                  like to combine\n                </span>\n              ) : (\n                <span>\n                  These two scales are now combined.\n                  <br />\n                  Please give this combination a name\n                </span>\n              )}\n            </div>\n            {confirmType ? (\n              <div className=\"asOneCardBox\">\n                <Space>\n                  {_.map(checkHardwareList, (item, index) => {\n                    return (\n                      <Card className=\"asOneCard\">\n                        <Meta\n                          avatar={<Avatar src={scaleImage} size={53} />}\n                          description={\n                            <div style={{ display: \"grid\" }}>\n                              <span>Device Name:{item.name}</span>\n                              <span>\n                                {item.deviceType === \"biggie\"\n                                  ? \"Biggie Pro Scale\"\n                                  : \"Biggie Home Scale\"}\n                              </span>\n                              <span>SN:{item.mac}</span>\n                            </div>\n                          }\n                        />\n                      </Card>\n                    );\n                  })}\n                </Space>\n                <div className=\"acOneImageBox\">\n                  <img src={combinedscales} />\n                </div>\n              </div>\n            ) : (\n              <div className=\"selectScalesBox\">\n                <div>\n                  {_.map(biggieList, (item, index) => {\n                    return (\n                      <Card\n                        className=\"cardBox\"\n                        hoverable\n                        onClick={() => onClick(`${index}`, item)}\n                        id={`${index}`}\n                        key={index}\n                      >\n                        <div className=\"cardBodyBox\">\n                          <Meta\n                            avatar={<Avatar src={scaleImage} size={53} />}\n                            description={\n                              <div style={{ display: \"grid\" }}>\n                                <span>Device Name:{item.name}</span>\n                                <span>\n                                  {item.deviceType === \"biggie\"\n                                    ? \"Biggie Pro Scale\"\n                                    : \"Biggie Home Scale\"}\n                                </span>\n                                <span>SN:{item.mac}</span>\n                              </div>\n                            }\n                          />\n                          <CheckCircleFilled\n                            id={`${\"icon\" + index}`}\n                            style={{\n                              color: \"#5cbbe0\",\n                              fontSize: \"20px\",\n                              display: \"none\",\n                            }}\n                          />\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            {confirmType ? (\n              <>\n                <div className=\"inputBox\">\n                  <Input\n                    placeholder=\"Combined Scale Name\"\n                    className=\"inputName\"\n                    maxLength={25}\n                    onChange={saveChangeName}\n                  />\n                </div>\n                <div className=\"scalesBtnBox\">\n                  <Button\n                    type=\"primary\"\n                    className=\"scalesBtn\"\n                    shape=\"round\"\n                    onClick={() => startMeasuring()}\n                  >\n                    Save & Start Measuring\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <Space className=\"scalesBtnBox\">\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => setMenuNum(\"AddDevice\")}\n                >\n                  Add New Scale\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => onChangeScales()}\n                >\n                  Combine Scales\n                </Button>\n              </Space>\n            )}\n          </div>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    userMessage: state.userReduce,\n  }),\n  {\n    setMenuNum,\n    selectHardwareInfoFun,\n    selectHardwareList,\n  }\n)(CombineScales);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",["804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841"],"import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Layout, message, Input, Modal, Table, Popconfirm, Select } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nimport edit from \"./../../assets/images/edit.png\";\nimport del from \"./../../assets/images/del.png\";\nimport start from \"./../../assets/img/start.png\";\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\nimport placement_er from \"./../../assets/images/placement_er.png\";\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport { px, mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport UnassignModal from './../../components/UnassignModal/UnassignModal';\nimport SelectPet from \"../../components/selectPetModal\";\nimport AddPetModal from \"../../components/addPetModal\";\nimport {\n  addAllClinical,\n  deletePetExamByExamId,\n  getClinicalDataByExamId,\n  getPetExamAndClinicalByPetId,\n  getPetExamByDoctorId,\n  updatePetExam,\n  updatePetInfo,\n  addAndSavePetExam,\n  addDeskPet,\n} from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport { setTest } from \"../../store/actions\";\nimport ReactECharts from \"echarts-for-react\";\nimport propTypes from \"prop-types\";\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\n\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\nlet storage = window.localStorage;\n\nlet mellaMeasureNumCopy = 0;\n\n//定义echarts的数据个数\nconst { Option } = Select;\nlet saveHistoryTime = null;\nconst ClinicalStudy = ({\n  bodyHeight,\n  mellaConnectStatus,\n  mellaMeasureValue,\n  mellaMeasureNum,\n  petDetailInfo,\n  setTest,\n  biggieBodyWeight,\n  biggieUnit,\n}) => {\n  const [units, setUnits] = useState(\"\");\n  const [temperature, setTemp] = useState(0);\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\n  const [echarsData, setEcharsData] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [echarsData1, setEcharsData1] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\n    useState(\"\");\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\n  const [furLength, setFurLength] = useState(\"\");\n  const [heartRate, setHeartRate] = useState(\"\");\n  const [bloodPressure, setBloodPressure] = useState(\"\");\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\n  const [historyData, setHistoryData] = useState([]);//walk-in中未分配的数据\n  const [editRectal, setEditRectal] = useState(\"\");\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\n  const [editVisible, setEditVisible] = useState(false);\n  const [editId, setEditId] = useState(\"\");\n  const [editMemo, setEditMemo] = useState(\"\");\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\n  const [editFurLength, setEditFurLength] = useState(\"\");\n  const [tipSpin, setTipSpin] = useState(false);\n  const [tip, setTip] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [memo, setMemo] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(px(500));\n  const [WeightValue, setWeightValue] = useState('');\n  const echartsElement = useRef(null);\n  const clinicalRef = useRef(null);\n  const [assignVisible, setAssignVisible] = useState(false);\n  const [seleceEmergencies, setSeleceEmergencies] = useState({});\n  const [lastWorkplaceId, setLastLastWorkplaceId] = useState('');\n  const [selectPetVisible, setSelectPetVisible] = useState(false);//选择宠物弹窗显隐\n  const [addPetVisible, setAddPetVisible] = useState(false);//添加新宠物弹窗显隐\n  const [selectPetModalLoading, setSelectPetModalLoading] = useState(false);//分配宠物后调用接口加载\n  const [addPetModalLoading, setAddPetModalLoading] = useState(false);//添加新宠物调用接口加载\n  const [addPetId, setAddPetId] = useState('');//添加宠物成功后返回的宠物id\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //分辨率变化\n  const chartsBox = useCallback((node) => {\n    if (node !== null && echartsElement.current) {\n      setTimeout(() => {\n        echartsElement.current.getEchartsInstance().resize({ height: px(380) });\n      }, 1000)\n    }\n  }, [window.screen.availWidth]);\n  //窗口宽高变化\n  const resize = () => {\n    if (clinicalRef.current && clinicalRef.current.offsetWidth) {\n      setWindowWidth(clinicalRef.current.offsetWidth);\n    }\n  };\n  const addClinical = () => {\n    let emerData = [];\n    let { Eci, wen0, wen1 } = echarsData;\n    for (let i = 0; i < wen0.length; i++) {\n      const element = wen0[i];\n      let str = {\n        data0: element,\n        data1: wen1[i],\n      };\n      emerData.push(str);\n    }\n    saveHistoryTime && clearTimeout(saveHistoryTime);\n    saveHistoryTime = setTimeout(() => {\n      let BCS =\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\n      let respireatoryR =\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\n\n      let roomT =\n        roomTemperature === \"\"\n          ? null\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\n\n      let referenceT =\n        referenceRectalTemperature === \"\"\n          ? null\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\n\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\n\n      let petVitalId = 1;\n\n      let datas = {\n        temperature: parseFloat(temperature), //测量温度\n        roomTemperature: roomT, //室温\n        bodyConditionScore: BCS, //身体状况评分\n        heartRate: hrartR, //心率\n        respiratoryRate: respireatoryR, //呼吸率\n        referenceRectalTemperature: referenceT, //参考腹部温度\n        furLength: furL, //毛发长度\n        bloodPressure: bloodPressure, //血压\n        memo: notes,\n        petVitalTypeId: petVitalId,\n        clinicalDataEntityList: emerData,\n        anusTemperature: referenceT\n      };\n      if (storage.roleId === `1`) {\n        datas.userId = storage.userId;\n      } else {\n        datas.doctorId = storage.userId;\n        datas.userId = storage.userId;\n      }\n      let ubdateWeight = units === \"℉\" ? (parseFloat(WeightValue / 2)).toFixed(2) : parseFloat(WeightValue).toFixed(2);\n      let updatePetInfoData = {\n        weight: ubdateWeight\n      }\n      if (storage.lastOrganization) {\n        updatePetInfoData.organizationId = storage.lastOrganization\n      }\n\n      let { petId, isWalkIn } = petDetailInfo;\n      if (petId && !isWalkIn) {\n        datas.petId = petId;\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getHistory11(petDetailInfo.petId);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(\"upload failed\");\n          });\n      } else if (isWalkIn) {\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getEmergencyHistory(1);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(err);\n          });\n      }\n      if (WeightValue !== '' && !isWalkIn) {\n        updatePetInfo(petId, updatePetInfoData)\n          .then((res) => {\n            if (res.flag === true) {\n\n            } else {\n              message.error('Failed to update pet weight');\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }\n    }, 500);\n  };\n  const _getHistory11 = (petId) => {\n    let historys = [];\n    setLoading(true);\n    getPetExamAndClinicalByPetId(petId)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i];\n\n            let {\n              petId,\n              examId,\n              clinicalDatagroupId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n              modifiedTime,\n            } = data;\n\n            if (!clinicalDatagroupId) {\n              continue;\n            }\n            let Tem = temperature;\n            if (clinicalDataEntity) {\n              Tem = Tem || clinicalDataEntity.data0;\n            }\n            Tem = Tem ? Tem : 0;\n\n            let time = null;\n            if (\n              modifiedTime &&\n              `${modifiedTime}` !== \"\" &&\n              `${modifiedTime}` !== `undefined`\n            ) {\n              time = modifiedTime;\n            } else {\n              time = createTime;\n            }\n            let json = {\n              time,\n              Temp: Tem,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(json);\n          }\n          let historyData = [];\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i];\n            let {\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              examId,\n            } = history;\n            // console.log('--------', history.placement);\n            let placement = history.placement;\n            if (placement === null || placement === \"\") {\n              placement = 1;\n            }\n            let str = {\n              date: moment(history.time).format(\"MMM DD\"),\n              time: moment(history.time).format(\"hh:mm A\"),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              key: examId,\n            };\n            historyData.push(str);\n          }\n          // this.setState({\n          //     historyData\n          // })\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  //获取walk-in下未分配宠物的临床测试记录\n  const _getEmergencyHistory = (currPage) => {\n    let historys = [];\n    setLoading(true);\n    let data = {\n      pageSize: pageSize,\n      currPage: currPage,\n    }\n    getPetExamByDoctorId(storage.userId, data)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          setTotal(res.data.totalCount);\n          let datas = res.data.list;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let {\n              petId,\n              examId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              clinicalDatagroupId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n            } = datas[i];\n            let Tem = temperature;\n            try {\n              Tem = temperature || clinicalDataEntity.data0;\n            } catch (error) {\n              console.log(\"抛出的异常\", error);\n            }\n            let str = {\n              clinicalDatagroupId,\n              createTime,\n              date: moment(createTime).format(\"MMM DD\"),\n              time: moment(createTime).format(\"hh:mm A\"),\n              temp: parseInt(Tem * 10) / 10,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(str);\n          }\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = historys;\n          } else {\n            let oldArr = historyData;\n            let arr = historys;\n            newArr = [...oldArr, ...arr];\n          }\n          setHistoryData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const getOption = () => {\n    let option = {};\n    try {\n      let min, max;\n      if (units === \"℃\") {\n        min = 25;\n        max = 45;\n      } else {\n        min = 75;\n        max = 115;\n      }\n      let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci)\n        ? echarsData\n        : echarsData1;\n      option = {\n        color: [\"#81b22f\"],\n        tooltip: {\n          /*返回需要的信息*/\n          trigger: \"axis\",\n          triggerOn: \"mousemove\",\n          enterable: true,\n          formatter: function (param) {\n            var value = param[0].value;\n            // console.log('---valuez值', value, units);\n            if (\n              (units === \"℉\" && parseInt(value) <= 32) ||\n              (units === \"℃\" && parseInt(value) == 0)\n            ) {\n              return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:--</div>`;\n            }\n            return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\n              1\n            )}${units}</div>`;\n          },\n        },\n        xAxis: {\n          name: \"SPL\",\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\",\n          },\n          type: \"category\",\n          data: Eci,\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          // 设置X轴数据旋转倾斜\n          axisLabel: {\n            rotate: 0, // 旋转角度\n            interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\n          },\n        },\n        yAxis: {\n          name: \"temperature\",\n          type: \"value\",\n          min, // 设置y轴刻度的最小值\n          max, // 设置y轴刻度的最大值\n          splitNumber: 0, // 设置y轴刻度间隔个数\n          nameTextStyle: {\n            padding: [0, 0, 0, 8],\n            // backgroundColor: 'pink',\n            width: \"1200px\",\n            // fontSize: 20,\n            align: \"left\",\n          },\n\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        series: [\n          {\n            name: \"模拟数据\",\n            type: \"line\",\n            showSymbol: false,\n            hoverAnimation: false,\n            // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\n            data: wen0,\n            smooth: 0.5,\n            symbol: \"none\",\n            // itemStyle: {\n            //     normal: {\n\n            //     }\n            // }\n            lineStyle: {\n              // 系列级个性化折线样式\n              width: 2,\n              type: \"solid\",\n              color: {\n                type: \"linear\",\n                x: 0,\n                y: 1,\n                x2: 0,\n                y2: 0,\n                colorStops: [\n                  {\n                    offset: 0.5,\n                    color: \"#47C2ED\", // 0% 处的颜色  蓝\n                  },\n                  {\n                    offset: 1,\n                    color: \"#78D35D\", // 50% 处的颜色  绿\n                  },\n                  // {\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\n                  // }\n                ],\n                globalCoord: false, // 缺省为 false\n              },\n            },\n          },\n        ],\n      };\n    } catch (error) { }\n\n    return option;\n  };\n  const _status = () => {\n    let text = \"\",\n      unit = \"\",\n      temColor = \"\";\n    let Temp = parseFloat(temperature);\n    if (mellaConnectStatus === \"disconnected\") {\n      if (!showHistoryEchart) {\n        Temp = \"\";\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      } else {\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      }\n    } else if (mellaConnectStatus === \"connected\") {\n      Temp = \"\";\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n    } else {\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n      if (Temp > 15) {\n        unit = units;\n        if (Temp > 39) {\n          text = \"High\";\n          temColor = \"#E1206D\";\n        } else if (Temp < 31) {\n          text = \"Low\";\n          temColor = \"#47C2ED\";\n        } else {\n          text = \"Normal\";\n          temColor = \"#78D35D\";\n        }\n      }\n    }\n    let temp = null;\n\n    if (`${Temp}` !== \"NaN\" && Temp) {\n      temp =\n        units === \"℉\" ? _.round((Temp * 1.8 + 32), 1) : Temp.toFixed(1);\n    }\n    let lowFlog = false;\n    if (unit === \"℃\") {\n      if (temp < 24.8) {\n        lowFlog = true;\n      }\n    } else {\n      if (temp < 76.6) {\n        lowFlog = true;\n      }\n    }\n\n    return (\n      <div\n        className=\"Tem\"\n        style={{\n          color: temColor,\n          right: px(70),\n          bottom: mTop(250),\n          pointerEvents: \"none\",\n        }}\n      >\n        {mellaConnectStatus !== \"isMeasuring\" ? (\n          showHistoryEchart ? (\n            <>\n              <span style={{ fontSize: px(42), fontWeight: \"bold\" }}>\n                {temp}{\" \"}\n                <sup style={{ fontSize: px(26), fontWeight: \"bold\" }}>\n                  {units}\n                </sup>\n              </span>\n              <br />\n              {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\n\n              <span\n                style={{\n                  fontSize: px(32),\n                  color: \"#8a8a8a\",\n                  fontWeight: \"bold\",\n                }}\n              >{`History`}</span>\n            </>\n          ) : (\n            <>\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp < 3 && !temp ? null : temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {unit}\n                </sup>\n              </span>\n              <br />\n              <span style={{ fontSize: px(32), fontWeight: \"bold\" }}>\n                {text}\n              </span>\n            </>\n          )\n        ) : lowFlog ? (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {\"Low\"}\n            </span>\n            <br />\n          </>\n        ) : (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {temp}{\" \"}\n              <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>{unit}</sup>\n            </span>\n            <br />\n          </>\n        )}\n      </div>\n    );\n  };\n  const handleChange = (index) => {\n    setFurLength(index);\n  };\n  //Exam Details内容\n  const _petCharacteristics = () => {\n    let placeholder = \"\";\n    switch (`${furLength}`) {\n      case \"1\":\n        placeholder = \"smooth\";\n        break;\n      case \"2\":\n        placeholder = \"short\";\n        break;\n      case \"3\":\n        placeholder = \"medium\";\n        break;\n      case \"4\":\n        placeholder = \"long\";\n        break;\n      default:\n        break;\n    }\n    return (\n      <div\n        className=\"petChaeacteristics\"\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\n      >\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Room Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={roomTemperature}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRoomTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Reference Rectal Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={`${referenceRectalTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setReferenceRectalTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Body Condition Score: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bodyConditionScore}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBodyConditionScore(str);\n              }}\n              maxLength={8}\n            />\n          </div>\n          <div className=\"item\">\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              className=\"inpSelect\"\n              placeholder\n              onChange={handleChange}\n              value={placeholder}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${heartRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setHeartRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Blood Pressure: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bloodPressure}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBloodPressure(str);\n              }}\n              suffix={'mm'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${respiratoryRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRespiratoryRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: '140px' }}>Weight:  </p>\n            <Input className='inp'\n              style={{ border: 'none', outline: 'medium' }}\n              value={WeightValue}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\n                setWeightValue(str);\n              }}\n              suffix={units === '℉' ? 'lb' : 'kg'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //历史数据\n  const _history = () => {\n    const _del = (key, record) => {\n      deletePetExamByExamId(key)\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              const historyData1 = [...historyData];\n              setHistoryData(\n                historyData1.filter((item) => item.historyId !== key)\n              );\n            } else {\n              message.error('fail to delete!');\n            }\n          }\n        );\n    };\n    const _edit = (key, record) => {\n      let {\n        heartRate,\n        bloodPressure,\n        respiratoryRate,\n        referenceRectalTemperature,\n        roomTemperature,\n        bodyConditionScore,\n        furLength,\n        note,\n      } = record;\n      let editHeartRate =\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\n      let editBloodPressure =\n        bloodPressure !== null && bloodPressure !== undefined\n          ? bloodPressure\n          : \"\";\n      let editRespiratoryRate =\n        respiratoryRate !== null && respiratoryRate !== undefined\n          ? respiratoryRate\n          : \"\";\n      let editRectal =\n        referenceRectalTemperature !== null &&\n          referenceRectalTemperature !== undefined\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editRoomTemperature =\n        roomTemperature !== null && roomTemperature !== undefined\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editBodyConditionScore =\n        bodyConditionScore !== null && bodyConditionScore !== undefined\n          ? bodyConditionScore\n          : \"\";\n      let editFurLength = furLength;\n      let mome = note ? note : \"\";\n\n      console.log(\n        editRectal,\n        editRoomTemperature,\n        editHeartRate,\n        editBloodPressure,\n        editRespiratoryRate\n      );\n\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\n      setEditRectal(editRectal);\n      setEditRoomTemperature(editRoomTemperature);\n      setEditHeartRate(editHeartRate);\n      setEditBloodPressure(editBloodPressure);\n      setEditRespiratoryRate(editRespiratoryRate);\n      setEditVisible(true);\n      setEditId(key);\n      setEditMemo(record.note);\n      setEditBodyConditionScore(editBodyConditionScore);\n      setEditFurLength(editFurLength);\n      setMemo(mome);\n    };\n    const see = (id, record) => {\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      console.log(id, record);\n      setTip(\"data is loading\");\n      setTipSpin(true);\n      getClinicalDataByExamId(id)\n        .then((res) => {\n          setTip(\"\");\n          setTipSpin(false);\n          if (res.flag) {\n            let datas = res.data.clinicalDataEntityList;\n            if (datas) {\n              let echarsData = {\n                Eci: [],\n                wen0: [],\n                wen1: [],\n              };\n              let { wen0, wen1, Eci } = echarsData;\n              for (let i = 0; i < datas.length; i++) {\n                let { data0, data1 } = datas[i];\n\n                Eci.push(i);\n                if (units === \"℃\") {\n                  wen0.push(data0);\n                  wen1.push(data1);\n                } else {\n                  wen0.push(data0 * 1.8 + 32);\n                  wen1.push(data1 * 1.8 + 32);\n                }\n              }\n              let Temp = datas[datas.length - 1].data0 || \"\";\n              setEcharsData(echarsData);\n              setTemp(Temp);\n              setShowHistoryEchart(true);\n            }\n          }\n        })\n        .catch((err) => {\n          setTip(\"\");\n          setTipSpin(false);\n          console.log(err);\n        });\n    };\n    const isflog = window.screen.height < 1000 ? true : false;\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"activeImageBox\"\n              style={{\n                display: \"flex\",\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" className=\"activeImages\" />\n              </Popconfirm>\n              {petDetailInfo.isWalkIn ? (\n                <div\n                  className=\"assign\"\n                  style={{\n                    fontSize: px(14),\n                  }}\n                  onClick={() => {\n                    setSelectPetVisible(true);\n                    setSeleceEmergencies(record);\n                    setLastLastWorkplaceId(storage.lastOrganization);\n                  }}\n                >\n                  Assign\n                </div>\n              ) : (\n                <>\n                  <img\n                    src={edit}\n                    alt=\"\"\n                    // style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                    className=\"activeImages\"\n                  />\n\n                  <img\n                    src={start}\n                    alt=\"\"\n                    // style={{ width: px(25) }}\n                    onClick={() => see(record.historyId, record)}\n                    className=\"activeImages\"\n                  />\n                </>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: `Temp(${units})`,\n        // title: `Temp(℉)`,\n        key: \"temp\",\n        dataIndex: \"temp\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log(text, record);\n\n          /**\n           * bag：温度数值前的圆圈的背景颜色\n           * tem：展示的温度\n           * endvalue:将从后台得到的数据全部转化成华氏度\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           *\n           */\n\n          let bag = \"\",\n            tem = \"\";\n\n          let endValue =\n            text > 55 ? text : _.round((text * 1.8 + 32), 1);\n          let min = 100.4,\n            max = 102.56;\n\n          if (endValue > max) {\n            bag = \"#E1206D\";\n          } else if (endValue < min) {\n            bag = \"#98DA86\";\n          } else {\n            bag = \"#58BDE6\";\n          }\n\n          if (units === \"℃\") {\n            if (text) {\n              tem = `${text}${units}`;\n              if (text > 55) {\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\n              } else {\n                tem = `${text.toFixed(1)}${units}`;\n              }\n            }\n          } else {\n            if (text) {\n              if (text > 55) {\n                tem = `${text}${units}`;\n              } else {\n                tem = `${_.round((text * 1.8 + 32), 1)}${units}`;\n              }\n            }\n          }\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {tem ? (\n                <div\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"8px\",\n                    backgroundColor: bag,\n                    marginRight: \"3px\",\n                  }}\n                />\n              ) : null}\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n            </div>\n          );\n        },\n      },\n      {\n        title: `Rectal Temperature`,\n        key: \"referenceRectalTemperature\",\n        dataIndex: \"referenceRectalTemperature\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log('肛温的值：', text);\n          let num = text;\n          if (text !== null) {\n            num = _.round((text * 1.8 + 32), 1);\n          }\n\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {text !== null && (\n                <p style={{ margin: 0, padding: 0 }}>\n                  {num} <span>{\"℉\"}</span>\n                </p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Placement\",\n        dataIndex: \"placement\",\n        key: \"placement\",\n        align: \"center\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          switch (record.placement) {\n            case 1:\n              return (\n                //腋温\n                <div>\n                  <img src={palcement_ye} alt=\"\" />\n                </div>\n              );\n            case 3:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 2:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 4:\n              return (\n                //耳温\n                <div>\n                  <img src={placement_er} alt=\"\" />\n                </div>\n              );\n            default:\n              return null;\n          }\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"100%\" }}>{text}</p>;\n        },\n      },\n    ];\n    let hisHe = mTop(200);\n    try {\n      let historyElement = document.querySelectorAll(\n        \"#clinicalMeasure11 .historyTable\"\n      );\n      hisHe = historyElement[0].clientHeight - mTop(100);\n    } catch (error) { }\n\n    return (\n      <div className=\"historyTableBox\" onScrollCapture={onScrollCapture}>\n        <Table\n          className=\"historyTable\"\n          columns={columns}\n          loading={loading}\n          dataSource={historyData}\n          rowKey={(columns) => columns.historyId}\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\n          pagination={false}\n          scroll={{\n            // y: hisHe,\n            y: '80%'\n          }}\n        />\n      </div>\n    );\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === historyData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      _getEmergencyHistory(currPage + 1);\n    }\n  }\n  const _editModal = () => {\n    function save() {\n      let datas = {\n        memo: memo,\n        bodyConditionScore: parseInt(editBodyConditionScore),\n        furLength: parseInt(editFurLength),\n        heartRate: editHeartRate,\n        bloodPressure: editBloodPressure,\n        respiratoryRate: editRespiratoryRate,\n      };\n      if (editRoomTemperature) {\n        datas.roomTemperature = (\n          (parseFloat(editRoomTemperature) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n      if (editRectal) {\n        datas.referenceRectalTemperature = (\n          (parseFloat(editRectal) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n\n      setEditVisible(false);\n      setTip(\"Data is being modified\");\n      setTipSpin(true);\n\n\n      updatePetExam(editId, datas)\n        .then((res) => {\n          console.log(res);\n          setTipSpin(false);\n          setTip(\"\");\n          message.success(\"Data modified successfully\");\n\n          _getHistory11(petDetailInfo.petId);\n        })\n        .catch((err) => {\n          setTipSpin(false);\n          setTip(\"\");\n\n          message.success(\" Data modification failed\");\n\n          console.log(err);\n        });\n    }\n\n    let furLength = \"\";\n    if (editFurLength !== null && editFurLength !== undefined) {\n      switch (`${editFurLength}`) {\n        case \"1\":\n          furLength = \"smooth\";\n          break;\n        case \"2\":\n          furLength = \"short\";\n          break;\n        case \"3\":\n          furLength = \"medium\";\n          break;\n        case \"4\":\n          furLength = \"long\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          >\n            Modification history information\n          </div>\n        }\n        visible={editVisible}\n        // visible={true}\n        onCancel={() => {\n          setEditVisible(false);\n        }}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n          // onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n        className=\"editModalBox\"\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRoomTemperature}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n\n                setEditRoomTemperature(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRectal}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setEditRectal(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBodyConditionScore}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n\n                setEditBodyConditionScore(str);\n              }}\n            />\n          </div>\n\n          <div className=\"bodyType11\">\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={(index) => {\n                console.log(index);\n                setEditFurLength(index);\n              }}\n              style={{\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={furLength}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editHeartRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditHeartRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBloodPressure}\n              onChange={(item) => {\n                setEditBloodPressure(item.target.value);\n              }}\n            />\n            <span>mm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRespiratoryRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditRespiratoryRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"2\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              value={memo}\n              onChange={(val) => {\n                setMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n\n          <div className=\"btn\" onClick={save}>\n            Save\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n  const _foot = () => {\n    let lbgc = \"\",\n      rbgc = \"\";\n    if (isPetCharacteristics) {\n      lbgc = \"rgba(25,173,228,0.5)\";\n      rbgc = \"rgba(105,201,237,1)\";\n    } else {\n      lbgc = \"rgba(105,201,237,1)\";\n      rbgc = \"rgba(25,173,228,0.5)\";\n    }\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\">\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: lbgc }}\n            onClick={() => setIsPetCharacteristics(true)}\n          >\n            Exam Details\n          </div>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: rbgc }}\n            onClick={() => setIsPetCharacteristics(false)}\n          >\n            History\n          </div>\n        </div>\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\n      </div>\n    );\n  };\n  //获取本地数据\n  const getLocalSetting = () => {\n    let settings = {\n      isHua: true,\n      is15: true,\n      self_tarting: false, //自启动\n      isBacklight: true,\n      isBeep: true,\n      backlightTimer: { length: 140, number: \"45\" },\n      autoOff: { length: 0, number: \"30\" },\n    };\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n  };\n  //echars渲染\n  const echars = () => {\n    return (\n      <div id=\"myCharts\"\n        style={{ width: windowWidth }}\n        ref={chartsBox}\n      >\n        <ReactECharts\n          option={getOption()}\n          theme=\"Imooc\"\n          style={{ height: 'auto', width: 'auto' }}\n          notMerge={true}\n          lazyUpdate={true}\n          ref={echartsElement}\n          className=\"charts\"\n        />\n        {_status()}\n      </div>\n    );\n  };\n  //分配宠物walk-in信息\n  const assignPet = (value) => {\n    setSelectPetModalLoading(true);\n    let parmes = {\n      petId: value.petId,\n      clinicalDatagroupId: seleceEmergencies.clinicalDatagroupId,\n    };\n    addAndSavePetExam(seleceEmergencies.historyId, parmes)\n      .then((res) => {\n        setSelectPetModalLoading(false);\n        if (res.flag === true) {\n          message.success(\"Assigned successfully\");\n          setSelectPetVisible(false);\n          setAddPetId('');\n          _getEmergencyHistory(1);\n        } else {\n          message.error(\"Assignment failed\");\n        }\n      })\n      .catch((err) => {\n        setSelectPetModalLoading(false);\n        message.error(\"Assignment failed\");\n      });\n  }\n  //添加宠物弹窗显示\n  const onAddPet = () => {\n    setAddPetId('');\n    setSelectPetVisible(false);\n    setAddPetVisible(true);\n  }\n  //添加宠物\n  const addNewPet = (value) => {\n    let data = {\n      ...value,\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\n    };\n    if (storage.lastWorkplaceId) {\n      data.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (storage.userId) {\n      data.doctorId = storage.userId\n    }\n    setAddPetModalLoading(true);\n    addDeskPet(value.patientId, data)\n      .then((res) => {\n        setAddPetModalLoading(false);\n        if (res.flag === true) {\n          message.success('Adding pets successfully');\n          setAddPetId(res.data.petId);\n          setAddPetVisible(false);\n          setSelectPetVisible(true);\n        } else {\n          message.error('patientId already exists');\n        }\n      })\n      .catch((err) => {\n        setAddPetModalLoading(false);\n      })\n  }\n\n  useEffect(() => {\n    if (petDetailInfo.petId) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getHistory11(petDetailInfo.petId);\n    } else if (petDetailInfo.isWalkIn) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getEmergencyHistory(1);\n    }\n    return () => {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n    };\n  }, [petDetailInfo]);\n\n  useEffect(() => {\n    return () => {\n      saveHistoryTime && clearTimeout(saveHistoryTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", resize);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // setTest(echartsElement);\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (mellaMeasureNumCopy === mellaMeasureNum) {\n      return;\n    }\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // console.log('监听', mellaMeasureValue);\n    setTemp(mellaMeasureValue);\n    let { Eci, wen0, wen1 } = echarsData;\n    //两个数组合并成一个数组\n    let EciCopy = [...Eci];\n\n    let win0Copy = [...wen0];\n    let wen1Copy = [...wen1];\n    EciCopy.push(EciCopy.length + 1);\n    win0Copy.push(mellaMeasureValue);\n    wen1Copy.push(mellaMeasureValue);\n    let json = {\n      Eci: EciCopy,\n      wen0: win0Copy,\n      wen1: wen1Copy,\n    };\n    setEcharsData(json);\n    let Eci1 = echarsData1.Eci;\n    let wen01 = echarsData1.wen0;\n    let wen11 = echarsData1.wen1;\n    let EciCopy1 = [...Eci1];\n\n    let win0Copy1 = [...wen01];\n    let wen1Copy1 = [...wen11];\n    EciCopy1.push(EciCopy1.length + 1);\n    let num =\n      units === \"℃\"\n        ? mellaMeasureValue\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\n    win0Copy1.push(num);\n    wen1Copy1.push(num);\n    let json1 = {\n      Eci: EciCopy1,\n      wen0: win0Copy1,\n      wen1: wen1Copy1,\n    };\n    setEcharsData1(json1);\n    // const option = getOption();\n    // echartsElement.current.getEchartsInstance().setOption(option);\n    return () => { };\n  }, [mellaMeasureNum]);\n\n  useEffect(() => {\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\n      addClinical();\n    }\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\n      setEcharsData({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n    }\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setShowHistoryEchart(false);\n    }\n\n    setMellaStatus(mellaConnectStatus);\n    return () => { };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      getLocalSetting();\n    } else {\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\n    }\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    let bufferData = electronStore.get(`${petDetailInfo.petId}`);\n    // console.log('bufferData: ', bufferData);\n    setRoomTemperature(bufferData ? bufferData?.roomTemperature : '');\n    setReferenceRectalTemperature(bufferData ? bufferData?.referenceRectalTemperature : '');\n    setBodyConditionScore(bufferData ? bufferData?.bodyConditionScore : '');\n    setFurLength(bufferData ? bufferData?.furLength : '');\n    setHeartRate(bufferData ? bufferData?.heartRate : '');\n    setBloodPressure(bufferData ? bufferData?.bloodPressure : '');\n    setRespiratoryRate(bufferData ? bufferData?.respiratoryRate : '');\n    setWeightValue(bufferData ? bufferData?.WeightValue : '');\n    return (() => { })\n  }, [petDetailInfo.petId]);\n\n  useEffect(() => {\n    return () => {\n      let newData = {\n        roomTemperature: roomTemperature,\n        referenceRectalTemperature: referenceRectalTemperature,\n        bodyConditionScore: bodyConditionScore,\n        furLength: furLength,\n        heartRate: heartRate,\n        bloodPressure: bloodPressure,\n        respiratoryRate: respiratoryRate,\n        WeightValue: WeightValue\n      }\n      electronStore.set(`${petDetailInfo.petId}`, newData);\n    }\n  }, [roomTemperature, referenceRectalTemperature, bodyConditionScore, furLength, heartRate, bloodPressure, respiratoryRate, WeightValue, petDetailInfo.petId])\n\n  useEffect(() => {\n    if (biggieBodyWeight !== 0) {\n      if (units === '℉') {\n        setWeightValue((biggieBodyWeight * 2).toFixed(2));\n      } else {\n        setWeightValue(biggieBodyWeight.toFixed(2));\n      }\n    }\n    return (() => { })\n  }, [biggieBodyWeight])\n\n  return (\n    <>\n      <div\n        id=\"clinical\"\n        style={{\n          height: bodyHeight,\n          minWidth: px(200),\n          minHeight: bodyHeight,\n          overflow: \"hidden\",\n        }}\n        ref={clinicalRef}\n      >\n        <div\n          className=\"headerContentBox\"\n          style={{ background: \"#fff\", position: \"relative\" }}\n        >\n          <Layout style={{ height: \"100%\" }}>\n            <HeaderItem timeNum={60} />\n          </Layout>\n        </div>\n        <div\n          className=\"clinicalBody\"\n          style={{ width: \"100%\", height: bodyHeight - px(100) }}\n        >\n          <div className=\"clinical_top\">\n            <div className=\"r\">\n              {/*顶部按钮Re-sync Base*/}\n              {mellaConnectStatus === \"disconnected\" && (\n                <div className=\"bb1\">\n                  <div\n                    className=\"btn78\"\n                    onClick={() => {\n                      if (resyncDeviceIsClick === true) {\n                        resyncDeviceIsClick = false;\n                        let ipcRenderer = window.electron.ipcRenderer;\n                        ipcRenderer.send(\"qiehuan\");\n                        const time = setTimeout(() => {\n                          resyncDeviceIsClick = true;\n                          clearTimeout(time);\n                        }, 2500);\n                      }\n                    }}\n                  >\n                    Re-sync Base\n                  </div>\n                </div>\n              )}\n              {echars()}\n              {/* 底部宠物信息 */}\n              {_foot()}\n              {_editModal()}\n              {tipSpin && (\n                <div className=\"modal\">\n                  <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                    <LoadingOutlined\n                      style={{\n                        fontSize: 30,\n                        color: \"#fff\",\n                        marginTop: mTop(-30),\n                      }}\n                    />\n                  </div>\n                  <p>data is loading...</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {\n          selectPetVisible && (\n            <SelectPet\n              visible={selectPetVisible}\n              destroyOnClose\n              width={400}\n              value={addPetId}\n              onCancel={() => {\n                setAddPetId('');\n                setSelectPetVisible(false);\n              }}\n              onSelect={(value) => {\n                assignPet(value);\n              }}\n              onAddPet={() => onAddPet()}\n              onLoading={selectPetModalLoading}\n            />\n          )\n        }\n        {\n          addPetVisible && (\n            <AddPetModal\n              visible={addPetVisible}\n              destroyOnClose\n              width={400}\n              onCancel={() => {\n                setAddPetVisible(false);\n                setSelectPetVisible(true);\n              }}\n              onConfirm={(value) => {\n                addNewPet(value);\n              }}\n              onLoading={addPetModalLoading}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nClinicalStudy.propTypes = {\n  bodyHeight: propTypes.number,\n};\nClinicalStudy.defaultProps = {\n  bodyHeight: 0,\n};\nexport default connect(\n  (state) => ({\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    biggieBodyWeight: state.hardwareReduce.biggieBodyWeight,\n    biggieUnit: state.hardwareReduce.biggieUnit,\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  { setTest }\n)(ClinicalStudy);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",["842"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport { px } from '../../utils/px';\nimport PetTable from '../../components/petTable';\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\nimport moment from 'moment'\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nlet storage = window.localStorage;\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\n\n  //初始化获取宠物列表数据\n  const [petListArr, setPetListArr] = useState([])\n  //定义宠物列表是否加载中\n  const [loading, setLoading] = useState(true)\n  const [spin, setSpin] = useState(false)\n  const _getExam = async () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('查询宠物的入参', params);\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n    setLoading(true)\n    listAllPetInfo(params)\n      .then(res => {\n        console.log('查询到的宠物列表,/user/listAllPetInfo', res);\n        if (res.flag === true && res.data) {\n          let data = []\n          let oldList = res.data\n          setPetListArrFun(oldList)\n          // let oldList = res.data.list\n          for (let i = 0; i < oldList.length; i++) {\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n              h2tLength, torsoLength } = oldList[i]\n            let owner = ''\n            patientId = isUnKnow(patientId)\n            petName = isUnKnow(petName)\n            breedName = isUnKnow(breedName)\n            age = isUnKnow(age)\n            weight = isUnKnow(weight)\n            if (!firstName) {\n              firstName = ''\n            }\n            if (!lastName) {\n              lastName = ''\n            }\n            if (lastName === '' && firstName === '') {\n              owner = 'unknown'\n            } else {\n              owner = `${lastName} ${firstName}`\n            }\n            createTime = moment(createTime).format('X')\n            let petGender = ''\n            switch (`${gender}`) {\n              case '1': petGender = 'F'\n\n                break;\n              case '0': petGender = \"M\"\n                break;\n              default: petGender = 'unknown'\n                break;\n            }\n            let petAge = 'unknown'\n            if (birthday) {\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\n            }\n\n            let json = {\n              insertedAt: createTime,\n              patientId,\n              petName,\n              owner,\n              breed: breedName,\n              gender: petGender,\n              age: petAge,\n              petId,\n              id: i,\n              weight,\n              rfid,\n              url,\n              speciesId,\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n              h2tLength, torsoLength,\n              pethubId, macId,\n\n            }\n            data.push(json)\n\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          console.log('列表的数据：', data);\n          setPetListArr(data)\n          setLoading(false)\n          setSpin(false)\n        } else {\n          setLoading(false)\n          setSpin(false)\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false)\n        setSpin(false)\n      })\n\n\n\n  }\n  const _refresh = () => {\n    setSpin(true)\n    _getExam()\n  }\n\n  useEffect(() => {\n    //获取宠物列表\n    _getExam()\n  }, [])\n\n  return (\n    <div id='allPets' style={{ height: bodyHeight }}>\n      <div className=\"allPetHeard\">\n        <div className=\"addDeviceTitle flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n          <div className=\"title\">Client Results</div>\n          <div className=\"refresh flex\"\n            style={{ fontSize: px(25), marginLeft: px(10) }}\n          >\n            <SyncOutlined onClick={_refresh} spin={spin} />\n          </div>\n\n        </div>\n\n        <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(40), width: px(200) }}\n            onClick={() => {\n              let json = {\n                isWalkIn: true,\n                petId: null,\n                petName: null,\n                owner: null,\n                breed: null,\n\n              }\n              petDetailInfoFun(json);\n              setMenuNum(\"1\");\n            }}\n          >\n            <p className=\"walkText\">Walk-In</p>\n          </div>\n        </div>\n\n      </div>\n\n      <PetTable\n        bodyHeight={bodyHeight - px(100)}\n        petListArr={petListArr}\n        loading={loading}\n        resetPetList={(val) => setPetListArr(val)}\n\n      />\n    </div >\n\n  )\n}\n\nAllPet.propTypes = {\n}\n//默认值\nAllPet.defaultProps = {\n  bodyHeight: 0,\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, setPetListArrFun }\n)(AllPet)\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",["843"],"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/LinkEquipment\";\nimport ScanPet from \"./components/scanPet\";\nimport CalculationResult from \"./components/calculationResult\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\n\nimport \"./index.less\";\n\nconst ScanPage = ({ petMessage, hardwareMessage, bodyHeight, }) => {\n  let { petId, isWalkIn } = petMessage;\n  const [calculationResultType, setCalculationResultType] = useState(false);//切换计算结果界面\n  const [measureData, setMeasureData] = useState({});//测量的值\n\n\n  return (\n    <>\n      <Layout className=\"scanHomeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {\n          calculationResultType ?\n            (\n              <CalculationResult type={setCalculationResultType} getMeasureData={measureData} />\n            ) :\n            (\n              _.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet type={setCalculationResultType} setMeasureData={setMeasureData} />\n            )\n        }\n\n      </Layout>\n    </>\n  );\n};\n\nScanPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(ScanPage);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",["844","845","846","847","848","849"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\api.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\config\\config.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx",["850"],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n  setSelectHardwareType\r\n} from \"./../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n  setSelectHardwareType\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n          onClick={() => {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType('add');\r\n          }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25), }}\r\n\r\n\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => { },\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum, setSelectHardwareType }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js",["851"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js",["852","853"],"/**\r\n * @file backend.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/backend 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/backend`\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getOta = (hardWareType) => {\r\n    return get(`${baseURL}/getOta?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js",["854"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/petall 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/petall`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\nexport const pet_petall = (lastOrganization, params) => {\n  return postJson(`${baseURL}/pet/${lastOrganization}/petall`, params)\n}\n/**\n * @dec 根据用户id查询当前组织下的所有宠物\n * @param {*} params\n * @returns\n */\nexport const getPersonPetByUserId = (params) => {\n  return get(`${baseURL}/getPersonPetByUserId?userId=${params.userId}&orgId=${params.orgId}`);\n}\n\n\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js",["855","856"],"/**\r\n * @file vetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/VetSpire`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据vetspire中的api验证\r\n * @param params \r\n */\r\n\r\nexport const selectLocationsByOrganization = (params) => {\r\n    return postJson(`${baseURL}/selectLocationsByOrganization`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js",["857","858"],"/**\r\n * @file userfeedback.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/userfeedback 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/userfeedback`\r\n\r\n\r\n/**\r\n * @dec bug提交\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const savefeedback = (params) => {\r\n    return postJson(`${baseURL}/savefeedback`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js",["859","860"],"/**\r\n * @file clinical.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/clinical 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/clinical`\r\n\r\n\r\n/**\r\n * @dec 体重保存\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const addAllClinical = (params) => {\r\n    return postJson(`${baseURL}/addAllClinical`, params)\r\n}\r\n\r\n/**\r\n * @dec 1.2版本的猫预测\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const catv12Predict = (params) => {\r\n    return postJson(`${baseURL}/catv12Predict`, params)\r\n}","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js",["861"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/EzyVet`\r\n\r\n\r\n/**\r\n * @dec 重新获取令牌\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const ezyvetauth = (parames) => {\r\n    return get(`${baseURL}/ezyvetauth`, parames)\r\n}\r\n\r\n\r\nexport const checkAndSaveAnimalList = (parames) => {\r\n    return postJson(`${baseURL}/checkAndSaveAnimalList`, parames)\r\n}\r\n\r\nexport const healthstatus = (paramId, petVitalId, parames) => {\r\n    return patch(`${baseURL}/healthstatus/${paramId}/${petVitalId}`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js",["862","863"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/user`\r\n\r\n\r\n/**\r\n * @dec 邀请别人加入组织\r\n * @param {*} userId 用户id\r\n * @param {*} organizationId 组织id\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const inviteUserByEmail = (userId, organizationId, parames) => {\r\n    return postJson(`${baseURL}/inviteUserByEmail/${userId}/${organizationId}`, parames)\r\n}\r\n\r\nexport const updateUserInfo = (parames) => {\r\n    return postJson(`${baseURL}/updateUserInfo`, parames)\r\n}\r\n\r\n\r\n\r\n\r\nexport const loginWithQRcode = (QRToken) => {\r\n    return get(`${baseURL}/loginWithQRcode/${QRToken}`, '')\r\n}\r\n\r\n\r\nexport const getLoginQRcode = () => {\r\n    return get(`${baseURL}/getLoginQRcode`, '')\r\n}\r\n\r\n\r\n\r\nexport const resendDeskRegistEmail = (logupEmailCode, params) => {\r\n    return get(`${baseURL}/resendDeskRegistEmail/${logupEmailCode}`, params)\r\n}\r\n\r\n\r\nexport const deskRegistAWSSNS = (params) => {\r\n    return postJson(`${baseURL}/deskRegistAWSSNS`, params)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js",["864","865","866"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const selectExamByPatientId = (parames) => {\r\n    return postJson(`${baseURL}/selectExamByPatientId`, parames)\r\n}\r\n\r\n\r\nexport const updateVitalsTemperatureByVitalId = (parames) => {\r\n    return postJson(`${baseURL}/updateVitalsTemperatureByVitalId`, parames)\r\n}\r\n\r\n\r\nexport const selectLocations = (parames) => {\r\n    return postJson(`${baseURL}/selectLocations`, parames)\r\n}\r\n\r\n\r\nexport const selectProvidersByLocationId = (parames) => {\r\n    return postJson(`${baseURL}/selectProvidersByLocationId`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js",["867","868","869"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const vetspireGetPetLatestExam = (params) => {\r\n    return postJson(`${baseURL}/vetspireGetPetLatestExam`, params)\r\n}\r\n\r\n\r\n\r\n\r\nexport const vetspireUpdateWeight = (params) => {\r\n    return postJson(`${baseURL}/vetspireUpdateWeight`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js",["870","871","872"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/pet`\r\n\r\n\r\n\r\n\r\n\r\nexport const getPetInfoByRFID = (heardSearchText, lastOrganization) => {\r\n    return get(`${baseURL}/getPetInfoByRFID/${heardSearchText}/${lastOrganization}`, '')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js",["873","874","875"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/user`\r\n\r\n\r\nexport const changeLatestWorkplace = (userId, workplaceId, roleId = 2) => {\r\n    return get(`${baseURL}/changeLatestWorkplace/${userId}/${roleId}/${workplaceId}`,\r\n        '')\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js",["876","877"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/EzyVet`\r\n\r\n\r\n\r\n\r\nexport const ezyvetGetPetLatestExam = (params) => {\r\n    return get(`${baseURL}/ezyvetGetPetLatestExam`, params)\r\n}\r\n\r\n\r\nexport const ezyvetUpdateWeight = (paramId, params) => {\r\n    return patch(`${baseURL}/ezyvetUpdateWeight/${paramId}`, params)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx",["878","879","880","881","882","883","884","885","886","887"],"import React, { Component } from 'react'\r\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\r\nimport './unassignModal.less'\r\nimport Draggable from \"react-draggable\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport {\r\n  getPetExamByDoctorId,\r\n  selectBreedBySpeciesId,\r\n  checkPatientId,\r\n  addDeskPet,\r\n  addAndSavePetExam,\r\n  deletePetExamByExamId,\r\n  listAllPetInfo\r\n} from './../../api';\r\n\r\nimport Close from \"./../../assets/img/close.png\";\r\n\r\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\r\nimport { mTop, px, MTop } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport MyModal from \"../../utils/myModal/MyModal\";\r\nimport Button from \"./../../utils/button/Button\";\r\n\r\nimport moment from \"moment\";\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\n\r\n\r\n\r\n\r\nexport default class UnassignModal extends Component {\r\n  state = {\r\n    historyData: [], //列表的数据集合\r\n    units: \"℉\",\r\n    searchText: \"\", //搜索测试记录框输入的内容\r\n    serchExamData: [], //搜索到的测量记录\r\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\r\n    visible: false, //nodel框是否显示\r\n    imgId: -1, //上传后返回的图像id号\r\n\r\n    assignPatientId: \"\",\r\n    assignPetName: \"\",\r\n    assignOwnerName: \"\",\r\n    assignBreed: \"\",\r\n    assignBreedId: \"\",\r\n    assignPetAge: \"\",\r\n    assignPetWeight: \"\",\r\n    assignPetId: \"\",\r\n    assignPetImgUrl: \"\",\r\n    inputDisabled: false,\r\n    breedArr: [], //猫、狗品种集合\r\n    loading: false,\r\n    disabled: true, //model是否可拖拽\r\n    search: \"\", //分配宠物搜索框\r\n    petListData: [],\r\n    searchPetList: [],\r\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\r\n    selectPetId: \"\",\r\n    modalLoading: false,//控制弹窗加载\r\n    workplaceId: storage.lastWorkplaceId,\r\n    loadingPets: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    if (this.props.assignVisible) {\r\n      this.setState({\r\n        assignVisible: this.props.assignVisible\r\n      })\r\n    }\r\n\r\n    let getBreed = electronStore.get(\"getBreed\");\r\n    if (getBreed) {\r\n      this.setState({\r\n        breedArr: getBreed,\r\n      });\r\n    }\r\n\r\n\r\n    const timer = setTimeout(() => {\r\n      this._getBreed();\r\n      clearTimeout(timer);\r\n    }, 3000);\r\n    this.gerAllPetMsg();\r\n\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // console.log('prevProps', prevProps, prevState);\r\n    if (this.props.assignVisible !== this.state.assignVisible) {\r\n      this.setState({\r\n        assignVisible: this.props.assignVisible\r\n      })\r\n    }\r\n    if (this.props.lastWorkplaceId !== this.state.workplaceId) {\r\n      this.setState({\r\n        petListData: [],\r\n        workplaceId: this.props.lastWorkplaceId\r\n      })\r\n\r\n      this.gerAllPetMsg();\r\n\r\n    }\r\n    if (this.props.seleceEmergencies !== this.state.seleceEmergencies) {\r\n      this.setState({\r\n        seleceEmergencies: this.props.seleceEmergencies\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\r\n  _getEmergencyHistory = () => {\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate(data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = [];\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n\r\n    getPetExamByDoctorId(storage.userId)\r\n      .then((res) => {\r\n        console.log(\"---res\", res);\r\n        if (res.flag === true) {\r\n          let datas = res.data;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            if (datas[i].petId === null) {\r\n              let {\r\n                petId,\r\n                examId,\r\n                userId,\r\n                petVitalTypeId,\r\n                temperature,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                memo,\r\n                clinicalDatagroupId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                createTime,\r\n                clinicalDataEntity,\r\n              } = datas[i];\r\n              let day = moment().diff(moment(createTime), \"day\");\r\n              // console.log(day);\r\n              if (day > 3) {\r\n                continue;\r\n              }\r\n\r\n              let Tem = temperature;\r\n              try {\r\n                if (clinicalDataEntity) {\r\n                  Tem = temperature || clinicalDataEntity.data0;\r\n                }\r\n              } catch (error) {\r\n                console.log(\"抛出的异常\", error);\r\n              }\r\n              let str = {\r\n                clinicalDatagroupId,\r\n                createTime,\r\n                date: moment(createTime).format(\"MMM DD\"),\r\n                time: moment(createTime).format(\"hh:mm A\"),\r\n                temp: parseInt(Tem * 10) / 10,\r\n                placement: petVitalTypeId,\r\n                note: memo,\r\n                historyId: examId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                petId,\r\n                userId,\r\n                day,\r\n              };\r\n\r\n              historys.push(str);\r\n            }\r\n          }\r\n          //把所有数据拿完后做个排序\r\n          let historyData = ForwardRankingDate(historys, \"createTime\");\r\n          console.log(\"historyData:\", historyData);\r\n          this.setState({\r\n            historyData,\r\n            loading: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  };\r\n  //获取宠物类别\r\n  _getBreed = () => {\r\n    selectBreedBySpeciesId({ speciesId: 1 })\r\n      .then((res) => {\r\n        if (res.code === 0) {\r\n          let arr = [];\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName,\r\n              speciesId: 1,\r\n            };\r\n\r\n            arr.push(data);\r\n          });\r\n          selectBreedBySpeciesId({ speciesId: 2 })\r\n            .then((res) => {\r\n              if (res.code === 0) {\r\n                res.petlist.map((item, index) => {\r\n                  let data = {\r\n                    petSpeciesBreedId: item.petSpeciesBreedId,\r\n                    breedName: item.breedName,\r\n                    speciesId: 2,\r\n                  };\r\n                  arr.push(data);\r\n                });\r\n\r\n                console.log(\"----品种集合：\", arr);\r\n                electronStore.set(\"getBreed\", arr);\r\n                this.setState({\r\n                  breedArr: arr,\r\n                });\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //获取所有宠物详情信息\r\n  gerAllPetMsg = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    console.log('获取列表');\r\n    this.setState({\r\n      loadingPets: true,\r\n    })\r\n    listAllPetInfo(params)\r\n      .then((res) => {\r\n        console.log('res33: ', res);\r\n        this.setState({\r\n          loadingPets: false,\r\n        })\r\n        if (res.flag === true && res.data) {\r\n          this.setState({\r\n            petListData: res.data,\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadingPets: false,\r\n        })\r\n        console.log(err);\r\n      })\r\n  }\r\n  _search = (value = \"\") => {\r\n    let list = this.state.historyData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\r\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      serchExamData: searchData,\r\n    });\r\n  };\r\n  _searchPet = (value = \"\") => {\r\n    let list = this.state.petListData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\r\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\r\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\r\n\r\n      if (\r\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n      ) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      searchPetList: searchData,\r\n    });\r\n  };\r\n  draggleRef = React.createRef();\r\n  handleOk = (e) => {\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n    });\r\n  };\r\n  //新增宠物取消新增事件\r\n  handleCancel = (e) => {\r\n    this.setState({\r\n      visible: false,\r\n      assignVisible: true,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n      imgId: -1,\r\n    });\r\n  };\r\n  //新增宠物弹窗关闭事件\r\n  closeHandleCancel = (e) => {\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n      search: '',\r\n      selectPetId: '',\r\n      imgId: -1,\r\n    });\r\n  }\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n      },\r\n    });\r\n  };\r\n  _select = (value, data) => {\r\n    console.log(value, data); //value的值为id\r\n    this.setState({\r\n      assignBreedId: value,\r\n      assignBreed: data.children,\r\n    });\r\n  };\r\n  _modal = () => {\r\n    let that = this;\r\n    function getPetInfoByPatientId() {\r\n      switch (storage.identity) {\r\n        case \"1\":\r\n          console.log(\"我是vetspire查找\");\r\n          break;\r\n        case \"2\":\r\n          console.log(\"我是ezyVet查找\");\r\n          let params = {\r\n            animalId: that.state.assignPatientId,\r\n            organizationId: 4,\r\n          };\r\n          let paramsArray = [];\r\n          Object.keys(params).forEach((key) =>\r\n            paramsArray.push(key + \"=\" + params[key])\r\n          );\r\n          let url =\r\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\r\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\r\n          if (url.search(/\\?/) === -1) {\r\n            url = url + \"?\" + paramsArray.join(\"&\");\r\n          } else {\r\n            url = url + \"&\" + paramsArray.join(\"&\");\r\n          }\r\n          fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              authorization: `Bearer ${storage.ezyVetToken}`,\r\n            },\r\n          })\r\n            .then((response) => response.json())\r\n            .then((res) => {\r\n              console.log(\"res\", res);\r\n              this.setState({\r\n                spin: false,\r\n              });\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data;\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  });\r\n                }\r\n                console.log(petArr);\r\n\r\n                let { petId } = petArr;\r\n                // assign(petId)\r\n              } else {\r\n                //没有宠物\r\n                message.error(\"There are no pets under this patientID\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              message.error(\"There are no pets under this patientID\");\r\n            });\r\n\r\n          break;\r\n        case \"3\":\r\n          console.log(\"我是一般医生查找\");\r\n          let datas = {\r\n            patientId: that.state.assignPatientId,\r\n            doctorId: storage.userId\r\n          }\r\n          if (storage.lastWorkplaceId) {\r\n            datas.workplaceId = storage.lastWorkplaceId\r\n          }\r\n          if (storage.lastOrganization) {\r\n            datas.organizationId = storage.lastOrganization\r\n          }\r\n          checkPatientId(datas)\r\n            .then((res) => {\r\n              if (res.flag === true) {\r\n                that.setState({\r\n                  assignPetId: that.state.assignPatientId,\r\n                });\r\n                message.success(\"This patientID will work\");\r\n              } else {\r\n                that.setState({\r\n                  assignPetId: '',\r\n                });\r\n                message.error(\"The patientID already exists\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              that.setState({\r\n                inputDisabled: false,\r\n                assignPetName: \"\",\r\n                assignOwnerName: \"\",\r\n                assignBreed: \"\",\r\n                assignBreedId: \"\",\r\n                assignPetAge: \"\",\r\n                assignPetWeight: \"\",\r\n                assignPetId: \"\",\r\n                assignPetImgUrl: \"\",\r\n              });\r\n              console.log(err);\r\n            });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    //将测量信息给分配宠物\r\n    const assignPet = () => {\r\n      let petMsg = {\r\n        petName: this.state.assignPetName,\r\n        age: this.state.assignPetAge,\r\n        petSpeciesBreedId: this.state.assignBreedId,\r\n        owner: this.state.assignOwnerName,\r\n        doctorId: storage.userId\r\n      }\r\n      if (this.state.imgId !== -1 && this.state.imgId) {\r\n        petMsg.imageId = this.state.imgId\r\n      }\r\n      if (this.state.assignPetWeight) {\r\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\r\n      }\r\n      if (storage.lastWorkplaceId) {\r\n        petMsg.workplaceId = storage.lastWorkplaceId\r\n      }\r\n      if (storage.lastOrganization) {\r\n        petMsg.organizationId = storage.lastOrganization\r\n      }\r\n      this.setState({\r\n        modalLoading: true,\r\n      })\r\n\r\n      addDeskPet(this.state.assignPatientId, petMsg)\r\n        .then((res) => {\r\n          if (res.flag === true) {\r\n            let parmes = {\r\n              petId: res.data.petId,\r\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\r\n            };\r\n\r\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\r\n              .then((res) => {\r\n                this.setState({\r\n                  modalLoading: false,\r\n                })\r\n                if (res.flag === true) {\r\n                  message.success(\"Assigned successfully\");\r\n                  this.props.success(true)\r\n\r\n                  that.setState({\r\n                    visible: false,\r\n                    assignPatientId: \"\",\r\n                    assignPetName: \"\",\r\n                    assignOwnerName: \"\",\r\n                    assignBreed: \"\",\r\n                    assignBreedId: \"\",\r\n                    assignPetAge: \"\",\r\n                    assignPetWeight: \"\",\r\n                    assignPetId: \"\",\r\n                    assignPetImgUrl: \"\",\r\n                    imgId: -1,\r\n                  });\r\n                } else {\r\n                  message.error(\"Assignment failed\");\r\n                }\r\n              })\r\n              .catch((err) => {\r\n                this.setState({\r\n                  modalLoading: false,\r\n                })\r\n                console.log(err);\r\n                message.error(\"Assignment failed\");\r\n              });\r\n          } else {\r\n            this.setState({\r\n              modalLoading: false,\r\n            })\r\n            message.error('Failed to create a pet')\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            modalLoading: false,\r\n          })\r\n          console.log('err: ', err);\r\n          message.error('Failed to create a pet')\r\n        })\r\n    };\r\n    let { disabled, bounds, visible } = this.state;\r\n    let options = this.state.breedArr.map((d) => (\r\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\r\n    ));\r\n    return (\r\n\r\n      <Modal\r\n        maskClosable={false}\r\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\r\n        destroyOnClose={true}\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"30px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          ></div>\r\n        }\r\n        visible={visible}\r\n        onOk={this.handleOk}\r\n        onCancel={this.closeHandleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\r\n      >\r\n        <Spin spinning={this.state.modalLoading}>\r\n          <div id=\"unassignedModal\">\r\n            <div className=\"title\">\r\n              Assign <br />\r\n              Measurement to\r\n            </div>\r\n\r\n            <div className=\"addPhoto\">\r\n              <UploadImg\r\n                getImg={(val) => {\r\n                  this.setState({\r\n                    imgId: val.imageId,\r\n                  });\r\n                }}\r\n                imgUrl={this.state.assignPetImgUrl}\r\n                disable={this.state.inputDisabled}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"item\">\r\n              <p>Patient ID:</p>\r\n              <Input\r\n                value={this.state.assignPatientId}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    assignPatientId: item.target.value,\r\n                  });\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  if (e.keyCode === 13) {\r\n                    getPetInfoByPatientId();\r\n                  }\r\n                  if (e.keyCode === 27) {\r\n                    this.setState({\r\n                      assignPatientId: \"\",\r\n                    });\r\n                  }\r\n                }}\r\n                onBlur={() => {\r\n                  if (this.state.assignPatientId.length > 0) {\r\n                    getPetInfoByPatientId();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"item\">\r\n              <p>Pet Name:</p>\r\n              <Input\r\n                disabled={this.state.inputDisabled}\r\n                value={this.state.assignPetName}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    assignPetName: item.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"item\">\r\n              <p>Owner Name:</p>\r\n              <Input\r\n                disabled={this.state.inputDisabled}\r\n                value={this.state.assignOwnerName}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    assignOwnerName: item.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"item\">\r\n              <p>Breed:</p>\r\n              <div className=\"infoInput\">\r\n                <Select\r\n                  disabled={this.state.inputDisabled}\r\n                  showSearch\r\n                  style={{ width: \"100%\" }}\r\n                  bordered={false}\r\n                  value={this.state.assignBreed}\r\n                  placeholder=\"Search to Select\"\r\n                  optionFilterProp=\"children\"\r\n                  listHeight={256}\r\n                  onSelect={(value, data) => this._select(value, data)}\r\n                  filterOption={(input, option) =>\r\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                    0\r\n                  }\r\n                  filterSort={(optionA, optionB) =>\r\n                    optionA.children\r\n                      .toLowerCase()\r\n                      .localeCompare(optionB.children.toLowerCase())\r\n                  }\r\n                >\r\n                  {options}\r\n                </Select>\r\n              </div>\r\n            </div>\r\n            <div className=\"item\">\r\n              <p>Pet Age:</p>\r\n              <Input\r\n                disabled={this.state.inputDisabled}\r\n                value={this.state.assignPetAge}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    assignPetAge: item.target.value,\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"item\">\r\n              <p>Pet Weight:</p>\r\n              <Input\r\n                disabled={this.state.inputDisabled}\r\n                value={this.state.assignPetWeight}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    assignPetWeight: item.target.value,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              <div className=\"unit\">{`kg`}</div>\r\n            </div>\r\n\r\n            <div className=\"btnF\">\r\n              <div className=\"btn\" onClick={this.handleCancel}>\r\n                Cancel\r\n              </div>\r\n              <div\r\n                className=\"btn\"\r\n                onClick={() => {\r\n                  if (this.state.assignPatientId === '') {\r\n                    message.error('patientID can not be empty!');\r\n                  } else if (this.state.assignPetId === '') {\r\n                    message.error(\"The patientID already exists\");\r\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\r\n                    assignPet();\r\n                  }\r\n                }}\r\n              >\r\n                Apportion\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </Modal>\r\n    );\r\n  };\r\n  //获取当前组织所有宠物信息\r\n  _list = () => {\r\n    const { search, petListData, searchPetList } = this.state;\r\n    let data = search.length > 0 ? searchPetList : petListData;\r\n    let option = data.map((item, index) => {\r\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\r\n      return (\r\n        <li\r\n          key={item.petId}\r\n          onClick={() => {\r\n            this.setState({\r\n              selectPetId: item.petId,\r\n            });\r\n          }}\r\n        >\r\n          <div className=\"item\">\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {item.petName ? item.petName : 'unknown'}\r\n            </span>\r\n            <span\r\n              className=\"petName\"\r\n              style={{ margin: `${px(5)}px 0` }}\r\n            >{`,${item.age} yrs,`}</span>\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {male}\r\n            </span>\r\n          </div>\r\n          {this.state.selectPetId === item.petId ? (\r\n            <span className=\"search\">&#xe614;</span>\r\n          ) : null}\r\n        </li>\r\n      );\r\n    });\r\n    return <ul>{option}</ul>;\r\n  };\r\n\r\n  render() {\r\n    let { loading, disabled, historyData, searchText, serchExamData } =\r\n      this.state;\r\n    const _del = (key, record) => {\r\n      deletePetExamByExamId(key, '')\r\n        .then(\r\n          (res) => {\r\n            if (res.flag === true) {\r\n              console.log(\"删除成功\");\r\n              const historyData = [...this.state.historyData];\r\n              console.log(historyData);\r\n              this.setState({\r\n                historyData: historyData.filter((item) => item.historyId !== key),\r\n              });\r\n            } else {\r\n              console.log(\"删除失败\");\r\n            }\r\n          }\r\n        );\r\n    };\r\n\r\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\r\n\r\n    return (\r\n      <div id='unassignedModal111'>\r\n        {\r\n          this.state.assignVisible && (\r\n            <MyModal\r\n              visible={this.state.assignVisible}\r\n              element={\r\n                <div className=\"myfindOrg\">\r\n                  <div className=\"orgHeard\">\r\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                      <div\r\n                        onClick={() => {\r\n                          this.setState({\r\n                            assignVisible: false,\r\n                            search: '',\r\n                            selectPetId: '',\r\n                          });\r\n                          this.props.onChangeVisible(false)\r\n                        }}\r\n                      >\r\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      className=\"text\"\r\n                      onMouseOver={() => {\r\n                        if (disabled) {\r\n                          this.setState({\r\n                            disabled: false,\r\n                          });\r\n                        }\r\n                      }}\r\n                      onMouseOut={() => {\r\n                        this.setState({\r\n                          disabled: true,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Assign Measurement\r\n                    </div>\r\n                    <div className=\"searchBox\">\r\n                      <Input\r\n                        placeholder=\" &#xe61b; Search Pet\"\r\n                        bordered={false}\r\n                        allowClear={true}\r\n                        value={this.state.search}\r\n                        onChange={(item) => {\r\n                          this.setState({\r\n                            search: item.target.value,\r\n                          });\r\n                          this._searchPet(item.target.value);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"list\">{this.state.loadingPets ?\r\n                    <div style={{ display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n                      <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                        <LoadingOutlined style={{ fontSize: 30, color: '#000', marginTop: mTop(-30), }} />\r\n                      </div>\r\n                      <p style={{ color: '#000' }}>\r\n                        {'loading...'}\r\n                      </p>\r\n                    </div> :\r\n                    this._list()}</div>\r\n                  <div className=\"foot\">\r\n                    <div\r\n                      className=\"btnn flex\"\r\n                      style={{ height: px(45) }}\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          assignVisible: false,\r\n                          visible: true,\r\n                        });\r\n                        this.props.onChangeVisible(false)\r\n                      }}\r\n                    >\r\n                      <p>+Add New Pet</p>\r\n                    </div>\r\n                    <div\r\n                      className=\"btnn flex\"\r\n                      style={{ height: px(45) }}\r\n                      onClick={() => {\r\n                        if (!this.state.selectPetId) {\r\n                          message.error(\"Please select a pet to assign\");\r\n                        } else {\r\n                          let { selectPetId, seleceEmergencies, historyData } =\r\n                            this.state;\r\n                          let parmes = {\r\n                            petId: selectPetId,\r\n                            clinicalDatagroupId:\r\n                              seleceEmergencies.clinicalDatagroupId,\r\n                          };\r\n                          console.log(\"分配的数据信息\", parmes);\r\n\r\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\r\n                            .then((res) => {\r\n                              console.log(\"----------\", res);\r\n                              if (res.flag === true) {\r\n                                console.log(\"分配成功\");\r\n                                message.success(\"Assigned successfully\");\r\n                                this.props.success(true)\r\n\r\n                                this.setState({\r\n                                  assignVisible: false,\r\n                                });\r\n                                this.props.onChangeVisible(false)\r\n                              } else {\r\n                                message.error(\"Assignment failed\");\r\n                              }\r\n                            })\r\n                            .catch((err) => {\r\n                              console.log(err);\r\n                              message.error(\"Assignment failed\");\r\n                            });\r\n                        }\r\n                      }}\r\n                    >\r\n                      <p>Confirm</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                // </Spin>\r\n              }\r\n            />\r\n          )\r\n        }\r\n        {this._modal()}\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["888","889","890","891","892","893","894","895","896","897"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx",["898"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Input,\r\n  message,\r\n  Spin,\r\n  Button,\r\n  Select,\r\n} from \"antd\";\r\n\r\nimport UploadImg from \"../../utils/uploadImg/UploadImg\";\r\n\r\nimport {\r\n  checkPatientId,\r\n  selectBreedBySpeciesId,\r\n} from '../../api';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\n\r\nconst AddPetModal = ({ visible, width, title, destroyOnClose, value, onConfirm, onCancel, onLoading }) => {\r\n  const { Option } = Select;\r\n  let storage = window.localStorage;\r\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\r\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\r\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\r\n  const [loading, setLoading] = useState(false);//加载\r\n  const [breedList,  setBreedList] = useState([]);//\r\n  const [imageId, setImageId] = useState('');//上传后图片id\r\n  const [patientId, setPatientId] = useState('');//用户输入的病人id\r\n  const [petName, setPetName] = useState('');//用户输入的宠物名字\r\n  const [ownerName, setOwnerName] = useState('');//用户输入的主人名字\r\n  const [breedId, setBreedId] = useState('');//用户选择的宠物品种id\r\n  const [petAge, setPetAge] = useState('');//用户输入的宠物年龄\r\n  const [petWeight, setPetWeight] = useState('');//用户输入的宠物体重\r\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\r\n\r\n\r\n  //确认选择\r\n  const handleOk = () => {\r\n    if (patientId === '') {\r\n      message.error('Please enter the patientId!');\r\n    } else {\r\n      setIsModalVisible(visible);\r\n      onConfirm({\r\n        imageId: imageId,\r\n        patientId: patientId,\r\n        petName: petName,\r\n        petSpeciesBreedId: breedId,\r\n        age: petAge,\r\n        weight: petWeight,\r\n        owner: ownerName,\r\n      })\r\n    }\r\n  };\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    onCancel(false);\r\n    setIsModalVisible(visible);\r\n  };\r\n  //判断用户输入的patientId是否存在\r\n  const getPetInfoByPatientId = () => {\r\n    setLoading(true);\r\n    let datas = {\r\n      patientId: patientId,\r\n      doctorId: storage.userId\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.organizationId = storage.lastOrganization\r\n    }\r\n    checkPatientId(datas)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.flag === false) {\r\n          message.error('The patient ID already exists, please replace it !');\r\n        } else {\r\n          message.success('The patientId can be used ~')\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        message.error('Abnormal interface');\r\n      })\r\n\r\n  }\r\n  //获取宠物品种\r\n  const selectBreed = () => {\r\n    setLoading(true);\r\n    selectBreedBySpeciesId({ speciesId: null })\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          let arr = [];\r\n          _.map(res.petlist, (item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName,\r\n            };\r\n            arr.push(data);\r\n          });\r\n          setBreedList(arr);\r\n        } else {\r\n          message.error('Failed to obtain pet breed information!');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (visible === true || visible === false) {\r\n      setIsModalVisible(visible);\r\n    } else {\r\n      setIsModalVisible(false);\r\n    }\r\n    return (() => { })\r\n  }, [visible]);\r\n\r\n  useEffect(() => {\r\n    if (destroyOnClose === true) {\r\n      setIsdestroyOnClose(destroyOnClose);\r\n    }\r\n    if (_.isNumber(width)) {\r\n      setIsWidth(width)\r\n    }\r\n    return (() => { })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    selectBreed();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (onLoading === true || onLoading === false) {\r\n      setBtnLoading(onLoading);\r\n    } else {\r\n      setBtnLoading(false);\r\n    }\r\n    return (() => { })\r\n  }, [onLoading]);\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Add a Pet\"\r\n        visible={isModalVisible}\r\n        onCancel={handleCancel}\r\n        centered\r\n        maskClosable={false}\r\n        footer={null}\r\n        width={isWidth}\r\n        destroyOnClose={isdestroyOnClose}\r\n        className=\"addPetModal\"\r\n      >\r\n        <Spin spinning={loading}>\r\n          <div className='modalContentBox'>\r\n            <div className='petMsgBox'>\r\n              <div className='addPhoto'>\r\n                <UploadImg\r\n                  getImg={(val) => {\r\n                    setImageId(val.imageId);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"item\">\r\n                <p>Patient ID:</p>\r\n                <Input\r\n                  value={patientId}\r\n                  bordered={false}\r\n                  onChange={(e) => {\r\n                    setPatientId(e.target.value)\r\n                  }}\r\n                  onBlur={() => {\r\n                    if (patientId.length > 0) {\r\n                      getPetInfoByPatientId();\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"item\">\r\n                <p>Pet Name:</p>\r\n                <Input\r\n                  value={petName}\r\n                  bordered={false}\r\n                  onChange={(e) => {\r\n                    setPetName(e.target.value)\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"item\">\r\n                <p>Owner Name:</p>\r\n                <Input\r\n                  value={ownerName}\r\n                  bordered={false}\r\n                  onChange={(e) => {\r\n                    setOwnerName(e.target.value)\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"item\">\r\n                <p>Breed:</p>\r\n                <div className='selectBox'>\r\n                  <Select\r\n                    showSearch\r\n                    style={{ width: \"100%\" }}\r\n                    bordered={false}\r\n                    value={breedId}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => setBreedId(value)}\r\n                    filterOption={(input, option) =>\r\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                      0\r\n                    }\r\n                    filterSort={(optionA, optionB) =>\r\n                      optionA.children\r\n                        .toLowerCase()\r\n                        .localeCompare(optionB.children.toLowerCase())\r\n                    }\r\n                  >\r\n                    {\r\n                      _.map(breedList, (item, index) => (\r\n                        <Option key={item.petSpeciesBreedId}>{item.breedName}</Option>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\">\r\n                <p>Pet Age:</p>\r\n                <Input\r\n                  value={petAge}\r\n                  bordered={false}\r\n                  onChange={(e) => {\r\n                    setPetAge(e.target.value)\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"item\">\r\n                <p>Pet Weight:</p>\r\n                <Input\r\n                  value={petWeight}\r\n                  bordered={false}\r\n                  onChange={(e) => {\r\n                    setPetWeight(e.target.value)\r\n                  }}\r\n                />\r\n                <div className=\"unit\">{`kg`}</div>\r\n              </div>\r\n            </div>\r\n            <div className='foot'>\r\n              <div className=\"btnBox\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size=\"large\"\r\n                  block\r\n                  onClick={handleCancel}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size=\"large\"\r\n                  block\r\n                  onClick={handleOk}\r\n                  loading={btnLoading}\r\n                >\r\n                  Confirm\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </Modal>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default AddPetModal;\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx",["899","900","901","902"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Avatar,\n  List\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nconst SelectPet = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel, onLoading, onAddPet }) => {\n  console.log('value: ', value);\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [petList, setPetList] = useState([]);//当前组织下所有宠物\n  const [searchPetList, setSearchPetList] = useState([]);//搜索宠物列表\n  const [searchValue, setSearchValue] = useState('');//搜索框的值\n  const [selePetValue, setSelePetValue] = useState();//选中的宠物值\n  const [selePetId, setSelePetId] = useState('');//选中的宠物id\n  const [loading, setLoading] = useState(false);//数据加载\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n  //获取所有宠物\n  const getAllPet = () => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let newData = [];\n          _.map(res.data, (item, index) => {\n            newData.push({\n              petId: item.petId,\n              petIndex: index,\n              birthday: item.birthday,\n              breedName: item.breedName,\n              patientId: item.patientId,\n              petName: item.petName,\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              gender: item.gender,\n              url: item.url,\n            })\n          });\n          setPetList(_.orderBy(newData, ['petIndex'], ['desc']));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    if (_.isEmpty(selePetValue)) {\n      message.error('Please choose a pet!');\n    } else {\n      onSelect(selePetValue);\n      setIsModalVisible(visible);\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入值\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n  //展示宠物照片\n  const shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  //选择宠物事件\n  const selectPet = (petId, item) => {\n    setSelePetValue(item);\n    setSelePetId(petId);\n  }\n  //搜索宠物名字或patientId\n  const searchPetByPetNameOrPatientId = () => {\n    let list = petList;\n    let searchData = [];\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n      if (\n        `${name}`.indexOf(searchValue.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(searchValue.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n    setSearchPetList(searchData);\n  }\n  //取消或添加宠物\n  const handleCancelOrAddPet = () => {\n    onAddPet(false);\n    setIsModalVisible(visible);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPet();\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (searchValue.length > 0) {\n      searchPetByPetNameOrPatientId();\n    }\n    return (() => { })\n  }, [searchValue]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  useEffect(() => {\n    if (_.find(petList, ['petId', value]) !== undefined) {\n      setSelePetId(_.toString(value));\n      setSelePetValue(_.find(petList, ['petId', value]));\n    }\n    return (() => { })\n  }, [value, petList]);\n\n  return (\n    <>\n      <Modal\n        title=\"Assign Measurement\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={searchValue.length > 0 ? searchPetList : petList}\n                renderItem={(item, index) => (\n                  <List.Item\n                    extra={selePetId === item.petId ? <span className=\"search\">&#xe614;</span> : null}\n                    onClick={() => selectPet(item.petId, item)}\n                  >\n                    <List.Item.Meta\n                      avatar={<Avatar src={shoePetPicture(item.petSpeciesBreedId, item.url)} />}\n                      title={\n                        <div className='petListItemTitle'>\n                          {item.petName ? item.petName : 'unKnown'},{item.patientId ? item.patientId : 'unKnown'}\n                        </div>\n                      }\n                      description={\n                        <div>\n                          {calculateAge(item.birthday) === 'unknown' ? 'unknown' : `${calculateAge(item.birthday)} yrs`},\n                          {item.gender === 0 ? \"Male\" : \"Venter\"},\n                          {item.breedName ? item.breedName : 'unKnow'}\n                        </div>\n                      }\n                    />\n                  </List.Item>\n\n                )}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancelOrAddPet}\n                >\n                  +Add New Pet\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPet;\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js",["903","904","905","906","907","908","909","910","911","912"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",["913"],"\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",["914","915","916","917","918","919","920","921","922","923","924"],"import React, { useEffect, useState } from \"react\";\nimport { Image, Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [saveNum, setSaveNum] = useState(0);\n  return (\n    <>\n      <div className={\"linkBox\"}>\n        <div className=\"startBox\">\n          <img src={biggieonscale}></img>\n          <p className=\"startTitle\">Ready, place pet onto scale</p>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx",["925","926","927","928"],"import React, { } from 'react'\nimport PropTypes from 'prop-types';\nimport { px, mTop } from '../../../utils/px'\nimport cir from '../../../assets/images/cir.png'\nimport xia from '../../../assets/img/xia.png'\nimport './biggie.less'\n/**\n *\n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * @returns\n */\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ fontWeight: '800' }}>{weight}</div>\n          <div className='cTTextUnit'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText'>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n      <div className='biggiefoot'>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n          </div>\n        }\n        <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10), height: '28px' }}>{(impedance && impedance > 0) ? `Impedance ${impedance} Ohms` : ''}</div>\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",["929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",["976","977","978","979","980","981"],"import React, {\r\n    useEffect,\r\n    useState,\r\n} from 'react';\r\nimport { Image, Layout } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun\r\n} from '../../../store/actions';\r\nimport _ from 'lodash';\r\nimport './LinkEquipment.less';\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n    let { mellaConnectStatus } = hardwareMessage;\r\n    return (\r\n\r\n        <Content className={\"contentBox\"}>\r\n            <div className='chackPatientBox'>\r\n                <p className='chackPatientTitle'>Select a patient</p>\r\n            </div>\r\n        </Content>\r\n\r\n    );\r\n}\r\nexport default connect(\r\n    state => ({\r\n        petMessage: state.petReduce.petDetailInfo,\r\n        hardwareMessage: state.hardwareReduce,\r\n    }),\r\n    {\r\n        selectHardwareModalShowFun,\r\n        petSortTypeFun,\r\n        petDetailInfoFun,\r\n        setMellaConnectStatusFun,\r\n        setMellaMeasureValueFun,\r\n        setMellaPredictValueFun,\r\n        setMellaMeasurePartFun\r\n    }\r\n)(LinkEquipment);","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",["982","983","984","985","986","987","988","989","990","991","992","993","994","995"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Progress,\n  Space,\n  Table,\n  Tag,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\nimport measuredTable_1 from \"./../../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../../assets/img/EditCircle.png\";\nimport Delete from \"./../../../assets/img/Delete.png\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport { px, mTop } from \"../../../utils/px\";\nimport moment from \"moment\";\nimport electronStore from \"../../../utils/electronStore\";\nimport \"./measuredData.less\";\nimport {\n  deletePetExamByExamId,\n  ezyvetGetPetLatestExam,\n  getPetExamByPetId,\n  healthstatus,\n  updatePetExam,\n  updateVitalsTemperatureByVitalId,\n  vetspireGetPetLatestExam\n} from \"./../../../api\";\nimport { addClamantPetExam } from './../../../api/mellaserver/exam'\n\n\nconst MeasuredData = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n}) => {\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\n    hardwareMessage;\n  let draggleRef = React.createRef();\n  let { petId, memo, patientId } = petMessage;\n  let storage = window.localStorage;\n  let hisHe = mTop(200);\n  try {\n    let historyElement = document.querySelectorAll(\".measurementBox .table\");\n    hisHe = historyElement[0].clientHeight - mTop(60);\n  } catch (error) { }\n  const [petTemperatureData, setPetTemperatureData] = useState([]); //存储宠物历史温度数据\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [isHua, setIsHua] = useState(true);\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //表格渲染\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n        if (isHua) {\n          num = _.round((num * 1.8 + 32), 1);\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      key: \"Action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            // className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n            style={{ cursor: \"pointer\" }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} style={{ cursor: \"pointer\" }} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //根据温度判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    //根据温度判断指示文字\n    const title = () => {\n      if (mellaMeasureValue > 40) {\n        return \"Danger\";\n      } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\n        return \"Normal\";\n      } else {\n        return \"Low\";\n      }\n    };\n    return (\n      <>\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\n          {getTemp(percent)}\n          <span style={{ color: color(mellaMeasureValue) }} className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"\n            }`}</span>\n        </p>\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\n          {title()}\n        </p>\n      </>\n    );\n  };\n  //获取历史宠物温度数据\n  const getPetTemperatureData = (currPage) => {\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: 0,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petTemperatureData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetTemperatureData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //返回准备测量界面\n  const backConnectedPage = () => {\n    if (mellaConnectStatus != \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    } else {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n  };\n  //保存数据\n  const saveData = () => {\n    let petVitalId = null;\n    switch (mellaMeasurePart) {\n      case \"腋温\":\n        petVitalId = 1;\n        break;\n      case \"肛温\":\n        petVitalId = 3;\n        break;\n      case \"耳温\":\n        petVitalId = 4;\n        break;\n      default:\n        petVitalId = 1;\n        break;\n    }\n    let params = {\n      petId: petId,\n      doctorId: storage.userId,\n      temperature: mellaMeasureValue,\n      petVitalTypeId: petVitalId,\n      memo: \"\",\n    };\n    addClamantPetExam(params)\n      .then((res) => {\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataVetspire(mellaMeasureValue)\n              break;\n            case '4'://ezyVet\n              updataEzyvet(mellaMeasureValue, petVitalId)\n              break;\n            default: message.success('Data successfully saved in Mella')\n              break;\n          }\n        }\n        setSaveType(true);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史温度记录\n  const deletePetMessage = (examId) => {\n\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  const getTemp = (percent) => {\n\n    let num = mellaMeasureValue;\n    if (isHua) {\n      num = _.round((num * 1.8 + 32), 1);\n    } else {\n      num = parseFloat(num.toFixed(1));\n    }\n    return num;\n  };\n  const updataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reupdataEzyvet(Temp, petVitalId)\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reupdataEzyvet(Temp, petVitalId)\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const reupdataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const updataVetspire = (Temp) => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: patientId\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            temp: temperature\n          }\n\n          updateVitalsTemperatureByVitalId(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.measuredTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petTemperatureData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useEffect(() => {\n    setCurrPage(1);\n    setPetTemperatureData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n    return (() => { })\n  }, [petId]);\n\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"measurementBox\">\n        <div className=\"progress\" style={{ height: px(400) }}>\n          <Progress\n            type=\"dashboard\"\n            percent={_.round(mellaMeasureValue, 1)}\n            gapDegree={30}\n            // width={px(260)}\n            strokeWidth={\"8\"}\n            format={(percent) => ProgressTitle(percent)}\n            strokeColor={{\n              \"0%\": \"#7bd163\",\n              \"100%\": \"#19ade4\",\n            }}\n            className=\"measurementProgress\"\n          />\n          {!saveType && (\n            <div className=\"buttonBox\">\n              <Button\n                style={{ backgroundColor: \"#e1206d\" }}\n                type=\"danger\"\n                shape=\"round\"\n                onClick={() => backConnectedPage()}\n              >\n                Discard\n              </Button>\n              <Button\n                style={{ backgroundColor: \"#e1206d\" }}\n                type=\"danger\"\n                shape=\"round\"\n                color=\"#e1206d\"\n                onClick={() => saveData()}\n              >\n                Save\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"listTitleBox1\">\n          <p className=\"listTitle\">History</p>\n        </div>\n        <div className=\"table\" onScrollCapture={onScrollCapture} style={{ height: mTop(300) }}>\n          <Table\n            rowKey={\"examId\"}\n            columns={columns}\n            dataSource={petTemperatureData}\n            className=\"measuredTable\"\n            pagination={false}\n            scroll={{\n              y: '80%'\n            }}\n          />\n        </div>\n      </div>\n      {/*修改note弹窗 */}\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        visible={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(MeasuredData);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["996","997","998","999","1000","1001","1002","1003","1004","1005","1006"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Progress, Layout, Carousel } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\n// import HeaderItem from './headerItem';\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport \"./measurement.less\";\nimport { px } from \"../../../utils/px\";\nimport electronStore from \"../../../utils/electronStore\";\n\nlet storage = window.localStorage;\nconst { Content, Header } = Layout;\n\nconst Measurement = ({ petMessage, hardwareMessage }) => {\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\n  const [percent, setPercent] = useState(0);\n  const [value, setValue] = useState(0);\n  const [timers, setTimers] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    const random = 1;\n    setValue(value + random);\n    setTimers(timers + random);\n  };\n\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    let num = parseFloat(percent);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    }\n    return (\n      <>\n        {mellaMeasurePart !== \"耳温\" ? (\n          <p className=\"ProgressTitle\">\n            {num}\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\n          </p>\n        ) : (\n          <></>\n        )}\n        <p className=\"ProgressTitle\">Measuring</p>\n      </>\n    );\n  };\n  //图片切换\n  const checkImage = () => {\n    switch (timers) {\n      case 0:\n        return <img src={Animation_1} />;\n      case 1:\n        return <img src={Animation_2} />;\n      case 2:\n        return <img src={Animation_3} />;\n      case 3:\n        return <img src={Animation_3} />;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (timers > 2) {\n      setTimers(0);\n    }\n    return () => { };\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    const timer = setInterval(tick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* <HeaderItem /> */}\n      <Content className={\"measureContentBox\"}>\n        <div style={{ marginTop: px(33) }}>\n          <Progress\n            type=\"dashboard\"\n            percent={_.round(mellaMeasureValue, 1)}\n            gapDegree={30}\n            // width={px(260)}\n            strokeWidth={\"8\"}\n            format={(percent) => ProgressTitle(percent)}\n            strokeColor={'#4C595E'}\n            className='measuringProgress'\n          />\n        </div>\n\n        {checkImage()}\n      </Content>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(Measurement);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",["1007","1008","1009","1010","1011","1012","1013","1014"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Image, Layout, Button } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\nimport { px } from \"../../../utils/px\";\n\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport moment from \"moment\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  let imageMap = [\n    Standing_Dog,\n    Standing_Cat,\n    Sitting_Dog,\n    Sitting_Cat,\n    Laying_Dog,\n    Laying_Cat,\n  ];\n\n  const [type, setType] = useState(false); //是否显示轮播图\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\n  const [title, setTitle] = useState('Ready, place under foreleg')//准备测量的文字\n  const saveCallBack = useRef();\n  const callBack = () => {\n    setCarouselIndex(carouselIndex + 1);\n  };\n\n  //切换图片\n  const checkImage = () => {\n    if (mellaMeasurePart === \"腋温\") {\n      return AxillaryPlacement;\n    } else if (mellaMeasurePart === \"耳温\") {\n      return EarPlacement;\n    } else {\n      return RectalPlacement;\n    }\n  };\n  //点击进入轮播图\n  const clickIntoTip = () => {\n    setType(true);\n  };\n  //小圆点点击事件\n  const clickPoint = (index) => {\n    setCarouselIndex(index);\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (carouselIndex === 6) {\n      setCarouselIndex(0);\n    }\n  }, [carouselIndex]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (type && mellaConnectStatus === \"connected\") {\n      timer = setInterval(tick, 1500);\n    }\n    if (mellaConnectStatus !== \"connected\") {\n      setType(false);\n      setCarouselIndex(0);\n      clearInterval(timer);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [type, mellaConnectStatus]);\n\n  useEffect(() => {\n    if (mellaMeasurePart === '腋温') {\n      setTitle('Ready, place under foreleg');\n    } else if (mellaMeasurePart === '耳温') {\n      setTitle('Ready, place in ear');\n    } else {\n      setTitle('Ready, place in anus');\n    }\n  }, [mellaMeasurePart])\n\n  return (\n    <>\n      <Content className={\"temperatureContentBox\"}>\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\n          <>\n            <div className=\"startBox\">\n              <p className=\"startTitle\">\n                Turn on your\n                <br />\n                Mella Thermometer\n                <br />\n                or Pair New Mella\n              </p>\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <img src={PressButton_Pro} className=\"PressButton_Pro\" />\n              </div>\n            </div>\n            <div className=\"tableBox\">\n              <div className=\"temperatureTitleBox\">\n                <p className=\"temperatureTitle\">History</p>\n              </div>\n              <HistoryTable tableColumnType='temperature' />\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"startBox\">\n              <p className=\"startTitle\">\n                {!type\n                  ? title\n                  : \"Place Under Foreleg Standing\"}\n              </p>\n              {!type ? (\n                <>\n                  <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <img src={checkImage()} className=\"checkImages\"></img>\n                  </div>\n\n                  {mellaMeasurePart === \"腋温\" ? (\n                    <div className=\"bottomTip1\">\n                      <div className=\"bottomTip1_1\">\n                        <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\n                          Need Help With Accurate Placement On Pet?\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ) : (\n                <>\n                  <div className=\"carouselBox\">\n                    {_.map(imageMap, (item, index) => {\n                      return (\n                        <img\n                          key={index}\n                          className=\"contentImgStyle\"\n                          src={item}\n                          style={{\n                            display: carouselIndex === index ? \"\" : \"none\",\n                          }}\n                        />\n                      );\n                    })}\n                  </div>\n                  <div className=\"dotBox\">\n                    <ul className=\"dotList\">\n                      {_.map(imageMap, (item, index) => {\n                        return (\n                          <li key={index}>\n                            <Button\n                              className=\"dotItem\"\n                              onClick={() => clickPoint(index)}\n                              style={{\n                                background:\n                                  carouselIndex === index\n                                    ? \"#0a0a0a\"\n                                    : \"#bdbaba\",\n                              }}\n                            >\n                              {index}\n                            </Button>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </Content>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",["1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Table,\r\n  Badge,\r\n  Modal,\r\n  Popconfirm,\r\n  message,\r\n} from \"antd\";\r\n\r\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\r\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\r\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\r\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\r\nimport Delete from \"./../../assets/img/Delete.png\";\r\n\r\nimport { mTop } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { deletePetExamByExamId, getPetExamByPetId, updatePetExam } from \"../../api\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../store/actions\";\r\nimport Draggable from \"react-draggable\";\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport { useThrottleFn, useDebounceFn, useDebounceEffect } from 'ahooks';\r\n\r\nimport \"./index.less\";\r\n\r\nconst HistoryTable = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  setMellaConnectStatusFun,\r\n  saveNum = 0,\r\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\r\n}) => {\r\n  let { petId } = petMessage;\r\n  let storage = window.localStorage;\r\n  let draggleRef = React.createRef();\r\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\r\n  const [visible, setVisible] = useState(false); //model框是否显示\r\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\r\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\r\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\r\n  const [bounds, setBounds] = useState({\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  });\r\n  const [reRender, setReRender] = useState(0);\r\n  const [isHua, setIsHua] = useState(true);\r\n  const [loading, setLoading] = useState(false);//加载\r\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\r\n  const [pageSize, setPageSize] = useState(10); // 每页10条\r\n  const [total, setTotal] = useState(0);//历史数据的总条数\r\n  const [currPage, setCurrPage] = useState(1);//页码\r\n  const [isMore, setIsMore] = useState(true); // 是否还有数据 false-已经到底\r\n  //体重表格渲染\r\n  const weightColumns = [\r\n    {\r\n      title: \"Data\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"MMM D\"),\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\r\n    },\r\n    {\r\n      title: \"Weight\",\r\n      dataIndex: \"weight\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => (\r\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\r\n      ),\r\n    },\r\n\r\n    {\r\n      // title: \"BF%\",\r\n      // dataIndex: \"fat\",\r\n      title: \"Impedance\",\r\n      dataIndex: \"impedance\",\r\n\r\n\r\n\r\n      key: \"fat\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record, index) => {\r\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\r\n      },\r\n    },\r\n    {\r\n      title: \"BCS\",\r\n      dataIndex: \"bodyConditionScore\",\r\n      key: \"bodyConditionScore\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record, index) => {\r\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Note\",\r\n      dataIndex: \"memo\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => text,\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <img\r\n            className=\"operationIcon\"\r\n            src={EditCircle}\r\n            onClick={() => {\r\n              setVisible(true);\r\n              setPetMessages(record);\r\n            }}\r\n          />\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => deletePetMessage(record.examId)}\r\n          >\r\n            <img src={Delete} />\r\n          </Popconfirm>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  //温度表格渲染\r\n  const TemperatureColumns = [\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"MMM D\"),\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\r\n    },\r\n    {\r\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\r\n      dataIndex: \"temperature\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => {\r\n        let num = parseFloat(text);\r\n\r\n        if (isHua) {\r\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\r\n        } else {\r\n          num = num.toFixed(1);\r\n        }\r\n\r\n        return <Badge color={color(text)} text={num} />;\r\n      },\r\n    },\r\n    {\r\n      title: \"Placement\",\r\n      dataIndex: \"petVitalTypeId\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => {\r\n        if (text === 1) {\r\n          return <img src={measuredTable_2} />;\r\n        } else if (text === 3) {\r\n          return <img src={measuredTable_1} />;\r\n        } else if (text === 4) {\r\n          return <img src={measuredTable_3} />;\r\n        } else {\r\n          return <img src={measuredTable_2} />;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      title: \"Notes\",\r\n      dataIndex: \"memo\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => text,\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      align: \"center\",\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <img\r\n            style={{ cursor: \"pointer\" }}\r\n            src={EditCircle}\r\n            onClick={() => {\r\n              setVisible(true);\r\n              setPetMessages(record);\r\n            }}\r\n          />\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => deletePetMessage(record.examId)}\r\n          >\r\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\r\n          </Popconfirm>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  //选择表格colum渲染\r\n  const columType = () => {\r\n    switch (tableColumnType) {\r\n      case \"temperature\":\r\n        return TemperatureColumns;\r\n      case \"weight\":\r\n        return weightColumns;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  //判断指示文字颜色\r\n  const color = (data) => {\r\n    if (_.toNumber(data) > 40) {\r\n      return \"#e1206d\";\r\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\r\n      return \"#58bde6\";\r\n    } else {\r\n      return \"#98da86\";\r\n    }\r\n  };\r\n  //获取历史宠物数据\r\n  const { run: getPetTemperatureData } = useDebounceFn((currPage) => {\r\n    setLoading(true);\r\n    let params = {\r\n      pageSize: pageSize,\r\n      currPage: currPage,\r\n      deviceType: tableColumnType === \"temperature\" ? 0 : 1,\r\n    }\r\n    getPetExamByPetId(petId, params)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setTotal(res.data.totalCount);\r\n        if (res.flag === true) {\r\n          let newArr = [];\r\n          if (currPage === 1) {\r\n            newArr = res.data.list;\r\n          } else {\r\n            let oldArr = petData;\r\n            let arr = res.data.list;\r\n            newArr = [...oldArr, ...arr];\r\n          }\r\n          setPetData(_.orderBy(newArr, 'createTime', 'desc'));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n      });\r\n  }, { wait: 0 });\r\n\r\n  //保存note\r\n  const save = () => {\r\n    let datas = {\r\n      memo: newMemo,\r\n    };\r\n    updatePetExam(petMessages.examId, datas)\r\n      .then((res) => {\r\n        setVisible(false);\r\n        getPetTemperatureData(1);\r\n      })\r\n      .catch((err) => {\r\n        setVisible(false);\r\n        console.log(err);\r\n      });\r\n  };\r\n  //删除历史记录\r\n  const deletePetMessage = (examId) => {\r\n    deletePetExamByExamId(examId, '')\r\n      .then(\r\n        (res) => {\r\n          if (res.flag === true) {\r\n            message.success(\"Successfully Delete\");\r\n            getPetTemperatureData(1);\r\n          } else {\r\n            message.error(\"Fail To Delete\");\r\n          }\r\n        }\r\n      );\r\n  };\r\n  //关闭弹窗\r\n  const handleCancel = (e) => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\r\n    setBounds({\r\n      left: -targetRect?.left + uiData?.x,\r\n      right: clientWidth - (targetRect?.right - uiData?.x),\r\n      top: -targetRect?.top + uiData?.y,\r\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n    });\r\n  };\r\n  //滚动监听\r\n  const onScrollCapture = () => {\r\n    // 滚动的容器\r\n    let tableEleNodes = document.querySelectorAll(`.historyTableStyle .ant-table-body`)[0];\r\n    //是否滚动到底部\r\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\r\n    if (bottomType) {\r\n      if (total === petData.length) {\r\n        return false;\r\n      }\r\n      setCurrPage(currPage + 1);\r\n      getPetTemperatureData(currPage + 1);\r\n    }\r\n  }\r\n\r\n  useDebounceEffect(() => {\r\n    setCurrPage(1);\r\n    setPetData([]);\r\n    setTotal(0);\r\n    getPetTemperatureData(1);\r\n  }, [petId], { wait: 0 });\r\n\r\n  useEffect(() => {\r\n    if (reRender !== saveNum) {\r\n      setCurrPage(1);\r\n      setPetData([]);\r\n      setTotal(0);\r\n      setReRender(saveNum);\r\n      getPetTemperatureData(1);\r\n    }\r\n    return () => { };\r\n  }, [saveNum]);\r\n\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (hardSet) {\r\n      let { isHua } = hardSet;\r\n      setIsHua(isHua);\r\n    }\r\n    return (() => { });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tableContainer\" onScrollCapture={onScrollCapture}>\r\n      <Table\r\n        rowKey={\"examId\"}\r\n        columns={columType()}\r\n        dataSource={petData}\r\n        pagination={false}\r\n        loading={loading}\r\n        scroll={{\r\n          y: '80%'\r\n        }}\r\n        className=\"historyTableStyle\"\r\n      />\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"20px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                setDisabled(false);\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              setDisabled(true);\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          >\r\n            Edit Note\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        onCancel={handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => onStart(event, uiData)}\r\n          >\r\n            <div ref={draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div className=\"noteModal\">\r\n          <div className=\"noteModalText\">\r\n            <p style={{ width: \"80px\" }}>Notes</p>\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"40\"\r\n              style={{ textIndent: \"10px\" }}\r\n              // value={petMessages.memo}\r\n              onChange={(val) => {\r\n                setNewMemo(val.target.value);\r\n              }}\r\n            ></textarea>\r\n          </div>\r\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\r\n            Save Changes\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(HistoryTable);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",["1032","1033","1034","1035","1036","1037","1038","1039"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { ConfigProvider, Table, Select } from 'antd';\nimport { useHistory } from 'react-router-dom'\nimport moment from 'moment'\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport './petTable.less'\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\n\nconst PetTable = ({ petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type }) => {\n  let history = useHistory()\n  const [heardSearchText, setHeardSearchText] = useState('')\n  //搜索后展示的宠物列表\n  const [searchData, setSearchData] = useState([])\n  const _search = (value) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\n    let keyWord = value || heardSearchText\n    /**\n     * 使用indexof方法实现模糊查询\n     *     语法：stringObject.indexOf(searchvalue, fromindex)\n     *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n     *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n     *\n     * list         原数组\n     * keyWord      查询关键词\n     * searchData   查询的结果\n     *\n     * toLowerCase（）方法：将字符串统一转成小写\n     * toUpperCase（）方法：将字符串统一转成大写\n     *\n     */\n    let list = petListArr\n    let searchData = []\n    for (let i = 0; i < list.length; i++) {\n      let petName = list[i].petName.toLowerCase() || ''\n      let patientId = list[i].patientId.toLowerCase() || ''\n      let rfid = list[i].rfid || ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${rfid}`.indexOf(keyWord) !== -1\n      ) {\n        searchData.push(list[i])\n      }\n    }\n    setSearchData(searchData)\n  }\n  const columns = [\n    {\n      title: 'Time',\n      dataIndex: 'insertedAt',\n      key: 'insertedAt',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => moment(parseInt(text) * 1000).format('YYYY-MM-DD hh:mm a'),\n\n    },\n    {\n      title: 'Pet ID',\n      dataIndex: 'patientId',\n      key: 'patientId',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Pet Name',\n      dataIndex: 'petName',\n      key: 'petName',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Owner',\n      dataIndex: 'owner',\n      key: 'owner',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Breed',\n      dataIndex: 'breed',\n      key: 'breed',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n    {\n      title: 'Gender',\n      dataIndex: 'gender',\n      key: 'gender',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (`${text}` === 'NaN') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n\n  ];\n  const noData = () => {\n    return (\n      <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\n        <p style={{ fontSize: px(22) }}> {`No Pets Scheduled &`}</p>  &nbsp;&nbsp;\n        <a style={{ fontSize: px(22) }} href=\"#\"\n          onClick={(e) => {\n            try {\n              if (type === 'scheduled') {\n                setMenuNum('AddScheduledPet')\n              } else {\n                setMenuNum('AddPet')\n              }\n            } catch (error) {\n              console.log('错误信息', error);\n            }\n            e.preventDefault();\n\n          }}\n\n        >{`Schedule a Pet`}</a>\n      </div>\n    )\n  }\n  const options = [\n    { key: 'time', value: 'Time' },\n    { key: 'petid', value: 'Pet ID' },\n    { key: 'owner', value: 'Owner' },\n    { key: 'breed', value: 'Breed' },\n    { key: 'petname', value: 'Pet Name' },\n    { key: 'gender', value: 'Gender' },\n  ]\n  const handleChange = (value,option) => {\n    let petList = [].concat(petListArr)\n    switch (option.key) {\n      case 'time':\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n        break;\n      case 'petid':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'petname':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    resetPetList(petList)\n  };\n  return (\n    <div className='petTable' >\n      <div className=\"pet_table_heard\">\n        <div className=\"search\" style={{ height: px(32) }}>\n          <input\n            type=\"text\"\n            placeholder=\"&#xe61b;    search\"\n            value={heardSearchText}\n            onChange={(e) => {\n              setHeardSearchText(e.target.value)\n              _search(e.target.value)\n            }\n            }\n          />\n        </div>\n\n        <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(28), width: px(80) }}\n            onClick={_search}\n          >\n            <div className=\"walkText\">Search</div>\n          </div>\n        </div>\n\n      </div>\n      <div className=\"heard2 flex\" style={{ marginBottom: px(8), marginLeft: px(20) }}>\n\n        <div className=\"sort flex\" >\n          <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\n          {/* <SelectionBox\n            listArr={[\n              { key: 'time', value: 'Time' },\n              { key: 'petid', value: 'Pet ID' },\n              { key: 'owner', value: 'Owner' },\n              { key: 'breed', value: 'Breed' },\n              { key: 'petname', value: 'Pet Name' },\n              { key: 'gender', value: 'Gender' },\n            ]}\n            clickItem={(item) => {\n              let petList = [].concat(petListArr)\n              switch (item.key) {\n                case 'time':\n                  petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n                  break;\n                case 'petid':\n                  petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n                  break;\n                case 'owner':\n                  petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n                  break;\n                case 'breed':\n                  petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n                  break;\n                case 'petname':\n                  petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n                  break;\n                case 'gender':\n                  petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n                  break;\n              }\n              resetPetList(petList)\n            }}\n          /> */}\n          <Select\n            defaultValue={['Time']}\n            onChange={handleChange}\n            options={options}\n            className=\"selectFilter\"\n          />\n        </div>\n      </div>\n      <div className=\"table\" >\n        <ConfigProvider renderEmpty={noData}>\n          <Table\n            style={{\n              padding: 0,\n              margin: 0,\n              width: '95%',\n            }}\n            rowKey={data => data.id}\n            bordered={false}\n            columns={columns}\n            dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\n            loading={loading}\n            pagination={false}\n            scroll={{\n              // y: px(480),\n              y: '80 %'\n            }}\n            onRow={(record) => {\n              return {\n                onClick: (event) => {\n                  setMenuNum('1')\n                  petDetailInfoFun(record)\n                }, // 点击行\n              };\n            }}\n            className=\"allPetTable\"\n          />\n        </ConfigProvider>\n      </div>\n    </div >\n  )\n}\n\nPetTable.propTypes = {\n  petListArr: PropTypes.array,\n  resetPetList: PropTypes.func,\n}\n//默认值\nPetTable.defaultProps = {\n  bodyHeight: 0,\n  petListArr: [],\n  resetPetList: () => { },\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, }\n)(PetTable)\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx",["1040","1041","1042","1043","1044"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Progress } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Results Processing\n        </p>\n      </div>\n      <div className=\"middleBox\" style={{margin:px(-100)}}>\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\n          Please wait for\n          <br />\n          accurate results\n        </p>\n      </div>\n      <div>\n        <Progress type=\"circle\" percent={60} format={() => '06:01:59'} width={270} strokeWidth={12} />\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(TimerPage);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx",["1045","1046","1047","1048","1049","1050","1051"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst ExperimentalPage = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  const [value, setValue] = useState(1);\n\n  const cutTitle = () => {\n    switch (value) {\n      case 1:\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\n      case 2:\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\n      case 3:\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\n      case 4:\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\n      default:\n        break;\n    }\n  }\n\n  const cutImage = () => {\n    switch (value) {\n      case 1:\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 2:\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 3:\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 4:\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      default:\n        break;\n    }\n  }\n\n  const onClick = () => {\n    if (value !== 4) {\n      setValue(value + 1)\n    } else {\n      cutPageType('timerPage');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          {cutTitle()}\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {cutImage()}\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(ExperimentalPage);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx",["1052","1053","1054","1055","1056"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\n\nconst SwabPetEar = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  let {\n    petSpeciesBreedId,\n  } = petMessage;\n  const [value, setValue] = useState(1);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const imagetypeEvent = () => {\n    if (value === 1) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatRightEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogRightEar} alt=\"\" />;\n      } else {\n        return <img src={DogRightEar} alt=\"\" />;\n      }\n    } else {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatLeftEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogLeftEar} alt=\"\" />;\n      } else {\n        return <img src={DogLeftEar} alt=\"\" />;\n      }\n    }\n  }\n\n  const onClick = () => {\n    if (value === 1) {\n      setValue(2);\n    } else {\n      cutPageType('experimentalPage');\n    }\n  }\n\n  // useEffect(() => {\n  //   imagetypeEvent();\n  // },[value])\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Swab Pet's Ear\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {imagetypeEvent()}\n      </div>\n      <div className=\"radioBox\">\n        <Radio.Group onChange={onChange} value={value}>\n          <Radio value={1}>Right Ear</Radio>\n          <Radio value={2}>Left Ear</Radio>\n        </Radio.Group>\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\n      </div>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(SwabPetEar);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx",["1057","1058","1059","1060","1061"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",["1062","1063"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx",["1064","1065","1066","1067","1068","1069"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Input, Card, List } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport scale from \"../../../../assets/img/scale.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, setSelectHardwareType }) => {\n  let history = useHistory();\n  const data = [\n    {\n      title: 'Last 24 hrs',\n      number: '1'\n    },\n    {\n      title: 'Last 7 days',\n      number: '3'\n    },\n    {\n      title: 'Days to goal',\n      number: '33'\n    },\n    {\n      title: 'Ideal Weight',\n      number: '42'\n    },\n  ];\n  const [planType, setPlanType] = useState(false);\n\n  useEffect(() => {\n    console.log('electronStore.get(`${petMessage.petId}-planType`): ', electronStore.get(`${petMessage.petId}-planType`));\n    setPlanType(electronStore.get(`${petMessage.petId}-planType`) ? true : false);\n  }, [petMessage.petId]);\n\n\n\n  return (\n    <div className=\"contentBox\">\n      {\n        planType ?\n          (\n            <>\n              <div className=\"topBox annulusBox\">\n                <div className=\"excircle\">\n                  <div className=\"circleContentBox\">\n                    <img src={scale} alt=\"\" />\n                    <div className=\"floatBox\">\n                      <div className=\"weightTitle\">\n                        <p>70</p>\n                        <p>lbs</p>\n                      </div>\n                      <div className=\"identification\">\n                        <p>Current Weight</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"middleBox\">\n                <div className=\"bodyState\">\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Fat Percent: 88%</p>\n                  </div>\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Condition Score: 9</p>\n                  </div>\n                </div>\n                <p className=\"hintTitle\">23 lbs over ideal weight</p>\n              </div>\n              <div className=\"bottomBox\">\n                <List\n                  dataSource={data}\n                  renderItem={(item) => (\n                    <div className=\"listBox\">\n                      <List.Item>\n                        <div className=\"item\">\n                          <div className=\"top\">\n                            <p>{item.title}</p>\n                          </div>\n                          <div className=\"bottom\">\n                            <p>{item.number}</p>\n                          </div>\n                        </div>\n                      </List.Item>\n                    </div>\n                  )}\n                />\n              </div>\n            </>\n          )\n          :\n          (\n            <div className=\"planBox\">\n              <p className=\"title\">\n                {`${petMessage.petName}`}\n                is not enrolled<br />\n                in a feeding plan\n              </p>\n              <p className=\"recommendedTitle\">A Mabel smart bowl scale is recommended.</p>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  block\n                  onClick={() => {\n                    setSelectHardwareType('prescribePlan');\n                  }}\n                >\n                  Prescribe Feeding Plan\n                </Button>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx",["1070"],"\n\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './selectionBox.less'\nimport { px } from './../px'\nimport { stopBubble } from './../current'\n\nimport blackTriangle from './../../assets/img/blackTriangle.png'\n\n\nconst SelectionBox = ({ listArr, clickItem, clickitemBgc, clickItemColor, initSelectVale }) => {\n  const [selectValue, setSelectValue] = useState('')\n  const [mouseValue, setMouseValue] = useState('')\n  const [showSelect, setShowSelect] = useState(false)\n\n  const selection = () => {\n    let option = listArr.map((item, index) => {\n      let bacColor = item.value === selectValue ? clickitemBgc : item.value === mouseValue ? '#e7e7e7' : '#fff'\n      let textColor = item.value === selectValue ? clickItemColor : '#000'\n\n\n      // setBacColor(bacColor1)\n      // setTextColor(textColor1)\n      return <li\n        key={item.key}\n        style={{ paddingTop: px(5), paddingBottom: px(5), backgroundColor: bacColor, color: textColor }}\n        onClick={() => {\n          setSelectValue(item.value)\n          setShowSelect(false)\n          clickItem(item)\n        }}\n        onMouseMove={() => {\n          console.log();\n          if (item.value !== selectValue) {\n            setMouseValue(item.value)\n          }\n        }}\n        onMouseLeave={() => {\n          if (item.value !== selectValue) {\n            // setBacColor('#fff')\n            setMouseValue('')\n          }\n        }}\n      >{item.value}</li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n\n\n  }\n\n  useEffect(() => {\n    console.log(listArr[0]);\n    setSelectValue(listArr[0].value)\n    setMouseValue(listArr[0].value)\n    if (initSelectVale) {\n      setSelectValue(initSelectVale)\n    }\n  }, [])\n\n  return (\n    <div className='selectionbox'>\n\n      <div className=\"select flex\" style={{ height: px(26) }}>\n        <div className=\"flex box\" onClick={(e) => {\n          setShowSelect(true)\n          stopBubble(e)\n        }}>\n          <p style={{ fontSize: px(16), }}>{selectValue}</p>\n          <img src={blackTriangle} alt=\"\" style={{ height: '50%' }} />\n        </div>\n\n        {\n          showSelect &&\n          true &&\n          <div className=\"sortList\" style={{ top: px(26), }}>\n            {selection()}\n          </div>\n        }\n      </div>\n    </div>\n  )\n\n}\nSelectionBox.propTypes = {\n  listArr: PropTypes.array.isRequired,\n  clickItem: PropTypes.func,\n  clickitemBgc: PropTypes.string,\n  clickItemColor: PropTypes.string,\n  initSelectVale: PropTypes.string\n\n\n}\nSelectionBox.defaultProps = {\n  clickitemBgc: '#e1206d',\n  clickItemColor: '#fff',\n  initSelectVale: '',\n  clickItem: () => {\n\n  }\n}\nexport default SelectionBox\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js",["1071"],"/**\r\n * @file mellarecord.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/mellarecord 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/mellarecord`\r\n\r\n\r\n/**\r\n * @dec 增加硬件记录并更新ota硬件版本\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const saveRecord = (params) => {\r\n    return postJson(`${baseURL}/saveRecord`, params)\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getInfoOfLatestDevice = (hardWareType) => {\r\n    return get(`${baseURL}/getInfoOfLatestDevice?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js",["1072"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/workplace 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/workplace`\r\n\r\n\r\n/**\r\n * \r\n * @dec 根据组织id获取工作场所\r\n * @param {string} organizationId \r\n * @returns \r\n */\r\nexport const listAllWorkplaceByOrganizationId = (organizationId) => {\r\n    return get(`${baseURL}/listAllWorkplaceByOrganizationId/${organizationId}`, '')\r\n}\r\n\r\n\r\n/**\r\n * @dec 添加工作场所\r\n * @param {str} userId 用户id\r\n * @param {*} params \r\n * @returns \r\n */\r\n\r\nexport const addWorkplace = (userId, params) => {\r\n    return postJson(`${baseURL}/addWorkplace${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",["1073","1074","1075","1076","1077","1078","1079","1080","1081"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Menu,\r\n  Popover,\r\n  Button,\r\n  Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\nimport './phoneBook.less'\r\nimport { px } from '../px';\r\n/**\r\n *\r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns\r\n */\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n  const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n  const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n  const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n  const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n  const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n  const _phoneList = () => {\r\n    let option = phoneList.map((item, index) => {\r\n      let data = item.data\r\n      let option1 = data.map((value, index1) => {\r\n        return (\r\n          <li\r\n            key={`option1${index1}`}\r\n            onClick={() => {\r\n              setSelectBreed(value.petSpeciesBreedId)\r\n              selectFun(value)\r\n            }}>\r\n            {value.name}\r\n            {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n          </li>\r\n        )\r\n      })\r\n      return (\r\n        <div className=\"phoneBody\">\r\n          <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n          <ul>\r\n            {option1}\r\n          </ul>\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const _letterList = () => {\r\n\r\n    let option = letterList.map((item, index) => {\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n\r\n          style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n          <a\r\n\r\n            onClick={() => {\r\n              litterClick(item)\r\n            }}\r\n          >{item}</a>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <ul className=\"letterUL\">\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const litterClick = (anchorName) => {\r\n    // console.log(anchorName);\r\n    if (anchorName) {\r\n      // 找到锚点\r\n      let anchorElement = document.getElementById(anchorName);\r\n      // console.log(anchorElement);\r\n      // 如果对应id的锚点存在，就跳转到锚点\r\n      if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n    }\r\n    // e.preventDefault();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (confirmSelectBreed !== -1) {\r\n      setSelectBreed(confirmSelectBreed)\r\n    }\r\n  }, [confirmSelectBreed]);\r\n\r\n  useEffect(() => {\r\n    let test = []\r\n    listDate.forEach((item, index) => {\r\n      let data = {\r\n        name: item.breedName,\r\n        hidden: false,\r\n        petSpeciesBreedId: item.petSpeciesBreedId\r\n      }\r\n      test.push(data)\r\n    })\r\n    //获取联系人列表\r\n    let list = test;\r\n    let sections = [], letterArr = [];\r\n    // 右侧字母栏数据处理\r\n    list.forEach((item, index) => {\r\n      letterArr.push(pinyin(item.name.substring(0, 1), {\r\n        style: pinyin.STYLE_FIRST_LETTER,\r\n      })[0][0].toUpperCase());\r\n\r\n      letterArr = [...new Set(letterArr)].sort();\r\n    });\r\n    // 分组数据处理\r\n    letterArr.forEach((item, index) => {\r\n      sections.push({\r\n        title: item,\r\n        data: []\r\n      })\r\n    });\r\n    list.forEach(item => {\r\n      let listItem = item;\r\n      sections.forEach(item => {\r\n        let first = listItem.name.substring(0, 1);\r\n        let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n        if (item.title == test) {\r\n          item.data.push({\r\n            firstName: first,\r\n            name: listItem.name,\r\n            hidden: listItem.hidden,\r\n            petSpeciesBreedId: listItem.petSpeciesBreedId\r\n          });\r\n        }\r\n      })\r\n    });\r\n    setPhoneList(sections)\r\n    setPhoneListCopy(sections)\r\n    setLetterList(letterArr)\r\n    setLetterListCopy(letterArr)\r\n  }, [listDate]);\r\n\r\n  useEffect(() => {\r\n    if (letterListCopy.length > 0) {\r\n      let allData = phoneListCopy\r\n      let newArr = []\r\n      let arr = []\r\n      if (searchText.length > 0) {\r\n        allData.map((item, i) => {\r\n          item.data.forEach((data, index) => {\r\n            let dataName = data.name ? data.name.toUpperCase() : ''\r\n            let keyData = searchText ? searchText.toUpperCase() : ''\r\n            if (dataName.search(keyData) !== -1) {\r\n              newArr.push(data)\r\n            }\r\n          })\r\n          if (newArr.length != 0) {\r\n            let oneGreep = {\r\n              title: item.title,\r\n              data: newArr\r\n            }\r\n            arr.push(oneGreep)\r\n          }\r\n          newArr = []\r\n        })\r\n        let letterArr = []\r\n        arr.forEach((item, index) => {\r\n          letterArr.push(item.title)\r\n        })\r\n        setPhoneList(arr)\r\n        setLetterList(letterArr)\r\n      } else {\r\n        setPhoneList(phoneListCopy)\r\n        setLetterList(letterListCopy)\r\n      }\r\n    }\r\n  }, [searchText]);\r\n\r\n  return (\r\n    <div id=\"phoneBook\">\r\n      <div className=\"phone\">\r\n        {_phoneList()}\r\n      </div>\r\n      <div className=\"litter\">\r\n        {_letterList()}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n  listDate: PropTypes.array,\r\n  selectFun: PropTypes.func,\r\n  searchText: PropTypes.string,\r\n  confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n  listDate: [],\r\n  selectFun: () => { },\r\n  searchText: '',\r\n  confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx",["1082"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Input,\r\n  message,\r\n  Spin,\r\n  Button,\r\n} from \"antd\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\nimport { selectBreedBySpeciesId } from '../../api';\r\n\r\nconst SelectPetBreed = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel }) => {\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\r\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\r\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\r\n  const [breedList, setBreedList] = useState([]);//所有宠物品种\r\n  const [searchValue, setSearchValue] = useState();//搜索框的值\r\n  const [selePetBreedValue, setSelePetBreedValue] = useState();//选择的宠物品种\r\n  const [loading, setLoading] = useState(false);//加载\r\n\r\n  //获取所有宠物品种\r\n  const getAllPetBreed = () => {\r\n    let data = {\r\n      speciesId: null,//null是获取所有宠物品种不分猫和狗\r\n    }\r\n    setLoading(true);\r\n\r\n    selectBreedBySpeciesId(data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          setBreedList(res.petlist);\r\n        } else {\r\n          message.error('Failed to obtain pet breed')\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n      })\r\n  }\r\n  //确认选择\r\n  const handleOk = () => {\r\n    onSelect(selePetBreedValue);\r\n    setIsModalVisible(visible);\r\n  };\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    onCancel(false);\r\n    setIsModalVisible(visible);\r\n  };\r\n  //输入框输入内容\r\n  const onChange = (e) => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (visible === true || visible === false) {\r\n      setIsModalVisible(visible);\r\n    } else {\r\n      setIsModalVisible(false);\r\n    }\r\n    return (() => { });\r\n  }, [visible]);\r\n\r\n  useEffect(() => {\r\n    getAllPetBreed();\r\n    return (() => { });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (destroyOnClose === true) {\r\n      setIsdestroyOnClose(destroyOnClose);\r\n    }\r\n    if (_.isNumber(width)) {\r\n      setIsWidth(width)\r\n    }\r\n    return (() => { })\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        title=\"Choose Breed\"\r\n        visible={isModalVisible}\r\n        onCancel={handleCancel}\r\n        centered\r\n        maskClosable={false}\r\n        footer={null}\r\n        width={isWidth}\r\n        destroyOnClose={isdestroyOnClose}\r\n        className=\"selectPetBreedModal\"\r\n      >\r\n        <Spin spinning={loading}>\r\n          <div className='modalContentBox'>\r\n            <div className=\"searchBox\">\r\n              <Input\r\n                placeholder=\"Search Name\"\r\n                bordered={false}\r\n                allowClear={true}\r\n                prefix={<SearchOutlined />}\r\n                onChange={onChange}\r\n              />\r\n            </div>\r\n            <div className='list'>\r\n              <PhoneBook\r\n                listDate={breedList}\r\n                confirmSelectBreed={value}\r\n                selectFun={(val) => {\r\n                  setSelePetBreedValue(val);\r\n                }}\r\n                searchText={searchValue}\r\n              />\r\n            </div>\r\n            <div className='foot'>\r\n              <div className=\"btnBox\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size=\"large\"\r\n                  block\r\n                  onClick={handleOk}\r\n                >\r\n                  Select\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectPetBreed;\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx",["1083","1084","1085","1086"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Layout,\n  Modal,\n  message,\n} from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\n\nimport { updatePetInfo1 } from \"../../../api\";\nimport { petPicture, calculateAge, catLeanBodyMass, catFatMass, dogLeanBodyMass, dogFatMass, dogBodyFatPercentage } from '../../../utils/commonFun';\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n} from \"../../../store/actions\";\nimport { useUpdateEffect } from 'ahooks';\nimport _ from \"lodash\";\n\nimport \"./calculationResult.less\";\n\nconst { Content } = Layout;\nconst CalculationResult = ({\n  type,\n  petMessage,\n  petDetailInfoFun,\n  ruleMessage,\n  getMeasureData,\n  setRulerUnitFun\n}) => {\n  let { petId, petSpeciesBreedId, weight, birthday } = petMessage;\n  let { rulerUnit } = ruleMessage;\n  let {\n    headValue,\n    neckValue,\n    upperValue,\n    lowerValue,\n    torsoValue,\n    bodyValue,\n    hindlimbValue,\n    forelimbLengthValue,\n    forelimbCircumferenceValue,\n  } = getMeasureData;\n  let storage = window.localStorage;\n  //重新测量\n  const onAgainMeasure = () => {\n    type(false);\n  }\n  //用户点击保存\n  const onSave = () => {\n    Modal.confirm({\n      title: \"Confirm\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Whether To Save Data\",\n      top: \"40vh\",\n      onOk: saveData,\n    });\n  }\n  //in-cm转换\n  const in_cm = (val) => {\n    if (val) {\n      if (rulerUnit === \"in\") {\n        return parseFloat((parseFloat(val) * 2.54).toFixed(1));\n      } else {\n        return parseFloat(val);\n      }\n    } else {\n      return 0;\n    }\n  }\n  //保存数据\n  const saveData = () => {\n    let prams = {\n      l2rarmDistance: in_cm(getMeasureData.bodyValue) || null,\n      lowerTorsoCircumference: in_cm(getMeasureData.lowerValue) || null,\n      upperTorsoCircumference: in_cm(getMeasureData.upperValue) || null,\n      neckCircumference: in_cm(getMeasureData.neckValue) || null,\n      h2tLength: in_cm(getMeasureData.headValue) || null,\n      torsoLength: in_cm(getMeasureData.torsoValue) || null,\n      hindLimbLength: in_cm(getMeasureData.hindlimbValue) || null,\n      foreLimbLength: in_cm(getMeasureData.forelimbLengthValue) || null,\n      foreLimbCircumference: in_cm(getMeasureData.forelimbCircumferenceValue) || null,\n    };\n    updatePetInfo1(storage.userId, petId, prams)\n      .then((res) => {\n        if (res.flag) {\n          petDetailInfoFun({\n            ...petMessage,\n            ...prams,\n          });\n          message.success(\"Uploaded successfully\");\n          type(false);\n        } else {\n          message.error(\"upload failed\");\n        }\n      })\n      .catch((err) => {\n        message.error(\"update failed\");\n      });\n  };\n  //获取LeanBodyMass\n  const getLeanBodyMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catLeanBodyMass(headValue, in_cm(hindlimbValue), in_cm(forelimbCircumferenceValue), in_cm(forelimbLengthValue), in_cm(bodyValue), in_cm(upperValue)), 2);\n      case 'dog':\n        return _.round(dogLeanBodyMass(weight * 2.2046, calculateAge(birthday), in_cm(headValue), in_cm(forelimbLengthValue), in_cm(hindlimbValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取FatMass\n  const getFatMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catFatMass(weight * 2.2046, in_cm(headValue), in_cm(forelimbLengthValue), in_cm(forelimbCircumferenceValue)), 2);\n      case 'dog':\n        return _.round(dogFatMass(weight * 2.2046, in_cm(hindlimbValue), in_cm(upperValue), in_cm(headValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取BodyFatPercent\n  const getBodyFatPercent = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return;\n      case 'dog':\n        return _.round(dogBodyFatPercentage(in_cm(upperValue), in_cm(lowerValue), in_cm(hindlimbValue), in_cm(headValue)), 2);\n\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n\n  useUpdateEffect(() => {\n    type(false);\n    return () => { };\n  }, [petId]);\n\n  return (\n    <Content className=\"calculationResultContentBox\">\n      <div className=\"localityBox\">\n        <div className=\"localityTitleBox\">\n          <p className=\"localityTitle\">Lean Body Mass</p>\n        </div>\n        <div className=\"circleBox\">\n          <div className=\"dataBox\">\n            <p>{getLeanBodyMass() ? `${getLeanBodyMass()}g` : ''}</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"localityBox\">\n        <div className=\"localityTitleBox\">\n          <p className=\"localityTitle\">Fat Mass</p>\n        </div>\n        <div className=\"circleBox\">\n          <div className=\"dataBox\">\n            <p>{getFatMass() ? `${getFatMass()}g` : ''}</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"localityBox\">\n        <div className=\"localityTitleBox\">\n          <p className=\"localityTitle\">Body Fat Percent</p>\n        </div>\n        <div className=\"circleBox\">\n          <div className=\"dataBox\">\n            <p>{getBodyFatPercent() ? `${getBodyFatPercent()}%` : ''}</p>\n          </div>\n        </div>\n      </div>\n      {/* <div className=\"againMeasureBox\">\n        <p onClick={() => onAgainMeasure()}>Measure Again</p>\n      </div> */}\n      <div className=\"calculateBtnBox\">\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onAgainMeasure()}\n        >\n          Measure Again\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onSave()}\n        >\n          Calculate\n        </Button>\n      </div>\n    </Content>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n  }\n)(CalculationResult);\n",{"ruleId":"1087","severity":1,"message":"1088","line":3,"column":10,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":24},{"ruleId":"1091","replacedBy":"1092"},{"ruleId":"1093","replacedBy":"1094"},{"ruleId":"1087","severity":1,"message":"1095","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1096","line":4,"column":3,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1097","line":19,"column":10,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1098","line":24,"column":7,"nodeType":"1089","messageId":"1090","endLine":24,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1099","line":348,"column":11,"nodeType":"1089","messageId":"1090","endLine":348,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1100","line":416,"column":19,"nodeType":"1089","messageId":"1090","endLine":416,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1101","line":417,"column":9,"nodeType":"1089","messageId":"1090","endLine":417,"endColumn":13},{"ruleId":"1102","severity":1,"message":"1103","line":582,"column":15,"nodeType":"1104","endLine":582,"endColumn":50},{"ruleId":"1087","severity":1,"message":"1105","line":2,"column":17,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":21},{"ruleId":"1087","severity":1,"message":"1106","line":2,"column":60,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":64},{"ruleId":"1087","severity":1,"message":"1107","line":103,"column":29,"nodeType":"1089","messageId":"1090","endLine":103,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1108","line":103,"column":38,"nodeType":"1089","messageId":"1090","endLine":103,"endColumn":46},{"ruleId":"1087","severity":1,"message":"1109","line":103,"column":48,"nodeType":"1089","messageId":"1090","endLine":103,"endColumn":57},{"ruleId":"1087","severity":1,"message":"1110","line":230,"column":103,"nodeType":"1089","messageId":"1090","endLine":230,"endColumn":112},{"ruleId":"1087","severity":1,"message":"1111","line":396,"column":11,"nodeType":"1089","messageId":"1090","endLine":396,"endColumn":21},{"ruleId":"1112","severity":1,"message":"1113","line":657,"column":15,"nodeType":"1104","endLine":657,"endColumn":63},{"ruleId":"1087","severity":1,"message":"1114","line":674,"column":11,"nodeType":"1089","messageId":"1090","endLine":674,"endColumn":20},{"ruleId":"1112","severity":1,"message":"1113","line":693,"column":15,"nodeType":"1104","endLine":693,"endColumn":63},{"ruleId":"1115","severity":1,"message":"1116","line":716,"column":5,"nodeType":"1117","messageId":"1118","endLine":719,"endColumn":6},{"ruleId":"1115","severity":1,"message":"1116","line":720,"column":5,"nodeType":"1117","messageId":"1118","endLine":723,"endColumn":6},{"ruleId":"1087","severity":1,"message":"1119","line":825,"column":51,"nodeType":"1089","messageId":"1090","endLine":825,"endColumn":68},{"ruleId":"1087","severity":1,"message":"1120","line":825,"column":70,"nodeType":"1089","messageId":"1090","endLine":825,"endColumn":75},{"ruleId":"1087","severity":1,"message":"1114","line":825,"column":108,"nodeType":"1089","messageId":"1090","endLine":825,"endColumn":117},{"ruleId":"1115","severity":1,"message":"1116","line":77,"column":11,"nodeType":"1117","messageId":"1118","endLine":98,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1121","line":29,"column":9,"nodeType":"1089","messageId":"1090","endLine":29,"endColumn":15},{"ruleId":"1115","severity":1,"message":"1116","line":99,"column":5,"nodeType":"1117","messageId":"1118","endLine":105,"endColumn":6},{"ruleId":"1122","severity":1,"message":"1123","line":112,"column":41,"nodeType":"1124","messageId":"1125","endLine":112,"endColumn":43},{"ruleId":"1122","severity":1,"message":"1123","line":150,"column":41,"nodeType":"1124","messageId":"1125","endLine":150,"endColumn":43},{"ruleId":"1087","severity":1,"message":"1111","line":257,"column":11,"nodeType":"1089","messageId":"1090","endLine":257,"endColumn":21},{"ruleId":"1087","severity":1,"message":"1126","line":257,"column":49,"nodeType":"1089","messageId":"1090","endLine":257,"endColumn":55},{"ruleId":"1112","severity":1,"message":"1113","line":507,"column":15,"nodeType":"1104","endLine":507,"endColumn":63},{"ruleId":"1112","severity":1,"message":"1113","line":537,"column":15,"nodeType":"1104","endLine":537,"endColumn":63},{"ruleId":"1115","severity":1,"message":"1116","line":558,"column":5,"nodeType":"1117","messageId":"1118","endLine":561,"endColumn":6},{"ruleId":"1115","severity":1,"message":"1116","line":562,"column":5,"nodeType":"1117","messageId":"1118","endLine":565,"endColumn":6},{"ruleId":"1087","severity":1,"message":"1127","line":678,"column":11,"nodeType":"1089","messageId":"1090","endLine":678,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1128","line":681,"column":11,"nodeType":"1089","messageId":"1090","endLine":681,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1129","line":749,"column":13,"nodeType":"1089","messageId":"1090","endLine":749,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1130","line":749,"column":25,"nodeType":"1089","messageId":"1090","endLine":749,"endColumn":33},{"ruleId":"1087","severity":1,"message":"1131","line":749,"column":35,"nodeType":"1089","messageId":"1090","endLine":749,"endColumn":41},{"ruleId":"1087","severity":1,"message":"1132","line":749,"column":43,"nodeType":"1089","messageId":"1090","endLine":749,"endColumn":51},{"ruleId":"1087","severity":1,"message":"1119","line":749,"column":53,"nodeType":"1089","messageId":"1090","endLine":749,"endColumn":70},{"ruleId":"1087","severity":1,"message":"1111","line":796,"column":29,"nodeType":"1089","messageId":"1090","endLine":796,"endColumn":39},{"ruleId":"1087","severity":1,"message":"1120","line":796,"column":79,"nodeType":"1089","messageId":"1090","endLine":796,"endColumn":84},{"ruleId":"1087","severity":1,"message":"1133","line":796,"column":117,"nodeType":"1089","messageId":"1090","endLine":796,"endColumn":139},{"ruleId":"1087","severity":1,"message":"1134","line":4,"column":3,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":8},{"ruleId":"1087","severity":1,"message":"1106","line":6,"column":3,"nodeType":"1089","messageId":"1090","endLine":6,"endColumn":7},{"ruleId":"1087","severity":1,"message":"1135","line":390,"column":21,"nodeType":"1089","messageId":"1090","endLine":390,"endColumn":27},{"ruleId":"1102","severity":1,"message":"1103","line":532,"column":19,"nodeType":"1104","endLine":532,"endColumn":56},{"ruleId":"1102","severity":1,"message":"1103","line":584,"column":17,"nodeType":"1104","endLine":584,"endColumn":60},{"ruleId":"1087","severity":1,"message":"1136","line":30,"column":9,"nodeType":"1089","messageId":"1090","endLine":30,"endColumn":16},{"ruleId":"1115","severity":1,"message":"1116","line":70,"column":13,"nodeType":"1117","messageId":"1118","endLine":99,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1137","line":297,"column":45,"nodeType":"1089","messageId":"1090","endLine":297,"endColumn":59},{"ruleId":"1087","severity":1,"message":"1138","line":297,"column":61,"nodeType":"1089","messageId":"1090","endLine":297,"endColumn":75},{"ruleId":"1087","severity":1,"message":"1139","line":8,"column":14,"nodeType":"1089","messageId":"1090","endLine":8,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1140","line":60,"column":9,"nodeType":"1089","messageId":"1090","endLine":60,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1140","line":90,"column":9,"nodeType":"1089","messageId":"1090","endLine":90,"endColumn":22},{"ruleId":"1122","severity":1,"message":"1123","line":205,"column":41,"nodeType":"1124","messageId":"1125","endLine":205,"endColumn":43},{"ruleId":"1122","severity":1,"message":"1123","line":218,"column":47,"nodeType":"1124","messageId":"1125","endLine":218,"endColumn":49},{"ruleId":"1087","severity":1,"message":"1141","line":423,"column":23,"nodeType":"1089","messageId":"1090","endLine":423,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1121","line":20,"column":9,"nodeType":"1089","messageId":"1090","endLine":20,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1140","line":64,"column":9,"nodeType":"1089","messageId":"1090","endLine":64,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1142","line":336,"column":9,"nodeType":"1089","messageId":"1090","endLine":336,"endColumn":25},{"ruleId":"1087","severity":1,"message":"1143","line":357,"column":7,"nodeType":"1089","messageId":"1090","endLine":357,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1121","line":24,"column":9,"nodeType":"1089","messageId":"1090","endLine":24,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1144","line":40,"column":11,"nodeType":"1089","messageId":"1090","endLine":40,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1145","line":40,"column":19,"nodeType":"1089","messageId":"1090","endLine":40,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1140","line":55,"column":9,"nodeType":"1089","messageId":"1090","endLine":55,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1127","line":160,"column":43,"nodeType":"1089","messageId":"1090","endLine":160,"endColumn":52},{"ruleId":"1087","severity":1,"message":"1141","line":160,"column":54,"nodeType":"1089","messageId":"1090","endLine":160,"endColumn":59},{"ruleId":"1087","severity":1,"message":"1146","line":8,"column":10,"nodeType":"1089","messageId":"1090","endLine":8,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1147","line":13,"column":5,"nodeType":"1089","messageId":"1090","endLine":13,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1148","line":50,"column":7,"nodeType":"1089","messageId":"1090","endLine":50,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1149","line":51,"column":7,"nodeType":"1089","messageId":"1090","endLine":51,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1150","line":54,"column":10,"nodeType":"1089","messageId":"1090","endLine":54,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1151","line":54,"column":20,"nodeType":"1089","messageId":"1090","endLine":54,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1152","line":121,"column":9,"nodeType":"1089","messageId":"1090","endLine":121,"endColumn":18},{"ruleId":"1153","severity":1,"message":"1154","line":291,"column":59,"nodeType":"1155","messageId":"1156","endLine":291,"endColumn":60},{"ruleId":"1087","severity":1,"message":"1105","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1157","line":2,"column":25,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1106","line":2,"column":41,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":45},{"ruleId":"1087","severity":1,"message":"1158","line":3,"column":10,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":30},{"ruleId":"1087","severity":1,"message":"1159","line":18,"column":47,"nodeType":"1089","messageId":"1090","endLine":18,"endColumn":68},{"ruleId":"1087","severity":1,"message":"1160","line":74,"column":61,"nodeType":"1089","messageId":"1090","endLine":74,"endColumn":64},{"ruleId":"1087","severity":1,"message":"1161","line":74,"column":66,"nodeType":"1089","messageId":"1090","endLine":74,"endColumn":75},{"ruleId":"1087","severity":1,"message":"1162","line":216,"column":56,"nodeType":"1089","messageId":"1090","endLine":216,"endColumn":63},{"ruleId":"1087","severity":1,"message":"1163","line":217,"column":11,"nodeType":"1089","messageId":"1090","endLine":217,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1164","line":9,"column":3,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":8},{"ruleId":"1087","severity":1,"message":"1165","line":34,"column":10,"nodeType":"1089","messageId":"1090","endLine":34,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1166","line":36,"column":10,"nodeType":"1089","messageId":"1090","endLine":36,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1167","line":38,"column":10,"nodeType":"1089","messageId":"1090","endLine":38,"endColumn":18},{"ruleId":"1168","severity":1,"message":"1169","line":92,"column":6,"nodeType":"1170","endLine":92,"endColumn":8,"suggestions":"1171"},{"ruleId":"1087","severity":1,"message":"1121","line":22,"column":9,"nodeType":"1089","messageId":"1090","endLine":22,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1144","line":45,"column":11,"nodeType":"1089","messageId":"1090","endLine":45,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1145","line":45,"column":19,"nodeType":"1089","messageId":"1090","endLine":45,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1140","line":61,"column":9,"nodeType":"1089","messageId":"1090","endLine":61,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1109","line":144,"column":18,"nodeType":"1089","messageId":"1090","endLine":144,"endColumn":27},{"ruleId":"1087","severity":1,"message":"1108","line":144,"column":29,"nodeType":"1089","messageId":"1090","endLine":144,"endColumn":37},{"ruleId":"1112","severity":1,"message":"1113","line":544,"column":19,"nodeType":"1104","endLine":551,"endColumn":61},{"ruleId":"1102","severity":1,"message":"1103","line":559,"column":19,"nodeType":"1104","endLine":567,"endColumn":30},{"ruleId":"1087","severity":1,"message":"1172","line":19,"column":5,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":10},{"ruleId":"1115","severity":1,"message":"1116","line":165,"column":9,"nodeType":"1117","messageId":"1118","endLine":183,"endColumn":10},{"ruleId":"1115","severity":1,"message":"1116","line":81,"column":13,"nodeType":"1117","messageId":"1118","endLine":110,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1137","line":286,"column":45,"nodeType":"1089","messageId":"1090","endLine":286,"endColumn":59},{"ruleId":"1087","severity":1,"message":"1138","line":286,"column":61,"nodeType":"1089","messageId":"1090","endLine":286,"endColumn":75},{"ruleId":"1087","severity":1,"message":"1173","line":2,"column":8,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1174","line":3,"column":8,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1175","line":4,"column":8,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1176","line":5,"column":8,"nodeType":"1089","messageId":"1090","endLine":5,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1177","line":16,"column":10,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":19},{"ruleId":"1087","severity":1,"message":"1178","line":16,"column":21,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":37},{"ruleId":"1087","severity":1,"message":"1179","line":22,"column":7,"nodeType":"1089","messageId":"1090","endLine":22,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1132","line":202,"column":21,"nodeType":"1089","messageId":"1090","endLine":202,"endColumn":29},{"ruleId":"1087","severity":1,"message":"1135","line":202,"column":31,"nodeType":"1089","messageId":"1090","endLine":202,"endColumn":37},{"ruleId":"1102","severity":1,"message":"1103","line":362,"column":36,"nodeType":"1104","endLine":362,"endColumn":71},{"ruleId":"1087","severity":1,"message":"1121","line":7,"column":9,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1144","line":20,"column":11,"nodeType":"1089","messageId":"1090","endLine":20,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1145","line":20,"column":19,"nodeType":"1089","messageId":"1090","endLine":20,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1140","line":109,"column":9,"nodeType":"1089","messageId":"1090","endLine":109,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1180","line":2,"column":27,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1181","line":3,"column":10,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1182","line":8,"column":14,"nodeType":"1089","messageId":"1090","endLine":8,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1180","line":2,"column":27,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1182","line":7,"column":14,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1183","line":57,"column":5,"nodeType":"1089","messageId":"1090","endLine":57,"endColumn":14},{"ruleId":"1115","severity":1,"message":"1116","line":433,"column":9,"nodeType":"1117","messageId":"1118","endLine":440,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1184","line":471,"column":22,"nodeType":"1089","messageId":"1090","endLine":471,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1185","line":471,"column":28,"nodeType":"1089","messageId":"1090","endLine":471,"endColumn":40},{"ruleId":"1087","severity":1,"message":"1186","line":632,"column":15,"nodeType":"1089","messageId":"1090","endLine":632,"endColumn":25},{"ruleId":"1087","severity":1,"message":"1187","line":676,"column":17,"nodeType":"1089","messageId":"1090","endLine":676,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1188","line":817,"column":13,"nodeType":"1089","messageId":"1090","endLine":817,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1189","line":820,"column":15,"nodeType":"1089","messageId":"1090","endLine":820,"endColumn":30},{"ruleId":"1087","severity":1,"message":"1190","line":822,"column":15,"nodeType":"1089","messageId":"1090","endLine":822,"endColumn":30},{"ruleId":"1087","severity":1,"message":"1191","line":824,"column":15,"nodeType":"1089","messageId":"1090","endLine":824,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1192","line":826,"column":15,"nodeType":"1089","messageId":"1090","endLine":826,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1193","line":833,"column":11,"nodeType":"1089","messageId":"1090","endLine":833,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1194","line":853,"column":15,"nodeType":"1089","messageId":"1090","endLine":853,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1187","line":880,"column":17,"nodeType":"1089","messageId":"1090","endLine":880,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1195","line":1001,"column":11,"nodeType":"1089","messageId":"1090","endLine":1001,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1196","line":15,"column":7,"nodeType":"1089","messageId":"1090","endLine":15,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1197","line":18,"column":5,"nodeType":"1089","messageId":"1090","endLine":18,"endColumn":9},{"ruleId":"1198","severity":1,"message":"1199","line":46,"column":3,"nodeType":"1200","messageId":"1201","endLine":55,"endColumn":47},{"ruleId":"1198","severity":1,"message":"1199","line":74,"column":3,"nodeType":"1200","messageId":"1201","endLine":76,"endColumn":46},{"ruleId":"1087","severity":1,"message":"1202","line":79,"column":5,"nodeType":"1089","messageId":"1090","endLine":79,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1203","line":102,"column":5,"nodeType":"1089","messageId":"1090","endLine":102,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1204","line":13,"column":10,"nodeType":"1089","messageId":"1090","endLine":13,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1205","line":13,"column":14,"nodeType":"1089","messageId":"1090","endLine":13,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1105","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1206","line":2,"column":16,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1207","line":2,"column":25,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1134","line":2,"column":33,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":38},{"ruleId":"1087","severity":1,"message":"1158","line":3,"column":10,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":30},{"ruleId":"1087","severity":1,"message":"1208","line":90,"column":10,"nodeType":"1089","messageId":"1090","endLine":90,"endColumn":19},{"ruleId":"1087","severity":1,"message":"1209","line":90,"column":21,"nodeType":"1089","messageId":"1090","endLine":90,"endColumn":33},{"ruleId":"1087","severity":1,"message":"1210","line":123,"column":10,"nodeType":"1089","messageId":"1090","endLine":123,"endColumn":19},{"ruleId":"1087","severity":1,"message":"1211","line":205,"column":13,"nodeType":"1089","messageId":"1090","endLine":205,"endColumn":20},{"ruleId":"1112","severity":1,"message":"1113","line":797,"column":17,"nodeType":"1104","endLine":797,"endColumn":62},{"ruleId":"1112","severity":1,"message":"1113","line":802,"column":17,"nodeType":"1104","endLine":802,"endColumn":65},{"ruleId":"1102","severity":1,"message":"1103","line":857,"column":15,"nodeType":"1104","endLine":863,"endColumn":16},{"ruleId":"1102","severity":1,"message":"1103","line":866,"column":15,"nodeType":"1104","endLine":872,"endColumn":16},{"ruleId":"1112","severity":1,"message":"1113","line":953,"column":17,"nodeType":"1104","endLine":953,"endColumn":62},{"ruleId":"1112","severity":1,"message":"1113","line":957,"column":15,"nodeType":"1104","endLine":957,"endColumn":64},{"ruleId":"1102","severity":1,"message":"1103","line":1074,"column":13,"nodeType":"1104","endLine":1078,"endColumn":14},{"ruleId":"1102","severity":1,"message":"1103","line":1155,"column":15,"nodeType":"1104","endLine":1163,"endColumn":16},{"ruleId":"1102","severity":1,"message":"1103","line":1178,"column":13,"nodeType":"1104","endLine":1178,"endColumn":76},{"ruleId":"1102","severity":1,"message":"1103","line":1249,"column":15,"nodeType":"1104","endLine":1257,"endColumn":16},{"ruleId":"1102","severity":1,"message":"1103","line":1281,"column":15,"nodeType":"1104","endLine":1285,"endColumn":16},{"ruleId":"1168","severity":1,"message":"1212","line":1402,"column":6,"nodeType":"1170","endLine":1402,"endColumn":8,"suggestions":"1213"},{"ruleId":"1168","severity":1,"message":"1214","line":1406,"column":6,"nodeType":"1170","endLine":1406,"endColumn":32,"suggestions":"1215"},{"ruleId":"1112","severity":1,"message":"1113","line":1455,"column":15,"nodeType":"1104","endLine":1455,"endColumn":59},{"ruleId":"1112","severity":1,"message":"1113","line":1631,"column":19,"nodeType":"1104","endLine":1631,"endColumn":54},{"ruleId":"1112","severity":1,"message":"1113","line":1633,"column":19,"nodeType":"1104","endLine":1633,"endColumn":53},{"ruleId":"1216","severity":1,"message":"1217","line":1,"column":1,"nodeType":"1218","endLine":256,"endColumn":3},{"ruleId":"1087","severity":1,"message":"1219","line":5,"column":8,"nodeType":"1089","messageId":"1090","endLine":5,"endColumn":18},{"ruleId":"1168","severity":1,"message":"1220","line":283,"column":6,"nodeType":"1170","endLine":283,"endColumn":8,"suggestions":"1221"},{"ruleId":"1168","severity":1,"message":"1222","line":324,"column":6,"nodeType":"1170","endLine":324,"endColumn":36,"suggestions":"1223"},{"ruleId":"1087","severity":1,"message":"1147","line":16,"column":5,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":12},{"ruleId":"1168","severity":1,"message":"1224","line":54,"column":6,"nodeType":"1170","endLine":54,"endColumn":41,"suggestions":"1225"},{"ruleId":"1168","severity":1,"message":"1226","line":184,"column":6,"nodeType":"1170","endLine":184,"endColumn":23,"suggestions":"1227"},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1230","line":24,"column":8,"nodeType":"1089","messageId":"1090","endLine":24,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1231","line":57,"column":10,"nodeType":"1089","messageId":"1090","endLine":57,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1232","line":59,"column":10,"nodeType":"1089","messageId":"1090","endLine":59,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1233","line":60,"column":10,"nodeType":"1089","messageId":"1090","endLine":60,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1234","line":61,"column":10,"nodeType":"1089","messageId":"1090","endLine":61,"endColumn":21},{"ruleId":"1115","severity":1,"message":"1116","line":177,"column":5,"nodeType":"1117","messageId":"1118","endLine":198,"endColumn":6},{"ruleId":"1087","severity":1,"message":"1235","line":254,"column":21,"nodeType":"1089","messageId":"1090","endLine":254,"endColumn":31},{"ruleId":"1168","severity":1,"message":"1236","line":344,"column":6,"nodeType":"1170","endLine":344,"endColumn":8,"suggestions":"1237"},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1239","line":26,"column":11,"nodeType":"1089","messageId":"1090","endLine":26,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1240","line":26,"column":20,"nodeType":"1089","messageId":"1090","endLine":26,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1149","line":27,"column":7,"nodeType":"1089","messageId":"1090","endLine":27,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1241","line":1,"column":28,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1240","line":18,"column":18,"nodeType":"1089","messageId":"1090","endLine":18,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1204","line":19,"column":10,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1242","line":27,"column":10,"nodeType":"1089","messageId":"1090","endLine":27,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1243","line":27,"column":19,"nodeType":"1089","messageId":"1090","endLine":27,"endColumn":29},{"ruleId":"1087","severity":1,"message":"1240","line":27,"column":18,"nodeType":"1089","messageId":"1090","endLine":27,"endColumn":24},{"ruleId":"1168","severity":1,"message":"1244","line":124,"column":6,"nodeType":"1170","endLine":124,"endColumn":8,"suggestions":"1245"},{"ruleId":"1168","severity":1,"message":"1246","line":129,"column":6,"nodeType":"1170","endLine":129,"endColumn":8,"suggestions":"1247"},{"ruleId":"1087","severity":1,"message":"1248","line":23,"column":10,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1204","line":26,"column":10,"nodeType":"1089","messageId":"1090","endLine":26,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1249","line":29,"column":26,"nodeType":"1089","messageId":"1090","endLine":29,"endColumn":32},{"ruleId":"1087","severity":1,"message":"1250","line":29,"column":34,"nodeType":"1089","messageId":"1090","endLine":29,"endColumn":39},{"ruleId":"1168","severity":1,"message":"1251","line":116,"column":6,"nodeType":"1170","endLine":116,"endColumn":8,"suggestions":"1252"},{"ruleId":"1112","severity":1,"message":"1113","line":168,"column":19,"nodeType":"1104","endLine":168,"endColumn":47},{"ruleId":"1087","severity":1,"message":"1253","line":15,"column":8,"nodeType":"1089","messageId":"1090","endLine":15,"endColumn":21},{"ruleId":"1087","severity":1,"message":"1254","line":81,"column":17,"nodeType":"1089","messageId":"1090","endLine":81,"endColumn":25},{"ruleId":"1087","severity":1,"message":"1255","line":92,"column":10,"nodeType":"1089","messageId":"1090","endLine":92,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1256","line":96,"column":10,"nodeType":"1089","messageId":"1090","endLine":96,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1257","line":99,"column":18,"nodeType":"1089","messageId":"1090","endLine":99,"endColumn":27},{"ruleId":"1087","severity":1,"message":"1258","line":110,"column":10,"nodeType":"1089","messageId":"1090","endLine":110,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1259","line":110,"column":25,"nodeType":"1089","messageId":"1090","endLine":110,"endColumn":41},{"ruleId":"1087","severity":1,"message":"1260","line":112,"column":10,"nodeType":"1089","messageId":"1090","endLine":112,"endColumn":25},{"ruleId":"1087","severity":1,"message":"1261","line":118,"column":20,"nodeType":"1089","messageId":"1090","endLine":118,"endColumn":31},{"ruleId":"1168","severity":1,"message":"1262","line":129,"column":6,"nodeType":"1170","endLine":129,"endColumn":32,"suggestions":"1263"},{"ruleId":"1087","severity":1,"message":"1264","line":138,"column":11,"nodeType":"1089","messageId":"1090","endLine":138,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1265","line":447,"column":24,"nodeType":"1089","messageId":"1090","endLine":447,"endColumn":28},{"ruleId":"1266","severity":1,"message":"1267","line":462,"column":49,"nodeType":"1155","messageId":"1268","endLine":462,"endColumn":51},{"ruleId":"1269","severity":1,"message":"1270","line":718,"column":34,"nodeType":"1271","messageId":"1272","endLine":718,"endColumn":35,"suggestions":"1273"},{"ruleId":"1269","severity":1,"message":"1274","line":723,"column":31,"nodeType":"1271","messageId":"1272","endLine":723,"endColumn":32,"suggestions":"1275"},{"ruleId":"1269","severity":1,"message":"1270","line":740,"column":34,"nodeType":"1271","messageId":"1272","endLine":740,"endColumn":35,"suggestions":"1276"},{"ruleId":"1269","severity":1,"message":"1274","line":745,"column":31,"nodeType":"1271","messageId":"1272","endLine":745,"endColumn":32,"suggestions":"1277"},{"ruleId":"1269","severity":1,"message":"1270","line":765,"column":34,"nodeType":"1271","messageId":"1272","endLine":765,"endColumn":35,"suggestions":"1278"},{"ruleId":"1269","severity":1,"message":"1274","line":770,"column":31,"nodeType":"1271","messageId":"1272","endLine":770,"endColumn":32,"suggestions":"1279"},{"ruleId":"1269","severity":1,"message":"1270","line":803,"column":34,"nodeType":"1271","messageId":"1272","endLine":803,"endColumn":35,"suggestions":"1280"},{"ruleId":"1269","severity":1,"message":"1274","line":808,"column":31,"nodeType":"1271","messageId":"1272","endLine":808,"endColumn":32,"suggestions":"1281"},{"ruleId":"1269","severity":1,"message":"1270","line":826,"column":34,"nodeType":"1271","messageId":"1272","endLine":826,"endColumn":35,"suggestions":"1282"},{"ruleId":"1269","severity":1,"message":"1274","line":831,"column":31,"nodeType":"1271","messageId":"1272","endLine":831,"endColumn":32,"suggestions":"1283"},{"ruleId":"1269","severity":1,"message":"1270","line":851,"column":34,"nodeType":"1271","messageId":"1272","endLine":851,"endColumn":35,"suggestions":"1284"},{"ruleId":"1269","severity":1,"message":"1274","line":856,"column":31,"nodeType":"1271","messageId":"1272","endLine":856,"endColumn":32,"suggestions":"1285"},{"ruleId":"1269","severity":1,"message":"1270","line":872,"column":59,"nodeType":"1271","messageId":"1272","endLine":872,"endColumn":60,"suggestions":"1286"},{"ruleId":"1269","severity":1,"message":"1274","line":872,"column":165,"nodeType":"1271","messageId":"1272","endLine":872,"endColumn":166,"suggestions":"1287"},{"ruleId":"1288","severity":1,"message":"1289","line":1202,"column":9,"nodeType":"1290","messageId":"1268","endLine":1202,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1291","line":1255,"column":7,"nodeType":"1089","messageId":"1090","endLine":1255,"endColumn":12},{"ruleId":"1269","severity":1,"message":"1270","line":1412,"column":34,"nodeType":"1271","messageId":"1272","endLine":1412,"endColumn":35,"suggestions":"1292"},{"ruleId":"1269","severity":1,"message":"1274","line":1417,"column":31,"nodeType":"1271","messageId":"1272","endLine":1417,"endColumn":32,"suggestions":"1293"},{"ruleId":"1269","severity":1,"message":"1270","line":1433,"column":34,"nodeType":"1271","messageId":"1272","endLine":1433,"endColumn":35,"suggestions":"1294"},{"ruleId":"1269","severity":1,"message":"1274","line":1438,"column":31,"nodeType":"1271","messageId":"1272","endLine":1438,"endColumn":32,"suggestions":"1295"},{"ruleId":"1168","severity":1,"message":"1296","line":1688,"column":6,"nodeType":"1170","endLine":1688,"endColumn":21,"suggestions":"1297"},{"ruleId":"1168","severity":1,"message":"1298","line":1709,"column":6,"nodeType":"1170","endLine":1709,"endColumn":8,"suggestions":"1299"},{"ruleId":"1168","severity":1,"message":"1300","line":1756,"column":6,"nodeType":"1170","endLine":1756,"endColumn":23,"suggestions":"1301"},{"ruleId":"1168","severity":1,"message":"1302","line":1780,"column":6,"nodeType":"1170","endLine":1780,"endColumn":26,"suggestions":"1303"},{"ruleId":"1168","severity":1,"message":"1304","line":1831,"column":6,"nodeType":"1170","endLine":1831,"endColumn":24,"suggestions":"1305"},{"ruleId":"1168","severity":1,"message":"1236","line":136,"column":6,"nodeType":"1170","endLine":136,"endColumn":8,"suggestions":"1306"},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":27,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1204","line":12,"column":10,"nodeType":"1089","messageId":"1090","endLine":12,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1240","line":23,"column":9,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1249","line":23,"column":26,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":32},{"ruleId":"1087","severity":1,"message":"1250","line":23,"column":34,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":39},{"ruleId":"1168","severity":1,"message":"1307","line":233,"column":6,"nodeType":"1170","endLine":233,"endColumn":22,"suggestions":"1308"},{"ruleId":"1168","severity":1,"message":"1309","line":242,"column":6,"nodeType":"1170","endLine":242,"endColumn":21,"suggestions":"1310"},{"ruleId":"1168","severity":1,"message":"1311","line":243,"column":6,"nodeType":"1170","endLine":243,"endColumn":26,"suggestions":"1312"},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1313","line":9,"column":15,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1314","line":9,"column":30,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":35},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1314","line":9,"column":30,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":35},{"ruleId":"1087","severity":1,"message":"1228","line":9,"column":10,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1314","line":9,"column":30,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":35},{"ruleId":"1087","severity":1,"message":"1313","line":9,"column":15,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1314","line":9,"column":30,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":35},{"ruleId":"1087","severity":1,"message":"1313","line":9,"column":15,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1314","line":9,"column":30,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":35},{"ruleId":"1087","severity":1,"message":"1313","line":9,"column":15,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1315","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1316","line":2,"column":17,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":27},{"ruleId":"1087","severity":1,"message":"1207","line":23,"column":8,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":14},{"ruleId":"1122","severity":1,"message":"1123","line":225,"column":41,"nodeType":"1124","messageId":"1125","endLine":225,"endColumn":43},{"ruleId":"1122","severity":1,"message":"1123","line":237,"column":47,"nodeType":"1124","messageId":"1125","endLine":237,"endColumn":49},{"ruleId":"1087","severity":1,"message":"1141","line":451,"column":23,"nodeType":"1089","messageId":"1090","endLine":451,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1317","line":830,"column":11,"nodeType":"1089","messageId":"1090","endLine":830,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1318","line":832,"column":11,"nodeType":"1089","messageId":"1090","endLine":832,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1319","line":850,"column":9,"nodeType":"1089","messageId":"1090","endLine":850,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1320","line":938,"column":65,"nodeType":"1089","messageId":"1090","endLine":938,"endColumn":76},{"ruleId":"1087","severity":1,"message":"1321","line":3,"column":3,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":8},{"ruleId":"1087","severity":1,"message":"1322","line":9,"column":3,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":8},{"ruleId":"1087","severity":1,"message":"1323","line":10,"column":3,"nodeType":"1089","messageId":"1090","endLine":10,"endColumn":7},{"ruleId":"1087","severity":1,"message":"1324","line":71,"column":5,"nodeType":"1089","messageId":"1090","endLine":71,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1325","line":75,"column":5,"nodeType":"1089","messageId":"1090","endLine":75,"endColumn":23},{"ruleId":"1153","severity":1,"message":"1154","line":134,"column":61,"nodeType":"1155","messageId":"1156","endLine":134,"endColumn":62},{"ruleId":"1153","severity":1,"message":"1154","line":142,"column":45,"nodeType":"1155","messageId":"1156","endLine":142,"endColumn":46},{"ruleId":"1087","severity":1,"message":"1160","line":191,"column":9,"nodeType":"1089","messageId":"1090","endLine":191,"endColumn":12},{"ruleId":"1168","severity":1,"message":"1326","line":294,"column":6,"nodeType":"1170","endLine":294,"endColumn":13,"suggestions":"1327"},{"ruleId":"1168","severity":1,"message":"1328","line":316,"column":6,"nodeType":"1170","endLine":316,"endColumn":26,"suggestions":"1329"},{"ruleId":"1168","severity":1,"message":"1330","line":133,"column":6,"nodeType":"1170","endLine":133,"endColumn":8,"suggestions":"1331"},{"ruleId":"1087","severity":1,"message":"1230","line":21,"column":8,"nodeType":"1089","messageId":"1090","endLine":21,"endColumn":14},{"ruleId":"1168","severity":1,"message":"1332","line":153,"column":6,"nodeType":"1170","endLine":153,"endColumn":8,"suggestions":"1333"},{"ruleId":"1168","severity":1,"message":"1334","line":160,"column":6,"nodeType":"1170","endLine":160,"endColumn":19,"suggestions":"1335"},{"ruleId":"1168","severity":1,"message":"1330","line":170,"column":6,"nodeType":"1170","endLine":170,"endColumn":8,"suggestions":"1336"},{"ruleId":"1087","severity":1,"message":"1337","line":10,"column":10,"nodeType":"1089","messageId":"1090","endLine":10,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1338","line":20,"column":10,"nodeType":"1089","messageId":"1090","endLine":20,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1339","line":30,"column":10,"nodeType":"1089","messageId":"1090","endLine":30,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1340","line":41,"column":10,"nodeType":"1089","messageId":"1090","endLine":41,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1341","line":51,"column":10,"nodeType":"1089","messageId":"1090","endLine":51,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1342","line":61,"column":10,"nodeType":"1089","messageId":"1090","endLine":61,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1343","line":71,"column":10,"nodeType":"1089","messageId":"1090","endLine":71,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1344","line":81,"column":10,"nodeType":"1089","messageId":"1090","endLine":81,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1345","line":91,"column":10,"nodeType":"1089","messageId":"1090","endLine":91,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1346","line":101,"column":10,"nodeType":"1089","messageId":"1090","endLine":101,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1241","line":2,"column":17,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":25},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1321","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1347","line":4,"column":8,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1348","line":15,"column":8,"nodeType":"1089","messageId":"1090","endLine":15,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1349","line":16,"column":8,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1239","line":19,"column":9,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1240","line":19,"column":18,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1350","line":22,"column":9,"nodeType":"1089","messageId":"1090","endLine":22,"endColumn":27},{"ruleId":"1087","severity":1,"message":"1351","line":23,"column":10,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1352","line":23,"column":19,"nodeType":"1089","messageId":"1090","endLine":23,"endColumn":29},{"ruleId":"1112","severity":1,"message":"1113","line":28,"column":11,"nodeType":"1104","endLine":28,"endColumn":36},{"ruleId":"1112","severity":1,"message":"1113","line":34,"column":11,"nodeType":"1104","endLine":37,"endColumn":13},{"ruleId":"1112","severity":1,"message":"1113","line":41,"column":13,"nodeType":"1104","endLine":44,"endColumn":15},{"ruleId":"1112","severity":1,"message":"1113","line":49,"column":11,"nodeType":"1104","endLine":52,"endColumn":13},{"ruleId":"1112","severity":1,"message":"1113","line":59,"column":11,"nodeType":"1104","endLine":62,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1353","line":90,"column":58,"nodeType":"1089","messageId":"1090","endLine":90,"endColumn":76},{"ruleId":"1112","severity":1,"message":"1113","line":194,"column":11,"nodeType":"1104","endLine":194,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":196,"column":11,"nodeType":"1104","endLine":196,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":200,"column":11,"nodeType":"1104","endLine":200,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":202,"column":11,"nodeType":"1104","endLine":202,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":206,"column":11,"nodeType":"1104","endLine":206,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":208,"column":11,"nodeType":"1104","endLine":208,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":212,"column":11,"nodeType":"1104","endLine":212,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":214,"column":11,"nodeType":"1104","endLine":214,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":218,"column":11,"nodeType":"1104","endLine":218,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":220,"column":11,"nodeType":"1104","endLine":220,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":224,"column":11,"nodeType":"1104","endLine":224,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":226,"column":11,"nodeType":"1104","endLine":226,"endColumn":46},{"ruleId":"1112","severity":1,"message":"1113","line":230,"column":11,"nodeType":"1104","endLine":230,"endColumn":50},{"ruleId":"1112","severity":1,"message":"1113","line":232,"column":11,"nodeType":"1104","endLine":232,"endColumn":50},{"ruleId":"1112","severity":1,"message":"1113","line":236,"column":11,"nodeType":"1104","endLine":236,"endColumn":56},{"ruleId":"1112","severity":1,"message":"1113","line":238,"column":11,"nodeType":"1104","endLine":238,"endColumn":56},{"ruleId":"1112","severity":1,"message":"1113","line":242,"column":11,"nodeType":"1104","endLine":242,"endColumn":63},{"ruleId":"1112","severity":1,"message":"1113","line":244,"column":11,"nodeType":"1104","endLine":244,"endColumn":63},{"ruleId":"1112","severity":1,"message":"1113","line":248,"column":11,"nodeType":"1104","endLine":248,"endColumn":63},{"ruleId":"1112","severity":1,"message":"1113","line":250,"column":11,"nodeType":"1104","endLine":250,"endColumn":63},{"ruleId":"1112","severity":1,"message":"1113","line":265,"column":17,"nodeType":"1104","endLine":265,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":268,"column":17,"nodeType":"1104","endLine":268,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":280,"column":17,"nodeType":"1104","endLine":280,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":283,"column":17,"nodeType":"1104","endLine":283,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":295,"column":17,"nodeType":"1104","endLine":295,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":298,"column":17,"nodeType":"1104","endLine":298,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":310,"column":17,"nodeType":"1104","endLine":310,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":313,"column":17,"nodeType":"1104","endLine":313,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":325,"column":17,"nodeType":"1104","endLine":325,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":328,"column":17,"nodeType":"1104","endLine":328,"endColumn":67},{"ruleId":"1112","severity":1,"message":"1113","line":340,"column":17,"nodeType":"1104","endLine":340,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":343,"column":17,"nodeType":"1104","endLine":343,"endColumn":66},{"ruleId":"1112","severity":1,"message":"1113","line":355,"column":17,"nodeType":"1104","endLine":355,"endColumn":70},{"ruleId":"1112","severity":1,"message":"1113","line":358,"column":17,"nodeType":"1104","endLine":358,"endColumn":70},{"ruleId":"1112","severity":1,"message":"1113","line":370,"column":17,"nodeType":"1104","endLine":370,"endColumn":76},{"ruleId":"1112","severity":1,"message":"1113","line":373,"column":17,"nodeType":"1104","endLine":373,"endColumn":76},{"ruleId":"1112","severity":1,"message":"1113","line":385,"column":17,"nodeType":"1104","endLine":385,"endColumn":83},{"ruleId":"1112","severity":1,"message":"1113","line":388,"column":17,"nodeType":"1104","endLine":388,"endColumn":83},{"ruleId":"1168","severity":1,"message":"1354","line":571,"column":6,"nodeType":"1170","endLine":571,"endColumn":18,"suggestions":"1355"},{"ruleId":"1168","severity":1,"message":"1356","line":604,"column":6,"nodeType":"1170","endLine":604,"endColumn":25,"suggestions":"1357"},{"ruleId":"1168","severity":1,"message":"1358","line":630,"column":6,"nodeType":"1170","endLine":630,"endColumn":13,"suggestions":"1359"},{"ruleId":"1168","severity":1,"message":"1360","line":684,"column":6,"nodeType":"1170","endLine":684,"endColumn":44,"suggestions":"1361"},{"ruleId":"1168","severity":1,"message":"1307","line":691,"column":6,"nodeType":"1170","endLine":691,"endColumn":13,"suggestions":"1362"},{"ruleId":"1168","severity":1,"message":"1363","line":696,"column":6,"nodeType":"1170","endLine":696,"endColumn":8,"suggestions":"1364"},{"ruleId":"1112","severity":1,"message":"1113","line":710,"column":19,"nodeType":"1104","endLine":710,"endColumn":98},{"ruleId":"1112","severity":1,"message":"1113","line":727,"column":17,"nodeType":"1104","endLine":727,"endColumn":102},{"ruleId":"1087","severity":1,"message":"1180","line":2,"column":5,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1241","line":3,"column":5,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":13},{"ruleId":"1087","severity":1,"message":"1321","line":5,"column":10,"nodeType":"1089","messageId":"1090","endLine":5,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1348","line":16,"column":8,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1240","line":19,"column":18,"nodeType":"1089","messageId":"1090","endLine":19,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1350","line":22,"column":11,"nodeType":"1089","messageId":"1090","endLine":22,"endColumn":29},{"ruleId":"1087","severity":1,"message":"1322","line":5,"column":3,"nodeType":"1089","messageId":"1090","endLine":5,"endColumn":8},{"ruleId":"1087","severity":1,"message":"1365","line":7,"column":3,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":6},{"ruleId":"1087","severity":1,"message":"1366","line":54,"column":16,"nodeType":"1089","messageId":"1090","endLine":54,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1291","line":59,"column":5,"nodeType":"1089","messageId":"1090","endLine":59,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1261","line":74,"column":20,"nodeType":"1089","messageId":"1090","endLine":74,"endColumn":31},{"ruleId":"1112","severity":1,"message":"1113","line":117,"column":18,"nodeType":"1104","endLine":117,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":119,"column":18,"nodeType":"1104","endLine":119,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":121,"column":18,"nodeType":"1104","endLine":121,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":123,"column":18,"nodeType":"1104","endLine":123,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":146,"column":11,"nodeType":"1104","endLine":154,"endColumn":13},{"ruleId":"1112","severity":1,"message":"1113","line":159,"column":13,"nodeType":"1104","endLine":159,"endColumn":63},{"ruleId":"1266","severity":1,"message":"1367","line":227,"column":28,"nodeType":"1155","messageId":"1268","endLine":227,"endColumn":30},{"ruleId":"1168","severity":1,"message":"1368","line":480,"column":6,"nodeType":"1170","endLine":480,"endColumn":13,"suggestions":"1369"},{"ruleId":"1168","severity":1,"message":"1370","line":489,"column":6,"nodeType":"1170","endLine":489,"endColumn":8,"suggestions":"1371"},{"ruleId":"1087","severity":1,"message":"1207","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1372","line":2,"column":36,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1373","line":3,"column":10,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":22},{"ruleId":"1087","severity":1,"message":"1240","line":24,"column":18,"nodeType":"1089","messageId":"1090","endLine":24,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1374","line":28,"column":10,"nodeType":"1089","messageId":"1090","endLine":28,"endColumn":17},{"ruleId":"1087","severity":1,"message":"1375","line":28,"column":19,"nodeType":"1089","messageId":"1090","endLine":28,"endColumn":29},{"ruleId":"1112","severity":1,"message":"1113","line":63,"column":16,"nodeType":"1104","endLine":63,"endColumn":41},{"ruleId":"1112","severity":1,"message":"1113","line":65,"column":16,"nodeType":"1104","endLine":65,"endColumn":41},{"ruleId":"1112","severity":1,"message":"1113","line":67,"column":16,"nodeType":"1104","endLine":67,"endColumn":41},{"ruleId":"1112","severity":1,"message":"1113","line":69,"column":16,"nodeType":"1104","endLine":69,"endColumn":41},{"ruleId":"1168","severity":1,"message":"1376","line":75,"column":3,"nodeType":"1089","endLine":75,"endColumn":12,"suggestions":"1377"},{"ruleId":"1087","severity":1,"message":"1321","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":15},{"ruleId":"1087","severity":1,"message":"1204","line":15,"column":10,"nodeType":"1089","messageId":"1090","endLine":15,"endColumn":12},{"ruleId":"1087","severity":1,"message":"1230","line":28,"column":8,"nodeType":"1089","messageId":"1090","endLine":28,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1240","line":31,"column":18,"nodeType":"1089","messageId":"1090","endLine":31,"endColumn":24},{"ruleId":"1168","severity":1,"message":"1378","line":76,"column":6,"nodeType":"1170","endLine":76,"endColumn":21,"suggestions":"1379"},{"ruleId":"1112","severity":1,"message":"1113","line":120,"column":17,"nodeType":"1104","endLine":120,"endColumn":74},{"ruleId":"1112","severity":1,"message":"1113","line":141,"column":21,"nodeType":"1104","endLine":141,"endColumn":69},{"ruleId":"1112","severity":1,"message":"1113","line":161,"column":25,"nodeType":"1104","endLine":168,"endColumn":27},{"ruleId":"1087","severity":1,"message":"1182","line":16,"column":10,"nodeType":"1089","messageId":"1090","endLine":16,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1380","line":33,"column":10,"nodeType":"1089","messageId":"1090","endLine":33,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1381","line":51,"column":10,"nodeType":"1089","messageId":"1090","endLine":51,"endColumn":18},{"ruleId":"1087","severity":1,"message":"1382","line":51,"column":20,"nodeType":"1089","messageId":"1090","endLine":51,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1261","line":62,"column":20,"nodeType":"1089","messageId":"1090","endLine":62,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1383","line":65,"column":10,"nodeType":"1089","messageId":"1090","endLine":65,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1384","line":65,"column":18,"nodeType":"1089","messageId":"1090","endLine":65,"endColumn":27},{"ruleId":"1112","severity":1,"message":"1113","line":138,"column":11,"nodeType":"1104","endLine":145,"endColumn":13},{"ruleId":"1112","severity":1,"message":"1113","line":150,"column":13,"nodeType":"1104","endLine":150,"endColumn":33},{"ruleId":"1112","severity":1,"message":"1113","line":196,"column":18,"nodeType":"1104","endLine":196,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":198,"column":18,"nodeType":"1104","endLine":198,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":200,"column":18,"nodeType":"1104","endLine":200,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":202,"column":18,"nodeType":"1104","endLine":202,"endColumn":47},{"ruleId":"1112","severity":1,"message":"1113","line":226,"column":11,"nodeType":"1104","endLine":233,"endColumn":13},{"ruleId":"1112","severity":1,"message":"1113","line":238,"column":13,"nodeType":"1104","endLine":238,"endColumn":63},{"ruleId":"1168","severity":1,"message":"1385","line":369,"column":6,"nodeType":"1170","endLine":369,"endColumn":15,"suggestions":"1386"},{"ruleId":"1168","severity":1,"message":"1370","line":378,"column":6,"nodeType":"1170","endLine":378,"endColumn":8,"suggestions":"1387"},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":27,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1182","line":7,"column":10,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1139","line":7,"column":20,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":24},{"ruleId":"1087","severity":1,"message":"1205","line":7,"column":26,"nodeType":"1089","messageId":"1090","endLine":7,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1388","line":10,"column":8,"nodeType":"1089","messageId":"1090","endLine":10,"endColumn":20},{"ruleId":"1087","severity":1,"message":"1149","line":13,"column":7,"nodeType":"1089","messageId":"1090","endLine":13,"endColumn":14},{"ruleId":"1102","severity":1,"message":"1103","line":132,"column":9,"nodeType":"1104","endLine":147,"endColumn":10},{"ruleId":"1115","severity":1,"message":"1116","line":161,"column":5,"nodeType":"1117","messageId":"1118","endLine":180,"endColumn":6},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1241","line":1,"column":28,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1230","line":11,"column":8,"nodeType":"1089","messageId":"1090","endLine":11,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1348","line":12,"column":8,"nodeType":"1089","messageId":"1090","endLine":12,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1389","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1390","line":2,"column":26,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1164","line":2,"column":33,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":38},{"ruleId":"1087","severity":1,"message":"1230","line":17,"column":8,"nodeType":"1089","messageId":"1090","endLine":17,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1348","line":18,"column":8,"nodeType":"1089","messageId":"1090","endLine":18,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1389","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1390","line":2,"column":26,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":31},{"ruleId":"1087","severity":1,"message":"1230","line":17,"column":8,"nodeType":"1089","messageId":"1090","endLine":17,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1389","line":2,"column":10,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":16},{"ruleId":"1087","severity":1,"message":"1230","line":13,"column":8,"nodeType":"1089","messageId":"1090","endLine":13,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1348","line":14,"column":8,"nodeType":"1089","messageId":"1090","endLine":14,"endColumn":9},{"ruleId":"1168","severity":1,"message":"1391","line":39,"column":6,"nodeType":"1170","endLine":39,"endColumn":8,"suggestions":"1392"},{"ruleId":"1087","severity":1,"message":"1348","line":4,"column":8,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1180","line":6,"column":10,"nodeType":"1089","messageId":"1090","endLine":6,"endColumn":19},{"ruleId":"1087","severity":1,"message":"1238","line":1,"column":38,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":44},{"ruleId":"1087","severity":1,"message":"1390","line":2,"column":18,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":23},{"ruleId":"1087","severity":1,"message":"1323","line":2,"column":25,"nodeType":"1089","messageId":"1090","endLine":2,"endColumn":29},{"ruleId":"1087","severity":1,"message":"1348","line":17,"column":8,"nodeType":"1089","messageId":"1090","endLine":17,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1149","line":22,"column":7,"nodeType":"1089","messageId":"1090","endLine":22,"endColumn":14},{"ruleId":"1393","severity":1,"message":"1394","line":44,"column":17,"nodeType":"1271","messageId":"1395","endLine":44,"endColumn":70},{"ruleId":"1168","severity":1,"message":"1396","line":64,"column":6,"nodeType":"1170","endLine":64,"endColumn":8,"suggestions":"1397"},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1229","line":9,"column":25,"nodeType":"1089","messageId":"1090","endLine":9,"endColumn":28},{"ruleId":"1087","severity":1,"message":"1105","line":3,"column":3,"nodeType":"1089","messageId":"1090","endLine":3,"endColumn":7},{"ruleId":"1087","severity":1,"message":"1206","line":4,"column":3,"nodeType":"1089","messageId":"1090","endLine":4,"endColumn":10},{"ruleId":"1087","severity":1,"message":"1207","line":5,"column":3,"nodeType":"1089","messageId":"1090","endLine":5,"endColumn":9},{"ruleId":"1087","severity":1,"message":"1134","line":6,"column":3,"nodeType":"1089","messageId":"1090","endLine":6,"endColumn":8},{"ruleId":"1102","severity":1,"message":"1398","line":67,"column":11,"nodeType":"1104","endLine":72,"endColumn":12},{"ruleId":"1266","severity":1,"message":"1267","line":135,"column":24,"nodeType":"1155","messageId":"1268","endLine":135,"endColumn":26},{"ruleId":"1122","severity":1,"message":"1123","line":157,"column":31,"nodeType":"1124","messageId":"1125","endLine":157,"endColumn":33},{"ruleId":"1266","severity":1,"message":"1367","line":165,"column":29,"nodeType":"1155","messageId":"1268","endLine":165,"endColumn":31},{"ruleId":"1168","severity":1,"message":"1399","line":185,"column":6,"nodeType":"1170","endLine":185,"endColumn":18,"suggestions":"1400"},{"ruleId":"1168","severity":1,"message":"1330","line":85,"column":6,"nodeType":"1170","endLine":85,"endColumn":8,"suggestions":"1401"},{"ruleId":"1087","severity":1,"message":"1180","line":1,"column":17,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":26},{"ruleId":"1087","severity":1,"message":"1241","line":1,"column":28,"nodeType":"1089","messageId":"1090","endLine":1,"endColumn":36},{"ruleId":"1087","severity":1,"message":"1402","line":41,"column":5,"nodeType":"1089","messageId":"1090","endLine":41,"endColumn":14},{"ruleId":"1087","severity":1,"message":"1403","line":44,"column":5,"nodeType":"1089","messageId":"1090","endLine":44,"endColumn":15},"no-unused-vars","'ConfigProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1404"],"no-negated-in-lhs",["1405"],"'BrowserRouter' is defined but never used.","'message' is defined but never used.","'addLogin' is defined but never used.","'MyIcon' is assigned a value but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Menu' is defined but never used.","'Spin' is defined but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'speciesId' is assigned a value but never used.","'petSpecies' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'breedName' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'petSpeciesBreedId' is assigned a value but never used.","'isMix' is assigned a value but never used.","'Option' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'imgurl' is assigned a value but never used.","'patientId' is assigned a value but never used.","'age' is assigned a value but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'disabled' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'Modal' is defined but never used.","'bounds' is assigned a value but never used.","'_resend' is assigned a value but never used.","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'MTop' is defined but never used.","'windowsHeight' is assigned a value but never used.","'petId' is assigned a value but never used.","'selectDeviceName' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'getOta' is defined but never used.","'storage' is assigned a value but never used.","'mar' is assigned a value but never used.","'history' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'setImageUrl' is assigned a value but never used.","'getBase64' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Select' is defined but never used.","'createFromIconfontCN' is defined but never used.","'selectPetInfoByUserId' is defined but never used.","'url' is assigned a value but never used.","'userImage' is assigned a value but never used.","'imageId' is assigned a value but never used.","'images' is assigned a value but never used.","'Radio' is defined but never used.","'petUrl' is assigned a value but never used.","'country' is assigned a value but never used.","'infoData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.","ArrayExpression",["1406"],"'num07' is assigned a value but never used.","'rMin_red' is defined but never used.","'rClose_red' is defined but never used.","'rMin_white' is defined but never used.","'rClose_white' is defined but never used.","'checkUser' is defined but never used.","'deskRegistAWSSNS' is defined but never used.","'options' is assigned a value but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'mTop' is defined but never used.","'isMeasure' is assigned a value but never used.","'is15' is assigned a value but never used.","'self_tarting' is assigned a value but never used.","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'mac' is assigned a value but never used.","'hardwareVersion' is assigned a value but never used.","'softwareVersion' is assigned a value but never used.","'wifiFlag' is assigned a value but never used.","'control' is assigned a value but never used.","'weight' is assigned a value but never used.","'weightUnits' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","'devWidth' is assigned a value but never used.","'size' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'windowssize' is assigned a value but never used.","'timer' is assigned a value but never used.","'px' is defined but never used.","'pX' is defined but never used.","'Popover' is defined but never used.","'Button' is defined but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","'headerRef' is assigned a value but never used.","'bluData' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["1407"],"React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1408"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'biggieHome' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1409"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1410"],"React Hook useEffect has missing dependencies: 'hardwareInfo' and 'selectHardwareInfoFun'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1411"],"React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1412"],"'get' is defined but never used.","'del' is defined but never used.","'moment' is defined but never used.","'connectionKey' is assigned a value but never used.","'selectRoleId' is assigned a value but never used.","'workplaceName' is assigned a value but never used.","'workplaceId' is assigned a value but never used.","'deviceType' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1413"],"'useRef' is defined but never used.","'Content' is assigned a value but never used.","'Header' is assigned a value but never used.","'useState' is defined but never used.","'vibible' is assigned a value but never used.","'setVibible' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'usbDetect'. Either include it or remove the dependency array.",["1414"],"React Hook useEffect has a missing dependency: 'readQSMConnectionStatus'. Either include it or remove the dependency array.",["1415"],"'devicesTitleHeight' is defined but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1416"],"'UnassignModal' is defined but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'assignVisible' is assigned a value but never used.","'setAssignVisible' is assigned a value but never used.","'lastWorkplaceId' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1417"],"'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1418","1419"],"Unnecessary escape character: \\-.",["1420","1421"],["1422","1423"],["1424","1425"],["1426","1427"],["1428","1429"],["1430","1431"],["1432","1433"],["1434","1435"],["1436","1437"],["1438","1439"],["1440","1441"],["1442","1443"],["1444","1445"],"no-dupe-keys","Duplicate key 'align'.","ObjectExpression","'hisHe' is assigned a value but never used.",["1446","1447"],["1448","1449"],["1450","1451"],["1452","1453"],"React Hook useEffect has a missing dependency: '_getEmergencyHistory'. Either include it or remove the dependency array.",["1454"],"React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",["1455"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1456"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1457"],"React Hook useEffect has a missing dependency: 'units'. Either include it or remove the dependency array.",["1458"],["1459"],"React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1460"],"React Hook useEffect has a missing dependency: 'setBiggieConnectStatusFun'. Either include it or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1461"],"React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1462"],"'postJson' is defined but never used.","'patch' is defined but never used.","'Table' is defined but never used.","'Popconfirm' is defined but never used.","'loading' is assigned a value but never used.","'_del' is assigned a value but never used.","'tableData' is assigned a value but never used.","'historyData' is assigned a value but never used.","'Image' is defined but never used.","'Space' is defined but never used.","'Card' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1463"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1464"],"React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",["1465"],"React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",["1466"],"React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",["1467"],["1468"],"'CtoF' is defined but never used.","'FtoC' is defined but never used.","'KgtoLb' is defined but never used.","'LbtoKg' is defined but never used.","'GToMl' is defined but never used.","'MltoG' is defined but never used.","'GToOz' is defined but never used.","'OztoG' is defined but never used.","'CmtoIn' is defined but never used.","'IntoCm' is defined but never used.","'PressButton_Pro' is defined but never used.","'_' is defined but never used.","'HistoryTable' is defined but never used.","'mellaConnectStatus' is assigned a value but never used.","'saveNum' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'rulerConnectStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1469"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1470"],"React Hook useEffect has missing dependencies: 'petLengthDataConvert' and 'petMessage'. Either include them or remove the dependency array.",["1471"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'forelimbCircumferenceValue', 'forelimbLengthValue', 'headValue', 'hindlimbValue', 'inputIndex', 'lowerValue', 'neckValue', 'radioValue', 'receiveBroadcastHardwareInfo.deviceType', 'receiveBroadcastHardwareInfo.macId', 'rulerUnit', 'selectHardwareInfo', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1472"],["1473"],"React Hook useEffect has a missing dependency: 'petId'. Either include it or remove the dependency array.",["1474"],"'Tag' is defined but never used.","'memo' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["1475"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1476"],"'Carousel' is defined but never used.","'PlusOutlined' is defined but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1477"],"React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1478"],"'useThrottleFn' is defined but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","'isMore' is assigned a value but never used.","'setIsMore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1479"],["1480"],"'SelectionBox' is defined but never used.","'Layout' is defined but never used.","'Input' is defined but never used.","React Hook useEffect has a missing dependency: 'isNext'. Either include it or remove the dependency array.",["1481"],"no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'initSelectVale' and 'listArr'. Either include them or remove the dependency array. If 'setSelectValue' needs the current value of 'listArr', you can also switch to useReducer instead of useState and read 'listArr' in the reducer.",["1482"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1483"],["1484"],"'neckValue' is assigned a value but never used.","'torsoValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1485","fix":"1486"},{"desc":"1487","fix":"1488"},{"desc":"1489","fix":"1490"},{"desc":"1491","fix":"1492"},{"desc":"1493","fix":"1494"},{"desc":"1495","fix":"1496"},{"desc":"1497","fix":"1498"},{"desc":"1499","fix":"1500"},{"desc":"1501","fix":"1502"},{"desc":"1503","fix":"1504"},{"desc":"1505","fix":"1506"},{"desc":"1489","fix":"1507"},{"messageId":"1508","fix":"1509","desc":"1510"},{"messageId":"1511","fix":"1512","desc":"1513"},{"messageId":"1508","fix":"1514","desc":"1510"},{"messageId":"1511","fix":"1515","desc":"1513"},{"messageId":"1508","fix":"1516","desc":"1510"},{"messageId":"1511","fix":"1517","desc":"1513"},{"messageId":"1508","fix":"1518","desc":"1510"},{"messageId":"1511","fix":"1519","desc":"1513"},{"messageId":"1508","fix":"1520","desc":"1510"},{"messageId":"1511","fix":"1521","desc":"1513"},{"messageId":"1508","fix":"1522","desc":"1510"},{"messageId":"1511","fix":"1523","desc":"1513"},{"messageId":"1508","fix":"1524","desc":"1510"},{"messageId":"1511","fix":"1525","desc":"1513"},{"messageId":"1508","fix":"1526","desc":"1510"},{"messageId":"1511","fix":"1527","desc":"1513"},{"messageId":"1508","fix":"1528","desc":"1510"},{"messageId":"1511","fix":"1529","desc":"1513"},{"messageId":"1508","fix":"1530","desc":"1510"},{"messageId":"1511","fix":"1531","desc":"1513"},{"messageId":"1508","fix":"1532","desc":"1510"},{"messageId":"1511","fix":"1533","desc":"1513"},{"messageId":"1508","fix":"1534","desc":"1510"},{"messageId":"1511","fix":"1535","desc":"1513"},{"messageId":"1508","fix":"1536","desc":"1510"},{"messageId":"1511","fix":"1537","desc":"1513"},{"messageId":"1508","fix":"1538","desc":"1510"},{"messageId":"1511","fix":"1539","desc":"1513"},{"messageId":"1508","fix":"1540","desc":"1510"},{"messageId":"1511","fix":"1541","desc":"1513"},{"messageId":"1508","fix":"1542","desc":"1510"},{"messageId":"1511","fix":"1543","desc":"1513"},{"messageId":"1508","fix":"1544","desc":"1510"},{"messageId":"1511","fix":"1545","desc":"1513"},{"messageId":"1508","fix":"1546","desc":"1510"},{"messageId":"1511","fix":"1547","desc":"1513"},{"desc":"1548","fix":"1549"},{"desc":"1550","fix":"1551"},{"desc":"1552","fix":"1553"},{"desc":"1554","fix":"1555"},{"desc":"1556","fix":"1557"},{"desc":"1499","fix":"1558"},{"desc":"1559","fix":"1560"},{"desc":"1561","fix":"1562"},{"desc":"1563","fix":"1564"},{"desc":"1565","fix":"1566"},{"desc":"1567","fix":"1568"},{"desc":"1569","fix":"1570"},{"desc":"1571","fix":"1572"},{"desc":"1573","fix":"1574"},{"desc":"1569","fix":"1575"},{"desc":"1576","fix":"1577"},{"desc":"1578","fix":"1579"},{"desc":"1580","fix":"1581"},{"desc":"1582","fix":"1583"},{"desc":"1584","fix":"1585"},{"desc":"1586","fix":"1587"},{"desc":"1588","fix":"1589"},{"desc":"1590","fix":"1591"},{"desc":"1592","fix":"1593"},{"desc":"1594","fix":"1595"},{"desc":"1596","fix":"1597"},{"desc":"1590","fix":"1598"},{"desc":"1599","fix":"1600"},{"desc":"1601","fix":"1602"},{"desc":"1603","fix":"1604"},{"desc":"1569","fix":"1605"},"Update the dependencies array to be: [form, storage.userId]",{"range":"1606","text":"1607"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1608","text":"1609"},"Update the dependencies array to be: []",{"range":"1610","text":"1611"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1612","text":"1613"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1614","text":"1615"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",{"range":"1616","text":"1617"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"1618","text":"1619"},"Update the dependencies array to be: [_getExam]",{"range":"1620","text":"1621"},"Update the dependencies array to be: [usbDetect]",{"range":"1622","text":"1623"},"Update the dependencies array to be: [readQSMConnectionStatus]",{"range":"1624","text":"1625"},"Update the dependencies array to be: [hardwareList]",{"range":"1626","text":"1627"},{"range":"1628","text":"1611"},"removeEscape",{"range":"1629","text":"1630"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1631","text":"1632"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1633","text":"1630"},{"range":"1634","text":"1632"},{"range":"1635","text":"1630"},{"range":"1636","text":"1632"},{"range":"1637","text":"1630"},{"range":"1638","text":"1632"},{"range":"1639","text":"1630"},{"range":"1640","text":"1632"},{"range":"1641","text":"1630"},{"range":"1642","text":"1632"},{"range":"1643","text":"1630"},{"range":"1644","text":"1632"},{"range":"1645","text":"1630"},{"range":"1646","text":"1632"},{"range":"1647","text":"1630"},{"range":"1648","text":"1632"},{"range":"1649","text":"1630"},{"range":"1650","text":"1632"},{"range":"1651","text":"1630"},{"range":"1652","text":"1632"},{"range":"1653","text":"1630"},{"range":"1654","text":"1632"},{"range":"1655","text":"1630"},{"range":"1656","text":"1632"},{"range":"1657","text":"1630"},{"range":"1658","text":"1632"},{"range":"1659","text":"1630"},{"range":"1660","text":"1632"},{"range":"1661","text":"1630"},{"range":"1662","text":"1632"},{"range":"1663","text":"1630"},{"range":"1664","text":"1632"},{"range":"1665","text":"1630"},{"range":"1666","text":"1632"},"Update the dependencies array to be: [_getEmergencyHistory, petDetailInfo]",{"range":"1667","text":"1668"},"Update the dependencies array to be: [mellaMeasureNum]",{"range":"1669","text":"1670"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1671","text":"1672"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1673","text":"1674"},"Update the dependencies array to be: [biggieBodyWeight, units]",{"range":"1675","text":"1676"},{"range":"1677","text":"1621"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1678","text":"1679"},"Update the dependencies array to be: [petDetailInfo, setBiggieConnectStatusFun]",{"range":"1680","text":"1681"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"1682","text":"1683"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1684","text":"1685"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1686","text":"1687"},"Update the dependencies array to be: [destroyOnClose, width]",{"range":"1688","text":"1689"},"Update the dependencies array to be: [getAllPet]",{"range":"1690","text":"1691"},"Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",{"range":"1692","text":"1693"},{"range":"1694","text":"1689"},"Update the dependencies array to be: [finishScan, inputIndex, newData]",{"range":"1695","text":"1696"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1697","text":"1698"},"Update the dependencies array to be: [petId, petLengthDataConvert, petMessage]",{"range":"1699","text":"1700"},"Update the dependencies array to be: [bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",{"range":"1701","text":"1702"},"Update the dependencies array to be: [petId, weight]",{"range":"1703","text":"1704"},"Update the dependencies array to be: [petId]",{"range":"1705","text":"1706"},"Update the dependencies array to be: [getPetTemperatureData, petId]",{"range":"1707","text":"1708"},"Update the dependencies array to be: [storage.userId]",{"range":"1709","text":"1710"},"Add dependencies array: [callBack, timers]",{"range":"1711","text":"1712"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1713","text":"1714"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1715","text":"1716"},{"range":"1717","text":"1710"},"Update the dependencies array to be: [isNext]",{"range":"1718","text":"1719"},"Update the dependencies array to be: [initSelectVale, listArr]",{"range":"1720","text":"1721"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1722","text":"1723"},{"range":"1724","text":"1689"},[2508,2510],"[form, storage.userId]",[42577,42579],"[_noUSB, _send, blueSearch]",[42651,42677],"[]",[9394,9396],"[setReceiveBroadcastHardwareInfoFun]",[10498,10528],"[devicesList, receiveBroadcastHardwareInfo]",[1775,1810],"[selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",[5272,5289],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[9819,9821],"[_getExam]",[3643,3645],"[usbDetect]",[3746,3748],"[readQSMConnectionStatus]",[3213,3215],"[hardwareList]",[5063,5089],[21631,21632],"",[21631,21631],"\\",[21832,21833],[21832,21832],[22415,22416],[22415,22415],[22616,22617],[22616,22616],[23296,23297],[23296,23296],[23497,23498],[23497,23497],[24639,24640],[24639,24639],[24840,24841],[24840,24840],[25447,25448],[25447,25447],[25648,25649],[25648,25648],[26314,26315],[26314,26314],[26515,26516],[26515,26515],[27086,27087],[27086,27086],[27192,27193],[27192,27192],[42358,42359],[42358,42358],[42559,42560],[42559,42559],[43089,43090],[43089,43089],[43290,43291],[43290,43290],[50366,50381],"[_getEmergencyHistory, petDetailInfo]",[50798,50800],"[mellaMeasureNum]",[52041,52058],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[52599,52619],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[54483,54501],"[biggieBodyWeight, units]",[4098,4100],[7171,7187],"[hardwareReduce, weight]",[7375,7390],"[petDetailInfo, setBiggieConnectStatusFun]",[7403,7423],"[hardwareList, selectHardwareInfo, selectHardwareType]",[8576,8583],"[callBack, prediction, timeNum, value]",[9205,9225],"[mellaConnectStatus, value]",[3705,3707],"[destroyOnClose, width]",[4201,4203],"[getAllPet]",[4334,4347],"[searchPetByPetNameOrPatientId, searchValue]",[4542,4544],[17830,17842],"[finishScan, inputIndex, newData]",[18494,18513],"[inputIndex, rulerConfirmCount]",[19427,19434],"[petId, petLengthDataConvert, petMessage]",[21426,21464],"[bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",[21586,21593],"[petId, weight]",[21688,21690],"[petId]",[13586,13593],"[getPetTemperatureData, petId]",[13782,13784],"[storage.userId]",[2257,2257],", [callBack, timers]",[2356,2371],"[callBack, carouselIndex]",[10056,10065],"[getPetTemperatureData, reRender, saveNum]",[10286,10288],[832,834],"[isNext]",[1734,1736],"[initSelectVale, listArr]",[5018,5030],"[letterListCopy, phoneListCopy, searchText]",[2163,2165]]