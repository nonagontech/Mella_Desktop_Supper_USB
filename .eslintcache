[{"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js":"1","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js":"2","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js":"3","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx":"4","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx":"5","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx":"6","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx":"7","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx":"8","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx":"9","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx":"10","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx":"11","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx":"12","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx":"13","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx":"14","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx":"15","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx":"16","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx":"17","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx":"18","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx":"19","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx":"20","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx":"21","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx":"22","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx":"23","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx":"24","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx":"25","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx":"26","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js":"27","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx":"28","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx":"29","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx":"30","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx":"31","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js":"32","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js":"33","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js":"34","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js":"35","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js":"36","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js":"37","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js":"38","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js":"39","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx":"40","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx":"41","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js":"42","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js":"43","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js":"44","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js":"45","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js":"46","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js":"47","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js":"48","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js":"49","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js":"50","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx":"51","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx":"52","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx":"53","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js":"54","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx":"55","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js":"56","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js":"57","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js":"58","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx":"59","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js":"60","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js":"61","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js":"62","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js":"63","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js":"64","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx":"65","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx":"66","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx":"67","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"68","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx":"69","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx":"70","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx":"71","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx":"72","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx":"73","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx":"74","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx":"75","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx":"76","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js":"77","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js":"78","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js":"79","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js":"80","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js":"81","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx":"82","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js":"83","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx":"84","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js":"85","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js":"86","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js":"87","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx":"88","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js":"89","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js":"90","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js":"91","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js":"92","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js":"93","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx":"94","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx":"95","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"96","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx":"97","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx":"98","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx":"99","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js":"100","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js":"101","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js":"102","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js":"103","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js":"104","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js":"105","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js":"106","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js":"107","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js":"108","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js":"109","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js":"110","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js":"111","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx":"112","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx":"113","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx":"114","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx":"115","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js":"116","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js":"117","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js":"118","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js":"119","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js":"120","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js":"121","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js":"122","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js":"123","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js":"124","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx":"125","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"126","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx":"127","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx":"128","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx":"129","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx":"130","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx":"131","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx":"132","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx":"133","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx":"134","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx":"135","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx":"136","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx":"137","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx":"138","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js":"139","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js":"140","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js":"141","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\baseNotDetectedModal\\index.jsx":"142"},{"size":349,"mtime":1661943267097,"results":"143","hashOfConfig":"144"},{"size":4499,"mtime":1671417810660,"results":"145","hashOfConfig":"144"},{"size":577,"mtime":1657680900931,"results":"146","hashOfConfig":"144"},{"size":3909,"mtime":1671081633626,"results":"147","hashOfConfig":"144"},{"size":28721,"mtime":1671176891249,"results":"148","hashOfConfig":"144"},{"size":18041,"mtime":1671584505494,"results":"149","hashOfConfig":"144"},{"size":12263,"mtime":1661509757375,"results":"150","hashOfConfig":"144"},{"size":7530,"mtime":1661509757418,"results":"151","hashOfConfig":"144"},{"size":5219,"mtime":1661509757421,"results":"152","hashOfConfig":"144"},{"size":15135,"mtime":1670519612613,"results":"153","hashOfConfig":"144"},{"size":4323,"mtime":1670476781045,"results":"154","hashOfConfig":"144"},{"size":17771,"mtime":1670508764019,"results":"155","hashOfConfig":"144"},{"size":11068,"mtime":1671417998871,"results":"156","hashOfConfig":"144"},{"size":16101,"mtime":1671193060760,"results":"157","hashOfConfig":"144"},{"size":19240,"mtime":1671178642586,"results":"158","hashOfConfig":"144"},{"size":10087,"mtime":1671178804418,"results":"159","hashOfConfig":"144"},{"size":16765,"mtime":1671021465470,"results":"160","hashOfConfig":"144"},{"size":9521,"mtime":1661509757378,"results":"161","hashOfConfig":"144"},{"size":10681,"mtime":1671095219621,"results":"162","hashOfConfig":"144"},{"size":36189,"mtime":1668680100322,"results":"163","hashOfConfig":"144"},{"size":10447,"mtime":1663049218292,"results":"164","hashOfConfig":"144"},{"size":12450,"mtime":1666664976348,"results":"165","hashOfConfig":"144"},{"size":15523,"mtime":1671091924519,"results":"166","hashOfConfig":"144"},{"size":9902,"mtime":1671091398234,"results":"167","hashOfConfig":"144"},{"size":15395,"mtime":1661509757340,"results":"168","hashOfConfig":"144"},{"size":3542,"mtime":1670478058337,"results":"169","hashOfConfig":"144"},{"size":152,"mtime":1668680100336,"results":"170","hashOfConfig":"144"},{"size":19906,"mtime":1671670186922,"results":"171","hashOfConfig":"144"},{"size":14247,"mtime":1670478185136,"results":"172","hashOfConfig":"144"},{"size":14104,"mtime":1671699482301,"results":"173","hashOfConfig":"144"},{"size":46264,"mtime":1671690330575,"results":"174","hashOfConfig":"144"},{"size":1275,"mtime":1655168677817,"results":"175","hashOfConfig":"144"},{"size":1153,"mtime":1668623363379,"results":"176","hashOfConfig":"144"},{"size":3628,"mtime":1671584243447,"results":"177","hashOfConfig":"144"},{"size":54749,"mtime":1671429355929,"results":"178","hashOfConfig":"144"},{"size":1011,"mtime":1661509757298,"results":"179","hashOfConfig":"144"},{"size":1077,"mtime":1661509757299,"results":"180","hashOfConfig":"144"},{"size":248,"mtime":1671635223797,"results":"181","hashOfConfig":"144"},{"size":360,"mtime":1668680100338,"results":"182","hashOfConfig":"144"},{"size":1565,"mtime":1668623363384,"results":"183","hashOfConfig":"144"},{"size":2807,"mtime":1671093968382,"results":"184","hashOfConfig":"144"},{"size":3856,"mtime":1656498255377,"results":"185","hashOfConfig":"144"},{"size":396,"mtime":1670523667714,"results":"186","hashOfConfig":"144"},{"size":1451,"mtime":1655168677805,"results":"187","hashOfConfig":"144"},{"size":115,"mtime":1667901350091,"results":"188","hashOfConfig":"144"},{"size":951,"mtime":1661849271242,"results":"189","hashOfConfig":"144"},{"size":792,"mtime":1669460972724,"results":"190","hashOfConfig":"144"},{"size":9528,"mtime":1668623363376,"results":"191","hashOfConfig":"144"},{"size":2328,"mtime":1669615972111,"results":"192","hashOfConfig":"144"},{"size":539,"mtime":1670523734619,"results":"193","hashOfConfig":"144"},{"size":11604,"mtime":1665209511004,"results":"194","hashOfConfig":"144"},{"size":3308,"mtime":1671674230506,"results":"195","hashOfConfig":"144"},{"size":6984,"mtime":1669184380038,"results":"196","hashOfConfig":"144"},{"size":1092,"mtime":1669460972756,"results":"197","hashOfConfig":"144"},{"size":3692,"mtime":1666664900732,"results":"198","hashOfConfig":"144"},{"size":465,"mtime":1657709941429,"results":"199","hashOfConfig":"144"},{"size":697,"mtime":1655467295909,"results":"200","hashOfConfig":"144"},{"size":4661,"mtime":1666773134630,"results":"201","hashOfConfig":"144"},{"size":1410,"mtime":1655168677807,"results":"202","hashOfConfig":"144"},{"size":1150,"mtime":1655427981745,"results":"203","hashOfConfig":"144"},{"size":899,"mtime":1661509757306,"results":"204","hashOfConfig":"144"},{"size":1041,"mtime":1655168677775,"results":"205","hashOfConfig":"144"},{"size":17788,"mtime":1659945946500,"results":"206","hashOfConfig":"144"},{"size":11452,"mtime":1655168677771,"results":"207","hashOfConfig":"144"},{"size":1745,"mtime":1671082970159,"results":"208","hashOfConfig":"144"},{"size":8495,"mtime":1666665069514,"results":"209","hashOfConfig":"144"},{"size":1635,"mtime":1671082870395,"results":"210","hashOfConfig":"144"},{"size":2428,"mtime":1671160161306,"results":"211","hashOfConfig":"144"},{"size":6241,"mtime":1671083039476,"results":"212","hashOfConfig":"144"},{"size":8628,"mtime":1660703894009,"results":"213","hashOfConfig":"144"},{"size":12189,"mtime":1671417798446,"results":"214","hashOfConfig":"144"},{"size":13581,"mtime":1671671276347,"results":"215","hashOfConfig":"144"},{"size":11907,"mtime":1671415964353,"results":"216","hashOfConfig":"144"},{"size":61983,"mtime":1671435380076,"results":"217","hashOfConfig":"144"},{"size":2048,"mtime":1667801045516,"results":"218","hashOfConfig":"144"},{"size":9802,"mtime":1671184904080,"results":"219","hashOfConfig":"144"},{"size":818,"mtime":1669460972754,"results":"220","hashOfConfig":"144"},{"size":372,"mtime":1657709885011,"results":"221","hashOfConfig":"144"},{"size":532,"mtime":1655467295881,"results":"222","hashOfConfig":"144"},{"size":146,"mtime":1668680100333,"results":"223","hashOfConfig":"144"},{"size":2103,"mtime":1656498255375,"results":"224","hashOfConfig":"144"},{"size":7962,"mtime":1667901350097,"results":"225","hashOfConfig":"144"},{"size":322,"mtime":1669184380014,"results":"226","hashOfConfig":"144"},{"size":5765,"mtime":1661509757472,"results":"227","hashOfConfig":"144"},{"size":76,"mtime":1661509757291,"results":"228","hashOfConfig":"144"},{"size":514,"mtime":1667901350087,"results":"229","hashOfConfig":"144"},{"size":99,"mtime":1661509757285,"results":"230","hashOfConfig":"144"},{"size":3427,"mtime":1669184380030,"results":"231","hashOfConfig":"144"},{"size":1023,"mtime":1666596984105,"results":"232","hashOfConfig":"144"},{"size":71,"mtime":1670523569851,"results":"233","hashOfConfig":"144"},{"size":336,"mtime":1669460972752,"results":"234","hashOfConfig":"144"},{"size":88,"mtime":1657709847680,"results":"235","hashOfConfig":"144"},{"size":224,"mtime":1655467295875,"results":"236","hashOfConfig":"144"},{"size":3907,"mtime":1662111155827,"results":"237","hashOfConfig":"144"},{"size":2115,"mtime":1671020970507,"results":"238","hashOfConfig":"144"},{"size":26512,"mtime":1671689733371,"results":"239","hashOfConfig":"144"},{"size":10002,"mtime":1671678301363,"results":"240","hashOfConfig":"144"},{"size":1367,"mtime":1671083005824,"results":"241","hashOfConfig":"144"},{"size":44957,"mtime":1667805178264,"results":"242","hashOfConfig":"144"},{"size":2855,"mtime":1662620045686,"results":"243","hashOfConfig":"144"},{"size":597,"mtime":1669184380016,"results":"244","hashOfConfig":"144"},{"size":866,"mtime":1661509757289,"results":"245","hashOfConfig":"144"},{"size":2237,"mtime":1667901350089,"results":"246","hashOfConfig":"144"},{"size":664,"mtime":1661509757283,"results":"247","hashOfConfig":"144"},{"size":574,"mtime":1661509757287,"results":"248","hashOfConfig":"144"},{"size":574,"mtime":1661509757286,"results":"249","hashOfConfig":"144"},{"size":664,"mtime":1661509757282,"results":"250","hashOfConfig":"144"},{"size":1323,"mtime":1661509757292,"results":"251","hashOfConfig":"144"},{"size":944,"mtime":1661509757290,"results":"252","hashOfConfig":"144"},{"size":1447,"mtime":1671696759553,"results":"253","hashOfConfig":"144"},{"size":1353,"mtime":1669184380029,"results":"254","hashOfConfig":"144"},{"size":12474,"mtime":1666664891735,"results":"255","hashOfConfig":"144"},{"size":8417,"mtime":1666664842042,"results":"256","hashOfConfig":"144"},{"size":7925,"mtime":1671185827233,"results":"257","hashOfConfig":"144"},{"size":1223,"mtime":1666935452033,"results":"258","hashOfConfig":"144"},{"size":3044,"mtime":1655168677819,"results":"259","hashOfConfig":"144"},{"size":706,"mtime":1661849271238,"results":"260","hashOfConfig":"144"},{"size":885,"mtime":1663040187632,"results":"261","hashOfConfig":"144"},{"size":583,"mtime":1661509757304,"results":"262","hashOfConfig":"144"},{"size":611,"mtime":1661509757305,"results":"263","hashOfConfig":"144"},{"size":738,"mtime":1667180552622,"results":"264","hashOfConfig":"144"},{"size":4312,"mtime":1668623363356,"results":"265","hashOfConfig":"144"},{"size":4553,"mtime":1667901350100,"results":"266","hashOfConfig":"144"},{"size":71,"mtime":1657699049494,"results":"267","hashOfConfig":"144"},{"size":30738,"mtime":1666664961937,"results":"268","hashOfConfig":"144"},{"size":3693,"mtime":1671154997561,"results":"269","hashOfConfig":"144"},{"size":20887,"mtime":1671431974179,"results":"270","hashOfConfig":"144"},{"size":7520,"mtime":1671689491983,"results":"271","hashOfConfig":"144"},{"size":14061,"mtime":1671601032039,"results":"272","hashOfConfig":"144"},{"size":6885,"mtime":1669795915594,"results":"273","hashOfConfig":"144"},{"size":2266,"mtime":1669460972745,"results":"274","hashOfConfig":"144"},{"size":3032,"mtime":1669460972743,"results":"275","hashOfConfig":"144"},{"size":4595,"mtime":1668623363369,"results":"276","hashOfConfig":"144"},{"size":4418,"mtime":1669632776044,"results":"277","hashOfConfig":"144"},{"size":4219,"mtime":1667370458174,"results":"278","hashOfConfig":"144"},{"size":4076,"mtime":1669796393335,"results":"279","hashOfConfig":"144"},{"size":15314,"mtime":1671176500789,"results":"280","hashOfConfig":"144"},{"size":8354,"mtime":1661509757395,"results":"281","hashOfConfig":"144"},{"size":4251,"mtime":1663035379306,"results":"282","hashOfConfig":"144"},{"size":431,"mtime":1655168677773,"results":"283","hashOfConfig":"144"},{"size":846,"mtime":1655168677772,"results":"284","hashOfConfig":"144"},{"size":843,"mtime":1671074170954,"results":"285","hashOfConfig":"144"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"289"},"1n0gb2o",{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"289"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"289"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"289"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"289"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"289"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"289"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"289"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"289"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"289"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"289"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"289"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"289"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"289"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"289"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"289"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"289"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"289"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"289"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"289"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"289"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"289"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"289"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"289"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"289"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"289"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"289"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"289"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"289"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"289"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"289"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"289"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"289"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"289"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"289"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"289"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"289"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"289"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"289"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"289"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"289"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"289"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"289"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"289"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"289"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"289"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478","usedDeprecatedRules":"289"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"289"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"289"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"289"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"289"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"289"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"289"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"289"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"289"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"289"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"289"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"289"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"289"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"289"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"289"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"289"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"289"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"289"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"289"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"289"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"289"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"289"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"289"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"289"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"289"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"289"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"289"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"289"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"289"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"289"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"289"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"289"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"289"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"289"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"289"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"289"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"289"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"289"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"289"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"289"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"289"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"289"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"289"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"289"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"289"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"289"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"289"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"289"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"665","messages":"666","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js",["667"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n",["668","669"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js",["670","671"],"import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\nimport Home from './pages/home/index'\n\nimport MaxMinReturn from './utils/maxminreturn/MaxMinReturn'\n\nimport EditPetInfo from './pages/editPetInfo/index'\nimport DoctorAddPet from './pages/doctorAddPet/index'\n//登录部分\nimport SignIn from './pages/signIn/index'\nimport ForgotPassword from './pages/forgotPassword/index'\nimport ResetPassword from './pages//resetPassword/index'\nimport ScanCodeLogin from './pages/scanCodeLogin/index'\n//邮箱注册的整体部分\nimport VetPrifile from './pages/signUpVetProfile'\nimport JoinOrganizationByOption from './pages/joinOrganizationByOption/index'\nimport VerifyEmail from './pages/signUpVerifyEmail/index'\nimport NewOrganization from './pages/newOrganization/index'\nimport InviteTeam from './pages/inviteTeam/index'\n//options\nimport Help from './pages/help/index'\nimport Unassigned from './pages/unassigned/index'\nimport Settings from './pages/settings/index'\nimport AdvancedSettings from './pages/advancedSettings/index'\nimport PetAndParents from './pages/petAndParents/index'\nimport EditParent from './pages/editParent/index'\nimport MyAccount from './pages/myAccount/index'\nimport Veterinarians from './pages/admin_VetProfile/index'\nimport AddDevice from './pages/addDevice/index'\nimport ConnectWorkplace from './pages/connectWorkplace'\nimport NewOrg from './pages/newOrg/index'\nimport Team from './pages/team/index'\nimport MainBody from './pages/mainbody'\nimport Subscriptions from './pages/subscriptions'\nimport addScheduledPet from './pages/addScheduledPet'\nimport { setSystemTypeFun } from './store/actions'\nimport { connect } from 'react-redux'\nclass App extends Component {\n\n  componentDidMount() {\n    this.getSystemType()\n  }\n  getSystemType = () => {\n    var agent = navigator.userAgent.toLowerCase();\n    console.log('agent', agent);\n    var isMac = /macintosh|mac os x/i.test(navigator.userAgent);\n    this.props.setSystemTypeFun(`${isMac ? \"mac\" : \"windows\"}`)\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          {/* <Route exact path=\"/\" component={addScheduledPet} /> */}\n\n          <Route exact path=\"/page7\" component={MaxMinReturn} />\n          <Route exact path=\"/page9\" component={EditPetInfo} />\n          <Route exact path=\"/MainBody\" component={MainBody} />\n          <Route exact path=\"/page11\" component={SignIn} />\n          <Route exact path=\"/user/login/forgotPassword\" component={ForgotPassword} />\n          <Route exact path=\"/user/login/resetPassword\" component={ResetPassword} />\n          <Route exact path=\"/user/login/scanCodeLogin\" component={ScanCodeLogin} />\n\n          <Route exact path=\"/uesr/logUp/VetPrifile\" component={VetPrifile} />\n          <Route exact path=\"/uesr/logUp/JoinOrganizationByOption\" component={JoinOrganizationByOption} />\n          <Route exact path=\"/uesr/logUp/VerifyEmail\" component={VerifyEmail} />\n          <Route exact path=\"/uesr/logUp/NewOrganization\" component={NewOrganization} />\n          {/* <Route exact path=\"/uesr/logUp/InviteTeam\" component={InviteTeam} /> */}\n\n\n          <Route exact path=\"/pet/doctorAddPet\" component={DoctorAddPet} />\n          <Route exact path=\"/menuOptions/InviteTeam\" component={InviteTeam} />\n          <Route exact path=\"/menuOptions/help\" component={Help} />\n          <Route exact path=\"/menuOptions/unassigned\" component={Unassigned} />\n          <Route exact path=\"/menuOptions/settings\" component={Settings} />\n          <Route exact path=\"/menuOptions/subscriptions\" component={Subscriptions} />\n          <Route exact path=\"/menuOptions/advancedsettings\" component={AdvancedSettings} />\n          <Route exact path=\"/menuOptions/petAndParents\" component={PetAndParents} />\n          <Route exact path=\"/menuOptions/editParent\" component={EditParent} />\n          <Route exact path=\"/MyAccount\" component={MyAccount} />\n          <Route exact path=\"/menuOptions/veterinarians\" component={Veterinarians} />\n          <Route exact path=\"/menuOptions/AddDevice\" component={AddDevice} />\n          <Route exact path=\"/menuOptions/ConnectWorkplace\" component={ConnectWorkplace} />\n          <Route exact path=\"/menuOptions/NewOrg\" component={NewOrg} />\n          <Route exact path=\"/menuOptions/Team\" component={Team} />\n\n\n\n        </Switch>\n      </HashRouter>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n\n  }),\n  { setSystemTypeFun }\n)(App)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx",["672"],"import React, { Component, } from 'react'\nimport {\n  Button,\n  message,\n  Radio,\n} from 'antd';\n\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px, mTop, win } from '../../utils/px'\nimport MinClose from '../../utils/minClose/MinClose';\nimport { version } from '../../utils/appversion';\nimport logo from '../../assets/images/mella.png'\nimport './index.less';\nimport { connect } from 'react-redux';\n\nlet storage = window.localStorage;\n//定义变量:连续点击了几次logo\nlet logoClick = 0;\n//定义变量:点击logo的时间\nlet logoTime = 0;\nlet ipcRenderer = window.electron.ipcRenderer\n\nclass Home extends Component {\n  state = {\n    imgurl: '',\n    size: { width: 0, height: 0 }\n  }\n  componentDidMount() {\n    ipcRenderer.send('close-loading-window', 1)\n    ipcRenderer.send('small', win())\n    storage.measurepatientId = '';\n    temporaryStorage.logupVetInfo = {}\n    console.log('----===----', this.props.systemType);\n  }\n\n\n\n  _signUP = () => {\n    console.log('1');\n    this.props.history.push('/uesr/logUp/VetPrifile')\n  }\n\n  _openUtils = () => {\n    console.log('点击来了', logoClick);\n    if (new Date() - logoTime > 500) {\n      logoClick = 0;\n      logoTime = new Date();\n\n    } else {\n      logoClick++;\n      logoTime = new Date();\n      if (logoClick >= 8) {\n        logoClick = 0;\n        ipcRenderer.send('openDevTools', true)\n      }\n    }\n  }\n  render() {\n\n    let daohang = this.props.systemType === 'mac' ? 'daohang mac' : 'daohang windows'\n\n    return (\n      <div id=\"home\">\n        <div className={daohang} style={{ paddingTop: px(10), paddingRight: px(20), }}>\n          <MinClose />\n        </div>\n        <div className='flex refresh' style={{ alignItems: 'flex-end', paddingRight: px(20) }}>\n          <div className='flex' style={{ flexDirection: 'row', paddingTop: px(20), paddingRight: px(18), color: '#700B33', cursor: 'pointer' }}>\n            V{version}\n          </div>\n        </div>\n        <div className=\"heard\" >\n          <div className=\"logo\"\n            onClick={this._openUtils}\n          >\n            <img src={logo} alt=\"\" />\n          </div>\n        </div>\n        <div className=\"button\" style={{ marginBottom: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/page11') }}\n            className=\"siginInBtn\"\n          >\n            Sign In\n          </Button>\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>New to Mella? <p onClick={this._signUP} style={{textDecoration: 'underline' }}>Sign Up</p></div>\n        <div className=\"create\" style={{ marginBottom: mTop(20), marginTop: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            // onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Quick Start\n          </Button>\n          {/* <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Create an Account\n          </Button> */}\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>\n          <p style={{ width: '350px', fontSize: '18px', color: '#ffc4db', textAlign: 'left' }}>\n          <Radio></Radio>I have read and agreed to the <p></p>\n           <span style={{ marginLeft: '22px', textDecoration: 'underline', color: '#fff' }}>Terms and Services</span> and <span style={{ color: '#fff', textDecoration: 'underline' }}>Privacy Policy</span>\n          </p>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(Home)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx",["673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688"],"import React, { Component } from 'react'\nimport { Input, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport nextImg from '../../assets/img/nextImg.png'\nimport selectphoto from '../../assets/images/sel.png'\nimport dui from '../../assets/images/dui.png'\nimport female from '../../assets/images/female.png'\nimport male from '../../assets/images/male.png'\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, win } from '../../utils/px';\nimport Heard from '../../utils/heard/Heard';\nimport Avatar from '../../components/avatar/Avatar';\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\n\nimport { connect } from 'react-redux';\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport moment from 'moment';\n\nimport './index.less';\nimport { addDeskPet, checkPatientId, getPetInfoByPatientIdAndPetId, selectBreedBySpeciesId } from '../../api';\n\nconst { Option } = Select;\nlet storage = window.localStorage;\nlet errPatientId = ''\nclass DoctorAddPet extends Component {\n  state = {\n    dogImg: dog,\n    catImg: cat,\n    otherImg: other,\n    selectWZ: '',\n    closebgc: '',\n    minbgc: '',\n    closeColor: '',\n    api: '',\n    id: '',\n    seleceID: '',//医生id\n    petSpecies: 0,\n    unit: 1,\n    gender: 0,\n    isMix: false,\n    imageId: -1,\n    imgurl: '',\n    catData: [],\n    petSpeciesBreedId: '',\n    dogData: [],\n    breedArr: [],\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\n    patientId: '',\n    petName: '',\n    petId: '',\n    lastName: '',\n    firstName: '',\n    breedName: '',\n    owner: '',\n    intFlog: false,\n    spin: false,\n    visible: false,\n    dogBreed: [],\n    catBreed: [],\n    searchBreed: '',\n    selectBreedJson: {},\n    confirmSelectBreedJson: {},\n    selectBreed: false,\n    isModalVisible: false,\n    confirmLoading: false,\n    selectBreedVisible: false,\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    let dogBreed = electronStore.get('dogBreed') || []\n    let catBreed = electronStore.get('catBreed') || []\n    this.setState({\n      dogBreed,\n      catBreed\n    })\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    this.setState({\n\n    })\n  }\n  getBreed = (val) => {\n    let data = {}\n    switch (val) {\n      case 'dog':\n        data.speciesId = 2; break;\n\n      case 'cat':\n        data.speciesId = 1; break;\n    }\n\n    selectBreedBySpeciesId(data)\n      .then(res => {\n        console.log('---', res);\n        if (res.code === 0) {\n          let arr = []\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName\n            }\n            arr.push(data)\n          })\n          if (val === 'dog') {\n            this.setState({\n              dogBreed: arr\n            })\n            electronStore.set('dogBreed', arr)\n          } else if (val === 'cat') {\n            this.setState({\n              catBreed: arr\n            })\n            electronStore.set('catBreed', arr)\n          }\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  _getData = (val) => {\n    this.setState({\n      petSpecies: val,\n      breedName: ''\n    })\n    let data = {\n      speciesId: val\n    }\n    selectBreedBySpeciesId(data)\n      .then(res => {\n        console.log('--获取品种返回的数据-', res);\n        if (res.code === 0) {\n          let arr = []\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName\n            }\n            arr.push(data)\n          })\n          console.log(arr);\n          this.setState({\n            breedArr: arr\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n\n  }\n  /**------------------顶部start------------------------ */\n  _close = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('关闭程序');\n    ipcRenderer.send('window-close')\n  }\n  _min = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('最小化程序');\n    ipcRenderer.send('window-min')\n    this.setState({\n      minbgc: '',\n    })\n  }\n  _minMove = () => {\n\n    this.setState({\n      minbgc: 'rgb(211, 205, 205)'\n    })\n  }\n  _minLeave = () => {\n    this.setState({\n      minbgc: ''\n    })\n  }\n  _closeMove = () => {\n    this.setState({\n      closeColor: 'red',\n      closebgc: '#fff'\n    })\n  }\n  _closeLeave = () => {\n    this.setState({\n      closeColor: '#fff',\n      closebgc: ''\n    })\n  }\n  handleClick = e => {\n    console.log('click ', e);\n    const { api, id, seleceID } = this.state\n    if (e.key === '1') {\n      this.props.history.push({ pathname: '/page6', query: { api, id, seleceID } })\n    }\n    if (e.key === '2') {\n      this.props.history.push('/')\n    }\n\n  };\n  /**------------------顶部end------------------------ */\n  selectWZ = (val) => {\n    let { catBreed, dogBreed } = this.state\n    switch (val) {\n      case 'dog':\n        this.setState({\n          catImg: cat,\n          dogImg: redDog,\n          otherImg: other,\n          selectWZ: val,\n          breedArr: [].concat(dogBreed)\n        })\n\n        break;\n\n      case 'cat':\n        this.setState({\n          catImg: redCat,\n          dogImg: dog,\n          otherImg: other,\n          selectWZ: val,\n          breedArr: [].concat(catBreed)\n        })\n\n        break;\n\n      case 'other':\n        this.setState({\n          catImg: cat,\n          dogImg: dog,\n          otherImg: redother,\n          selectWZ: val,\n          breedArr: []\n        })\n        break;\n\n      default:\n        break;\n    }\n  }\n  _petSpecies = () => {\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\n    this.avatar = selectphoto\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\n          <div className=\"selectSpecies\">\n            <ul>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog'\n                    onClick={() => { this.selectWZ('dog') }}>\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Dog\n                </div>\n              </li>\n              <li>\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Cat\n                </div>\n              </li>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Other\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <Avatar\n              init={\n                <div className=\"ciral\">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\"/>\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n\n        </div>\n\n      </div>\n\n    )\n  }\n  _petName = () => {\n    let birthday = this.state.birthday\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\n    return (\n      <div className=\"petName\"\n        style={{ marginTop: mTop(18) }}\n      >\n        <div className=\"r\">\n          <p >Pet Name</p>\n          <div className=\"infoInput\">\n            <Input\n              bordered={false}\n              value={this.state.petName}\n              onChange={(item) => {\n\n                this.setState({\n                  petName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <p >Pet Birthday</p>\n          <div className=\"infoInput\" >\n            <p\n              style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }}\n              onClick={() => {\n                document.getElementById('calendar').style.display = 'block'\n              }}\n            >\n              {this.state.birthday}\n            </p>\n            <div className=\"calendar\" id=\"calendar\" style={{ left: px(-50), top: px(-50) }}>\n              <Calendar\n                fullscreen={false}\n                headerRender={({ value, type, onChange, onTypeChange }) => {\n                  const start = 0;\n                  const end = 12;\n                  const monthOptions = [];\n                  const current = value.clone();\n                  const localeData = value.localeData();\n                  const months = [];\n                  for (let i = 0; i < 12; i++) {\n                    current.month(i);\n                    months.push(localeData.monthsShort(current));\n                  }\n                  for (let index = start; index < end; index++) {\n                    monthOptions.push(\n                      <Select.Option className=\"month-item\" key={`${index}`}>\n                        {months[index]}\n                      </Select.Option>\n                    );\n                  }\n                  const month = value.month();\n                  const year = value.year();\n                  const options = [];\n                  for (let i = moment(new Date()).year(); i > moment(new Date()).year() - 40; i -= 1) {\n                    options.push(\n                      <Select.Option key={i} value={i} className=\"year-item\">\n                        {i}\n                      </Select.Option>\n                    );\n                  }\n                  return (\n                    <div style={{ padding: 8 }}>\n                      <Row gutter={8}>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            className=\"my-year-select\"\n                            onChange={(newYear) => {\n                              const now = value.clone().year(newYear);\n                              onChange(now);\n                            }}\n                            value={String(year)}\n                          >\n                            {options}\n                          </Select>\n                        </Col>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            value={String(month)}\n                            onChange={(selectedMonth) => {\n                              const newValue = value.clone();\n                              newValue.month(parseInt(selectedMonth, 10));\n                              onChange(newValue);\n                            }}\n                          >\n                            {monthOptions}\n                          </Select>\n                        </Col>\n                      </Row>\n                    </div>\n                  );\n                }}\n                value={birthdayValue}\n                onSelect={(value) => {\n                  this.setState({\n                    birthday: moment(value).format('MMMM D, YYYY')\n\n                  })\n                  document.getElementById('calendar').style.display = 'none'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n    )\n  }\n  _ownName = () => {\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}\n      >\n        <div className=\"l\">\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.patientId}\n              onChange={(item) => {\n                this.setState({\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\n                  intFlog: true\n                })\n                if (item.target.value !== errPatientId) {\n                  message.destroy()\n                }\n              }}\n              onBlur={() => {\n                if (this.state.patientId === '') {\n                  message.error('The pet ID cannot be empty');\n                  return\n                }\n                this.setState({\n                  spin: true\n                });\n                let params = {\n                  patientId: this.state.patientId,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n                checkPatientId(params)\n                  .then(res => {\n                    if (res.flag === false) {\n                      errPatientId = params.patientId;\n                      this.setState({\n                        isModalVisible: true,\n                        spin: false,\n                      })\n                    } else {\n                      errPatientId = '';\n                      message.success('This pet ID will work');\n                      this.setState({\n                        spin: false,\n                      })\n                    }\n                  })\n                  .catch(err => {\n                    this.setState({\n                      spin: false\n                    });\n                  })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              // this.setState({\n              //     selectBreed: true\n              // })\n            }}\n          >\n\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{'My Parents'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _select = (value, data) => {\n    console.log(value, data);  //value的值为id\n    this.setState({\n      petSpeciesBreedId: value,\n      breedName: data.children\n    })\n  }\n  //选择宠物品种\n  _primaryBreed = () => {\n    let { confirmSelectBreedJson } = this.state\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\n        <div className=\"l\" >\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              this.setState({\n                selectBreedVisible: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n        <div className=\"r\" style={{ paddingTop: mTop(40) }}>\n          <div className=\"max\">\n            Mix?\n            <div className=\"selected\"\n              onClick={() => this.setState({\n                isMix: !this.state.isMix\n              })}\n            >\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _weight = () => {\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\n    switch (this.state.unit) {\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\n    }\n    switch (this.state.gender) {\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\n    }\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\n        <div className=\"l\">\n          <p >Pet Weight</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.weight}\n              onChange={(item) => {\n\n                this.setState({\n                  weight: item.target.value\n                })\n              }}\n\n            />\n            <div className=\"ibKg\">\n              <div className=\"ibs\"\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\n                onClick={() => {\n                  if (this.state.unit === 2) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight * 2.2046).toFixed(1)\n                    })\n                  }\n                }}\n              >Ibs</div>\n              <div className=\"kgs\"\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\n                onClick={() => {\n\n                  if (this.state.unit === 1) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight / 2.2046).toFixed(1)\n                    })\n                  }\n                  this.setState({ unit: 2 })\n                }}\n              >kgs</div>\n\n            </div>\n\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\n          <div className=\"gender\">\n            <div className=\"selectGender\">\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\n                <div className=\"femaleCiral\"\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 1 })}\n                >\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\n                </div>\n                Female\n              </div>\n              <div className=\"male\" style={{ fontSize: px(18) }}>\n                <div className=\"maleCiral\"\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 0 })}\n                >\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\n                </div>\n                Male\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  handleOk = (petId = '') => {\n    let params = {\n      patientId: this.state.patientId,\n      doctorId: storage.userId,\n      petId: petId,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.org = storage.lastOrganization\n    }\n    this.setState({\n      confirmLoading: true\n    });\n    getPetInfoByPatientIdAndPetId(params)\n      .then((res) => {\n        this.setState({\n          confirmLoading: false,\n          isModalVisible: false\n        });\n        if (res.flag === true) {\n          let oldList = res.data[0];\n          let {\n            age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender,\n            petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n            h2tLength, torsoLength\n          } = oldList;\n          const isUnKnow = (val) => {\n            if (val) {\n              return val\n            } else {\n              return 'unknown'\n            }\n          }\n          let owner = ''\n          patientId = isUnKnow(patientId)\n          petName = isUnKnow(petName)\n          breedName = isUnKnow(breedName)\n          age = isUnKnow(age)\n          weight = isUnKnow(weight)\n          if (!firstName) {\n            firstName = ''\n          }\n          if (!lastName) {\n            lastName = ''\n          }\n          if (lastName === '' && firstName === '') {\n            owner = 'unknown'\n          } else {\n            owner = `${lastName} ${firstName}`\n          }\n          createTime = moment(createTime).format('X')\n          let petGender = ''\n          switch (`${gender}`) {\n            case '1': petGender = 'F'\n              break;\n            case '0': petGender = \"M\"\n              break;\n            default: petGender = 'unknown'\n              break;\n          }\n          let petAge = 'unknown'\n          if (birthday) {\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\n          }\n\n          let json = {\n            insertedAt: createTime,\n            patientId: this.state.patientId,\n            petName,\n            owner,\n            breed: breedName,\n            gender: petGender,\n            age: petAge,\n            petId,\n            weight,\n            rfid,\n            url,\n            speciesId,\n            l2rarmDistance,\n            neckCircumference,\n            upperTorsoCircumference,\n            lowerTorsoCircumference,\n            h2tLength,\n            torsoLength,\n            pethubId,\n            macId,\n          }\n          this.props.setMenuNum('1');\n          this.props.petDetailInfoFun(json);\n          this.props.history.push(\"/MainBody\");\n        } else {\n          message.error(res.msg);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          confirmLoading: false,\n          isModalVisible: false\n        });\n        message.error('Jump Failure');\n      })\n  };\n  handleCancel = () => {\n    this.setState({\n      isModalVisible: false,\n      confirmLoading: false,\n    })\n  };\n\n  render() {\n    const { isModalVisible, confirmLoading } = this.state\n    return (\n\n      <div id=\"doctorAddPet\">\n        <Spin spinning={this.state.spin} size=\"large\" className='doctorAddPetSpin'>\n          <div className=\"editPetInfo_top\">\n            <div className=\"title\" style={{ marginBottom: px(20), marginTop: px(20) }}>{`New Pet`}</div>\n            <div className=\"line\"></div>\n            {this._petSpecies()}\n            {this._petName()}\n            {this._ownName()}\n            {this._primaryBreed()}\n            {this._weight()}\n          </div>\n          <div className=\"editPetInfo_foot\"  >\n            <div className='save'\n              onClick={() => { this.props.history.goBack() }}\n            >\n              cancel\n            </div>\n            <div className=\"save\"\n              onClick={() => {\n                if (!this.state.patientId) {\n                  message.error('Please enter patient ID')\n                  return\n                }\n                let params = {\n                  patientId: this.state.patientId,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n\n                this.setState({\n                  spin: true\n                })\n                checkPatientId(params)\n                  .then(res => {\n                    if (res.flag === false) {\n                      this.setState({\n                        spin: false\n                      }, () => {\n                        errPatientId = params.patientId\n                        message.error('This patient ID is already occupied, please change to a new one')\n                      })\n                    } else {\n                      let { petSpecies, petName, birthday, petSpeciesBreedId, isMix, weight, gender, unit, imageId, confirmSelectBreedJson, owner, patientId, selectWZ } = this.state\n                      let species = null\n                      if (petSpeciesBreedId) {\n                        species = petSpeciesBreedId\n                      } else {\n                        // 11001 是cat 12001是dog 13001是other\n                        switch (selectWZ) {\n                          case 'cat': species = 11001; break;\n                          case 'dog': species = 12001; break;\n                          default: species = 13001;\n                            break;\n                        }\n                      }\n                      let data = {\n                        petName,\n                        birthday: moment(birthday).format('YYYY-MM-DD'),\n                        gender,\n                        owner,\n                        petSpeciesBreedId: species,\n                        doctorId: storage.userId\n                      }\n                      if (weight) {\n                        if (unit === 1) {\n                          weight = (0.45359 * weight).toFixed(2)\n                        }\n                        data.weight = parseFloat(weight)\n                      }\n                      if (imageId !== -1 && imageId) {\n                        data.imageId = imageId\n                      }\n                      if (storage.lastWorkplaceId) {\n                        data.workplaceId = storage.lastWorkplaceId\n                      }\n                      if (storage.lastOrganization) {\n                        data.organizationId = storage.lastOrganization\n                      }\n                      addDeskPet(patientId, data)\n                        .then(res => {\n                          this.setState({\n                            spin: false\n                          })\n                          if (res.flag === true) {\n                            message.success('Added successfully')\n                            this.handleOk(res.data.petId);\n                          }\n                          else {\n                            message.error('add failed')\n                          }\n                        })\n                        .catch(err => {\n                          this.setState({\n                            spin: false\n                          })\n                          message.error('add failed')\n                        })\n                    }\n                  })\n                  .catch(err => {\n                    this.setState({\n                      spin: false\n                    })\n                    console.log(err);\n                  })\n              }}\n            >\n              Save\n            </div>\n          </div>\n          <Modal\n            title=\"\"\n            open={isModalVisible}\n            onOk={() => this.handleOk()}\n            onCancel={this.handleCancel}\n            centered\n            destroyOnClose\n            maskClosable={false}\n            confirmLoading={confirmLoading}\n          >\n            <div style={{ padding: px(24), fontSize: px(16) }}>\n              This patient ID is already occupied ! <br />Whether to switch to the pet measurement screen ?\n            </div>\n          </Modal>\n          <SelectPetBreed\n            visible={this.state.selectBreedVisible}\n            destroyOnClose\n            width={400}\n            value={this.state.petSpeciesBreedId}\n            onSelect={(value) => {\n              this.setState({\n                selectBreedVisible: false,\n                selectBreedJson: value,\n                petSpeciesBreedId: value.petSpeciesBreedId,\n                confirmSelectBreedJson: value,\n              })\n            }}\n            onCancel={() => {\n              this.setState({\n                selectBreedVisible: false,\n              })\n            }}\n          />\n        </Spin>\n      </div>\n\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, }\n)(DoctorAddPet)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx",["689","690","691","692","693","694","695"],"import React, { Component } from \"react\";\nimport { Input, message, Spin } from \"antd\";\nimport {\n  createFromIconfontCN,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\n\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\nimport dui from \"./../../assets/images/dui.png\";\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back_hui.png\";\nimport back_hong from \"./../../assets/img/back-hui.png\";\n\nimport { getLoginQRcode, loginWithQRcode, mellaLogin } from \"../../api\"\n\nimport temporaryStorage from \"../../utils/temporaryStorage\";\nimport { px, win } from \"../../utils/px\";\nimport MinClose from \"./../../utils/minClose/MinClose\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\nimport { addLogin } from \"../../utils/axios\";\n\nimport \"./index.less\";\nimport { connect } from \"react-redux\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nlet storage = window.localStorage;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\n});\nlet num = 0;\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\nlet isSign = true;\n\nclass SignIn extends Component {\n  state = {\n    isRemember: false,\n    email: \"\",\n    hash: \"\",\n    isCode: false,\n    baseUrl: \"\",\n    QRToken: \"\",\n    isExpired: false, //二维码是否过期\n    spin: false,\n    isLoadQrCode: false, //是否正在加载二维码\n  };\n  componentDidMount() {\n    isSign = true;\n    storage.lastOrganization = \"\";\n    //通知main.js渲染一个small窗口\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"small\", win());\n    //如果有保存的账号密码则展示出来\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\n      let data = storage.signIn;\n      data = JSON.parse(data);\n      this.setState({\n        email: data.email,\n        hash: data.hash,\n        QRToken: \"\",\n      });\n    }\n    //是否勾选了保持登录\n    if (storage.isRemember !== undefined) {\n      let isRemember = storage.isRemember === \"true\" ? true : false;\n      this.setState({\n        isRemember,\n      });\n    }\n    // 监听分辨率是否改变\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //清空本地的注册界面的信息\n    temporaryStorage.logupVetInfo = {};\n    this._getQRCode();\n  }\n  componentWillUnmount() {\n    isSign = false;\n    this.timer && clearInterval(this.timer);\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    // ipcRenderer.send('small')\n    ipcRenderer.send(\"small\", win());\n    this.setState({});\n  };\n  _getQRCode = () => {\n    this.setState({\n      isLoadQrCode: true,\n    });\n    num = 0;\n\n    getLoginQRcode()\n      // addQRCode()\n      .then((res) => {\n        message.destroy();\n\n        console.log(\"---获取二维码\", res);\n        if (res.flag === true) {\n          this.setState({\n            baseUrl: res.data.QRcode,\n            QRToken: res.data.QRToken,\n            isLoadQrCode: false,\n          });\n          this.timer = setInterval(() => {\n            if (!isSign) {\n              this.timer && clearInterval(this.timer);\n            }\n            num++;\n            console.log(\"lunxin\");\n            this._polling();\n\n            if (num > 200) {\n              //超过280秒则去显示二维码过期，要重新获取\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n            }\n          }, 2000);\n        } else {\n          message.error(\"Failed to obtain QR code\", 10);\n          this.setState({\n            isLoadQrCode: false,\n          });\n        }\n      })\n      .catch((err) => {\n        message.error(\"Failed to obtain QR code\", 10);\n        this.setState({\n          isLoadQrCode: false,\n        });\n        console.log(err);\n      });\n  };\n  //轮询\n  _polling = () => {\n\n    loginWithQRcode(this.state.QRToken)\n      .then((res) => {\n        console.log(\"轮询结果：\", res);\n        if (res.flag === true) {\n          switch (res.code) {\n            case 10001:\n              console.log(\"未扫码\");\n\n              break;\n\n            case 11033:\n              console.log(\"扫码未点击登录\");\n              this.timer && clearInterval(this.timer);\n              temporaryStorage.QRToken = this.state.QRToken;\n              let { name, url } = res.data;\n              this.props.history.replace({\n                pathname: \"/user/login/scanCodeLogin\",\n                params: { name, url },\n              });\n\n              break;\n\n            case 11023:\n              console.log(\"过期\");\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n\n              break;\n\n            default:\n              break;\n          }\n        }\n        console.log(\"code\", res.code);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //登录接口\n  _continue = () => {\n    const { email, hash, isRemember } = this.state;\n\n    message.destroy();\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: \"1\",\n    };\n    if (email === \"\") {\n      message.error(\"please input your email\");\n      return;\n    }\n    if (hash === \"\") {\n      message.error(\"please input your password\");\n      return;\n    }\n    console.log(params);\n    this.setState({\n      spin: true,\n    });\n    mellaLogin(params)\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          spin: false,\n        });\n        if (res.status && res.status === 404) {\n          message.error(\"system error\");\n          return;\n        }\n        if (res.status === 500) {\n          message.error(\"system error\");\n\n          return;\n        }\n        if (res.code === 10001 && res.msg === \"账号错误\") {\n          message.error(\"Account error\");\n          return;\n        }\n        if (res.code === 10002 && res.msg === \"密码错误\") {\n          message.error(\"wrong password\");\n          return;\n        }\n        if (\n          res.code === 0 &&\n          res.msg === \"success\" &&\n          res.success.roleId === 1\n        ) {\n          message.error(\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\n          message.error(\n            \"The account is restricted, please contact the management\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10003) {\n          message.error(\"The password or email is incorrect, please re-enter\");\n          return;\n        }\n\n        if (res.code === 0 && res.msg === \"success\") {\n          this.timer && clearInterval(this.timer);\n          console.log(\"账号密码正确，登录进去了\");\n          let { userWorkplace, lastOrganization, token, firstName, lastName } = res.success;\n          storage.token = token;\n          storage.userId = \"\";\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          if (isRemember === true) {\n            storage.signIn = data;\n          } else {\n            storage.signIn = \"\";\n          }\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId;\n          storage.roleId = res.success.roleId;\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = \"\";\n          storage.defaultCurrent = \"\";\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace);\n            let connectionKey = \"\";\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n\n                  }\n                  storage.orgName = element.organizationEntity.name\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n          } else {\n            storage.userWorkplace = \"\";\n            storage.connectionKey = \"\";\n          }\n          console.log('storage.orgName', storage.orgName);\n          this.props.history.push(\"/MainBody\");\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          spin: false,\n        });\n        console.log(err);\n      });\n  };\n\n  _signUp = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\n  };\n  _change = () => {\n    let { isCode } = this.state;\n    message.destroy();\n    if (isCode === false) {\n      this._getQRCode();\n    } else {\n      this.timer && clearInterval(this.timer);\n      num = 0;\n      this.setState({\n        isExpired: false,\n      });\n    }\n    this.setState({ isCode: !this.state.isCode });\n  };\n  //二维码界面\n  _qrCode = () => {\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\n\n    if (!isExpired) {\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{\n              width: px(120),\n              height: px(120),\n              opacity: imgOpacity,\n            }}\n          />\n          {isLoadQrCode && (\n            // true &&\n\n            <div className=\"err\">\n              <Spin\n                indicator={antIcon}\n                tip=\"Loading...\"\n                style={{ fontSize: 16, color: \"#e1206d\" }}\n              />\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\n          />\n\n          <div className=\"err\">\n            <div className=\"errText\">QR code has expired</div>\n            <div\n              className=\"btn\"\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\n              onClick={this.refresh}\n            >\n              Refresh\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n  //点击refresh按钮\n  refresh = () => {\n    this.setState({\n      isExpired: false,\n    });\n    num = 0;\n    this._getQRCode();\n  };\n  beforeDiv = () => {\n    return <img src={back_hong} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  heard = () => {\n    if (this.props.systemType === 'mac') {\n      return (\n        <div className=\"macheard\"  >\n          <div className=\"macheardson\" >\n            {/* 根据ppt修改去掉，并向下移 */}\n            {/* <MinClose /> */}\n            <img\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n              src={back_hui} className={'returnImg'} />\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n      )\n    }\n\n  }\n\n  render() {\n    let { isCode, baseUrl } = this.state;\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\n    return (\n      <div id=\"signIn\">\n        {this.heard()}\n\n        <div className=\"body\">\n          <div className=\"logo\">\n            <img src={mellaLogo} alt=\"\" />\n          </div>\n          <div className=\"body\" style={{ position: \"relative\" }}>\n            <div\n              className=\"text\"\n              style={{\n                marginTop: '15px',\n              }}\n            >\n              Please enter email <br />\n              and password\n            </div>\n\n            <div className=\"inpF\">\n              <Input\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   fontSize: px(18),\n                // }}\n                value={this.state.email}\n                placeholder=\"rachel@friends.com\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    email: str,\n                  });\n                }}\n              />\n              <Input.Password\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   marginLeft: px(6),\n                //   marginBottom: px(18),\n                //   fontSize: px(18),\n                // }}\n                visibilityToggle={false}\n                value={this.state.hash}\n                placeholder=\"********\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    hash: str,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    this._continue();\n                  }\n                }}\n              />\n\n              <div\n                className=\"text\"\n                style={{\n                  marginTop: '15px',\n                }}\n              >\n                {\"Or scan QR Code\"}\n              </div>\n            </div>\n\n            {this._qrCode()}\n            <div\n              className=\"littleText flex\"\n              style={{\n                fontSize: px(12),\n                marginTop: px(10),\n                marginBottom: px(10),\n              }}\n            >\n              Go to your Mella mobile app to access\n              <br />\n              the QR scanner\n            </div>\n            <div className=\"stay\">\n              <div className=\"remember\">\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\n                <div\n                  className=\"box\"\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\n                  onClick={() => {\n                    let { isRemember } = this.state;\n                    this.setState({\n                      isRemember: !isRemember,\n                    });\n                    storage.isRemember = !isRemember;\n                  }}\n                >\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\n                </div>\n              </div>\n              <div\n                className=\"forgot\"\n                style={{ fontSize: px(16) }}\n                onMouseDown={() => {\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\n                  forget[0].style.opacity = 0.5;\n                }}\n                onMouseUp={() => {\n                  document.querySelectorAll(\n                    \"#signIn .forgot\"\n                  )[0].style.opacity = 1;\n                  if (this.state.email) {\n                    temporaryStorage.forgotPassword_email = this.state.email;\n                  }\n\n                  this.props.history.push(\"/user/login/forgotPassword\");\n                }}\n              >\n                Forgot?\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className=\"button11\"\n          style={{ backgroundColor: \"#E7E7E7\" }}\n        >\n          <div\n            className=\"btn1 flex\"\n            onClick={this._continue}\n          // style={{ height: px(40) }}\n          >\n            <p>{`CONTINUE`}</p>\n          </div>\n\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\n            <p style={{ fontSize: px(17) }}>\n              Do not have an account?{\" \"}\n              <a href=\"#\" onClick={this._signUp}>\n                Sign Up\n              </a>\n            </p>\n          </div>\n        </div>\n\n\n        <MyModal\n          visible={this.state.spin}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(SignIn)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx",["696"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../assets/images/errorIcon.png'\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { px, mTop, pX, MTop } from '../../utils/px';\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\n\r\n\r\nimport './index.less';\r\nimport { checkForgetPassword, checkUser, forgetPwd, sendActivateEmail } from '../../api';\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    checkUser(email)\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    forgetPwd(this.state.email)\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n\r\n    checkForgetPassword(this.state.email)\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    sendActivateEmail(this.state.email)\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx",["697"],"import React, { useState, useEffect } from 'react'\nimport { message, Button } from 'antd'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport { useHistory } from 'react-router-dom'\n\nimport './index.less';\nimport { activateUserByEmailCode, resendDeskRegistEmail } from '../../api';\n\nconst VerifyEmail = () => {\n  let history = useHistory()\n  const [code, setCode] = useState('')\n  const [resend, setResend] = useState(60)\n  const [visible, setVisible] = useState(false)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (resend > 0) {\n        setResend(resend - 1)\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer)\n    }\n  })\n\n  const _resend = (e) => {\n\n    if (resend <= 0) {\n\n      //下面写逻辑代码\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\n      let params = {\n        firstName,\n        lastName,\n        domain, email, hash, phone,\n      }\n      if (birthday) {\n        params.birthday = birthday\n      }\n      console.log('重新获取验证码入参', params);\n\n      resendDeskRegistEmail(temporaryStorage.logupEmailCode, params)\n        .then(res => {\n          console.log('重新获取验证码', res);\n          if (res.msg === 'success') {\n            message.success('The email has been resent, please check', 3)\n            temporaryStorage.logupEmailCode = res.data\n            setResend(60)\n          } else {\n            message.error('Failed to send mail', 3)\n\n          }\n        })\n        .catch(err => {\n          console.log('重新获取验证码失败');\n        })\n\n    }\n\n    //阻止a链接跳转\n    if (e && e.preventDefault)\n      e.preventDefault();\n    else\n      window.event.returnValue = false;\n  }\n  const _next = () => {\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\n    message.destroy()\n    if (code !== temporaryStorage.logupEmailCode) {\n      message.error('Verification code input is incorrect', 3)\n      return\n    }\n    else {\n      setVisible(true)\n      activateUserByEmailCode(code)\n        .then(res => {\n          setVisible(false)\n          console.log('验证码验证返回信息：', res);\n          if (res.flag === true) {\n            console.log('验证成功');\n            temporaryStorage.logupSuccessData = res.data\n            temporaryStorage.logupEmailCode = ''\n            history.push('/uesr/logUp/JoinOrganizationByOption')\n          } else {\n            message.error('Verification code verification failed', 3)\n          }\n\n        })\n        .catch(err => {\n          setVisible(false)\n          console.log('验证码验证错误：', err);\n        })\n    }\n\n  }\n\n  return (\n    <div id=\"verifyEmail\">\n      <div className=\"heard\">\n        <MaxMin\n          onClick={() => { history.push('/') }}\n          onClick1={() => history.goBack()}\n        />\n      </div>\n      <div className=\"body\">\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\n        <div className=\"text\">Please enter it below to confirm your address.</div>\n        <div className=\"inpF\">\n          <input\n            className=\"inp\"\n            type=\"text\"\n            value={code}\n            placeholder=\"Code\"\n            onChange={(val) => { setCode(val.target.value) }}\n            maxLength={6}\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\n          />\n        </div>\n\n        {/* <div className=\"resend\">\n          <a href=\"#\" onClick={_resend}>Resend</a>\n          {resend > 0 && `(${resend})`}\n        </div> */}\n      </div>\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\n        <div className=\"btnF\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={_next}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      <MyModal\n        visible={visible}\n      />\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default VerifyEmail\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx",["698","699","700","701","702"],"import React, { Component } from 'react'\nimport {\n  message,\n  Modal,\n  Input,\n  Spin\n} from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport Button from '../../utils/button/Button'\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { listAll, mellaLogin, } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { updateUserInfo } from '../../api/mellaserver'\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nexport default class FindWorkplace extends Component {\n\n  state = {\n    search: '',\n    listData: [],\n    searchData: [],\n    selectId: {},\n    isOrg: false,       //nodel框是否显示\n    isWorkplace: false,\n    workplaceList: [],\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    selectworkplace: {}\n  }\n  componentDidMount() {\n\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    listAll()\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    this.setState({\n      selectId: temporaryStorage.logupSelectOrganization\n    })\n    temporaryStorage.logupSelectOrganization = {}\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('---登录入参', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          isLoading: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.status && res.status === 500) {\n          message.error('Internal Server Error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n        if (res.code === 10000 && res.msg === '系统内部错误') {\n          message.error('system error')\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token, lastName, firstName } = res.success\n          storage.token = token\n          storage.userId = ''\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          this.setState({\n            isOrg: false,\n            isWorkplace: false\n          })\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        })\n        message.error('Login failed')\n      })\n  }\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n      className={ this.state.selectId.organizationId === item.organizationId ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n        }}\n      >\n        <div className=\"item\">{item.name}</div>\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  _updateUserInfo = (params) => {\n    updateUserInfo(params)\n      .then(res => {\n        console.log(res);\n\n        if (res.flag === true) {\n          message.success('Join successfully', 3)\n\n          console.log('成功',);\n          if (!this.props.location.isSettingIn) {\n            this._logIn()\n          } else {\n            this.setState({\n              isLoading: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            isLoading: false\n          })\n          message.error('Identity update failed', 3)\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n          })\n          console.log(item);\n\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  _addworkplaced = () => {\n    let userId = this.props.location.isSettingIn ? storage.userId : temporaryStorage.logupSuccessData.userId\n    let params = {\n      userId,\n      roleId: 2,\n      workplaceId: this.state.selectworkplace.workplaceId,\n      organizationId: this.state.selectworkplace.organizationId\n    }\n    console.log('入参：', params);\n    this.setState({\n      isLoading: true,\n      isWorkplace: false,\n      isOrg: false\n    })\n    this._updateUserInfo(params)\n\n\n  }\n\n  render() {\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\n    return (\n      <div id=\"joinOrganizationByOption\">\n        <div className=\"heard\">\n          {/* 关闭缩小 */}\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            // onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\n            onClick1={() => this.props.history.goBack()}\n\n          />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"text\">Find My Organization</div>\n\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n\n                this.setState({\n                  isOrg: true\n                })\n                console.log('搜索名称加入');\n              }}\n            >\n              <div className=\"iconBox\">\n                <MyIcon type='icon-search' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n\n                <div className=\"title\">Search Organization</div>\n\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                console.log('创建');\n                this.props.history.push('/uesr/logUp/NewOrganization')\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Create an organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                if (this.props.location.isSettingIn) {\n                  this.props.history.goBack()\n                } else {\n                  let params = {\n                    userId: temporaryStorage.logupSuccessData.userId,\n                    roleId: 2,\n                  }\n                  message.destroy()\n                  this.setState({\n                    isLoading: true\n                  })\n                  console.log('搜索id加入', params);\n                  this._updateUserInfo(params)\n                }\n\n\n\n\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-no' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Continue without organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={isOrg}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div></div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n                <div className=\"text\"\n                  onMouseOver={() => {\n                    if (disabled) {\n                      this.setState({\n                        disabled: false,\n                      });\n                    }\n                  }}\n                  onMouseOut={() => {\n                    this.setState({\n                      disabled: true,\n                    });\n                  }}\n\n                >Find my organization</div>\n                <div className=\"searchBox\">\n                  <Input\n                    placeholder=\"Type Organization Name\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._search}\n                  />\n                </div>\n              </div>\n              <div className=\"list\">\n                {this._list()}\n              </div>\n              <div className=\"foot\">\n                <Button\n                  text={'Join Organization'}\n                  onClick={this._goWorkplace}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n              </div>\n            </div>\n          }\n        />\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\" &#xe61b; Search workplace\"\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\"\n\n              >\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n        <MyModal\n          visible={this.state.isLoading}\n        />\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx",["703","704","705","706","707"],"\n/**\n *\n * this.props.location.isAddDoctor是上个组件传过来的标志,为true代表从设置里面的邀请跳转过来的\n */\nimport React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, mellaLogin } from '../../api';\nimport { inviteUserByEmail } from '../../api/melladesk/user';\nlet storage = window.localStorage;\nexport default class InviteTeam extends Component {\n  state = {\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n  }\n\n\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    console.log('this.props', this.props);\n    let { isAddDoctor } = this.props\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = !isAddDoctor ? temporaryStorage.logupSuccessData : storage\n    let organizationId = !isAddDoctor ? temporaryStorage.logupOrganization.organizationId : storage.lastOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      message.error('Please enter the invitation email')\n      return\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n\n    // inviteUserByEmail(userId, organizationId, tags)\n    //   .then(res => {\n    //     console.log(res);\n    //     if (res.flag === true) {\n    //       console.log('成功，跳转');\n    //       message.success('Invitation successful', 3)\n    //       if (!isAddDoctor) {\n    //         this._logIn()\n    //       } else {\n    //         this.setState({\n    //           visible: false\n    //         })\n    //         this.props.history.goBack()\n    //       }\n\n    //     } else {\n    //       this.setState({\n    //         visible: false\n    //       })\n    //     }\n\n    //   })\n    //   .catch(err => {\n    //     this.setState({\n    //       visible: false\n    //     })\n    //     console.log(err);\n    //     message.error(err.message, 3)\n    //   })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token, lastName, firstName } = res.success\n          storage.token = token\n          storage.userId = ''\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n  _food = () => {\n    if (!this.props.isAddDoctor) {\n\n    }\n  }\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          {/* <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          /> */}\n          <div className=\"text\">Invite your Team</div>\n\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          {\n            !this.props.isAddDoctor && <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._logIn}\n              text={'Skip'}\n            >\n              Skip\n            </Button>\n          }\n\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx",["708","709","710","711","712","713","714","715","716","717","718","719","720","721"],"import React, { Component } from \"react\";\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\nimport Heard from \"./../../utils/heard/Heard\";\nimport del from \"./../../assets/images/del.png\";\nimport Close from \"./../../assets/img/close.png\";\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { px, MTop } from \"./../../utils/px\";\nimport electronStore from \"./../../utils/electronStore\";\nimport MyModal from \"./../../utils/myModal/MyModal\";\nimport SelectPetModal from \"../../components/selectPetModal\";\nimport AddPetModal from \"../../components/addPetModal\";\n\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\n\nimport \"./index.less\";\nimport {\n  getPetExamByDoctorId,\n  selectBreedBySpeciesId,\n  listAllPetInfo,\n  checkPatientId,\n  addDeskPet,\n  addAndSavePetExam,\n  deletePetExamByExamId,\n} from './../../api';\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\nexport default class Unassigned extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    pageSize: 10,//数量\n    currPage: 1,//页码\n    total: 0,//总数\n    deviceType: 0,//未分配类型\n    addPetId: '',//添加新宠物的id\n    selectPetModalLoading: false,//选择宠物弹窗加载\n    addPetVisible: false,//添加宠物弹窗\n    addPetModalLoading: false,//添加宠物弹窗加载\n  };\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"big\");\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n    this.setState({\n      deviceType: this.props.deviceType\n    }, () => {\n      this._getEmergencyHistory(1);\n    })\n  }\n  componentWillUnmount() {\n    message.destroy();\n    let ipcRenderer = window.electron.ipcRenderer;\n\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = (currPage) => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n    let data = {\n      pageSize: this.state.pageSize,\n      currPage: currPage,\n      deviceType: this.state.deviceType,\n    }\n    getPetExamByDoctorId(storage.userId, data)\n      .then((res) => {\n        if (res.flag === true) {\n          let datas = res.data.list;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let {\n              petId,\n              examId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              clinicalDatagroupId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n            } = datas[i];\n            let day = moment().diff(moment(createTime), \"day\");\n            let Tem = temperature;\n            try {\n              if (clinicalDataEntity) {\n                Tem = temperature || clinicalDataEntity.data0;\n              }\n            } catch (error) {\n              console.log(\"抛出的异常\", error);\n            }\n            let str = {\n              clinicalDatagroupId,\n              createTime,\n              date: moment(createTime).format(\"MMM DD\"),\n              time: moment(createTime).format(\"hh:mm A\"),\n              temp: parseInt(Tem * 10) / 10,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              day,\n            };\n            historys.push(str);\n          }\n          let newArr = [];\n          if (this.state.currPage === 1) {\n            newArr = historys\n          } else {\n            let oldArr = this.state.historyData;\n            let arr = historys;\n            newArr = [...oldArr, ...arr];\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(newArr, \"createTime\");\n          this.setState({\n            historyData,\n            loading: false,\n            total: res.data.totalCount\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  //表格滚动\n  onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.tableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (this.state.total === this.state.historyData.length) {\n        return false;\n      }\n      this.setState({\n        currPage: this.state.currPage + 1,\n      })\n      this._getEmergencyHistory(this.state.currPage + 1);\n    }\n  }\n  //选择宠物进行分配\n  assignPet = (value) => {\n    this.setState({ selectPetModalLoading: true });\n    let parmes = {\n      petId: value.petId,\n      clinicalDatagroupId: this.state.seleceEmergencies.clinicalDatagroupId,\n    };\n    addAndSavePetExam(this.state.seleceEmergencies.historyId, parmes)\n      .then((res) => {\n        this.setState({ selectPetModalLoading: false });\n        if (res.flag === true) {\n          message.success(\"Assigned successfully\");\n          this.setState({\n            assignVisible: false,\n            addPetId: ''\n          })\n          this._getEmergencyHistory(1);\n        } else {\n          message.error(\"Assignment failed\");\n        }\n\n      })\n      .catch((err) => {\n        message.error(\"Assignment failed\");\n        this.setState({ selectPetModalLoading: false });\n      })\n\n\n  }\n  //添加宠物弹窗显示\n  onAddPet = () => {\n    this.setState({\n      addPetId: '',\n      addPetVisible: true,\n      assignVisible: false,\n    })\n  }\n  //添加新宠物\n  addNewPet = (value) => {\n    let data = {\n      ...value,\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\n    };\n    if (storage.lastWorkplaceId) {\n      data.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (storage.userId) {\n      data.doctorId = storage.userId\n    }\n    this.setState({ addPetModalLoading: true }, () => {\n      addDeskPet(value.patientId, data)\n        .then((res) => {\n          this.setState({ addPetModalLoading: false })\n          if (res.flag === true) {\n            message.success('Adding pets successfully');\n            this.setState({\n              addPetId: res.data.petId,\n              addPetVisible: false,\n              assignVisible: true,\n            })\n          } else {\n            message.error('patientId already exists');\n          }\n        })\n        .catch((err) => {\n          message.error('system exception');\n        })\n    });\n\n  }\n  //删除分配记录\n  deletePetExam = (key, record) => {\n    deletePetExamByExamId(key, '')\n      .then((res) => {\n        if (res.flag === true) {\n          const historyData = [...this.state.historyData];\n          this.setState({\n            historyData: historyData.filter((item) => item.historyId !== key),\n          });\n        } else {\n          message.error('Fail to delete')\n        }\n      }\n      )\n      .catch((err) => {\n        message.error('system exception');\n      })\n  }\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } = this.state;\n\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: `${px(8)}px 0`,\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => this.deletePetExam(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" width={25} style={{ marginRight: \"8px\" }} />\n              </Popconfirm>\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Pet Description\",\n        dataIndex: \"description\",\n        key: \"description\",\n        ellipsis: true,\n        align: \"center\",\n        width: 150,\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Species\",\n        dataIndex: \"species\",\n        key: \"species\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n\n      {\n        title: \"\",\n        dataIndex: \"assign\",\n        key: \"assign\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"assign\"\n              style={{\n                fontSize: px(16),\n                paddingTop: px(5),\n                paddingBottom: px(5),\n              }}\n              onClick={() => {\n                this.setState({\n                  assignVisible: true,\n                  seleceEmergencies: record,\n                });\n              }}\n            >\n              Assign\n            </div>\n          );\n        },\n      },\n    ];\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n    return (\n      <div id=\"unassigned\" style={{ height: this.props.bodyHeight }}>\n        <div className=\"body\">\n          <div\n            className=\"title\"\n            style={{\n              marginTop: px(30),\n              fontSize: px(30),\n              marginBottom: px(40),\n            }}\n          >\n            Unassigned Measurements\n          </div>\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Pet Name or Description\"\n                bordered={false}\n                value={this.state.searchText}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={(e) => {\n                  this.setState({\n                    searchText: e.target.value,\n                  });\n                  this._search(e.target.value);\n                }}\n                onKeyUp={(e) => {\n                  if (e.keyCode === 13) {\n                    this._search();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      searchText: \"\",\n                    });\n                  }\n                }}\n              />\n            </div>\n\n            <div\n              className=\"searchBtn\"\n              style={{ height: px(35), fontSize: px(18) }}\n              onClick={this._search}\n            >\n              <p>Search</p>\n            </div>\n          </div>\n          <div className=\"tableBox\"  onScrollCapture={() => this.onScrollCapture()}>\n            <Table\n              style={{\n                width: \"95%\",\n                margin: \"0 auto\",\n                border: '1px solid #979797'\n              }}\n              bordered\n              loading={loading}\n              columns={columns}\n              dataSource={tableData}\n              rowKey={(columns) => columns.historyId}\n              pagination={false}\n              scroll={{\n                // y: MTop(500),\n                y: 500\n              }}\n              className=\"tableStyle\"\n            />\n          </div>\n        </div>\n        {\n          this.state.assignVisible && (\n            <SelectPetModal\n              visible={this.state.assignVisible}\n              destroyOnClose\n              width={400}\n              value={this.state.addPetId}\n              onCancel={() => {\n                this.setState({\n                  assignVisible: false,\n                  addPetId: ''\n                })\n              }}\n              onAddPet={() => this.onAddPet()}\n              onSelect={(value) => {\n                this.assignPet(value);\n              }}\n              onLoading={this.state.selectPetModalLoading}\n            />\n          )\n        }\n        {\n          this.state.addPetVisible && (\n            <AddPetModal\n              visible={this.state.addPetVisible}\n              destroyOnClose\n              width={400}\n              onCancel={() => {\n                this.setState({\n                  addPetVisible: false,\n                  assignVisible: true,\n                })\n              }}\n              onConfirm={(value) => {\n                this.addNewPet(value);\n              }}\n              onLoading={this.state.addPetModalLoading}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx",["722","723","724","725","726"],"\nimport React, { Component } from 'react'\nimport {\n  Switch,\n  Select,\n  message\n} from 'antd'\n\nimport redJinggao from '../../assets/img/redjinggao.png'\n\nimport Heard from '../../utils/heard/Heard'\nimport Slider from '../../utils/slider/Slider'\nimport Button from '../../utils/button/Button'\nimport electronStore from '../../utils/electronStore'\nimport { px, win } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport './index.less'\nimport { connect } from 'react-redux';\nimport { setMenuNum } from '../../store/actions'\n\nconst { Option } = Select;\nlet storage = window.localStorage\nclass Settings extends Component {\n\n  state = {\n    self_tarting: false,      //自启动，\n    isHua: true,              //为true代表为华氏度，为false代表℃\n    is15: true,               //腋温测量时长，为true则是15秒，为false则是35秒\n    isClicleStudy: false,     //是否处于临床测试，为true则在处于，false则不处于\n    isBacklight: true,        //是否开启背光，为true则是开启背光，为false则是关闭背光\n    isBeep: true,             //是否开启蜂鸣器，为true则是开启蜂鸣器，反之则是关闭蜂鸣器\n    backlightTimer: { length: 140, number: '45' },//背光时长，长度指的是在滑轨上面的距离，number指的是显示的秒数\n    autoOff: { length: 0, number: '30' },  //无操作自动关机，长度指的是在滑轨上面的距离，number指的是关闭的秒数\n\n\n    oldIsHua: true,\n    oldIs15: true,\n    oldIsBacklight: true,\n    oldIsBeep: true,\n    oldBacklightTimer: { length: 140, number: '45' },\n    oldAutoOff: { length: 0, number: '30' },\n    oldIsClicleStudy: false,\n\n    isSave: false,\n\n    num0: '',\n    num1: '',\n    num2: '',\n    num3: '',\n    num4: '',\n    num5: '',\n    verifyNum: '',\n\n    maxLength: 1, //验证码长度\n    valueA: \"\", //验证码第一位\n    valueB: \"\", //二\n    valueC: \"\", //三\n    valueD: \"\", //四\n    valueE: \"\", //5\n    valueF: \"\", //6\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    // if (windowsHeight < 900) {\n    //   ipcRenderer.send('table', win())\n    // } else {\n    //   ipcRenderer.send('setting', win())\n    // }\n    ipcRenderer.send('big', win())\n    //这里要根据保存的时候存到哪个位置的，然后拿出来更新state\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`)\n    console.log('----', hardSet);\n    let isClicleStudy = storage.isClinical === 'true' ? true : false\n    if (hardSet) {\n      console.log('不是第一次进来，有设置的');\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\n\n      this.setState({\n        isHua,\n        is15,\n        isBacklight,\n        isBeep,\n        backlightTimer,\n        autoOff,\n        // isClicleStudy: temporaryStorage.isClicleStudy,\n        isClicleStudy,\n\n        oldIsHua: isHua,\n        oldIs15: is15,\n        oldIsBacklight: isBacklight,\n        oldIsBeep: isBeep,\n        oldBacklightTimer: backlightTimer,\n        oldAutoOff: autoOff,\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\n        oldIsClicleStudy: isClicleStudy,\n\n      })\n    } else {\n      let settings = {\n        isHua: true,\n        is15: true,\n        self_tarting: false,  //自启动\n        isBacklight: true,\n        isBeep: true,\n        backlightTimer: { length: 140, number: '45' },\n        autoOff: { length: 0, number: '30' },\n      }\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = settings\n      this.setState({\n        isHua,\n        is15,\n        isBacklight,\n        isBeep,\n        backlightTimer,\n        autoOff,\n        // isClicleStudy: temporaryStorage.isClicleStudy,\n        isClicleStudy,\n\n        oldIsHua: isHua,\n        oldIs15: is15,\n        oldIsBacklight: isBacklight,\n        oldIsBeep: isBeep,\n        oldBacklightTimer: backlightTimer,\n        oldAutoOff: autoOff,\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\n        oldIsClicleStudy: isClicleStudy\n\n\n      })\n    }\n\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    if (windowsHeight < 900) {\n      ipcRenderer.send('table', win())\n    } else {\n      ipcRenderer.send('big', win())\n    }\n    this.setState({\n\n    })\n  }\n\n  _save = () => {\n    console.log('点击保存');\n    /**\n     * 分别两部分保存保存，\n     * 本地存储：程序自启动、测量单位、背光、蜂鸣器、背光时间、硬件自动关机时间、腋温测量时间\n     * 临时存储：处于临床测试状态\n     */\n    this.setState({\n      isSave: false\n    })\n    let { self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 } = this.state\n    // console.log({ self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 });\n    let settings = {\n      isHua,\n      is15,\n      self_tarting,\n      isBacklight,\n      isBeep,\n      backlightTimer,\n      autoOff,\n    }\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\n    // temporaryStorage.isClicleStudy = isClicleStudy\n    storage.isClinical = `${isClicleStudy}`\n    let ipcRenderer = window.electron.ipcRenderer\n    if (self_tarting) {\n      ipcRenderer.send('openAutoStart')\n    } else {\n      ipcRenderer.send('closeAutoStart')\n    }\n    let setArr = ['03', 'ed', '07', 'dd', autoOff.number, isBacklight ? backlightTimer.number : '00', isBeep ? '11' : '00', isHua ? '00' : '01']\n    console.log('setArr', setArr);\n\n\n\n    ipcRenderer.send('usbdata', { command: '21', arr: setArr })\n\n    this.props.history.goBack()\n  }\n  _goback = () => {\n    console.log('返回');\n    let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff, isClicleStudy,\n      oldAutoOff, oldBacklightTimer, oldIs15, oldIsBacklight, oldIsBeep, oldIsClicleStudy, oldIsHua, } = this.state\n    if (isHua !== oldIsHua || is15 !== oldIs15 || isBacklight !== oldIsBacklight || isBeep !== oldIsBeep || backlightTimer !== oldBacklightTimer\n      || autoOff !== oldAutoOff || isClicleStudy !== oldIsClicleStudy) {\n      console.log('做了更改');\n      this.setState({\n        isSave: true\n      })\n\n    } else {\n      this.props.history.goBack()\n    }\n\n  }\n\n  //验证码光标后移\n  handleInputValue = (e, type) => {\n\n    const { value = \"\" } = e.target;\n    switch (type) {\n      case \"A\":\n        if (value) this.secondFoucs.focus();\n\n        this.setState({\n          valueA: value.slice(0, 1)\n        });\n\n\n        break;\n\n\n      case \"B\":\n        if (value) this.tridFoucs.focus();\n\n        this.setState({\n          valueB: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"C\":\n        if (value) this.fourFoucs.focus();\n\n        this.setState({\n          valueC: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"D\":\n        if (value) this.fiveFoucs.focus();\n\n        this.setState({\n          valueD: value.slice(0, 1)\n        });\n\n\n        break;\n\n      case \"E\":\n        if (value) this.sixFoucs.focus();\n\n        this.setState({\n          valueE: value.slice(0, 1)\n        });\n\n\n        break;\n      default:\n        this.setState({\n          valueF: value.slice(0, 1),\n          isShow: true\n        });\n        break;\n    }\n\n  };\n  //删除验证码\n  handleDel = e => {\n    const BACK_SPACE = 8;\n    const isBackSpaceKey = e.keyCode === BACK_SPACE;\n    if (isBackSpaceKey && e.target.value.length === 0) {\n      let previous = e.target;\n      //上一个兄弟节点\n      previous = previous.previousElementSibling;\n      if (previous !== null && previous.tagName.toLowerCase() === \"input\") {\n        previous.focus();\n      }\n    }\n  };\n\n\n  moceCursor = (index) => {\n    let inputs = document.querySelectorAll('#settings .verify input')\n    if (index < 5) {\n      inputs[++index].focus()\n    }\n  }\n  backCursor = (index) => {\n    let inputs = document.querySelectorAll('#settings .verify input')\n    inputs[--index].focus()\n  }\n  _device = () => {\n\n    let userId = storage.userId\n    let deviceList = electronStore.get(`${userId}-deviceList`)\n    console.log('---', deviceList);\n    if (!deviceList) {\n      let str = `${getRamNumber()}`\n      for (let i = 0; i < 5; i++) {\n        str += `:${getRamNumber()}`\n      }\n      console.log('随机生成的mac地址:', str);\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\n      electronStore.set(`${userId}-deviceList`, deviceList)\n    }\n\n\n    function getRamNumber() {\n      var result = '';\n      for (var i = 0; i < 2; i++) {\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\n      }\n      //默认字母小写，手动转大写\n      return result.toLowerCase();//另toLowerCase()转小写\n    }\n    let deviceArr = []\n    let selectDevice = electronStore.get(`${storage.userId}-selectDevice`)\n    let selectDeviceName = ''\n    for (let i = 0; i < deviceList.length; i++) {\n      const element = deviceList[i];\n      let json = {\n        key: element.macId, value: element.name\n      }\n      deviceArr.push(json)\n      if (selectDevice === element.macId) {\n        selectDeviceName = element.name\n      }\n    }\n\n\n\n    return (\n      // <div className=\"item\" style={{ marginTop: px(15) }}>\n      <div className=\"title\">\n        <div className=\"hardSetting\">{`Hardware Settings`}</div>\n      </div>\n      // </div>\n    )\n  }\n\n\n  render() {\n    let { isBacklight, isBeep, backlightTimer, } = this.state\n\n    let bodyHeight = '90%'\n    try {\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\n    } catch (error) {\n\n    }\n\n\n    return (\n      <div id=\"settings\">\n        <div className=\"body\">\n          <div className=\"setting\">\n            {/* 桌面设计 */}\n            <div className=\"desk\">\n              <div className=\"title\">Desktop Settings</div>\n\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\n                <div className=\"l\">\n                  <div className=\"text\">Launch Mella on Computer Startup</div>\n                  <div className=\"icon\"\n                    onClick={() => this.setState({ self_tarting: !this.state.self_tarting })}\n                  >\n                    {(this.state.self_tarting) && <span  >&#xe619;</span>}\n\n                  </div>\n\n                </div>\n\n\n                <div className=\"l\">\n                  <div className=\"text\">Units:</div>\n                  <div className=\"unit\">\n\n\n                    <div className=\"one\"\n\n                      onClick={() => { this.setState({ isHua: true }) }}\n                    >\n                      <div className=\"check\">\n                        {(this.state.isHua) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">°F / lbs</div>\n                    </div>\n                    <div className=\"one\"\n\n                      onClick={() => { this.setState({ isHua: false }) }}\n                    >\n                      <div className=\"check\">\n                        {(!this.state.isHua) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">°C / kg</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\n\n              </div>\n\n            </div>\n\n            {/* 用户设计 */}\n            {\n              // storage.roleId === '3' &&\n              <div className=\"desk\">\n                <div className=\"title\">User Admin</div>\n\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\n                  <div className=\"l\" onClick={() => {\n                    this.props.setMenuNum('ConnectWorkplace')\n                    // this.props.history.push('/menuOptions/ConnectWorkplace') }\n                  }}\n                  >\n                    <div className=\"text\">{`Org & Practice Profiles`}</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n\n                  </div>\n\n\n                  <div className=\"l\" onClick={() => {\n                    this.props.setMenuNum('InviteTeam')\n                    // this.props.history.push({ pathname: '/uesr/logUp/InviteTeam', isAddDoctor: true })\n                  }}>\n                    <div className=\"text\">Invite Your Team</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n                </div>\n\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\n                  <div className=\"l\"\n                    onClick={() => {\n                      console.log(storage.roleId);\n                      message.destroy()\n                      if (storage.roleId === '3') {\n                        this.props.history.push('/menuOptions/veterinarians')\n                      } else {\n                        message.error('You do not have administrator rights')\n                      }\n                    }}\n\n                  >\n                    <div className=\"text\">Vet Profile Management</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n\n\n                  <div className=\"l \"\n                    onClick={() =>\n                      this.props.setMenuNum('PetAndParents')\n                      // this.props.history.push('/menuOptions/petAndParents')\n                    }\n                    style={{ marginTop: '25px', }}>\n                    <div className=\"text\">Pet and Parents Profile Management</div>\n                    <div className=\"rightIcon\">&#xe60c;</div>\n                  </div>\n                </div>\n\n              </div>\n            }\n\n\n            {/* 硬件设置 */}\n\n            <div className=\"desk\">\n\n              {this._device()}\n              <div className=\"item\">\n                <div className=\"l\">\n                  <div className=\"text\">Backlight</div>\n                  <Switch\n                    checked={isBacklight}\n                    onClick={() => this.setState({ isBacklight: !isBacklight })}\n                    size='small'\n                  />\n                </div>\n\n\n                <div className=\"l\">\n                  <div className=\"text\">Action Beep</div>\n                  <Switch\n                    checked={isBeep}\n                    onClick={() => this.setState({ isBeep: !isBeep })}\n                    size='small'\n                  />\n                </div>\n              </div>\n\n\n              <div className=\"item\">\n                <div className=\"l\">\n                  <div className=\"backlight\" style={{ width: px(300) }} >\n                    <div className=\"text\">Backlight Timer</div>\n                    <div className=\"solid\">\n                      10 Secs\n                      <div className=\"slider\" >\n                        <Slider\n                          min={10}\n                          max={60}\n                          railWidth={px(200)}\n                          getData={(e) => { console.log(e); this.setState({ backlightTimer: e }) }}\n                          left={backlightTimer.length}\n                        />\n                      </div>\n                      60 Secs\n                    </div>\n\n                  </div>\n                </div>\n\n\n                <div className=\"l\" >\n                  <div className=\"backlight\" style={{ width: px(300) }} >\n                    <div className=\"text\">Auto Off After</div>\n                    <div className=\"solid\">\n                      30 Secs\n                      <div className=\"slider\">\n                        <Slider\n                          min={30}\n                          max={60}\n                          railWidth={px(200)}\n                          getData={(e) => { this.setState({ autoOff: e }) }}\n                          left={this.state.autoOff.length}\n                        />\n                      </div>\n                      60 Secs\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"item\">\n\n\n\n                <div className=\"l\" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\n                  <div className=\"text\">Measurement Time for Axillary Sensor</div>\n                  <div className=\"unit\">\n\n\n                    <div className=\"one\"\n                      onClick={() => { this.setState({ is15: true }) }}\n                    >\n                      <div className=\"check\">\n                        {(this.state.is15) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">15 Secs</div>\n                    </div>\n                    <div className=\"one\"\n                      onClick={() => { this.setState({ is15: false }) }}\n                    >\n                      <div className=\"check\">\n                        {(!this.state.is15) && <div className=\"ciral\" />}\n                      </div>\n                      <div className=\"unitsText\">30 Secs</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"l\" onClick={() => this.props.history.push('/menuOptions/advancedsettings')}>\n                  <div className=\"text\">Advanced Settings</div>\n                  <div className=\"rightIcon\">&#xe60c;</div>\n                </div>\n              </div>\n\n\n            </div>\n\n          </div>\n\n\n          <div className=\"btnSave\">\n            <Button\n              text={'Save Changes'}\n              onClick={this._save}\n            />\n          </div>\n        </div>\n\n        <MyModal\n          visible={this.state.isSave}\n          element={\n            <div className='isSave'>\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n              <p>Settings changed - save?</p>\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                <Button\n                  text={'Cancel'}\n                  onClick={() => {\n                    this.setState({\n                      isSave: false\n                    })\n                  }}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n                <Button\n                  text={'OK'}\n                  onClick={this._save}\n                  textBoxStyle={{\n                    width: '40%',\n                    height: px(40)\n                  }}\n                />\n              </div>\n            </div>\n          }\n        />\n\n\n\n\n\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n\n  }),\n  {  setMenuNum }\n)(Settings)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx",["727","728","729","730","731","732","733"],"\nimport React, { Component } from 'react'\nimport {\n  Select,\n  Button,\n  Input\n} from 'antd'\n\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport parent from '../../assets/img/parent.png'\nimport dog from '../../assets/images/reddog.png'\nimport cat from '../../assets/images/redcat.png'\nimport other from '../../assets/images/redother.png'\n\nimport Heart from '../../utils/heard/Heard'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\n\nimport './index.less';\nimport { pet_petall } from '../../api'\n\nconst { Option } = Select;\nlet storage = window.localStorage;\n\nclass PetAndParents extends Component {\n\n  state = {\n    parentList: [],       //宠物主人列表\n    petList: [],          //宠物列表\n    loading: false,       //加载中\n    parentSearchArr: [],  //搜索后的宠物主人列表\n    petSearchArr: [],     //搜索后的宠物列表\n    searchText: '',        //搜索文本\n    parentAndPetList: [],  //宠物主人下的所有宠物,\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    this._getExam()\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    ipcRenderer.send('Lowbig')\n  }\n  _getExam = async () => {\n    this.setState({\n      loading: true,\n      spin: false\n    })\n    let params = {\n      offset: 0,\n      size: 500,\n    }\n    pet_petall(storage.lastOrganization, params)\n      .then(res => {\n        this.setState({\n          loading: false\n        })\n        if (res.flag === true) {\n          let data = []\n          let list = res.data.list\n          let owerList = []\n          let parentAndPetList = []\n          for (let i = 0; i < list.length; i++) {\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\n            let json = {\n              insertedAt: createTime,\n              name: petName,\n              petId,\n              rfid,\n              url,\n              speciesId,\n              type: 'pet',\n              patientId,\n              petBirthday: birthday,\n              breedName,\n              gender\n            }\n            data.push(json)\n            if (userId) {\n              let flogNum = -1\n\n              for (let i = 0; i < owerList.length; i++) {\n                let ower = owerList[i]\n                if (ower.userId === userId) {\n                  flogNum = i\n                  break;\n                }\n\n              }\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\n                let owerJson = {\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\n                }\n                owerList.push(owerJson)\n                let parentAndPetJson = {\n                  parent: owerJson,\n                  pets: [json]\n                }\n                console.log('parentAndPetJson: ', parentAndPetJson);\n\n                parentAndPetList.push(parentAndPetJson)\n              } else {\n                parentAndPetList[flogNum].pets.push(json)\n              }\n            }\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            petList: data,\n            parentList: owerList,\n            parentAndPetList\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        })\n      })\n\n\n\n  }\n  list = (value) => {\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\n    let data = []\n    if (value === 'parent') {\n      if (searchText.length > 0) {\n        data = parentSearchArr\n      } else {\n        data = parentList\n      }\n    } else {\n      if (searchText.length > 0) {\n        data = petSearchArr\n      } else {\n        data = petList\n      }\n    }\n    let options = data.map((item, index) => {\n      let { speciesId, url, userImageUrl, patientId, petId, name,userId } = item\n      let images = null\n      if (value === 'parent') {\n        images = `url(${userImageUrl}?download=0&width=150)`\n        if (!userImageUrl) {\n          images = `url(${parent})`\n        }\n      } else {\n        images = `url(${url}?download=0&width=150)`\n        if (!url) {\n          switch (speciesId) {\n            case 1: images = `url(${cat})`\n              break;\n            case 2: images = `url(${dog})`\n              break\n            default: images = `url(${other})`\n              break;\n          }\n        }\n      }\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `0 8px ${px(15)}px 0`, borderRadius: px(20) }}\n          onClick={() => {\n            let params = []\n            if (item.type !== 'pet') {\n              for (let i = 0; i < parentAndPetList.length; i++) {\n                if (item.userId === parentAndPetList[i].parent.userId) {\n                  params = parentAndPetList[i]\n                  break\n                }\n              }\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: userId })\n            } else {\n              this.props.petDetailInfoFun(item);\n              this.props.history.push({ pathname: '/page9', parent: params })\n            }\n          }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div\n              className='img'\n              style={{\n                width: px(50),\n                height: px(50),\n                marginRight: px(20),\n                borderRadius: px(60),\n                backgroundImage: images,\n              }}>\n            </div>\n\n            <div className='petInfo' >\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n\n    let liStyle = { backgroundColor: '#fff', }\n    if (this.state.petList.length > 6) {\n      liStyle = { height: px(560), overflowY: 'auto' }\n    }\n    return (\n      <div className='petList'>\n        <ul style={liStyle}>\n          {options}\n        </ul>\n      </div>\n    )\n\n  }\n  inputChange = (text) => {\n    let search = text.target.value\n    this.setState({\n      searchText: search\n    })\n\n    let { parentList, petList } = this.state\n    console.log(parentList, petList);\n    let keyWord = search\n\n    let parentSearchData = []\n    for (let i = 0; i < parentList.length; i++) {\n      let petName = parentList[i].name.toLowerCase() || ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        parentSearchData.push(parentList[i])\n      }\n    }\n\n    let petSearchData = []\n    for (let i = 0; i < petList.length; i++) {\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${rfid}`.indexOf(keyWord) !== -1\n      ) {\n        petSearchData.push(petList[i])\n      }\n    }\n    this.setState({\n      petSearchArr: petSearchData,\n      parentSearchArr: parentSearchData\n    })\n\n\n  }\n\n  render() {\n    return (\n      <div id=\"PetAndParents\">\n        <div className=\"body\">\n        <div className='titleBox'>\n            <h1 style={{ fontSize: px(20) }}>{`Pet & Parents Profile Management`}</h1>\n          </div>\n          <div className=\"search\">\n            <div className=\"searchL\">\n              {/* <input\n                type=\"text\"\n                style={{ paddingLeft: px(25), height: px(34) }}\n                placeholder=\"&#xe62c; Search \"\n                value={this.state.searchText}\n                onChange={(text) => {\n                  this.inputChange(text)\n                }}\n              /> */}\n              <Input\n                style={{ height: px(34) }}\n                prefix={<SearchOutlined />}\n                bordered={false}\n                placeholder=\"Search\"\n                value={this.state.searchText}\n                onChange={(text) => {\n                  this.inputChange(text)\n                }}\n              >\n              </Input>\n            </div>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              Search\n            </Button>\n          </div>\n          <div className=\"btns\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              + New Parent\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => {\n                this.props.history.push('/pet/doctorAddPet')\n              }}\n            >\n              + New Pet\n            </Button>\n          </div>\n          <div className=\"lists\">\n            <div className=\"listsL\">\n              {this.list('parent')}\n            </div>\n            <div className=\"listsL\">\n              {this.list('pet')}\n            </div>\n          </div>\n        </div>\n        <MyModal visible={this.state.loading} />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(PetAndParents);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx",["734"],"\r\nimport React, { Component } from 'react'\r\nimport { message, Modal, Button } from 'antd';\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { px, win } from '../../utils/px'\r\nimport MyModal from '../../utils/myModal/MyModal.jsx'\r\nimport './index.less';\r\nimport { getOta } from '../../api/mellaserver/backend';\r\nimport { versionComarision } from '../../utils/commonFun';\r\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\r\nimport { localHardBinVersion } from '../../utils/appversion';\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\nlet uploadType = ''\r\n\r\nexport default class AdvancedSettings extends Component {\r\n\r\n  state = {\r\n    isHaveBase: true,\r\n    uploadText: '',\r\n    isUpload: false,\r\n    updateModal: false,\r\n    progress: 0,\r\n    localVersion: '',\r\n    cloudVersion: '',\r\n    filePath: '',\r\n    isModalOpen: false,\r\n    errorFlog: false\r\n  }\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    //检测是否有usb设备\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    //升级过程中发送的过程信息\r\n    ipcRenderer.on('uploadBaseInfo', this._uploadBaseInfo)\r\n    //底座发过来的指令信息\r\n    ipcRenderer.on('sned', this._send)\r\n    //发送结束升级指令,相当于初始化\r\n    ipcRenderer.send('reUpload', {})\r\n    //获取插入硬件版本\r\n    // this.getHardwareVersion();\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('uploadBaseInfo', this._uploadBaseInfo)\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  }\r\n  //进入界面时获取底座的版本\r\n  // getHardwareVersion = () => {\r\n  //   if(this.state.isHaveBase)\r\n  //   ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n  //   this.localVersionTimer = setTimeout(() => {\r\n  //     //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,给出弹窗提示\r\n  //     this.setState({ isModalOpen: true });\r\n  //     this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  //   }, 3000);\r\n  // }\r\n  //底座发过来的指令信息\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    console.log('_send', data);\r\n    if (this.state.errorFlog) {\r\n      this.setState({\r\n        errorFlog: true\r\n      })\r\n    }\r\n    let { isUpload } = this.state\r\n\r\n    if (data[2] === 54) {\r\n      if (isUpload) {\r\n        if (data[3] === 0) {\r\n          this.setState({\r\n            uploadText: 'Start the upgrade after re-plugging the base'\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n        }\r\n      }\r\n\r\n    } else if (data[2] === 182) {\r\n      //为0代表底座通讯关闭成功了\r\n\r\n      if (data[3] === 0) {\r\n        if (isUpload) {\r\n          console.log('发送指令让底座进入升级状态');\r\n          ipcRenderer.send('enterUpgrade', { command: '38', arr: ['5A'] })\r\n        }\r\n\r\n      }\r\n    } else if (data[2] === 136) {\r\n      //获取到了版本信息,把定时器关闭,此底座不是很老版本\r\n      console.log('版本信息:', data);\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\r\n      this.setState({\r\n        localVersion,\r\n        uploadText: `The current version number is v${localVersion}, getting the latest version`\r\n      }, () => {\r\n        this.cloudVersion()\r\n      })\r\n    }\r\n\r\n  }\r\n  //是否插上底座设备，为false则代表插上了底座设备，反之为拔掉了底座设备\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    let { isUpload, progress } = this.state\r\n    if (data === false) {\r\n      this.setState({\r\n        isHaveBase: true,\r\n      })\r\n      if (isUpload) {\r\n        if (progress === 0) {\r\n          console.log('正在升级过程中检测到了拔插 前去发送升级文件', uploadType);\r\n          if (uploadType === 'base') {\r\n            console.log('底座升级', this.state.cloudVersion);\r\n            //如果版本号和本地版本号一致则使用本地存放的硬件文件，如果没有云端版本或者，云端文件地址则也使用本地的升级文件包\r\n            if (localHardBinVersion === this.state.cloudVersion || !this.state.cloudVersion || !this.state.filePath) {\r\n\r\n              console.log('使用本地文件进行升级');\r\n              ipcRenderer.send('updateBase', { state: 'reset', type: 'base' })\r\n            } else {\r\n              ipcRenderer.send('updateBase', { state: 'base', url: this.state.filePath, fileName: `mellabase${this.state.cloudVersion}` })\r\n            }\r\n\r\n\r\n          } else if (uploadType === 'reset') {\r\n            console.log('底座出厂设置');\r\n            ipcRenderer.send('updateBase', { state: 'reset', type: 'reset' })\r\n          }\r\n        } else if (progress === 100) {\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.success('The update is successful. Please re plug the base');\r\n          ipcRenderer.send('reUpload', {})\r\n        } else {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n\r\n\r\n      }\r\n    } else {\r\n      if (this.state.isHaveBase) {\r\n        this.setState({\r\n          isHaveBase: false,\r\n\r\n        })\r\n      }\r\n      if (isUpload) {\r\n        if (progress > 0 && progress < 100) {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n  _uploadBaseInfo = (e, data) => {\r\n    console.log('升级过程中的信息：', data);\r\n    switch (data.status) {\r\n      case 'error':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n      case 'error1':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error('Upgrade failed, please try again')\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n\r\n\r\n      case 'normal':\r\n        this.setState({\r\n          uploadText: data.data,\r\n          progress: data.progress\r\n        })\r\n        this.timer && clearTimeout(this.timer)\r\n        if (data.progress < 10) {\r\n          this.timer && clearTimeout(this.timer)\r\n          this.timer = setTimeout(() => {\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Try again after unplugging the sled')\r\n            ipcRenderer.send('reUpload', {})\r\n\r\n          }, 1000);\r\n        }\r\n\r\n        if (data.progress === 100) {\r\n          console.log('进度到达100了');\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.failTimer = setTimeout(() => {\r\n\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Please reinsert the base')\r\n            ipcRenderer.send('reUpload', {})\r\n          }, 5000);\r\n        }\r\n        break;\r\n\r\n      case 'success':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n        })\r\n        message.destroy()\r\n        message.success(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n  }\r\n  _upload = (val) => {\r\n\r\n    let { isHaveBase } = this.state\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n      message.destroy()\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        isUpload: true,\r\n        updateModal: true,\r\n        progress: 0,\r\n        errorFlog: true\r\n      })\r\n      uploadType = val\r\n      //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\r\n      console.log('发送指令查看底座是否已经在升级状态');\r\n      ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n      const timer = setTimeout(() => {\r\n        if (this.state.errorFlog) {\r\n          this.setState({\r\n            uploadText: \"Please manually plug and unplug the base\"\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n\r\n        }\r\n        clearTimeout(timer)\r\n      }, 3000);\r\n\r\n\r\n      //2.如果能收到关闭指令，则发送开始升级指令\r\n\r\n      //3.如果如果测试检测到usb插拔，则去发送文件\r\n\r\n\r\n\r\n    }\r\n  }\r\n  _upload1 = (val) => {\r\n    let { isHaveBase } = this.state\r\n    message.destroy()\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        updateModal: true,\r\n        progress: 0,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n        errorFlog: true\r\n\r\n      }, () => {\r\n        this.localVersion()\r\n      })\r\n      uploadType = val\r\n    }\r\n  }\r\n  //询问本地的版本号\r\n  localVersion = () => {\r\n    this.setState({\r\n      uploadText: 'Query the local version number',\r\n    })\r\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    this.localVersionTimer = setTimeout(() => {\r\n      //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,直接去下载文件升级\r\n      this.cloudVersion()\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    }, 3000);\r\n  }\r\n  //询问网端最新的版本号\r\n  cloudVersion = () => {\r\n    getInfoOfLatestDevice('mellabase')\r\n      .then(res => {\r\n        console.log('获取到了网端的版本号', res);\r\n        if (res.flag) {\r\n          let { firmwareVersion, updateUrl } = res.data\r\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion)\r\n          console.log('比较信息:', firmwareVersion, this.state.localVersion, cloudBigtolocal);\r\n          if (cloudBigtolocal || !this.state.localVersion) {\r\n            this.setState({\r\n              cloudVersion: firmwareVersion,\r\n              filePath: updateUrl,\r\n              isUpload: true,\r\n              uploadText: 'Start getting upgrade files'\r\n\r\n            })\r\n            this.setState({\r\n              errorFlog: true\r\n            }, () => {\r\n              ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n              console.log('发送指令查看底座是否已经在升级状态');\r\n            })\r\n\r\n\r\n\r\n            const timer = setTimeout(() => {\r\n              if (this.state.errorFlog) {\r\n\r\n                this.setState({\r\n                  uploadText: \"Please manually plug and unplug the base\"\r\n                })\r\n                ipcRenderer.send('startUpload', {})\r\n\r\n              }\r\n              clearTimeout(timer)\r\n            }, 3000);\r\n          } else {\r\n            this.setState({\r\n              updateModal: false\r\n            })\r\n            message.success(`The hardware version is v${firmwareVersion}, which is the latest version`)\r\n          }\r\n\r\n\r\n\r\n        } else {\r\n          console.log('没有获取到版本的文件');\r\n          message.error('Failed to get the latest version')\r\n          this.setState({\r\n            updateModal: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('获取版本失败,停止升级', err);\r\n        message.error('Failed to get the latest version')\r\n        this.setState({\r\n          updateModal: false\r\n        })\r\n\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id='advancedsettings'>\r\n        <div className=\"heard\">\r\n          <Heart />\r\n          <div className=\"title\">\r\n            <h2>Advanced Settings</h2>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Factory Reset<br /><br />\r\n\r\n                This will erase all data from your Mella<br /> device, including:<br />\r\n                - All installed updates<br />\r\n                - User preferences and Settings<br />\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              // onClick={this._reset}\r\n              onClick={() => this._upload('reset')}\r\n            >\r\n              <div className=\"btn\">Erase all data and reset device</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Mella Base\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n\r\n              onClick={() => this._upload1('base')}\r\n            >\r\n              <div className=\"btn\">Update Mella Charging Base</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                MellaPro Thermometer\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              onClick={() => {\r\n                // ipcRenderer.send('usbdata', { command: '01', arr: ['11'] })\r\n              }}\r\n            >\r\n              <div className=\"btn\">Connect Bluetooth and Update</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.updateModal}\r\n          element={\r\n            <div style={{ height: px(200), borderRadius: px(20) }} className=\"upload\">\r\n\r\n              {/* <p>{this.state.uploadText} </p> */}\r\n              <p style={{ color: '#000', padding: 0, margin: 0 }}>{this.state.uploadText}</p>\r\n            </div>\r\n          }\r\n        />\r\n        <Modal\r\n          open={this.state.isModalOpen}\r\n          // width={432}\r\n          className='tipModal'\r\n          centered\r\n          keyboard={false}\r\n          closable={false}\r\n          footer={null}\r\n        >\r\n          <div className='modalContentBox'>\r\n            <p className=\"title\">An update for the Mella Pro Charger is available</p>\r\n            <div className=\"modalBtnBox\">\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => this.setState({ isModalOpen: false })}\r\n                className=\"modalBtn\"\r\n              >\r\n                cancel\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => {\r\n                  this._upload1('base');\r\n                  this.setState({ isModalOpen: false })\r\n                }}\r\n                className=\"modalBtn\"\r\n              >\r\n                Update Mella Charging Base\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx",["735","736","737","738","739","740"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Button,\r\n  Upload,\r\n} from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { px } from '../../utils/px';\r\nimport Heard from '../../utils/heard/Heard'\r\n\r\nimport using from '../../assets/images/using.png'\r\nimport measuring from '../../assets/images/measuring.png'\r\nimport unassigned from '../../assets/images/unassigned.png'\r\nimport adding from '../../assets/images/adding.png'\r\nimport email from '../../assets/images/email.png'\r\nimport phone from '../../assets/images/phone.png'\r\nimport complaint from '../../assets/images/complaint.png'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\nimport { savefeedback } from '../../api';\r\n\r\nlet storage = window.localStorage;\r\nconst Help = () => {\r\n  const [form] = Form.useForm();\r\n  const { TextArea } = Input;\r\n  let list = [\r\n    {\r\n      img: using,\r\n      title: 'Using the app'\r\n    }, {\r\n      img: measuring,\r\n      title: 'Measuring with Mella'\r\n    }, {\r\n      img: unassigned,\r\n      title: 'Unassigned Readings'\r\n    },\r\n    {\r\n      img: adding,\r\n      title: 'Adding New Users'\r\n    },\r\n  ];\r\n  let num = 150 / list.length;\r\n  let mar = num + 'px';\r\n  let history = useHistory();\r\n  const [opinionsVisible, setOpinionsVisible] = useState(false);//弹窗显隐\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n  const [fileList, setFileList] = useState([]);//图片组\r\n\r\n  const changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big');\r\n  }\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    setOpinionsVisible(false);\r\n    setFileList([]);\r\n  };\r\n  //提交bug优化信息\r\n  const onFinish = (e) => {\r\n    setLoading(true);\r\n    let imageIds = []\r\n    _.map(fileList, (item) => {\r\n      imageIds.push(item.response.data.imageId)\r\n    })\r\n    let data = {\r\n      ...e,\r\n      imageIds: _.toString(imageIds),\r\n      userId: storage.userId\r\n    };\r\n    savefeedback(data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          setOpinionsVisible(false);\r\n          message.success('Submit Successfully~');\r\n        } else {\r\n          message.success('submit Failure!');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.success('submit Failure!');\r\n      })\r\n\r\n\r\n  };\r\n  //提交异常\r\n  const onFinishFailed = (e) => {\r\n    message.error('Please fill in the correct information!');\r\n  };\r\n  /**\r\n * 上传文件前校验\r\n */\r\n  const beforeNormFile = (e) => {\r\n    // 检查图片类型\r\n    const isJPG = e.type === 'image/jpeg';\r\n    const isPNG = e.type === 'image/png';\r\n    const isBMP = e.type === 'image/bmp';\r\n    const isGIF = e.type === 'image/gif';\r\n    const isWEBP = e.type === 'image/webp';\r\n    const isPic = isJPG || isPNG || isBMP || isGIF || isWEBP;\r\n    //文件大小校验\r\n    const isLt2M = e.size / 1024 / 1024 < 4;\r\n    if (!isPic) {\r\n      message.error(`${e.name} not a picture file`);\r\n    } else if (!isLt2M && isPic) {\r\n      message.error(`${e.name}Upload is not allowed if the limit exceeds 4M~`);\r\n    }\r\n    return isPic && isLt2M ? true : Upload.LIST_IGNORE;\r\n  };\r\n  /**\r\n   * Base64\r\n   */\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  /**\r\n * 文件上传后处理\r\n */\r\n  const handleChange = async (info) => {\r\n    console.log('info: ', info);\r\n    if (info.file.status === 'done') {\r\n      setFileList(info.fileList);\r\n    }\r\n    if (info.file.status === 'removed') {\r\n      setFileList(info.fileList);\r\n    }\r\n\r\n    // getBase64(info.file.originFileObj, (imageUrl) => {\r\n    //   setLoading(false);\r\n    //   setImageUrl(imageUrl);\r\n    // });\r\n  };\r\n  //添加图片按钮\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Upload\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', changeFenBianLv)\r\n    return (() => {\r\n      let ipcRenderer = window.electron.ipcRenderer\r\n      ipcRenderer.removeListener('changeFenBianLv', changeFenBianLv)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('fileList', fileList);\r\n  }, [fileList])\r\n\r\n  return (\r\n    <>\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n            />\r\n          </div>\r\n          <div className=\"list\">\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}>\r\n                  <>\r\n                    <img src={data.img} alt=\"\" />\r\n                    <p>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"popularArticles\">\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"time\">\r\n            <p style={{ fontSize: px(24) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(24) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={complaint} alt=\"\" />\r\n            <div className=\"text\">Make a Suggestion</div>\r\n            <p\r\n              onClick={() => { setOpinionsVisible(true) }}\r\n            >\r\n              Submit Opinions\r\n            </p>\r\n          </div>\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" />\r\n            <div className=\"text\">Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              onClick={(e) => { }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" />\r\n            <div className=\"text\">Bark at Us!</div>\r\n            <div className=\"text\">201.977.6411</div>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          visible={opinionsVisible}\r\n          destroyOnClose={true}\r\n          centered\r\n          maskClosable={false}\r\n          width={700}\r\n          onCancel={handleCancel}\r\n          className=\"opinionsModal\"\r\n          footer={[]}\r\n        >\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input title!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Clear titles can be verified more quickly\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input description!',\r\n\r\n                },\r\n                {\r\n                  min: 15,\r\n                  message: 'No less than 15 words'\r\n                }\r\n              ]}\r\n            >\r\n              <TextArea\r\n                showCount\r\n                maxLength={500}\r\n                autoSize={{\r\n                  minRows: 3,\r\n                  maxRows: 5,\r\n                }}\r\n                placeholder=\"Please describe your proposed use scenario and your optimization/improvement plan in detail (no less than 15 words)\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"imageIds\"\r\n              label={`${'Related pictures or screenshots' + '(' + fileList.length + '/' + 5 + ')'}`}\r\n            // valuePropName=\"fileList\"\r\n            >\r\n              <Upload\r\n                accept=\"image/*\"\r\n                name=\"img\"\r\n                action=\"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/image/uploadImage\"\r\n                beforeUpload={beforeNormFile}\r\n                onChange={handleChange}\r\n                withCredentials={true}\r\n                listType=\"picture-card\"\r\n              >\r\n                {fileList.length >= 5 ? null : uploadButton}\r\n              </Upload>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <div className='bugSubmitBox'>\r\n                <Button type=\"primary\" htmlType=\"submit\" size='large' loading={loading} block>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default Help;\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx",["741","742","743","744","745"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { } from \"../../store/actions\";\nimport {\n  Layout,\n  Button,\n  Form,\n  Input,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n  message,\n} from \"antd\";\n\nimport changePhoto from '../../assets/images/changePhoto.png';\n\nimport { px, mTop } from \"../../utils/px\";\nimport countryList from '../../utils/areaCode/country';\nimport Avatar from '../../components/avatar/Avatar'\nimport { getUserInfoByUserId, update } from '../../api'\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst MyAccount = ({ bodyHeight }) => {\n  let storage = window.localStorage;\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [imageId, setImageId] = useState();\n  const [petUrl, setPetUrl] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [country, setCountry] = useState('US');\n  const [countryArr, setCountryArr] = useState();\n  const [infoData, setInfoDate] = useState();\n\n  const onFinish = (values) => {\n    let array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n    for (let index = 0; index < _.size(values.domain); index++) {\n      array[_.toNumber(values.domain[index])] = '1';\n    }\n    let reg = new RegExp(',', \"g\");\n    let res = _.toString(array).replace(reg, '');\n    let data = {\n      ...values,\n      imageId: imageId,\n      domain: res,\n      userId: storage.userId\n    };\n    update(data)\n      .then((res) => {\n        if (res.msg === 'success') {\n          message.success('The user information is updated successfully');\n        } else {\n          message.error('Description Failed to update user information');\n        }\n      })\n  };\n\n  useEffect(() => {\n    let arr = countryList.map(item => item.locale)\n    arr.sort(function (a, b) {\n      return a.localeCompare(b)\n    })\n    setCountryArr(arr);\n  }, []);\n\n  useEffect(() => {\n    getUserInfoByUserId(storage.userId)\n      .then((res) => {\n        if (res.flag === true) {\n          let newData = {\n            ...res.data,\n            domain: _.toArray(res.data.domain)\n\n          }\n          let arr = [];\n          for (let index = 0; index < _.size(newData.domain); index++) {\n            if (newData.domain[index] === '1') {\n              arr.push(_.toString(index));\n            }\n          }\n          newData.domain = arr;\n          form.setFieldsValue(newData);\n          setInfoDate(newData);\n          setImgUrl(res.data?.userImage?.url);\n        }\n      })\n  }, [])\n\n  return (\n    <Layout className=\"myAccountBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{\n          height: '100%',\n          backgroundColor: '#FFFFFF',\n          borderBottom: '2px solid #979797',\n          display: 'flex'\n        }}>\n          <span className=\"headerTitle\">My Account</span>\n        </div>\n      </div>\n      <div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={onFinish}\n          className=\"accountForm\"\n        >\n          <Row>\n            <Col flex={1} className=\"leftColBox\">\n              <Form.Item valuePropName=\"fileList\" name=\"imageId\" className=\"imageFormItem\">\n                <div className=\"upImg\" style={{ display: 'grid', justifyItems: 'center', alignItems: 'center' }}>\n                  <Avatar\n                    init={\n                      <div className=\"ciral\">\n                        <img src={imgUrl ? imgUrl : changePhoto} alt=\"\" id=\"touxiang\" />\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Change Photo</p>\n                      </div>\n                    }\n                    getinfo={(val) => {\n                      if (val) {\n                        setImageId(val);\n                      }\n\n                    }}\n                    getAllInfo={(val) => {\n                      if (val.url) {\n                        setPetUrl(val.url);\n                      }\n                    }}\n                  />\n                </div>\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n            <Col flex={1} className=\"rightColBox\">\n              <Form.Item label=\"FirstName\" name=\"firstName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"LastName\" name=\"lastName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"Phone\" name=\"phone\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item className=\"addressFormItem\" label=\"Address\">\n            <div style={{ display: 'flex' }}>\n              <Form.Item name=\"address1\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address1\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"address2\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address2\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"city\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"city\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"state\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"state\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"zipcode\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"zipcode\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"country\">\n                <Select\n                  showSearch\n                  style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\n                  bordered={false}\n                  optionFilterProp=\"children\"\n                  defaultValue=\"US\"\n                  // onChange={onChange}\n                  onSelect={(val) => { setCountry(val) }}\n                  filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                // open\n                // dropdownClassName=\"addressSelectBox\"\n                >\n                  {_.map(countryArr, (item, index) => (\n                    <Option key={index} value={item}>{item}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </div>\n          </Form.Item>\n          <Form.Item className=\"expertiseFormItem\" label=\"Areas of Expertise\" name=\"domain\">\n            <Checkbox.Group>\n              <Row>\n                <Col span={6}>\n                  <Checkbox\n                    value='0'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Dogs\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='1'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cats\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='2'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Small Pets\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='3'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Nutrition\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='4'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Surgery\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='5'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Zoo\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='6'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Wildlife\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='7'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cardiology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='8'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Neurology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='9'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Anaesthesia\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='10'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Other\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className=\"btnFormItem\">\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\" size=\"large\" style={{ width: px(260) }}>Save Changes</Button>\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n\nMyAccount.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({}),\n)(MyAccount);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx",["746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761"],"import React, { Component } from 'react'\r\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\r\nimport { createFromIconfontCN, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport dog from '../../assets/images/pinkdog.png'\r\nimport cat from '../../assets/images/pinkcat.png'\r\nimport redDog from '../../assets/images/reddog.png'\r\nimport redCat from '../../assets/images/redcat.png'\r\nimport redother from '../../assets/images/redother.png'\r\nimport other from '../../assets/images/other.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport Close from '../../assets/img/close.png'\r\nimport nextImg from '../../assets/img/nextImg.png'\r\nimport dui from '../../assets/images/dui.png'\r\nimport female from '../../assets/images/female.png'\r\nimport male from '../../assets/images/male.png'\r\n\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport electronStore from '../../utils/electronStore';\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\nimport Button from '../../utils/button/Button';\r\nimport Avatar from '../../components/avatar/Avatar';\r\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { petDetailInfoFun } from '../../store/actions';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  checkPatientId,\r\n  getPetInfoByPatientIdAndPetId,\r\n  updatePetInfo,\r\n  deletePetByPetId,\r\n  updatePetInfo1\r\n} from '../../api/mellaserver/pet';\r\nimport {\r\n  listDoctorsByAdmin\r\n} from '../../api/mellaserver/organization';\r\n\r\nimport './index.less';\r\nimport _ from 'lodash';\r\nimport MinClose from '../../utils/minClose/MinClose';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nclass EditPetInfo extends Component {\r\n  state = {\r\n    dogImg: dog,\r\n    catImg: cat,\r\n    otherImg: other,\r\n    selectWZ: '',\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    api: '',\r\n    id: '',\r\n    seleceID: '',//医生id\r\n    petSpecies: 0,\r\n    unit: 1,\r\n    gender: 0,\r\n    isMix: false,\r\n    imageId: -1,\r\n    imgurl: '',\r\n    breedArr: [],\r\n    petSpeciesBreedId: '',\r\n    dogData: [],\r\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n    patientId: '',\r\n    petName: '',\r\n    petId: '',\r\n    lastName: '',\r\n    firstName: '',\r\n    breedName: '',\r\n    initpetName: '',\r\n    initpetId: '',\r\n    initlastName: '',\r\n    initfirstName: '',\r\n    initbreedName: '',\r\n    spin: false,\r\n    dogBreed: [],\r\n    catBreed: [],\r\n    oldPatientId: '',\r\n    searchBreed: '',\r\n    selectBreedJson: {},\r\n    confirmSelectBreedJson: {},\r\n    selectBreed: false,\r\n    doctorArr: [],\r\n    selectUser: false,\r\n    selectUserJson: {},\r\n    selectUserId: -1,\r\n    confirmSelectUserJson: {},\r\n    petUrl: '',\r\n    deletePetModalVisible: false,\r\n    rfid: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    let { petDetailInfo } = this.props\r\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\r\n    if (!isWalkIn) {\r\n      //判断是医生诊断宠物还是用户私有宠物\r\n      if (this.props.history.location?.pet) {\r\n        this.setState({\r\n          patientId: this.props.history.location?.pet?.patientId,\r\n          petId: this.props.history.location.pet?.petId,\r\n          oldPatientId: this.props.history.location?.pet?.patientId,\r\n          breedName: this.props.history.location?.pet?.breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      } else {\r\n        if (!patientId || patientId === 'unknown') {\r\n          patientId = null\r\n        }\r\n        this.setState({\r\n          patientId,\r\n          petId,\r\n          oldPatientId: patientId,\r\n          breedName: breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      }\r\n    }\r\n    let dogBreed = electronStore.get('dogBreed') || []\r\n    let catBreed = electronStore.get('catBreed') || []\r\n    this.setState({\r\n      dogBreed,\r\n      catBreed\r\n    })\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //获取工作场所\r\n    // this.getUser()\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  //获取工作场所\r\n  getUser = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n            let json = {\r\n              insertedAt: createTime,\r\n              breedName: `${lastName} ${firstName}`,\r\n              petSpeciesBreedId: userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  //获取宠物详情信息\r\n  _getPetInfo = () => {\r\n    let { patientId, petId } = this.state\r\n    let datas = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.org = storage.lastOrganization\r\n    }\r\n    if (patientId && patientId !== 'undefined') {\r\n      datas.patientId = patientId\r\n    }\r\n    if (petId) {\r\n      datas.petId = petId\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    getPetInfoByPatientIdAndPetId(datas)\r\n      .then(res => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            if (res.data[i].petId === this.state.petId) {\r\n              datas = res.data[i]\r\n              break\r\n            }\r\n          }\r\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId, rfid } = datas\r\n          if (isMix !== true) {\r\n            isMix = false\r\n          }\r\n          lastName = isNull(lastName)\r\n          firstName = isNull(firstName)\r\n          let confirmSelectBreedJson = {}\r\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\r\n            confirmSelectBreedJson = {\r\n              name: breedName,\r\n              petSpeciesBreedId\r\n            }\r\n          }\r\n          // url = isNull(url)\r\n          if (birthday != null) {\r\n            birthday = moment(birthday).format('MMMM D, YYYY')\r\n          }\r\n          else {\r\n            birthday = ''\r\n          }\r\n          if (gender === null || isNaN(gender) || `${gender}` === 'null' || `${gender}` === 'NaN') {\r\n            gender = 0\r\n          }\r\n          if (weight) {\r\n            weight = (weight * 2.2046).toFixed(1)\r\n          } else {\r\n            weight = ''\r\n          }\r\n          this.setState({\r\n            petId,\r\n            petName,\r\n            lastName,\r\n            firstName,\r\n            breedName,\r\n            isMix,\r\n            birthday,\r\n            weight,\r\n            imgurl: url,\r\n            gender,\r\n            initpetName: petName,\r\n            initlastName: lastName,\r\n            initfirstName: firstName,\r\n            confirmSelectBreedJson,\r\n            petSpeciesBreedId,\r\n            rfid\r\n          })\r\n        } else {\r\n          message.destroy()\r\n          message.error('data load failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n        message.destroy()\r\n        message.error('data load failed')\r\n      })\r\n    const isNull = (value) => {\r\n      if (value === null || isNaN(value) || `${value}` === 'null' || `${value}` === 'NaN') {\r\n        return ''\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n  //选择宠物默认品种\r\n  selectWZ = (val) => {\r\n    let { catBreed, dogBreed } = this.state\r\n    if (this.state.selectWZ !== val) {\r\n      switch (val) {\r\n        case 'dog':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: redDog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(dogBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultdog\",\r\n              petSpeciesBreedId: 12001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'cat':\r\n          this.setState({\r\n            catImg: redCat,\r\n            dogImg: dog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(catBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultcat\",\r\n              petSpeciesBreedId: 11001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'other':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: dog,\r\n            otherImg: redother,\r\n            selectWZ: val,\r\n            breedArr: [],\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultother\",\r\n              petSpeciesBreedId: 13001\r\n            }\r\n          })\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  //宠物详情第一列\r\n  _petSpecies = () => {\r\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n    this.avatar = imgurl ? imgurl : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\"\r\n        style={{ marginTop: mTop(30) }}\r\n      >\r\n        <div className=\"l\">\r\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n          <div className=\"selectSpecies\">\r\n            <ul>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog'\r\n\r\n                    onClick={() => { this.selectWZ('dog') }}>\r\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Dog\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Cat\r\n                </div>\r\n              </li>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Other\r\n                </div>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={imgurl ? imgurl : selectphoto} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                if (val.url) {\r\n                  this.setState({\r\n                    petUrl: val.url\r\n                  })\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //宠物详情第二列\r\n  _petName = () => {\r\n    let birthday = this.state.birthday\r\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Name</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.initpetName}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n                  initpetName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p >Pet Birthday</p>\r\n          <div className=\"infoInput\" >\r\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n              document.getElementById('calendar').style.display = 'block'\r\n            }}>{this.state.birthday}</p>\r\n            <div className=\"calendar\" id=\"calendar\">\r\n              <Calendar\r\n                fullscreen={false}\r\n                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n                  const start = 0;\r\n                  const end = 12;\r\n                  const monthOptions = [];\r\n\r\n                  const current = value.clone();\r\n                  const localeData = value.localeData();\r\n                  const months = [];\r\n                  for (let i = 0; i < 12; i++) {\r\n                    current.month(i);\r\n                    months.push(localeData.monthsShort(current));\r\n                  }\r\n\r\n                  for (let index = start; index < end; index++) {\r\n                    monthOptions.push(\r\n                      <Select.Option className=\"month-item\" key={`${index}`}>\r\n                        {months[index]}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  const month = value.month();\r\n\r\n                  const year = value.year();\r\n                  const options = [];\r\n                  for (let i = year - 10; i < year + 10; i += 1) {\r\n                    options.push(\r\n                      <Select.Option key={i} value={i} className=\"year-item\">\r\n                        {i}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div style={{ padding: 8 }}>\r\n                      <Row gutter={8}>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            className=\"my-year-select\"\r\n                            onChange={(newYear) => {\r\n                              const now = value.clone().year(newYear);\r\n                              onChange(now);\r\n                            }}\r\n                            value={String(year)}\r\n                          >\r\n                            {options}\r\n                          </Select>\r\n                        </Col>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            value={String(month)}\r\n                            onChange={(selectedMonth) => {\r\n                              const newValue = value.clone();\r\n                              newValue.month(parseInt(selectedMonth, 10));\r\n                              onChange(newValue);\r\n                            }}\r\n                          >\r\n                            {monthOptions}\r\n                          </Select>\r\n                        </Col>\r\n                        {/* <Col>\r\n                          <div className=\"btn\" onClick={() => {\r\n                            document.getElementById('calendar').style.display = 'none'\r\n                          }}>\r\n                            Choose this date\r\n                          </div>\r\n\r\n                        </Col> */}\r\n                      </Row>\r\n                    </div>\r\n                  );\r\n                }}\r\n                value={birthdayValue}\r\n                onSelect={(value) => {\r\n                  console.log(value);\r\n                  this.setState({\r\n                    birthday: moment(value).format('MMMM D, YYYY')\r\n                  })\r\n                  document.getElementById('calendar').style.display = 'none'\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //宠物详情第三列\r\n  _ownName = () => {\r\n    let { confirmSelectUserJson } = this.state\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\r\n      >\r\n        <div className=\"l\">\r\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.patientId}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                  intFlog: true\r\n                })\r\n                if (item.target.value !== errPatientId) {\r\n                  message.destroy()\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.patientId === this.state.oldPatientId) {\r\n                  return\r\n                }\r\n                if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n                  message.error('The pet ID cannot be empty');\r\n                  return\r\n                }\r\n                let params = {\r\n                  patientId: this.state.patientId ? this.state.patientId : null,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n                if (storage.lastOrganization) {\r\n                  params.organizationId = storage.lastOrganization\r\n                }\r\n                checkPatientId(params)\r\n                  .then(res => {\r\n                    if (res.flag === false) {\r\n                      errPatientId = params.patientId\r\n                      message.error('This patient ID is already occupied, please change to a new one');\r\n                    } else {\r\n                      errPatientId = '';\r\n                      if (!this.props.history.location?.pet && this.state.patientId !== null) {\r\n                        message.success('This pet ID will work');\r\n                      }\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                  })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\r\n            onClick={() => {\r\n              this.setState({\r\n                // selectUser: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //选择宠物详细品种\r\n  _select = (value, data) => {\r\n    console.log(value, data);  //value的值为id\r\n    this.setState({\r\n      petSpeciesBreedId: value,\r\n      breedName: data.children\r\n    })\r\n  }\r\n  //品种判断\r\n  _primaryBreed = () => {\r\n    let { breedName, confirmSelectBreedJson } = this.state;\r\n\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\r\n        <div className=\"l\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              this.setState({\r\n                selectBreed: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>\r\n              {\r\n                confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'\r\n              }\r\n            </div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"r\" >\r\n          <div className=\"max\">\r\n            Mix?\r\n            <div className=\"selected\"\r\n              onClick={() => this.setState({\r\n                isMix: !this.state.isMix\r\n              })}\r\n            >\r\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"l\">\r\n          <p >RFID</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.rfid}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  rfid: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //体重\r\n  _weight = () => {\r\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n    switch (this.state.unit) {\r\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n    }\r\n    switch (this.state.gender) {\r\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n    }\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Weight</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.weight}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  weight: item.target.value\r\n                })\r\n              }}\r\n            />\r\n            <div className=\"ibKg\">\r\n              <div className=\"ibs\"\r\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                onClick={() => {\r\n                  if (this.state.unit === 2) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight * 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                }}\r\n              >Ibs</div>\r\n              <div className=\"kgs\"\r\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                onClick={() => {\r\n\r\n                  if (this.state.unit === 1) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight / 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                  this.setState({ unit: 2 })\r\n                }}\r\n              >kgs</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n          <div className=\"gender\">\r\n            <div className=\"selectGender\">\r\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                <div className=\"femaleCiral\"\r\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 1 })}\r\n                >\r\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                </div>\r\n                Female\r\n              </div>\r\n              <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                <div className=\"maleCiral\"\r\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 0 })}\r\n                >\r\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n                Male\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //确认删除弹窗\r\n  confirm = () => {\r\n    Modal.confirm({\r\n      title: 'Delete',\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: 'Deleting this pet also deletes all health records associated with this pet. Are you sure?',\r\n      centered: 'true',\r\n      onOk: this.deletPet\r\n    });\r\n  };\r\n  //删除宠物\r\n  deletPet = () => {\r\n    let data = {\r\n      petId: this.state.petId\r\n    }\r\n    deletePetByPetId(data)\r\n      .then(ref => {\r\n        if (ref.flag === true) {\r\n          message.success('Successfully Delete');\r\n          this.props.petDetailInfoFun({});\r\n          this.props.history.goBack();\r\n        } else {\r\n          message.error('Fail to Delete!');\r\n        }\r\n      })\r\n  }\r\n  //更新宠物信息\r\n  save = () => {\r\n    let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson, rfid } = this.state\r\n    if (unit === 1) {\r\n      weight = (0.45359 * weight).toFixed(2)\r\n    }\r\n    let data = {}\r\n\r\n    if (this.state.patientId === this.state.oldPatientId) {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n      }\r\n    } else {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n        patientId: this.state.patientId,\r\n      }\r\n    }\r\n    if (birthday) {\r\n      data.birthday = moment(birthday).format('YYYY-MM-DD')\r\n    }\r\n    if (rfid) {\r\n      data.rfid = rfid\r\n    }\r\n    if (imageId !== -1) {\r\n      data.imageId = imageId\r\n    }\r\n    if (confirmSelectBreedJson.name) {\r\n      data.breedName = confirmSelectBreedJson.name\r\n    }\r\n    if (confirmSelectUserJson.petSpeciesBreedId) {\r\n      data.userId = confirmSelectUserJson.petSpeciesBreedId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      data.organizationId = storage.lastOrganization\r\n    }\r\n    if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n      message.error('The pet ID cannot be empty');\r\n    } else {\r\n      this.setState({\r\n        spin: true\r\n      })\r\n      //判断是用户更新宠物还是医生更新宠物\r\n      if (this.props.history.location?.pet) {\r\n        updatePetInfo1(this.props.history.location.userId, petId, data)\r\n          .then((res) => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              message.success('update successfully');\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            message.error(err)\r\n          })\r\n      } else {\r\n        updatePetInfo(petId, data)\r\n          .then(res => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              try {\r\n                if (storage.identity === '3') {\r\n                  let data = JSON.parse(storage.doctorExam)\r\n                  data.petName = petName\r\n                  data.weight = weight\r\n                  data.gender = gender\r\n                  data.patientId = this.state.patientId\r\n                  if (birthday) {\r\n                    data.age = moment(new Date()).diff(moment(birthday), 'years')\r\n                  }\r\n                  if (confirmSelectBreedJson.name) {\r\n                    data.breed = confirmSelectBreedJson.name\r\n                  }\r\n                  if (this.state.petUrl) {\r\n                    data.url = this.state.petUrl\r\n                  }\r\n\r\n                  storage.doctorExam = JSON.stringify(data)\r\n                }\r\n              } catch (error) {\r\n\r\n              }\r\n              this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId, weight: weight })\r\n              this.props.history.goBack()\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n          })\r\n      }\r\n    }\r\n\r\n  }\r\n  render() {\r\n    const { closeColor, closebgc, minbgc } = this.state\r\n    return (\r\n      <div id=\"editPetInfo\">\r\n        {/* 头部 */}\r\n        <div className=\"close1\">\r\n          {/* 菜单 */}\r\n          <div className=\"menu\">\r\n            {this.props.systemType === 'mac' &&\r\n              <div style={{ marginRight: '8px' }}>\r\n                <MinClose />\r\n              </div>\r\n            }\r\n            <MyIcon\r\n              type='icon-fanhui4'\r\n              className=\"icon\"\r\n              onClick={() => {\r\n                if (!_.isEmpty(this.props.history.location.userId)) {\r\n                  this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n                } else {\r\n                  this.props.history.goBack()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"text\">mella</div>\r\n          {this.props.systemType !== 'mac' ?\r\n            <div className='maxmin'>\r\n              <div\r\n                className=\"min iconfont icon-64\"\r\n                onClick={this._min}\r\n                onMouseEnter={this._minMove}\r\n                onMouseLeave={this._minLeave}\r\n                style={{ backgroundColor: minbgc }}\r\n              ></div>\r\n\r\n              <div\r\n                className=\"max iconfont icon-guanbi2\"\r\n                onClick={this._close}\r\n                onMouseEnter={this._closeMove}\r\n                onMouseLeave={this._closeLeave}\r\n                style={{ backgroundColor: closebgc, color: closeColor }}\r\n              ></div>\r\n            </div> :\r\n            <div style={{ width: '60px' }}></div>\r\n          }\r\n\r\n        </div>\r\n        <div className=\"editPetInfo_top\">\r\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\r\n          {this._petSpecies()}\r\n          {this._petName()}\r\n          {this._ownName()}\r\n          {this._primaryBreed()}\r\n          {this._weight()}\r\n        </div>\r\n        <div className=\"editPetInfo_foot\">\r\n          <div className='deletePet'\r\n            onClick={this.confirm}\r\n          >\r\n            Delete Pet\r\n          </div>\r\n          <div className=\"save\"\r\n            onClick={this.save}\r\n          >Save Changes</div>\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n        {\r\n          this.state.selectBreed && (\r\n            <SelectPetBreed\r\n              visible={this.state.selectBreed}\r\n              destroyOnClose\r\n              width={400}\r\n              value={this.state.petSpeciesBreedId}\r\n              onSelect={(value) => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                  selectBreedJson: value,\r\n                  petSpeciesBreedId: value.petSpeciesBreedId,\r\n                  confirmSelectBreedJson: value,\r\n                })\r\n              }}\r\n              onCancel={() => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                })\r\n              }}\r\n            />\r\n          )\r\n        }\r\n        {\r\n          this.state.selectUser && (\r\n            <MyModal\r\n              visible={this.state.selectUser}\r\n              element={\r\n                <div className='myfindOrg' >\r\n                  <div className=\"orgHeard\">\r\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                      <div>\r\n                      </div>\r\n                      <div\r\n                        onClick={() => {\r\n                          this.setState({\r\n                            selectUser: false,\r\n                            selectUserJson: {}\r\n                          })\r\n                        }}\r\n                      >\r\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text\" >Choose Parents</div>\r\n                    <div className=\"searchBox\">\r\n                      <Input\r\n                        placeholder=\" &#xe61b; Search name\"\r\n                        bordered={false}\r\n                        allowClear={true}\r\n                        value={this.state.searchBreed}\r\n                        onChange={(item) => {\r\n\r\n                          this.setState({\r\n                            searchBreed: item.target.value\r\n                          })\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"list\" >\r\n                    <PhoneBook\r\n                      listDate={this.state.doctorArr}\r\n                      confirmSelectBreed={this.state.selectUserId}\r\n                      selectFun={(val) => {\r\n                        this.setState({\r\n                          selectUserJson: val,\r\n                          selectUserId: val.petSpeciesBreedId\r\n                        })\r\n                      }}\r\n                      searchText={this.state.searchBreed}\r\n                    />\r\n                  </div>\r\n                  <div className=\"foot\">\r\n                    <Button\r\n                      text={'Select'}\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          confirmSelectUserJson: this.state.selectUserJson,\r\n                          selectUser: false\r\n                        })\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n    systemType: state.systemReduce.systemType\r\n  }),\r\n  { petDetailInfoFun }\r\n)(EditPetInfo)\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx",["762","763","764","765","766","767","768","769","770"],"import React, { Component } from 'react'\nimport { Menu, message, Select, Button, Spin, Avatar } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport reddog from '../../assets/images/reddog.png'\nimport redcat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport selectphoto from '../../assets/images/sel.png'\n\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport AvatarUpload from '../../components/avatar/Avatar';\nimport { petPicture } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\nimport { getUserInfoByUserId, updateUserInfo, selectPetInfoByUserId } from '../../api/mellaserver/user';\n\nimport { getPersonPetByUserId } from '../../api/mellaserver/petall';\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nclass EditParent extends Component {\n  state = {\n    lastName: '',       //宠物主人性\n    firstName: '',      //宠物主人名\n    email: '',          //邮箱号\n    phone: '',          //电话号码\n    spin: false,        //加载中\n    imageId: null,      //图片的ID值\n    petList: [],         //当前这个宠物主人下的所有宠物\n    userId: '',          //当前这个宠物主人的userId\n    userImageUrl: '',\n    loading: false,//加载\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (this.props.history.location.userId) { //接受入参\n      let userId = this.props.history.location.userId\n      this.getPersonPet(userId);\n      this._getParent(userId);\n      this.setState({\n        userId,\n      })\n    }\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    this.setState({\n    })\n  }\n  //获取用户详情信息\n  _getParent = (data) => {\n    this.setState({\n      spin: true\n    })\n    getUserInfoByUserId(data)\n      .then(res => {\n        if (res.msg === 'success') {\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\n          firstName = firstName ? firstName : ''\n          phone = phone ? phone : ''\n          email = email ? email : ''\n          lastName = lastName ? lastName : ''\n          this.setState({\n            userImageUrl,\n            firstName,\n            lastName,\n            phone,\n            email,\n            imageId,\n            spin: false\n          })\n        } else {\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  //获取用户当前组织下的所有宠物\n  getPersonPet = (userId) => {\n    this.setState({ loading: true });\n    let newData = {\n      orgId: storage.lastOrganization,\n      userId: userId,\n    }\n    getPersonPetByUserId(newData)\n      .then((res) => {\n        this.setState({ loading: false });\n        if (res.msg === 'success') {\n          this.setState({ petList: res.data })\n        } else {\n          message.error('Failed to obtain pet information');\n        }\n      })\n      .catch((err) => {\n        message.error('Failed to obtain pet information');\n      })\n  }\n  _petSpecies = () => {\n    let { userImageUrl } = this.state\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\n    let { firstName, lastName } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>First Name</p>\n            <input\n              type=\"text\"\n              value={firstName}\n              onChange={(item) => {\n                this.setState({\n                  firstName: item.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Last Name</p>\n            <input\n              type=\"text\"\n              value={lastName}\n              onChange={(item) => {\n                this.setState({\n                  lastName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <AvatarUpload\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _petName = () => {\n    let { email, phone } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物列表\n  petList = () => {\n    let { petList } = this.state\n    let options = petList.map((item, index) => {\n      let { url, breedName, birthday, gender, petName, imageId, petSpeciesBreedId } = item\n      let images = `url(${url}?download=0&width=150)`\n      let petAge = moment(new Date()).diff(moment(birthday), 'years')\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div className=\"itemL\">\n              <Avatar src={this.shoePetPicture(petSpeciesBreedId, url)} size={50} />\n              <p\n                onClick={(e) => {\n                  let location = {\n                    pet: { ...item },\n                    userId: this.props.history.location.userId\n                  }\n                  this.props.history.push({ pathname: '/page9', ...location });\n                }}\n              >\n                {petName}\n              </p>\n            </div>\n            <div className=\"itemC\">\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\n            </div>\n            <div className=\"itemR\">\n              <p>{`${breedName}`}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\n    if (petList.length > 3) {\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\n    }\n    return (\n      <ul style={liStyle}>\n        {options}\n      </ul>\n    )\n  }\n  //保存\n  save = () => {\n    message.destroy()\n    let { firstName, lastName, email, phone, imageId, userId } = this.state\n    console.log({ firstName, lastName, email, phone, imageId });\n    let parames = {\n      userId,\n      email,\n      phone,\n      firstName,\n      lastName,\n      imageId\n    }\n    this.setState({\n      spin: true\n    })\n    message.destroy()\n    updateUserInfo(parames)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          this.props.history.goBack()\n        } else {\n          message.error('fail to edit')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        message.error('fail to edit')\n        console.log(err);\n      })\n  }\n  //选择宠物头像\n  shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  render() {\n    return (\n      <div id=\"editParent\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"editPetInfo_top\" >\n          <div className=\"parentInfo\">\n            <div className=\"title\" >{`Parent Information`}</div>\n            <div className=\"info\">\n              {this._petSpecies()}\n              {this._petName()}\n            </div>\n          </div>\n          <div className=\"pets\">\n            <div className=\"petsTitle\">\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\n              {/* <Button type=\"primary\" shape=\"round\">+ Add New Pet</Button> */}\n            </div>\n            <div className=\"petList\">\n              {this.petList()}\n            </div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              message.destroy()\n              this.props.history.push('/menuOptions/petAndParents');\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              this.save();\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n      </div>\n    )\n  }\n};\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(EditParent);\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx",["771","772"],"import React, { Component } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport { mTop, px, MTop, } from '../../utils/px';\nimport electronStore from '../../utils/electronStore';\n\nimport back_white from '../../assets/img/back-white.png';\nimport back_hui from '../../assets/img/back-hui.png';\nimport redclose from '../../assets/img/redclose.png';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet num07 = 0       //接收到07命令行的次数\n\n\nexport default class AddDevice extends Component {\n\n  state = {\n    noUSB: false,\n    devicesList: [],\n    selectDevice: null,\n    // selectDevice: true,\n    reName: '',\n    saveDeviceMac: []  //这是已经保存过的设备的macid\n\n  }\n\n  componentDidMount() {\n    message.destroy()\n\n    ipcRenderer.send('small')\n    // 监听分辨率是否改变\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('noUSB', this._noUSB)\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\n    if (devicesList) {\n      let saveDeviceMac = []\n      for (let i = 0; i < devicesList.length; i++) {\n        const element = devicesList[i];\n        saveDeviceMac.push(element.macId)\n      }\n      this.setState({\n        saveDeviceMac\n      })\n    }\n\n\n\n    // const timer = setTimeout(() => {\n    //   let deviceList = [\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\n    //   ]\n    //   this.setState({\n    //     devicesList: deviceList\n    //   })\n    //   clearTimeout(timer)\n    // }, 500);\n\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n\n        this.setState({\n          noUSB: true\n        })\n      }\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    // console.log(data);\n    this.command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    const instruction = [255]\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    // console.log(dataArr1);\n    const commandArr = {\n      255: () => {//蓝牙软尺广播的数据\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n              }\n              bluName = str\n              break;\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n            case 3: console.log('----尺子的,不知道什么用'); break;\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let macId = ''\n        if (bluData.length > 7) {\n          macId = this.getMac(bluName, bluData)\n        }\n\n\n        let sameFlog = this.state.devicesList.some((device, index) => {\n          return device.macId === macId\n        })\n        if (sameFlog || !macId) {   //重复直接退出\n          return\n        }\n        let deviceType = ''\n        switch (bluName) {\n          case 'Biggie':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n          case 'C19':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n\n          case 'MaeBowl':   //这是称量碗\n            deviceType = 'maeBowl'\n            break;\n\n          case 'Mella Measure': //这是蓝牙尺\n            deviceType = 'tape'\n            break;\n\n        }\n        if (macId && deviceType && bluName) {\n          let json = {\n            name: bluName,\n            deviceType,\n            macId\n          }\n          let deviceArr = [].concat(this.state.devicesList)\n          deviceArr.push(json)\n          this.setState({\n            devicesList: deviceArr\n          })\n        }\n\n\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  getMac = (bluName, bluData) => {\n    switch (bluName) {\n      case 'Biggie':\n      case 'MaeBowl':\n      case 'Mella Measure':\n      case 'C19':\n        let str = bluData[1]\n        for (let i = 2; i < 7; i++) {\n          str += `:${bluData[i]}`\n        }\n        return str\n\n\n      default:\n        break;\n    }\n\n  }\n\n\n\n  changeFenBianLv = (e) => {\n    ipcRenderer.send('small')\n    this.setState({\n    })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  body = () => {\n    let { noUSB, devicesList, selectDevice, reName } = this.state\n    if (selectDevice) {\n      return <div className=\"addDevice flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\n            this Mella device?</div>\n\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                this.setState({\n                  reName: value.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write the name\n            on the sticker provided so it is easy\n            to select your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              console.log('---', deviceList);\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              let { saveDeviceMac } = this.state\n              saveDeviceMac.push(selectDevice.macId)\n              this.setState({\n                saveDeviceMac,\n                selectDevice: null,\n                reName: ''\n              })\n\n            }}\n          >\n            <p className='btnText'>Add Another</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              this.props.history.goBack()\n\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                {'searching...'}\n              </p>\n            </div>\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n            let { saveDeviceMac } = this.state\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  this.setState({\n                    selectDevice: item\n                  })\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div id=\"addDevice\">\n        <div className=\"heaed\">\n          <div className=\"l\"\n          >\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                let { selectDevice } = this.state\n                if (selectDevice) {\n                  this.setState({\n                    selectDevice: null\n                  })\n                } else {\n                  this.props.history.goBack()\n                }\n\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n        <div className=\"body flex\">\n          {this.body()}\n        </div>\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx",["773","774","775"],"import React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, inviteUserByEmail, mellaLogin } from '../../api';\n\nexport default class Team extends Component {\n\n  state = {\n\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = temporaryStorage.logupSuccessData\n    let { organizationId } = temporaryStorage.logupOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      this._logIn()\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          this._logIn()\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let sign = storage.saveSign\n    try {\n      sign = JSON.parse(sign)\n    } catch (error) {\n\n    }\n\n    let { email, hash } = sign\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId\n                  }\n\n                  break\n                }\n              }\n\n            }\n            console.log('----------key值为：', connectionKey);\n            storage.connectionKey = connectionKey\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n\n\n\n\n\n\n\n          this.props.history.push('/menuOptions/ConnectWorkplace')\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n          <div className=\"line\"></div>\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._logIn}\n            text={'Skip'}\n          >\n            Skip\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx",["776","777","778","779","780","781","782","783"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport close from '../../assets/img/close.png'\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport Avatar from '../../components/avatar/Avatar'\r\nimport moment from 'moment'\r\nimport './index.less';\r\nimport { listDoctorsByAdmin } from '../../api/mellaserver/organization'\r\nimport { admin_users } from '../../api/mellaserver/new'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    admin_users(userId, params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",["784","785","786","787","788","789","790"],"import React, { Component } from 'react';\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\n\nimport { px } from '../../utils/px';\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\n\n\n\nimport './maxminreturn.less'\nimport MinClose from '../minClose/MinClose';\nimport { connect } from 'react-redux';\n\nclass MaxMin extends Component {\n    state = {\n        closebgc: '',\n        minbgc: '',\n        closeColor: '',\n    }\n    _close = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('关闭程序');\n        ipcRenderer.send('window-close')\n    }\n    _min = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('最小化程序');\n        ipcRenderer.send('window-min')\n        this.setState({\n            minbgc: '',\n        })\n    }\n    _minMove = () => {\n\n        this.setState({\n            minbgc: 'rgb(229,229,229)'\n        })\n    }\n    _minLeave = () => {\n        this.setState({\n            minbgc: ''\n        })\n    }\n    _closeMove = () => {\n        this.setState({\n            closeColor: 'red',\n            closebgc: '#fff'\n        })\n    }\n    _closeLeave = () => {\n        this.setState({\n            closeColor: ' rgb(245, 145, 145)',\n            closebgc: ''\n        })\n    }\n    _home = () => {\n        console.log(this.props);\n        // this.props.history.push('/')\n    }\n\n    beforeDiv = () => {\n      return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n    };\n    afterDiv = () => {\n      return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n    };\n\n\n    render() {\n        const { closeColor, closebgc, minbgc } = this.state\n        return (\n            <div className=\"maxminreturn\">\n                <div className=\"heard1\">\n                    {this.props.systemType === 'mac' && <MinClose />}\n                    {/* <div\n                        className=\" iconfont icon-left heard\"\n                        onClick={this.props.onClick1}\n                    /> */}\n                    <MouseDiv\n                        className=\"mouseDiv\"\n                        beforeDiv={this.beforeDiv}\n                        afterDiv={this.afterDiv}\n                        divClick={this.props.onClick1}\n                      />\n                </div>\n                {/* <div className='headIconBox'>\n                </div> */}\n                <div className=\"close123\">\n                    {/* <div className=\"home iconfont icon-zhuye3\"\n                        onClick={this.props.onClick}\n                    /> */}\n                    {this.props.systemType !== 'mac' &&\n                        <>\n                          <div\n                            className=\"heaed\"\n                            // style={{ paddingRight: px(20) }}\n                          >\n                            <div className=\"l\">\n\n                            </div>\n                            <div className=\"r\">\n                              <MinClose />\n                            </div>\n                          </div>\n                        </>\n                    }\n\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default connect(\n    (state) => ({\n        systemType: state.systemReduce.systemType\n    })\n\n)(MaxMin)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx",["791","792","793","794","795","796"],"import React, { Component } from \"react\";\nimport { Select, Input, message, Modal, } from \"antd\";\nimport Heart from \"../../utils/heard/Heard\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\nimport Integration from \"./components/Integration\";\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\n\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\nimport MyModal from '../../utils/myModal/MyModal';\nimport { listAll } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { addOrganization } from '../../api';\n\nimport Draggable from \"react-draggable\";\n\nimport Button from '../../utils/button/Button'\n\n\nconst { Option } = Select;\nlet storage = window.localStorage;\nconsole.log('storage: ', storage);\n\nexport default class ConnectWorkplace extends Component {\n  state = {\n    orgArr: [],\n    workplaceJson: {},\n    connectionKey: \"\",\n    selectOrgId: -1,\n    selectRoleId: \"\",\n    switchType: 'vetspire',//选择是哪种集成\n    roleId: '',//权限id\n\n    search: '',\n    listData: [],\n    selectId: {},\n    searchData: [],\n    selectworkplace: [],\n    workplaceList: [],  // 工作场所列表\n    isOrg: false,     // 选择组织弹窗\n    isWorkplace: false,   // 选择工作场所弹窗\n    visible: false,       //model框是否显示\n    disabled: true,       //model是否可拖拽\n    loadVisible: false,\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n  };\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    ipcRenderer.send(\"big\");\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          this.setState({\n            workplaceName,\n            workplaceId: storage.lastWorkplaceId,\n          });\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n          this.setState({\n            organizationName: name,\n            organizationId: storage.lastOrganization,\n            selectOrgId: storage.lastOrganization,\n          });\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n    listAll().then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    console.log('temporaryStorage.logupSelectOrganization', temporaryStorage.logupSelectOrganization);\n    this.setState({\n      orgArr,\n      workplaceJson,\n      connectionKey: storage.connectionKey,\n      selectRoleId: storage.roleId,\n      selectId: temporaryStorage.logupSelectOrganization\n    });\n    temporaryStorage.logupSelectOrganization = {}\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n  //选择集成\n  onSwitchIntegration = (type) => {\n    this.setState({\n      switchType: type\n    });\n  }\n  clickItem = () => {\n\n  }\n\n  getAllList = () => {\n    listAll().then((res) => {\n      console.log(res);\n      if (res.msg === 'success') {\n        this.setState({\n          listData: res.data\n        })\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n  }\n\n  deleteWorkPlace = (item) => {\n    console.log('@',item);\n  }\n\n  // 选择组织列表\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n      className={ this.state.selectId.organizationId === item.organizationId ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n        }}\n      >\n        <div className=\"item\">{item.name}</div>\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  // 工作场所列表\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        className={ this.state.selectworkplace === item ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n        })\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  // 搜索组织\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  // 搜索工作场所\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  // 创建组织\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push(\"/menuOptions/NewOrg\")\n  }\n\n  // 创建组织\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    // this.props.history.push('/uesr/logUp/NewOrganization')\n    this.props.history.push(\"/menuOptions/NewOrg\")\n  }\n\n  // 跳转工作场所\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n\n  // 添加组织\n  _addworkplaced = () => {\n    let { selectworkplace } = this.state || {};\n    console.log(selectworkplace);\n    console.log(temporaryStorage.logupSelectOrganization);\n    console.log(storage.userId);\n    let params = {\n      name: temporaryStorage.logupSelectOrganization.name,\n      workplaceName: selectworkplace.workplaceName,\n      workplaceTypeId: selectworkplace.workplaceTypeId,\n      address1: selectworkplace.address1,\n      address2: selectworkplace.address2,\n      // phone: `+${code}${phone}`,\n      country: selectworkplace.country,\n      city: selectworkplace.city,\n      state: selectworkplace.state,\n      zipcode: selectworkplace.zipcode,\n      email: selectworkplace.email\n    }\n    this.setState({\n      loadVisible: true\n    })\n    addOrganization(storage.userId, params)\n      .then(res => {\n        // console.log('添加组织返回的信息', res);\n        this.setState({\n          loadVisible: false\n        })\n        if (res.flag === true) {\n          if (res.code === 11030) {\n            this.setState({ visible: true })\n          }\n          if (res.code === 20000) {\n            console.log('添加成功，跳转');\n            // temporaryStorage.logupOrganization = res.data\n            // this.props.history.push('/uesr/logUp/InviteTeam')\n            this.setState({\n              isOrg: false,\n              isWorkplace: false,\n            }, this.getAllList())\n          }\n\n        }\n      })\n      .catch(err => {\n        console.log('添加组织接口失败', err);\n        this.setState({\n          loadVisible: false\n        })\n        message.error(err.message, 3)\n      })\n  }\n\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  render() {\n    let { orgArr, selectOrgId,  bounds, visible, disabled, isOrg, isWorkplace } = this.state;\n    let option = orgArr.map((item, index) => {\n      let bac =\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\n      // console.log('---', this.state.selectRoleId);\n      return (\n        <li\n          key={`${item.organizationId}`}\n          style={{ background: bac, color: col }}\n          onClick={() => {\n            console.log(item);\n            this.setState({\n              selectOrgId: item.organizationId,\n              connectionKey: item.connectionKey,\n              selectRoleId: item.roleId,\n            });\n          }}\n        >\n          <div className=\"org\" style={{ fontSize: px(16) }}>\n            {item.organizationName}\n            <span style={{ marginRight: px(20) }} onClick={(e) => {\n              e.stopPropagation();\n              e.nativeEvent.stopImmediatePropagation();\n              this.deleteWorkPlace(item)\n              }}><CloseCircleOutlined /></span>\n          </div>\n        </li>\n      );\n    });\n    return (\n      <div id=\"connectworkplace\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"top\">\n            <div className=\"title flex\">\n              <p style={{ fontSize: px(28), fontWeight: \"700\" }}>\n                Connected Workplaces\n              </p>\n              <div\n                className=\"addbtn flex\"\n                style={{ height: px(45) }}\n                onClick={() => {\n                  this.setState({\n                    isOrg: true\n                  })\n                  console.log('搜索组织');\n                  console.log(isOrg);\n                }}\n              >\n                <p>+ Add Workplace</p>\n              </div>\n            </div>\n            <div className=\"tablebox\">\n              <div className=\"table\" style={{ height: px(220) }}>\n                <ul>{option}</ul>\n              </div>\n            </div>\n          </div>\n          {`${this.state.selectRoleId}` !== '4' && <Integration />}\n          <div className=\"footer flex\">\n            <div\n              className=\"saveBtn flex\"\n              style={{ height: px(45) }}\n              onClick={() => {\n                let {\n                  selectOrgId,\n                  selectRoleId,\n                  connectionKey,\n                  workplaceJson,\n                } = this.state;\n                storage.roleId = selectRoleId;\n                storage.lastOrganization = selectOrgId;\n                try {\n                  let key = parseInt(selectOrgId);\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n                  storage.lastWorkplaceId = lastWorkplaceId;\n                } catch (error) { }\n                storage.connectionKey = connectionKey;\n                this.props.history.goBack();\n              }}\n            >\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\n            </div>\n          </div>\n        </div>\n\n        {/* // 组织 */}\n        <MyModal\n          visible={isOrg}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div></div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n                <div className=\"text\"\n                  onMouseOver={() => {\n                    if (disabled) {\n                      this.setState({\n                        disabled: false,\n                      });\n                    }\n                  }}\n                  onMouseOut={() => {\n                    this.setState({\n                      disabled: true,\n                    });\n                  }}\n\n                >Find my organization</div>\n                <div className=\"searchBox\">\n                  <Input\n                    placeholder=\"Type Organization Name\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._search}\n                  />\n                </div>\n              </div>\n              <div className=\"list\">\n                {this._list()}\n              </div>\n              <div className=\"foot\">\n                <Button\n                  text={'Join Organization'}\n                  onClick={this._goWorkplace}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n              </div>\n            </div>\n          }\n        />\n\n        {/* // 工作场所 */}\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\"Search workplace\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\">\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n\n\n        <Modal\n          title={\n            <div\n              style={{\n                width: '100%',\n                cursor: 'move',\n                height: '20px',\n                fontWeight: '700'\n              }}\n              onMouseOver={() => {\n                if (disabled) {\n                  this.setState({\n                    disabled: false,\n                  });\n                }\n              }}\n              onMouseOut={() => {\n                this.setState({\n                  disabled: true,\n                });\n              }}\n              onClick={() => {\n                this.setState({\n                  visible: false\n                })\n              }}\n            >\n              remind\n            </div>\n          }\n          open={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          modalRender={(modal) => (\n            <Draggable\n              disabled={disabled}\n              bounds={bounds}\n              onStart={(event, uiData) => this.onStart(event, uiData)}\n            >\n              <div ref={this.draggleRef}>{modal}</div>\n            </Draggable>\n          )}\n          footer={[\n            <button\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\n              onClick={() => {\n                this.setState({\n                  visible: false,\n                  organizationName: ''\n                })\n              }}\n            >Cancel</button>,\n            <button\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\n              onClick={() => {\n                this.setState({\n                  visible: false,\n                  isOrg: false,\n                  isWorkplace: false,\n                })\n                // this.props.history.replace('/uesr/logUp/JoinOrganizationByOption')\n              }}\n            >Join</button>\n\n          ]}\n          destroyOnClose={true}\n        >\n          <div id='vetPrifileModal'>\n            <p>This organization has already been registered, do you want to join?</p>\n          </div>\n        </Modal>\n\n        <MyModal\n          visible={this.state.loadVisible}\n        />\n      </div>\n    );\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx",["797","798","799","800","801","802","803","804"],"import React, { Component, } from 'react'\nimport {\n  Button,\n  Modal,\n  message\n} from 'antd';\nimport { CaretDownFilled } from '@ant-design/icons';\n\nimport imgArray from '../../utils/areaCode/imgArray'\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport countryList from '../../utils/areaCode/country';\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\nimport MinClose from '../../utils/minClose/MinClose';\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\n\n\n\n\nimport { checkUser, deskRegistAWSSNS, registByAWSSES } from '../../api';\n\nimport moment from 'moment';\n\nimport './index.less';\nimport { connect } from 'react-redux';\n\nconst options = [\n  { label: 'Dogs', value: 'Dogs' },\n  { label: 'Cats', value: 'Cats' },\n  { label: 'Small Pets', value: 'Small Pets' },\n  { label: 'Nutrition', value: 'Nutrition' },\n  { label: 'Surgery', value: 'Surgery' },\n  { label: 'Zoo', value: 'Zoo' },\n  { label: 'Wildlife', value: 'Wildlife' },\n  { label: 'Cardiology', value: 'Cardiology' },\n  { label: 'Neurology', value: 'Neurology' },\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\n  { label: 'Other', value: 'Other' },\n]\nclass VetPrifile extends Component {\n\n  state = {\n    code: 1,\n    imgArrayIndex: 0,\n    otherText: '',\n    name: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    birthday: moment(),\n    password: '',\n    password1: '',\n    checboxtValue: [],\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\n\n    visible: false,       //nodel框是否显示\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    loadVisible: false\n  }\n\n  componentDidMount() {\n    console.log('_________________config', process.env, process.env.REACT_APP_MELLASERVER_BASE_URL,);\n    //发送指令让main.js创建一个big窗口\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //检测是否本地是否有注册信息，有就展示出来。\n    console.log(temporaryStorage.logupVetInfo);\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\n      console.log('进来了');\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\n      this.setState({\n        name: firstName || '',\n        lastName,\n        email,\n        password: hash,\n        password1: hash,\n        code,\n        phone: initPhone || '',\n        imgArrayIndex\n      })\n\n\n    }\n\n\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\n    if (this.props.location && this.props.location.email) {\n      this.setState({\n        email: this.props.location.email\n      })\n    }\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n  _next = () => {\n    let { name, lastName, email, code, phone, password1, password, } = this.state\n    message.destroy()\n    console.log({ name, email, code, phone, password1, password, });\n    email = email.toLocaleLowerCase()\n    if (name.length <= 0) {\n      message.error('Please enter your first name', 3)\n      return\n    }\n    if (lastName.length <= 0) {\n      message.error('Please enter your last name', 3)\n      return\n    }\n    if (!email) {\n      message.error('Please enter the mailbox number', 3)\n      return\n    } else {\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\n        message.error('E-mail format is incorrect', 3)\n        return\n      }\n    }\n    if (password.length <= 0 || password1.length <= 0) {\n      message.error('Please enter the password', 3)\n      return\n    }\n\n    if (password !== password1) {\n      message.error('The password entered twice is incorrect, please re-enter', 3)\n      return\n    }\n    this.setState({\n      loadVisible: true\n    })\n\n\n    let params = {\n      firstName: name,\n      lastName,\n      email,\n      hash: password,\n    }\n    if (phone) {\n      params.phone = `+${code}${phone}`\n    }\n\n    registByAWSSES(params)\n      .then(res => {\n        this.setState({\n          loadVisible: false\n        })\n        // console.log('注册接口返回数据：', res);\n        switch (res.code) {\n          case 11011:\n            console.log('用户已存在，应该跳出弹框')\n            this.setState({\n              visible: true\n            })\n\n            break;\n\n          case 20000:\n          case 200:\n            console.log('可以注册，跳转到下一页');\n            temporaryStorage.logupEmailCode = res.data\n            params.code = code\n            params.initPhone = phone\n            params.imgArrayIndex = this.state.imgArrayIndex\n            temporaryStorage.logupVetInfo = params\n            this.props.history.push('/uesr/logUp/VerifyEmail')\n            break;\n\n          default:\n            break;\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadVisible: false\n        })\n        message.error(`Error:${err.message}`)\n        console.log('注册接口抛出错误：', err);\n      })\n\n  }\n  _signIn = (e) => {\n    e.preventDefault();\n    this.props.history.push('/page11')\n  }\n\n  beforeDiv = () => {\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  heard = () => {\n    if (this.props.systemType === 'mac') {\n      return (\n        <div className=\"macheard\"  >\n          <div className=\"macheardson\" >\n            <MinClose />\n            <img\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n              src={back_hui} className={'returnImg'} />\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n      )\n    }\n\n  }\n\n\n  render() {\n\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\n    return (\n      <div id=\"vetPrifile\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          {/* <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.push('/')}\n          /> */}\n          {this.heard()}\n        </div>\n        <div className=\"body\">\n          <div className=\"text\"\n            style={{ fontSize: px(30), marginBottom: px(120) }}\n          >\n            Let’s start by creating your account\n          </div>\n          <div className=\"form\" >\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={name}\n                  placeholder=\"First Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      name: data\n                    })\n                  }}\n                />\n\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={lastName}\n                  placeholder=\"Last Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      lastName: data\n                    })\n                  }}\n                />\n\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Email\"\n                  value={email}\n                  placeholder=\"Email Address*\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      email: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\n                  {countryList.map((item, index) => {\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\n                    return (\n                      <li key={index}>\n                        <div key={index}\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                          onClick={() => {\n                            console.log(item, index);\n                            this.setState({\n                              code: item.code,\n                              imgArrayIndex: index\n                            })\n                            document.getElementById('list').style.display = \"none\"\n                          }}\n                        >\n                          <img src={url} alt=\"\" />\n                          <p >{`${item.en}   +${item.code}`}</p>\n                        </div>\n                      </li>\n                    )\n                  })}\n                </ul>\n\n\n                <div className='phone'>\n                  <div\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\n                    onClick={() => {\n                      document.getElementById('list').style.display = \"block\"\n                    }}\n                  >\n                    <img style={{ zIndex: '888' }}\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\n                    />\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\n                  </div>\n\n\n                  <input\n                    type=\"Phone\"\n                    value={phone}\n                    placeholder=\"Phone Number\"\n                    onChange={(value) => {\n                      let data = value.target.value\n                      this.setState({\n                        phone: data.replace(/[^\\-?\\d]/g, '')\n                      })\n                    }}\n                  />\n                </div>\n\n              </div>\n\n            </div>\n\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password}\n                  placeholder=\"Create Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password1}\n                  placeholder=\"Confirm Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password1: data\n                    })\n                  }}\n                />\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n\n\n\n\n        <div className=\"foot\">\n          <div className=\"footText\"\n          >Already have an account? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\n\n          {/* 按钮 */}\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._next}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n\n        <MyModal\n\n          visible={this.state.loadVisible}\n        />\n\n        <Modal\n          open={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">Email Already Exists</div>\n\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\n\n            <div className=\"btn\">\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false,\n                    email: ''\n                  })\n                }}\n              >Try Again</button>\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false\n                  })\n                  this.props.history.replace('/page11')\n                }}\n              >Sign Up</button>\n\n            </div>\n          </div>\n\n\n        </Modal>\n      </div>\n\n\n    )\n  }\n}\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(VetPrifile)\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx",["805","806","807","808","809","810","811","812","813","814","815","816","817","818","819"],"import { message, Tag, Space, Table  } from 'antd'\nimport moment from 'moment/moment'\nimport React, { Component } from 'react'\n\nimport Icon, { DownOutlined, UpOutlined } from '@ant-design/icons';\n\nimport { px } from '../../utils/px';\n\nimport { buy, getOrderInfo, getPreOrderById, payForOrder, reFund  } from '../../api'\nimport BuySub from '../../components/buySub'\nimport MyModal from '../../utils/myModal/MyModal'\nimport { win } from '../../utils/px'\nimport defaultUserIcon from './../../assets/img/defaultUserIcon.png'\n\nimport down from '../../assets/img/xia.png'\nimport expand from '../../assets/img/expand.png'\n\nimport \"./index.less\"\n\nlet storage = window.localStorage;\n\nlet num = 0\n\n\nexport default class Subscriptions extends Component {\n    state = {\n        subscriptionData: [],   // 订阅列表的数据集合\n        userUrl: '',\n        userName: '',\n        endDate: '',\n        selectListIndex: 0,\n        buyModal: false,\n        loadings: [false, false, false]\n\n    }\n    componentDidMount() {\n        let ipcRenderer = window.electron.ipcRenderer\n        ipcRenderer.send('big', win())\n        this.getOrderInfo()\n    }\n    componentWillUnmount() {\n        this.timer && clearInterval(this.timer);\n    }\n    getOrderInfo = () => {\n        getOrderInfo(storage.userId)\n            .then(res => {\n                console.log('res', res);\n                let { msg, success, code } = res\n                if (code === 0 && msg === 'success') {\n                    let { firstName, imageUrl, isExpired, lastName, preOrderId, endTime } = success[0]\n                    let tempData = success\n                    let endDate = moment(endTime).format('MMMM D, YYYY')\n                    endDate = isExpired === 0 ? endDate : ''\n                    console.log('tempData', tempData);\n                    this.setState({\n                        subscriptionData: tempData,\n                        userName: `${lastName} ${firstName}`,\n                        userUrl: imageUrl,\n                        endDate\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 21 ~ Subscriptions ~ err\", err)\n            })\n    }\n    buyFun = (item) => {\n\n        let loadings = [].concat(this.state.loadings)\n        let params = {\n            count: 1,\n            details: '测试'\n        }\n        switch (item.type) {\n            case 'month':\n                loadings[0] = true\n                params.productId = 1\n                break;\n            case 'year':\n                loadings[1] = true\n                params.productId = 2\n\n                break;\n            case 'free':\n                params.productId = 3\n                loadings[2] = true\n                break;\n\n            default:\n                break;\n        }\n        this.setState({\n            loadings\n        })\n        console.log('params:', params);\n        console.log('storage', storage);\n        buy(storage.userId, params)\n            .then(res => {\n                console.log(res);\n                let buyItem = item.type\n                let payParams  = {\n                  organizationId: storage.lastOrganization || null,\n                  userId: storage.userId\n                }\n                if (res.code === 0 && res.msg === 'success') {\n                    let { preOrderId } = res.data\n                    let buyItem1 = buyItem\n                    payForOrder(preOrderId, payParams)\n\n                        .then(res => {\n                            let { code, message, url } = res\n                            if (code === 0) {\n                                window.open(url)\n                                this.timer = setInterval(() => {\n\n                                    num++;\n                                    this._polling(preOrderId, buyItem1);\n\n                                    if (num > 280) {\n                                        //超过280秒则去显示二维码过期，要重新获取\n\n                                        num = 0;\n                                        this.timer && clearInterval(this.timer);\n                                    }\n                                }, 1500);\n                            } else {\n                                this.changeLoadings(buyItem1)\n                                message.destroy()\n                                message.error('Bill generation failed')\n                            }\n\n                        })\n                        .catch(err => {\n                            this.changeLoadings(buyItem1)\n                            message.destroy()\n                            message.error('Bill generation failed')\n                            console.log(err);\n                        })\n                } else {\n                    this.changeLoadings(buyItem)\n                    message.destroy()\n                    message.error('Order acquisition failed')\n                }\n            })\n            .catch(err => {\n                message.destroy()\n                message.error('Order acquisition failed')\n                console.log(err);\n            })\n    }\n    changeLoadings = (buyItem) => {\n        let arr = [].concat(this.state.loadings)\n        switch (buyItem) {\n            case 'month':\n                arr[0] = false\n                break;\n            case 'year':\n                arr[1] = false\n                break;\n            case 'free':\n                arr[2] = false\n                break;\n        }\n        this.setState({\n            loadings: arr\n        })\n    }\n    _polling = (preOrderId, buyItem) => {\n        getPreOrderById(preOrderId)\n            .then(res => {\n                console.log(res);\n                let { code, data } = res\n                if (code === 0) {\n                    let { status } = data\n                    if (status && status !== 1) {\n                        let arr = [].concat(this.state.loadings)\n                        switch (buyItem) {\n                            case 'month':\n                                arr[0] = false\n                                break;\n                            case 'year':\n                                arr[1] = false\n                                break;\n                            case 'free':\n                                arr[2] = false\n                                break;\n                        }\n                        this.setState({\n                            loadings: arr\n                        })\n                    }\n                    switch (status) {\n                        case 1:\n                            //待支付\n                            break;\n                        case 2:\n                            //取消支付\n                            message.destroy()\n                            message.warn('User cancels payment')\n                            this.timer && clearInterval(this.timer);\n                            break;\n                        case 3:\n                            message.destroy()\n                            message.success('The user paid successfully')\n                            this.timer && clearInterval(this.timer);\n\n                            //支付成功\n                            break;\n                        case 6:\n                        //待退款\n                        case 7:\n                        //已退款\n                        case 8:\n                            //已过期\n                            this.timer && clearInterval(this.timer);\n                    }\n                }\n            })\n\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    // 取消订阅，退款\n    cancelSub = (value) => {\n      reFund(value).then(res => {\n        console.log('cancelRes', res);\n      })\n    }\n\n    typeText = (text) => {\n      switch (text) {\n        case 1:\n          return 'Premium Monthly';\n        case 2:\n          return 'Premium Yearly';\n        case 3:\n          return 'Free Trial';\n        default:\n          return '';\n      }\n    }\n\n\n\n    render() {\n        let { userUrl, userName, endDate, selectListIndex, subscriptionData } = this.state\n        let url = !userUrl ? defaultUserIcon : userUrl\n\n        let bodyHeight = '90%'\n        try {\n          bodyHeight = document.getElementById('subscriptions').clientHeight\n        } catch (error) {\n\n        }\n        const expandedRowRender = (record) => {\n          let expandList = []\n          expandList.push(record)\n          console.log('record111', expandList);\n          const columns = [\n            {\n              title: '',\n              dataIndex: 'quotaType',\n              key: 'quotaType',\n              width: '30%',\n              align: \"left\",\n              render: (text, record, index) => {\n                return <>\n                  <p style={{ textAlign: \"left\" }}>{record.quotaType}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                </>\n              },\n            },\n            {\n              title: '',\n              dataIndex: 'startTime',\n              key: 'name',\n              render: (text, record) => <p style={{ textAlign: \"left\" }}>Start Date: {moment(text).format(\"MMM D, YYYY\")}</p>,\n            },\n          ];\n          return <Table className=\"expandTable\" border={false} showHeader={false} columns={columns} dataSource={expandList} pagination={false} />;\n        };\n        const columns = [\n          {\n            title: '',\n            dataIndex: 'quotaType',\n            key: 'quotaType',\n            width: '30%',\n            render: (text, record, index) => {\n              if (text === 1) {\n                return <p>Premium Monthly</p>;\n              } else if (text === 2) {\n                return <p>Premium Yearly</p>;\n              } else if (text === 3) {\n                return <p>Free Trialy</p>;\n              } else {\n                return '';\n              }\n            },\n          },\n          {\n            title: '',\n            dataIndex: 'endTime',\n            key: 'endTime',\n            align: \"left\",\n            render: (text, record) => <p>Expires {moment(text).format(\"MMM D, YYYY\")}</p>,\n          },\n          {\n            title: '',\n            dataIndex: 'isExpired',\n            width: '20%',\n            key: 'isExpired',\n            render: (text, index) => {\n              if (text === 0) {\n                return <Tag color=\"#87d068\" style={{width: px(65), height: px(22), fontSize: 18}}>Active</Tag>\n              } else {\n                return <Tag color=\"#4a4a4a\" style={{width: px(65), height: px(22), fontSize: 18}}>Expired</Tag>\n\n              }\n            }\n          },\n\n        ];\n        let tableData = subscriptionData;\n        return (\n            <div id=\"subscriptions\">\n                <div className=\"top\">\n                  <div className=\"TitleItem flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n                    <div className=\"title\">Billing & Subscriptions</div>\n                  </div>\n\n                </div>\n\n                <div className=\"content flex\">\n                  <div className=\"TitleItem flex\" style={{ paddingLeft: px(20) }}>\n                    <div className=\"title\" style={{ fontSize: 26 }}>My Subscriptions</div>\n                    <div className=\"subTitle\">\n                      <p>View and manage</p>\n                      <p>the subscriptions you’ve purchased</p>\n                    </div>\n                  </div>\n\n                  <div className=\"walkBtn1\" style={{ marginLeft: px(50) }}>\n                    <div\n                      className=\"walkbtnBox\"\n                      style={{ height: px(40), width: px(200) }}\n                      onClick={() => this.setState({ buyModal: true })}\n                    >\n                      <div className=\"walkText\">Change Subscription</div>\n                    </div>\n                    <div className=\"sub\" style={{ marginTop: px(12) }} onClick={() => this.cancelSub('13f215776b104325a6ba23b0c5931d14')}>Cancel Subscription</div>\n\n                  </div>\n                </div>\n\n                <div className=\"tableDiv\" style={{ height: bodyHeight - px(250) }} >\n                <Table\n                    className='mainTable'\n                    showHeader={false}\n                    columns={columns}\n                    pagination={false}\n                    rowKey={(columns) => columns.orderId}\n                    expandable={{\n                      expandedRowRender,\n                      defaultExpandedRowKeys: ['0'],\n                      // columnWidth: '100px',\n                      expandIconColumnIndex: '4',\n                      expandIcon: ({ expanded, onExpand, record }) =>\n                                expanded ? (\n                                  <Icon component={() => (<img src={expand} />)} onClick={e => onExpand(record, e)}  />\n                                ) : (\n                                  <Icon component={() => (<img src={down} />)} onClick={e => onExpand(record, e)} />\n                                )\n                    }}\n                    dataSource={tableData}\n                    size=\"small\"\n                  />\n                </div>\n\n                <MyModal\n                    visible={this.state.buyModal}\n                    // visible={true}\n\n                    element={\n                        <div className='buyModal'>\n                            <BuySub\n                                cancleFun={() => this.setState({ buyModal: false })}\n                                buyFun={(item) => {\n                                    // window.open('https://www.baidu.com')\n                                    this.buyFun(item)\n                                }}\n                                loadings={this.state.loadings}\n                            />\n                        </div>\n                    }\n                />\n\n\n            </div>\n        )\n    }\n}\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx",["820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837"],"import React, { Component } from \"react\";\nimport { Modal, message, Button } from \"antd\";\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\n\nimport Heard from \"../../utils/heard/Heard\";\nimport { px, win, timerFun } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport { compareObject } from \"../../utils/current\";\nimport { compareArray } from \"../../utils/current\";\nimport { versionComarision } from '../../utils/commonFun';\n\nimport HardAndPetsUI from \"./HardAndPetsUI\";\nimport HardWareTypeUI from \"./hardWareTypeUI\";\nimport AddDevice from \"./AddDevice\";\n\nimport BiggiePage from \"../../pages/biggiePage\";\nimport ScanPage from \"../../pages/scanPage\";\nimport AllPets from \"../../pages/allPetsPage\";\nimport ScheduledPetPage from \"../../pages/scheduledPetsPage\";\nimport Subscriptions from \"../../pages/subscriptions\";\nimport Settings from \"../settings\";\nimport AddScheduledPet from \"../../pages/addScheduledPet\";\nimport PetAndParents from \"../../pages/petAndParents\"\nimport InviteTeam from \"../../pages/inviteTeam\"\nimport Unassigned from \"../../pages/unassigned\"\nimport ClininalStudy from \"../../pages/clinicalStudyPage\";\nimport CombineScales from \"../../pages/combineScales\";\nimport OtterEQPage from '../../pages/otterEQ';\nimport MyAccount from \"../../pages/myAccount\";\nimport TemperaturePage from \"../../pages/temperaturePage\";\nimport MabelPage from \"../mabelPage\";\nimport EnrolledPlan from '../enrolledPlan';\n\nimport ModalClose from \"../../assets/img/ModalClose.png\"\nimport DetectBase from \"../../assets/img/DetectBase.png\"\n\n\n\nimport { connect } from \"react-redux\";\nimport {\n  setHardwareList,\n  selectHardwareModalShowFun,\n  setIsHaveUsbDeviceFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaDeviceIdFun,\n  setMellaMeasureNumFun,\n  setBiggieConnectStatusFun,\n  setBiggieBodyFatFun,\n  setBiggieBodyWeightFun,\n  setBiggieUnitFun,\n  setBiggieSameWeightCountFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n  setReceiveBroadcastHardwareInfoFun,\n} from \"../../store/actions\";\n\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\n\n\nimport \"./mainbody.less\";\nimport { devType } from \"../../config/config\";\nimport MotionCamera from \"../motionCamera\";\nimport DoctorAddPet from \"../doctorAddPet\";\n\n\n// let ipcRenderer = window.require(\"electron\").ipcRenderer;\nlet ipcRenderer = window.electron.ipcRenderer;\nlet isMeasure = false; //是否正在测量,用于判断是否需要发送指定指令给USB,查看硬件是否连接\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\nlet time194 = 0\n\n//用于预测的东西\nlet clinicalYuce = [],\n  clinicalIndex = 0;\n\nlet storage = window.localStorage;\nconst { confirm } = Modal;\n\nclass App extends Component {\n  state = {\n    //body部分窗口高度\n    bodyHeight: 0,\n    //本地保存的硬件类型数组,不包括Add这个类型\n    devicesTypeList: [],\n    //展示硬件类型的数组\n    showHardWareTypeList: [],\n    //是否有USB设备\n    isHaveUsbDevice: true,\n    //mella温度计测量状态\n    mellaMeasureStatus: \"disconnected\", //connected,disconnected,isMeasuring,complete\n\n    //点击菜单的序号\n    clickMenuIndex: \"1\",\n    err07Visible: false,\n    units: '℉',\n    localVersion: '',//底座版本号\n    updateBaseLaterType: false,//底座是否在延迟更新\n    baseModalVisible: false,  // 控制弹窗显隐\n  };\n  componentDidMount() {\n    ipcRenderer.send(\"big\", win());\n    timerFun();\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //获取窗口高度\n    this.resize();\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", this.resize);\n\n    //获取设备类型\n    this.getDevicesType();\n\n    //检测USB设备发来的信息\n    ipcRenderer.on(\"sned\", this._send);\n    //检测是否有USB设备\n    ipcRenderer.on(\"noUSB\", this._noUSB);\n    //定时查看mella温度计是否与底座连接或断开\n    if (devType === 'electron') {\n      this._whether_to_connect_to_mella();\n    }\n\n\n    //获取本地设置\n    this.getLocalSetting();\n    //获取单位\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`) || {}\n    // console.log('----', hardSet);\n    let { isHua, } = hardSet\n    if (isHua === false) {\n      this.setState({\n        units: '℃'\n      })\n    } else {\n      this.setState({\n        units: '℉'\n      })\n    }\n    //获取插入底座设备的版本信息\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] });//这里会导致出现已连接状态TODO\n    //获取底座是否延迟更新\n    ipcRenderer.on('updateBaseLaterType', this.updateBaseLaterType);\n\n  }\n  componentWillUnmount() {\n    //组件销毁，取消监听\n    window.removeEventListener(\"resize\", this.resize);\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n    ipcRenderer.removeListener(\"sned\", this._send);\n    ipcRenderer.removeListener(\"noUSB\", this._noUSB);\n    ipcRenderer.removeListener(\"updateBaseLaterType\", this.updateBaseLaterType);\n    this.detectTimer && clearInterval(this.detectTimer);\n    this.rulerTimer && clearTimeout(this.rulerTimer);\n    message.destroy();\n  }\n  //检测到props里的hardwareList更新\n  UNSAFE_componentWillReceiveProps(prevProps) {\n    //对比props里的hardwareList和state里的hardwareList是否相同\n    if (!compareArray(prevProps.hardwareList, this.state.devicesTypeList)) {\n      let showHardWareTypeList = [].concat(prevProps.hardwareList);\n      showHardWareTypeList.push({\n        type: \"add\",\n        devices: [],\n      });\n      this.setState({\n        devicesTypeList: prevProps.hardwareList,\n        showHardWareTypeList,\n      });\n    }\n    if (!compareObject(prevProps.menuNum, this.state.clickMenuIndex)) {\n      this.setState({\n        clickMenuIndex: prevProps.menuNum,\n      });\n    }\n  }\n  updateBaseLaterType = (e, data) => {\n    this.setState({\n      updateBaseLaterType: data\n    })\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"big\", win());\n  };\n  //获取本地设置\n  getLocalSetting = () => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      let settings = {\n        isHua: true,\n        is15: true,\n        self_tarting: false, //自启动\n        isBacklight: true,\n        isBeep: true,\n        backlightTimer: { length: 140, number: \"45\" },\n        autoOff: { length: 0, number: \"30\" },\n      };\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n    }\n  };\n  //检测USB设备发来的信息\n  _send = (e, data) => {\n    console.log(data);\n    //data就是测量的数据，是十进制的数字\n    this.command(data)();\n    //获取到了版本信息,此底座不是很老版本\n    if (data[2] === 136) {\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\n      console.log('插入底座的版本是: ', localVersion, this.state.updateBaseLaterType);\n      this.setState({ localVersion: localVersion }, () => {\n        if (!this.state.updateBaseLaterType) {\n          this.cloudVersion();\n        }\n      });\n    }\n  };\n  //询问网端底座最新的版本号\n  cloudVersion = () => {\n    getInfoOfLatestDevice('mellabase')\n      .then((res) => {\n\n        if (res.flag) {\n          let { firmwareVersion } = res.data\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion);//true则为线上底座版本大于当前底座版本需要升级\n          if (cloudBigtolocal && !this.state.updateBaseLaterType) {\n            confirm({\n              icon: <ExclamationCircleOutlined />,\n              content: <div>A new version of your base has been detected. Whether to go to update?</div>,\n              centered: true,\n              okText: 'Update',\n              cancelText: 'Update Later',\n              className: 'updateBaseTip',\n              onOk: () => { this.props.history.push('/menuOptions/advancedsettings') },\n              onCancel: () => {\n                ipcRenderer.send('update-base-later');\n              },\n            });\n          } else {\n\n          }\n        } else {\n          message.error('Description Failed to obtain the base version');\n        }\n      })\n      .catch((res) => {\n        message.error('Description Failed to obtain the base version');\n      })\n  }\n\n  //监听是否有USB设备,true代表没有USB设备，false代表有USB设备\n  _noUSB = (e, data) => {\n    if (data === false) {\n      //获取插入设备的版本信息\n      ipcRenderer.send('usbdata', { command: '08', arr: [''] });\n      message.destroy();\n    } else {\n      if (this.state.isHaveUsbDevice) {\n        message.destroy();\n        if (this.props.selectHardwareType !== \"otterEQ\" && this.props.selectHardwareType !== \"camera\") {\n          this.setState({\n            baseModalVisible: true\n          })\n          // message.error(\"The base is not detected. Please insert the base\", 0);\n          Modal.destroyAll();\n        }\n      }\n    }\n    if (data === this.props.isHaveUsbDevice) {\n      this.props.setIsHaveUsbDeviceFun(!data);\n    }\n    if (data === this.state.isHaveUsbDevice) {\n      this.setState({\n        isHaveUsbDevice: !data,\n      });\n    }\n  };\n  //监听mella温度计是否与底座连接或断开\n  _whether_to_connect_to_mella = () => {\n    message.destroy();\n    this.detectTimer && clearInterval(this.detectTimer);\n    //2秒检测一次\n    this.detectTimer = setInterval(() => {\n      exchangeNum++;\n      //如果正在测量或者没有USB设备，不检测\n      let { mellaConnectStatus } = this.props\n      if (this.state.isHaveUsbDevice && mellaConnectStatus !== 'isMeasuring' && mellaConnectStatus !== 'disconnected') {\n        if (exchangeNum % 2 === 0) {\n          //让底座发送查询温度计信息指令\n          ipcRenderer.send(\"usbdata\", { command: \"07\", arr: [\"5A\"] });\n        } else {\n          // console.log('获取温度计31');\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n        }\n      }\n\n\n      //如果底座没有回应，则计算时间差,时间差大于5秒，则没与温度计连接\n      if (new Date() - initTime > 6000) {\n        this._disconnect_to_mella();\n      }\n    }, 2000);\n  };\n  //底座与温度计断开连接\n  _disconnect_to_mella = () => {\n    let { setMellaConnectStatusFun, mellaConnectStatus, setMellaDeviceIdFun, setMellaMeasurePartFun } = this.props;\n    if (mellaConnectStatus !== \"disconnected\") {\n      setMellaConnectStatusFun(\"disconnected\");\n      setMellaMeasurePartFun(\"\");\n    }\n    setMellaDeviceIdFun(\"\");\n  };\n  //底座与温度计连接\n  _connect_to_mella = () => {\n    let { setMellaConnectStatusFun, mellaConnectStatus } = this.props;\n    if (mellaConnectStatus !== \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    }\n  };\n\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    //除了255,其他都是温度计的数据\n    let {\n      setMellaConnectStatusFun,\n      setMellaMeasureValueFun,\n      setMellaPredictValueFun,\n      setMellaMeasurePartFun,\n      mellaMeasurePart,\n      mellaConnectStatus,\n      setBiggieBodyFatFun,\n      setBiggieBodyWeightFun,\n      setBiggieConnectStatusFun,\n      setBiggieUnitFun,\n      setBiggieSameWeightCountFun,\n    } = this.props;\n    let {\n      biggieConnectStatus,\n      biggieBodyFat,\n      biggieBodyWeight,\n      biggieUnit,\n      biggieSameWeightCount,\n    } = this.props.hardwareReduce;\n\n    const instruction = [\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255, 182,\n    ];\n\n    if (newArr[2] !== 7 && newArr[2] !== 255 && newArr[2] !== 182 && newArr[2] !== 136) {\n      initTime = new Date();\n      num07 = 0;\n      if (mellaConnectStatus === \"disconnected\") {\n        this._connect_to_mella();\n      }\n    } else {\n      num07++;\n    }\n\n    const commandArr = {\n      209: () => {\n        //腋温\n        //第一次测量去获取探头ID\n        if (firstEar) {\n          firstEar = false;\n          // console.log(\"去获取探头id\");\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\n        let Temp = temp0;\n        if (\n          Temp === 24.7 ||\n          Temp === 0 ||\n          Temp === null ||\n          Temp === undefined\n        ) {\n          return;\n        }\n\n        let dataS = {\n          sample: clinicalIndex++,\n          data0: temp0,\n          data1: temp1,\n        };\n        clinicalYuce.push(dataS);\n        if (clinicalYuce.length >= 30) {\n          setMellaPredictValueFun(clinicalYuce);\n        }\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n        if (mellaMeasurePart !== \"腋温\" && mellaMeasurePart !== \"肛温\") {\n\n          setMellaMeasurePartFun(\"腋温\");\n        }\n        this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\n      },\n      208: () => {\n        //耳温\n\n        if (firstEar) {\n          firstEar = false;\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        //现在探头0可能不存在，所以把探头0改为探头1\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[8]}`);\n        let Temp = temp0;\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n\n        if (mellaMeasurePart !== \"耳温\") {\n          setMellaMeasurePartFun(\"耳温\");\n        }\n      },\n      193: () => {\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\n        //为了清除黏贴的数据，使用定时器\n        this.time193 && clearTimeout(this.time193);\n        this.time193 = setTimeout(() => {\n          if (new Date() - time194 < 1000) {\n            this.time193 && clearTimeout(this.time193);\n            return;\n          }\n          firstEar = true;\n          if (mellaConnectStatus !== \"complete\") {\n            setMellaConnectStatusFun(\"complete\");\n          }\n\n          let { units } = this.state;\n          let Temp = this.props.mellaMeasureValue;\n          let temp =\n            units === \"℉\"\n              ? (Temp * 1.8 + 32).toFixed(1)\n              : Temp.toFixed(1);\n          if (this.props.selectHardwareType === \"mellaPro\") {\n            console.log('要去写了', units, temp);\n            ipcRenderer.send(\"keyboardWriting\", temp);\n          }\n          this.time193 && clearTimeout(this.time193);\n        }, 500);\n      },\n      194: () => {\n        //硬件收到机器学习结果并停止测量，\n        this.time193 && clearTimeout(this.time193);\n        time194 = new Date()\n        console.log(\"---机器学习\", newArr);\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n        const timer = setTimeout(() => {\n          setMellaMeasureValueFun(this.props.mellaPredictReturnValue);\n\n          firstEar = true;\n          if (mellaConnectStatus !== \"complete\") {\n            setMellaConnectStatusFun(\"complete\");\n          }\n\n          let { units } = this.state;\n          let Temp = this.props.mellaPredictReturnValue;\n          let temp =\n            units === \"℉\"\n              ? (Temp * 1.8 + 32).toFixed(1)\n              : Temp.toFixed(1);\n          if (this.props.selectHardwareType === \"mellaPro\") {\n            ipcRenderer.send(\"keyboardWriting\", temp);\n          }\n          clearTimeout(timer);\n        }, 80);\n        clinicalYuce = [];\n        clinicalIndex = 0;\n      },\n      192: () => {\n        //温度计收到40开始数据后返回的指令\n        switch (newArr[3]) {\n          case 90:\n            console.log(\"有探头，开始测量的返回指令·\");\n            break;\n          case 11:\n            console.log(\"没有探头，开始测量的返回值\");\n            break;\n        }\n      },\n      129: () => {\n        //返回硬件版本号\n        console.log(`返回的版本号为${newArr[3]}`);\n      },\n      135: () => {\n        //硬件的一些基本信息\n        /**\n         * ______________新版、旧版没法控制温度计__________________\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\n         * newArr[7] 无操作关机时间\n         * newArr[8] 背光时间\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\n         * newArr[10] 测量单位    01代表℃，00代表℉\n         */\n\n        let hardSet = electronStore.get(\n          `${storage.userId}-hardwareConfiguration`\n        );\n        if (!hardSet) {\n          hardSet = {\n            isHua: true,\n            is15: true,\n            self_tarting: false, //自启动\n            isBacklight: true,\n            isBeep: true,\n            backlightTimer: { length: 140, number: \"45\" },\n            autoOff: { length: 0, number: \"30\" },\n          };\n        }\n        let { isHua, is15, self_tarting, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\n\n        let beep = isBeep ? \"11\" : \"00\";\n        let unit = isHua ? \"00\" : \"01\";\n        let autoOffNumber = autoOff.number\n        let backlightTimerNumber = isBacklight ? backlightTimer.number : '00'\n        if (\n          dataArr1[7] === autoOffNumber &&\n          dataArr1[8] === backlightTimerNumber &&\n          dataArr1[9] === beep &&\n          dataArr1[10] === unit\n        ) {\n        } else {\n          let setArr = [\"03\", \"ed\", \"07\", \"dd\", autoOffNumber, backlightTimerNumber, beep, unit,];\n          ipcRenderer.send(\"usbdata\", { command: \"21\", arr: setArr });\n        }\n      },\n      238: () => {\n        //探头松动\n        console.log(\"探头松动\");\n        message.error(\n          \"The probe is loose, please re-install and measure again\",\n          5\n        );\n      },\n      98: () => {\n        //蓝牙连接断开\n        console.log(\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\n        );\n        firstEar = true;\n        // console.log(new Date() - is97Time);\n        if (new Date() - is97Time < 1300) {\n          return;\n        }\n        this._disconnect_to_mella();\n      },\n      97: () => {\n        //蓝牙连接\n        console.log(\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\n        );\n        this.getIdTimer && clearTimeout(this.getIdTimer);\n        this.getIdTimer = setTimeout(() => {\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n          this.getIdTimer && clearTimeout(this.getIdTimer);\n        }, 50);\n        is97Time = new Date();\n        this._connect_to_mella();\n      },\n      177: () => {\n        //探头id\n        let dataArr1 = newArr.map((item) => {\n          if (item.toString(16).length < 2) {\n            return \"0\" + item.toString(16);\n          } else {\n            return item.toString(16);\n          }\n        });\n\n        let id = \"\";\n        for (let i = 3; i < dataArr1.length - 2; i++) {\n          id += dataArr1[i];\n        }\n        setMellaDeviceIdFun(id);\n        if (dataArr1[7] === \"01\") {\n          if (mellaMeasurePart !== \"腋温\") {\n            setMellaMeasurePartFun(\"腋温\");\n          }\n        } else if (dataArr1[7] === \"02\") {\n          if (mellaMeasurePart !== \"肛温\") {\n            setMellaMeasurePartFun(\"肛温\");\n          }\n        } else if (dataArr1[7] === \"03\") {\n          if (mellaMeasurePart !== \"耳温\") {\n            setMellaMeasurePartFun(\"耳温\");\n          }\n        }\n      },\n      7: () => {\n        //发什么收什么，需要去重新插拔底座\n        console.log(\"重新插拔底座\");\n        if (num07 === 3 && this.state.err07Visible === false) {\n          this.setState({\n            err07Visible: true,\n          });\n        }\n      },\n      255: () => {\n        console.log('newArr', newArr);\n        let length = newArr.length;\n        let frameLength = newArr[1]; //帧长\n        let itemLength = newArr[3] + 1; //数据位的长度   13\n        let dataIndex = 0;\n        let bluName = \"\";\n        let bluData = [];\n\n        while (itemLength < length && itemLength + 3 <= frameLength) {\n          let itemData = [];\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5]);\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = \"\";\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16);\n                str += String.fromCharCode(item);\n              }\n              bluName = str;\n              // console.log('--蓝牙名称:', bluName);\n\n              break;\n\n            case 255:\n              bluData = itemData;\n              break;\n            case 7:\n              console.log(\"---UUID\");\n              break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n\n            case 3:\n              // console.log('----尺子的,不知道什么用');\n              break;\n\n            default:\n              console.log(\"直接跳出循环\");\n              return;\n          }\n          dataIndex = itemLength;\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let { setReceiveBroadcastHardwareInfoFun, hardwareReduce } = this.props;\n\n        let { receiveBroadcastHardwareInfo } = hardwareReduce;\n\n        if (bluName.indexOf(\"C19\") !== -1 && bluData.length > 10) {\n          let json = {\n            deviceType: \"biggie\",\n            macId: \"00:00:00:00:00:00\",\n            name: bluName,\n          };\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n\n          let weight = `0x${bluData[10]}${bluData[11]}`;\n          let impedance = `0x${bluData[12]}${bluData[13]}`;\n          let sendWeight = null;\n          //C19发送的体重值单位只是KG\n          try {\n            weight = parseInt(weight) / 100;\n            if (impedance) {\n              impedance = parseInt(impedance);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n          if (weight === biggieBodyWeight) {\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\n          } else {\n            setBiggieSameWeightCountFun(0);\n            setBiggieBodyWeightFun(weight);\n          }\n          if (impedance) {\n            setBiggieBodyFatFun(impedance);\n          }\n          if (biggieConnectStatus !== \"isMeasuring\") {\n            setBiggieConnectStatusFun(\"isMeasuring\");\n          }\n          if (biggieUnit !== \"kg\") {\n            setBiggieUnitFun(\"kg\");\n          }\n        } else if (bluName.indexOf(\"Mella Measure\") !== -1) {\n          let {\n            hardwareReduce,\n            setRulerConfirmCountFun,\n            setRulerConnectStatusFun,\n            setRulerMeasureValueFun,\n            setRulerUnitFun,\n          } = this.props;\n          let {\n            rulerConnectStatus,\n            rulerMeasureValue,\n            rulerUnit,\n            rulerConfirmCount,\n            receiveBroadcastHardwareInfo,\n          } = hardwareReduce;\n          // console.log('结束循环蓝牙名称', bluData)\n          let confirmBtn = bluData[8]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\n          let rulerUnitNum = parseInt(bluData[11], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\n          let newVal = null; //为测量数值，和单位匹配对应\n          const ITEMINDEX = 6;\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n          let json = {\n            deviceType: \"tape\",\n            macId: mac,\n            name: bluName,\n          };\n\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n\n          if (units !== rulerUnit) {\n            setRulerUnitFun(units);\n          }\n          if (rulerConnectStatus !== \"isMeasuring\") {\n            setRulerConnectStatusFun(\"isMeasuring\");\n          }\n          this.rulerTimer && clearTimeout(this.rulerTimer);\n          this.rulerTimer = setTimeout(() => {\n            setRulerConnectStatusFun(\"disconnected\");\n          }, 5000);\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n          let num1 = bluData[9];\n          let num2 = bluData[10];\n          let num = getVal(num1, num2);\n          try {\n            newVal = parseFloat(num);\n            if (rulerUnitNum === 17) {\n              newVal = newVal.toFixed(2);\n            } else {\n              newVal = newVal.toFixed(1);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n\n          function getVal(shi, xiaoshuo) {\n            let num1 = parseInt(shi, 16);\n            let num2 = parseInt(xiaoshuo, 16);\n            return `${num1}.${num2}`;\n          }\n          if (newVal !== rulerMeasureValue) {\n            setRulerMeasureValueFun(newVal);\n          }\n\n          //点击了确认按钮\n\n          if (\n            confirmBtn[1] === \"2\" &&\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\n            confirmBtn[0] !== null\n          ) {\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\n          }\n        } else if (bluName.indexOf(\"Biggie\") !== -1) {\n          this.timeER && clearTimeout(this.timeER)\n          this.timeER = setTimeout(() => {\n            setBiggieConnectStatusFun('disconnected')\n          }, 3000)\n          if(bluData.length == 0 ) {\n            setBiggieConnectStatusFun('connected')\n          } else if ( bluData.length <= 13 ) {\n            return ;\n          }\n          // console.log(\"biggie\", bluData);\n          if (bluData[0] !== \"aa\") {\n            return;\n          }\n          function getVal(shi) {\n            if (`${shi}`.length < 2) {\n              return `0${shi}`;\n            }\n            return `${shi}`;\n          }\n\n          let newArr = bluData;\n\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n\n          let json = {\n            deviceType: \"biggie\",\n            macId: mac,\n            name: bluName,\n          };\n\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n          //定义体重的控制字符\n          let weightControl = newArr[8];\n          //定义体重的值\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(\n            newArr[10].toString(16)\n          )}`;\n          weight = parseInt(weight, 16);\n          //定义体脂值\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(\n            newArr[13].toString(16)\n          )}`;\n          impedance = parseInt(impedance, 16);\n          let arr11 = getVal(newArr[11].toString(16));\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\n\n          let weightUnits = arr11[1] === \"1\" ? \"lb\" : \"kg\";\n\n          let biggieStatus = \"isMeasuring\";\n          switch (weightControl) {\n            case 1:\n              biggieStatus = \"connected\";\n              break;\n            case 2:\n              biggieStatus = \"isMeasuring\";\n              break;\n            case 3:\n              biggieStatus = \"complete\";\n              break;\n            default:\n              break;\n          }\n\n\n\n          if (biggieStatus !== biggieConnectStatus) {\n            setBiggieConnectStatusFun(biggieStatus);\n          }\n          if (weightUnits !== biggieUnit) {\n            setBiggieUnitFun(weightUnits);\n          }\n          if (weight !== biggieBodyWeight) {\n            setBiggieBodyWeightFun(weight);\n            setBiggieSameWeightCountFun(0);\n          } else {\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\n          }\n          if (impedance !== biggieBodyFat) {\n            setBiggieBodyFatFun(impedance);\n          }\n        } else if (bluName.indexOf(\"MaeBowl\") !== -1 && bluData.length > 15) {\n          function getVal(shi) {\n            if (`${shi}`.length < 2) {\n              return `0${shi}`;\n            }\n            return `${shi}`;\n          }\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n          //定义硬件版本号\n          let hardwareVersion = bluData[7] + bluData[8];\n          //定义软件版本号\n          let softwareVersion = bluData[9];\n          //定义wifi标志位\n          let wifiFlag = bluData[10];\n          //定义控制字\n          let control = bluData[11];\n          //定义重量\n          let weight = `${getVal(bluData[12].toString(16))}${getVal(bluData[13].toString(16))}`\n          weight = parseInt(weight, 16);\n          let arr11 = bluData[14]\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\n          let weightUnits = null\n          switch (arr11[1]) {\n            case '0':\n              weightUnits = 'kg'\n\n              break;\n            case '1':\n              weightUnits = 'lb'\n\n              break;\n            case '2':\n              weightUnits = 'g'\n\n              break;\n            case '3':\n              weightUnits = 'ml'\n\n              break;\n            case '4':\n              weightUnits = 'oz'\n\n              break;\n\n            default:\n              break;\n          }\n\n        } else if (bluName.indexOf(\"Tabby\") !== -1 && bluData.length > 10) {\n          // console.log('硬件名称', bluName, '-----硬件数据', bluData);\n          let {\n            hardwareReduce,\n            setRulerConfirmCountFun,\n            setRulerConnectStatusFun,\n            setRulerMeasureValueFun,\n            setRulerUnitFun,\n          } = this.props;\n          let {\n            rulerConnectStatus,\n            rulerMeasureValue,\n            rulerUnit,\n            rulerConfirmCount,\n            receiveBroadcastHardwareInfo,\n          } = hardwareReduce;\n          let confirmBtn = bluData[10]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\n          let rulerUnitNum = parseInt(bluData[13], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\n          let newVal = null; //为测量数值，和单位匹配对应\n          const ITEMINDEX = 9;\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n          let json = {\n            deviceType: \"tape\",\n            macId: mac,\n            name: bluName,\n          };\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n\n          if (units !== rulerUnit) {\n            setRulerUnitFun(units);\n          }\n          if (rulerConnectStatus !== \"isMeasuring\") {\n            setRulerConnectStatusFun(\"isMeasuring\");\n          }\n          this.rulerTimer && clearTimeout(this.rulerTimer);\n          this.rulerTimer = setTimeout(() => {\n            setRulerConnectStatusFun(\"disconnected\");\n          }, 5000);\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n          let num1 = bluData[11];\n          let num2 = bluData[12];\n          let num = getVal(num1, num2, units);\n          // try {\n          //   newVal = parseFloat(num);\n          //   if (rulerUnitNum === 17) {\n          //     newVal = newVal.toFixed(2);\n          //   } else {\n          //     newVal = newVal.toFixed(1);\n          //   }\n          // } catch (error) {\n          //   console.log(error);\n          // }\n          newVal = num\n\n          function getVal(shi, xiaoshuo, units) {\n            let num1 = parseInt(shi, 16);\n            let num2 = parseInt(xiaoshuo, 16);\n            // console.log(shi, xiaoshuo, num1, num2, `${num1}.${num2}`, units);\n            if (units === 'cm') {\n              let value = parseFloat(`${num1}.${num2}`).toFixed(1)\n              return value\n            } else {\n              if (num2 < 10) {\n                num2 = `0${num2}`\n              }\n              let value = parseFloat(`${num1}.${num2}`).toFixed(2)\n              return value\n            }\n\n          }\n          if (newVal !== rulerMeasureValue) {\n            setRulerMeasureValueFun(newVal);\n          }\n\n          //点击了确认按钮\n\n          if (\n            confirmBtn[1] === \"2\" &&\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\n            confirmBtn[0] !== null\n          ) {\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\n          }\n\n\n\n\n        }\n      },\n      182: () => {\n        console.log(\"打开了底座通信\");\n      },\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n\n  testCheck = (arr) => {\n    if (arr.length < 7) {\n      return false;\n    }\n    let i = 7;\n    let checkFloag = arr[i];\n\n    for (i = 8; i < arr.length - 2; i++) {\n      checkFloag = checkFloag ^ arr[i];\n    }\n    return checkFloag;\n  };\n  getMac = (arr) => {\n    // console.log(arr);\n    let str = arr[1].toString(16);\n    if (str.length === 1) {\n      str = \"0\" + str;\n    }\n    for (let i = 2; i < 7; i++) {\n      let item = arr[i].toString(16);\n      if (item.length === 1) {\n        item = \"0\" + item;\n      }\n      str += `:${item}`;\n      // }\n    }\n\n    return str;\n  };\n\n  //监听屏幕窗口改变\n  resize = () => {\n    let { offsetWidth, offsetHeight } = this.mainbody;\n    // console.log('resize', this.mainbody, { offsetWidth, offsetHeight });\n    if (offsetHeight !== this.state.bodyHeight) {\n      this.setState({\n        bodyHeight: offsetHeight - px(50),\n      });\n    }\n  };\n  //获取设备类型(渲染左侧硬件种类侧边栏)\n  getDevicesType = () => {\n    // let devicesTypeList = [\n    //   {\n    //     type: 'mellaPro',\n    //     devices: [\n    //       {\n    //         name: 'mellaPro',\n    //         mac: '',\n    //         deviceType: 'mellaPro',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'biggie',\n    //     devices: [\n    //       {\n    //         name: 'biggie',\n    //         mac: '',\n    //         deviceType: 'biggie',\n    //         examRoom: '',\n    //       },\n    //       {\n    //         name: 'biggie002',\n    //         mac: '1253',\n    //         deviceType: 'biggie',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'otterEQ',\n    //     devices: [\n    //       {\n    //         name: 'otterEQ',\n    //         mac: '',\n    //         deviceType: 'otterEQ',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n\n    //   {\n    //     type: 'rfid',\n    //     devices: [\n    //       {\n    //         name: 'rfid',\n    //         mac: '',\n    //         deviceType: 'rfid',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'tape',\n    //     devices: [\n    //       {\n    //         name: 'tape',\n    //         mac: '',\n    //         deviceType: 'tape',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'maeBowl',\n    //     devices: [\n    //       {\n    //         name: 'maeBowl',\n    //         mac: '',\n    //         deviceType: 'maeBowl',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   }\n    // ]\n\n    let devicesTypeList =\n      electronStore.get(\n        `${storage.lastOrganization}-${storage.userId}-devicesTypeList`\n      ) || [];\n    // console.log(\"获取的设22222备列表\", devicesTypeList);\n    if (devicesTypeList.length === 0) {\n      devicesTypeList.push({\n        type: \"mellaPro\",\n        devices: [\n          {\n            name: \"mellaPro\",\n            mac: \"\",\n            deviceType: \"mellaPro\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"biggie\",\n        devices: [\n          {\n            name: \"biggie\",\n            mac: \"\",\n            deviceType: \"biggie\",\n            examRoom: \"\",\n          },\n          {\n            name: \"biggie002\",\n            mac: \"1253\",\n            deviceType: \"biggie\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"tape\",\n        devices: [\n          // {\n          //   name: \"tape\",\n          //   mac: \"45264\",\n          //   deviceType: \"tape\",\n          //   examRoom: \"\",\n          // },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"otterEQ\",\n        devices: [\n          {\n            name: \"otterEQ\",\n            mac: \"375082\",\n            deviceType: \"otterEQ\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"mabel\",\n        devices: [\n          {\n            name: \"mabel\",\n            mac: \"2.1.5.123.5\",\n            deviceType: \"mabel\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"camera\",\n        devices: [\n          {\n            name: \"camera\",\n            mac: \"\",\n            deviceType: \"camera\",\n            examRoom: \"\",\n          },\n        ],\n      });\n    }\n\n    let hardList = [].concat(devicesTypeList);\n    this.props.setHardwareList(hardList);\n    let showHardWareTypeList = [].concat(devicesTypeList);\n    showHardWareTypeList.push({\n      type: \"add\",\n      devices: [],\n    });\n\n    this.setState({\n      devicesTypeList,\n      showHardWareTypeList,\n    });\n  };\n  body = () => {\n    let { selectHardwareType } = this.props;\n\n    let { bodyHeight, clickMenuIndex } = this.state;\n    let measurePage = null;\n    //clickMenuIndex 点击菜单的序号\n    switch (clickMenuIndex) {\n      case \"1\":\n        if (electronStore.get(`${storage.userId}-isClical`)) {\n          return (\n            <>\n              <HardAndPetsUI bodyHeight={bodyHeight} />\n              <ClininalStudy bodyHeight={bodyHeight} />\n            </>\n          );\n        } else {\n          switch (selectHardwareType) {\n\n            case \"mellaPro\":\n              measurePage = <TemperaturePage bodyHeight={bodyHeight} />;\n\n              break;\n            case \"biggie\":\n              measurePage = <BiggiePage bodyHeight={bodyHeight} />;\n              break;\n\n            case \"tape\":\n              measurePage = <ScanPage bodyHeight={bodyHeight} />;\n              break;\n            case \"otterEQ\":\n              measurePage = <OtterEQPage bodyHeight={bodyHeight} />;\n              break;\n            case \"mabel\":\n              measurePage = <MabelPage bodyHeight={bodyHeight} />;\n              break;\n\n            case \"camera\":\n              measurePage = <MotionCamera bodyHeight={bodyHeight} />;\n\n\n            default:\n              break;\n          }\n          if (selectHardwareType === \"add\") {\n            return <AddDevice bodyHeight={bodyHeight} />;\n          } else if (selectHardwareType === 'prescribePlan') {\n            return <EnrolledPlan bodyHeight={bodyHeight} />;\n          }\n          else {\n            return (\n              <>\n                <HardAndPetsUI bodyHeight={bodyHeight} />\n                {measurePage}\n              </>\n            );\n          }\n        }\n      case \"2\":\n        return <AllPets bodyHeight={bodyHeight} />;\n      case \"CombineScales\":\n        return <CombineScales bodyHeight={bodyHeight} />;\n      case \"AddDevice\":\n        return <AddDevice bodyHeight={bodyHeight} />;\n      // 配置左侧菜单\n      case \"AddPet\":\n        return <DoctorAddPet />;\n      case \"3\":\n        return <ScheduledPetPage bodyHeight={bodyHeight} />;\n      case \"5\":\n        return <Settings />\n      case \"HardWareSettings\":\n        return <Settings />\n      case \"PetAndParents\":\n        return <PetAndParents />;\n      case \"AddScheduledPet\":\n        return <AddScheduledPet bodyHeight={bodyHeight} />;\n      // 配置菜单\n      case \"Unassigned0\":\n        return <Unassigned deviceType={0} />;\n      case \"Unassigned1\":\n        return <Unassigned deviceType={1} />;\n      case \"InviteTeam\":\n        return <InviteTeam isAddDoctor={true} />;\n      // case \"TemperatureHistory\":\n      //   return <AddScheduledPet bodyHeight={bodyHeight} />;\n        //   case \"AddScheduledPet\":\n        // return <AddScheduledPet />;\n        // case \"AddScheduledPet\":\n        // return <AddScheduledPet />;\n        // case \"AddScheduledPet\":\n        // return <AddScheduledPet />;\n        // case \"AddScheduledPet\":\n        // return <AddScheduledPet />;\n      case \"6\":\n        return (\n          <>\n            <HardAndPetsUI bodyHeight={bodyHeight} />\n            <ClininalStudy bodyHeight={bodyHeight} />\n          </>\n        );\n      case \"7\":\n        return <Subscriptions />\n      case \"4\":\n        return (\n          <MyAccount bodyHeight={bodyHeight} />\n        );\n      default:\n        break;\n    }\n  };\n\n  render() {\n    let { bodyHeight } = this.state;\n\n    return (\n      <div\n        className=\"flex\"\n        id=\"mainbody\"\n        ref={(val) => (this.mainbody = val)}\n        onClick={() => {\n          if (this.props.selectHardwareModalShowFun) {\n            this.props.selectHardwareModalShowFun(false);\n          }\n        }}\n      >\n        <Heard />\n        <div className=\"mainbody-body\">\n          <HardWareTypeUI\n            bodyHeight={bodyHeight}\n            devicesTypeList={this.state.showHardWareTypeList}\n          />\n          {this.body()}\n        </div>\n        <Modal\n          open={this.state.err07Visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id=\"vetPrifileModal\">\n            <div className=\"title\">prompt</div>\n\n            <div className=\"text\">Please re-plug the base device</div>\n\n            <div\n              className=\"btn\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                marginBottom: \"5px\",\n              }}\n            >\n              <button\n                onClick={() => {\n                  this.setState({\n                    err07Visible: false,\n                  });\n                  num07 = 0;\n                }}\n              >\n                OK\n              </button>\n            </div>\n          </div>\n        </Modal>\n         <Modal\n          open={this.state.baseModalVisible}\n          onOk={this.handleOk}\n          centered\n          onCancel={() => this.setState({ baseModalVisible: false })}\n          width={430}\n          footer={[]}\n          className=\"baseNotDetected\"\n        >\n          <div className=\"modalContainer\">\n            <img src={ModalClose} alt=\"\" width={50} height={50} />\n            <div className=\"title\">\n              <span>Base Not Detected</span>\n            </div>\n            <div className=\"content\">\n              <p>Please connect your </p>\n              <p>charging base to computer </p>\n              <p>or <span style={{textDecoration: 'underline', color: '#E1206D'}}>update your base.</span> </p>\n            </div>\n            <img style={{marginBottom: '20px'}} src={DetectBase} alt=\"\" width={280} height={200} />\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default connect(\n  (state) => ({\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasurePart: state.hardwareReduce.mellaMeasurePart,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareReduce: state.hardwareReduce,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n    menuNum: state.userReduce.menuNum,\n    mellaPredictReturnValue: state.hardwareReduce.mellaPredictReturnValue,\n    test: state.userReduce.test\n  }),\n  {\n    setHardwareList,\n    selectHardwareModalShowFun,\n    setIsHaveUsbDeviceFun,\n\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaDeviceIdFun,\n    setBiggieConnectStatusFun,\n    setBiggieBodyFatFun,\n    setBiggieBodyWeightFun,\n    setBiggieUnitFun,\n    setBiggieSameWeightCountFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n    setReceiveBroadcastHardwareInfoFun,\n    setMellaMeasureNumFun,\n  }\n)(App);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",["838","839","840"],"\nimport React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\n\nimport './minClose.less'\nimport { px, mTop } from './../px'\nimport rMin_red from './../../assets/img/min-red.png'\nimport rClose_red from './../../assets/img/close-red.png'\n\nimport rMin_white from './../../assets/img/min-white.png'\nimport rClose_white from './../../assets/img/close-white.png'\nimport { connect } from 'react-redux';\n\nlet ipcRenderer = window.electron.ipcRenderer\n\n/**\n *\n * @param {string} minHeight 最小化、最大化方块的宽高\n * @param {number} imgWidth 最小化、最大化图片的高度\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\n */\nconst MinClose = ({ minHeight, imgWidth, systemType }) => {\n  const [minbgc, setMinbgc] = useState('')\n  const [rMin, setRMin] = useState(rMin_red)\n  const [closebgc, setClosebgc] = useState('')\n  const [rClose, setRClose] = useState(rClose_red)\n\n  const [closeText, setCloseText] = useState('')\n  const [minText, setMinText] = useState('')\n\n  const minMouseEnter = () => {\n    setMinbgc('rgba(70, 70, 70, 0.5)')\n    setRMin(rMin_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const minMouseLeave = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const minClock = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    ipcRenderer.send('window-min')\n\n  }\n\n\n  const closeMouseEnter = () => {\n    setClosebgc('rgba(232,17,35)')\n    setRClose(rClose_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const closeMouseLeave = () => {\n    setClosebgc('')\n    setRClose(rClose_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const closeClock = () => {\n    ipcRenderer.send('window-close')\n  }\n  // console.log('systemType', systemType);\n\n  const body = () => {\n    if (systemType === 'mac') {\n      return (\n        <>\n          <div\n            className='macStyle'\n            style={{ marginLeft: '21px' }}\n            onClick={closeClock}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <div className='mactext'>{closeText} </div>\n          </div>\n\n          <div\n            className='macStyle'\n            onClick={minClock}\n            style={{ backgroundColor: 'rgb(254,180,41' }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <div className='mactext'>{minText} </div>\n          </div>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <div\n            className='min_icon'\n            onClick={minClock}\n            style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n          <div\n            className='min_icon'\n            onClick={closeClock}\n            style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n        </>\n      )\n    }\n  }\n\n  return (\n    <div id='minClose' >\n      {body()}\n    </div>\n  )\n}\n\nMinClose.propTypes = {\n  minHeight: PropTypes.string,\n  imgWidth: PropTypes.string,\n}\nMinClose.defaultProps = {\n  minHeight: '40px',\n  imgWidth: `${px(20)}px`\n\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(MinClose)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",["841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869"],"import React, { useState, useEffect } from \"react\";\nimport { Menu, Popover, Button, Modal, message } from \"antd\";\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\n\nimport help from \"./../../assets/images/help.png\";\nimport biggieHelp from \"./../../assets/images/biggieHelp.png\";\nimport tabbyHelp from \"./../../assets/images/tabbyHelp.png\";\nimport otterEQHelp from \"./../../assets/images/otterEQHelp.png\";\nimport mabelHelp from \"./../../assets/images/mabelHelp.png\";\nimport messageImg from \"./../../assets/images/message.png\";\nimport biggieMessage from \"./../../assets/images/biggieMessage.png\";\nimport dog from \"./../../assets/images/reddog.png\";\nimport cat from \"./../../assets/images/redcat.png\";\nimport other from \"./../../assets/images/redother.png\";\nimport menu from \"./../../assets/img/menu.png\";\nimport close from \"./../../assets/img/close.png\";\nimport jinggao from \"./../../assets/img/jinggao.png\";\nimport redclose from \"./../../assets/img/redclose.png\";\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\n\nimport { mTop, px, MTop } from \"../px\";\nimport electronStore from \"../electronStore\";\nimport MyModal from './../myModal/MyModal'\nimport { version, updateTime } from \"./../appversion\";\n\nimport { connect } from 'react-redux'\nimport { setMenuNum, setSelectHardwareType, petDetailInfoFun, setMenuActive } from '../../store/actions';\nimport moment from 'moment'\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { getPetInfoByRFID, getPetByPetNameOrPatientId, getPetInfoByRFID1 } from \"../../api\";\n\nimport \"./heard.less\";\nimport MinClose from \"../minClose/MinClose\";\n\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer;\nlet mouseoutTimer = null;\nlet matchingTimer = null;\n/**\n *\n * @param {function} onReturn  点击返回按钮后调用的函数\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\n * @returns\n */\n\nconst Heard = ({\n  onSearch,\n  blueSearch,\n  setMenuNum,\n  setSelectHardwareType,\n  setMenuActive,\n  petListArr,\n  petDetailInfoFun,\n  selectHardwareType,\n  systemType,\n  activeIndex,        // 菜单高亮\n}) => {\n  let history = useHistory();\n\n  const [placeContent, setPlaceholder] = useState('Search Pet')\n  const [minbgc, setMinbgc] = useState('')        //最小化的背景颜色\n  const [closebgc, setClosebgc] = useState('')    //关闭按钮的背景色\n  const [rMin, setRMin] = useState(rMin_red)      //最小化的图标\n  const [rClose, setRClose] = useState(rClose_red) //关闭按钮图标\n  const [value, setValue] = useState('')          //搜索框输入的内容\n  const [visible, setVisible] = useState(false)   //搜索框下面的搜索model\n  const [loading, setLoading] = useState(false)     //搜索宠物过程中的加载图标\n  const [petList, setPetList] = useState([])        //搜索到的宠物列表\n  const [menuVisible, setMenuVisible] = useState(false)//菜单图标下面的菜单内容图标\n  const [menuMouseOverIndex, setMenuMouseOverIndex] = useState('')//用来定位鼠标滑到哪个菜单选项\n\n  const [modalvisible, setModalVisible] = useState(false)       //关于的弹窗\n  const [modalVis, setModalVis] = useState(false)               //RFID搜索是否有宠物的弹窗\n  const [isNotFound, setIsNotFound] = useState(false)           //是否找到RFID对应的图标\n  const [deviceModel, setDeviceModel] = useState(false)         //我的设备弹窗\n\n  const [noUSB, setNoUSB] = useState(false)                 //没有底座设备\n  const [searchMac, setSearchMac] = useState(false)         //是否展示狗牌mac搜索图标下面的Modal框\n  const [bluDevice, setBluDevice] = useState([])            //搜索到的狗牌设备mac地址\n\n  const [isShowBlePetList, setIsShowBlePetList] = useState(false)  //是否展示狗牌对应宠物\n  const [isMatchPet, setIsMatchPet] = useState(false)      //正在匹配狗牌对应的宠物\n  const [macMatchPetList, setMacMatchPetList] = useState([])\n  const [updateStatus, setUpdateStatus] = useState('init')\n  const [lastVersion, setLastVersion] = useState(version)\n  const [downLoadNum, setDownLoadingNum] = useState(0)\n  const [selectDeviceMac, setSelectDeviceMac] = useState('')\n  const [clickType, setClickType] = useState(false);\n\n  //这里是为了模拟数据所做出来的,后期要改成接口\n  const testPetList = [\n    {\n      macId: \"E0:7C:62:30:08:08\",\n      petName: \"Mella\",\n      petId: \"b9de0868-9202-4fc9-9f1b-325220ceeccf\",\n    },\n    {\n      macId: \"E0:7C:62:03:75:32\",\n      petName: \"Possum\",\n      petId: \"e4b11580-1277-4b10-bd64-46b097f6f882\",\n    },\n    {\n      macId: \"E0:7D:EA:A8:8D:7E\",\n      petName: \"Charlie\",\n      petId: \"b4e7a185-1c7e-4885-ab95-4a7d2d2ada83\",\n    },\n    {\n      macId: \"E0:7C:62:32:76:8C\",\n      petName: \"Noah\",\n      petId: \"01b34bf2-47e6-4036-884f-47299447cb6a\",\n    },\n\n    {\n      macId: \"84:C2:E4:03:C3:06\",\n      petName: \"Whitey\",\n      petId: \"f713a238-f5df-4c85-8c4f-5766b0770c07\",\n    },\n  ];\n  const [size, setSize] = useState({ height: px(47) });\n  const [color, setColor] = useState({ backgroundColor: '#e1206d' })\n  const [headerRef, setHeaderRef] = useState();\n\n  const uploadMessage = (e, data) => {\n    switch (data.payload.status) {\n      case -1:\n        console.log('查询异常');\n        setUpdateStatus('error')\n        break;\n\n      case 0:\n        console.log(\"正在检查应用程序更新\");\n        setUpdateStatus(\"check\");\n        break;\n\n      case 2:\n        console.log(\"正在检查应用程序更新\");\n        setUpdateStatus(\"lastVersion\");\n        break;\n\n      case 1:\n        console.log(\"检测到新版本\");\n        let version = data.output.version;\n        setLastVersion(version);\n\n        setUpdateStatus(\"newVersion\");\n        break;\n\n      // case 3:\n      //   console.log(\"下载新版成功\");\n      // case 4:\n      //   console.log(\"取消背景下载\");\n      case 5:\n        console.log(\"取消安装\");\n        setUpdateStatus(\"init\");\n        break;\n      case 6:\n        console.log(\"正在下载\");\n        setUpdateStatus(\"downLoading\");\n        let loadNum = data.output.percent\n          ? (data.output.percent / 100).toFixed(1)\n          : 0;\n        setDownLoadingNum(loadNum);\n        break;\n\n      default:\n        break;\n    }\n  };\n  const _noUSB = (e, data) => {\n    console.log(\"没有USB设备：\", data);\n    if (data === false) {\n      setNoUSB(false);\n    } else {\n      if (!noUSB) {\n        setNoUSB(true);\n      }\n    }\n  };\n  const _send = (event, data) => {\n    command(data)();\n  };\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  const command = (newArr) => {\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    console.log(dataArr1);\n    const instruction = [255];\n    const commandArr = {\n      255: () => {\n        // console.log(dataArr1);\n        // console.log(bluDevice);\n        let length = newArr.length;\n        let frameLength = newArr[1]; //帧长\n        let itemLength = newArr[3] + 1; //数据位的长度   13\n        let dataIndex = 0;\n\n        let MAC = \"\";\n        let bluData = [];\n        let UUID = \"\";\n        while (itemLength < length && itemLength + 3 <= frameLength) {\n          let itemData = [];\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5]);\n          }\n          // console.log('循环得到的数据', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              break;\n            case 255:\n              break;\n            case 3:\n              break;\n            case 239:\n              // console.log('---mac地址');\n              let str = itemData[0];\n              for (let i = 1; i < itemData.length; i++) {\n                str += `:${itemData[i]}`;\n              }\n              MAC = str.toUpperCase();\n\n              break;\n            case 7:\n              console.log(\"uuid\");\n              let uuid = \"\";\n              for (let i = 0; i < itemData.length; i++) {\n                uuid += `${itemData[i]}`;\n              }\n              UUID = uuid;\n              break;\n            default:\n              return;\n          }\n          dataIndex = itemLength;\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\n\n          // console.log(itemLength, itemLength < length && (itemLength + 3 <= frameLength));\n        }\n        console.log(\"----mac\", MAC, \"-----uuid\", UUID);\n        if (UUID === \"d7895ab1acc74de3b9919e825c24c809\") {\n          // console.log('uuid相等', bluDevice, bluDevice.indexOf(MAC) === -1,);\n          if (bluDevice.indexOf(MAC) === -1) {\n            let dataArr = [].concat(bluDevice);\n            dataArr.push(MAC);\n            setBluDevice(dataArr);\n          }\n        }\n      },\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n  //最小化，关闭的\n  const MINCOLOSE = {\n    minMouseEnter: () => {\n      setMinbgc(\"rgba(70, 70, 70, 0.5)\");\n      setRMin(rMin_white);\n    },\n    minMouseLeave: () => {\n      setMinbgc(\"\");\n      setRMin(rMin_red);\n    },\n    minClock: () => {\n      setMinbgc(\"\");\n      setRMin(rMin_red);\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"window-min\");\n    },\n    closeMouseEnter: () => {\n      setClosebgc(\"rgba(232,17,35)\");\n      setRClose(rClose_white);\n    },\n    closeMouseLeave: () => {\n      setClosebgc(\"\");\n      setRClose(rClose_red);\n    },\n    closeClock: () => {\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"window-close\");\n    },\n  };\n  //搜索框内容\n  const searchPetBody = () => {\n    if (loading) {\n      //加载中\n      return (\n        <div className=\"searchPetLoading\" style={{ padding: `${20}px 0` }}>\n          <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n            <LoadingOutlined\n              style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\n            />\n          </div>\n          <p style={{ color: \"#e1206d\", marginTop: px(5) }}>loading...</p>\n        </div>\n      );\n    } else {\n      if (petList.length > 0) {\n        //找到了宠物，展示出来\n        let option = petList.map((item, index) => {\n          let { speciesId, url } = item;\n\n          let images = `url(${url}?download=0&width=150)`;\n          if (!url) {\n            switch (speciesId) {\n              case 1:\n                images = `url(${cat})`;\n\n                break;\n              case 2:\n                images = `url(${dog})`;\n                break;\n              default:\n                images = `url(${other})`;\n                break;\n            }\n          }\n          return (\n            <li\n              key={`${index}`}\n              style={{ margin: `${px(20)}px 0` }}\n              onClick={() => {\n                setValue('')\n                setVisible(false)\n                setPetList([])\n                petDetailInfoFun(item)\n                // onSearch(item)\n                history.push('/MainBody')\n              }}\n            >\n              <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                <div\n                  className=\"img\"\n                  style={{\n                    width: px(50),\n                    height: px(50),\n                    marginRight: px(40),\n                    borderRadius: px(60),\n                    backgroundImage: images,\n                  }}\n                >\n\n                </div>\n\n                <div className=\"petInfo\">\n                  <p\n                    style={{\n                      color: \"#141414\",\n                      fontWeight: 600,\n                      fontSize: px(20),\n                    }}\n                  >\n                    {item.petName}\n                  </p>\n                  <p\n                    style={{ color: \"#797979\", fontSize: px(18) }}\n                  >{`Patient ID: ${item.patientId}`}</p>\n                  <p\n                    style={{ color: \"#797979\", fontSize: px(18) }}\n                  >{`Owner: ${item.owner}`}</p>\n                </div>\n              </div>\n            </li>\n          );\n        });\n        let liStyle = { backgroundColor: \"#fff\" };\n        if (petList.length > 4) {\n          liStyle = { height: px(500), overflowY: \"auto\" };\n        }\n\n        return (\n          <div className=\"searchPetList\">\n            <ul style={liStyle}>{option}</ul>\n          </div>\n        );\n      } else {\n        //没有发现这个宠物\n        return (\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\n              Pet not found. Would you like to add a new patient?\n            </p>\n\n            <div\n              className=\"searchPetBtn\"\n              style={{ fontSize: px(18) }}\n              onClick={() => {\n                history.push(\"/pet/doctorAddPet\");\n              }}\n            >\n              <p style={{ padding: `${px(8)}px 0` }}>+ New Patient</p>\n            </div>\n          </div>\n        );\n      }\n    }\n  };\n  const inputChange = (text) => {\n    function isNumber(val) {\n      var regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\n      var regNeg =\n        /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\n      if (regPos.test(val) || regNeg.test(val)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    //去除前后空格\n    let search = text.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    setValue(search);\n    if (search.length > 0) {\n      setVisible(true);\n      setLoading(true);\n      //搜索分成两种，一种是通过手输入数据搜索，一种是通过RFID扫描过后搜索\n      if (search.length === 15 && isNumber(search)) {\n        //这是RFID扫描后的搜索\n        getPetInfoByRFID1(search, storage.lastOrganization)\n          .then((res) => {\n            if (res.flag === true && res.data) {\n              let {\n                createTime,\n                patientId,\n                petName,\n                firstName,\n                lastName,\n                url,\n                speciesId,\n                breedName,\n                gender,\n                birthday,\n                petId,\n                rfid,\n                weight,\n              } = res.data;\n              patientId = patientId || \"unknown\";\n              petName = petName || \"unknown\";\n              breedName = breedName || \"unknown\";\n              weight = weight || \"unknown\";\n              let owner = \"\";\n              if (!firstName) {\n                firstName = \"\";\n              }\n              if (!lastName) {\n                lastName = \"\";\n              }\n              if (lastName === \"\" && firstName === \"\") {\n                owner = \"unknown\";\n              } else {\n                owner = `${lastName} ${firstName}`;\n              }\n              createTime = moment(createTime).format(\"X\");\n              let petGender = \"\";\n              switch (`${gender}`) {\n                case \"1\":\n                  petGender = \"F\";\n\n                  break;\n                case \"0\":\n                  petGender = \"M\";\n                  break;\n                default:\n                  petGender = \"unknown\";\n                  break;\n              }\n              let petAge = \"unknown\";\n              if (birthday) {\n                petAge = moment(new Date()).diff(moment(birthday), \"years\");\n                // console.log('petAge', petAge);\n              }\n              let json = {\n                insertedAt: createTime,\n                patientId,\n                petName,\n                owner,\n                breed: breedName,\n                gender: petGender,\n                age: petAge,\n                petId,\n                id: 0,\n                weight,\n                rfid,\n                url,\n                speciesId,\n              };\n              let searchData = [];\n              searchData.push(json);\n              setLoading(false);\n              setPetList(searchData);\n            } else if (\n              res.flag === true &&\n              res.msg === \"The organization has no information about this pet\"\n            ) {\n              setLoading(false);\n              setModalVis(true);\n              setIsNotFound(false);\n              setValue(\"\");\n              setVisible(false);\n            } else {\n              setLoading(false);\n              setModalVis(true);\n              setIsNotFound(true);\n              setValue(\"\");\n              setVisible(false);\n            }\n          })\n          .catch((err) => {\n            setLoading(false);\n          });\n        return;\n      }\n      let params = {\n        searchValue: search,\n      }\n      if (storage.lastOrganization) {\n        params.orgId = storage.lastOrganization\n      }\n      getPetByPetNameOrPatientId(storage.userId, params)\n        .then((res) => {\n          if (res.msg === 'success') {\n            setPetList(res.success)\n          } else {\n            message.warning('system error');\n          }\n        })\n        .catch((err) => {\n          message.error('system error')\n\n        })\n      /**\n       * 使用indexof方法实现模糊查询\n       *     语法：stringObject.indexOf(searchvalue, fromindex)\n       *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n       *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n       *\n       * list         原数组\n       * keyWord      查询关键词\n       * searchData   查询的结果\n       *\n       * toLowerCase（）方法：将字符串统一转成小写\n       * toUpperCase（）方法：将字符串统一转成大写\n       *\n       */\n      // let list = petListArr || [];\n      // let searchData = [];\n      // let keyWord = search;\n      // for (let i = 0; i < list.length; i++) {\n      //   let petName = list[i].petName ? list[i].petName.toLowerCase() : '';\n      //   let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : '';\n      //   let rfid = list[i].rfid || '';\n      //   if (\n      //     `${petName}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n      //     `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n      //     `${rfid}`.indexOf(keyWord) !== -1\n      //   ) {\n      //     searchData.push(list[i]);\n      //   }\n      // }\n      // setPetList(searchData);\n      setLoading(false);\n    } else {\n      setVisible(false);\n    }\n  };\n  //左侧菜单栏\n  const menuList = () => {\n    let name = electronStore.get(`${storage.userId}-isClical`) ? 'Exit Clinical Study Mode' : 'Enter Clinical Study Mode'\n    let menulistArr = [\n      { name: \"Home\", index: \"1\" },\n      { name: \"All Patients\", index: \"2\" },\n      { name: \"Scheduled Patients\", index: \"3\" },\n      { name: \"My Account\", index: \"4\" },\n      { name: \"Org & Practice Profiles\", index: \"10\" },\n      { name: \"Settings\", index: \"5\" },\n      { name: name, index: \"6\" },\n      { name: `Billing & Subscriptions`, index: \"7\" },\n      { name: \"About Mella\", index: \"8\" },\n      { name: \"Log Out\", index: \"9\" },\n    ];\n    let menuOption = menulistArr.map((item, index) => {\n      let pColor = menuMouseOverIndex === item.index ? \"#e1206d\" : null;\n      let activeColor = activeIndex === item.index ? \"#e1206d\" : \"#1a1a1a\";\n      return (\n        <li\n          key={item.index}\n          style={{ padding: `${px(15)}px ${px(20)}px` }}\n          onClick={() => {\n            menulistClick(item);\n          }}\n          onMouseOver={(e) => {\n            setMenuMouseOverIndex(item.index);\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOver();\n          }}\n          onMouseOut={(e) => {\n            setMenuMouseOverIndex(\"\");\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOut();\n          }}\n        >\n          <div className=\"item\" style={{ color: activeColor }}>\n            <p style={{ color: pColor }}>{item.name}</p>\n          </div>\n        </li>\n      );\n    });\n\n    return <ul>{menuOption}</ul>;\n  };\n  const menulistClick = (e) => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setMenuVisible(false);\n    setMenuMouseOverIndex(\"\");\n    setMenuActive(e.index)\n    switch (e.index) {\n      case \"1\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"2\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"3\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"4\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"5\":\n        //跳转到设置\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"6\":\n        if (e.name === \"Exit Clinical Study Mode\") {\n          setMenuNum('1');\n          electronStore.set(`${storage.userId}-isClical`, false)\n          setSelectHardwareType(\"mellaPro\");\n        } else {\n          setMenuNum(e.index);\n          electronStore.set(`${storage.userId}-isClical`, true)\n        }\n        history.push(\"/MainBody\");\n        console.log(\"临床测试\");\n        break;\n      case \"7\":\n        setMenuNum(e.index);\n        break;\n\n      case \"8\":\n        setModalVisible(true);\n        console.log(\"关于\");\n        break;\n      case \"9\":\n        console.log(\"退出登录\");\n        storage.userId = \"\";\n        storage.roleId = \"\";\n        storage.userWorkplace = \"\";\n        storage.lastOrganization = \"\";\n        storage.lastWorkplaceId = \"\";\n        storage.connectionKey = \"\";\n        storage.isClinical = \"false\";\n        setMenuNum(\"1\");\n        history.push(\"/\");\n        break;\n\n      case \"10\":\n        history.push('/menuOptions/ConnectWorkplace');\n        break;\n\n      default:\n        break;\n    }\n  };\n  const menuMouseOut = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    mouseoutTimer = setTimeout(() => {\n      setMenuVisible(false);\n      mouseoutTimer && clearTimeout(mouseoutTimer);\n    }, 1000);\n  };\n  const menuMouseOver = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setMenuVisible(true);\n  };\n  const updatePage = () => {\n    switch (updateStatus) {\n      case \"init\":\n        return (\n          <div\n            className=\"updateBtn\"\n            style={{ height: px(40) }}\n            onClick={() => {\n              setDownLoadingNum(0);\n              setUpdateStatus(\"check\");\n\n              ipcRenderer.send(\"clickUpdateBtn\");\n            }}\n          >\n            Check for Updates\n          </div>\n        );\n      case \"check\":\n        return (\n          <div className=\"updateLoading flex\">\n            <div className=\"loadIcon1\">\n              <LoadingOutlined\n                style={{ fontSize: 30, color: \"#e1206d\", marginRight: px(20) }}\n              />\n            </div>\n            <p style={{ color: \"#e1206d\" }}>Checking for updates</p>\n          </div>\n        );\n      case \"lastVersion\":\n        return (\n          <div style={{ fontSize: px(22), }}>\n            already the latest version\n          </div>\n        )\n      case 'error':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            Failed to get the latest version, please try again later\n          </div>\n        )\n\n\n      case \"newVersion\":\n        return (\n          <div style={{ fontSize: px(22) }}>\n            {`Found new version V${lastVersion}`}\n          </div>\n        );\n      case \"downLoading\":\n        return (\n          <div style={{ fontSize: px(22) }}>\n            {`Download progress: ${downLoadNum}%`}\n          </div>\n        );\n\n      default:\n        break;\n    }\n  };\n  //关于界面\n  const modal = () => {\n    return (\n      <div\n        className=\"settingModal\"\n        style={{ height: `${document.documentElement.clientHeight}px` }}\n      >\n        <div className=\"writeBox\" style={{ borderRadius: px(25) }}>\n          <div className=\"modalHeadr\">\n            <div className=\"close\">\n              <div\n                className=\"imgBox\"\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => {\n                  setModalVisible(false);\n                  setUpdateStatus(\"init\");\n                }}\n              >\n                <img src={close} style={{ width: px(23) }} />\n              </div>\n            </div>\n            <div className=\"heaerCenter\">\n              <div className=\"heaerCenterL\">\n                <img src={mellaLogo} style={{ width: \"80%\" }} />\n              </div>\n              <div className=\"heaerCenterR\">\n                <h1 style={{ fontSize: px(45), marginBottom: px(10) }}>\n                  About the System\n                </h1>\n                <div className=\"version\">\n                  <div\n                    className=\"versionL\"\n                    style={{ fontSize: px(22), width: px(180) }}\n                  >\n                    Version\n                  </div>\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\n                    {version}\n                  </div>\n                </div>\n                <div className=\"version\">\n                  <div\n                    className=\"versionL\"\n                    style={{ fontSize: px(22), width: px(180) }}\n                  >\n                    Last Checked\n                  </div>\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\n                    {updateTime}\n                  </div>\n                </div>\n\n                <div className=\"check\" style={{ marginTop: px(20) }}>\n                  {updatePage()}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"modalfoot\">\n            <div\n              className=\"about\"\n              style={{ marginTop: px(40), fontSize: px(18) }}\n            >\n              Nanjing Jiubian Technology Co., Ltd. was founded in 2019, located\n              in Nanjing Yuhuatai Software Valley Branch City, the company\n              brings together medical sensors, mobile Internet and other\n              industry's top professionals, business areas covering artificial\n              intelligence, smart medical, pet health, sleep monitoring, etc.,\n              is a design, research and development, production, sales, service\n              in one of the high-tech companies. The nine-sided science and\n              technology to \"the number of heavens and earths, starting from\n              one, finally nine\" as the cultural concept, adhering to the\n              essence of Chinese artisans, with an international vision, always\n              standing in the forefront of bio-intelligent medical monitoring\n              technology.\n            </div>\n\n            <div className=\"aLable\">\n              <a\n                href=\"#\"\n                style={{ fontSize: px(18), marginRight: px(50) }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                Terms and Agreements\n              </a>\n              <a\n                href=\"#\"\n                style={{ fontSize: px(18) }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                Privacy Policy\n              </a>\n            </div>\n\n            <div className=\"foot\" style={{ marginBottom: px(40) }}>\n              © 2021 Mella Pet Care All RIghts Reserved\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //设备列表界面\n  const devices = () => {\n    let userId = storage.userId;\n    let deviceList = electronStore.get(`${userId}-deviceList`);\n    console.log(\"---\", deviceList);\n    if (!deviceList) {\n      let str = `${getRamNumber()}`;\n      for (let i = 0; i < 5; i++) {\n        str += `:${getRamNumber()}`;\n      }\n      console.log(\"随机生成的mac地址:\", str);\n      deviceList = [{ name: \"MellaPro\", deviceType: \"mellaPro\", macId: str }];\n      electronStore.set(`${userId}-deviceList`, deviceList);\n    }\n\n    function getRamNumber() {\n      var result = \"\";\n      for (var i = 0; i < 2; i++) {\n        result += Math.floor(Math.random() * 16).toString(16); //获取0-15并通过toString转16进制\n      }\n      //默认字母小写，手动转大写\n      return result.toLowerCase(); //另toLowerCase()转小写\n    }\n    let options = deviceList.map((item, index) => {\n      return (\n        <li\n          className=\"flex\"\n          key={`${index}`}\n          style={{ marginBottom: px(15), marginTop: px(5) }}\n          onClick={() => {\n            console.log(item.macId);\n            setSelectDeviceMac(item.macId);\n          }}\n        >\n          <div className=\"liLeft\" style={{ fontSize: px(16) }}>\n            {item.name}\n          </div>\n          <div className=\"liCenter\" style={{ fontSize: px(16) }}>\n            {item.macId}\n          </div>\n          <div className=\"liRight\">\n            <div\n              className=\"circle flex\"\n              style={{ width: px(18), height: px(18) }}\n            >\n              {selectDeviceMac === item.macId && <div className=\"redCircle\" />}\n            </div>\n          </div>\n        </li>\n      );\n    });\n\n    return (\n      <div\n        className=\"settingModal\"\n        style={{ height: `${document.documentElement.clientHeight}px` }}\n      >\n        <div\n          className=\"writeBox devices\"\n          style={{ borderRadius: px(25), width: px(400) }}\n        >\n          <div className=\"deviceHeadr\">\n            <div className=\"close\">\n              <div\n                className=\"imgBox\"\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => setDeviceModel(false)}\n              >\n                <img src={close} style={{ width: px(23) }} />\n              </div>\n            </div>\n            <div className=\"logo flex\">\n              <img src={mellaLogo} style={{ width: px(60) }} />\n              <div style={{ fontSize: px(22), marginTop: px(30) }}>Devices</div>\n              <div\n                className=\"bodyText\"\n                style={{ fontSize: px(18), marginTop: px(40) }}\n              >\n                Select the device you would\n                <br />\n                like to use or add a new device.\n              </div>\n            </div>\n          </div>\n\n          <div className=\"deviceCenter\">\n            <ul>{options}</ul>\n          </div>\n          <div\n            className=\"deviceFooter flex\"\n            style={{\n              borderBottomLeftRadius: px(25),\n              borderBottomRightRadius: px(25),\n            }}\n          >\n            <div\n              className=\"btn\"\n              style={{ height: px(40) }}\n              onMouseDown={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[0].style.opacity = \"0.5\";\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[0].style.opacity = \"1\";\n              }}\n              onClick={() => {\n                setDeviceModel(false);\n                history.push(\"/menuOptions/AddDevice\");\n              }}\n            >\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\n                New Device\n              </p>\n            </div>\n            <div\n              className=\"btn\"\n              style={{ height: px(40) }}\n              onMouseDown={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[1].style.opacity = \"0.5\";\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[1].style.opacity = \"1\";\n              }}\n              onClick={() => {\n                electronStore.set(\n                  `${storage.userId}-selectDevice`,\n                  selectDeviceMac\n                );\n                setDeviceModel(false);\n              }}\n            >\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\n                Connect\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //点击蓝牙搜索图标\n  const blueClick = () => {\n    console.log(\"点击了蓝牙图标\");\n    setIsShowBlePetList(false);\n    setSearchMac(true);\n  };\n  //点击取消链接\n  const cencleClick = (e) => {\n    console.log(\"mac列表为空,点击取消\");\n    setBluDevice([]);\n    setSearchMac(false);\n    setIsShowBlePetList(false);\n    setIsMatchPet(false);\n    setMacMatchPetList([]);\n    if (e) {\n      e.preventDefault();\n    }\n    matchingTimer && clearTimeout(matchingTimer);\n  };\n  //搜索狗牌的蓝牙\n  const blusearchBody = () => {\n    console.log(\"搜索狗牌的蓝牙\", searchMac, bluDevice);\n    if (isShowBlePetList) {\n      if (isMatchPet) {\n        return (\n          <div\n            className=\"searchPetLoading\"\n            style={{ padding: `${20}px 0`, width: \"100%\" }}\n          >\n            <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n              <LoadingOutlined\n                style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\n              />\n            </div>\n            <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\n              matching...\n            </p>\n\n            <a\n              href=\"#\"\n              style={{ color: \"#e1206d\", marginTop: px(30) }}\n              onClick={cencleClick}\n            >\n              Cencle\n            </a>\n          </div>\n        );\n      } else {\n        if (macMatchPetList.length > 0) {\n          let option = macMatchPetList.map((item, index) => {\n            let { speciesId, url } = item;\n\n            let images = `url(${url}?download=0&width=150)`;\n            if (!url) {\n              switch (speciesId) {\n                case 1:\n                  images = `url(${cat})`;\n                  break;\n                case 2:\n                  images = `url(${dog})`;\n                  break;\n                default:\n                  images = `url(${other})`;\n                  break;\n              }\n            }\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  cencleClick();\n                  onSearch(item);\n                }}\n              >\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                  <div\n                    className=\"img\"\n                    style={{\n                      width: px(50),\n                      height: px(50),\n                      marginRight: px(40),\n                      borderRadius: px(60),\n                      backgroundImage: images,\n                    }}\n                  >\n                    {/* <img src={images} style={{ width: px(40) }} /> */}\n                  </div>\n\n                  <div className=\"petInfo\">\n                    <p\n                      style={{\n                        color: \"#141414\",\n                        fontWeight: 600,\n                        fontSize: px(20),\n                        textAlign: \"start\",\n                      }}\n                    >\n                      {item.petName}\n                    </p>\n                    <p\n                      style={{ color: \"#797979\", fontSize: px(18) }}\n                    >{`Patient ID: ${item.patientId}`}</p>\n                    <p\n                      style={{ color: \"#797979\", fontSize: px(18) }}\n                    >{`Owner: ${item.owner}`}</p>\n                  </div>\n                </div>\n              </li>\n            );\n          });\n          let liStyle = { backgroundColor: \"#fff\" };\n          if (petList.length > 4) {\n            liStyle = { height: px(500), overflowY: \"auto\" };\n          }\n\n          return (\n            <div className=\"searchPetList flex\">\n              <ul style={liStyle}>{option}</ul>\n              <a\n                href=\"#\"\n                style={{\n                  color: \"#e1206d\",\n                  marginTop: px(10),\n                  marginBottom: px(21),\n                }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        }\n      }\n    } else {\n      if (noUSB) {\n        return (\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\n              Please insert address and scan\n            </p>\n\n            <a href=\"#\" style={{ color: \"#e1206d\" }} onClick={cencleClick}>\n              Cencle\n            </a>\n          </div>\n        );\n      } else {\n        if (bluDevice.length > 0) {\n          let option = bluDevice.map((item, index) => {\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  console.log(\"mac列表为空,点击列表内容\");\n                  setBluDevice([]);\n                  // setSearchMac(false)\n                  setIsShowBlePetList(true);\n                  setIsMatchPet(true);\n                  matchingTimer && clearTimeout(matchingTimer);\n                  matchingTimer = setTimeout(() => {\n                    let haveFlog = false,\n                      index = -1;\n                    for (let i = 0; i < testPetList.length; i++) {\n                      if (testPetList[i].macId === item) {\n                        haveFlog = true;\n                        index = i;\n                        break;\n                      }\n                    }\n                    if (haveFlog) {\n                      if (storage.lastOrganization === \"1\") {\n                        matchPet(testPetList[index].petId);\n                      } else {\n                        setModalVis(true);\n                        setIsNotFound(false);\n                        cencleClick();\n                      }\n                    } else {\n                      setModalVis(true);\n                      setIsNotFound(true);\n                      cencleClick();\n                    }\n\n                    setIsMatchPet(false);\n                    matchingTimer && clearTimeout(matchingTimer);\n                  }, 2000);\n                }}\n              >\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                  <div className=\"petInfo\">\n                    <p\n                      style={{\n                        color: \"#141414\",\n                        fontWeight: 600,\n                        fontSize: px(20),\n                      }}\n                    >\n                      mac:{item}\n                    </p>\n                  </div>\n                </div>\n              </li>\n            );\n          });\n          let liStyle = { backgroundColor: \"#fff\" };\n          if (bluDevice.length > 4) {\n            liStyle = { height: px(500), overflowY: \"auto\" };\n          }\n          return (\n            <div className=\"searchPetList\" style={{ flexDirection: \"column\" }}>\n              <ul style={liStyle}>{option}</ul>\n              <a\n                href=\"#\"\n                style={{\n                  color: \"#e1206d\",\n                  marginTop: px(10),\n                  marginBottom: px(21),\n                }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        } else {\n          return (\n            <div\n              className=\"searchPetLoading\"\n              style={{ padding: `${20}px 0`, width: \"100%\" }}\n            >\n              <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n                <LoadingOutlined\n                  style={{\n                    fontSize: 30,\n                    color: \"#e1206d\",\n                    marginTop: mTop(-30),\n                  }}\n                />\n              </div>\n              <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\n                scanning...\n              </p>\n\n              <a\n                href=\"#\"\n                style={{ color: \"#e1206d\", marginTop: px(30) }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        }\n      }\n    }\n  };\n  const matchPet = (searchValue) => {\n    console.log(\"搜索词:\", searchValue);\n    let list = electronStore.get(\"doctorExam\");\n\n    let searchData = [];\n    let keyWord = searchValue;\n    for (let i = 0; i < list.length; i++) {\n      let petName = `${list[i].petId}`;\n      if (keyWord === petName) {\n        searchData.push(list[i]);\n      }\n    }\n\n    setIsMatchPet(false);\n\n    setMacMatchPetList(searchData);\n  };\n  //分配walk-in记录图标\n  const onWalkIn = () => {\n    switch (selectHardwareType) {\n      case 'mellaPro':\n        return (\n          <img\n            src={messageImg}\n            alt=\"\"\n            style={{ height: px(25), width: px(25) }}\n            onClick={() => {\n              setMenuNum('Unassigned0')\n              // history.push({ pathname: \"/menuOptions/unassigned\", deviceType: 0 })\n            }}\n          />\n        );\n      case 'biggie':\n        return (\n          <img\n            src={biggieMessage}\n            alt=\"\"\n            style={{ height: px(25), width: px(25) }}\n            onClick={() => {\n              setMenuNum('Unassigned1')\n              // history.push({ pathname: \"/menuOptions/unassigned\", deviceType: 1 })\n            }}\n          />\n        );\n      case 'tape':\n        return (\n          null\n        );\n      case 'otterEQ':\n        return (\n          null\n        );\n      case 'mabel':\n        return (\n          null\n        );\n      default:\n        return (\n          null\n        );\n    }\n  }\n  //帮助图标切换\n  const onHelp = () => {\n    switch (selectHardwareType) {\n      case 'mellaPro':\n        return (\n          <img src={help} alt=\"\" style={{ height: px(25) }} />\n        );\n      case 'biggie':\n      case 'camera':\n        return (\n          <img src={biggieHelp} alt=\"\" style={{ height: px(25) }} />\n        );\n      case 'tape':\n        return (\n          <img src={tabbyHelp} alt=\"\" style={{ height: px(25) }} />\n        );\n      case 'otterEQ':\n        return (\n          <img src={otterEQHelp} alt=\"\" style={{ height: px(25) }} />\n        );\n      case 'mabel':\n        return (\n          <img src={mabelHelp} alt=\"\" style={{ height: px(25) }} />\n        );\n\n\n\n      default:\n        return (\n          <img src={help} alt=\"\" style={{ height: px(25) }} />\n        );\n    }\n\n  }\n\n  const jiantou = () => {\n    return (\n      <span class=\"icon iconfont\">&#xe61b;</span>\n    )\n  }\n\n  useEffect(() => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setBluDevice([]);\n    return () => {\n      matchingTimer && clearTimeout(matchingTimer);\n    };\n  }, []);\n  useEffect(() => {\n    ipcRenderer.on(\"uploadMessage\", uploadMessage);\n    return () => {\n      ipcRenderer.removeListener(\"uploadMessage\", uploadMessage);\n    };\n  }, []);\n  useEffect(() => {\n    if (blueSearch) {\n      ipcRenderer.on(\"sned\", _send);\n      ipcRenderer.on(\"noUSB\", _noUSB);\n      return () => {\n        ipcRenderer.removeListener(\"sned\", _send);\n        ipcRenderer.removeListener(\"noUSB\", _noUSB);\n      };\n    }\n  }, []);\n  useEffect(() => {\n    //监听屏幕窗口改变\n    setSize({ height: 47 });\n  }, [window.screen.availWidth]);\n  //切换头部颜色\n  useEffect(() => {\n    switch (selectHardwareType) {\n      case 'mellaPro':\n        setColor({ backgroundColor: '#e1206d' });\n        break;\n      case 'biggie':\n        setColor({ backgroundColor: '#12ADE4' });\n        break;\n      case 'tape':\n        setColor({ backgroundColor: '#D5B019' });\n        break;\n      case 'otterEQ':\n        setColor({ backgroundColor: '#FFA132' });\n        break;\n      case 'mabel':\n        setColor({ backgroundColor: '#F78F2F' });\n        break;\n      case 'camera':\n        setColor({ backgroundColor: '#12ADE4' });\n        break;\n      default:\n        setColor({ backgroundColor: '#e1206d' });\n        break;\n    }\n    return (() => { })\n  }, [selectHardwareType]);\n\n  return (\n    <div id=\"heardUI\">\n      <div\n        id=\"heardUITop\"\n        style={{ ...color }}\n      >\n        {\n          systemType === 'mac'\n          ? <div style={{ height: '100%', backgroundColor: '#E7E7E7', width: '80px'}}></div>\n          : <></>\n        }\n      </div>\n      <div\n        id=\"heard\"\n        style={{ ...size, ...color }}\n        ref={(val) => {\n          setHeaderRef(val);\n        }}\n      >\n        <div className=\"l\">\n          {systemType === 'mac' ?\n          (\n            <div className=\"macMinClose\">\n              <MinClose />\n            </div>\n          ) : <></>\n        }\n\n          <div\n            className=\"menuF\"\n            style={{ marginLeft: px(parseInt(`${systemType === 'mac' ? '20' : '30'}`)), marginRight: px(40) }}\n          >\n            <div\n              className=\"menu\"\n              onMouseOver={menuMouseOver}\n              onMouseOut={menuMouseOut}\n            >\n              <img src={menu} style={{ width: px(20) }} />\n              {menuVisible ? (\n                // true\n                <div className=\"manuBody\" style={{ top: px(20), left: px(-40) }}>\n                  <div\n                    className=\"triangle\"\n                    style={{\n                      borderLeft: `${px(10)}px solid transparent`,\n                      borderRight: `${px(10)}px solid transparent`,\n                      borderBottom: `${px(13)}px solid #fff`,\n                      left: px(40),\n                    }}\n                  />\n                  <div className=\"manuBodyList\" style={{ marginTop: px(13) }}>\n                    {menuList()}\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div className=\"search\" style={{ width: px(300) }}>\n            <input\n              // 后续修改，不知道怎么在模板字符串里添加字体图标\n              placeholder=\"Search Pet  &#xe61f;\"\n              // &#xe61f;\n              // placeholder={`${placeContent}`}\n\n              style={{ fontSize: px(16), paddingLeft: px(20) }}\n              value={value}\n              onChange={(text) => {\n                inputChange(text);\n              }}\n              // 后续修改，鼠标聚焦清除placeholder\n              // onFocus={() => setPlaceholder('')}\n              // onBlur={() => setPlaceholder('Search Pet')}\n              onKeyUp={(e) => {\n                // console.log(e);\n                if (e.keyCode === 13) {\n                  console.log(\"回车,去搜索\");\n                }\n                if (e.keyCode === 27) {\n                  console.log(\"清空\");\n                  setValue(\"\");\n                  setVisible(false);\n                }\n              }}\n            />\n            {blueSearch ? (\n              <div\n                className=\"searchIconFa bluSearch\"\n              // style={{ cursor: 'pointer', backgroundColor: 'pink' }}\n              // onClick={blueClick}\n              >\n                <div onClick={blueClick}>\n                  {/* <img src={blueSearchPng} style={{ width: '50%' }} /> */}\n                  <span\n                    className=\" iconfont icon-sousuo searchIcon\"\n                    style={{ fontSize: px(25) }}\n                  />\n                </div>\n\n                {searchMac ? (\n                  // true ?\n                  <div className=\"searchPet flex\" style={{ width: px(400) }}>\n                    <div\n                      className=\"triangle\"\n                      style={{\n                        borderLeft: `${px(20)}px solid transparent`,\n                        borderRight: `${px(20)}px solid transparent`,\n                        borderBottom: `${px(25)}px solid #fff`,\n                        // marginLeft: px(30),\n                        zIndex: 999,\n                      }}\n                    />\n\n                    <div className=\"searchPetBody\" style={{ width: \"100%\" }}>\n                      {blusearchBody()}\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n            ) : (\n              // <div className=\"searchIconFa\">\n              //   <span\n              //     className=\" iconfont icon-sousuo searchIcon\"\n              //     style={{ fontSize: px(25) }}\n              //   />\n              // </div>\n              <>\n              </>\n            )}\n\n            {visible ? (\n              // true ?\n              <div className=\"searchPet\" style={{ top: px(35), width: px(400) }}>\n                <div\n                  className=\"triangle\"\n                  style={{\n                    borderLeft: `${px(20)}px solid transparent`,\n                    borderRight: `${px(20)}px solid transparent`,\n                    borderBottom: `${px(25)}px solid #fff`,\n                    marginLeft: px(30),\n                    zIndex: 999,\n                  }}\n                />\n\n                <div className=\"searchPetBody\">{searchPetBody()}</div>\n              </div>\n            ) : null}\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <div className=\"heardCenter\">\n            <div\n              className=\"message\"\n            >\n\n              {\n                onWalkIn()\n              }\n            </div>\n            <div\n              className=\"help\"\n              style={{ margin: `0 ${px(25)}px` }}\n              onClick={() => history.push(\"/menuOptions/help\")}\n            >\n              {\n                onHelp()\n              }\n            </div>\n          </div>\n          {systemType !== 'mac' && <>\n            <div className=\"min_close\" style={{ paddingRight: px(15) }}>\n              <div\n                className=\"min_icon\"\n                onClick={MINCOLOSE.minClock}\n                style={{ backgroundColor: minbgc, height: px(47), width: px(47) }}\n                onMouseEnter={MINCOLOSE.minMouseEnter}\n                onMouseLeave={MINCOLOSE.minMouseLeave}\n              >\n                <img src={rMin} alt=\"\" style={{ width: px(20) }} />\n              </div>\n              <div\n                className=\"min_icon\"\n                onClick={MINCOLOSE.closeClock}\n                style={{ backgroundColor: closebgc, height: px(47), width: px(47) }}\n                onMouseEnter={MINCOLOSE.closeMouseEnter}\n                onMouseLeave={MINCOLOSE.closeMouseLeave}\n              >\n                <img src={rClose} alt=\"\" style={{ width: px(20) }} />\n              </div>\n            </div>\n          </>}\n\n        </div>\n\n        {modalvisible && modal()}\n        {deviceModel && devices()}\n\n        <MyModal\n          visible={modalVis}\n          element={\n            <div\n              className=\"tip\"\n              style={{ width: px(420), height: px(480), borderRadius: px(20) }}\n            >\n              <div\n                className=\"close\"\n                style={{ height: px(60) }}\n                onClick={() => setModalVis(false)}\n              >\n                <div className=\"flex\" style={{ height: px(60), width: px(60) }}>\n                  <img src={close} alt=\"\" style={{ width: px(20) }} />\n                </div>\n              </div>\n              <div className=\"text\">\n                <h1 style={{ fontSize: px(36), marginTop: px(30) }}>\n                  {\" \"}\n                  {isNotFound ? \"Pet not found!\" : \"Pet found!\"}\n                </h1>\n              </div>\n              <div className=\"flex\" style={{ margin: `${px(20)}px 0` }}>\n                {isNotFound ? (\n                  <img src={redclose} width=\"50px\" />\n                ) : (\n                  <img src={jinggao} width=\"50px\" />\n                )}\n              </div>\n              <div\n                className=\"textbody\"\n                style={{ marginTop: px(30), color: \"#000\" }}\n              >\n                {isNotFound ? (\n                  <p style={{ fontSize: px(22) }}>\n                    {\" \"}\n                    This pet is not on your database\n                  </p>\n                ) : (\n                  <p style={{ fontSize: px(22) }}>\n                    Pet Identified but does not <br /> belong to your\n                    organization.\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex\" style={{ marginTop: px(30), width: \"100%\" }}>\n                <div\n                  className=\"btn flex\"\n                  style={{ height: px(40) }}\n                  onClick={() => {\n                    setModalVis(false);\n                    cencleClick();\n                  }}\n                >\n                  <p>OK</p>\n                </div>\n              </div>\n            </div>\n          }\n        />\n      </div>\n    </div>\n\n  );\n};\n\nHeard.propTypes = {\n  onReturn: PropTypes.func,\n  onSearch: PropTypes.func,\n\n  blueSearch: PropTypes.bool,\n};\n// let userHistory = useHistory()\nHeard.defaultProps = {\n  onSearch: () => { },\n  onReturn: () => { },\n\n  blueSearch: false,\n};\n\nexport default connect(\n  state => ({\n    menuNum: state.userReduce.menuNum,\n    petListArr: state.petReduce.petListArr,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    systemType: state.systemReduce.systemType,\n    activeIndex: state.systemReduce.activeIndex\n  }),\n  { setMenuNum, setSelectHardwareType, petDetailInfoFun, setMenuActive }\n)(Heard)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js",["870","871"],"/**\r\n * @file new.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/new`\r\n\r\n\r\n/**\r\n * @dec 添加预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const petall_subscribe = (params) => {\r\n    return postJson(`${baseURL}/petall/subscribe`, params)\r\n}\r\n\r\n/**\r\n * @dec 管理员添加医生\r\n * @param {string} userId 管理员id\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const admin_users = (userId, params) => {\r\n    return patch(`${baseURL}/admin/users/${userId}`, params)\r\n}\r\n\r\n\r\n/**\r\n * @dec 获取预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const pet_subscribe_page = (params) => {\r\n    return postJson(`${baseURL}/pet/subscribe/page`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js",["872"],"/**\r\n * @file organization.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/organization 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/organization`\r\n\r\n\r\n\r\n/**\r\n * @dec  管理员获取组织下的所有医生\r\n * @param {string} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\n\r\nexport const listDoctorsByAdmin = (lastOrganization, params) => {\r\n    return get(`${baseURL}/listDoctorsByAdmin/${lastOrganization}`, params)\r\n}\r\n\r\n/**\r\n * @dec 获取所有组织\r\n * @returns\r\n *\r\n */\r\nexport const listAll = () => {\r\n    return get(`${baseURL}/listAll`, '')\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 创建一个组织\r\n * @param {str} userId 用户id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const addOrganization = (userId, params) => {\r\n    return postJson(`${baseURL}/addOrganization/${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx",["873","874","875","876","877"],"/**\r\n *\r\n * 获取屏幕分辨率宽高\r\n * let width = parseInt(window.screen.width)\r\n * let height = parseInt(window.screen.height)\r\n *\r\n * 获取应用窗口大小\r\n * document.documentElement.clientHeight\r\n * document.documentElement.clientWidth\r\n */\r\n//\r\n\r\n//\r\n\r\nconst devWidth = 1920;\r\nconst devHeight = 1040;\r\n\r\nlet size = window.screen\r\n// console.log('-------------------------分辨率的大小-----------------', size);\r\nlet width = parseInt(window.screen.availWidth);\r\nlet height = parseInt(window.screen.availHeight);\r\nif (width < height) {\r\n  let a = width;\r\n  width = height;\r\n  height = a;\r\n}\r\n\r\nexport const px = (val) => {\r\n  return val\r\n};\r\n\r\nexport const mTop = (val) => {\r\n  return val\r\n};\r\n\r\nexport const fs = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n};\r\nexport const pX = (val) => {\r\n  let windowWidth = document.documentElement.clientWidth;\r\n  // console.log('px', window.screen,)\r\n  return parseInt((windowWidth / 650) * val);\r\n};\r\nexport const MTop = (val) => {\r\n  return val\r\n};\r\n\r\nlet windowssize = {\r\n  width: 0,\r\n  height: 0,\r\n};\r\n\r\nexport const win = () => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n  return {\r\n    width: 1920,\r\n    height: 1080,\r\n  };\r\n};\r\n\r\nlet timer = null;\r\nexport const timerFun = () => {\r\n\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",["878","879"],"\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js",["880"],"/**\r\n * @file mellarecord.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/mellarecord 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/mellarecord`\r\n\r\n\r\n/**\r\n * @dec 增加硬件记录并更新ota硬件版本\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const saveRecord = (params) => {\r\n    return postJson(`${baseURL}/saveRecord`, params)\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getInfoOfLatestDevice = (hardWareType) => {\r\n    return get(`${baseURL}/getInfoOfLatestDevice?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js",["881","882","883","884","885","886","887","888"],"import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * description: 摄氏度转华氏度,根据入参来保留小数点位数\r\n * @param {Number} celsius 摄氏度\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 华氏度\r\n */\r\nfunction CtoF(celsius, decimal = 1) {\r\n  let fahrenheit = (celsius * 1.8) + 32;\r\n  return parseFloat(fahrenheit.toFixed(decimal));\r\n}\r\n/**\r\n * description: 华氏度转摄氏度,根据入参来保留小数点位数\r\n * @param {Number} fahrenheit 华氏度\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 摄氏度\r\n */\r\nfunction FtoC(fahrenheit, decimal = 1) {\r\n  let celsius = (fahrenheit - 32) / 1.8;\r\n  return parseFloat(celsius.toFixed(decimal));\r\n}\r\n/**\r\n * description: 千克转磅,根据入参来保留小数点位数\r\n * @param {Number} kg 千克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 磅\r\n */\r\nexport function KgtoLb(kg, decimal = 2) {\r\n  let pound = kg * 2.2046;\r\n  return parseFloat(pound.toFixed(decimal));\r\n}\r\n/**\r\n * description: 磅转千克,根据入参来保留小数点位数\r\n * @param {Number} lb 磅\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 千克\r\n *\r\n */\r\nexport function LbtoKg(lb, decimal = 2) {\r\n  let kilogram = lb / 2.2046;\r\n  return parseFloat(kilogram.toFixed(decimal));\r\n}\r\n/**\r\n * description: 克转毫升,根据入参来保留小数点位数\r\n * @param {Number} gram 克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 毫升\r\n */\r\nfunction GToMl(gram, decimal = 2) {\r\n  let milliliter = gram\r\n  return parseFloat(milliliter.toFixed(decimal));\r\n}\r\n/**\r\n * description: 毫升转克,根据入参来保留小数点位数\r\n * @param {Number} ml 毫升\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 克\r\n */\r\nfunction MltoG(ml, decimal = 2) {\r\n  let gram = ml;\r\n  return parseFloat(gram.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 克转盎司,根据入参来保留小数点位数\r\n * @param {Number} gram 克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 盎司\r\n */\r\nfunction GToOz(gram, decimal = 2) {\r\n  let ounce = gram / 28.3495;\r\n  return parseFloat(ounce.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 盎司转克,根据入参来保留小数点位数\r\n * @param {Number} ounce 盎司\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 克\r\n */\r\nfunction OztoG(ounce, decimal = 2) {\r\n  let gram = ounce * 28.3495;\r\n  return parseFloat(gram.toFixed(decimal));\r\n}\r\n/**\r\n * description: 厘米转英寸,根据入参来保留小数点位数\r\n * @param {Number} cm 厘米\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 英寸\r\n */\r\nfunction CmtoIn(cm, decimal = 2) {\r\n  let inch = cm / 2.54;\r\n  return parseFloat(inch.toFixed(decimal));\r\n}\r\n/**\r\n * description: 英寸转厘米,根据入参来保留小数点位数\r\n * @param {Number} inch 英寸\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 厘米\r\n */\r\nfunction IntoCm(inch, decimal = 2) {\r\n  let cm = inch * 2.54;\r\n  return parseFloat(cm.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 计算宠物年龄\r\n * @param {string} birthday 宠物生日\r\n * @return {number | string} age | ‘unknown’\r\n */\r\nexport const calculateAge = (birthday) => {\r\n  if (_.isEmpty(birthday)) {\r\n    return \"unknown\";\r\n  } else {\r\n    return moment().diff(moment(birthday), \"years\");\r\n  }\r\n};\r\n/**\r\n * @description: 没有上传照片的宠物头像展示\r\n * @param {Number} petSpeciesBreedId 宠物品种id\r\n * @return {string} 'cat' 'dog' 'other'\r\n */\r\nexport const petPicture = (petSpeciesBreedId) => {\r\n  if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n    return 'cat';\r\n  } else if (\r\n    petSpeciesBreedId === 12001 ||\r\n    _.inRange(petSpeciesBreedId, 136, 456)\r\n  ) {\r\n    return 'dog';\r\n  } else if (petSpeciesBreedId === 13001) {\r\n    return 'other';\r\n  } else {\r\n    return 'other';\r\n  }\r\n}\r\n/**\r\n * @dec 判断版本1是否大于版本2\r\n * @param {str} version1 版本号1,格式必须为1.0.0\r\n * @param {*} version2 版本号2,格式必须为1.0.0\r\n * @returns 版本1是否大于版本2\r\n */\r\nexport const versionComarision = (version1, version2) => {\r\n  let version1Arr = version1.split('.')\r\n  let version2Arr = version2.split('.')\r\n  function num(params) {\r\n    return parseInt(params)\r\n  }\r\n  if (num(version1Arr[0]) >= num(version2Arr[0])\r\n    && num(version1Arr[1]) >= num(version2Arr[1])\r\n    && num(version1Arr[2]) > num(version2Arr[2])\r\n  ) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n/**\r\n *\r\n * @param {*} time\r\n * @returns\r\n */\r\nexport const transitionTime = (time) => {\r\n  let timeDifference = new Date().getTimezoneOffset();\r\n  let newTime = moment(time).subtract(timeDifference, 'm').format();\r\n  return newTime;\r\n}\r\n/**\r\n * @dec 获取瘦体重（g)\r\n * @param {*} headCircumference 头部周长（cm)\r\n * @param {*} hindlimbLength    后肢长度（cm）\r\n * @param {*} forelimbCircumference 前肢周长（cm)\r\n * @param {*} forelimbLength        前肢长度(cm)\r\n * @param {*} bodyLength            身体长度（cm)\r\n * @param {*} upperTorsoCircumference 胸部周长(cm)\r\n * @returns 返回猫的瘦体重\r\n */\r\nexport const catLeanBodyMass = (headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference) => {\r\n  console.log('headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference: ', headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference);\r\n  //头部直径\r\n  let headDiameter = headCircumference / 3\r\n  let value = 30.3 * (headDiameter * hindlimbLength) + 316.9 * forelimbCircumference + 2.55 * (upperTorsoCircumference / 3) * forelimbLength + 14.4 * bodyLength - 3058.7\r\n  return value\r\n}\r\n/**\r\n* @dec 获取脂肪质量（g)\r\n* @param {*} weight            宠物体重（lb)\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @param {*} forelimbLength    前肢长度(cm)\r\n* @param {*} forelimbCircumference 前肢周长（cm)\r\n* @returns\r\n*/\r\nexport const catFatMass = (weight, headCircumference, forelimbLength, forelimbCircumference) => {\r\n  console.log('weight, headCircumference, forelimbLength, forelimbCircumference: ', weight, headCircumference, forelimbLength, forelimbCircumference);\r\n\r\n  return 436.9 * weight - 24 * (headCircumference / 3) * forelimbLength - 309.2 * forelimbCircumference + 2522.7\r\n}\r\n/**\r\n* @dec 狗的瘦体重\r\n* @param {*} weight            宠物体重（lb)\r\n* @param {*} age               年龄\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @param {*} forelimbLength    前肢长度(cm)\r\n* @param {*} hindlimbLength     后肢长度（cm）\r\n* @returns\r\n*/\r\nexport const dogLeanBodyMass = (weight, age, headCircumference, forelimbLength, hindlimbLength) => {\r\n  return 1.8 * (8.25 * weight - 9.02 * age + 8.92 * ((headCircumference / 6) ** 2) + 96.86 * forelimbLength - 111.07 * (forelimbLength - hindlimbLength) - 357.18) ** 1.333\r\n}\r\n\r\n/**\r\n*\r\n* @param {*} weight                宠物体重（lb)\r\n* @param {*} hindlimbLength  后肢长度（cm）\r\n* @param {*} upperTorsoCircumference 胸部周长(cm)\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @returns\r\n*/\r\nexport const dogFatMass = (weight, hindlimbLength, upperTorsoCircumference, headCircumference) => {\r\n  return 229.04 * weight - 416.63 * (hindlimbLength ** 1.2) + 157.78 * (upperTorsoCircumference - headCircumference) + 908.79\r\n}\r\n/**\r\n* @dec 计算狗的体脂百分比\r\n* @param {*} upperTorsoCircumference  胸部周长(cm)\r\n* @param {*} lowerTorsoCircumference   下躯干周长（cm）\r\n* @param {*} hindlimbLength 后肢长度（cm）\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @returns\r\n*/\r\nexport const dogBodyFatPercentage = (upperTorsoCircumference, lowerTorsoCircumference, hindlimbLength, headCircumference) => {\r\n  return 0.71 * upperTorsoCircumference - 0.1 * ((lowerTorsoCircumference / 6) ** 2) - 5.78 * (hindlimbLength ** 0.8) + 26.56 * (lowerTorsoCircumference / headCircumference) + 2.06\r\n}\r\n/**\r\n * @dec 切换主题颜色\r\n * @param {*} selectHardwareType 选择的硬件类型\r\n * @returns 颜色\r\n */\r\nexport const changeThemeColor = (selectHardwareType) => {\r\n  switch (selectHardwareType) {\r\n    case 'mellaPro':\r\n      return '#e1206d';\r\n    case 'biggie':\r\n      return '#12ADE4';\r\n    case 'tape':\r\n      return '#D5B019';\r\n    case 'otterEQ':\r\n      return '#FFA132';\r\n    case 'mabel':\r\n      return '#F78F2F';\r\n    default:\r\n      return '#e1206d';\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec buffer转hex文本\r\n * @param {*} buffer \r\n * @returns \r\n */\r\nexport const buf2hex = (buffer) => {\r\n\r\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' +\r\n    x.toString(16)).slice(-2)).join('');\r\n\r\n}\r\n/**\r\n * @dec hex转buffer文本\r\n * @param {*} hex \r\n * @returns \r\n */\r\nexport const hex2buf = (hex) => {\r\n  return new Uint8Array(hex.match(/[\\da-f]{2}/gi).map(function (h) {\r\n    return parseInt(h, 16)\r\n  }))\r\n}\r\n/**\r\n * @dec 将hex字符串转换成十进制数字数组\r\n * @param {string} hex \r\n */\r\nexport const hex2arr = (hex) => {\r\n  let hexArr = [...hex];\r\n  let a, b;\r\n  let aIndex = 0;\r\n  let bIndex = 1;\r\n  let arr = [];\r\n\r\n  hexArr.forEach((str, index) => {\r\n    if (index % 2 === 0) {\r\n      a = str;\r\n      aIndex += 1\r\n    } else {\r\n      b = str\r\n      bIndex += 1\r\n    }\r\n    if (a && b && (bIndex - aIndex === 1)) {\r\n      arr.push(parseInt((a + b), 16))\r\n    }\r\n  });\r\n  return arr\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx",["889","890","891"],"import React, { useState, useEffect } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport biggieHome from './../../assets/img/searchType-biggieHome.png';\nimport biggiePro from './../../assets/img/searchType-biggiePro.png';\nimport mellaHome from './../../assets/img/searchType-home.png';\nimport mellaPro from './../../assets/img/searchType-mellaPro.png';\nimport maeBowl from './../../assets/img/searchType-maeBowl.png';\nimport other from './../../assets/img/searchType-other.png';\nimport possum from './../../assets/img/searchType-possum.png';\nimport rfid from './../../assets/img/searchType-rfid.png';\nimport redclose from '../../assets/img/redclose.png';\nimport tabby from '../../assets/img/searchType-tabby.png';\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, MTop } from '../../utils/px';\n\nimport { connect } from 'react-redux'\nimport {\n  setReceiveBroadcastHardwareInfoFun,\n  setHardwareList,\n  changeselectHardwareIndex,\n  setSelectHardwareType,\n  selectHardwareList\n} from '../../store/actions';\nimport PropTypes from 'prop-types';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n  //是否有底座设备\n  const [noUSB, setNoUSB] = useState(false)\n  //设备列表\n  const [devicesList, setDevicesList] = useState([])\n  //选择的设备\n  const [selectDevice, setSelectDevice] = useState(null)\n  //重命名\n  const [reName, setReName] = useState('')\n  //房间号\n  const [examRoom, setExamRoom] = useState('')\n  //已经保存过的设备的macid\n  const [saveDeviceMac, setSaveDeviceMac] = useState([])\n  //顶部文本\n  const [topText, setTopText] = useState(' Pair Device')\n\n\n\n  const addDevice = () => {\n    //从redux拿到列表中的所有硬件设备 hardwareList\n    console.log('hardwareList', hardwareList);\n    //拿到硬件的macid 类型 名称 房间号\n    console.log('selectDevice', selectDevice);\n    let sameFlog = hardwareList.some((item, index) => {\n      return item.type === selectDevice.deviceType\n    })\n    let hardwareArr = [].concat(hardwareList)\n    let { deviceType, macId, name } = selectDevice\n    let newDevice = {\n      name: reName || name,\n      mac: macId,\n      deviceType,\n      examRoom: examRoom || '',\n    }\n    console.log('newDevice', newDevice);\n    if (sameFlog) {\n      //相同就代表有这个硬件类型,可以直接去push\n\n      for (let i = 0; i < hardwareArr.length; i++) {\n        if (hardwareArr[i].type === selectDevice.deviceType) {\n          hardwareArr[i].devices.push(newDevice)\n          break\n        }\n      }\n\n    } else {\n      //没有就要新建一个硬件类型\n      let json = {\n        type: selectDevice.deviceType,\n        devices: [newDevice]\n      }\n      hardwareArr.push(json)\n    }\n    setReName('')\n    setExamRoom('')\n    setHardwareList(hardwareArr)\n\n    return newDevice\n\n\n  }\n\n  const body = () => {\n\n    if (selectDevice) {\n      return <div className=\"addDevice1 flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n            {`this ${selectDevice.name} device?`}</div>\n\n          <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n            {`SN: ${selectDevice.macId}`}</div>\n\n\n          <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                setReName(value.target.value)\n\n              }}\n              placeholder={`${selectDevice.name} Device Name`}\n            />\n          </div>\n          <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={examRoom}\n              onChange={(value) => {\n                setExamRoom(value.target.value)\n\n              }}\n              placeholder={`Exam Room Name`}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write<br /> the name\n            on the sticker provided so it is easy\n            to select<br /> your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              addDevice()\n              setSelectDevice(null)\n              setSelectHardwareType('add')\n\n            }}\n          >\n            <p className='btnText'>Add Another Device</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let newDevice = addDevice()\n              setSelectHardwareType(selectDevice.deviceType)\n\n\n              electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n              setSelectDevice(null)\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          let options = (val) => {\n            let arr = []\n            if (val === 1) {\n              arr = [mellaPro, mellaHome, biggiePro, rfid]\n            } else {\n              arr = [possum, maeBowl, tabby, other,]\n            }\n            let option = arr.map((item, index) => {\n              let imgWidth = px(100)\n              // imgWidth = index === 2 ? px(65) : imgWidth\n              return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                <div className=\"searchType-item\" key={index} >\n                  <img src={item} alt=\"\" width={imgWidth} />\n                </div>\n              </li>)\n            })\n            return (\n              <ul>\n                {option}\n              </ul>\n            )\n          }\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n            <div className=\"addDeviceContent\">\n              <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                  <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                </div>\n              </div>\n              <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n              </div>\n              <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                <div className=\"btnText\">\n                  Scan For Devices\n                </div>\n              </div>\n              <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                Or\n              </div>\n              <div className=\"select\">\n                Select device type to\n              </div>\n              <div className=\"add\">\n                add manually\n              </div>\n\n              <div className=\"item\">\n                {options(1)}\n                {options(2)}\n              </div>\n            </div>\n\n            {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n\n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  setSelectDevice(item)\n\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList ' >\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n  //初始化\n  useEffect(() => {\n    setNoUSB(false)\n    setDevicesList([])\n    setSelectDevice(null)\n    setReName('')\n    setSaveDeviceMac([])\n    setTopText(' Pair Device')\n    //组件渲染完毕后要先清空广播的硬件信息\n    setReceiveBroadcastHardwareInfoFun({\n      deviceType: '',\n      macId: '',\n      name: ''\n    })\n  }, [])\n  useEffect(() => {\n\n    if (hardwareList.length > 0) {\n      let saveDeviceMac = []\n      for (let i = 0; i < hardwareList.length; i++) {\n        const element = hardwareList[i];\n        for (let j = 0; j < element.devices.length; j++) {\n          const device = element.devices[j];\n          saveDeviceMac.push(device.mac)\n        }\n      }\n      setSaveDeviceMac(saveDeviceMac)\n\n    }\n  }, [hardwareList])\n  useEffect(() => {\n    if (!selectDevice) {\n      setTopText(' Pair Device')\n    } else {\n      setTopText('Device Connected')\n    }\n\n  }, [selectDevice])\n  useEffect(() => {\n    setNoUSB(!isHaveUsbDevice)\n  }, [isHaveUsbDevice])\n  useEffect(() => {\n    let sameFlog = devicesList.some((device, index) => {\n      return device.macId === receiveBroadcastHardwareInfo.macId\n    })\n    if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n      return\n    }\n    console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n    let deviceArr = [].concat(devicesList)\n    deviceArr.push(receiveBroadcastHardwareInfo)\n    setDevicesList(deviceArr)\n\n\n\n  }, [receiveBroadcastHardwareInfo])\n\n  return (\n    <div className='addDevice' style={{ height: bodyHeight }}>\n      <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\n        {topText}\n      </div>\n\n      {body()}\n    </div >\n  )\n}\n\n\nAddDevice.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    hardwareReducer: state.hardwareReduce,\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n    hardwareList: state.hardwareReduce.hardwareList,\n  }),\n  { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx",["892","893"],"import React, { useState, useEffect } from 'react'\n\nimport xia from './../../assets/img/xia.png'\n\nimport { px } from '../../utils/px'\n\nimport PetsUI from './PetsUI.jsx'\nimport HardListModal from './HardListModal'\n\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { selectHardwareModalShowFun, selectHardwareInfoFun } from './../../store/actions';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun, hardwareInfo, selectHardwareInfoFun }) => {\n  //定义选择的硬件详细信息\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\n  useEffect(() => {\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\n\n    for (let i = 0; i < hardwareList.length; i++) {\n      const element = hardwareList[i];\n\n      if (element.type === selectHardwareType) {\n        let list = element.devices || []\n\n        //获取被选中的硬件的详细信息\n        let selectHardwareInfo = hardwareInfo || {}\n        if (selectHardwareInfo.mac === null && list[0]) {\n          let selectHardwareInfo = list[0]\n          selectHardwareInfoFun(selectHardwareInfo)\n\n          setSelectHardwareDetail(selectHardwareInfo)\n        } else {\n          let sameFlag = false\n          for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\n              setSelectHardwareDetail(selectHardwareInfo)\n              sameFlag = true\n              break\n            }\n          }\n          if (!sameFlag) {\n            let selectHardwareInfo = list[0] || {}\n            setSelectHardwareDetail(selectHardwareInfo)\n          }\n        }\n        break\n      }\n    }\n  }, [selectHardwareType, hardwareList,])\n\n\n  // console.log('=====----===', selectHardwareDetail);\n\n  return (\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\n      <div className='deviceAndPets-title'\n        onClick={(e) => {\n          //react阻止冒泡\n          e.stopPropagation()\n          selectHardwareModalShowFun(!selectHardwareModalShow)\n        }}\n      >\n        <div className=\"devicesName\" style={{ fontSize: px(30) }}>\n          {selectHardwareDetail.name || \"No Device\"}\n        </div>\n        <div className=\"imgBox\" style={{ marginLeft: px(7)}}>\n          <img src={xia} alt=\"\" width={px(25)} />\n        </div>\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\n          setSelectHardwareDetail(item)\n        }} />}\n      </div>\n      <PetsUI\n        bodyHeight={bodyHeight}\n      />\n    </div >\n  )\n}\n\n\nHardAndPetsUI.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nHardAndPetsUI.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n\n  }),\n  {\n    selectHardwareModalShowFun,\n    selectHardwareInfoFun\n  }\n)(HardAndPetsUI)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx",["894","895"],"import React, { useEffect, useState } from \"react\";\r\nimport { message } from 'antd'\r\n\r\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\r\nimport moveMellaPro from \"./../../assets/img/moveMellaPro.png\";\r\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\r\nimport moveBiggie from \"./../../assets/img/moveBiggie.png\";\r\nimport tape from \"./../../assets/img/hardList-tape.png\";\r\nimport moveTape from \"./../../assets/img/moveTape.png\";\r\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\r\nimport moveOtterEQ from \"./../../assets/img/moveOtterEQ.png\";\r\nimport mabel from \"./../../assets/img/hardList-mabel.png\";\r\nimport moveMabel from \"./../../assets/img/moveMabel.png\";\r\n\r\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\r\nimport smalls from './../../assets/img/smalls.png'\r\nimport cameraIcon from './../../assets/img/cameraIcon.png'\r\nimport add from \"./../../assets/img/hardList-add.png\";\r\n\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { px } from \"../../utils/px\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport { useHover } from 'ahooks';\r\n\r\nlet storage = window.localStorage;\r\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\r\nconst HardWareTypeUI = ({\r\n  bodyHeight,\r\n  devicesTypeList,\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  selectHardwareType,\r\n  setMenuNum,\r\n  menuNum,\r\n}) => {\r\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\r\n  const [onMouseEnterIndex, setOnMouseEnterIndex] = useState(-1);//移入硬件图片的下标\r\n\r\n  let options = devicesTypeList.map((item, index) => {\r\n    let img = null;\r\n    switch (item.type) {\r\n      case \"mellaPro\":\r\n        img = onMouseEnterIndex === 0 ? moveMellaPro : mellaPro;\r\n        break;\r\n      case \"biggie\":\r\n        img = onMouseEnterIndex === 1 ? moveBiggie : biggie;\r\n        break;\r\n      case \"tape\":\r\n        img = onMouseEnterIndex === 2 ? moveTape : tape;\r\n        break;\r\n      case \"otterEQ\":\r\n        img = onMouseEnterIndex === 3 ? moveOtterEQ : otterEQ;\r\n        break;\r\n      case \"mabel\":\r\n        img = onMouseEnterIndex === 4 ? moveMabel : mabel;\r\n        break;\r\n      case \"rfid\":\r\n        img = rfid;\r\n        break;\r\n      case \"camera\":\r\n        img = onMouseEnterIndex === 5 ? cameraIcon : smalls\r\n        break\r\n      case \"add\":\r\n        img = add;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    let borderStyle = ``;\r\n    if (item.type === selectHardwareType && menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n      borderStyle = ` 2px solid #3B3A3A`;\r\n    }\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        style={{ margin: `${px(10)}px 0` }}\r\n        onClick={() => {\r\n          if (menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType(item.type);\r\n            if (item.type === \"add\") {\r\n            } else {\r\n              let devicesInfo = {\r\n                deviceType: item.type,\r\n                examRoom: null,\r\n                mac: null,\r\n                name: null\r\n              }\r\n              if (item.devices.length > 0) {\r\n                devicesInfo = electronStore.get(\r\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\r\n                ) || {};\r\n                let isSame = item.devices.some((item) => item.mac === devicesInfo.mac)\r\n                if (!isSame) {\r\n                  devicesInfo = item.devices[0];\r\n                  electronStore.set(\r\n                    `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\r\n                    devicesInfo\r\n                  );\r\n                }\r\n              }\r\n              selectHardwareInfoFun(devicesInfo);\r\n            }\r\n          }\r\n          else {\r\n            message.destroy();\r\n            message.warning('Please exit clinical trial mode first');\r\n          }\r\n        }}\r\n        onMouseEnter={() => {\r\n          setOnMouseEnterIndex(index);\r\n        }}\r\n        onMouseLeave={() => {\r\n          setOnMouseEnterIndex(-1);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"item\"\r\n          style={{ border: borderStyle }}\r\n          id={`item${index}`}\r\n        >\r\n          <img src={img} alt=\"\" width={px(55)} />\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    let Index = null;\r\n    for (let i = 0; i < devicesTypeList.length; i++) {\r\n      const element = devicesTypeList[i];\r\n      if (element.type === selectHardwareType) {\r\n        Index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (Index === null) {\r\n      return;\r\n    }\r\n\r\n    let hard = devicesTypeList[Index];\r\n    if (hard && hard.type !== \"add\") {\r\n      let devicesInfo = electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\r\n      );\r\n      if (!devicesInfo) {\r\n        if (hard.devices.length > 0) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        } else if (hard.devices.length === 0) {\r\n          devicesInfo = {\r\n            deviceType: hard.type,\r\n            examRoom: null,\r\n            mac: null,\r\n            name: null,\r\n          };\r\n        }\r\n      } else {\r\n        let sameFlag = false;\r\n        for (let i = 0; i < hard.devices.length; i++) {\r\n          const element = hard.devices[i];\r\n          if (\r\n            element.mac === devicesInfo.mac &&\r\n            element.name === devicesInfo.name\r\n          ) {\r\n            sameFlag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!sameFlag) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.delete(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n      }\r\n      selectHardwareInfoFun(devicesInfo);\r\n    }\r\n  }, [devicesTypeList]);\r\n\r\n  return (\r\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\r\n      <ul>{options}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nHardWareTypeUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array,\r\n};\r\n//默认值\r\nHardWareTypeUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: [],\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    menuNum: state.userReduce.menuNum,\r\n  }),\r\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\r\n)(HardWareTypeUI);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx",["896"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\n\nimport _ from 'lodash';\n\nimport './index.less';\nimport { selectBreedBySpeciesId } from '../../api';\n\nconst SelectPetBreed = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel }) => {\n\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [breedList, setBreedList] = useState([]);//所有宠物品种\n  const [searchValue, setSearchValue] = useState();//搜索框的值\n  const [selePetBreedValue, setSelePetBreedValue] = useState();//选择的宠物品种\n  const [loading, setLoading] = useState(false);//加载\n\n  //获取所有宠物品种\n  const getAllPetBreed = () => {\n    let data = {\n      speciesId: null,//null是获取所有宠物品种不分猫和狗\n    }\n    setLoading(true);\n\n    selectBreedBySpeciesId(data)\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          setBreedList(res.petlist);\n        } else {\n          message.error('Failed to obtain pet breed')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    onSelect(selePetBreedValue);\n    setIsModalVisible(visible);\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入内容\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { });\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPetBreed();\n    return (() => { });\n  }, []);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  return (\n    <>\n      <Modal\n        title=\"Choose Breed\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetBreedModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <PhoneBook\n                listDate={breedList}\n                confirmSelectBreed={value}\n                selectFun={(val) => {\n                  setSelePetBreedValue(val);\n                }}\n                searchText={searchValue}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                >\n                  Select\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPetBreed;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",["897","898"],"\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js",["899"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/workplace 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/workplace`\r\n\r\n\r\n/**\r\n * \r\n * @dec 根据组织id获取工作场所\r\n * @param {string} organizationId \r\n * @returns \r\n */\r\nexport const listAllWorkplaceByOrganizationId = (organizationId) => {\r\n    return get(`${baseURL}/listAllWorkplaceByOrganizationId/${organizationId}`, '')\r\n}\r\n\r\n\r\n/**\r\n * @dec 添加工作场所\r\n * @param {str} userId 用户id\r\n * @param {*} params \r\n * @returns \r\n */\r\n\r\nexport const addWorkplace = (userId, params) => {\r\n    return postJson(`${baseURL}/addWorkplace${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",["900"],"export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx",["901","902"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MotionCamera = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  //为了清除应没有底座跳出的弹框\n  useEffect(() => {\n    message.destroy();\n  }, [])\n\n  return (\n    <Layout id=\"motionCamera\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column'}}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMotionCamera.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MotionCamera);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx",["903","904","905","906","907"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Checkbox, Layout, List, Avatar, Modal, Form, Input } from \"antd\";\n\nimport catFood from '../../assets/img/catFood.png';\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\nimport electronStore from \"../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst EnrolledPlan = ({ petMessage, hardwareMessage, bodyHeight,setSelectHardwareType }) => {\n  const { Content, Header } = Layout;\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [nextType, setNextType] = useState('selectIllness');//切换当前页面的组件。selectIllness：选择疾病；createPlan:创建计划；planInfo:计划详情。\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const options = [\n    {\n      label: 'Hepatic Disease',\n      value: '1',\n    },\n    {\n      label: 'Renal Disease',\n      value: '2',\n    },\n    {\n      label: 'Osteoarthritis / Mobility / Joint',\n      value: '3',\n    },\n  ];\n  const data = [\n    {\n      title: 'Title 1',\n    },\n    {\n      title: 'Title 2',\n    },\n    {\n      title: 'Title 3',\n    },\n    {\n      title: 'Title 4',\n    },\n  ];\n  //表单提交\n  const onFinish = (values) => {\n    console.log(values);\n    setSelectHardwareType(\"mabel\");\n  };\n  //选择的疾病\n  const onChange = (checkedValues) => {\n    console.log('checked = ', checkedValues);\n  };\n  //切换头部文字\n  const topTitle = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return 'Prescription Diet Matrix';\n      case 'createPlan':\n        return 'Prescription Diet Recommendations'\n      case 'planInfo':\n        return 'Feeding Plan'\n      default:\n        break;\n    }\n  }\n  //切换中间组件\n  const middleContent = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <div className=\"selectIllness\">\n            <Checkbox.Group\n              options={options}\n              onChange={onChange}\n              className=\"checkboxGroup\"\n            />\n          </div>\n        );\n      case 'createPlan':\n        return (\n          <div className=\"recommendMessageBox\">\n            <div className=\"leftBox\">\n              <img src={catFood} alt=\"\" />\n            </div>\n            <div className=\"rightBox\">\n              <p>Hill's Science Diet Adult 11+ Chicken Recipe cat food</p>\n              <p>Fluffy's Feeding Plan:</p>\n              <div className=\"descriptionTitle\">\n                <p>\n                  Based on Fluffy's BCS of 7, age 14, and osteoarthritis, we recommend feeding her 1 1/8 cups of kibble per day.\n                </p>\n                <p>443 Calories per cup</p>\n              </div>\n            </div>\n          </div>\n        )\n      case 'planInfo':\n        return (\n          <div className=\"planList\">\n            <List\n              dataSource={data}\n              renderItem={(item) => (\n                <div className=\"listBox\">\n                  <List.Item className=\"listItem\">\n                    <div className=\"item\">\n                      <div className=\"top\">\n                        <p>{item.title}</p>\n                        <p>123</p>\n                      </div>\n                      <div className=\"bottom\">\n                        <p>Weight</p>\n                        <p>465</p>\n                      </div>\n                    </div>\n                  </List.Item>\n                </div>\n              )}\n            />\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n  //切换底部按钮\n  const bottomBtn = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              electronStore.set(`${petMessage.petId}-planType`, true);\n              setNextType('createPlan');\n            }}\n          >\n            Set Recommendations\n          </Button>\n        );\n      case 'createPlan':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => { setNextType('planInfo') }}\n          >\n            Create Feeding Plan\n          </Button>\n        );\n      case 'planInfo':\n        return (\n          <>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => { }}\n              className=\"itemBtn\"\n            >\n              Email\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { }}\n            >\n              Print\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { setIsModalVisible(true) }}\n            >\n              Send to Mabel\n            </Button>\n          </>\n        );\n      default:\n        break;\n    }\n  }\n  //展示宠物照片\n  const shoePetPicture = () => {\n    if (_.isEmpty(petMessage?.url)) {\n      switch (petPicture(petMessage?.petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return petMessage?.url\n    }\n  }\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(petMessage?.firstName) && _.isEmpty(petMessage?.lastName)) {\n      return \"unknown\";\n    } else {\n      return petMessage?.firstName + \" \" + petMessage?.lastName;\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Layout className=\"planContentBox\" style={{ height: bodyHeight }}>\n      <div className=\"heardTitleBox\">\n        <p>{topTitle()}</p>\n      </div>\n      <div className=\"petMessageBox\">\n        <div className=\"left\">\n          <Avatar src={shoePetPicture()} size={64} />\n          <div className=\"petMsg\">\n            <p>{petMessage.petName ? petMessage?.petName : 'unknown'}</p>\n            <p>{ownerName()}</p>\n          </div>\n        </div>\n        <div className=\"right\">\n          <p>{calculateAge(petMessage?.birthday) === 'unknown' ? 'unknown' : `${calculateAge(petMessage?.birthday)} Years Old`}</p>\n          <p>{petMessage?.weight} lbs</p>\n          <p>{petMessage?.gender === 0 ? 'Male' : 'Female'}</p>\n          <p>{petMessage?.breedName}</p>\n        </div>\n      </div>\n      <div className=\"middleBox\">\n        {middleContent()}\n      </div>\n      <div className=\"btnBox\">\n        {bottomBtn()}\n      </div>\n      <Modal\n        title=\"Send Feeding Plan to Mabel\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        destroyOnClose\n        width={300}\n        className=\"planModal\"\n      >\n        <div className=\"modalContentBox\">\n          <div className=\"description\">\n            <p>Enter pet parent's email associated with their Mella Health App.</p>\n          </div>\n          <div className=\"formBox\">\n            <Form form={form} onFinish={onFinish} preserve={false}>\n              <Form.Item\n                name=\"mellaId\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" shape=\"round\" block htmlType=\"submit\">\n                  Send\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </Modal>\n    </Layout>\n  );\n};\n\nEnrolledPlan.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType,\n  }\n)(EnrolledPlan);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx",["908","909","910"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MabelPage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  return (\n    <Layout className=\"mabelPageBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMabelPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MabelPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["911","912","913","914","915"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Measurement from \"./components/measurement\";\nimport MeasuredData from \"./components/measuredData\";\nimport HeaderItem from \"./components/headerItem\";\n\nimport { connect } from \"react-redux\";\nimport SelectPatient from '../../assets/img/SelectPatient.png'\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport { px } from \"../../utils/px\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst TemperaturePage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  const [vibible, setVibible] = useState(false);\n\n  //测量温度中的页面变化\n  const changePage = () => {\n    // return <MeasuredData />\n    switch (mellaConnectStatus) {\n      case \"isMeasuring\":\n        return <Measurement />;\n      case \"complete\":\n        return <MeasuredData />;\n      case \"connected\":\n        return <LinkEquipment />;\n      case \"disconnected\":\n        // return <MeasuredData />;\n        return <LinkEquipment />;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Layout className=\"homeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\">\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {_.isEmpty(petMessage) ? (\n          <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100,  flexDirection: 'column'}}>\n            <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n            <p className=\"chackPatientTitle\">Select a patient</p>\n          </div>\n        ) : (\n          changePage()\n        )}\n      </Layout>\n    </>\n  );\n};\n\nTemperaturePage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(TemperaturePage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx",["916","917","918","919","920"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport SwabPetEar from \"./components/swabPetEar\";\nimport ExperimentalPage from \"./components/experimental\";\nimport TimerPage from \"./components/timer\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport SelectPatient from '../../assets/img/SelectPatient.png'\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setQsmConnectStatus,\n  setQsmPart\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\nimport Result from \"./components/result\";\n\n\n// const ipcRenderer = window.require(\"electron\").ipcRenderer;\nlet ipcRenderer = window.electron.ipcRenderer;\nconst SDK = require(\"qsm-otter-sdk\");\n\nconst { Content, Header } = Layout;\nconst OtterEQPage = ({ petMessage, hardwareMessage, bodyHeight, setQsmConnectStatus, setQsmPart }) => {\n  const [cutPageType, setCutPageType] = useState('linkPage');\n  const [qsmConStatus, setQsmConStatus] = useState('linkPage');\n  const [qsmPortName, setQsmPortName] = useState('')\n  const changePage = () => {\n    if (qsmConStatus === 'connected')\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        // return <Result cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n          return <SwabPetEar cutPageType={getCutPageType} />;\n        case \"experimentalPage\":\n          return <ExperimentalPage cutPageType={getCutPageType} />;\n        case \"timerPage\":\n          return <TimerPage cutPageType={getCutPageType} />;\n        case \"result\":\n          return <Result cutPageType={getCutPageType} />;\n        default:\n          break;\n      } else {\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n        case \"experimentalPage\":\n        case \"timerPage\":\n          return <LinkEquipment cutPageType={getCutPageType} isNext={true} />;\n        default:\n          break;\n      }\n    }\n  };\n\n  const getCutPageType = (type) => {\n    console.log('type: ', type);\n    if (!_.isEmpty(type)) {\n      setCutPageType(type);\n    }\n  }\n\n  //查看是否有QSM设备插入\n  const readQSMConnectionStatus = async () => {\n    try {\n      const pairInstrument = await SDK.pairInstrument()\n      console.log(\"🚀 ~ file: index.jsx ~ line 69 ~ readQSMConnectionStatus ~ pairInstrument\", pairInstrument)\n      setQsmPart(pairInstrument)\n    } catch (error) {\n      console.log('error', error);\n    }\n\n    setTimeout(async () => {\n      const connectionStatus = await SDK.readConnectionStatus()\n\n      let a = typeof (connectionStatus)\n      console.log('插入情况', connectionStatus, a);\n      if (typeof (connectionStatus) === 'boolean') {\n        let status = connectionStatus ? 'connected' : 'disconnected'\n        setQsmConnectStatus(status)\n        setQsmConStatus(status)\n      }\n    }, 500);\n  }\n\n  /**\n   * @dec 从main.js传过来的usb插拔事件\n   * @param {*} e\n   * @param {*} data 值为true 代表插入设备，false为拔掉设备\n   */\n  const usbDetect = async (e, data) => {\n    // if (data) { // readQSMConnectionStatus()\n    //   readQSMConnectionStatus()\n    // } else {\n    //   const connectionStatus = await SDK.readConnectionStatus()\n\n    //   let a = typeof (connectionStatus)\n    //   console.log('插入情况', connectionStatus, a);\n    //   if (typeof (connectionStatus) === 'boolean') {\n    //     let status = connectionStatus ? 'connected' : 'disconnected'\n    //     setQsmConnectStatus(status)setQsmPart\n    //     setQsmConStatus(status)\n    //   }\n    // }\n\n  }\n  let deviceStatus = null\n  const conectstatus = async () => {\n    deviceStatus = await SDK.readConnectionStatus()\n    console.log('connect', deviceStatus)\n    if (typeof (deviceStatus) === 'boolean') {\n      let status = deviceStatus ? 'connected' : 'disconnected'\n      setQsmConnectStatus(status)\n      setQsmConStatus(status)\n    }\n  }\n  const getQsmPortName = (e, data) => {\n    setQsmPart(data)\n    setQsmPortName(data)\n  }\n\n  useEffect(() => {\n    setCutPageType('linkPage');\n    return (() => { })\n\n  }, [petMessage.petId])\n\n  useEffect(() => {\n    console.log('连接监听');\n    navigator.serial.addEventListener(\"connect\", conectstatus);\n    navigator.serial.addEventListener(\"disconnect\", conectstatus);\n    return () => {\n      navigator.serial.removeEventListener(\"connect\", conectstatus);\n      navigator.serial.removeEventListener(\"disconnect\", conectstatus);\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   ipcRenderer.on('qsmPortName', getQsmPortName);\n  //   return () => { ipcRenderer.removeListener(\"qsmPortName\", getQsmPortName); };\n\n  // }, [])\n\n\n\n\n  //监听usb的插拔\n  useEffect(() => {\n    ipcRenderer.on(\"usbDetect\", usbDetect);\n    return () => {\n      ipcRenderer.removeListener(\"usbDetect\", usbDetect);\n    }\n  }, [])\n  //初始化获取设备是否插入\n  useEffect(() => {\n    readQSMConnectionStatus()\n    message.destroy();\n  }, [])\n\n\n  return (\n    <Layout className=\"ottterEQBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className=\"otterEQcontent\">\n          {changePage()}\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nOtterEQPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmConnectStatus,\n    setQsmPart\n  }\n)(OtterEQPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",["921","922","923","924","925","926"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Avatar,\n  Button,\n  Card,\n  Space,\n  message,\n  Input,\n  Modal,\n} from \"antd\";\nimport {\n  CheckCircleFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport {\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Meta } = Card;\nconst { confirm } = Modal;\nconst CombineScales = ({\n  petMessage,\n  hardwareMessage,\n  userMessage,\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n}) => {\n  let { hardwareList } = hardwareMessage;\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\n  const [confirmType, setConfirmType] = useState(false); //确认选择\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\n\n  //点击卡片选择效果\n  const onClick = (index, data) => {\n    console.log(data);\n    let changeClassName = document.getElementById(index).classList;\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\n    let cardClassNametype = document\n      .getElementById(index)\n      .classList.contains(\"cardBoxClick\");\n    cardClassNametype\n      ? changeClassName.remove(\"cardBoxClick\")\n      : changeClassName.add(\"cardBoxClick\");\n    cardClassNametype\n      ? (iconClassName.style.display = \"none\")\n      : (iconClassName.style.display = \"\");\n    let oldData = checkHardwareList;\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\n  };\n  //确认选择两个体重秤\n  const onChangeScales = () => {\n    if (_.size(checkHardwareList) > 1) {\n      setConfirmType(true);\n    } else {\n      message.error({\n        content: \"Please choose more than two scales\",\n        style: {\n          marginTop: \"20vh\",\n        },\n      });\n    }\n  };\n  //保存用户更改的名字\n  const saveChangeName = (e) => {\n    setSaveName(e.target.value);\n  };\n\n  //跳转准备测量\n  const startMeasuring = () => {\n    confirm({\n      title: \"Are you sure to incorporate the body fat scale?\",\n      icon: <ExclamationCircleOutlined />,\n      style: {\n        marginTop: \"20vh\",\n      },\n      width: 480,\n      onOk() {\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\n        let newData = {\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\n          mac: mac,\n          deviceType: \"biggie\",\n          examRoom: \"\",\n        };\n        let newHardwareList = hardwareList;\n        newHardwareList[1].devices.push({ ...newData });\n        selectHardwareList(newHardwareList);\n        selectHardwareInfoFun(newData);\n        setMenuNum(\"1\");\n      },\n    });\n  };\n\n  useEffect(() => {\n    let newData = [];\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\n      if (item.mac.indexOf(\"/\") === -1) {\n        newData.push(item);\n      }\n    });\n    setBiggieList(newData);\n    return () => { };\n  }, []);\n\n  return (\n    <>\n      <Layout className=\"mergePage\">\n        <Header className=\"mergeHeaderBox\">\n          <span className=\"headerTitle\">\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\n          </span>\n        </Header>\n        <Content className=\"combineContentBox\">\n          <div>\n            <div className=\"tipTitleBox\">\n              {!confirmType ? (\n                <span>\n                  Select the scales you'd\n                  <br />\n                  like to combine\n                </span>\n              ) : (\n                <span>\n                  These two scales are now combined.\n                  <br />\n                  Please give this combination a name\n                </span>\n              )}\n            </div>\n            {confirmType ? (\n              <div className=\"asOneCardBox\">\n                <Space>\n                  {_.map(checkHardwareList, (item, index) => {\n                    return (\n                      <Card className=\"asOneCard\">\n                        <Meta\n                          avatar={<Avatar src={scaleImage} size={53} />}\n                          description={\n                            <div style={{ display: \"grid\" }}>\n                              <span>Device Name:{item.name}</span>\n                              <span>\n                                {item.deviceType === \"biggie\"\n                                  ? \"Biggie Pro Scale\"\n                                  : \"Biggie Home Scale\"}\n                              </span>\n                              <span>SN:{item.mac}</span>\n                            </div>\n                          }\n                        />\n                      </Card>\n                    );\n                  })}\n                </Space>\n                <div className=\"acOneImageBox\">\n                  <img src={combinedscales} />\n                </div>\n              </div>\n            ) : (\n              <div className=\"selectScalesBox\">\n                <div>\n                  {_.map(biggieList, (item, index) => {\n                    return (\n                      <Card\n                        className=\"cardBox\"\n                        hoverable\n                        onClick={() => onClick(`${index}`, item)}\n                        id={`${index}`}\n                        key={index}\n                      >\n                        <div className=\"cardBodyBox\">\n                          <Meta\n                            avatar={<Avatar src={scaleImage} size={53} />}\n                            description={\n                              <div style={{ display: \"grid\" }}>\n                                <span>Device Name:{item.name}</span>\n                                <span>\n                                  {item.deviceType === \"biggie\"\n                                    ? \"Biggie Pro Scale\"\n                                    : \"Biggie Home Scale\"}\n                                </span>\n                                <span>SN:{item.mac}</span>\n                              </div>\n                            }\n                          />\n                          <CheckCircleFilled\n                            id={`${\"icon\" + index}`}\n                            style={{\n                              color: \"#5cbbe0\",\n                              fontSize: \"20px\",\n                              display: \"none\",\n                            }}\n                          />\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            {confirmType ? (\n              <>\n                <div className=\"inputBox\">\n                  <Input\n                    placeholder=\"Combined Scale Name\"\n                    className=\"inputName\"\n                    maxLength={25}\n                    onChange={saveChangeName}\n                  />\n                </div>\n                <div className=\"scalesBtnBox\">\n                  <Button\n                    type=\"primary\"\n                    className=\"scalesBtn\"\n                    shape=\"round\"\n                    onClick={() => startMeasuring()}\n                  >\n                    Save & Start Measuring\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <Space className=\"scalesBtnBox\">\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => setMenuNum(\"AddDevice\")}\n                >\n                  Add New Scale\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => onChangeScales()}\n                >\n                  Combine Scales\n                </Button>\n              </Space>\n            )}\n          </div>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    userMessage: state.userReduce,\n  }),\n  {\n    setMenuNum,\n    selectHardwareInfoFun,\n    selectHardwareList,\n  }\n)(CombineScales);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",["927","928","929","930","931","932"],"import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { message, Button } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport redJinggao from '../../assets/img/redjinggao.png'\n\nimport { setMenuNum } from '../../store/actions';\nimport MyModal from '../../utils/myModal/MyModal';\nimport { px } from '../../utils/px';\nimport MYButton from '../../utils/button/Button';\nimport './index.less';\nimport { petall_subscribe } from '../../api/mellaserver/new';\n\nconst MyIcon = createFromIconfontCN({\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\n\nlet defaultData = {\n    patientId: \"\",\n    wuzhong: 'dog',\n    petName: '',\n    miaoshu: ''\n}\n\nlet storage = window.localStorage;\nconst AddScheduledPet = ({ bodyHeight, setMenuNum }) => {\n    const [addPetist1, setAddPetist] = useState([]);\n    const [petName, setPetName] = useState('');\n    const [wuzhong, setWuzhong] = useState('dog');\n    const [patientId, setPatientId] = useState('');\n    const [miaoshu, setMiaoshu] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [isSave, setIsSave] = useState(false);\n\n    const selsectwuzhong = (val) => {\n        setWuzhong(val);\n\n    }\n    console.log('addPetist1', addPetist1);\n\n    const add = () => {\n        message.destroy()\n        if (!patientId) {\n            message.error(`Please enter the pet's patientId`)\n            return\n        }\n        setLoading(true)\n\n        let petSpeciesBreedId = 12001\n        switch (wuzhong) {\n            case 'dog': petSpeciesBreedId = 12001; break;\n            case 'cat': petSpeciesBreedId = 11001; break;\n            case 'other': petSpeciesBreedId = 13001; break;\n            default:\n                break;\n        }\n        let params = {\n            description: miaoshu,\n            doctorId: storage.userId,\n            patientId,\n            petName,\n            petSpeciesBreedId\n        }\n\n        if (storage.lastOrganization) {\n            params.organizationId = storage.lastOrganization\n        }\n        if (storage.lastWorkplaceId) {\n            params.workplaceId = storage.lastWorkplaceId\n        }\n        console.log('入参', params);\n        petall_subscribe(params)\n            .then(res => {\n                console.log(res);\n                if (res.flag) {\n                    let json = {\n                        patientId,\n                        wuzhong,\n                        petName,\n                        miaoshu\n                    }\n                    let list = [].concat(addPetist1)\n                    list.push(json)\n                    setAddPetist(list)\n                    setLoading(false)\n                    setPatientId('')\n                    setWuzhong('')\n                    setPetName('')\n                    setMiaoshu('')\n\n                } else {\n\n                    setLoading(false)\n                    message.error('add failed')\n                }\n            })\n            .catch(err => {\n                console.log('错误原因', err);\n                setLoading(false)\n                message.error('add failed')\n            })\n\n    }\n    const body = () => {\n        let addPetist = [].concat(addPetist1)\n        addPetist.push(defaultData)\n        console.log('新的:', addPetist);\n        let options = addPetist.map((item, index) => {\n\n            if (index === addPetist.length - 1) {\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={patientId}\n                                onChange={value => {\n                                    setPatientId(value.target.value)\n\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={petName}\n                                onChange={value => {\n\n                                    setPetName(value.target.value)\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('dog')\n                                }}>\n                                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            </div>\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('cat')\n                                }}>\n                                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            </div>\n\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('other')\n                                }}>\n                                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                            </div>\n\n\n\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={miaoshu}\n                                onChange={value => {\n\n                                    setMiaoshu(value.target.value)\n                                }}\n\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n                            <div\n                                className='flex'\n                                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\n                                onClick={add}\n\n                            >\n\n                                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\n                            </div>\n\n\n\n\n\n\n\n                        </div>\n\n                    </div>\n                </li>\n            } else {\n                let { patientId, wuzhong, petName, miaoshu } = item\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'>\n                                {patientId}\n                            </div>\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'> {petName}</div>\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <div className='tableText'>{miaoshu}</div>\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n\n                        </div>\n                    </div>\n\n\n                </li>\n            }\n\n\n        })\n\n        return (\n            <div style={{ width: '100%', marginTop: px(30), height: px(500), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%', }}>\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                    <div className='tableHeard'>Patient Id</div>\n                    <div className='tableHeard'>Pet Name</div>\n                    <div className='tableHeard'>species</div>\n                    <div className='tableHeard' style={{ width: '30%' }}>description</div>\n                    <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\n\n                </div>\n                <ul >\n                    {options}\n                </ul>\n            </div>\n        )\n    }\n    return (\n        <div className='addScjediled' style={{ height: bodyHeight }}>\n            <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26 }}>\n                <div>December 2022 </div>\n                <div style={{ width: '200px' }}>\n                    <Button\n                        type=\"primary\"\n                        shape=\"round\"\n                        size=\"large\"\n                        block\n                    >\n                    Save Schedule\n                    </Button>\n                </div>\n            </div>\n            <div className='addSBody' style={{ width: '100%', height: bodyHeight - px(100), }}>\n            {body()}\n            </div>\n\n            {/* <MyModal\n                visible={loading}\n            />\n            <MyModal\n                visible={isSave}\n                element={\n                    <div className='isSave'\n                    //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\n                    >\n                        <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n                        <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\n                        <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                            <MYButton\n                                text={'Cancel'}\n                                onClick={() => {\n                                    setIsSave(false)\n\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                            <MYButton\n                                text={'Exit'}\n                                onClick={() => {\n                                    setIsSave(false)\n                                    setMenuNum('3')\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                        </div>\n                    </div>\n                }\n            /> */}\n        </div >\n\n    )\n}\n\n\nAddScheduledPet.propTypes = {\n\n}\n//默认值\nAddScheduledPet.defaultProps = {\n\n}\nexport default connect(\n    state => ({\n\n    }),\n    { setMenuNum }\n)(AddScheduledPet)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",["933","934","935","936","937","938"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Form, Input, Checkbox, message } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport { px } from '../../utils/px';\nimport PetTable from '../../components/petTable';\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { useGetState } from 'ahooks';\nimport './index.less';\nimport { listAllPetInfo, getPetByPetNameOrPatientId } from '../../api';\nlet storage = window.localStorage;\n\n\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\n  const [form] = Form.useForm();\n  //初始化获取宠物列表数据\n  const [petListArr, setPetListArr] = useState([]);\n  //定义宠物列表是否加载中\n  const [loading, setLoading] = useState(false);\n  const [spin, setSpin] = useState(false);\n  const [pageSize, setPageSize] = useState(20); // 每页20条\n  const [total, setTotal] = useState(0);//宠物列表数据的总条数\n  const [currPage, setCurrPage, getCurrPage] = useGetState(1);//页码\n  //搜索后展示的宠物列表\n  const [searchData, setSearchData] = useState([]);\n  const handleDownChange1 = (e) =>{\n    const checked = e.target.checked\n    form.setFieldsValue({\n      Clients: checked ? '1' : '0'\n    })\n  }\n  const handleDownChange2 = (e)=>{\n    const checked = e.target.checked\n    form.setFieldsValue({\n      Patients: checked ? '1' : '0'\n    })\n  }\n  const _getExam = async (currPageValue) => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      pageSize: pageSize,\n      currPage: currPageValue,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        setLoading(false);\n        setSpin(false);\n        if (res.flag === true) {\n          setTotal(res.data.count);\n          let newArr = [];\n          let data = [];\n          if (currPageValue === 1) {\n            newArr = res.data.data;\n          } else {\n            let oldArr = petListArr;\n            let arr = res.data.data;\n            newArr = [...oldArr, ...arr];\n          }\n          // setPetListArrFun(newArr);\n          for (let i = 0; i < newArr.length; i++) {\n            let {\n              age,\n              url,\n              createTime,\n              patientId,\n              speciesId,\n              petName,\n              firstName,\n              birthday,\n              lastName,\n              breedName,\n              gender,\n              petId,\n              weight,\n              rfid,\n              l2rarmDistance,\n              neckCircumference,\n              upperTorsoCircumference,\n              lowerTorsoCircumference,\n              pethubId,\n              macId,\n              h2tLength,\n              torsoLength\n            } = newArr[i];\n            let owner = '';\n            patientId = isUnKnow(patientId);\n            petName = isUnKnow(petName);\n            breedName = isUnKnow(breedName);\n            age = isUnKnow(age);\n            weight = isUnKnow(weight);\n            if (!firstName) {\n              firstName = '';\n            }\n            if (!lastName) {\n              lastName = '';\n            }\n            if (lastName === '' && firstName === '') {\n              owner = 'unknown';\n            } else {\n              owner = `${lastName} ${firstName}`;\n            }\n            createTime = moment(createTime).format('X');\n            let petGender = '';\n            switch (`${gender}`) {\n              case '1': petGender = 'F'\n                break;\n              case '0': petGender = \"M\"\n                break;\n              default: petGender = 'unknown'\n                break;\n            }\n            let petAge = 'unknown'\n            if (birthday) {\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\n            }\n            let json = {\n              insertedAt: createTime,\n              patientId,\n              petName,\n              owner,\n              breed: breedName,\n              gender: petGender,\n              age: petAge,\n              petId,\n              id: i,\n              weight,\n              rfid,\n              url,\n              speciesId,\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n              h2tLength, torsoLength,\n              pethubId, macId,\n            }\n            data.push(json);\n          }\n          setPetListArr(data);\n        }\n      })\n      .catch(err => {\n        setLoading(false)\n        setSpin(false)\n      })\n  }\n  const _refresh = () => {\n    setSpin(true);\n    setCurrPage(1);\n    setPetListArr([]);\n    setTotal(0);\n    _getExam(1);\n  }\n  const filterSearch = () => {\n    setLoading(true);\n    console.log('form.getFieldsValue()', form.getFieldsValue());\n    let search = form.getFieldsValue().petName != undefined ?  form.getFieldsValue().petName.replace(/(^\\s*)|(\\s*$)/g, \"\"): ''\n    let params = {\n      searchValue: search || ''\n    }\n    if (storage.lastOrganization) {\n      params.orgId = storage.lastOrganization\n    }\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n    getPetByPetNameOrPatientId(storage.userId, params)\n        .then((res) => {\n          if (res.msg === 'success') {\n            setLoading(false);\n            let newArr = res.success;\n            let data = [];\n\n            for (let i = 0; i < newArr.length; i++) {\n              let {\n                age,\n                url,\n                createTime,\n                patientId,\n                speciesId,\n                petName,\n                firstName,\n                birthday,\n                lastName,\n                breedName,\n                gender,\n                petId,\n                weight,\n                rfid,\n                l2rarmDistance,\n                neckCircumference,\n                upperTorsoCircumference,\n                lowerTorsoCircumference,\n                pethubId,\n                macId,\n                h2tLength,\n                torsoLength\n              } = newArr[i];\n              let owner = '';\n              patientId = isUnKnow(patientId);\n              petName = isUnKnow(petName);\n              breedName = isUnKnow(breedName);\n              age = isUnKnow(age);\n              weight = isUnKnow(weight);\n              if (!firstName) {\n                firstName = '';\n              }\n              if (!lastName) {\n                lastName = '';\n              }\n              if (lastName === '' && firstName === '') {\n                owner = 'unknown';\n              } else {\n                owner = `${lastName} ${firstName}`;\n              }\n              createTime = moment(createTime).format('X');\n              let petGender = '';\n              switch (`${gender}`) {\n                case '1': petGender = 'F'\n                  break;\n                case '0': petGender = \"M\"\n                  break;\n                default: petGender = 'unknown'\n                  break;\n              }\n              let petAge = 'unknown'\n              if (birthday) {\n                petAge = moment(new Date()).diff(moment(birthday), 'years')\n              }\n              let json = {\n                insertedAt: createTime,\n                patientId,\n                petName,\n                owner,\n                breed: breedName,\n                gender: petGender,\n                age: petAge,\n                petId,\n                id: i,\n                weight,\n                rfid,\n                url,\n                speciesId,\n                l2rarmDistance,\n                neckCircumference,\n                upperTorsoCircumference,\n                lowerTorsoCircumference,\n                h2tLength,\n                torsoLength,\n                pethubId,\n                macId,\n              }\n              data.push(json);\n            }\n            setPetListArr(data);\n            console.log('data', data)\n          } else {\n            message.warning('system error');\n          }\n        })\n        .catch((err) => {\n          message.warning('system error');\n        })\n  }\n  useEffect(() => {\n    //获取宠物列表\n    _getExam(1);\n    return (() => { });\n  }, []);\n  return (\n    <div id='allPets' style={{ height: bodyHeight }}>\n      <div className=\"leftContent\">\n        <div className=\"filterTop\">\n          <div className=\"title\">Filter</div>\n          <div className=\"Btn\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              block\n              onClick={filterSearch}\n            >\n              Search\n            </Button>\n          </div>\n        </div>\n        <div className=\"middleCon\">\n          <div className=\"middleItem\">\n            <Form\n              layout=\"horizontal\"\n              form={form}\n              colon={false}\n              labelCol={{ flex: '100px' }}\n              labelAlign=\"left\"\n              labelWrap\n            >\n              <Form.Item label=\"Pet ID\" name=\"petId\">\n                <Input placeholder=\"Given Name\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Pet Name\" name=\"petName\">\n                <Input placeholder=\"Pet Name\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Owner\" name=\"owner\">\n                <Input placeholder=\"Owner\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Breed\" name=\"breed\">\n                <Input placeholder=\"Breed\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Gender\" name=\"gender\">\n                <Input placeholder=\"Gender\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Age\" name=\"age\">\n                <Input placeholder=\"Age\" className='filterInput' />\n              </Form.Item>\n            </Form>\n          </div>\n          <div className=\"leftBotForm\">\n            <Form\n              layout=\"horizontal\"\n              form={form}\n              colon={false}\n              labelCol={{ flex: '100px' }}\n              labelAlign=\"left\"\n              labelWrap\n            >\n              <Form.Item label=\"Phone Number\" name=\"phoneNumber\">\n                <Input placeholder=\"Phone Number\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"Email\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Postal Code\" name=\"postalCode\">\n                <Input placeholder=\"Code\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"Tag\" name=\"tag\">\n                <Input placeholder=\"Tag\" className='filterInput' />\n              </Form.Item>\n              <Form.Item label=\"\" name=\"Clients\">\n                <div className='checkFilter'>\n                  <div>Only Active Clients</div>\n                  <Checkbox  onChange={handleDownChange1}></Checkbox>\n                </div>\n              </Form.Item>\n              <Form.Item label=\"\" name=\"Patients\">\n                <div className='checkFilter'>\n                  <div>Only Active Patients</div>\n                  <Checkbox  onChange={handleDownChange2}></Checkbox>\n                </div>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </div>\n      <div className=\"rightContent\">\n        <div className=\"allPetHeard\">\n          <div className=\"addDeviceTitle flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n            <div className=\"title\">Client Results</div>\n            <div className=\"refresh flex\"\n              style={{ fontSize: px(25), marginLeft: px(10) }}\n            >\n              <SyncOutlined onClick={_refresh} spin={spin} />\n            </div>\n          </div >\n          <div className=\"walkBtn1\" style={{ marginRight: px(30) }}>\n            <div\n              className=\"walkbtnBox\"\n              style={{ height: px(40), width: px(200) }}\n              onClick={() => {\n                let json = {\n                  isWalkIn: true,\n                  petId: null,\n                  petName: null,\n                  owner: null,\n                  breed: null,\n                }\n                petDetailInfoFun(json);\n                setMenuNum(\"1\");\n              }}\n            >\n              <p className=\"walkText\">Create New Client</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"tableContent\">\n          <PetTable\n            bodyHeight={bodyHeight - px(100)}\n            petListArr={petListArr}\n            searchVisible={false}\n            loading={loading}\n            resetPetList={(val) => setPetListArr(val)}\n            onScroll={() => {\n              if (currPage === _.ceil(total / pageSize) || total === 0) {\n                return;\n              }\n              setCurrPage(currPage + 1);\n              _getExam(currPage + 1);\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nAllPet.propTypes = {\n}\n//默认值\nAllPet.defaultProps = {\n  bodyHeight: 0,\n}\nexport default connect(\n  state => ({\n  }),\n  { petDetailInfoFun, setMenuNum, setPetListArrFun }\n)(AllPet)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx",["939","940","941","942"],"import React, { useState, useEffect } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Form,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n} from 'antd';\nimport { SyncOutlined, SearchOutlined } from '@ant-design/icons';\nimport { px } from '../../utils/px';\nimport PetTable from '../../components/petTable';\n\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport {\n  petDetailInfoFun,\n  setMenuNum,\n  setPetListArrFun\n} from '../../store/actions';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\n\nimport './index.less'\nimport { pet_subscribe_page } from '../../api';\n\nlet storage = window.localStorage;\nconst ScheduledPetPage = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\n\n  //初始化获取宠物列表数据\n  const [petListArr, setPetListArr] = useState([])\n  //定义宠物列表是否加载中\n  const [loading, setLoading] = useState(true)\n  // 添加预约宠物弹窗\n  const [addModal, setScheduleModal] = useState(false)\n  // 选择物种\n  const [wuzhong, setWuzhong] = useState('dog');\n  const [form] = Form.useForm();\n\n  const [spin, setSpin] = useState(false)\n\n  const selsectwuzhong = (val) => {\n    setWuzhong(val);\n  }\n\n  const _getExam = async () => {\n    console.log('进来了');\n\n\n    let startDay = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss')\n    let endDay = moment().endOf('day').format('YYYY-MM-DD HH:mm:ss')\n    let chazhi = new Date().getTimezoneOffset()\n    let newstartTime = moment(startDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\n    let newendTime = moment(endDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\n\n\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n      subStartTime: newstartTime,\n      subEndTime: newendTime\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n\n\n    console.log('查询宠物的入参', params);\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n    setLoading(true)\n\n    pet_subscribe_page(params)\n\n      .then(res => {\n        if (res.flag === true && res.data) {\n          let data = []\n          let oldList = res.data.list\n          for (let i = 0; i < oldList.length; i++) {\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n              h2tLength, torsoLength } = oldList[i]\n            let owner = ''\n            patientId = isUnKnow(patientId)\n            petName = isUnKnow(petName)\n            breedName = isUnKnow(breedName)\n            age = isUnKnow(age)\n            weight = isUnKnow(weight)\n            if (!firstName) {\n              firstName = ''\n            }\n            if (!lastName) {\n              lastName = ''\n            }\n            if (lastName === '' && firstName === '') {\n              owner = 'unknown'\n            } else {\n              owner = `${lastName} ${firstName}`\n            }\n            createTime = moment(createTime).format('X')\n            let petGender = ''\n            switch (`${gender}`) {\n              case '1': petGender = 'F'\n\n                break;\n              case '0': petGender = \"M\"\n                break;\n              default: petGender = 'unknown'\n                break;\n            }\n            let petAge = 'unknown'\n            if (birthday) {\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\n            }\n\n            let json = {\n              insertedAt: createTime,\n              patientId,\n              petName,\n              owner,\n              breed: breedName,\n              gender: petGender,\n              age: petAge,\n              petId,\n              id: i,\n              weight,\n              rfid,\n              url,\n              speciesId,\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n              h2tLength, torsoLength,\n              pethubId, macId,\n\n            }\n            data.push(json)\n\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          console.log('列表的数据：', data);\n          setPetListArr(data)\n          setLoading(false)\n          setSpin(false)\n\n\n\n\n        } else {\n          setLoading(false)\n          setSpin(false)\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false)\n        setSpin(false)\n      })\n\n\n\n  }\n  const _refresh = () => {\n    console.log('点击了');\n    setSpin(true)\n    _getExam()\n  }\n\n  useEffect(() => {\n    //获取宠物列表\n    _getExam()\n  }, [])\n\n  return (\n    <div id='scheduled' style={{ height: bodyHeight }}>\n      <div className=\"allPetHeard\">\n        <div className=\"addDeviceTitle flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n          <div className=\"title\">December 12, 2012 </div>\n          <div className=\"refresh flex\"\n            style={{ fontSize: px(25), marginLeft: px(10) }}\n          >\n            <SyncOutlined onClick={_refresh} spin={spin} />\n          </div>\n        </div>\n        <div className=\"walkBtn1\" style={{ marginRight: px(40) }}>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(40), width: px(160), marginRight: px(40) }}\n            onClick={() => {\n              setMenuNum('AddScheduledPet')\n            }}\n          >\n            <div className=\"walkText\">Edit Schedule</div>\n          </div>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(40), width: px(160) }}\n          >\n            <div className=\"walkText\"\n              onClick={() => {\n                setScheduleModal(true)\n              }}\n            >+Add Appointment</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"body111\" style={{ height: bodyHeight - px(100) }}>\n        <PetTable\n          // bodyHeight={bodyHeight - devicesTitleHeight}\n          petListArr={petListArr}\n          loading={loading}\n          resetPetList={(val) => setPetListArr(val)}\n          type={'scheduled'}\n          searchVisible={true}\n        />\n      </div>\n      <Modal\n          title=\"Assign Measurement\"\n          centered\n          open={addModal}\n          // onOk={this.handleOk}\n          onCancel={() => setScheduleModal(false)}\n          width={430}\n          maskClosable={false}\n          footer={null}\n          className=\"addScheduleModal\"\n        >\n        <div className=\"modalContainer\">\n          <div className=\"title\">\n            Search patient or pet species\n          </div>\n          <div className=\"searchBox\">\n            <Input\n              placeholder=\"Search Pet\"\n              bordered={false}\n              allowClear={true}\n              prefix={<SearchOutlined />}\n              // onChange={onChange}\n            />\n          </div>\n          <div className=\"petList\">\n            <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                    selsectwuzhong('dog')\n                }}>\n                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                <span style={{marginLeft: '10px'}}>Dog</span>\n            </div>\n            <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                    selsectwuzhong('cat')\n                }}>\n                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                <span style={{marginLeft: '10px'}}>Cat</span>\n            </div>\n            <div\n                style={{ cursor: 'pointer' }}\n                onClick={() => {\n                    selsectwuzhong('other')\n                }}>\n                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                <span style={{marginLeft: '10px'}}>Other</span>\n            </div>\n\n          </div>\n          <div className=\"formList\">\n            <Form\n              form={form}\n              layout=\"vertical\"\n              // onFinish={onFinish}\n              className=\"accountForm\"\n            >\n              <Row>\n                <Col flex={1} >\n                  <Form.Item label=\"Pet Name\" name=\"PetName\">\n                    <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n                  </Form.Item>\n                  <Form.Item label=\"Patient ID\" name=\"PatientID\">\n                    <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n                  </Form.Item>\n                </Col>\n              </Row>\n              <Form.Item className=\"expertiseFormItem\" label=\"Procedure:\" name=\"domain\">\n                <Checkbox.Group>\n                  <Row>\n                    <Col span={8}>\n                      <Checkbox\n                        value='0'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Check-Up\n                      </Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox\n                        value='1'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Follow-Up\n                      </Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox\n                        value='2'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Vaccination\n                      </Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox\n                        value='3'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Surgery\n                      </Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox\n                        value='4'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Dental\n                      </Checkbox>\n                    </Col>\n                    <Col span={8}>\n                      <Checkbox\n                        value='5'\n                        style={{\n                          lineHeight: '32px',\n                        }}\n                      >\n                        Other\n                      </Checkbox>\n                    </Col>\n                  </Row>\n                </Checkbox.Group>\n              </Form.Item>\n            </Form>\n          </div>\n          <div className=\"btnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              block\n            >\n              Save\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div >\n\n  )\n}\n\n\nScheduledPetPage.propTypes = {\n\n}\n//默认值\nScheduledPetPage.defaultProps = {\n  bodyHeight: 0,\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, setPetListArrFun }\n)(ScheduledPetPage)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",["943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977"],"import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Layout, message, Input, Modal, Table, Popconfirm, Select, Radio } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nimport edit from \"./../../assets/images/edit.png\";\nimport del from \"./../../assets/images/del.png\";\nimport start from \"./../../assets/img/start.png\";\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\nimport placement_er from \"./../../assets/images/placement_er.png\";\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\nimport thrDot from \"./../../assets/img/thrDot.png\"\nimport completeMeasure from \"./../../assets/img/completMeasure.png\"\nimport measuringDots from \"./../../assets/img/measuringDots.png\"\nimport TempReady from \"./../../assets/img/TempReady.png\"\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport { px, mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport UnassignModal from './../../components/UnassignModal/UnassignModal';\nimport SelectPet from \"../../components/selectPetModal\";\nimport AddPetModal from \"../../components/addPetModal\";\nimport {\n  addAllClinical,\n  deletePetExamByExamId,\n  getClinicalDataByExamId,\n  getPetExamAndClinicalByPetId,\n  getPetExamByDoctorId,\n  updatePetExam,\n  updatePetInfo,\n  addAndSavePetExam,\n  addDeskPet,\n} from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport { setTest } from \"../../store/actions\";\nimport ReactECharts from \"echarts-for-react\";\nimport propTypes from \"prop-types\";\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\n\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\nlet storage = window.localStorage;\n\nlet mellaMeasureNumCopy = 0;\n\n//定义echarts的数据个数\nconst { Option } = Select;\nlet saveHistoryTime = null;\nconst ClinicalStudy = ({\n  bodyHeight,\n  mellaConnectStatus,\n  mellaMeasureValue,\n  mellaMeasureNum,\n  petDetailInfo,\n  setTest,\n  biggieBodyWeight,\n  biggieUnit,\n}) => {\n  const [units, setUnits] = useState(\"\");\n  const [temperature, setTemp] = useState(0);\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\n  const [echarsData, setEcharsData] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [echarsData1, setEcharsData1] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\n    useState(\"\");\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\n  const [furLength, setFurLength] = useState(\"\");\n  const [heartRate, setHeartRate] = useState(\"\");\n  const [bloodPressure, setBloodPressure] = useState(\"\");\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\n  const [historyData, setHistoryData] = useState([]);//walk-in中未分配的数据\n  const [editRectal, setEditRectal] = useState(\"\");\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\n  const [editVisible, setEditVisible] = useState(false);\n  const [editId, setEditId] = useState(\"\");\n  const [editMemo, setEditMemo] = useState(\"\");\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\n  const [editFurLength, setEditFurLength] = useState(\"\");\n  const [tipSpin, setTipSpin] = useState(false);\n  const [tip, setTip] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [memo, setMemo] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(px(600));\n  const [WeightValue, setWeightValue] = useState('');\n  const echartsElement = useRef(null);\n  const clinicalRef = useRef(null);\n  const [seleceEmergencies, setSeleceEmergencies] = useState({});\n  const [lastWorkplaceId, setLastLastWorkplaceId] = useState('');\n  const [selectPetVisible, setSelectPetVisible] = useState(false);//选择宠物弹窗显隐\n  const [addPetVisible, setAddPetVisible] = useState(false);//添加新宠物弹窗显隐\n  const [selectPetModalLoading, setSelectPetModalLoading] = useState(false);//分配宠物后调用接口加载\n  const [addPetModalLoading, setAddPetModalLoading] = useState(false);//添加新宠物调用接口加载\n  const [addPetId, setAddPetId] = useState('');//添加宠物成功后返回的宠物id\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n  const [excludeType, setExcludeType] = useState(0);//0不排除，1排除，默认0\n\n  //分辨率变化\n  const chartsBox = useCallback((node) => {\n    if (node !== null && echartsElement.current) {\n      setTimeout(() => {\n        echartsElement.current.getEchartsInstance().resize({ height: px(380) });\n      }, 1000)\n    }\n  }, [window.screen.availWidth]);\n  //窗口宽高变化\n  const resize = () => {\n    if (clinicalRef.current && clinicalRef.current.offsetWidth) {\n      setWindowWidth(clinicalRef.current.offsetWidth);\n    }\n  };\n  //临床测试数据保存\n  const addClinical = () => {\n    let emerData = [];\n    let { Eci, wen0, wen1 } = echarsData;\n    for (let i = 0; i < wen0.length; i++) {\n      const element = wen0[i];\n      let str = {\n        data0: element,\n        data1: wen1[i],\n      };\n      emerData.push(str);\n    }\n    saveHistoryTime && clearTimeout(saveHistoryTime);\n    saveHistoryTime = setTimeout(() => {\n      let BCS =\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\n      let respireatoryR =\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\n\n      let roomT =\n        roomTemperature === \"\"\n          ? null\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\n\n      let referenceT =\n        referenceRectalTemperature === \"\"\n          ? null\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\n\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\n\n      let petVitalId = 1;\n\n      let datas = {\n        temperature: parseFloat(temperature), //测量温度\n        roomTemperature: roomT, //室温\n        bodyConditionScore: BCS, //身体状况评分\n        heartRate: hrartR, //心率\n        respiratoryRate: respireatoryR, //呼吸率\n        referenceRectalTemperature: referenceT, //参考腹部温度\n        furLength: furL, //毛发长度\n        bloodPressure: bloodPressure, //血压\n        memo: notes,\n        petVitalTypeId: petVitalId,\n        clinicalDataEntityList: emerData,\n        anusTemperature: referenceT,\n        exclude: excludeType,\n      };\n      if (storage.roleId === `1`) {\n        datas.userId = storage.userId;\n      } else {\n        datas.doctorId = storage.userId;\n        datas.userId = storage.userId;\n      }\n      let ubdateWeight = units === \"℉\" ? (parseFloat(WeightValue / 2)).toFixed(2) : parseFloat(WeightValue).toFixed(2);\n      let updatePetInfoData = {\n        weight: ubdateWeight\n      }\n      if (storage.lastOrganization) {\n        updatePetInfoData.organizationId = storage.lastOrganization\n      }\n\n      let { petId, isWalkIn } = petDetailInfo;\n      if (petId && !isWalkIn) {\n        datas.petId = petId;\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getHistory11(petDetailInfo.petId);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(\"upload failed\");\n          });\n      } else if (isWalkIn) {\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getEmergencyHistory(1);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(err);\n          });\n      }\n      if (WeightValue !== '' && !isWalkIn) {\n        updatePetInfo(petId, updatePetInfoData)\n          .then((res) => {\n            if (res.flag === true) {\n\n            } else {\n              message.error('Failed to update pet weight');\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }\n    }, 500);\n  };\n  //获取宠物历史记录\n  const _getHistory11 = (petId) => {\n    let historys = [];\n    setLoading(true);\n    getPetExamAndClinicalByPetId(petId)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i];\n\n            let {\n              petId,\n              examId,\n              clinicalDatagroupId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n              modifiedTime,\n            } = data;\n\n            if (!clinicalDatagroupId) {\n              continue;\n            }\n            let Tem = temperature;\n            if (clinicalDataEntity) {\n              Tem = Tem || clinicalDataEntity.data0;\n            }\n            Tem = Tem ? Tem : 0;\n\n            let time = null;\n            if (\n              createTime &&\n              `${createTime}` !== \"\" &&\n              `${createTime}` !== `undefined`\n            ) {\n              time = createTime;\n            } else {\n              time = modifiedTime;\n            }\n            let json = {\n              time,\n              Temp: Tem,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(json);\n          }\n          let historyData = [];\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i];\n            let {\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              examId,\n            } = history;\n            // console.log('--------', history.placement);\n            let placement = history.placement;\n            if (placement === null || placement === \"\") {\n              placement = 1;\n            }\n            let str = {\n              date: moment(history.time).format(\"MMM DD\"),\n              time: moment(history.time).format(\"hh:mm A\"),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              key: examId,\n            };\n            historyData.push(str);\n          }\n          // this.setState({\n          //     historyData\n          // })\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  //获取walk-in下未分配宠物的临床测试记录\n  const _getEmergencyHistory = (currPage) => {\n    let historys = [];\n    setLoading(true);\n    let data = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: 0,\n    }\n    getPetExamByDoctorId(storage.userId, data)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          setTotal(res.data.totalCount);\n          let datas = res.data.list;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let {\n              petId,\n              examId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              clinicalDatagroupId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n            } = datas[i];\n            let Tem = temperature;\n            try {\n              Tem = temperature || clinicalDataEntity.data0;\n            } catch (error) {\n              console.log(\"抛出的异常\", error);\n            }\n            let str = {\n              clinicalDatagroupId,\n              createTime,\n              date: moment(createTime).format(\"MMM DD\"),\n              time: moment(createTime).format(\"hh:mm A\"),\n              temp: parseInt(Tem * 10) / 10,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(str);\n          }\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = historys;\n          } else {\n            let oldArr = historyData;\n            let arr = historys;\n            newArr = [...oldArr, ...arr];\n          }\n          setHistoryData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const getOption = () => {\n    let option = {};\n    try {\n      let min, max;\n      if (units === \"℃\") {\n        min = 25;\n        max = 45;\n      } else {\n        min = 75;\n        max = 115;\n      }\n      let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci)\n        ? echarsData\n        : echarsData1;\n      option = {\n        color: [\"#81b22f\"],\n        tooltip: {\n          /*返回需要的信息*/\n          trigger: \"axis\",\n          triggerOn: \"mousemove\",\n          enterable: true,\n          formatter: function (param) {\n            var value = param[0].value;\n            // console.log('---valuez值', value, units);\n            if (\n              (units === \"℉\" && parseInt(value) <= 32) ||\n              (units === \"℃\" && parseInt(value) == 0)\n            ) {\n              return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:--</div>`;\n            }\n            return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\n              1\n            )}${units}</div>`;\n          },\n        },\n        xAxis: {\n          name: \"SPL\",\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\",\n          },\n          type: \"category\",\n          data: Eci,\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          // 设置X轴数据旋转倾斜\n          axisLabel: {\n            rotate: 0, // 旋转角度\n            interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\n          },\n        },\n        yAxis: {\n          name: \"temperature\",\n          type: \"value\",\n          min, // 设置y轴刻度的最小值\n          max, // 设置y轴刻度的最大值\n          splitNumber: 0, // 设置y轴刻度间隔个数\n          nameTextStyle: {\n            padding: [0, 0, 0, 8],\n            // backgroundColor: 'pink',\n            width: \"1200px\",\n            // fontSize: 20,\n            align: \"left\",\n          },\n\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        series: [\n          {\n            name: \"模拟数据\",\n            type: \"line\",\n            showSymbol: false,\n            hoverAnimation: false,\n            // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\n            data: wen0,\n            smooth: 0.5,\n            symbol: \"none\",\n            // itemStyle: {\n            //     normal: {\n\n            //     }\n            // }\n            lineStyle: {\n              // 系列级个性化折线样式\n              width: 2,\n              type: \"solid\",\n              color: {\n                type: \"linear\",\n                x: 0,\n                y: 1,\n                x2: 0,\n                y2: 0,\n                colorStops: [\n                  {\n                    offset: 0.5,\n                    color: \"#47C2ED\", // 0% 处的颜色  蓝\n                  },\n                  {\n                    offset: 1,\n                    color: \"#78D35D\", // 50% 处的颜色  绿\n                  },\n                  // {\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\n                  // }\n                ],\n                globalCoord: false, // 缺省为 false\n              },\n            },\n          },\n        ],\n      };\n    } catch (error) { }\n\n    return option;\n  };\n  const getSwitch = (status, text) => {\n    switch (status) {\n      case 'disconnected':\n        return (\n          <span style={{ position: \"absolute\", left: '-20px', fontSize: px(32), fontWeight: \"bold\" }}>\n            {text}\n          </span>\n        )\n      case 'connected':\n        return (\n          <>\n            <img src={thrDot} alt=\"\" style={{ height: '20px', position: \"absolute\", bottom: \"140px\", right: '20px' }} />\n            <img src={TempReady} alt=\"\" style={{ height: '250px', position: \"absolute\", bottom: \"-140px\", right: 0 }} />\n          </>\n        )\n      case 'complete':\n        return (\n          <>\n            <span style={{ position: \"absolute\", bottom: '-140px', right: '30px', fontSize: px(32), fontWeight: \"bold\" }}>\n              {text}\n            </span>\n          </>\n        )\n      default:\n        break;\n    }\n  }\n  const _status = () => {\n    // let mellaConnectStatus = 'complete'\n    let text = \"\",\n      unit = \"\",\n      temColor = \"\";\n    // let Temp = 35;\n    let Temp = parseFloat(temperature);\n    if (mellaConnectStatus === \"disconnected\") {\n      if (!showHistoryEchart) {\n        Temp = \"\";\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      } else {\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      }\n    } else if (mellaConnectStatus === \"connected\") {\n      Temp = \"\";\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n    } else {\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n      if (Temp > 15) {\n        unit = units;\n        if (Temp > 39) {\n          text = \"High\";\n          temColor = \"#E1206D\";\n        } else if (Temp < 31) {\n          text = \"Low\";\n          temColor = \"#47C2ED\";\n        } else {\n          text = \"Normal\";\n          temColor = \"#78D35D\";\n        }\n      }\n    }\n    let temp = null;\n\n    if (`${Temp}` !== \"NaN\" && Temp) {\n      temp =\n        units === \"℉\" ? _.round((Temp * 1.8 + 32), 1) : Temp.toFixed(1);\n    }\n    let lowFlog = false;\n    if (unit === \"℃\") {\n      if (temp < 24.8) {\n        lowFlog = true;\n      }\n    } else {\n      if (temp < 76.6) {\n        lowFlog = true;\n      }\n    }\n\n    return (\n      <div\n        className=\"Tem\"\n        style={{\n          color: temColor,\n          right: px(5),\n          bottom: mTop(200),\n          pointerEvents: \"none\",\n        }}\n      >\n        {mellaConnectStatus !== \"isMeasuring\" ? (\n          showHistoryEchart ? (\n            <>\n              <span style={{ fontSize: px(42), fontWeight: \"bold\" }}>\n                {temp}{\" \"}\n                <sup style={{ fontSize: px(26), fontWeight: \"bold\" }}>\n                  {units}\n                </sup>\n              </span>\n              <br />\n              <span style={{ fontSize: px(22) }}>{text}</span>\n\n              <span\n                style={{\n                  fontSize: px(32),\n                  color: \"#8a8a8a\",\n                  fontWeight: \"bold\",\n                }}\n              >{`History`}</span>\n            </>\n          ) : (\n            <>\n              {mellaConnectStatus === 'complete' &&\n                <>\n                  <img src={completeMeasure} alt=\"\" style={{ height: '30px', position: \"absolute\", bottom: \"140px\", right: '20px' }} />\n                </>\n              }\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp < 3 && !temp ? null : temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {unit}\n                </sup>\n              </span>\n              <br />\n              {getSwitch(mellaConnectStatus, text)}\n            </>\n          )\n        ) : lowFlog ? (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {\"Low\"}\n            </span>\n            <br />\n          </>\n        ) : (\n          <>\n            <img src={measuringDots} alt=\"\" style={{ height: '20px', position: \"absolute\", bottom: \"140px\", right: '50px' }} />\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {temp}{\" \"}\n              <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>{unit}</sup>\n            </span>\n            <br />\n            <div style={{ position: \"absolute\", bottom: '-140px', right: '50px', color: '#3b3a3a', fontSize: '17px', fontFamily: 'VAG Rounded Std', fontWeight: 'bold' }}>Measuring...</div>\n          </>\n        )}\n      </div>\n    );\n  };\n  const handleChange = (index) => {\n    setFurLength(index);\n  };\n  //Exam Details内容\n  const _petCharacteristics = () => {\n    let placeholder = \"\";\n    switch (`${furLength}`) {\n      case \"1\":\n        placeholder = \"smooth\";\n        break;\n      case \"2\":\n        placeholder = \"short\";\n        break;\n      case \"3\":\n        placeholder = \"medium\";\n        break;\n      case \"4\":\n        placeholder = \"long\";\n        break;\n      default:\n        break;\n    }\n    return (\n      <div\n        className=\"petChaeacteristics\"\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\n      >\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Room Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={roomTemperature}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRoomTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Reference Rectal Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={`${referenceRectalTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setReferenceRectalTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Body Condition Score: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bodyConditionScore}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBodyConditionScore(str);\n              }}\n              maxLength={8}\n            />\n          </div>\n          <div className=\"item\">\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              className=\"inpSelect\"\n              placeholder\n              onChange={handleChange}\n              value={placeholder}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${heartRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setHeartRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Blood Pressure: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bloodPressure}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBloodPressure(str);\n              }}\n              suffix={'mm'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${respiratoryRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRespiratoryRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: '140px' }}>Weight:  </p>\n            <Input className='inp'\n              style={{ border: 'none', outline: 'medium' }}\n              value={WeightValue}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\n                setWeightValue(str);\n              }}\n              suffix={units === '℉' ? 'lb' : 'kg'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div className=\"item\">\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Exclude Data: </p>\n            <Radio.Group onChange={excludeChange} value={excludeType}>\n              <Radio value={1}>YES</Radio>\n              <Radio value={0}>NO</Radio>\n            </Radio.Group>\n          </div>\n          <div className=\"item\" style={{ width: '225px' }}>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //用户选择是否排除该条数据\n  const excludeChange = (e) => {\n    setExcludeType(e.target.value);\n  }\n  //历史数据\n  const _history = () => {\n    const _del = (key, record) => {\n      deletePetExamByExamId(key)\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              const historyData1 = [...historyData];\n              setHistoryData(\n                historyData1.filter((item) => item.historyId !== key)\n              );\n            } else {\n              message.error('fail to delete!');\n            }\n          }\n        );\n    };\n    const _edit = (key, record) => {\n      let {\n        heartRate,\n        bloodPressure,\n        respiratoryRate,\n        referenceRectalTemperature,\n        roomTemperature,\n        bodyConditionScore,\n        furLength,\n        note,\n      } = record;\n      let editHeartRate =\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\n      let editBloodPressure =\n        bloodPressure !== null && bloodPressure !== undefined\n          ? bloodPressure\n          : \"\";\n      let editRespiratoryRate =\n        respiratoryRate !== null && respiratoryRate !== undefined\n          ? respiratoryRate\n          : \"\";\n      let editRectal =\n        referenceRectalTemperature !== null &&\n          referenceRectalTemperature !== undefined\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editRoomTemperature =\n        roomTemperature !== null && roomTemperature !== undefined\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editBodyConditionScore =\n        bodyConditionScore !== null && bodyConditionScore !== undefined\n          ? bodyConditionScore\n          : \"\";\n      let editFurLength = furLength;\n      let mome = note ? note : \"\";\n\n      console.log(\n        editRectal,\n        editRoomTemperature,\n        editHeartRate,\n        editBloodPressure,\n        editRespiratoryRate\n      );\n\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\n      setEditRectal(editRectal);\n      setEditRoomTemperature(editRoomTemperature);\n      setEditHeartRate(editHeartRate);\n      setEditBloodPressure(editBloodPressure);\n      setEditRespiratoryRate(editRespiratoryRate);\n      setEditVisible(true);\n      setEditId(key);\n      setEditMemo(record.note);\n      setEditBodyConditionScore(editBodyConditionScore);\n      setEditFurLength(editFurLength);\n      setMemo(mome);\n    };\n    const see = (id, record) => {\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      console.log(id, record);\n      setTip(\"data is loading\");\n      setTipSpin(true);\n      getClinicalDataByExamId(id)\n        .then((res) => {\n          setTip(\"\");\n          setTipSpin(false);\n          if (res.flag) {\n            let datas = res.data.clinicalDataEntityList;\n            if (datas) {\n              let echarsData = {\n                Eci: [],\n                wen0: [],\n                wen1: [],\n              };\n              let { wen0, wen1, Eci } = echarsData;\n              for (let i = 0; i < datas.length; i++) {\n                let { data0, data1 } = datas[i];\n\n                Eci.push(i);\n                if (units === \"℃\") {\n                  wen0.push(data0);\n                  wen1.push(data1);\n                } else {\n                  wen0.push(data0 * 1.8 + 32);\n                  wen1.push(data1 * 1.8 + 32);\n                }\n              }\n              let Temp = datas[datas.length - 1].data0 || \"\";\n              setEcharsData(echarsData);\n              setTemp(Temp);\n              setShowHistoryEchart(true);\n            }\n          }\n        })\n        .catch((err) => {\n          setTip(\"\");\n          setTipSpin(false);\n          console.log(err);\n        });\n    };\n    const isflog = window.screen.height < 1000 ? true : false;\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"activeImageBox\"\n              style={{\n                display: \"flex\",\n                justifyContent: 'center'\n              }}\n            >\n              <img\n                src={start}\n                alt=\"\"\n                // style={{ width: px(25) }}\n                onClick={() => see(record.historyId, record)}\n                className=\"activeImages\"\n              />\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: `Temp(${units})`,\n        // title: `Temp(℉)`,\n        key: \"temp\",\n        dataIndex: \"temp\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log(text, record);\n\n          /**\n           * bag：温度数值前的圆圈的背景颜色\n           * tem：展示的温度\n           * endvalue:将从后台得到的数据全部转化成华氏度\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           *\n           */\n\n          let bag = \"\",\n            tem = \"\";\n\n          let endValue =\n            text > 55 ? text : _.round((text * 1.8 + 32), 1);\n          let min = 100.4,\n            max = 102.56;\n\n          if (endValue > max) {\n            bag = \"#E1206D\";\n          } else if (endValue < min) {\n            bag = \"#98DA86\";\n          } else {\n            bag = \"#58BDE6\";\n          }\n\n          if (units === \"℃\") {\n            if (text) {\n              tem = `${text}${units}`;\n              if (text > 55) {\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\n              } else {\n                tem = `${text.toFixed(1)}${units}`;\n              }\n            }\n          } else {\n            if (text) {\n              if (text > 55) {\n                tem = `${text}${units}`;\n              } else {\n                tem = `${_.round((text * 1.8 + 32), 1)}${units}`;\n              }\n            }\n          }\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {tem ? (\n                <div\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"8px\",\n                    backgroundColor: bag,\n                    marginRight: \"3px\",\n                  }}\n                />\n              ) : null}\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n            </div>\n          );\n        },\n      },\n      {\n        title: `Rectal Temperature`,\n        key: \"referenceRectalTemperature\",\n        dataIndex: \"referenceRectalTemperature\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log('肛温的值：', text);\n          let num = text;\n          if (text !== null) {\n            num = _.round((text * 1.8 + 32), 1);\n          }\n\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {text !== null && (\n                <p style={{ margin: 0, padding: 0 }}>\n                  {num} <span>{\"℉\"}</span>\n                </p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Placement\",\n        dataIndex: \"placement\",\n        key: \"placement\",\n        align: \"center\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        render: (text, record, index) => {\n          switch (record.placement) {\n            case 1:\n              return (\n                //腋温\n                <div>\n                  <img src={palcement_ye} alt=\"\" />\n                </div>\n              );\n            case 3:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 2:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 4:\n              return (\n                //耳温\n                <div>\n                  <img src={placement_er} alt=\"\" />\n                </div>\n              );\n            default:\n              return null;\n          }\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"100%\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"activeImageBox\"\n              style={{\n                display: \"flex\",\n                justifyContent: 'space-around'\n              }}\n            >\n\n              {petDetailInfo.isWalkIn ? (\n                <div\n                  className=\"assign\"\n                  style={{\n                    fontSize: px(14),\n                  }}\n                  onClick={() => {\n                    setSelectPetVisible(true);\n                    setSeleceEmergencies(record);\n                    setLastLastWorkplaceId(storage.lastOrganization);\n                  }}\n                >\n                  Assign\n                </div>\n              ) : (\n                <>\n                  <img\n                    src={edit}\n                    alt=\"\"\n                    // style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                    className=\"activeImages\"\n                  />\n                </>\n              )}\n\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" className=\"activeImages\" />\n              </Popconfirm>\n            </div>\n          );\n        },\n      },\n    ];\n    let hisHe = mTop(200);\n    try {\n      let historyElement = document.querySelectorAll(\n        \"#clinicalMeasure11 .historyTable\"\n      );\n      hisHe = historyElement[0].clientHeight - mTop(100);\n    } catch (error) { }\n\n    return (\n      <div className=\"historyTableBox\" onScrollCapture={onScrollCapture}>\n        <Table\n          className=\"historyTable\"\n          columns={columns}\n          loading={loading}\n          dataSource={historyData}\n          rowKey={(columns) => columns.historyId}\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\n          pagination={false}\n          scroll={{\n            // y: hisHe,\n            y: '80%'\n          }}\n        />\n      </div>\n    );\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === historyData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      _getEmergencyHistory(currPage + 1);\n    }\n  }\n  const _editModal = () => {\n    function save() {\n      let datas = {\n        memo: memo,\n        bodyConditionScore: parseInt(editBodyConditionScore),\n        furLength: parseInt(editFurLength),\n        heartRate: editHeartRate,\n        bloodPressure: editBloodPressure,\n        respiratoryRate: editRespiratoryRate,\n      };\n      if (editRoomTemperature) {\n        datas.roomTemperature = (\n          (parseFloat(editRoomTemperature) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n      if (editRectal) {\n        datas.referenceRectalTemperature = (\n          (parseFloat(editRectal) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n\n      setEditVisible(false);\n      setTip(\"Data is being modified\");\n      setTipSpin(true);\n\n\n      updatePetExam(editId, datas)\n        .then((res) => {\n          console.log(res);\n          setTipSpin(false);\n          setTip(\"\");\n          message.success(\"Data modified successfully\");\n\n          _getHistory11(petDetailInfo.petId);\n        })\n        .catch((err) => {\n          setTipSpin(false);\n          setTip(\"\");\n\n          message.success(\" Data modification failed\");\n\n          console.log(err);\n        });\n    }\n\n    let furLength = \"\";\n    if (editFurLength !== null && editFurLength !== undefined) {\n      switch (`${editFurLength}`) {\n        case \"1\":\n          furLength = \"smooth\";\n          break;\n        case \"2\":\n          furLength = \"short\";\n          break;\n        case \"3\":\n          furLength = \"medium\";\n          break;\n        case \"4\":\n          furLength = \"long\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          >\n            Modification history information\n          </div>\n        }\n        open={editVisible}\n        onCancel={() => {\n          setEditVisible(false);\n        }}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n          // onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n        className=\"editModalBox\"\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRoomTemperature}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n\n                setEditRoomTemperature(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRectal}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setEditRectal(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBodyConditionScore}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n\n                setEditBodyConditionScore(str);\n              }}\n            />\n          </div>\n\n          <div className=\"bodyType11\">\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={(index) => {\n                console.log(index);\n                setEditFurLength(index);\n              }}\n              style={{\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={furLength}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editHeartRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditHeartRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBloodPressure}\n              onChange={(item) => {\n                setEditBloodPressure(item.target.value);\n              }}\n            />\n            <span>mm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRespiratoryRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditRespiratoryRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"2\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              value={memo}\n              onChange={(val) => {\n                setMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n\n          <div className=\"btn\" onClick={save}>\n            Save\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n  const _foot = () => {\n    let lbgc = \"\",\n      rbgc = \"\";\n    if (isPetCharacteristics) {\n      lbgc = \"rgba(25,173,228,0.5)\";\n      rbgc = \"rgba(105,201,237,1)\";\n    } else {\n      lbgc = \"rgba(105,201,237,1)\";\n      rbgc = \"rgba(25,173,228,0.5)\";\n    }\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\">\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: lbgc }}\n            onClick={() => setIsPetCharacteristics(true)}\n          >\n            Exam Details\n          </div>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: rbgc }}\n            onClick={() => setIsPetCharacteristics(false)}\n          >\n            History\n          </div>\n        </div>\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\n      </div>\n    );\n  };\n  //获取本地数据\n  const getLocalSetting = () => {\n    let settings = {\n      isHua: true,\n      is15: true,\n      self_tarting: false, //自启动\n      isBacklight: true,\n      isBeep: true,\n      backlightTimer: { length: 140, number: \"45\" },\n      autoOff: { length: 0, number: \"30\" },\n    };\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n  };\n  //echars渲染\n  const echars = () => {\n    return (\n      <div id=\"myCharts\"\n        style={{ width: windowWidth }}\n        ref={chartsBox}\n      >\n        <ReactECharts\n          option={getOption()}\n          theme=\"Imooc\"\n          style={{ height: 'auto', width: '70%' }}\n          notMerge={true}\n          lazyUpdate={true}\n          ref={echartsElement}\n          className=\"charts\"\n        />\n        {_status()}\n      </div>\n    );\n  };\n  //分配宠物walk-in信息\n  const assignPet = (value) => {\n    setSelectPetModalLoading(true);\n    let parmes = {\n      petId: value.petId,\n      clinicalDatagroupId: seleceEmergencies.clinicalDatagroupId,\n\n    };\n    addAndSavePetExam(seleceEmergencies.historyId, parmes)\n      .then((res) => {\n        setSelectPetModalLoading(false);\n        if (res.flag === true) {\n          message.success(\"Assigned successfully\");\n          setSelectPetVisible(false);\n          setAddPetId('');\n          _getEmergencyHistory(1);\n        } else {\n          message.error(\"Assignment failed\");\n        }\n      })\n      .catch((err) => {\n        setSelectPetModalLoading(false);\n        message.error(\"Assignment failed\");\n      });\n  }\n  //添加宠物弹窗显示\n  const onAddPet = () => {\n    setAddPetId('');\n    setSelectPetVisible(false);\n    setAddPetVisible(true);\n  }\n  //添加宠物\n  const addNewPet = (value) => {\n    let data = {\n      ...value,\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\n    };\n    if (storage.lastWorkplaceId) {\n      data.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (storage.userId) {\n      data.doctorId = storage.userId\n    }\n    setAddPetModalLoading(true);\n    addDeskPet(value.patientId, data)\n      .then((res) => {\n        setAddPetModalLoading(false);\n        if (res.flag === true) {\n          message.success('Adding pets successfully');\n          setAddPetId(res.data.petId);\n          setAddPetVisible(false);\n          setSelectPetVisible(true);\n        } else {\n          message.error('patientId already exists');\n        }\n      })\n      .catch((err) => {\n        setAddPetModalLoading(false);\n      })\n  }\n\n  useEffect(() => {\n    if (petDetailInfo.petId) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getHistory11(petDetailInfo.petId);\n    } else if (petDetailInfo.isWalkIn) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getEmergencyHistory(1);\n    }\n    return () => {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n    };\n  }, [petDetailInfo]);\n\n  useEffect(() => {\n    return () => {\n      saveHistoryTime && clearTimeout(saveHistoryTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", resize);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // setTest(echartsElement);\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (mellaMeasureNumCopy === mellaMeasureNum) {\n      return;\n    }\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // console.log('监听', mellaMeasureValue);\n    setTemp(mellaMeasureValue);\n    let { Eci, wen0, wen1 } = echarsData;\n    //两个数组合并成一个数组\n    let EciCopy = [...Eci];\n\n    let win0Copy = [...wen0];\n    let wen1Copy = [...wen1];\n    EciCopy.push(EciCopy.length + 1);\n    win0Copy.push(mellaMeasureValue);\n    wen1Copy.push(mellaMeasureValue);\n    let json = {\n      Eci: EciCopy,\n      wen0: win0Copy,\n      wen1: wen1Copy,\n    };\n    setEcharsData(json);\n    let Eci1 = echarsData1.Eci;\n    let wen01 = echarsData1.wen0;\n    let wen11 = echarsData1.wen1;\n    let EciCopy1 = [...Eci1];\n\n    let win0Copy1 = [...wen01];\n    let wen1Copy1 = [...wen11];\n    EciCopy1.push(EciCopy1.length + 1);\n    let num =\n      units === \"℃\"\n        ? mellaMeasureValue\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\n    win0Copy1.push(num);\n    wen1Copy1.push(num);\n    let json1 = {\n      Eci: EciCopy1,\n      wen0: win0Copy1,\n      wen1: wen1Copy1,\n    };\n    setEcharsData1(json1);\n    // const option = getOption();\n    // echartsElement.current.getEchartsInstance().setOption(option);\n    return () => { };\n  }, [mellaMeasureNum]);\n\n  useEffect(() => {\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\n      addClinical();\n    }\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\n      setEcharsData({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n    }\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setShowHistoryEchart(false);\n    }\n\n    setMellaStatus(mellaConnectStatus);\n    return () => { };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      getLocalSetting();\n    } else {\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\n    }\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    let bufferData = electronStore.get(`${petDetailInfo.petId}`);\n    // console.log('bufferData: ', bufferData);\n    setRoomTemperature(bufferData ? bufferData?.roomTemperature : '');\n    setReferenceRectalTemperature(bufferData ? bufferData?.referenceRectalTemperature : '');\n    setBodyConditionScore(bufferData ? bufferData?.bodyConditionScore : '');\n    setFurLength(bufferData ? bufferData?.furLength : '');\n    setHeartRate(bufferData ? bufferData?.heartRate : '');\n    setBloodPressure(bufferData ? bufferData?.bloodPressure : '');\n    setRespiratoryRate(bufferData ? bufferData?.respiratoryRate : '');\n    setWeightValue(bufferData ? bufferData?.WeightValue : '');\n    return (() => { })\n  }, [petDetailInfo.petId]);\n\n  useEffect(() => {\n    return () => {\n      let newData = {\n        roomTemperature: roomTemperature,\n        referenceRectalTemperature: referenceRectalTemperature,\n        bodyConditionScore: bodyConditionScore,\n        furLength: furLength,\n        heartRate: heartRate,\n        bloodPressure: bloodPressure,\n        respiratoryRate: respiratoryRate,\n        WeightValue: WeightValue\n      }\n      electronStore.set(`${petDetailInfo.petId}`, newData);\n    }\n  }, [roomTemperature, referenceRectalTemperature, bodyConditionScore, furLength, heartRate, bloodPressure, respiratoryRate, WeightValue, petDetailInfo.petId])\n\n  useEffect(() => {\n    if (biggieBodyWeight !== 0) {\n      if (units === '℉') {\n        setWeightValue((biggieBodyWeight * 2).toFixed(2));\n      } else {\n        setWeightValue(biggieBodyWeight.toFixed(2));\n      }\n    }\n    return (() => { })\n  }, [biggieBodyWeight])\n\n  return (\n    <>\n      <div\n        id=\"clinical\"\n        style={{\n          height: bodyHeight,\n          minWidth: px(200),\n          minHeight: bodyHeight,\n          overflow: \"hidden\",\n        }}\n        ref={clinicalRef}\n      >\n        <div\n          className=\"headerContentBox\"\n          style={{ background: \"#fff\", position: \"relative\" }}\n        >\n          <Layout style={{ height: \"100%\" }}>\n            <HeaderItem timeNum={60} />\n          </Layout>\n        </div>\n        <div\n          className=\"clinicalBody\"\n          style={{ width: \"100%\", height: bodyHeight - px(70) }}\n        >\n          <div className=\"clinical_top\">\n            <div className=\"r\">\n              {/*顶部按钮Re-sync Base*/}\n              {mellaConnectStatus === \"disconnected\" && (\n                <div className=\"bb1\">\n                  <div\n                    className=\"btn78\"\n                    onClick={() => {\n                      if (resyncDeviceIsClick === true) {\n                        resyncDeviceIsClick = false;\n                        let ipcRenderer = window.electron.ipcRenderer;\n                        ipcRenderer.send(\"qiehuan\");\n                        const time = setTimeout(() => {\n                          resyncDeviceIsClick = true;\n                          clearTimeout(time);\n                        }, 2500);\n                      }\n                    }}\n                  >\n                    Re-sync Base\n                  </div>\n                </div>\n              )}\n              {echars()}\n              {/* 底部宠物信息 */}\n              {_foot()}\n              {_editModal()}\n              {tipSpin && (\n                <div className=\"modal\">\n                  <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                    <LoadingOutlined\n                      style={{\n                        fontSize: 30,\n                        color: \"#fff\",\n                        marginTop: mTop(-30),\n                      }}\n                    />\n                  </div>\n                  <p>data is loading...</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {\n          selectPetVisible && (\n            <SelectPet\n              visible={selectPetVisible}\n              destroyOnClose\n              width={400}\n              value={addPetId}\n              onCancel={() => {\n                setAddPetId('');\n                setSelectPetVisible(false);\n              }}\n              onSelect={(value) => {\n                assignPet(value);\n              }}\n              onAddPet={() => onAddPet()}\n              onLoading={selectPetModalLoading}\n            />\n          )\n        }\n        {\n          addPetVisible && (\n            <AddPetModal\n              visible={addPetVisible}\n              destroyOnClose\n              width={400}\n              onCancel={() => {\n                setAddPetVisible(false);\n                setSelectPetVisible(true);\n              }}\n              onConfirm={(value) => {\n                addNewPet(value);\n              }}\n              onLoading={addPetModalLoading}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nClinicalStudy.propTypes = {\n  bodyHeight: propTypes.number,\n};\nClinicalStudy.defaultProps = {\n  bodyHeight: 0,\n};\nexport default connect(\n  (state) => ({\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    biggieBodyWeight: state.hardwareReduce.biggieBodyWeight,\n    biggieUnit: state.hardwareReduce.biggieUnit,\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  { setTest }\n)(ClinicalStudy);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",["978"],"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/LinkEquipment\";\nimport ScanPet from \"./components/scanPet\";\nimport CalculationResult from \"./components/calculationResult\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\n\nimport \"./index.less\";\n\nconst ScanPage = ({ petMessage, hardwareMessage, bodyHeight, }) => {\n  let { petId, isWalkIn } = petMessage;\n  const [calculationResultType, setCalculationResultType] = useState(false);//切换计算结果界面\n  const [measureData, setMeasureData] = useState({});//测量的值\n\n\n  return (\n    <>\n      <Layout className=\"scanHomeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {\n          calculationResultType ?\n            (\n              <CalculationResult type={setCalculationResultType} getMeasureData={measureData} />\n            ) :\n            (\n              _.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet type={setCalculationResultType} setMeasureData={setMeasureData} />\n            )\n        }\n\n      </Layout>\n    </>\n  );\n};\n\nScanPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(ScanPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",["979","980","981","982","983","984","985"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport { connect } from \"react-redux\";\nimport { setBiggieConnectStatusFun } from \"../../store/actions\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport HistoryTable from \"../../components/historyTable\";\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Biggie from \"./components/Biggie\";\n\nimport { px } from \"../../utils/px\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { ezyvetGetPetLatestExam, ezyvetUpdateWeight, vetspireGetPetLatestExam, vetspireUpdateWeight } from \"../../api\";\nimport { addClamantPetExam } from '../../api/mellaserver/exam'\n\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nconst { Header, Content, Footer, Sider } = Layout;\nlet storage = window.localStorage;\n\nconst BiggirPage = ({\n  hardwareReduce,\n  setBiggieConnectStatusFun,\n  petReduce,\n  bodyHeight,\n}) => {\n  let { petDetailInfo } = petReduce;\n  let { biggieBodyWeight } = hardwareReduce;\n  //定义体重值 体脂值 体重单位 连接状态\n  const [weight, setWeight] = useState(0);\n  const [impedance, setImpedance] = useState(null)\n  const [saveNum, setSaveNum] = useState(0);\n  const [fat, setFat] = useState(0);\n  const [unit, setUnit] = useState(\"kg\");\n  const [connectStatus, setConnectStatus] = useState(\"disconnected\");\n  const [isSavePMS, setIsSavePMS] = useState(false);\n  const [saveLoad, setSaveLoad] = useState(false);\n  const [isHaveSaveBtn, setIsHaveSaveBtn] = useState(true);\n\n  const _saveWeight = () => {\n    let params = {\n      petId: petDetailInfo.petId,\n      doctorId: storage.userId,\n      weight: weight,\n      memo: \"\",\n      fat: null,\n      bodyConditionScore: null,\n      impedance: impedance ? impedance : null\n    };\n    setSaveLoad(true);\n    addClamantPetExam(params)\n      .then((res) => {\n        setSaveLoad(false);\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataWeightVetspire()\n              break;\n            case '4'://ezyVet\n              updataWeightEzyvet()\n              break;\n            default:\n              message.success(\"Data successfully saved in Mella\");\n              break;\n          }\n          setSaveNum(saveNum + 1);\n          setIsHaveSaveBtn(false);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaveLoad(false);\n      });\n  };\n  const updataWeightVetspire = () => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: petDetailInfo.patientId,\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            weight: unit === 'kg' ? (weight * 2.2046).toFixed(1) : weight\n          }\n          vetspireUpdateWeight(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n\n  }\n  const updataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reUpdataWeightEzyvet();\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reUpdataWeightEzyvet();\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  const reUpdataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  useEffect(() => {\n    let isSave = storage.connectionKey ? false : true;\n    setIsSavePMS(isSave);\n    return () => { };\n  }, []);\n  useEffect(() => {\n    let {\n      biggieConnectStatus,\n      biggieBodyFat,\n      biggieBodyWeight,\n      biggieUnit,\n      biggieSameWeightCount,\n    } = hardwareReduce;\n    setConnectStatus(biggieConnectStatus);\n    setFat(biggieBodyFat);\n    setImpedance(biggieBodyFat)\n    setUnit(biggieUnit);\n    if (biggieUnit === \"lb\") {\n      biggieBodyWeight = biggieBodyWeight * 2;\n    }\n    setWeight(biggieBodyWeight);\n    if (biggieSameWeightCount === 6) {\n      // let ipcRenderer = window.require(\"electron\").ipcRenderer;\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"keyboardWriting\", weight);\n    }\n\n    return () => { };\n  }, [hardwareReduce]);\n\n  useEffect(() => {\n    setIsHaveSaveBtn(true);\n    return () => { };\n  }, [biggieBodyWeight]);\n  //宠物变了,要设置为未连接\n  useEffect(() => {\n    let {\n      biggieConnectStatus,\n    } = hardwareReduce;\n    if(biggieConnectStatus != 'disconnected') {\n      setBiggieConnectStatusFun(\"connected\")\n    }\n  }, [petDetailInfo]);\n\n  return (\n    <>\n      <Layout className=\"biggiePage\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        <Content className=\"biggieContentBox\">\n          {_.isEmpty(petDetailInfo) ? (\n            <>\n              <div className=\"chackPatientBox\">\n                <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n                <p className=\"chackPatientTitle\">Select a patient</p>\n              </div>\n            </>\n          ) : connectStatus === \"isMeasuring\" ? (\n            <div className=\"biggbody\">\n              <div className=\"biggieTopBox\">\n                <Biggie\n                  weight={weight}\n                  bodyFat={fat ? 5 : 0}\n                  score={5}\n                  impedance={fat}\n                  isIbs={unit === \"lb\"}\n                  onPress={_saveWeight}\n                  discardOnPress={() =>\n                    setBiggieConnectStatusFun(\"connected\")\n                  }\n                  issave={isSavePMS}\n                  isHaveSaveBtn={isHaveSaveBtn}\n                />\n              </div>\n            </div>\n          ) : (\n            <div style={{ height: connectStatus !== \"disconnected\" ? '50%' : '100%'}}>\n              <LinkEquipment />\n            </div>\n          )}\n          {\n            !_.isEmpty(petDetailInfo) && connectStatus !== \"disconnected\" && (\n              <div className=\"bottomContent\">\n                <div className=\"biggeTitleBox\">\n                  <p className=\"biggeTitle\">History</p>\n                </div>\n                <HistoryTable saveNum={saveNum} tableColumnType='weight' />\n              </div>\n            )\n          }\n        </Content>\n      </Layout>\n      <MyModal visible={saveLoad} />\n    </>\n  );\n};\n\nBiggirPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    hardwareReduce: state.hardwareReduce,\n    petReduce: state.petReduce,\n  }),\n  {\n    setBiggieConnectStatusFun,\n  }\n)(BiggirPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",["986","987","988","989","990","991","992","993","994"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Menu,\r\n  Popover,\r\n  Button,\r\n  Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\nimport './phoneBook.less'\r\nimport { px } from '../px';\r\n/**\r\n *\r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns\r\n */\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n  const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n  const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n  const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n  const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n  const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n  const _phoneList = () => {\r\n    let option = phoneList.map((item, index) => {\r\n      let data = item.data\r\n      let option1 = data.map((value, index1) => {\r\n        return (\r\n          <li\r\n            key={`option1${index1}`}\r\n            onClick={() => {\r\n              setSelectBreed(value.petSpeciesBreedId)\r\n              selectFun(value)\r\n            }}>\r\n            {value.name}\r\n            {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n          </li>\r\n        )\r\n      })\r\n      return (\r\n        <div className=\"phoneBody\">\r\n          <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n          <ul>\r\n            {option1}\r\n          </ul>\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const _letterList = () => {\r\n\r\n    let option = letterList.map((item, index) => {\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n\r\n          style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n          <a\r\n\r\n            onClick={() => {\r\n              litterClick(item)\r\n            }}\r\n          >{item}</a>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <ul className=\"letterUL\">\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const litterClick = (anchorName) => {\r\n    // console.log(anchorName);\r\n    if (anchorName) {\r\n      // 找到锚点\r\n      let anchorElement = document.getElementById(anchorName);\r\n      // console.log(anchorElement);\r\n      // 如果对应id的锚点存在，就跳转到锚点\r\n      if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n    }\r\n    // e.preventDefault();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (confirmSelectBreed !== -1) {\r\n      setSelectBreed(confirmSelectBreed)\r\n    }\r\n  }, [confirmSelectBreed]);\r\n\r\n  useEffect(() => {\r\n    let test = []\r\n    listDate.forEach((item, index) => {\r\n      let data = {\r\n        name: item.breedName,\r\n        hidden: false,\r\n        petSpeciesBreedId: item.petSpeciesBreedId\r\n      }\r\n      test.push(data)\r\n    })\r\n    //获取联系人列表\r\n    let list = test;\r\n    let sections = [], letterArr = [];\r\n    // 右侧字母栏数据处理\r\n    list.forEach((item, index) => {\r\n      letterArr.push(pinyin(item.name.substring(0, 1), {\r\n        style: pinyin.STYLE_FIRST_LETTER,\r\n      })[0][0].toUpperCase());\r\n\r\n      letterArr = [...new Set(letterArr)].sort();\r\n    });\r\n    // 分组数据处理\r\n    letterArr.forEach((item, index) => {\r\n      sections.push({\r\n        title: item,\r\n        data: []\r\n      })\r\n    });\r\n    list.forEach(item => {\r\n      let listItem = item;\r\n      sections.forEach(item => {\r\n        let first = listItem.name.substring(0, 1);\r\n        let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n        if (item.title == test) {\r\n          item.data.push({\r\n            firstName: first,\r\n            name: listItem.name,\r\n            hidden: listItem.hidden,\r\n            petSpeciesBreedId: listItem.petSpeciesBreedId\r\n          });\r\n        }\r\n      })\r\n    });\r\n    setPhoneList(sections)\r\n    setPhoneListCopy(sections)\r\n    setLetterList(letterArr)\r\n    setLetterListCopy(letterArr)\r\n  }, [listDate]);\r\n\r\n  useEffect(() => {\r\n    if (letterListCopy.length > 0) {\r\n      let allData = phoneListCopy\r\n      let newArr = []\r\n      let arr = []\r\n      if (searchText.length > 0) {\r\n        allData.map((item, i) => {\r\n          item.data.forEach((data, index) => {\r\n            let dataName = data.name ? data.name.toUpperCase() : ''\r\n            let keyData = searchText ? searchText.toUpperCase() : ''\r\n            if (dataName.search(keyData) !== -1) {\r\n              newArr.push(data)\r\n            }\r\n          })\r\n          if (newArr.length != 0) {\r\n            let oneGreep = {\r\n              title: item.title,\r\n              data: newArr\r\n            }\r\n            arr.push(oneGreep)\r\n          }\r\n          newArr = []\r\n        })\r\n        let letterArr = []\r\n        arr.forEach((item, index) => {\r\n          letterArr.push(item.title)\r\n        })\r\n        setPhoneList(arr)\r\n        setLetterList(letterArr)\r\n      } else {\r\n        setPhoneList(phoneListCopy)\r\n        setLetterList(letterListCopy)\r\n      }\r\n    }\r\n  }, [searchText]);\r\n\r\n  return (\r\n    <div id=\"phoneBook\">\r\n      <div className=\"phone\">\r\n        {_phoneList()}\r\n      </div>\r\n      <div className=\"litter\">\r\n        {_letterList()}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n  listDate: PropTypes.array,\r\n  selectFun: PropTypes.func,\r\n  searchText: PropTypes.string,\r\n  confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n  listDate: [],\r\n  selectFun: () => { },\r\n  searchText: '',\r\n  confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js",["995","996","997"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nconst baseURL = 'https://api2.vetspire.com';\r\n// const baseURL = '/v1';\r\n\r\n\r\n\r\n\r\nexport const graphql = (params, token) => {\r\n    return postJson(`${baseURL}/graphql`, params, { Authorization: token })\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx",["998"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Button\r\n} from \"antd\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { accessArr, subAdvantage } from './components/accessArr';\r\nimport close from './../../assets/img/close-white.png'\r\nimport './index.less'\r\nimport { list } from '../../api';\r\n\r\n\r\nconst BuySub = ({ cancleFun, buyFun, loadings }) => {\r\n\r\n    useEffect(() => {\r\n        list()\r\n            .then(res => {\r\n                console.log(\"🚀 ~ file: index.jsx ~ line 23 ~ useEffect ~ res\", res)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }, [])\r\n\r\n    const listUI = () => {\r\n        let options = accessArr.map((item, index) => {\r\n\r\n            return (\r\n                <li key={`1${index}`}>\r\n                    <div>\r\n                        <div className=\"title1\" style={{ backgroundColor: item.color }}>{item.title1}</div>\r\n                        <div className=\"title\">{item.title}</div>\r\n                        <div className=\"h2\">{item.h2}</div>\r\n                        <div className=\"h3\">{item.h3}</div>\r\n                        <Button type=\"primary\" shape=\"round\" className='buyBtn'\r\n                            onClick={() => {\r\n                                buyFun(item)\r\n                            }}\r\n                            loading={loadings[index]}\r\n                        >Buy Bow</Button>\r\n                    </div>\r\n                </li>\r\n            )\r\n        })\r\n        return (<ul>\r\n            {options}\r\n        </ul>)\r\n    }\r\n    const advantage = () => {\r\n        let options = subAdvantage.map((item1, index) => {\r\n            let option = item1.map((item, index1) => {\r\n                return (\r\n                    <li key={`${index}${index1}`}>\r\n                        <div className=\"itemone\">\r\n                            <div className=\"icon\">\r\n                                <img src={item.icon} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"text\">{item.text}</div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })\r\n            return (\r\n                <ul className={`ul${index}`}>\r\n                    {option}\r\n                </ul>\r\n            )\r\n        })\r\n        return options\r\n    }\r\n\r\n    return (\r\n        <div id='buySub'>\r\n            <div className=\"cencerIcon\">\r\n                <div onClick={cancleFun}>\r\n                    <img src={close} alt=\"\" />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"buySubTitle\">Select the option that best describes your needs</div>\r\n            <div className=\"subList\">\r\n                {listUI()}\r\n            </div>\r\n            <div className=\"premium\">Premium Features</div>\r\n            <div className=\"subAdvantage\">\r\n                {advantage()}\r\n            </div>\r\n            {/* <div className=\"bottom\">\r\n                <div>\r\n\r\n                </div>\r\n                <div\r\n                    className=\"cancel\"\r\n                    onClick={cancleFun}\r\n                >cancel</div>\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}\r\nBuySub.propTypes = {\r\n    cancleFun: PropTypes.func,\r\n    buyFun: PropTypes.func,\r\n    loadings: PropTypes.array\r\n};\r\nBuySub.defaultProps = {\r\n    cancleFun: () => { },\r\n    buyFun: () => { },\r\n    loadings: [false, false, false]\r\n}\r\n\r\nexport default BuySub;","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js",["999"],"/**\n * @file exam.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/exam`\n\n\n/**\n * @dec 温度保存和体重保存\n * @param {*} params\n * @returns\n */\nexport const addClamantPetExam = (params) => {\n  return postJson(`${baseURL}/addClamantPetExam`, params)\n}\n\n/**\n * @dec 根据历史记录id获取全部的过程数据\n * @param {str} examId 历史记录id\n * @returns\n */\nexport const getClinicalDataByExamId = (examId) => {\n  return get(`${baseURL}/getClinicalDataByExamId/${examId}`, \"\")\n}\n/**\n * @dec 获取宠物上一次测量体重，体长，温度的结果和时间\n * @param {*} petId\n * @returns\n */\nexport const getRecentPetData = (petId) => {\n  return get(`${baseURL}/getRecentPetData?petId=${petId}`, \"\");\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx",["1000","1001","1002","1003"],"import React, { } from 'react'\nimport PropTypes from 'prop-types';\nimport { px, mTop } from '../../../utils/px'\nimport cir from '../../../assets/images/cir.png'\nimport xia from '../../../assets/img/xia.png'\nimport './biggie.less'\n/**\n *\n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * @returns\n */\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ fontWeight: '800' }}>{weight}</div>\n          <div className='cTTextUnit'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText'>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n      <div className='biggiefoot'>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n          </div>\n        }\n        <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10), height: '28px' }}>{(impedance && impedance > 0) ? `Impedance ${impedance} Ohms` : ''}</div>\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",["1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017"],"import React, { useEffect, useState } from \"react\";\nimport { Image, Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\nimport connectScale from \"../../../assets/img/connectScale.png\"\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, biggieConnectStatus, biggieBodyFat }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [saveNum, setSaveNum] = useState(0);\n  return (\n    <>\n      <div className={\"linkBox\"}>\n        <div className=\"startBox\">\n          {\n            biggieConnectStatus == 'disconnected' ? (\n              <>\n                <img className=\"scaleImg\" src={connectScale}></img>\n                <p className=\"startTitle\">Connect scale to start</p>\n              </>\n\n            ) : biggieConnectStatus == 'connected' ?  (\n              <>\n                <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p>\n              </>\n            ) : ''\n          }\n\n              {/* <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p> */}\n\n\n        </div>\n      </div>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    biggieConnectStatus: state.hardwareReduce.biggieConnectStatus,\n    biggieBodyFat: state.hardwareReduce.biggieBodyFat\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Image,\n  Layout,\n  Dropdown,\n  Col,\n  Row,\n  Avatar,\n  Space,\n  Card,\n  Menu,\n  Progress,\n  message\n} from \"antd\";\n\nimport xia from '../../../assets/img/xia.png'\nimport { px } from '../../../utils/px'\n\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\nimport Connect from './../../../assets/img/connect.png'\nimport connectBle from \"./../../../assets/img/connectBle.png\";\nimport redcat from \"./../../../assets/images/redcat.png\";\nimport reddog from \"./../../../assets/images/reddog.png\";\nimport redother from \"./../../../assets/images/redother.png\";\n\nimport electronStore from \"../../../utils/electronStore\";\nimport { catv12Predict } from \"../../../api\";\nimport { changeThemeColor } from \"../../../utils/commonFun\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaPredictReturnValueFun,\n\n\n  mellaPredictReturnValue,\n  setMellaDeviceIdFun,\n} from \"../../../store/actions\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nimport \"./headerItem.less\";\nimport { devType } from \"../../../config/config\";\nimport { buf2hex, hex2buf, hex2arr } from '../../../utils/commonFun'\nconst { Header } = Layout;\n\n//连接\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\nlet time194 = 0\n\n//用于预测的东西\nlet clinicalYuce = [],\n  clinicalIndex = 0;\n\n\n\n\n\nlet readCharacteristic = null,\n  writeCharacteristic = null\n\n//搜索到的设备\nlet device = null\n//因为每次点击断开连接的图标都会产生一次断开监听，因此做一个标志位，让他只有第一次才会监听\nlet dicconnectFlog = null\n\n\nconst HeaderItem = ({\n  petMessage,\n  hardwareMessage,\n  timeNum = 15,\n  setMellaPredictReturnValueFun,\n\n  setMellaConnectStatusFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  mellaPredictReturnValue,\n  setMellaDeviceIdFun,\n  setMellaMeasureValueFun\n}) => {\n  let history = useHistory();\n  let storage = window.localStorage;\n  let {\n    petName,\n    patientId,\n    firstName,\n    lastName,\n    gender,\n    breedName,\n    birthday,\n    weight,\n    url,\n    petSpeciesBreedId,\n    petId,\n    isWalkIn,\n  } = petMessage;\n  let {\n    mellaConnectStatus,\n    mellaPredictValue,\n    mellaMeasureValue,\n    mellaMeasurePart,\n    rulerConnectStatus,\n    biggieConnectStatus,\n    selectHardwareInfo,\n    selectHardwareType,\n  } = hardwareMessage;\n  const [value, setValue] = useState(0);\n  const [color, setColor] = useState('#e1206d');//颜色切换\n  const saveCallBack = useRef();\n  const callBack = () => {\n    let random = null;\n    if (timeNum === 15) {\n      random = 7;\n    } else if (timeNum === 30) {\n      random = 3.5;\n    } else {\n      random = 1.75;\n    }\n    setValue(value + random);\n  };\n  //展示宠物照片方法\n  const petPicture = (size) => {\n    if (_.isEmpty(url)) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <Avatar src={redcat} size={size} />;\n      } else if (\n        petSpeciesBreedId === 12001 ||\n        _.inRange(petSpeciesBreedId, 136, 456)\n      ) {\n        return <Avatar src={reddog} size={size} />;\n      } else if (petSpeciesBreedId === 13001) {\n        return <Avatar src={redother} size={size} />;\n      } else {\n        return <Avatar src={redother} size={size} />;\n      }\n    } else {\n      return <Avatar src={url} size={size} />;\n    }\n  };\n  //展示名字或id方法\n  const showNameOrId = () => {\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\n      return \"unknown\";\n    } else if (!_.isEmpty(petName)) {\n      return petName;\n    } else {\n      return patientId;\n    }\n  };\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\n      return \"unknown\";\n    } else {\n      return firstName + \" \" + lastName;\n    }\n  };\n  //计算宠物年龄\n  const calculateAge = () => {\n    if (_.isEmpty(birthday)) {\n      return \"unknown\";\n    } else {\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\n    }\n  };\n  //计算宠物体重\n  const calculateWeight = () => {\n    if (_.isEmpty(weight)) {\n      return \"unknown\";\n    } else {\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\n    }\n  };\n  //头部弹出卡片\n  const cardItem = () => {\n    return (\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\n        <Menu.Item className=\"topItem\">\n          <div className=\"cardTopBox\" style={{ backgroundColor: color }}>\n            <div className=\"topLeftBox\">\n              {petPicture(91)}\n              <p className=\"cardTitle\" style={{ fontWeight: 700 }} >{showNameOrId()}</p>\n              <p className=\"cardTitle\">{ownerName()}</p>\n            </div>\n            <div className=\"topRightBox\">\n              <p className=\"cardTitle\">{calculateAge()}</p>\n              <p className=\"cardTitle\">{calculateWeight()}</p>\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\n              <p className=\"cardTitle\">{breedName}</p>\n            </div>\n          </div>\n        </Menu.Item>\n        <Menu.Item key={\"temperatureHistory\"} style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Temperature History</p>\n        </Menu.Item>\n        <Menu.Item key={\"editPetInfo\"} style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Edit Pet Profile</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export Temperature History</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export All Vitals History</p>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n  const clilkMenu = (item) => {\n    console.log(\"---item\", item);\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\n      //跳转到编辑宠物信息页面\n      history.push(\"/page9\");\n    }\n  };\n  //超过15s后调用接口\n  const prediction = () => {\n    let parame = {\n      ambient_temperature: 17,\n      data: mellaPredictValue,\n      deviceId: \"11111\",\n      sampling_rate: \"135ms\",\n    };\n    let url = \"/clinical/catv12Predict\";\n    catv12Predict(parame)\n      .then((res) => {\n        console.log(\"res\", res);\n        let ipcRenderer = window.electron.ipcRenderer;\n        if (res.message === \"Success\") {\n          let prediction = res.result.prediction.toFixed(2);\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\n          setMellaPredictReturnValueFun(num);\n          let tempArr = prediction.split(\".\");\n          let intNum = tempArr[0];\n          let flotNum = tempArr[1];\n          if (intNum.length < 2) {\n            intNum = \"0\" + intNum;\n          }\n          if (flotNum.length < 2) {\n            flotNum = \"0\" + flotNum;\n          }\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", {\n              command: \"42\",\n              arr: [intNum, flotNum],\n            });\n\n            timeID && clearTimeout(timeID);\n          }, 10);\n        } else {\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n            clearTimeout(timeID);\n          }, 10);\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n      });\n  };\n  //判断仪器是否连接从而判断选择什么图片\n  const isConnect = () => {\n    const checkImage = () => {\n      switch (mellaMeasurePart) {\n        case \"腋温\": return AxillaryBluetooth;\n        case \"耳温\": return EarBluetoothIcon;\n        case \"肛温\": return RectalBluetoothIcon;\n        case \"\": return Connect;\n\n        default:\n          break;\n      }\n\n    };\n\n    if (electronStore.get(`${storage.userId}-isClical`)) {\n      return _.isEqual(mellaConnectStatus, \"disconnected\") || _.isEmpty(mellaMeasurePart) ? (\n        <Avatar size={40} src={BluetoothNotConnected} />\n      ) : (\n        <Progress\n          width={48}\n          type=\"circle\"\n          percent={value}\n          format={() => <Avatar size={40} src={checkImage()} />}\n        />\n      );\n    } else {\n      switch (selectHardwareType) {\n        case \"mellaPro\":\n          return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} onClick={() => { if (devType === 'react') { connectMellaHome() } }} />\n          ) : (\n            <Progress\n              width={48}\n              type=\"circle\"\n              percent={value}\n              format={() => <Avatar size={40} src={checkImage()} />}\n            />\n          );\n        case \"biggie\":\n          return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        case \"tape\":\n          return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        default:\n          break;\n      }\n    }\n  };\n\n\n\n  //下面是网页端时网页连接的逻辑\n  //点击未连接图标开始挑出弹框\n  //搜索连接mellahome\n  const connectMellaHome = async () => {\n\n    let option = {\n      filters: [{ name: 'MellaHome' }, { name: 'MellaPro' },],\n      // acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\n      // optionalServices: [0xff0f]\n    }\n    let radioService = null\n    console.log('准备', device);\n    // if (device) {\n    //   device.removeAddEventListener('gattserverdisconnected', onDisconnected);//监听设备断开连接\n    // }\n    if (!navigator.bluetooth) {\n      message.error('No Web Bluetooth support.')\n    }\n    device = null\n\n\n    device = await navigator.bluetooth.requestDevice(option)\n    console.log('----', device);\n    //没有做销毁监听，会重复监听\n    if (!dicconnectFlog) {\n      device.addEventListener('gattserverdisconnected', onDisconnected);//监听设备断开连接\n      dicconnectFlog = true\n    }\n    let connectStatus = device.gatt.connected\n    console.log('设备', device, connectStatus);\n    if (connectStatus) {\n      console.log('已经连接，返回');\n      return\n    }\n    let server = await device.gatt.connect(); //蓝牙连接\n    console.log('连接成功', server);\n    // let alltPrimaryServices = await server.getPrimaryServices()//获取服务uuid\n    // console.log('服务uuid：', alltPrimaryServices);\n    if (mellaConnectStatus !== \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    }\n    try {\n      let service = await server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb'); //获取一个主GATT服务\n      let characteristics = await service.getCharacteristics()//获取所有的特征值\n      console.log('所有的特征值：', characteristics);\n      let readcharacteristic = await service.getCharacteristic('0000ffe4-0000-1000-8000-00805f9b34fb')\n      // setReadCharacteristic(readcharacteristic)\n      readCharacteristic = readcharacteristic\n      let writecharacteristic = await service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')\n      // setWriteCharacteristic(writecharacteristic)\n      writeCharacteristic = writecharacteristic\n    } catch (error) {\n      console.log('----====---', error);\n    }\n\n\n\n\n    try {\n      await readCharacteristic.startNotifications()\n    } catch (error) {\n      console.log('读通知', error);\n    }\n    console.log('设置监听');\n    try {\n      readCharacteristic.addEventListener('characteristicvaluechanged',\n        handleCharacteristicValueChanged);\n    } catch (error) {\n      console.log('监听出错', error);\n    }\n\n    // sendData(\"07\", [\"5A\"], writeCharacteristic)\n    // setTimeout(() => {\n    //   sendData(\"07\", [\"5A\"], writeCharacteristic)\n\n    // }, 500);\n    sendData(\"48\", [\"02\"], writeCharacteristic)\n    // setTimeout(() => {\n    //   sendData(\"48\", [\"02\"], writeCharacteristic)\n\n    // }, 500);\n\n  }\n  const handleCharacteristicValueChanged = (event) => {\n    const value = event.target.value.buffer;\n    let hex = buf2hex(value)\n    let arr = hex2arr(hex)\n    console.log('Received ', arr);\n    command(arr)()\n  }\n  const onDisconnected = async (event) => {\n\n    const device1 = event.target;\n    console.log(`设备: ${device1.name} 已经断开连接`);\n\n    setMellaConnectStatusFun(\"disconnected\");\n    if (readCharacteristic) {\n      await readCharacteristic.removeEventListener('characteristicvaluechanged',\n        handleCharacteristicValueChanged);\n\n      // setReadCharacteristic(null)\n      readCharacteristic = null\n      writeCharacteristic = null\n    }\n\n\n\n  }\n\n  const blueSend = async (sendText, cha = writeCharacteristic) => {\n    if (cha) {\n      let buffer = hex2buf(sendText)\n      console.log('发送的hex', sendText);\n      await cha.writeValue(buffer)\n\n      cha.writeValue(buffer)\n        .catch(() => {\n          console.log(\"DOMException: GATT operation already in progress.\");\n          return Promise.resolve()\n            .then(() => setTimeout(() => {\n\n            }, 500))\n            .then(() => { cha.writeValue(buffer); });\n        });\n    } else {\n      console.log('没有', writeCharacteristic);\n    }\n\n  }\n  // 发送数据\n  const sendData = (command, arr, cha = writeCharacteristic) => {\n    //帧长,如果帧长是一位,前面加0\n    let length = arr.length + 3;\n    length = length.toString(16);\n    if (length.length < 2) {\n      length = '0' + length;\n    }\n    // console.log(length , command)\n    //开始生成校验位\n    let Check = parseInt(length, 16) ^ parseInt(command, 16);\n    for (let i = 0; i < arr.length; i++) {\n      Check = Check ^ parseInt(arr[i].toString(16), 16);\n    }\n    //如果校验位长度为1前面补0\n    Check = Check.toString(16);\n    if (Check.length < 2) {\n      Check = '0' + Check;\n    }\n    // console.log(Check)\n    let str = 'AA' + length + command + arr.join('') + Check + '55';\n    // console.log('发送的数据', str);\n\n    blueSend(str, cha)\n  };\n\n\n\n\n\n  //底座与温度计断开连接\n  const _disconnect_to_mella = () => {\n\n    if (mellaConnectStatus !== \"disconnected\") {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n    // setMellaDeviceIdFun(\"\");\n  };\n  //底座与温度计连接\n  const _connect_to_mella = () => {\n\n    if (mellaConnectStatus !== \"connected\") {\n      // setMellaConnectStatusFun(\"connected\");\n    }\n  };\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  const command = (newArr) => {\n\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    console.log('我进来了', dataArr1);\n\n\n    const instruction = [\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 99, 134\n    ];\n\n\n    if (mellaConnectStatus === \"disconnected\") {\n      _connect_to_mella();\n    }\n\n\n    const commandArr = {\n      209: () => {\n\n        //腋温\n        //第一次测量去获取探头ID\n        if (firstEar) {\n          firstEar = false;\n          // console.log(\"去获取探头id\");\n          //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\n        let Temp = temp0;\n        if (\n          Temp === 24.7 ||\n          Temp === 0 ||\n          Temp === null ||\n          Temp === undefined\n        ) {\n          return;\n        }\n\n        let dataS = {\n          sample: clinicalIndex++,\n          data0: temp0,\n          data1: temp1,\n        };\n        clinicalYuce.push(dataS);\n        if (clinicalYuce.length >= 30) {\n          setMellaPredictValueFun(clinicalYuce);\n        }\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n        if (mellaMeasurePart !== \"腋温\" && mellaMeasurePart !== \"肛温\") {\n\n          setMellaMeasurePartFun(\"腋温\");\n        }\n        // this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\n      },\n      208: () => {\n        //耳温\n\n        if (firstEar) {\n          firstEar = false;\n          //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        //现在探头0可能不存在，所以把探头0改为探头1\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[4.18]}`);\n        let Temp = temp0;\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n\n        if (mellaMeasurePart !== \"耳温\") {\n          setMellaMeasurePartFun(\"耳温\");\n        }\n      },\n      193: () => {\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\n\n        firstEar = true;\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n      },\n      194: () => {\n        //硬件收到机器学习结果并停止测量，\n        time194 = new Date()\n        console.log(\"---机器学习\", newArr);\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n        setMellaMeasureValueFun(mellaPredictReturnValue);\n        firstEar = true;\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n\n        clinicalYuce = [];\n        clinicalIndex = 0;\n      },\n      192: () => {\n        //温度计收到40开始数据后返回的指令\n        switch (newArr[3]) {\n          case 90:\n            console.log(\"有探头，开始测量的返回指令·\");\n            break;\n          case 11:\n            console.log(\"没有探头，开始测量的返回值\");\n            break;\n        }\n      },\n      129: () => {\n        //返回硬件版本号\n        console.log(`返回的版本号为${newArr[3]}`);\n      },\n      134: () => {\n        switch (newArr[3]) {\n          case 1:\n            console.log('腋温');\n            setMellaMeasurePartFun(\"腋温\");\n            break;\n          case 2:\n            console.log('肛温');\n            setMellaMeasurePartFun(\"肛温\");\n            break;\n\n          default:\n            break;\n        }\n        sendData(\"07\", [\"5A\"], writeCharacteristic)\n      },\n      135: () => {\n        //硬件的一些基本信息\n        /**\n         * ______________新版、旧版没法控制温度计__________________\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\n         * newArr[7] 无操作关机时间\n         * newArr[8] 背光时间\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\n         * newArr[10] 测量单位    01代表℃，00代表℉\n         */\n\n        let hardSet = electronStore.get(\n          `${storage.userId}-hardwareConfiguration`\n        );\n        console.log('--hardSet--', hardSet);\n        if (!hardSet) {\n          hardSet = {\n            isHua: true,\n            is15: true,\n            self_tarting: false, //自启动\n            isBacklight: true,\n            isBeep: true,\n            backlightTimer: { length: 140, number: \"45\" },\n            autoOff: { length: 0, number: \"30\" },\n          };\n        }\n        let { isHua, is15, self_tarting, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\n\n        let beep = isBeep ? \"11\" : \"00\";\n        let unit = isHua ? \"00\" : \"01\";\n        let autoOffNumber = autoOff.number\n        let backlightTimerNumber = isBacklight ? backlightTimer.number : '00'\n        if (\n          dataArr1[7] === autoOffNumber &&\n          dataArr1[8] === backlightTimerNumber &&\n          dataArr1[9] === beep &&\n          dataArr1[10] === unit\n        ) {\n        } else {\n          let setArr = [\"03\", \"ed\", \"07\", \"dd\", autoOffNumber, backlightTimerNumber, beep, unit,];\n          console.log('不相同，我要去发送配置');\n          sendData(\"21\", setArr)\n        }\n      },\n      238: () => {\n        //探头松动\n        console.log(\"探头松动\");\n        message.error(\n          \"The probe is loose, please re-install and measure again\",\n          5\n        );\n      },\n\n      98: () => {\n        //蓝牙连接断开\n        console.log(\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\n        );\n        firstEar = true;\n        // console.log(new Date() - is97Time);\n        if (new Date() - is97Time < 1300) {\n          return;\n        }\n        _disconnect_to_mella();\n      },\n      97: () => {\n        //蓝牙连接\n        console.log(\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\n        );\n\n        //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n\n\n\n        is97Time = new Date();\n        _connect_to_mella();\n      },\n      177: () => {\n        //探头id\n        let dataArr1 = newArr.map((item) => {\n          if (item.toString(16).length < 2) {\n            return \"0\" + item.toString(16);\n          } else {\n            return item.toString(16);\n          }\n        });\n\n        let id = \"\";\n        for (let i = 3; i < dataArr1.length - 2; i++) {\n          id += dataArr1[i];\n        }\n        // console.log(id, dataArr1[7]);\n        setMellaDeviceIdFun(id);\n        // this.setState({\n        //   probeID: id,\n        //   petVitalTypeId: dataArr1[7]\n        // })\n        if (dataArr1[7] === \"01\") {\n          if (mellaMeasurePart !== \"腋温\") {\n            setMellaMeasurePartFun(\"腋温\");\n          }\n        } else if (dataArr1[7] === \"02\") {\n          if (mellaMeasurePart !== \"肛温\") {\n            setMellaMeasurePartFun(\"肛温\");\n          }\n        } else if (dataArr1[7] === \"03\") {\n          if (mellaMeasurePart !== \"耳温\") {\n            setMellaMeasurePartFun(\"耳温\");\n          }\n        }\n      },\n\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (value === 105 && timeNum !== 60) {\n      prediction();\n    } else if (value === 105 && timeNum === 60) {\n      let ipcRenderer = window.electron.ipcRenderer;\n      const timeID = setTimeout(() => {\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n        clearTimeout(timeID);\n      }, 10);\n    }\n    return () => { };\n  }, [value]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setValue(0);\n      timer = setInterval(tick, 1000);\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\n      clearInterval(timer);\n    } else if (mellaConnectStatus === \"disconnected\") {\n      setValue(0);\n    };\n    if (mellaConnectStatus === \"complete\") {\n      // let ipcRenderer = window.electron.ipcRenderer;\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    setColor(changeThemeColor(selectHardwareType));\n  }, [selectHardwareType]);\n\n  return (\n    <div className=\"headerBox\">\n      <Header style={{ background: \"#fff\", height: '100%' }}>\n        {_.isEmpty(petId) && !isWalkIn ? (\n          <></>\n        ) : (\n          <Row className=\"heardRow\" >\n            {/*头部左侧 */}\n            <Col flex={10}>\n              {isWalkIn ? (\n                <span className=\"walkInTitle\">Walk-In</span>\n              ) : (\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\n                  <div\n                    className=\"petMessageBox\"\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {petPicture(50)}\n                    <div className=\"petMessageBox\">\n                      <div className=\"petName\">\n                        {!_.isEmpty(petMessage.patientId)\n                          ? petMessage.patientId\n                          : \"unknown\"}\n                        ,{\" \"}\n                        {!_.isEmpty(petMessage.petName)\n                          ? petMessage.petName\n                          : \"unknown\"}\n                      </div>\n                      <img src={xia} alt=\"\" width={px(25)}  />\n                    </div>\n                  </div>\n                </Dropdown>\n              )}\n            </Col>\n            {/*头部右侧 */}\n            <Col flex={1}>\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\n            </Col>\n          </Row>\n        )}\n      </Header>\n    </div>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    mellaPredictReturnValue: state.hardwareReducemellaPredictReturnValue\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaPredictReturnValueFun,\n    setMellaDeviceIdFun\n  }\n)(HeaderItem);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx",["1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Layout,\n  Modal,\n  message,\n} from \"antd\";\nimport { ExclamationCircleOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { useHistory } from \"react-router-dom\";\nimport { updatePetInfo1 } from \"../../../api\";\nimport { petPicture, calculateAge, catLeanBodyMass, catFatMass, dogLeanBodyMass, dogFatMass, dogBodyFatPercentage } from '../../../utils/commonFun';\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n} from \"../../../store/actions\";\nimport xia_hui from \"./../../../assets/img/xia_hui.png\";\nimport up_red from \"./../../../assets/img/up_red.png\"\nimport down_red from \"./../../../assets/img/down_red.png\"\nimport down_black from \"./../../../assets/img/down_black.png\"\nimport { useUpdateEffect } from 'ahooks';\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\n\nimport \"./calculationResult.less\";\n\nconst { Content } = Layout;\nconst CalculationResult = ({\n  type,\n  petMessage,\n  petDetailInfoFun,\n  ruleMessage,\n  getMeasureData,\n  setRulerUnitFun\n}) => {\n  let history = useHistory();\n  const [lastWeightValue, setLastWeightValue] = useState('');//最近一次的体重值\n  const [lastWeightTimeValue, setLastWeightTimeValue] = useState('');//最近一次的体重测量时间\n  const [lastRuleTimeValue, setLastRuleTimeValue] = useState('');//最近一次的尺子测量时间\n\n  let { petId, petSpeciesBreedId, weight, birthday } = petMessage;\n  let { rulerUnit, biggieUnit } = ruleMessage;\n  let {\n    headValue,\n    neckValue,\n    upperValue,\n    lowerValue,\n    torsoValue,\n    bodyValue,\n    hindlimbValue,\n    forelimbLengthValue,\n    forelimbCircumferenceValue,\n  } = getMeasureData;\n  let storage = window.localStorage;\n\n  let btnList = [\n    {\n      key: 'LBM',\n      name: 'Previous LBM',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'FM',\n      name: 'Previous FM',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'BF',\n      name: 'Previous BF%',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'day',\n      name: 'Days to goal',\n      data: '2'\n    }\n  ]\n\n  //重新测量\n  const onAgainMeasure = () => {\n    type(false);\n  }\n  //用户点击保存\n  const onSave = () => {\n    // Modal.confirm({\n    //   title: \"Confirm\",\n    //   icon: <ExclamationCircleOutlined />,\n    //   content: \"Whether To Save Data\",\n    //   top: \"40vh\",\n    //   onOk: saveData,\n    // });\n    saveData()\n  }\n  //in-cm转换\n  const in_cm = (val) => {\n    if (val) {\n      if (rulerUnit === \"in\") {\n        return parseFloat((parseFloat(val) * 2.54).toFixed(1));\n      } else {\n        return parseFloat(val);\n      }\n    } else {\n      return 0;\n    }\n  }\n  //保存数据\n  const saveData = () => {\n    let prams = {\n      l2rarmDistance: in_cm(getMeasureData.bodyValue) || null,\n      lowerTorsoCircumference: in_cm(getMeasureData.lowerValue) || null,\n      upperTorsoCircumference: in_cm(getMeasureData.upperValue) || null,\n      neckCircumference: in_cm(getMeasureData.neckValue) || null,\n      h2tLength: in_cm(getMeasureData.headValue) || null,\n      torsoLength: in_cm(getMeasureData.torsoValue) || null,\n      hindLimbLength: in_cm(getMeasureData.hindlimbValue) || null,\n      foreLimbLength: in_cm(getMeasureData.forelimbLengthValue) || null,\n      foreLimbCircumference: in_cm(getMeasureData.forelimbCircumferenceValue) || null,\n    };\n    updatePetInfo1(storage.userId, petId, prams)\n      .then((res) => {\n        if (res.flag) {\n          petDetailInfoFun({\n            ...petMessage,\n            ...prams,\n          });\n          message.success(\"Uploaded successfully\");\n          type(false);\n        } else {\n          message.error(\"upload failed\");\n        }\n      })\n      .catch((err) => {\n        message.error(\"update failed\");\n      });\n  };\n  //获取LeanBodyMass\n  const getLeanBodyMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catLeanBodyMass(headValue, in_cm(hindlimbValue), in_cm(forelimbCircumferenceValue), in_cm(forelimbLengthValue), in_cm(bodyValue), in_cm(upperValue)), 2);\n      case 'dog':\n        return _.round(dogLeanBodyMass(weight * 2.2046, calculateAge(birthday), in_cm(headValue), in_cm(forelimbLengthValue), in_cm(hindlimbValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取FatMass\n  const getFatMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catFatMass(weight * 2.2046, in_cm(headValue), in_cm(forelimbLengthValue), in_cm(forelimbCircumferenceValue)), 2);\n      case 'dog':\n        return _.round(dogFatMass(weight * 2.2046, in_cm(hindlimbValue), in_cm(upperValue), in_cm(headValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  // 下拉历史\n  const TempHisVisible = () => {\n    console.log('1');\n  }\n  //判断上一次测量的体重是否超过一个月\n  const judgeWightTime = () => {\n    let newTime = moment();\n    let diffTime = newTime.diff(moment(lastWeightTimeValue), 'month');\n    if (diffTime >= 1 && lastWeightValue) {\n      return (\n        <p className=\"historyWeightWarningTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}.Please\n          <a onClick={() => updatePetMessage()}>update the pet's weight</a>.\n        </p>\n      );\n    } else if (diffTime === 0 && lastWeightValue) {\n      return <p className=\"historyWeightTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}: {lastWeightValue} {biggieUnit === 'kg' ? 'kg' : 'lbs'}</p>\n    } else {\n      return null\n    }\n  }\n  //用户更新宠物体重信息\n  const updatePetMessage = () => {\n    //跳转到编辑宠物信息页面\n    history.push(\"/page9\");\n  }\n  //获取BodyFatPercent\n  const getBodyFatPercent = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return;\n      case 'dog':\n        return _.round(dogBodyFatPercentage(in_cm(upperValue), in_cm(lowerValue), in_cm(hindlimbValue), in_cm(headValue)), 2);\n\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n\n  useUpdateEffect(() => {\n    type(false);\n    return () => { };\n  }, [petId]);\n\n  return (\n    <Content className=\"calculationResultContentBox\">\n      <div className=\"historyWeightBox\">\n        {\n          judgeWightTime()\n        }\n      </div>\n      <div className=\"localityGroup\">\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getLeanBodyMass() > 0 ? `${getLeanBodyMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lean Body Mass</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getBodyFatPercent() > 0 ? `${getBodyFatPercent()}%` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Body Fat Percent</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getFatMass() > 0 ? `${getFatMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Fat Mass</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n      </div>\n      <div className=\"measureContent\">\n        {btnList.map((item, index) => (\n          // <li key={index}>\n          //   <>\n          //     <img src={data.img} alt=\"\" />\n          //     <p>{data.title}</p>\n          //   </>\n          // </li>\n          <div key={index} className=\"item\">\n            <>\n              <p className=\"pSt1\">{item.name}</p>\n              <div className=\"bottom\">\n                {\n                  item.key != 'day' && <img src={up_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  />\n                }\n                {/* <img src={up_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  />\n                <img src={down_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  /> */}\n                <p className=\"pSt2\">{item.data}</p>\n                <p className=\"pSt2\">{ item.key != 'day' ? item.unit : null}</p>\n              </div>\n              {/* <p className=\"pSt2\">{item.data}</p> */}\n            </>\n          </div>\n        ))}\n      </div>\n      <div className=\"calculateBtnBox\">\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onAgainMeasure()}\n        >\n          Measure Again\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onSave()}\n        >\n          Save\n        </Button>\n      </div>\n      <div className=\"scrollHistory\">\n        <span className=\"his\" onClick={() => TempHisVisible()}>Hisory</span>\n        <img src={xia_hui} style={{ width: \"30px\", cursor: \"pointer\" }} alt=\"\" onClick={() => TempHisVisible()} />\n      </div>\n    </Content>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n  }\n)(CalculationResult);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",["1051","1052","1053","1054","1055","1056"],"import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport { Image, Layout } from 'antd';\nimport { connect } from 'react-redux';\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun\n} from '../../../store/actions';\nimport SelectPatient from '../../../assets/img/SelectPatient.png'\nimport _ from 'lodash';\nimport './LinkEquipment.less';\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n    let { mellaConnectStatus } = hardwareMessage;\n    return (\n\n        <Content className={\"contentBox\"}>\n            <div className='chackPatientBox' style={{ flexDirection: 'column' }}>\n                <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n                <p className='chackPatientTitle'>Select a patient</p>\n            </div>\n        </Content>\n\n    );\n}\nexport default connect(\n    state => ({\n        petMessage: state.petReduce.petDetailInfo,\n        hardwareMessage: state.hardwareReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setMellaConnectStatusFun,\n        setMellaMeasureValueFun,\n        setMellaPredictValueFun,\n        setMellaMeasurePartFun\n    }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",["1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Layout,\n  Radio,\n  Input,\n  Space,\n  Button,\n  message,\n  Modal,\n  Spin,\n} from \"antd\";\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\n\n\nimport dogHead from \"./../../../assets/img/dogHead.png\";\nimport dogNeck from \"./../../../assets/img/dogNeck.png\";\nimport dogUpper from \"./../../../assets/img/dogUpper.png\";\nimport dogLower from \"./../../../assets/img/dogLower.png\";\nimport dogTorso from \"./../../../assets/img/dogTorso.png\";\nimport dogBody from \"./../../../assets/img/dogBody.png\";\nimport dogHindlimb from \"./../../../assets/img/dogHindlimb.png\";\nimport dogForelimbLength from \"./../../../assets/img/dogForelimbLength.png\";\nimport dogForelimbCircumference from \"./../../../assets/img/dogForelimbCircumference.png\";\n\nimport dogHead_D from \"./../../../assets/img/dogHead_D.png\";\nimport dogNeck_D from \"./../../../assets/img/dogNeck_D.png\";\nimport dogUpper_D from \"./../../../assets/img/dogUpper_D.png\";\nimport dogLower_D from \"./../../../assets/img/dogLower_D.png\";\nimport dogTorso_D from \"./../../../assets/img/dogTorso_D.png\";\nimport dogBody_D from \"./../../../assets/img/dogBody_D.png\";\nimport dogHindlimb_D from \"./../../../assets/img/dogHindlimb_D.png\";\nimport dogForelimbLength_D from \"./../../../assets/img/dogForelimbLength_D.png\";\nimport dogForelimbCircumference_D from \"./../../../assets/img/dogForelimbCircumference_D.png\";\n\nimport catHead from \"./../../../assets/img/catHead.png\";\nimport catNeck from \"./../../../assets/img/catNeck.png\";\nimport catUpper from \"./../../../assets/img/catUpper.png\";\nimport catLower from \"./../../../assets/img/catLower.png\";\nimport catTorso from \"./../../../assets/img/catTorso.png\";\nimport catBody from \"./../../../assets/img/catBody.png\";\nimport catHindlimb from \"./../../../assets/img/catHindlimb.png\";\nimport catForelimbLength from \"./../../../assets/img/catForelimbLength.png\";\nimport catForelimbCircumference from \"./../../../assets/img/catForelimbCircumference.png\";\n\nimport catHead_D from \"./../../../assets/img/catHead_D.png\";\nimport catNeck_D from \"./../../../assets/img/catNeck_D.png\";\nimport catUpper_D from \"./../../../assets/img/catUpper_D.png\";\nimport catLower_D from \"./../../../assets/img/catLower_D.png\";\nimport catTorso_D from \"./../../../assets/img/catTorso_D.png\";\nimport catBody_D from \"./../../../assets/img/catBody_D.png\";\nimport catHindlimb_D from \"./../../../assets/img/catHindlimb_D.png\";\nimport catForelimbLength_D from \"./../../../assets/img/catForelimbLength_D.png\";\nimport catForelimbCircumference_D from \"./../../../assets/img/catForelimbCircumference_D.png\";\n\nimport amplification from './../../../assets/img/amplification.png';\nimport shrink from './../../../assets/img/shrink.png';\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n  setSelectHardwareType\n} from \"../../../store/actions\";\n\nimport { KgtoLb } from '../../../utils/commonFun';\nimport { px } from \"../../../utils/px\";\nimport NumericInput from \"./numericInput\";\nimport {\n  getRecentPetData\n} from \"./../../../api\";\n\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\nimport { useGetState } from 'ahooks';\n\nimport \"./scanPet.less\";\n\nconst { Content } = Layout;\nconst ScanPet = ({\n  petMessage,\n  ruleMessage,\n  setRulerUnitFun,\n  type,\n  setMeasureData,\n  setSelectHardwareType,\n}) => {\n  let history = useHistory();\n  let {\n    petSpeciesBreedId,\n    petId,\n    weight,\n    torsoLength,\n    l2rarmDistance,\n    upperTorsoCircumference,\n    lowerTorsoCircumference,\n    h2tLength,\n    neckCircumference,\n    hindLimbLength,\n    foreLimbLength,\n    foreLimbCircumference\n  } = petMessage;\n  let {\n    rulerMeasureValue,\n    rulerConfirmCount,\n    rulerUnit,\n    rulerConnectStatus,\n    selectHardwareInfo,\n    receiveBroadcastHardwareInfo,\n    biggieUnit\n  } = ruleMessage;\n  const [radioValue, setRadioValue] = useState(\"in\");//单位\n  const [inputIndex, setInputIndex] = useState(-1);//输入框下标\n  const [missInputIndex, setMissInputIndex] = useState(0);//输入框下标\n  const [carouselIndex, setCarouselIndex] = useState(1);//小小圆点下标\n\n  const [headValue, setHeadValue] = useState(\"\"); //接收输入框的值\n  const [neckValue, setNeckValue] = useState(\"\"); //接收输入框的值\n  const [upperValue, setUpperValue] = useState(\"\"); //接收输入框的值\n  const [lowerValue, setLowerValue] = useState(\"\"); //接收输入框的值\n  const [torsoValue, setTorsoValue] = useState(\"\"); //接收输入框的值\n  const [bodyValue, setBodyValue] = useState(\"\"); //接收输入框的值\n  const [hindlimbValue, setHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [forelimbLengthValue, setForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [forelimbCircumferenceValue, setForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [missHeadValue, setMissHeadValue] = useState(\"\"); //接收输入框的值\n  const [missNeckValue, setMissNeckValue] = useState(\"\"); //接收输入框的值\n  const [missUpperValue, setMissUpperValue] = useState(\"\"); //接收输入框的值\n  const [missLowerValue, setMissLowerValue] = useState(\"\"); //接收输入框的值\n  const [missTorsoValue, setMissTorsoValue] = useState(\"\"); //接收输入框的值\n  const [missBodyValue, setMissBodyValue] = useState(\"\"); //接收输入框的值\n  const [missHindlimbValue, setMissHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbLengthValue, setMissForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbCircumferenceValue, setMissForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [lastHeadValue, setLastHeadValue] = useState(\"\"); //上一次测量的值\n  const [lastNeckValue, setLastNeckValue] = useState(\"\"); //上一次测量的值\n  const [lastUpperValue, setLastUpperValue] = useState(\"\"); //上一次测量的值\n  const [lastLowerValue, setLastLowerValue] = useState(\"\"); //上一次测量的值\n  const [lastTorsoValue, setLastTorsoValue] = useState(\"\"); //上一次测量的值\n  const [lastBodyValue, setLastBodyValue] = useState(\"\"); //上一次测量的值\n  const [lastHindlimbValue, setLastHindlimbValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbLengthValue, setLastForelimbLengthValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbCircumferenceValue, setLastForelimbCircumferenceValue] = useState(\"\"); //上一次测量的值\n\n  const [loding, setLoding] = useState(false);//界面加载\n  const [lookType, setLookType] = useState(false);//用户查看局部放大图片\n  const [weightTipVisible, setWeightTipVisible] = useState(false);//体重是否为空的弹窗\n  const [missMeasureVisible, setMissMeasureVisible] = useState(false);//是否有遗漏测量的弹窗\n  const [lastWeightValue, setLastWeightValue] = useState('');//最近一次的体重值\n  const [lastWeightTimeValue, setLastWeightTimeValue] = useState('');//最近一次的体重测量时间\n  const [lastRuleTimeValue, setLastRuleTimeValue] = useState('');//最近一次的尺子测量时间\n\n  let newData = [];\n  let missNewData = [];\n\n  //保存input组，为了选中\n  const inputEl = (data) => {\n    newData.push(data);\n  };\n  //保存遗漏的input组，为了选中\n  const missInputEl = (data) => {\n    missNewData.push(data);\n  }\n  //切换聚焦事件\n  const switchFocus = () => {\n    let num = inputIndex;\n    if (num === 3) {\n      setCarouselIndex(2);\n    }\n    if (num === 7) {\n      setCarouselIndex(3);\n    }\n    if (num < 8) {\n      setInputIndex(num + 1);\n    }\n  };\n  //切换到计算界面，判断测量结果是否有遗漏\n  const finishScan = () => {\n    if (headValue && neckValue && upperValue && lowerValue && torsoValue && bodyValue && hindlimbValue && forelimbLengthValue && forelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue,\n        neckValue: neckValue,\n        upperValue: upperValue,\n        lowerValue: lowerValue,\n        torsoValue: torsoValue,\n        bodyValue: bodyValue,\n        hindlimbValue: hindlimbValue,\n        forelimbLengthValue: forelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue,\n      });\n    } else {\n      setMissHeadValue(headValue);\n      setMissNeckValue(neckValue);\n      setMissUpperValue(upperValue);\n      setMissLowerValue(lowerValue);\n      setMissTorsoValue(torsoValue);\n      setMissBodyValue(bodyValue);\n      setMissHindlimbValue(hindlimbValue);\n      setMissForelimbLengthValue(forelimbLengthValue);\n      setMissForelimbCircumferenceValue(forelimbCircumferenceValue);\n      setMissMeasureVisible(true);\n    }\n  };\n  //判断是猫还是狗还是其他\n  const checkPetType = () => {\n    //0是猫，1是狗，或者petSpeciesBreedId为空判断图片为狗\n    if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n      return 0;\n    } else if (\n      petSpeciesBreedId === 12001 ||\n      _.inRange(petSpeciesBreedId, 136, 456)\n    ) {\n      return 1;\n    } else {\n      return 1;\n    }\n  };\n  //用户点击放大按钮查看局部详情\n  const onLookImage = (type) => {\n    setLookType(type);\n  }\n  //切换整体图片\n  const changeImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return checkPetType() === 1 ? (\n          <img src={dogHead} width='320px' />\n        ) : (\n          <img src={catHead} width='320px' />\n        );\n      case 1:\n        return checkPetType() === 1 ? (\n          <img src={dogNeck} width='320px' />\n        ) : (\n          <img src={catNeck} width='320px' />\n        );\n      case 2:\n        return checkPetType() === 1 ? (\n          <img src={dogUpper} width='320px' />\n        ) : (\n          <img src={catUpper} width='320px' />\n        );\n      case 3:\n        return checkPetType() === 1 ? (\n          <img src={dogLower} width='320px' />\n        ) : (\n          <img src={catLower} width='320px' />\n        );\n      case 4:\n        return checkPetType() === 1 ? (\n          <img src={dogTorso} width='320px' />\n        ) : (\n          <img src={catTorso} width='320px' />\n        );\n      case 5:\n        return checkPetType() === 1 ? (\n          <img src={dogBody} width='320px' />\n        ) : (\n          <img src={catBody} width='320px' />\n        );\n      case 6:\n        return checkPetType() === 1 ? (\n          <img src={dogHindlimb} width='320px' />\n        ) : (\n          <img src={catHindlimb} width='320px' />\n        );\n      case 7:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbLength} width='320px' />\n        ) : (\n          <img src={catForelimbLength} width='320px' />\n        );\n      case 8:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n      default:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n    }\n  };\n  //切换局部放大图片\n  const changeLookImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Head<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHead_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHead_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 1:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Neck<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogNeck_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catNeck_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 2:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Upper Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogUpper_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catUpper_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 3:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lower Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogLower_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catLower_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 4:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Torso<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogTorso_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catTorso_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 5:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Body<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogBody_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catBody_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 6:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Hindlimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHindlimb_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHindlimb_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 7:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbLength_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbLength_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 8:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbCircumference_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbCircumference_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      default:\n        return;\n    }\n  }\n  //点击输入框事件\n  const clickInput = (index) => {\n    setInputIndex(index);\n  };\n  //点击遗漏输入框事件\n  const missClickInput = (index) => {\n    setMissInputIndex(index);\n  }\n  //单位转化\n  const changeUnit = (value) => {\n    if (rulerUnit === \"cm\") {\n      return _.round(value * 2.54, 1);\n    } else if (rulerUnit === \"in\") {\n      return _.floor(_.divide(value, 2.54), 2);\n    }\n  };\n  //单选框改变事件\n  const changeRadio = (e) => {\n    setRadioValue(e.target.value);\n    setRulerUnitFun(e.target.value);\n  };\n  //左箭头点击事件\n  const letfClick = () => {\n    if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(1);\n    } else if (inputIndex === 8) {\n      setCarouselIndex(2);\n    }\n\n  }\n  //右箭头点击事件\n  const rightClick = () => {\n    if (_.inRange(inputIndex, 0, 4)) {\n      setCarouselIndex(2);\n    } else if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(3);\n    }\n  }\n  //切换宠物获取到长度信息,对数据根据界面单位进行换算\n  const petLengthDataConvert = (val) => {\n    if (!val) {\n      return \"\";\n    } else {\n      if (rulerUnit === \"cm\") {\n        return val.toFixed(1);\n      } else {\n        return _.floor(_.divide(val, 2.54), 2);\n      }\n    }\n  };\n  //放大输入框的值\n  const onValue = () => {\n    switch (inputIndex) {\n      case 0:\n        return headValue;\n      case 1:\n        return neckValue;\n      case 2:\n        return upperValue;\n      case 3:\n        return lowerValue;\n      case 4:\n        return torsoValue;\n      case 5:\n        return bodyValue;\n      case 6:\n        return hindlimbValue;\n      case 7:\n        return forelimbLengthValue;\n      case 8:\n        return forelimbCircumferenceValue;\n      default:\n        return headValue;\n    }\n  }\n  //放大输入框的输入事件\n  const onOnChange = () => {\n    switch (inputIndex) {\n      case 0:\n        return setHeadValue;\n      case 1:\n        return setNeckValue;\n      case 2:\n        return setUpperValue;\n      case 3:\n        return setLowerValue;\n      case 4:\n        return setTorsoValue;\n      case 5:\n        return setBodyValue;\n      case 6:\n        return setHindlimbValue;\n      case 7:\n        return setForelimbLengthValue;\n      case 8:\n        return setForelimbCircumferenceValue;\n      default:\n        return setHeadValue;\n    }\n  }\n  //上一次历史数据展示\n  const historyData = () => {\n    switch (carouselIndex) {\n      case 1:\n        return (\n          <Space className=\"historyData\">\n            <p>{lastHeadValue}</p>\n            <p>{lastNeckValue}</p>\n            <p>{lastUpperValue}</p>\n            <p>{lastLowerValue}</p>\n          </Space>\n        );\n      case 2:\n        return <Space className=\"historyData\">\n          <p>{lastTorsoValue}</p>\n          <p>{lastBodyValue}</p>\n          <p>{lastHindlimbValue}</p>\n          <p>{lastForelimbLengthValue}</p>\n        </Space>;\n      case 3:\n        return <Space className=\"historyData\">\n          <p>{lastForelimbCircumferenceValue}</p>\n        </Space>;\n      default:\n        return <Space className=\"historyData\">\n          <p>{lastHeadValue}</p>\n          <p>{lastNeckValue}</p>\n          <p>{lastUpperValue}</p>\n          <p>{lastLowerValue}</p>\n        </Space>;\n    }\n  }\n  //用户忽视体重为空\n  const onCancel = () => {\n    setWeightTipVisible(false);\n  }\n  //用户更新宠物体重信息\n  const updatePetMessage = () => {\n    //跳转到编辑宠物信息页面\n    history.push(\"/page9\");\n  }\n  //用户前往体脂秤界面进行测量体重\n  const goToBiggieScale = () => {\n    setSelectHardwareType('biggie');\n    //跳转到mainBody界面\n    history.push(\"/MainBody\");\n  }\n  //用户完成遗漏的数值填写\n  const saveMiss = () => {\n    if (missHeadValue && missNeckValue && missUpperValue && missLowerValue && missTorsoValue && missBodyValue && missHindlimbValue && missForelimbLengthValue && missForelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue || missHeadValue,\n        neckValue: neckValue || missNeckValue,\n        upperValue: upperValue || missUpperValue,\n        lowerValue: lowerValue || missLowerValue,\n        torsoValue: torsoValue || missTorsoValue,\n        bodyValue: bodyValue || missBodyValue,\n        hindlimbValue: hindlimbValue || missHindlimbValue,\n        forelimbLengthValue: forelimbLengthValue || missForelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue || missForelimbCircumferenceValue,\n      });\n    } else {\n      message.warning('Please complete the missing values');\n    }\n\n  }\n  //获取上一次测量的体重和上一次的尺子测量值\n  const getRecentPet = () => {\n    setLoding(true);\n    getRecentPetData(petId)\n      .then((res) => {\n        setLoding(false);\n        if (res.msg === 'success') {\n          if (res.ruler.updateTime) {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLastLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setLastUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setLastNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setLastHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setLastTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setLastHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setLastForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(res.ruler.updateTime);\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n          } else {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(\"\"));\n            setLastLowerValue(petLengthDataConvert(\"\"));\n            setLastUpperValue(petLengthDataConvert(\"\"));\n            setLastNeckValue(petLengthDataConvert(\"\"));\n            setLastHeadValue(petLengthDataConvert(\"\"));\n            setLastTorsoValue(petLengthDataConvert(\"\"));\n            setLastHindlimbValue(petLengthDataConvert(\"\"));\n            setLastForelimbLengthValue(petLengthDataConvert(\"\"));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(\"\");\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(\"\"));\n            setLowerValue(petLengthDataConvert(\"\"));\n            setUpperValue(petLengthDataConvert(\"\"));\n            setNeckValue(petLengthDataConvert(\"\"));\n            setHeadValue(petLengthDataConvert(\"\"));\n            setTorsoValue(petLengthDataConvert(\"\"));\n            setHindlimbValue(petLengthDataConvert(\"\"));\n            setForelimbLengthValue(petLengthDataConvert(\"\"));\n            setForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n          }\n          if (res.weight) {\n            setLastWeightValue(biggieUnit === 'kg' ? res.weight.weight : KgtoLb(res.weight.weight));\n            setLastWeightTimeValue(res.weight.createTime);\n          } else {\n            setLastWeightValue('');\n            setLastWeightTimeValue('');\n          }\n        } else {\n          message.error('The latest data cannot be obtained');\n        }\n      })\n      .catch((err) => {\n        setLoding(false);\n        message.error('The latest data cannot be obtained');\n      })\n  }\n  //判断上一次测量的体重是否超过一个月\n  const judgeWightTime = () => {\n    let newTime = moment();\n    let diffTime = newTime.diff(moment(lastWeightTimeValue), 'month');\n    if (diffTime >= 1 && lastWeightValue) {\n      return (\n        <p className=\"historyWeightWarningTitle\">Last date Weighed was {moment(lastWeightTimeValue).format(\"LL\")}.Please\n          <a onClick={() => updatePetMessage()}>update the pet's weight</a>.\n        </p>\n      );\n    } else if (diffTime === 0 && lastWeightValue) {\n      return <p className=\"historyWeightTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}: {lastWeightValue} {biggieUnit === 'kg' ? 'kg' : 'lbs'}</p>\n    } else {\n      return null\n    }\n  }\n\n  //监听切换了宠物\n  useEffect(() => {\n    setInputIndex(0);\n    setCarouselIndex(1);\n    //获取上一次测量的体重\n    getRecentPet();\n    //检测宠物体重是否为空\n    if (!weight) {\n      setWeightTipVisible(true)\n    }\n    return () => { };\n  }, [petId]);\n  //监听点击界面中下一步按钮\n  useEffect(() => {\n    console.log(\"inputIndex\", inputIndex);\n\n    if (inputIndex < 9 && inputIndex !== -1) {\n      newData[inputIndex].focus();\n    }\n    if (inputIndex === 9) {\n      finishScan();\n    }\n    return () => { };\n  }, [inputIndex]);\n  //监听切换\n  useEffect(() => {\n    switch (carouselIndex) {\n      case 1:\n        setInputIndex(0);\n        break;\n      case 2:\n        setInputIndex(4);\n        break;\n      case 3:\n        setInputIndex(8);\n        break;\n      default:\n        setInputIndex(0);\n        break;\n    }\n    return () => { };\n  }, [carouselIndex]);\n  //监听用户点击了硬件中的下一步按钮\n  useEffect(() => {\n    if (inputIndex === -1) {\n      setInputIndex(0);\n    } else if (inputIndex < 9) {\n      setInputIndex(inputIndex + 1);\n    }\n    if (inputIndex === 3) {\n      setCarouselIndex(2);\n    }\n    if (inputIndex === 7) {\n      setCarouselIndex(3);\n    }\n    return () => { };\n  }, [rulerConfirmCount]);\n  //监听用户点击了硬件中的下一步按钮和拉动皮尺\n  useEffect(() => {\n    if (inputIndex < 9) {\n      let { deviceType, mac } = selectHardwareInfo;\n      if (deviceType === 'tape') {\n        if (mac === null || (mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac)) {\n          switch (inputIndex) {\n            case 0:\n              setHeadValue(rulerMeasureValue);\n              break;\n            case 1:\n              setNeckValue(rulerMeasureValue);\n              break;\n            case 2:\n              setUpperValue(rulerMeasureValue);\n              break;\n            case 3:\n              setLowerValue(rulerMeasureValue);\n              break;\n            case 4:\n              setTorsoValue(rulerMeasureValue);\n              break;\n            case 5:\n              setBodyValue(rulerMeasureValue);\n              break;\n            case 6:\n              setHindlimbValue(rulerMeasureValue);\n              break;\n            case 7:\n              setForelimbLengthValue(rulerMeasureValue);\n              break;\n            case 8:\n              setForelimbCircumferenceValue(rulerMeasureValue);\n              break;\n            default:\n              break;\n          }\n          if (rulerUnit !== radioValue) {\n            setRadioValue(rulerUnit);\n            setHeadValue(headValue && changeUnit(headValue));\n            setNeckValue(neckValue && changeUnit(neckValue));\n            setUpperValue(upperValue && changeUnit(upperValue));\n            setLowerValue(lowerValue && changeUnit(lowerValue));\n            setTorsoValue(torsoValue && changeUnit(torsoValue));\n            setBodyValue(bodyValue && changeUnit(bodyValue));\n            setHindlimbValue(hindlimbValue && changeUnit(hindlimbValue));\n            setForelimbLengthValue(forelimbLengthValue && changeUnit(forelimbLengthValue));\n            setForelimbCircumferenceValue(forelimbCircumferenceValue && changeUnit(forelimbCircumferenceValue));\n          }\n        }\n      }\n    }\n  }, [rulerConfirmCount, rulerMeasureValue]);\n\n  return (\n    <>\n      <Content className=\"scanContentBox\">\n        <Spin spinning={loding} size=\"large\" wrapperClassName=\"scanPageLoding\">\n          <div className=\"historyWeightBox\">\n            {\n              judgeWightTime()\n            }\n          </div>\n          {\n            lookType ?\n              (\n                <>\n                  <div className=\"lookImageBox\">\n                    {changeLookImage()}\n                    < img src={shrink} className=\"checkImage\" onClick={() => onLookImage(false)} />\n                  </div>\n                  <div className=\"lookInputBox\">\n                    <NumericInput\n                      value={onValue()}\n                      onChange={onOnChange()}\n                      onClick={() => clickInput(inputIndex)}\n                      index={inputIndex}\n                      indexkey={inputIndex}\n                      changesize={'32px'}\n                    />\n                  </div>\n                </>\n              ) :\n              (\n                <div className=\"scanImageBox\">\n                  {changeImage()}\n                  < img src={amplification} className=\"checkImage\" onClick={() => onLookImage(true)} />\n                </div>\n              )\n          }\n          {/*选择单位框*/}\n          <Radio.Group\n            value={radioValue}\n            onChange={changeRadio}\n            buttonStyle=\"solid\"\n            className=\"selectLengthUnit\"\n          >\n            <Radio.Button\n              value=\"in\"\n              className=\"inButton\"\n              style={{\n                background: radioValue === \"in\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"in\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopRightRadius: \"0px\",\n                borderBottomRightRadius: \"0px\",\n              }}\n            >\n              in\n            </Radio.Button>\n            <Radio.Button\n              value=\"cm\"\n              className=\"cmButton\"\n              style={{\n                background: radioValue === \"cm\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"cm\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopLeftRadius: \"0px\",\n                borderBottomLeftRadius: \"0px\",\n              }}\n            >\n              cm\n            </Radio.Button>\n          </Radio.Group>\n          {/**输入框 */}\n          <div className=\"slideshowBox\" style={{ height: px(100) }}>\n            <div className=\"leftImageBox\" onClick={() => letfClick()}>\n              <LeftOutlined style={{ fontSize: '24px', visibility: carouselIndex === 1 ? 'hidden' : 'visible' }} />\n            </div>\n            <div className=\"scollInputGroup\">\n              {/*第一列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 1 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Head Circumference</p>\n                    <NumericInput\n                      value={headValue}\n                      onChange={setHeadValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(0)}\n                      index={inputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={neckValue}\n                      onChange={setNeckValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(1)}\n                      index={inputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={upperValue}\n                      onChange={setUpperValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(2)}\n                      index={inputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={lowerValue}\n                      onChange={setLowerValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(3)}\n                      index={inputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第二列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 2 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={torsoValue}\n                      onChange={setTorsoValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(4)}\n                      index={inputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={bodyValue}\n                      onChange={setBodyValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(5)}\n                      index={inputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={hindlimbValue}\n                      onChange={setHindlimbValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(6)}\n                      index={inputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={forelimbLengthValue}\n                      onChange={setForelimbLengthValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(7)}\n                      index={inputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第三列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 3 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={forelimbCircumferenceValue}\n                      onChange={setForelimbCircumferenceValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(8)}\n                      index={inputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n            </div>\n            <div className=\"rightImageBox\" onClick={() => rightClick()}>\n              <RightOutlined style={{ fontSize: '24px', visibility: carouselIndex === 3 ? 'hidden' : 'visible' }} />\n            </div>\n          </div>\n          {/*历史测量数据展示*/}\n          <div className=\"historyBox\">\n            <div className=\"historyTimeBox\">\n              {\n                lastRuleTimeValue && (\n                  <p>{`Previously Measured on ${moment(lastRuleTimeValue).format('L')}`}</p>\n                )\n              }\n            </div>\n            <div className=\"historyDataBox\">\n              {historyData()}\n            </div>\n\n          </div>\n          {/*下一步 */}\n          <div className=\"nextBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              className=\"nextBtn\"\n              onClick={inputIndex > 7 ? finishScan : switchFocus}\n            >\n              {inputIndex > 7 ? \"Calculate\" : \"Next\"}\n            </Button>\n          </div>\n        </Spin>\n      </Content>\n      <Modal\n        open={weightTipVisible}\n        width={320}\n        className='weightTipModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">Weight Required</p>\n          <div className=\"tipTitleBox\">\n            <p className=\"tipTitle\">\n              This pet's weight has not been\n            </p>\n            <p className=\"tipTitle\">\n              entered into their profile. Update\n            </p>\n            <p className=\"tipTitle\">\n              their pet profile with the weight or\n            </p>\n            <div className=\"tipTitle\">\n              use the\n              <p onClick={() => goToBiggieScale()}>Biggie Scale</p>\n              .\n            </div>\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => onCancel()}\n              className=\"modalBtn\"\n            >\n              Skip\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => updatePetMessage()}\n              className=\"modalBtn\"\n            >\n              Update Profile\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      <Modal\n        open={missMeasureVisible}\n        width={432}\n        className='missMeasureModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">You've missed these measurements</p>\n          <p className=\"title\">Enter these missing readings</p>\n          <div className=\"inputBox\">\n            {\n              headValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missHeadValue}\n                      onChange={setMissHeadValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(0)}\n                      index={missInputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              neckValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={missNeckValue}\n                      onChange={setMissNeckValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(1)}\n                      index={missInputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              upperValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={missUpperValue}\n                      onChange={setMissUpperValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(2)}\n                      index={missInputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                )\n            }\n            {\n              lowerValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={missLowerValue}\n                      onChange={setMissLowerValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(3)}\n                      index={missInputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                )\n            }\n            {\n              torsoValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missTorsoValue}\n                      onChange={setMissTorsoValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(4)}\n                      index={missInputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                )\n            }\n            {\n              bodyValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={missBodyValue}\n                      onChange={setMissBodyValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(5)}\n                      index={missInputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                )\n            }\n            {\n              hindlimbValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={missHindlimbValue}\n                      onChange={setMissHindlimbValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(6)}\n                      index={missInputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbLengthValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={missForelimbLengthValue}\n                      onChange={setMissForelimbLengthValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(7)}\n                      index={missInputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbCircumferenceValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={missForelimbCircumferenceValue}\n                      onChange={setMissForelimbCircumferenceValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(8)}\n                      index={missInputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                )\n            }\n\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => setMissMeasureVisible(false)}\n              className=\"modalBtn\"\n            >\n              cancel\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => saveMiss()}\n              className=\"modalBtn\"\n            >\n              Save and Calculate\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n    setSelectHardwareType,\n  }\n)(ScanPet);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js",["1113","1114"],"/**\r\n * @file product.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/product 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20221121\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/product`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据组织获取所有宠物\r\n * @param {str} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const list = () => {\r\n    return get(`${baseURL}/list`, '')\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js",["1115"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/EzyVet`\r\n\r\n\r\n/**\r\n * @dec 重新获取令牌\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const ezyvetauth = (parames) => {\r\n    return get(`${baseURL}/ezyvetauth`, parames)\r\n}\r\n\r\n\r\nexport const checkAndSaveAnimalList = (parames) => {\r\n    return postJson(`${baseURL}/checkAndSaveAnimalList`, parames)\r\n}\r\n\r\nexport const healthstatus = (paramId, petVitalId, parames) => {\r\n    return patch(`${baseURL}/healthstatus/${paramId}/${petVitalId}`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js",["1116","1117","1118"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const vetspireGetPetLatestExam = (params) => {\r\n    return postJson(`${baseURL}/vetspireGetPetLatestExam`, params)\r\n}\r\n\r\n\r\n\r\n\r\nexport const vetspireUpdateWeight = (params) => {\r\n    return postJson(`${baseURL}/vetspireUpdateWeight`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js",["1119","1120","1121"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/user`\r\n\r\n\r\nexport const changeLatestWorkplace = (userId, workplaceId, roleId = 2) => {\r\n    return get(`${baseURL}/changeLatestWorkplace/${userId}/${roleId}/${workplaceId}`,\r\n        '')\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js",["1122","1123","1124"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/pet`\r\n\r\n\r\n\r\n\r\n\r\nexport const getPetInfoByRFID = (heardSearchText, lastOrganization) => {\r\n    return get(`${baseURL}/getPetInfoByRFID/${heardSearchText}/${lastOrganization}`, '')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js",["1125","1126"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/EzyVet`\r\n\r\n\r\n\r\n\r\nexport const ezyvetGetPetLatestExam = (params) => {\r\n    return get(`${baseURL}/ezyvetGetPetLatestExam`, params)\r\n}\r\n\r\n\r\nexport const ezyvetUpdateWeight = (paramId, params) => {\r\n    return patch(`${baseURL}/ezyvetUpdateWeight/${paramId}`, params)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js",["1127","1128"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/user`\r\n\r\n\r\n/**\r\n * @dec 邀请别人加入组织\r\n * @param {*} userId 用户id\r\n * @param {*} organizationId 组织id\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const inviteUserByEmail = (userId, organizationId, parames) => {\r\n    return postJson(`${baseURL}/inviteUserByEmail/${userId}/${organizationId}`, parames)\r\n}\r\n\r\nexport const updateUserInfo = (parames) => {\r\n    return postJson(`${baseURL}/updateUserInfo`, parames)\r\n}\r\n\r\n\r\n\r\n\r\nexport const loginWithQRcode = (QRToken) => {\r\n    return get(`${baseURL}/loginWithQRcode/${QRToken}`, '')\r\n}\r\n\r\n\r\nexport const getLoginQRcode = () => {\r\n    return get(`${baseURL}/getLoginQRcode`, '')\r\n}\r\n\r\n\r\n\r\nexport const resendDeskRegistEmail = (logupEmailCode, params) => {\r\n    return get(`${baseURL}/resendDeskRegistEmail/${logupEmailCode}`, params)\r\n}\r\n\r\n\r\nexport const deskRegistAWSSNS = (params) => {\r\n    return postJson(`${baseURL}/deskRegistAWSSNS`, params)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js",["1129","1130","1131"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const selectExamByPatientId = (parames) => {\r\n    return postJson(`${baseURL}/selectExamByPatientId`, parames)\r\n}\r\n\r\n\r\nexport const updateVitalsTemperatureByVitalId = (parames) => {\r\n    return postJson(`${baseURL}/updateVitalsTemperatureByVitalId`, parames)\r\n}\r\n\r\n\r\nexport const selectLocations = (parames) => {\r\n    return postJson(`${baseURL}/selectLocations`, parames)\r\n}\r\n\r\n\r\nexport const selectProvidersByLocationId = (parames) => {\r\n    return postJson(`${baseURL}/selectProvidersByLocationId`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js",["1132","1133","1134"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/preOrder 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20221121\n *\n */\nimport { get, postJson, postFormData, postFormData2, del, put } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/preOrder`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\n\n//用户获取订阅信息\nexport const getOrderInfo = (userId) => {\n    return get(`${baseURL}/getOrderInfo/${userId}`, '')\n}\n//生成订单\nexport const buy = (userId, params) => {\n    return postJson(`${baseURL}/${userId}`, params)\n}\n//对订单进行付款\nexport const payForOrder = (preOrderId, params) => {\n    return postFormData2(`${baseURL}/payForOrder/${preOrderId}`, params)\n}\n// //退款,等待审核\n// export const reFund = (preOrderId) => {\n//   return get(`${baseURL}/checkRefund/${preOrderId}`, '')\n// }\n\n//管理员审核退款\nexport const reFund = (preOrderId) => {\n  return postFormData2(`${baseURL}/refund/${preOrderId}`, {\n    isPassCheck: 'true'\n  })\n}\n\n/**\n * 根据订单号获取订单是否支付、过期等\n * @param {string} preOrderId\n * @returns\n */\nexport const getPreOrderById = (preOrderId,) => {\n    return get(`${baseURL}/getPreOrderById/${preOrderId}`, '')\n}\n\n\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",["1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\n\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\nimport Delete from \"./../../assets/img/Delete.png\";\n\nimport { mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport { deletePetExamByExamId, getPetExamByPetId, updatePetExam } from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { useThrottleFn, useDebounceFn, useDebounceEffect } from 'ahooks';\n\nimport \"./index.less\";\n\nconst HistoryTable = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n  saveNum = 0,\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\n}) => {\n  let { petId } = petMessage;\n  let storage = window.localStorage;\n  let draggleRef = React.createRef();\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [reRender, setReRender] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const [loading, setLoading] = useState(false);//加载\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n  const [isMore, setIsMore] = useState(true); // 是否还有数据 false-已经到底\n  //体重表格渲染\n  const weightColumns = [\n    {\n      title: \"Data\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: \"Weight\",\n      dataIndex: \"weight\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\n      ),\n    },\n\n    {\n      // title: \"BF%\",\n      // dataIndex: \"fat\",\n      title: \"Impedance\",\n      dataIndex: \"impedance\",\n\n\n\n      key: \"fat\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"BCS\",\n      dataIndex: \"bodyConditionScore\",\n      key: \"bodyConditionScore\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"Note\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //温度表格渲染\n  const TemperatureColumns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            style={{ cursor: \"pointer\" }}\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //选择表格colum渲染\n  const columType = () => {\n    switch (tableColumnType) {\n      case \"temperature\":\n        return TemperatureColumns;\n      case \"weight\":\n        return weightColumns;\n      default:\n        break;\n    }\n  };\n  //判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //获取历史宠物数据\n  const { run: getPetTemperatureData } = useDebounceFn((currPage) => {\n    setLoading(true);\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: tableColumnType === \"temperature\" ? 0 : 1,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        setLoading(false);\n        setTotal(res.data.totalCount);\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, { wait: 0 });\n\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史记录\n  const deletePetMessage = (examId) => {\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useDebounceEffect(() => {\n    setCurrPage(1);\n    setPetData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n  }, [petId], { wait: 0 });\n\n  useEffect(() => {\n    if (reRender !== saveNum) {\n      setCurrPage(1);\n      setPetData([]);\n      setTotal(0);\n      setReRender(saveNum);\n      getPetTemperatureData(1);\n    }\n    return () => { };\n  }, [saveNum]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n    return (() => { });\n  }, []);\n\n  return (\n    <div className=\"tableContainer\" onScrollCapture={onScrollCapture}>\n      <Table\n        rowKey={\"examId\"}\n        columns={columType()}\n        dataSource={petData}\n        pagination={false}\n        loading={loading}\n        scroll={{\n          y: '80%'\n        }}\n        className=\"historyTableStyle\"\n      />\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        open={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(HistoryTable);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx",["1152"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Select,\n} from \"antd\";\n\nimport UploadImg from \"../../utils/uploadImg/UploadImg\";\n\nimport {\n  checkPatientId,\n  selectBreedBySpeciesId,\n} from '../../api';\n\nimport _ from 'lodash';\n\nimport './index.less';\n\nconst AddPetModal = ({ visible, width, title, destroyOnClose, value, onConfirm, onCancel, onLoading }) => {\n  const { Option } = Select;\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [loading, setLoading] = useState(false);//加载\n  const [breedList,  setBreedList] = useState([]);//\n  const [imageId, setImageId] = useState('');//上传后图片id\n  const [patientId, setPatientId] = useState('');//用户输入的病人id\n  const [petName, setPetName] = useState('');//用户输入的宠物名字\n  const [ownerName, setOwnerName] = useState('');//用户输入的主人名字\n  const [breedId, setBreedId] = useState('');//用户选择的宠物品种id\n  const [petAge, setPetAge] = useState('');//用户输入的宠物年龄\n  const [petWeight, setPetWeight] = useState('');//用户输入的宠物体重\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n\n  //确认选择\n  const handleOk = () => {\n    if (patientId === '') {\n      message.error('Please enter the patientId!');\n    } else {\n      setIsModalVisible(visible);\n      onConfirm({\n        imageId: imageId,\n        patientId: patientId,\n        petName: petName,\n        petSpeciesBreedId: breedId,\n        age: petAge,\n        weight: petWeight,\n        owner: ownerName,\n      })\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //判断用户输入的patientId是否存在\n  const getPetInfoByPatientId = () => {\n    setLoading(true);\n    let datas = {\n      patientId: patientId,\n      doctorId: storage.userId\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.organizationId = storage.lastOrganization\n    }\n    checkPatientId(datas)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === false) {\n          message.error('The patient ID already exists, please replace it !');\n        } else {\n          message.success('The patientId can be used ~')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        message.error('Abnormal interface');\n      })\n\n  }\n  //获取宠物品种\n  const selectBreed = () => {\n    setLoading(true);\n    selectBreedBySpeciesId({ speciesId: null })\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          let arr = [];\n          _.map(res.petlist, (item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n            };\n            arr.push(data);\n          });\n          setBreedList(arr);\n        } else {\n          message.error('Failed to obtain pet breed information!');\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    selectBreed();\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  return (\n    <>\n      <Modal\n        title=\"Add a Pet\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"addPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className='petMsgBox'>\n              <div className='addPhoto'>\n                <UploadImg\n                  getImg={(val) => {\n                    setImageId(val.imageId);\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Patient ID:</p>\n                <Input\n                  value={patientId}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPatientId(e.target.value)\n                  }}\n                  onBlur={() => {\n                    if (patientId.length > 0) {\n                      getPetInfoByPatientId();\n                    }\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Name:</p>\n                <Input\n                  value={petName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetName(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Owner Name:</p>\n                <Input\n                  value={ownerName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setOwnerName(e.target.value)\n                  }}\n                />\n              </div>\n\n              <div className=\"item\">\n                <p>Breed:</p>\n                <div className='selectBox'>\n                  <Select\n                    showSearch\n                    style={{ width: \"100%\" }}\n                    bordered={false}\n                    value={breedId}\n                    placeholder=\"Search to Select\"\n                    optionFilterProp=\"children\"\n                    listHeight={256}\n                    onSelect={(value, data) => setBreedId(value)}\n                    filterOption={(input, option) =>\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                      0\n                    }\n                    filterSort={(optionA, optionB) =>\n                      optionA.children\n                        .toLowerCase()\n                        .localeCompare(optionB.children.toLowerCase())\n                    }\n                  >\n                    {\n                      _.map(breedList, (item, index) => (\n                        <Option key={item.petSpeciesBreedId}>{item.breedName}</Option>\n                      ))\n                    }\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p>Pet Age:</p>\n                <Input\n                  value={petAge}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetAge(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Weight:</p>\n                <Input\n                  value={petWeight}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetWeight(e.target.value)\n                  }}\n                />\n                <div className=\"unit\">{`kg`}</div>\n              </div>\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n\n};\n\nexport default AddPetModal;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx",["1153","1154","1155","1156"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Avatar,\n  List\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nconst SelectPet = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel, onLoading, onAddPet }) => {\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [petList, setPetList] = useState([]);//当前组织下所有宠物\n  const [searchPetList, setSearchPetList] = useState([]);//搜索宠物列表\n  const [searchValue, setSearchValue] = useState('');//搜索框的值\n  const [selePetValue, setSelePetValue] = useState();//选中的宠物值\n  const [selePetId, setSelePetId] = useState('');//选中的宠物id\n  const [loading, setLoading] = useState(false);//数据加载\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n  //获取所有宠物\n  const getAllPet = () => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag) {\n          let newData = [];\n          _.map(res.data, (item, index) => {\n            newData.push({\n              petId: item.petId,\n              petIndex: index,\n              birthday: item.birthday,\n              breedName: item.breedName,\n              patientId: item.patientId,\n              petName: item.petName,\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              gender: item.gender,\n              url: item.url,\n            })\n          });\n          setPetList(_.orderBy(newData, ['petIndex'], ['desc']));\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    if (_.isEmpty(selePetValue)) {\n      message.error('Please choose a pet!');\n    } else {\n      onSelect(selePetValue);\n      setIsModalVisible(visible);\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入值\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n  //展示宠物照片\n  const shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  //选择宠物事件\n  const selectPet = (petId, item) => {\n    setSelePetValue(item);\n    setSelePetId(petId);\n  }\n  //搜索宠物名字或patientId\n  const searchPetByPetNameOrPatientId = () => {\n    let list = petList;\n    let searchData = [];\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n      if (\n        `${name}`.indexOf(searchValue.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(searchValue.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n    setSearchPetList(searchData);\n  }\n  //取消或添加宠物\n  const handleCancelOrAddPet = () => {\n    onAddPet(false);\n    setIsModalVisible(visible);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPet();\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (searchValue.length > 0) {\n      searchPetByPetNameOrPatientId();\n    }\n    return (() => { })\n  }, [searchValue]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  useEffect(() => {\n    if (_.find(petList, ['petId', value]) !== undefined) {\n      setSelePetId(_.toString(value));\n      setSelePetValue(_.find(petList, ['petId', value]));\n    }\n    return (() => { })\n  }, [value, petList]);\n\n  return (\n    <>\n      <Modal\n        title=\"Assign Measurement\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Pet\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={searchValue.length > 0 ? searchPetList : petList}\n                renderItem={(item, index) => (\n                  <List.Item\n                    extra={selePetId === item.petId ? <span className=\"search\">&#xe614;</span> : null}\n                    onClick={() => selectPet(item.petId, item)}\n                  >\n                    <List.Item.Meta\n                      avatar={<Avatar src={shoePetPicture(item.petSpeciesBreedId, item.url)} />}\n                      title={\n                        <div className='petListItemTitle'>\n                          {item.petName ? item.petName : 'unKnown'},{item.patientId ? item.patientId : 'unKnown'}\n                        </div>\n                      }\n                      description={\n                        <div>\n                          {calculateAge(item.birthday) === 'unknown' ? 'unknown' : `${calculateAge(item.birthday)} yrs`},\n                          {item.gender === 0 ? \"Male\" : \"Venter\"},\n                          {item.breedName ? item.breedName : 'unKnow'}\n                        </div>\n                      }\n                    />\n                  </List.Item>\n\n                )}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancelOrAddPet}\n                >\n                  +Add New Pet\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPet;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",["1157","1158"],"import { useEffect } from 'react';\nimport { Input } from 'antd';\nimport _ from 'lodash';\nimport './numericInput.less'\n\n\nconst NumericInput = (props) => {\n  const { value, onChange, onInput, onClick, indexkey, index, changesize = '' } = props;\n  //输入框输入\n  const handleChange = (e) => {\n    const { value: inputValue } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n\n    if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\n      onChange(inputValue);\n    }\n  }\n  //失去焦点\n  const handleBlur = () => {\n    let valueTemp = value;\n    if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\n  };\n  //输入框点击事件\n  const handleClick = () => {\n    onClick();\n  }\n  //修改样式\n  let bordercolor = indexkey === index ? '#D5B019' : '#d9d9d9';\n\n\n  return (\n    <Input\n      {...props}\n      className='inputNum'\n      onChange={handleChange}\n      onBlur={handleBlur}\n      maxLength={10}\n      ref={onInput}\n      onClick={handleClick}\n      style={{ borderColor: bordercolor, textAlign: \"center\", fontSize: changesize }}\n    />\n  );\n\n};\n\nexport default NumericInput;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",["1159"],"\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js",["1160","1161"],"/**\r\n * @file backend.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/backend 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/backend`\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getOta = (hardWareType) => {\r\n    return get(`${baseURL}/getOta?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js",["1162"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/petall 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/petall`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\nexport const pet_petall = (lastOrganization, params) => {\n  return postJson(`${baseURL}/pet/${lastOrganization}/petall`, params)\n}\n/**\n * @dec 根据用户id查询当前组织下的所有宠物\n * @param {*} params\n * @returns\n */\nexport const getPersonPetByUserId = (params) => {\n  return get(`${baseURL}/getPersonPetByUserId?userId=${params.userId}&orgId=${params.orgId}`);\n}\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js",["1163","1164"],"/**\r\n * @file userfeedback.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/userfeedback 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/userfeedback`\r\n\r\n\r\n/**\r\n * @dec bug提交\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const savefeedback = (params) => {\r\n    return postJson(`${baseURL}/savefeedback`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js",["1165","1166"],"/**\r\n * @file vetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/VetSpire`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据vetspire中的api验证\r\n * @param params \r\n */\r\n\r\nexport const selectLocationsByOrganization = (params) => {\r\n    return postJson(`${baseURL}/selectLocationsByOrganization`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js",["1167","1168"],"/**\n * @file clinical.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/clinical 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/clinical`\n\n\n/**\n * @dec 临床测试数据保存\n * @param {*} params\n * @returns\n */\nexport const addAllClinical = (params) => {\n    return postJson(`${baseURL}/addAllClinical`, params)\n}\n\n/**\n * @dec 1.2版本的猫预测\n * @param {*} params\n * @returns\n */\nexport const catv12Predict = (params) => {\n    return postJson(`${baseURL}/catv12Predict`, params)\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js",["1169","1170"],"\r\n\r\n// let COMMON_URL = '';\r\n// let COMMON_URL = 'https://api.trial.ezyvet.com/v1';\r\nlet COMMON_URL = process.env.REACT_APP_EZYVET_BASE_URL\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function FetchEzyVet(url, method, params = '', token = '') {\r\n\r\n    if (method === 'GET' || method === 'DELETE') {\r\n        let headers = null\r\n        if (token !== '') {\r\n            headers = {\r\n                'authorization': token,\r\n            };\r\n        }\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            // 定一个空数组\r\n            let paramsArray = [];\r\n            //  拆分对象\r\n            Object.keys(params).forEach(key =>\r\n                paramsArray.push(key + \"=\" + params[key])\r\n            );\r\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n            if (url.search(/\\?/) === -1) {\r\n                url = url + \"?\" + paramsArray.join(\"&\");\r\n            } else {\r\n                url = url + \"&\" + paramsArray.join(\"&\");\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": 'text/plain'\r\n                    }\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else if (method === 'POST') {\r\n        let header = {\r\n            \"Content-type\": \"application/json\"\r\n        };\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    // mode: 'cors',\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else {\r\n        let header = {\r\n            \"Content-type\": \"application/merge-patch+json\",\r\n            authorization: token\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx",["1171","1172","1173","1174","1175","1176","1177","1178","1179","1180"],"import React, { Component } from 'react'\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\nimport './unassignModal.less'\nimport Draggable from \"react-draggable\";\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport {\n  getPetExamByDoctorId,\n  selectBreedBySpeciesId,\n  checkPatientId,\n  addDeskPet,\n  addAndSavePetExam,\n  deletePetExamByExamId,\n  listAllPetInfo\n} from './../../api';\n\nimport Close from \"./../../assets/img/close.png\";\n\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { mTop, px, MTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport MyModal from \"../../utils/myModal/MyModal\";\nimport Button from \"./../../utils/button/Button\";\n\nimport moment from \"moment\";\n\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\n\n\n\nexport default class UnassignModal extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    workplaceId: storage.lastWorkplaceId,\n    loadingPets: false,\n  };\n\n  componentDidMount() {\n\n    if (this.props.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n\n\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('prevProps', prevProps, prevState);\n    if (this.props.assignVisible !== this.state.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n    if (this.props.lastWorkplaceId !== this.state.workplaceId) {\n      this.setState({\n        petListData: [],\n        workplaceId: this.props.lastWorkplaceId\n      })\n\n      this.gerAllPetMsg();\n\n    }\n    if (this.props.seleceEmergencies !== this.state.seleceEmergencies) {\n      this.setState({\n        seleceEmergencies: this.props.seleceEmergencies\n      })\n    }\n\n  }\n\n\n\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n\n    getPetExamByDoctorId(storage.userId)\n      .then((res) => {\n        console.log(\"---res\", res);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let day = moment().diff(moment(createTime), \"day\");\n              // console.log(day);\n              if (day > 3) {\n                continue;\n              }\n\n              let Tem = temperature;\n              try {\n                if (clinicalDataEntity) {\n                  Tem = temperature || clinicalDataEntity.data0;\n                }\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n                day,\n              };\n\n              historys.push(str);\n            }\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          this.setState({\n            historyData,\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    selectBreedBySpeciesId({ speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n          selectBreedBySpeciesId({ speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('获取列表');\n    this.setState({\n      loadingPets: true,\n    })\n    listAllPetInfo(params)\n      .then((res) => {\n        console.log('res33: ', res);\n        this.setState({\n          loadingPets: false,\n        })\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadingPets: false,\n        })\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n          checkPatientId(datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n\n      addDeskPet(this.state.assignPatientId, petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  this.props.success(true)\n\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        open={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      deletePetExamByExamId(key, '')\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              console.log(\"删除成功\");\n              const historyData = [...this.state.historyData];\n              console.log(historyData);\n              this.setState({\n                historyData: historyData.filter((item) => item.historyId !== key),\n              });\n            } else {\n              console.log(\"删除失败\");\n            }\n          }\n        );\n    };\n\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n\n    return (\n      <div id='unassignedModal111'>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                          this.props.onChangeVisible(false)\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this.state.loadingPets ?\n                    <div style={{ display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                      <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                        <LoadingOutlined style={{ fontSize: 30, color: '#000', marginTop: mTop(-30), }} />\n                      </div>\n                      <p style={{ color: '#000' }}>\n                        {'loading...'}\n                      </p>\n                    </div> :\n                    this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                        this.props.onChangeVisible(false)\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                this.props.success(true)\n\n                                this.setState({\n                                  assignVisible: false,\n                                });\n                                this.props.onChangeVisible(false)\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n        {this._modal()}\n      </div>\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Progress, Layout, Carousel } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport { px } from \"../../../utils/px\";\nimport electronStore from \"../../../utils/electronStore\";\nimport _ from \"lodash\";\n\nimport \"./measurement.less\";\n\nlet storage = window.localStorage;\nconst { Content, Header } = Layout;\n\nconst Measurement = ({ petMessage, hardwareMessage }) => {\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\n  const [percent, setPercent] = useState(0);\n  const [value, setValue] = useState(0);\n  const [timers, setTimers] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    const random = 1;\n    setValue(value + random);\n    setTimers(timers + random);\n  };\n\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    let num = parseFloat(percent);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    }\n    return (\n      <>\n        {mellaMeasurePart !== \"耳温\" ? (\n          <p className=\"ProgressTitle\">\n            {num}\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\n          </p>\n        ) : (\n          <></>\n        )}\n        <p className=\"ProgressTitle\">Measuring</p>\n      </>\n    );\n  };\n  //图片切换\n  const checkImage = () => {\n    switch (timers) {\n      case 0:\n        return <img src={Animation_1} />;\n      case 1:\n        return <img src={Animation_2} />;\n      case 2:\n        return <img src={Animation_3} />;\n      case 3:\n        return <img src={Animation_3} />;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (timers > 2) {\n      setTimers(0);\n    }\n    return () => { };\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    const timer = setInterval(tick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* <HeaderItem /> */}\n      <Content className={\"measureContentBox\"}>\n        <div style={{height: '100%', display: 'flex', flexDirection: 'column', alignItems:'center', justifyContent:'center'}}>\n          <div style={{ marginTop: 16 }}>\n            <Progress\n              type=\"dashboard\"\n              percent={_.round(mellaMeasureValue, 1)}\n              gapDegree={30}\n              // width={px(260)}\n              strokeWidth={\"8\"}\n              format={(percent) => ProgressTitle(percent)}\n              strokeColor={'#4C595E'}\n              className='measuringProgress'\n            />\n          </div>\n          {checkImage()}\n        </div>\n      </Content>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(Measurement);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",["1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Progress,\r\n  Space,\r\n  Table,\r\n  Tag,\r\n  Badge,\r\n  Modal,\r\n  Popconfirm,\r\n  message,\r\n  Layout,\r\n} from \"antd\";\r\nimport xia_hui from \"./../../../assets/img/xia_hui.png\";\r\nimport exportHis from \"./../../../assets/img/exportHis.png\"\r\nimport measuredTable_1 from \"./../../../assets/img/measuredTable_1.png\";\r\nimport measuredTable_2 from \"./../../../assets/img/measuredTable_2.png\";\r\nimport measuredTable_3 from \"./../../../assets/img/measuredTable_3.png\";\r\nimport EditCircle from \"./../../../assets/img/EditCircle.png\";\r\nimport Delete from \"./../../../assets/img/Delete.png\";\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport Draggable from \"react-draggable\";\r\nimport { px, mTop } from \"../../../utils/px\";\r\nimport moment from \"moment\";\r\nimport electronStore from \"../../../utils/electronStore\";\r\nimport \"./measuredData.less\";\r\nimport {\r\n  deletePetExamByExamId,\r\n  ezyvetGetPetLatestExam,\r\n  getPetExamByPetId,\r\n  healthstatus,\r\n  updatePetExam,\r\n  updateVitalsTemperatureByVitalId,\r\n  vetspireGetPetLatestExam\r\n} from \"./../../../api\";\r\nimport { addClamantPetExam } from './../../../api/mellaserver/exam'\r\n\r\nconst { Content } = Layout;\r\nconst MeasuredData = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  setMellaConnectStatusFun,\r\n}) => {\r\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\r\n    hardwareMessage;\r\n  let draggleRef = React.createRef();\r\n  let { petId, memo, patientId } = petMessage;\r\n  let storage = window.localStorage;\r\n  let hisHe = mTop(200);\r\n  try {\r\n    let historyElement = document.querySelectorAll(\".measurementBox .table\");\r\n    hisHe = historyElement[0].clientHeight - mTop(60);\r\n  } catch (error) { }\r\n\r\n  const [petTemperatureData, setPetTemperatureData] = useState([]); //存储宠物历史温度数据\r\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\r\n  const [visible, setVisible] = useState(false); //model框是否显示\r\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\r\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\r\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\r\n  const [temHistory, setTempHsitory] = useState(true); //是否隐藏历史\r\n\r\n  const [bounds, setBounds] = useState({\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  });\r\n  const [isHua, setIsHua] = useState(true);\r\n  const [pageSize, setPageSize] = useState(10); // 每页10条\r\n  const [total, setTotal] = useState(0);//历史数据的总条数\r\n  const [currPage, setCurrPage] = useState(1);//页码\r\n\r\n  let btnList = [\r\n    {\r\n      name: 'Date',\r\n      data: 'Nov 26'\r\n    },\r\n    {\r\n      name: 'Time',\r\n      data: '09:05 AM'\r\n    },\r\n    {\r\n      name: 'Temperature',\r\n      data: '101.2 ',\r\n      unit: '%F'\r\n    },\r\n    {\r\n      name: 'Placement',\r\n      data: 'dog'\r\n    }\r\n  ]\r\n\r\n  //表格渲染\r\n  const columns = [\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"MMM D\"),\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"createTime\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\r\n    },\r\n    {\r\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\r\n      dataIndex: \"temperature\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => {\r\n        let num = parseFloat(text);\r\n        if (isHua) {\r\n          num = _.round((num * 1.8 + 32), 1);\r\n        } else {\r\n          num = num.toFixed(1);\r\n        }\r\n\r\n        return <Badge color={color(text)} text={num} />;\r\n      },\r\n    },\r\n    {\r\n      title: \"Placement\",\r\n      dataIndex: \"petVitalTypeId\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => {\r\n        if (text === 1) {\r\n          return <img src={measuredTable_2} />;\r\n        } else if (text === 3) {\r\n          return <img src={measuredTable_1} />;\r\n        } else if (text === 4) {\r\n          return <img src={measuredTable_3} />;\r\n        } else {\r\n          return <img src={measuredTable_2} />;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      title: \"Notes\",\r\n      dataIndex: \"memo\",\r\n      ellipsis: true,\r\n      align: \"center\",\r\n      render: (text, record) => text,\r\n    },\r\n    {\r\n      key: \"Action\",\r\n      align: \"center\",\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <img\r\n            // className=\"operationIcon\"\r\n            src={EditCircle}\r\n            onClick={() => {\r\n              setVisible(true);\r\n              setPetMessages(record);\r\n            }}\r\n            style={{ cursor: \"pointer\" }}\r\n          />\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => deletePetMessage(record.examId)}\r\n          >\r\n            <img src={Delete} style={{ cursor: \"pointer\" }} />\r\n          </Popconfirm>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  //根据温度判断指示文字颜色\r\n  const color = (data) => {\r\n    if (_.toNumber(data) > 40) {\r\n      return \"#e1206d\";\r\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\r\n      return \"#98da86\";\r\n    } else {\r\n      return \"#58bde6\";\r\n    }\r\n  };\r\n  //圆滑里面的文字\r\n  const ProgressTitle = (percent) => {\r\n    //根据温度判断指示文字\r\n    const title = () => {\r\n      if (mellaMeasureValue > 40) {\r\n        return \"Danger\";\r\n      } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\r\n        return \"Normal\";\r\n      } else {\r\n        return \"Low\";\r\n      }\r\n    };\r\n    return (\r\n      <>\r\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\r\n          {getTemp(percent)}\r\n          <span style={{ color: color(mellaMeasureValue) }} className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"\r\n            }`}</span>\r\n        </p>\r\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\r\n          {title()}\r\n        </p>\r\n      </>\r\n    );\r\n  };\r\n  // 历史记录显隐\r\n  const TempHisVisible = () => {\r\n    if (temHistory === false) {\r\n      setTempHsitory(true)\r\n    } else {\r\n      setTempHsitory(false)\r\n    }\r\n  };\r\n  //获取历史宠物温度数据\r\n  const getPetTemperatureData = (currPage) => {\r\n    let params = {\r\n      pageSize: pageSize,\r\n      currPage: currPage,\r\n      deviceType: 0,\r\n    }\r\n    getPetExamByPetId(petId, params)\r\n      .then((res) => {\r\n        if (res.flag === true) {\r\n          let newArr = [];\r\n          if (currPage === 1) {\r\n            newArr = res.data.list;\r\n          } else {\r\n            let oldArr = petTemperatureData;\r\n            let arr = res.data.list;\r\n            newArr = [...oldArr, ...arr];\r\n          }\r\n          setPetTemperatureData(_.orderBy(newArr, 'createTime', 'desc'));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //返回准备测量界面\r\n  const backConnectedPage = () => {\r\n    if (mellaConnectStatus != \"connected\") {\r\n      setMellaConnectStatusFun(\"connected\");\r\n    } else {\r\n      setMellaConnectStatusFun(\"disconnected\");\r\n    }\r\n  };\r\n  //保存数据\r\n  const saveData = () => {\r\n    let petVitalId = null;\r\n    switch (mellaMeasurePart) {\r\n      case \"腋温\":\r\n        petVitalId = 1;\r\n        break;\r\n      case \"肛温\":\r\n        petVitalId = 3;\r\n        break;\r\n      case \"耳温\":\r\n        petVitalId = 4;\r\n        break;\r\n      default:\r\n        petVitalId = 1;\r\n        break;\r\n    }\r\n    let params = {\r\n      petId: petId,\r\n      doctorId: storage.userId,\r\n      temperature: mellaMeasureValue,\r\n      petVitalTypeId: petVitalId,\r\n      memo: \"\",\r\n    };\r\n    addClamantPetExam(params)\r\n      .then((res) => {\r\n        if (res.flag === true) {\r\n          switch (storage.lastOrganization) {\r\n            case '3'://vetspire\r\n              updataVetspire(mellaMeasureValue)\r\n              break;\r\n            case '4'://ezyVet\r\n              updataEzyvet(mellaMeasureValue, petVitalId)\r\n              break;\r\n            default: message.success('Data successfully saved in Mella')\r\n              break;\r\n          }\r\n        }\r\n        setSaveType(true);\r\n        getPetTemperatureData(1);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //保存note\r\n  const save = () => {\r\n    let datas = {\r\n      memo: newMemo,\r\n    };\r\n    updatePetExam(petMessages.examId, datas)\r\n      .then((res) => {\r\n        setVisible(false);\r\n        getPetTemperatureData(1);\r\n      })\r\n      .catch((err) => {\r\n        setVisible(false);\r\n        console.log(err);\r\n      });\r\n  };\r\n  //删除历史温度记录\r\n  const deletePetMessage = (examId) => {\r\n\r\n    deletePetExamByExamId(examId, '')\r\n      .then(\r\n        (res) => {\r\n          if (res.flag === true) {\r\n            message.success(\"Successfully Delete\");\r\n            getPetTemperatureData(1);\r\n          } else {\r\n            message.error(\"Fail To Delete\");\r\n          }\r\n        }\r\n      );\r\n  };\r\n  //关闭弹窗\r\n  const handleCancel = (e) => {\r\n    setVisible(false);\r\n  };\r\n  const onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\r\n    setBounds({\r\n      left: -targetRect?.left + uiData?.x,\r\n      right: clientWidth - (targetRect?.right - uiData?.x),\r\n      top: -targetRect?.top + uiData?.y,\r\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n    });\r\n  };\r\n  const getTemp = (percent) => {\r\n\r\n    let num = mellaMeasureValue;\r\n    if (isHua) {\r\n      num = _.round((num * 1.8 + 32), 1);\r\n    } else {\r\n      num = parseFloat(num.toFixed(1));\r\n    }\r\n    return num;\r\n  };\r\n  const updataEzyvet = (Temp, petVitalId) => {\r\n    let params = {\r\n      id: patientId\r\n    }\r\n\r\n    ezyvetGetPetLatestExam(params)\r\n      .then(res => {\r\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\r\n          storage.connectionKey = res.newToken;\r\n          reupdataEzyvet(Temp, petVitalId)\r\n          return\r\n        }\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let temperature = Temp\r\n          let parames1 = {\r\n            consult_id,\r\n            temperature\r\n          }\r\n\r\n          healthstatus(paramId, petVitalId, parames1)\r\n            .then(res => {\r\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\r\n                storage.connectionKey = res.newToken;\r\n                reupdataEzyvet(Temp, petVitalId)\r\n                return\r\n              }\r\n              if (res.flag) {\r\n                message.success('Data successfully saved in EzyVet')\r\n              } else {\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n      })\r\n  }\r\n  const reupdataEzyvet = (Temp, petVitalId) => {\r\n    let params = {\r\n      id: patientId\r\n    }\r\n\r\n    ezyvetGetPetLatestExam(params)\r\n      .then(res => {\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let temperature = Temp\r\n          let parames1 = {\r\n            consult_id,\r\n            temperature\r\n          }\r\n\r\n          healthstatus(paramId, petVitalId, parames1)\r\n            .then(res => {\r\n              if (res.flag) {\r\n                message.success('Data successfully saved in EzyVet')\r\n              } else {\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n      })\r\n  }\r\n  const updataVetspire = (Temp) => {\r\n    let datas = {\r\n      APIkey: storage.connectionKey,\r\n      patientId: patientId\r\n    }\r\n    vetspireGetPetLatestExam(datas)\r\n      .then(res => {\r\n        if (res.flag) {\r\n          let data = res.data.encounters[0].vitals\r\n          let encountersId = data.id\r\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\r\n          let params = {\r\n            vitalId: encountersId,\r\n            APIkey: storage.connectionKey,\r\n            temp: temperature\r\n          }\r\n\r\n          updateVitalsTemperatureByVitalId(params)\r\n            .then(res => {\r\n              if (res.flag) {\r\n                message.success('Data successfully saved in Vetspire')\r\n              } else {\r\n                message.error('Data failed saved in Vetspire')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              message.error('Data failed saved in Vetspire')\r\n            })\r\n        } else {\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n      })\r\n  }\r\n  //滚动监听\r\n  const onScrollCapture = () => {\r\n    // 滚动的容器\r\n    let tableEleNodes = document.querySelectorAll(`.measuredTable .ant-table-body`)[0];\r\n    //是否滚动到底部\r\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\r\n    if (bottomType) {\r\n      if (total === petTemperatureData.length) {\r\n        return false;\r\n      }\r\n      setCurrPage(currPage + 1);\r\n      getPetTemperatureData(currPage + 1);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCurrPage(1);\r\n    setPetTemperatureData([]);\r\n    setTotal(0);\r\n    getPetTemperatureData(1);\r\n    return (() => { })\r\n  }, [petId]);\r\n\r\n\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (hardSet) {\r\n      let { isHua } = hardSet;\r\n      setIsHua(isHua);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Content className=\"measurementBox\">\r\n        <div className=\"container\">\r\n          {\r\n            temHistory ?\r\n              (\r\n                <div className=\"progress\">\r\n                  <Progress\r\n                    type=\"dashboard\"\r\n                    percent={_.round(mellaMeasureValue, 1)}\r\n                    gapDegree={30}\r\n                    // width={px(260)}\r\n                    strokeWidth={\"8\"}\r\n                    format={(percent) => ProgressTitle(percent)}\r\n                    strokeColor={{\r\n                      \"0%\": \"#7bd163\",\r\n                      \"100%\": \"#19ade4\",\r\n                    }}\r\n                    className=\"measurementProgress\"\r\n                  />\r\n                </div>\r\n              ) : <></>\r\n          }\r\n          <div className=\"bottomContent\">\r\n            <div className=\"measureContent\">\r\n              {btnList.map((item, index) => (\r\n                // <li key={index}>\r\n                //   <>\r\n                //     <img src={data.img} alt=\"\" />\r\n                //     <p>{data.title}</p>\r\n                //   </>\r\n                // </li>\r\n                <div key={index} className=\"item\">\r\n                  <>\r\n                    <p className=\"pSt1\">{item.name}</p>\r\n                    <p className=\"pSt2\">{item.data}</p>\r\n                  </>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"buttonBox\">\r\n              {!saveType && (\r\n                <>\r\n                  <Button\r\n                    style={{ backgroundColor: \"#e1206d\" }}\r\n                    className=\"btn\"\r\n                    type=\"danger\"\r\n                    shape=\"round\"\r\n                    onClick={() => backConnectedPage()}\r\n                  >\r\n                    Measure Again\r\n                  </Button>\r\n                  <Button\r\n                    style={{ backgroundColor: \"#e1206d\" }}\r\n                    className=\"btn\"\r\n                    type=\"danger\"\r\n                    shape=\"round\"\r\n                    color=\"#e1206d\"\r\n                    onClick={() => saveData()}\r\n                  >\r\n                    Save\r\n                  </Button>\r\n                </>\r\n              )}\r\n            </div>\r\n            <div className=\"scrollHistory\">\r\n              <span className=\"his\" onClick={() => TempHisVisible()}>Hisory</span>\r\n              <img src={xia_hui} style={{ width: px(20) }} alt=\"\" onClick={() => TempHisVisible()} />\r\n            </div>\r\n          </div>\r\n          {\r\n            !temHistory ?\r\n              (\r\n                <div className=\"hisTable\">\r\n                  <div className=\"listTitleBox1\">\r\n                    <p className=\"listTitle\">Temperature History</p>\r\n                  </div>\r\n                  <div className=\"table\" onScrollCapture={onScrollCapture}>\r\n                    <Table\r\n                      rowKey={\"examId\"}\r\n                      columns={columns}\r\n                      dataSource={petTemperatureData}\r\n                      className=\"measuredTable\"\r\n                      pagination={false}\r\n                      scroll={{\r\n                        y: '80%'\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Button className=\"exportBtn\">\r\n                    <img src={exportHis} alt=\"\" style={{ width: '30px', marginRight: '10px' }} />\r\n                    Export History\r\n                  </Button>\r\n                </div>\r\n              ) : <></>\r\n          }\r\n        </div>\r\n      </Content>\r\n      {/*修改note弹窗 */}\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"20px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                setDisabled(false);\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              setDisabled(true);\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          >\r\n            Edit Note\r\n          </div>\r\n        }\r\n        open={visible}\r\n        onCancel={handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => onStart(event, uiData)}\r\n          >\r\n            <div ref={draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div className=\"noteModal\">\r\n          <div className=\"noteModalText\">\r\n            <p style={{ width: \"80px\" }}>Notes</p>\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"40\"\r\n              style={{ textIndent: \"10px\" }}\r\n              // value={petMessages.memo}\r\n              onChange={(val) => {\r\n                setNewMemo(val.target.value);\r\n              }}\r\n            ></textarea>\r\n          </div>\r\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\r\n            Save Changes\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(MeasuredData);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",["1207","1208","1209","1210","1211","1212","1213","1214","1215"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Image, Layout, Button } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\nimport Reading from './../../../assets/img/Reading.png'\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\nimport { px } from \"../../../utils/px\";\n\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport moment from \"moment\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  let imageMap = [\n    Standing_Dog,\n    Standing_Cat,\n    Sitting_Dog,\n    Sitting_Cat,\n    Laying_Dog,\n    Laying_Cat,\n  ];\n\n  const [type, setType] = useState(false); //是否显示轮播图\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\n  const [title, setTitle] = useState('Ready, place under foreleg')//准备测量的文字\n  const saveCallBack = useRef();\n  const callBack = () => {\n    setCarouselIndex(carouselIndex + 1);\n  };\n\n  //切换图片\n  const checkImage = () => {\n    switch (mellaMeasurePart) {\n      case \"腋温\":\n        return AxillaryPlacement;\n      case \"耳温\":\n        return EarPlacement;\n      case \"肛温\":\n        return RectalPlacement;\n      case \"\": return Reading\n    }\n\n  };\n  //点击进入轮播图\n  const clickIntoTip = () => {\n    setType(true);\n  };\n  //小圆点点击事件\n  const clickPoint = (index) => {\n    setCarouselIndex(index);\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (carouselIndex === 6) {\n      setCarouselIndex(0);\n    }\n  }, [carouselIndex]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (type && mellaConnectStatus === \"connected\") {\n      timer = setInterval(tick, 1500);\n    }\n    if (mellaConnectStatus !== \"connected\") {\n      setType(false);\n      setCarouselIndex(0);\n      clearInterval(timer);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [type, mellaConnectStatus]);\n\n  useEffect(() => {\n    switch (mellaMeasurePart) {\n      case '腋温': setTitle('Ready, place under foreleg'); break;\n      case '耳温': setTitle('Ready, place in ear'); break;\n      case '肛温': setTitle('Ready, place in anus'); break;\n      case '': setTitle('Reading Probe Information'); break;\n\n      default:\n        break;\n    }\n\n  }, [mellaMeasurePart])\n\n  return (\n    <>\n      <Content className={\"temperatureContentBox\"}>\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\n          <>\n            <div className=\"startBox\">\n              <span className=\"startTitle\">\n                Turn on your\n                <br />\n                Mella Thermometer\n                <br />\n                or Pair New Mella\n              </span>\n              <div style={{ display: 'flex', justifyContent: 'center', width: \"100%\" }}>\n                <img src={PressButton_Pro} className=\"PressButton_Pro\" />\n              </div>\n            </div>\n            <div className=\"tableBox\">\n              <div className=\"temperatureTitleBox\">\n                <p className=\"temperatureTitle\">Temperature History</p>\n              </div>\n              <HistoryTable tableColumnType='temperature' />\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"startBox\" style={{height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center'}}>\n              <p className=\"startTitle\">\n                {!type\n                  ? title\n                  : \"Place Under Foreleg Standing\"}\n              </p>\n              {!type ? (\n                <>\n                  <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <img src={checkImage()} className=\"checkImages\"></img>\n                  </div>\n\n                  {mellaMeasurePart === \"腋温\" ? (\n                    <div className=\"bottomTip1\">\n                      <div className=\"bottomTip1_1\">\n                        <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\n                          Need Help With Accurate Placement On Pet?\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ) : (\n                <>\n                  <div className=\"carouselBox\">\n                    {_.map(imageMap, (item, index) => {\n                      return (\n                        <img\n                          key={index}\n                          className=\"contentImgStyle\"\n                          src={item}\n                          style={{\n                            display: carouselIndex === index ? \"\" : \"none\",\n                          }}\n                        />\n                      );\n                    })}\n                  </div>\n                  <div className=\"dotBox\">\n                    <ul className=\"dotList\">\n                      {_.map(imageMap, (item, index) => {\n                        return (\n                          <li key={index}>\n                            <Button\n                              className=\"dotItem\"\n                              onClick={() => clickPoint(index)}\n                              style={{\n                                background:\n                                  carouselIndex === index\n                                    ? \"#0a0a0a\"\n                                    : \"#bdbaba\",\n                              }}\n                            >\n                              {index}\n                            </Button>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                  <Button\n                    style={{ backgroundColor: \"#e1206d\" }}\n                    className=\"btn\"\n                    type=\"danger\"\n                    shape=\"round\"\n                    onClick={() => setType(false)}\n                  >\n                    Return To Measuring Screen\n                  </Button>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </Content>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",["1216","1217","1218","1219","1220","1221"],"import React, { useState, useEffect } from 'react';\nimport { ConfigProvider, Table, Select, message } from 'antd';\n\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport { getPetByPetNameOrPatientId } from '../../api';\n\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\n\nimport './petTable.less';\n\n\nlet storage = window.localStorage;\nconst PetTable = ({ searchVisible, petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type, onScroll }) => {\n  let history = useHistory()\n  const [heardSearchText, setHeardSearchText] = useState('')\n  //搜索后展示的宠物列表\n  const [searchData, setSearchData] = useState([]);\n  const defaultColumns = [\n    {\n      title: 'Pet ID',\n      dataIndex: 'patientId',\n      key: 'patientId',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Pet Name',\n      dataIndex: 'petName',\n      key: 'petName',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Owner',\n      dataIndex: 'owner',\n      key: 'owner',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Breed',\n      dataIndex: 'breed',\n      key: 'breed',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n    {\n      title: 'Gender',\n      dataIndex: 'gender',\n      key: 'gender',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (`${text}` === 'NaN') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n  ];\n  const columns = [\n    {\n      title: 'Time',\n      dataIndex: 'insertedAt',\n      key: 'insertedAt',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => moment(parseInt(text) * 1000).format('YYYY-MM-DD hh:mm a'),\n\n    },\n    {\n      title: 'Pet ID',\n      dataIndex: 'patientId',\n      key: 'patientId',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Pet Name',\n      dataIndex: 'petName',\n      key: 'petName',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Owner',\n      dataIndex: 'owner',\n      key: 'owner',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Breed',\n      dataIndex: 'breed',\n      key: 'breed',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n    {\n      title: 'Gender',\n      dataIndex: 'gender',\n      key: 'gender',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (`${text}` === 'NaN') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n\n  ];\n  //搜索宠物\n  const _search = (value) => {\n    if (type === 'scheduled') {\n      let keyWord = value || heardSearchText\n      /**\n       * 使用indexof方法实现模糊查询\n       *     语法：stringObject.indexOf(searchvalue, fromindex)\n       *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n       *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n       *\n       * list         原数组\n       * keyWord      查询关键词\n       * searchData   查询的结果\n       *\n       * toLowerCase（）方法：将字符串统一转成小写\n       * toUpperCase（）方法：将字符串统一转成大写\n       *\n       */\n      let list = petListArr\n      let searchData = []\n      for (let i = 0; i < list.length; i++) {\n        let petName = list[i].petName.toLowerCase() || ''\n        let patientId = list[i].patientId.toLowerCase() || ''\n        let rfid = list[i].rfid || ''\n        if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${rfid}`.indexOf(keyWord) !== -1\n        ) {\n          searchData.push(list[i])\n        }\n      }\n      setSearchData(searchData)\n    } else {\n      //去除前后空格\n      let search = value.replace(/(^\\s*)|(\\s*$)/g, \"\");\n      let params = {\n        searchValue: search,\n      }\n      if (storage.lastOrganization) {\n        params.orgId = storage.lastOrganization\n      }\n      const isUnKnow = (val) => {\n        if (val) {\n          return val\n        } else {\n          return 'unknown'\n        }\n      }\n      getPetByPetNameOrPatientId(storage.userId, params)\n        .then((res) => {\n          if (res.msg === 'success') {\n            let newArr = res.success;\n            let data = [];\n\n            for (let i = 0; i < newArr.length; i++) {\n              let {\n                age,\n                url,\n                createTime,\n                patientId,\n                speciesId,\n                petName,\n                firstName,\n                birthday,\n                lastName,\n                breedName,\n                gender,\n                petId,\n                weight,\n                rfid,\n                l2rarmDistance,\n                neckCircumference,\n                upperTorsoCircumference,\n                lowerTorsoCircumference,\n                pethubId,\n                macId,\n                h2tLength,\n                torsoLength\n              } = newArr[i];\n              let owner = '';\n              patientId = isUnKnow(patientId);\n              petName = isUnKnow(petName);\n              breedName = isUnKnow(breedName);\n              age = isUnKnow(age);\n              weight = isUnKnow(weight);\n              if (!firstName) {\n                firstName = '';\n              }\n              if (!lastName) {\n                lastName = '';\n              }\n              if (lastName === '' && firstName === '') {\n                owner = 'unknown';\n              } else {\n                owner = `${lastName} ${firstName}`;\n              }\n              createTime = moment(createTime).format('X');\n              let petGender = '';\n              switch (`${gender}`) {\n                case '1': petGender = 'F'\n                  break;\n                case '0': petGender = \"M\"\n                  break;\n                default: petGender = 'unknown'\n                  break;\n              }\n              let petAge = 'unknown'\n              if (birthday) {\n                petAge = moment(new Date()).diff(moment(birthday), 'years')\n              }\n              let json = {\n                insertedAt: createTime,\n                patientId,\n                petName,\n                owner,\n                breed: breedName,\n                gender: petGender,\n                age: petAge,\n                petId,\n                id: i,\n                weight,\n                rfid,\n                url,\n                speciesId,\n                l2rarmDistance,\n                neckCircumference,\n                upperTorsoCircumference,\n                lowerTorsoCircumference,\n                h2tLength,\n                torsoLength,\n                pethubId,\n                macId,\n              }\n              data.push(json);\n            }\n            setSearchData(data);\n          } else {\n            message.warning('system error');\n          }\n        })\n        .catch((err) => {\n          message.warning('system error');\n        })\n    }\n\n  }\n  const noData = () => {\n    return (\n      <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\n        <p style={{ fontSize: px(22) }}> {type !== 'scheduled' ? `No Pets&` : `No Pets Scheduled&`}</p>  &nbsp;&nbsp;\n        <a style={{ fontSize: px(22) }} href=\"#\"\n          onClick={(e) => {\n            try {\n              if (type === 'scheduled') {\n                setMenuNum('AddScheduledPet');\n              } else {\n                // setMenuNum('AddPet');\n                history.push(\"/pet/doctorAddPet\");\n              }\n            } catch (error) {\n              console.log('错误信息', error);\n            }\n            e.preventDefault();\n          }}\n\n        >\n          {type !== 'scheduled' ? `Create a Pet` : `Schedule a Pet`}\n        </a>\n      </div>\n    )\n  }\n  const options = [\n    { key: 'time', value: 'Time' },\n    { key: 'petid', value: 'Pet ID' },\n    { key: 'owner', value: 'Owner' },\n    { key: 'breed', value: 'Breed' },\n    { key: 'petname', value: 'Pet Name' },\n    { key: 'gender', value: 'Gender' },\n  ]\n  const handleChange = (value, option) => {\n    let petList = [].concat(petListArr)\n    switch (option.key) {\n      case 'time':\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n        break;\n      case 'petid':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'petname':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    resetPetList(petList)\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.table .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      onScroll();\n    }\n  }\n  return (\n    <div className='petTable' >\n      {\n        searchVisible ?\n        <>\n            <div className=\"pet_table_heard\">\n              <div className=\"search\" style={{ height: px(32) }}>\n                <input\n                  type=\"text\"\n                  placeholder=\"&#xe61b;    search\"\n                  value={heardSearchText}\n                  onChange={(e) => {\n                    setHeardSearchText(e.target.value);\n                    _search(e.target.value);\n                  }\n                  }\n                />\n              </div>\n              <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\n                <div\n                  className=\"walkbtnBox\"\n                  style={{ height: px(28), width: px(80) }}\n                  onClick={_search}\n                >\n                  <div className=\"walkText\">Search</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"heard2 flex\" style={{ marginBottom: px(20) }}>\n              <div className=\"sort flex\" >\n                <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\n                <Select\n                  defaultValue={['Time']}\n                  onChange={handleChange}\n                  options={options}\n                  className=\"selectFilter\"\n                />\n              </div>\n              <div className=\"sort flex\" style={{ justifyContent: 'flex-end' }} >\n                <p style={{ fontSize: px(16), marginRight: px(10) }}>Vet:</p>\n                <Select\n                  defaultValue={['Time']}\n                  onChange={handleChange}\n                  options={options}\n                  className=\"selectFilter\"\n                />\n              </div>\n            </div>\n        </> :\n        <></>\n      }\n\n      <div className=\"table\" onScrollCapture={onScrollCapture}>\n        <ConfigProvider renderEmpty={noData}>\n          <Table\n            style={{\n              padding: 0,\n              margin: 0,\n              width: '95%',\n              border: '1px solid #979797'\n            }}\n            rowKey={data => data.id}\n            bordered\n            columns={searchVisible ? columns : defaultColumns}\n            dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\n            loading={loading}\n            pagination={false}\n            scroll={{\n              // y: px(480),\n              y: '80 %'\n            }}\n            onRow={(record) => {\n              return {\n                onClick: (event) => {\n                  setMenuNum('1')\n                  petDetailInfoFun(record)\n                }, // 点击行\n              };\n            }}\n            className=\"allPetTable\"\n          />\n        </ConfigProvider>\n      </div>\n    </div >\n  )\n}\n\nPetTable.propTypes = {\n  petListArr: PropTypes.array,\n  resetPetList: PropTypes.func,\n}\n//默认值\nPetTable.defaultProps = {\n  bodyHeight: 0,\n  petListArr: [],\n  test: () => { },\n  resetPetList: () => { },\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, }\n)(PetTable)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx",["1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio, message } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmTimeType\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\nimport overnight from \"../../../../assets/img/overnight.png\";\nimport rapid from \"../../../../assets/img/rapid.png\";\nimport addSwab from \"../../../../assets/images/addSwab.png\";\nimport test1 from \"../../../../assets/images/test1.png\";\nimport success from \"../../../../assets/images/success.png\";\n\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\n\nlet storage = window.localStorage;\n\nconst Result = ({ petMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\n    const [value, setValue] = useState(1);\n    const [visible, setVisible] = useState(false)\n\n    const cutTitle = () => {\n        switch (value) {\n            case 1:\n                return (<>{`${'Insert new swab and '}`}<br />{`${'collect sample'}`}</>);\n            case 2:\n                return (<>{`${'Put new swab sample'}`}<br />{`${'to sensor'}`} </>);\n            case 3:\n                return (<>{`${'Test complete!'}`} </>);\n            default:\n                break;\n        }\n    }\n\n\n    const cutImage = () => {\n        switch (value) {\n            case 1:\n                return <img src={addSwab} alt=\"\" style={{ width: px(287 / 420 * 514), height: px(287) }} />;\n            case 2:\n                return <img src={test1} alt=\"\" style={{ width: px(287 / 566 * 682), height: px(287) }} />;\n            case 3:\n                return <img src={success} alt=\"\" style={{ width: px(287), height: px(287) }} />;\n            default:\n                break;\n        }\n    }\n\n    const onClick = () => {\n\n        switch (value) {\n            case 1: setValue(value + 1); break;\n\n            case 2:\n                let { petId, petName, birthday, speciesId, userId, firstName, lastName, phone } = petMessage\n                let species = 0\n                switch (speciesId) {\n                    case 1:\n                    case 11001:\n                        species = 1; break;\n                    default:\n                        break;\n                }\n                let pet = {\n                    id: petId,\n                    species,\n                }\n                if (petName) {\n                    pet.name = petName;\n                }\n                if (birthday) {\n                    pet.dob = birthday;\n                }\n\n\n                let pet_owner = {\n                    id: userId || storage.userId,\n                }\n                if (firstName) {\n                    pet_owner.name = firstName\n                }\n                if (lastName) {\n                    pet_owner.family_name = lastName\n                }\n                if (phone) {\n                    pet_owner.phone = phone\n                }\n\n\n                let { qsmEarPart, qsmTimeType } = qsmMessage\n                let kind = qsmEarPart === 1 ? 1 : 0\n                let sample_area = qsmTimeType\n                let test = {\n                    kind,\n                    sample_area\n                }\n                RunMeasurement(pet, pet_owner, test)\n\n                break;\n            case 3: cutPageType('linkPage'); break;\n            default:\n                break;\n        }\n\n    }\n    const RunMeasurement = async (pet, pet_owner, test) => {\n        let { qsmPart } = qsmMessage\n        let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\n        let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\n        let user_id = storage.userId;\n        console.log(\"🚀 ~ file: index.jsx ~ line 115 ~ RunMeasurement ~ storage.userId\", storage.userId)\n        let practice_id = storage.lastOrganization;\n        const SDK = require(\"qsm-otter-sdk\");\n\n        let num = 0\n\n        async function runMeasurement() {\n            try {\n                console.log('入参：', { qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test, num });\n                setVisible(true)\n                const res = await SDK.runMeasurement(qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test)\n                // let res = { status: 200 }\n                setVisible(false)\n\n\n                console.log(\"🚀 ~ file: index.jsx ~ line 112 ~ RunMeasurement ~ res\", res)\n                if (res.status === 200) {\n                    message.success(res.data.message)\n                    // qsmPart.close()\n                    console.log('关闭弹窗并调到下一页');\n                    setValue(3)\n                } else {\n                    message.error(res.statusText)\n                }\n\n\n\n            } catch (error) {\n                if (`${error}`.indexOf(`Failed to execute 'open' on 'SerialPort': The port is already open.`) !== -1) {\n                    if (num < 3) {\n                        num++\n                        try {\n                            qsmPart.close()\n                        } catch (error) {\n\n                        }\n\n                        setTimeout(() => {\n                            runMeasurement()\n                        }, 2000);\n\n                    }\n                } else {\n                    setVisible(false)\n                }\n                console.error('error', error)\n            }\n        }\n        runMeasurement()\n\n\n    }\n    const btnText = () => {\n        switch (value) {\n            case 1:\n                return 'Next'\n            case 2:\n                return 'Run Measurement'\n            case 3:\n                return 'Run New Test'\n            default:\n                break;\n        }\n    }\n    return (\n        <div className=\"qsmResult\">\n            <div className=\"topBox\">\n                <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n                    {cutTitle()}\n                </p>\n            </div>\n            <div className=\"imageBox\">\n                {cutImage()}\n            </div>\n            <div className=\"bottomBox\">\n                <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{btnText()}</Button>\n            </div>\n            <MyModal visible={visible} />\n        </div>\n    );\n\n};\n\nexport default connect(\n    (state) => ({\n        petMessage: state.petReduce.petDetailInfo,\n        qsmMessage: state.qsmReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setQsmTimeType\n    }\n)(Result);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx",["1235","1236","1237","1238"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Progress } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\nlet timer = null\r\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\r\n  const [time, setTime] = useState(60)\r\n  const timeLengthTo2 = (value) => {\r\n    if (`${value}`.length === 1) {\r\n      return `0${value}`\r\n    }\r\n    return `${value}`\r\n\r\n  }\r\n  const onClick = () => {\r\n    timer && clearInterval(timer)\r\n    cutPageType('result');\r\n  }\r\n  useEffect(() => {\r\n    timer && clearInterval(timer)\r\n    timer = setInterval(() => {\r\n      setTime(v => {\r\n        if (v === 0) {\r\n          timer && clearInterval(timer)\r\n          onClick()\r\n          return v\r\n        }\r\n        return v - 1\r\n      })\r\n\r\n    }, 1000)\r\n    return () => timer && clearInterval(timer)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Results Processing\r\n        </p>\r\n      </div>\r\n      <div className=\"middleBox\" style={{ margin: px(-100) }}>\r\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\r\n          Please wait for\r\n          <br />\r\n          accurate results\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <Progress\r\n          type=\"circle\"\r\n          percent={time / 60 * 100}\r\n          format={() => <div style={{ fontSize: '32px' }}>{`00:00:${timeLengthTo2(time)}`}</div>}\r\n          width={270}\r\n          strokeWidth={12}\r\n          strokeColor={'#FFA132'}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40), fontSize: '20px' }} onClick={onClick}>{`skip timer & procees`}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(TimerPage);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx",["1239","1240","1241","1242","1243"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmEarPart\r\n} from \"../../../../store/actions\";\r\n\r\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\r\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\r\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\r\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\n\r\nconst SwabPetEar = ({ petMessage, hardwareMessage, cutPageType, setQsmEarPart, qsmMessage }) => {\r\n  let {\r\n    petSpeciesBreedId,\r\n  } = petMessage;\r\n  const [value, setValue] = useState(1);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const imagetypeEvent = () => {\r\n    if (value === 1) {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatRightEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      }\r\n    } else {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatLeftEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      }\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    //这里需要将qsm的耳朵记录下来\r\n    setQsmEarPart(value)\r\n    cutPageType('experimentalPage');\r\n    // if (value === 1) {\r\n    //   setValue(2);\r\n    // } else {\r\n    //   cutPageType('experimentalPage');\r\n    // }\r\n\r\n  }\r\n  useEffect(() => {\r\n    setValue(qsmMessage.qsmEarPart)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Swab Pet's Ear\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {imagetypeEvent()}\r\n      </div>\r\n      <div className=\"radioBox\">\r\n        <Radio.Group onChange={onChange} value={value}>\r\n          <Radio value={1}>Right Ear</Radio>\r\n          <Radio value={2}>Left Ear</Radio>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce\r\n\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmEarPart\r\n  }\r\n)(SwabPetEar);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx",["1244","1245","1246","1247","1248","1249","1250"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, message } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport PlugInOtter from \"../../../../assets/img/PlugInOtter.png\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage, cutPageType, qsmConnectStatus, isNext = false }) => {\r\n  const [nextType, setNextType] = useState(false);\r\n  const [serialNumber, setSerialNumber] = useState('')\r\n\r\n\r\n  const onClick = async () => {\r\n\r\n    await register()\r\n    await verify()\r\n    setNextType(true);\r\n  }\r\n  const register = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let userId = storage.userId, userName = storage.userName, email = storage.userEmail, orgId = storage.lastOrganization, orgName = storage.orgName\r\n\r\n    console.log('register入参：', { userId, userName, email, orgId, orgName });\r\n    const response = await SDK.registerUserAndPractice(\"EX1QrGQTwPAjkJ0p7EEG7A\", \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\", userId, userName, email, orgId, orgName)\r\n    console.log('register入参：', response, response.status)\r\n    let res = response\r\n    if (res.status === 200) {\r\n      message.success(res.data.message)\r\n    } else {\r\n      let zhenshu = parseInt(res.status / 100)\r\n      switch (zhenshu) {\r\n        case 2:\r\n          message.success(res.data.message || res.data.error)\r\n          break;\r\n        case 4: message.warn(res.data.message || res.data.error)\r\n          break;\r\n        case 5:\r\n          message.warn(res.data.message || res.data.error)\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const verify = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let user_id = storage.userId;\r\n    let practice_id = storage.lastOrganization;\r\n    let serial_number = serialNumber;\r\n    let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\r\n    let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\r\n\r\n    await SDK.verifyInstrument(API_KEY, ACCESS_TOKEN, user_id, practice_id, serial_number)\r\n      .then(res => {\r\n        console.log('verify', res)\r\n        if (res.status === 200) {\r\n          message.success(res.data.message)\r\n        } else {\r\n          let zhenshu = parseInt(res.status / 100)\r\n          switch (zhenshu) {\r\n            case 2:\r\n              message.success(res.data.message || res.data.error)\r\n              break;\r\n            case 4: message.warn(res.data.message || res.data.error)\r\n              break;\r\n            case 5:\r\n              message.warn(res.data.message || res.data.error)\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setNextType(false);\r\n    return (() => { })\r\n\r\n  }, [petMessage.petId])\r\n  useEffect(() => {\r\n\r\n    if (isNext) {\r\n      setNextType(true)\r\n    }\r\n  }, [])\r\n\r\n\r\n  const body = () => {\r\n    if (!nextType) {\r\n      return (\r\n        <>\r\n          <div className=\"middleBox\">\r\n            <Input placeholder=\"Please enter your serial number\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\r\n              value={serialNumber}\r\n              onChange={(val) => setSerialNumber(val.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"bottomBox\">\r\n            <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick} >Next</Button>\r\n          </div>\r\n        </>\r\n      )\r\n    } else {\r\n      if (qsmConnectStatus === 'disconnected') {\r\n        return (\r\n          <div className=\"imageBox\">\r\n            <img src={PlugInOtter} alt=\"\" style={{ height: px(360) }} />\r\n          </div>\r\n        )\r\n      } else {\r\n        cutPageType('swabPetEarPage')\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {!nextType ? 'Register OtterEQ' : 'Plug in OtterEQ'}\r\n        </p>\r\n      </div>\r\n      {\r\n        body()\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmConnectStatus: state.qsmReduce.qsmConnectStatus,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(LinkEquipment);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx",["1251","1252","1253","1254","1255","1256","1257","1258"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmTimeType\r\n} from \"../../../../store/actions\";\r\n\r\nimport swirl from \"../../../../assets/img/swirl.png\";\r\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\r\nimport label from \"../../../../assets/img/label.png\";\r\nimport Incubator from \"../../../../assets/img/Incubator.png\";\r\n\r\nimport overnight from \"../../../../assets/img/overnight.png\";\r\nimport rapid from \"../../../../assets/img/rapid.png\";\r\nimport dui from \"../../../../assets/img/dui1.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\nconst lists = [\r\n  {\r\n\r\n    title: 'Rapid Test Prep',\r\n    text: 'Mix sample swab in elution buffer for 60 seconds.',\r\n    img: rapid\r\n  },\r\n  {\r\n    title: 'Overnight test prep',\r\n    text: 'Swirl a fresh sterile swab on the surface of the culture medium.',\r\n    img: overnight\r\n  }\r\n]\r\n\r\nconst ExperimentalPage = ({ petMessage, hardwareMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\r\n  const [value, setValue] = useState(1);\r\n  // const [value, setValue] = useState(3);\r\n  const [type, setType] = useState(0)\r\n\r\n  const cutTitle = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\r\n      case 2:\r\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\r\n      case 3:\r\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\r\n      case 4:\r\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\r\n      case 5:\r\n        return (<>{`${'Select Test Type'}`} </>);\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  const itemList = () => {\r\n    let options = lists.map((item, index) => {\r\n      return (\r\n        <li key={index.toString()}>\r\n          <div className=\"liItem\" onClick={() => {\r\n            setType(index)\r\n            setQsmTimeType(index)\r\n          }}>\r\n            <div className=\"img\">\r\n              <img src={item.img} />\r\n            </div>\r\n            <div className=\"textbox\">\r\n              <h5 className=\"title\">{item.title}</h5>\r\n              <div className=\"text\">{item.text}</div>\r\n            </div>\r\n            <div className=\"select\">\r\n              {type === index ?\r\n                <img src={dui} alt=\"\" /> :\r\n                <div style={{ width: '30px' }} />\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        </li>\r\n      )\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const cutImage = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 2:\r\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 3:\r\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 4:\r\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 5:\r\n        return <div className=\"qsmSelectTime\">\r\n          {itemList()}\r\n        </div>\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (value !== 5) {\r\n      setValue(value + 1)\r\n    } else {\r\n      if (type === 0) {\r\n        cutPageType('timerPage');\r\n      } else {\r\n        cutPageType('result');\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setType(qsmMessage.qsmTimeType)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {cutTitle()}\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {cutImage()}\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmTimeType\r\n  }\r\n)(ExperimentalPage);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx",["1259","1260","1261","1262","1263","1264"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Input, Card, List } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport scale from \"../../../../assets/img/scale.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, setSelectHardwareType }) => {\n  let history = useHistory();\n  const data = [\n    {\n      title: 'Last 24 hrs',\n      number: '1'\n    },\n    {\n      title: 'Last 7 days',\n      number: '3'\n    },\n    {\n      title: 'Days to goal',\n      number: '33'\n    },\n    {\n      title: 'Ideal Weight',\n      number: '42'\n    },\n  ];\n  const [planType, setPlanType] = useState(false);\n\n  useEffect(() => {\n    console.log('electronStore.get(`${petMessage.petId}-planType`): ', electronStore.get(`${petMessage.petId}-planType`));\n    setPlanType(electronStore.get(`${petMessage.petId}-planType`) ? true : false);\n  }, [petMessage.petId]);\n\n\n\n  return (\n    <div className=\"contentBox\">\n      {\n        planType ?\n          (\n            <>\n              <div className=\"topBox annulusBox\">\n                <div className=\"excircle\">\n                  <div className=\"circleContentBox\">\n                    <img src={scale} alt=\"\" />\n                    <div className=\"floatBox\">\n                      <div className=\"weightTitle\">\n                        <p>70</p>\n                        <p>lbs</p>\n                      </div>\n                      <div className=\"identification\">\n                        <p>Current Weight</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"middleBox\">\n                <div className=\"bodyState\">\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Fat Percent: 88%</p>\n                  </div>\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Condition Score: 9</p>\n                  </div>\n                </div>\n                <p className=\"hintTitle\">23 lbs over ideal weight</p>\n              </div>\n              <div className=\"bottomBox\">\n                <List\n                  dataSource={data}\n                  renderItem={(item) => (\n                    <div className=\"listBox\">\n                      <List.Item>\n                        <div className=\"item\">\n                          <div className=\"top\">\n                            <p>{item.title}</p>\n                          </div>\n                          <div className=\"bottom\">\n                            <p>{item.number}</p>\n                          </div>\n                        </div>\n                      </List.Item>\n                    </div>\n                  )}\n                />\n              </div>\n            </>\n          )\n          :\n          (\n            <div className=\"planBox\">\n              <p className=\"title\">\n                {`${petMessage.petName}`} is not enrolled<br />in a feeding plan\n              </p>\n              <p className=\"recommendedTitle\">A Mabel smart bowl scale is recommended.</p>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  block\n                  onClick={() => {\n                    setSelectHardwareType('prescribePlan');\n                  }}\n                >\n                  Prescribe Feeding Plan\n                </Button>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx",["1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275"],"import React, { useEffect, useState, useRef } from \"react\";\n// import html2canvas from 'html2canvas';\nimport { Button, Input, Card, List, Image, } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport takePhto from \"../../../../assets/img/takePhto.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { px } from \"../../../../utils/px\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\nlet loadVidio = false\nlet timer = null\nconst LinkEquipment = ({ petMessage, }) => {\n  let history = useHistory();\n  const [ip, setIp] = useState('');\n  const [showIp, setShowIp] = useState('')\n  const [loading, setLoading] = useState(false)\n  const next = () => {\n    setLoading(true)\n    setIp(showIp)\n    loadVidio = false\n    timer && clearTimeout(timer)\n    timer = setTimeout(() => {\n      if (!loadVidio) {\n        console.log('视频加载失败，前往重新获取');\n        setLoading(false)\n      }\n    }, 5000);\n  }\n\n  const inputIp = () => {\n    return (\n      <div className=\"inputIp\">\n        <div className=\"title\">Please enter the IP<br />address</div>\n\n        <div className=\"middleBox\">\n          <Input placeholder=\"192.168.0.204\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\n            value={showIp}\n            onChange={(val) => setShowIp(val.target.value)}\n          />\n        </div>\n        <div className=\"bottomBox\">\n          <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={next} >Next</Button>\n        </div>\n      </div>\n    )\n  }\n  const takePhoto = async () => {\n\n    // // let res = await html2canvas(document.getElementById('aphoto'), { useCORS: true })\n    // // console.log(\"🚀 ~ file: index.jsx ~ line 65 ~ takePhoto ~ res\", res)\n    // console.log('电控');\n    // html2canvas(document.getElementById('aphoto'), {\n    //   allowTaint: false,\n    //   useCORS: true,\n    //   proxy: 'http://192.168.0.203:81'\n    // }).then(function (canvas) {\n    //   console.log(canvas);\n    //   // toImage\n    //   const dataImg = new Image()\n    //   dataImg.src = canvas.toDataURL('image/png')\n    //   const alink = document.createElement(\"a\");\n    //   alink.href = dataImg.src;\n    //   alink.download = \"testImg.jpg\";\n    //   alink.click();\n    // });\n\n\n  }\n  const urlErrModal = () => {\n    return (\n      <div className=\"urlErrModal\">\n        <div className=\"close\">\n\n        </div>\n\n      </div>\n    )\n  }\n\n  const vidio = () => {\n    return (\n      <div className=\"vidio\">\n        <div className=\"vidioFa\">\n          <div id=\"aphoto\">\n            <img\n              onError={(err) => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 59 ~ vidio ~ err\", err)\n                timer && clearTimeout(timer)\n                setLoading(false)\n              }}\n              onLoad={e => {\n                console.log('e', e);\n                setLoading(false)\n                loadVidio = true\n                timer && clearTimeout(timer)\n              }}\n\n              src={`http://${ip}:81`} />\n          </div>\n\n\n\n\n        </div>\n        <div\n          className=\"btn\"\n          onClick={takePhoto}\n        >\n          <img src={takePhto} alt=\"\" />\n        </div>\n\n        <MyModal\n          visible={loading}\n        // element={urlErrModal()}\n        />\n\n\n\n\n      </div>\n\n    )\n\n\n  }\n\n  // useEffect(() => {\n  //   setIp('')\n  // }, [])\n\n\n\n\n\n  return (\n    <div id=\"motionCameraBody\">\n      {ip ? vidio() : inputIp()}\n      {/* {inputIp()} */}\n      {/* {vidio()} */}\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx",["1276","1277","1278","1279","1280","1281","1282","1283","1284"],"import React, { useEffect, useState } from 'react'\nimport {\n  Dropdown,\n  Menu,\n  Select,\n  Tooltip,\n  Spin,\n  message\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport petIcon from './../../assets/img/petIcon.png'\nimport xia from './../../assets/img/xia.png'\nimport MyModal from './../../utils/myModal/MyModal'\nimport redjinggao from './../../assets/img/redjinggao.png'\nimport orgicn from './../../assets/img/orgicn.png'\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\n\nimport { px } from '../../utils/px';\nimport { changeThemeColor } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petSortTypeFun, petDetailInfoFun, setPetListArrFun, setMenuNum } from '../../store/actions';\nimport { useHistory } from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { useThrottleFn } from 'ahooks';\n\nimport './mainbody.less'\nimport { listAllPetInfo } from '../../api';\n\nlet storage = window.localStorage;\n\nconst { Option } = Select;\n\nconst PetsUI = ({\n  bodyHeight,\n  petSortTypeFun,\n  petSortType,\n  petDetailInfoFun,\n  petDetailInfo,\n  setPetListArrFun,\n  petListArr,\n  selectHardwareType,\n  rulerConnectStatus,\n  selectHardwareInfo,\n  receiveBroadcastHardwareInfo,\n  setMenuNum\n}) => {\n  const history = useHistory();\n  //定义宠物列表数组\n  const [petList, setPetList] = useState([])\n  //是否展示弹窗\n  const [showModal, setShowModal] = useState(false)\n  //选中的宠物的详细信息\n  const [selectPetDetail, setSelectPetDetail] = useState({})\n  //获取宠物列表加载动画\n  const [loading, setLoading] = useState(false)\n  const [orgArr, setOrgArr] = useState([])\n  const [workplaceJson, setWorkplaceJson] = useState({})\n  const [connectionKey, setConnectionKey] = useState(\"\")\n  const [selectOrgId, setSelectOrgId] = useState(-1)\n  const [selectRoleId, setSelectRoleId] = useState(\"\")\n  const [workplaceName, setWorkplaceName] = useState(\"\")\n  const [workplaceId, setWorkplaceId] = useState()\n  const [organizationName, setOrganizationName] = useState(\"\")\n  const [color, setColor] = useState('#e1206d');//颜色切换\n  const [pageSize, setPageSize] = useState(20); // 每页20条\n  const [total, setTotal] = useState(0);//宠物列表数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //获取组织列表\n  const getOrgList = () => {\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          setWorkplaceName(workplaceName)\n          setWorkplaceId(workplaceId)\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n\n          setOrganizationName(name)\n          setSelectOrgId(storage.lastOrganization)\n          storage.orgName = name\n\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n\n    setOrgArr(orgArr)\n    setWorkplaceJson(workplaceJson)\n    setConnectionKey(storage.connectionKey)\n    setSelectRoleId(storage.roleId)\n\n  }\n  //获取宠物列表数据\n  const _getExam = (currPage = 1) => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      pageSize: pageSize,\n      currPage: currPage,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    //TODO逻辑好像还有问题\n    listAllPetInfo(params)\n      .then(res => {\n        setLoading(false);\n        if (res.flag === true) {\n          setTotal(res.data.count);\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.data;\n          } else {\n            let oldArr = petList;\n            let arr = res.data.data;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetList(newArr);\n          setPetListArrFun(newArr);\n        } else if (res.msg === '用户没有关联任何宠物') {\n          message.warn('The user is not associated with any pets');\n          setPetList([]);\n          setPetListArrFun([]);\n        }\n      })\n      .catch(err => {\n        setLoading(false);\n        setPetList([]);\n        setPetListArrFun([]);\n      })\n  }\n  const dataSort = (data, key,) => {\n    if (!key) {\n      key = petSortType\n    }\n    let petList = [].concat(data)\n    switch (key) {\n\n      case 'Time':\n      case 'Recent':\n        petList.sort((a, b) => { return a.createTime > b.createTime ? -1 : 1 })\n        break;\n      case 'Pet ID':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'Owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'Breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'Pet Name':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'Gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    return petList\n  }\n  const menu = () => {\n    let menuList = [\n      // { value: 'Time' },\n      { value: 'Pet ID' },\n      // { value: 'Owner' },\n      // { value: 'Breed' },\n      { value: 'Pet Name' },\n      { value: 'Recent' },\n      // { value: 'Gender' },\n    ];\n    let options = menuList.map((item, index) => {\n      let itemstyle = {}, textColor = '#1a1a1a'\n      if (petSortType === item.value) {\n        itemstyle = { backgroundColor: '#e1206D' }\n        textColor = '#fff'\n      }\n      return (\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\n          <div style={{ color: textColor }}>{item.value}</div>\n        </Menu.Item>\n      )\n    })\n    return (\n      <Menu\n        onClick={({ key, }) => {\n          petSortTypeFun(key)\n          let petArr = dataSort(petList, key,)\n          setPetList(petArr)\n          setPetListArrFun(petArr)\n        }}\n      >\n        {options}\n\n      </Menu>\n    );\n  }\n  //宠物列表\n  const petListUI = () => {\n    let options = petList.map((item, index) => {\n      let itemBac = '', itemColor = '#141414'\n      if (item.petId === petDetailInfo.petId) {\n        itemBac = color\n        itemColor = '#fff'\n      }\n      return (\n        <li key={item.petId} >\n          <div className='petItem'\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\n            onClick={() => {\n              //当硬件是尺子且尺子还在测量的时候,要做出提示\n              setSelectPetDetail(item)\n              let { deviceType, mac } = selectHardwareInfo\n              if ((mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac) && selectHardwareType === 'tape' && rulerConnectStatus !== 'disconnected') {\n                setShowModal(true)\n              } else {\n                petDetailInfoFun(item)\n              }\n            }}\n          >\n            {`${item.patientId}, ${item.petName}`}\n          </div>\n        </li >\n      )\n    });\n    //加载图标\n    const antIcon = (\n      <LoadingOutlined\n        style={{\n          fontSize: 24,\n          color: color,\n        }}\n        spin\n      />\n    );\n\n    return (\n      <div className=\"petList\" onScrollCapture={onScrollCapture}>\n        <ul>\n          {options}\n        </ul>\n        <Spin spinning={loading} indicator={antIcon} />\n      </div>\n    )\n  }\n  //滚动监听\n  const { run: onScrollCapture } = useThrottleFn(() => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.petList ul`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (currPage === _.ceil(total / pageSize)) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      _getExam(currPage + 1);\n    }\n  }, { wait: 1000 });\n  //组织列表\n  const selectOrgUI = () => {\n    const selectOrgFn = (value, option) => {\n      setPetList([]);\n      setTotal(0);\n      setCurrPage(1);\n      setOrganizationName(value);\n      storage.roleId = option.roleid;\n      storage.lastOrganization = option.organizationid;\n      storage.connectionKey = option.connectionkey;\n      storage.orgName = option.value\n\n      try {\n        let key = parseInt(selectOrgId);\n        let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n        storage.lastWorkplaceId = lastWorkplaceId;\n      } catch (error) { }\n      _getExam()\n    }\n    let options = orgArr.map((item, index) => {\n      if (index === 1) {\n      }\n      return (\n        <Option\n          key={`${item.organizationId}`}\n          value={item.organizationName}\n          organizationid={item.organizationId}\n          roleid={item.roleId}\n          connectionkey={item.connectionKey}\n        >\n          {item.organizationName}\n        </Option>\n      )\n    })\n    return (\n      <Select\n        style={{ width: '70%', marginLeft: px(15) }}\n        value={organizationName}\n        onChange={selectOrgFn}\n        popupClassName=\"selectOrgUI\"\n        bordered={false}\n        suffixIcon={<img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10) }} />}\n      >\n        {options}\n      </Select>\n    )\n\n  }\n  //设置宠物列表数据\n  useEffect(() => {\n    setPetList(petListArr);\n    return (() => { });\n  }, [petListArr])\n  //获取组织列表\n  useEffect(() => {\n    getOrgList();\n    _getExam();\n    return (() => { });\n  }, []);\n  //修改颜色\n  useEffect(() => {\n    setColor(changeThemeColor(selectHardwareType));\n  }, [selectHardwareType]);\n\n  return (\n    <div className=\"PetUI11\" style={{ height: bodyHeight - px(100), }}>\n      <MyModal\n        visible={showModal}\n        element={\n          <div className='petUiModal'>\n            <img src={redjinggao} alt=\"\" width={'45px'} style={{ margin: `${px(25)}px 0` }} />\n            <div className='bodyText' style={{ marginTop: px(30) }}>Patient Switched – select dimension to measure</div>\n            <div className=\"btns\" style={{ marginTop: px(35) }}>\n              <div className=\"btn\" onClick={() => { setShowModal(false) }}>Cancel</div>\n              <div className=\"btn\" onClick={() => { setShowModal(false); petDetailInfoFun(selectPetDetail) }}>Confirm</div>\n            </div>\n          </div>\n        }\n      />\n      <div style={{ width: '100%', position: 'relative', height: bodyHeight - px(100), }}>\n        <div className=\"selectOrg\" style={{ width: '100%' }}>\n          <div className=\"title\" style={{ padding: `${px(10)}px 0px ${px(10)}px ${px(20)}px ` }}>\n            <img src={orgicn} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n            <div className=\"titleText\" >{`Organization`}</div>\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            {selectOrgUI()}\n            <Tooltip placement='bottom' title='Add an organization'>\n              <div\n                className=\"addImgBox\"\n                onClick={() => history.push(\"/menuOptions/NewOrg\")}\n\n              >\n                <img\n                  src={deivceAdd}\n                  alt=\"\"\n                  width={px(20)}\n                  style={{ marginLeft: px(12) }}\n                />\n              </div>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\n          <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n          <div className=\"titleText\" >Pets</div>\n        </div>\n        <div className=\"sort\" style={{ paddingLeft: px(15), display: 'flex' }}>\n          <Dropdown overlay={menu} trigger={['click']}>\n            <div className=\"sortBox\">\n              <div className=\"sortText\" >\n                {`Sort by: ${petSortType}`}\n              </div>\n              <img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10), cursor: 'pointer' }} />\n            </div>\n          </Dropdown>\n          <Tooltip placement='bottom' title='Add a Pet'>\n            <div\n              className=\"addImgBox\"\n              onClick={() =>\n                setMenuNum('AddPet')\n                // history.push(\"/pet/doctorAddPet\")\n              }\n            >\n              <img\n                src={deivceAdd}\n                alt=\"\"\n                width={px(20)}\n                style={{ marginLeft: px(12) }}\n              />\n            </div>\n          </Tooltip>\n\n        </div>\n        {petListUI()}\n        <div className=\"walkBtn\">\n          <div\n            className=\"walkbtnBox\"\n            // 根据主题变换颜色，现在都要改成#e1206d\n            style={{ height: px(40), marginTop: px(15), backgroundColor: '#e1206d' }}\n            onClick={() => {\n              let json = {\n                isWalkIn: true,\n                petId: null,\n                petName: null,\n                owner: null,\n                breed: null,\n              }\n              petDetailInfoFun(json)\n            }}\n          >\n            <div className=\"walkText\">Walk-In</div>\n          </div>\n        </div>\n      </div >\n    </div >\n  )\n}\n\n\nPetsUI.propTypes = {\n  bodyHeight: PropTypes.number\n}\n//默认值\nPetsUI.defaultProps = {\n  bodyHeight: 0\n}\nexport default connect(\n  state => ({\n    petSortType: state.petReduce.petSortType,\n    petDetailInfo: state.petReduce.petDetailInfo,\n    petListArr: state.petReduce.petListArr,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    rulerConnectStatus: state.hardwareReduce.rulerConnectStatus,\n    selectHardwareInfo: state.hardwareReduce.selectHardwareInfo,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n  }),\n  { petSortTypeFun, petDetailInfoFun, setPetListArrFun, setMenuNum }\n)(PetsUI)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx",["1285"],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n  setSelectHardwareType\r\n} from \"./../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n  setSelectHardwareType\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n          onClick={() => {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType('add');\r\n          }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25), }}\r\n\r\n\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => { },\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum, setSelectHardwareType }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\baseNotDetectedModal\\index.jsx",["1286","1287","1288"],{"ruleId":"1289","severity":1,"message":"1290","line":3,"column":10,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":24},{"ruleId":"1293","replacedBy":"1294"},{"ruleId":"1295","replacedBy":"1296"},{"ruleId":"1289","severity":1,"message":"1297","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1298","line":35,"column":8,"nodeType":"1291","messageId":"1292","endLine":35,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1299","line":4,"column":3,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1300","line":18,"column":8,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1301","line":29,"column":9,"nodeType":"1291","messageId":"1292","endLine":29,"endColumn":15},{"ruleId":"1302","severity":1,"message":"1303","line":99,"column":5,"nodeType":"1304","messageId":"1305","endLine":105,"endColumn":6},{"ruleId":"1306","severity":1,"message":"1307","line":112,"column":41,"nodeType":"1308","messageId":"1309","endLine":112,"endColumn":43},{"ruleId":"1306","severity":1,"message":"1307","line":150,"column":41,"nodeType":"1308","messageId":"1309","endLine":150,"endColumn":43},{"ruleId":"1289","severity":1,"message":"1310","line":257,"column":11,"nodeType":"1291","messageId":"1292","endLine":257,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1311","line":257,"column":49,"nodeType":"1291","messageId":"1292","endLine":257,"endColumn":55},{"ruleId":"1312","severity":1,"message":"1313","line":507,"column":15,"nodeType":"1314","endLine":507,"endColumn":63},{"ruleId":"1312","severity":1,"message":"1313","line":537,"column":15,"nodeType":"1314","endLine":537,"endColumn":63},{"ruleId":"1302","severity":1,"message":"1303","line":558,"column":5,"nodeType":"1304","messageId":"1305","endLine":561,"endColumn":6},{"ruleId":"1302","severity":1,"message":"1303","line":562,"column":5,"nodeType":"1304","messageId":"1305","endLine":565,"endColumn":6},{"ruleId":"1289","severity":1,"message":"1315","line":679,"column":11,"nodeType":"1291","messageId":"1292","endLine":679,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1316","line":682,"column":11,"nodeType":"1291","messageId":"1292","endLine":682,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1310","line":805,"column":29,"nodeType":"1291","messageId":"1292","endLine":805,"endColumn":39},{"ruleId":"1289","severity":1,"message":"1317","line":805,"column":79,"nodeType":"1291","messageId":"1292","endLine":805,"endColumn":84},{"ruleId":"1289","severity":1,"message":"1318","line":805,"column":117,"nodeType":"1291","messageId":"1292","endLine":805,"endColumn":139},{"ruleId":"1289","severity":1,"message":"1319","line":20,"column":10,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1320","line":27,"column":7,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1321","line":353,"column":11,"nodeType":"1291","messageId":"1292","endLine":353,"endColumn":17},{"ruleId":"1312","severity":1,"message":"1313","line":427,"column":13,"nodeType":"1314","endLine":431,"endColumn":56},{"ruleId":"1289","severity":1,"message":"1322","line":461,"column":19,"nodeType":"1291","messageId":"1292","endLine":461,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1323","line":462,"column":9,"nodeType":"1291","messageId":"1292","endLine":462,"endColumn":13},{"ruleId":"1324","severity":1,"message":"1325","line":605,"column":15,"nodeType":"1314","endLine":605,"endColumn":50},{"ruleId":"1302","severity":1,"message":"1303","line":77,"column":11,"nodeType":"1304","messageId":"1305","endLine":98,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1326","line":30,"column":9,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1327","line":4,"column":3,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1328","line":6,"column":3,"nodeType":"1291","messageId":"1292","endLine":6,"endColumn":7},{"ruleId":"1289","severity":1,"message":"1329","line":390,"column":21,"nodeType":"1291","messageId":"1292","endLine":390,"endColumn":27},{"ruleId":"1324","severity":1,"message":"1325","line":533,"column":17,"nodeType":"1314","endLine":533,"endColumn":54},{"ruleId":"1324","severity":1,"message":"1325","line":585,"column":17,"nodeType":"1314","endLine":585,"endColumn":60},{"ruleId":"1289","severity":1,"message":"1330","line":15,"column":8,"nodeType":"1291","messageId":"1292","endLine":15,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1331","line":23,"column":10,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":27},{"ruleId":"1302","severity":1,"message":"1303","line":70,"column":13,"nodeType":"1304","messageId":"1305","endLine":99,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1332","line":299,"column":45,"nodeType":"1291","messageId":"1292","endLine":299,"endColumn":59},{"ruleId":"1289","severity":1,"message":"1333","line":299,"column":61,"nodeType":"1291","messageId":"1292","endLine":299,"endColumn":75},{"ruleId":"1289","severity":1,"message":"1327","line":2,"column":29,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":34},{"ruleId":"1289","severity":1,"message":"1328","line":2,"column":60,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":64},{"ruleId":"1289","severity":1,"message":"1300","line":4,"column":8,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1334","line":6,"column":8,"nodeType":"1291","messageId":"1292","endLine":6,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1335","line":7,"column":8,"nodeType":"1291","messageId":"1292","endLine":7,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1336","line":8,"column":14,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1337","line":10,"column":8,"nodeType":"1291","messageId":"1292","endLine":10,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1338","line":15,"column":8,"nodeType":"1291","messageId":"1292","endLine":15,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1339","line":20,"column":3,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1340","line":21,"column":3,"nodeType":"1291","messageId":"1292","endLine":21,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1341","line":22,"column":3,"nodeType":"1291","messageId":"1292","endLine":22,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1301","line":29,"column":9,"nodeType":"1291","messageId":"1292","endLine":29,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1342","line":96,"column":9,"nodeType":"1291","messageId":"1292","endLine":96,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1343","line":331,"column":20,"nodeType":"1291","messageId":"1292","endLine":331,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1300","line":11,"column":8,"nodeType":"1291","messageId":"1292","endLine":11,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1301","line":22,"column":9,"nodeType":"1291","messageId":"1292","endLine":22,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1342","line":66,"column":9,"nodeType":"1291","messageId":"1292","endLine":66,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1344","line":338,"column":9,"nodeType":"1291","messageId":"1292","endLine":338,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1345","line":359,"column":7,"nodeType":"1291","messageId":"1292","endLine":359,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1346","line":16,"column":8,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1301","line":27,"column":9,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1347","line":43,"column":11,"nodeType":"1291","messageId":"1292","endLine":43,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1348","line":43,"column":19,"nodeType":"1291","messageId":"1292","endLine":43,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1342","line":58,"column":9,"nodeType":"1291","messageId":"1292","endLine":58,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1315","line":163,"column":43,"nodeType":"1291","messageId":"1292","endLine":163,"endColumn":52},{"ruleId":"1289","severity":1,"message":"1349","line":163,"column":54,"nodeType":"1291","messageId":"1292","endLine":163,"endColumn":59},{"ruleId":"1289","severity":1,"message":"1350","line":8,"column":10,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1351","line":50,"column":7,"nodeType":"1291","messageId":"1292","endLine":50,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1352","line":51,"column":7,"nodeType":"1291","messageId":"1292","endLine":51,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1353","line":54,"column":10,"nodeType":"1291","messageId":"1292","endLine":54,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1354","line":54,"column":20,"nodeType":"1291","messageId":"1292","endLine":54,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1355","line":121,"column":9,"nodeType":"1291","messageId":"1292","endLine":121,"endColumn":18},{"ruleId":"1356","severity":1,"message":"1357","line":291,"column":59,"nodeType":"1358","messageId":"1359","endLine":291,"endColumn":60},{"ruleId":"1289","severity":1,"message":"1360","line":9,"column":3,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1361","line":34,"column":10,"nodeType":"1291","messageId":"1292","endLine":34,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1362","line":36,"column":10,"nodeType":"1291","messageId":"1292","endLine":36,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1363","line":38,"column":10,"nodeType":"1291","messageId":"1292","endLine":38,"endColumn":18},{"ruleId":"1364","severity":1,"message":"1365","line":92,"column":6,"nodeType":"1366","endLine":92,"endColumn":8,"suggestions":"1367"},{"ruleId":"1289","severity":1,"message":"1368","line":2,"column":17,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1328","line":2,"column":60,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":64},{"ruleId":"1289","severity":1,"message":"1369","line":14,"column":8,"nodeType":"1291","messageId":"1292","endLine":14,"endColumn":11},{"ruleId":"1289","severity":1,"message":"1370","line":105,"column":29,"nodeType":"1291","messageId":"1292","endLine":105,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1371","line":105,"column":38,"nodeType":"1291","messageId":"1292","endLine":105,"endColumn":46},{"ruleId":"1289","severity":1,"message":"1372","line":105,"column":48,"nodeType":"1291","messageId":"1292","endLine":105,"endColumn":57},{"ruleId":"1289","severity":1,"message":"1373","line":232,"column":103,"nodeType":"1291","messageId":"1292","endLine":232,"endColumn":112},{"ruleId":"1289","severity":1,"message":"1310","line":392,"column":11,"nodeType":"1291","messageId":"1292","endLine":392,"endColumn":21},{"ruleId":"1312","severity":1,"message":"1313","line":651,"column":15,"nodeType":"1314","endLine":651,"endColumn":63},{"ruleId":"1289","severity":1,"message":"1374","line":668,"column":11,"nodeType":"1291","messageId":"1292","endLine":668,"endColumn":20},{"ruleId":"1312","severity":1,"message":"1313","line":687,"column":15,"nodeType":"1314","endLine":687,"endColumn":63},{"ruleId":"1302","severity":1,"message":"1303","line":724,"column":5,"nodeType":"1304","messageId":"1305","endLine":727,"endColumn":6},{"ruleId":"1302","severity":1,"message":"1303","line":728,"column":5,"nodeType":"1304","messageId":"1305","endLine":731,"endColumn":6},{"ruleId":"1289","severity":1,"message":"1375","line":833,"column":51,"nodeType":"1291","messageId":"1292","endLine":833,"endColumn":68},{"ruleId":"1289","severity":1,"message":"1317","line":833,"column":70,"nodeType":"1291","messageId":"1292","endLine":833,"endColumn":75},{"ruleId":"1289","severity":1,"message":"1374","line":833,"column":108,"nodeType":"1291","messageId":"1292","endLine":833,"endColumn":117},{"ruleId":"1289","severity":1,"message":"1368","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1376","line":2,"column":25,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1328","line":2,"column":41,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":45},{"ruleId":"1289","severity":1,"message":"1377","line":3,"column":10,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":30},{"ruleId":"1289","severity":1,"message":"1378","line":18,"column":47,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":68},{"ruleId":"1289","severity":1,"message":"1379","line":74,"column":61,"nodeType":"1291","messageId":"1292","endLine":74,"endColumn":64},{"ruleId":"1289","severity":1,"message":"1380","line":74,"column":66,"nodeType":"1291","messageId":"1292","endLine":74,"endColumn":75},{"ruleId":"1289","severity":1,"message":"1381","line":216,"column":56,"nodeType":"1291","messageId":"1292","endLine":216,"endColumn":63},{"ruleId":"1289","severity":1,"message":"1382","line":217,"column":11,"nodeType":"1291","messageId":"1292","endLine":217,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1383","line":19,"column":5,"nodeType":"1291","messageId":"1292","endLine":19,"endColumn":10},{"ruleId":"1302","severity":1,"message":"1303","line":165,"column":9,"nodeType":"1304","messageId":"1305","endLine":183,"endColumn":10},{"ruleId":"1302","severity":1,"message":"1303","line":81,"column":13,"nodeType":"1304","messageId":"1305","endLine":110,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1332","line":286,"column":45,"nodeType":"1291","messageId":"1292","endLine":286,"endColumn":59},{"ruleId":"1289","severity":1,"message":"1333","line":286,"column":61,"nodeType":"1291","messageId":"1292","endLine":286,"endColumn":75},{"ruleId":"1289","severity":1,"message":"1301","line":22,"column":9,"nodeType":"1291","messageId":"1292","endLine":22,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1347","line":45,"column":11,"nodeType":"1291","messageId":"1292","endLine":45,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1348","line":45,"column":19,"nodeType":"1291","messageId":"1292","endLine":45,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1342","line":61,"column":9,"nodeType":"1291","messageId":"1292","endLine":61,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1372","line":144,"column":18,"nodeType":"1291","messageId":"1292","endLine":144,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1371","line":144,"column":29,"nodeType":"1291","messageId":"1292","endLine":144,"endColumn":37},{"ruleId":"1312","severity":1,"message":"1313","line":544,"column":19,"nodeType":"1314","endLine":551,"endColumn":61},{"ruleId":"1324","severity":1,"message":"1325","line":559,"column":19,"nodeType":"1314","endLine":567,"endColumn":30},{"ruleId":"1289","severity":1,"message":"1384","line":2,"column":8,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1385","line":3,"column":8,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1386","line":4,"column":8,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1387","line":5,"column":8,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1388","line":74,"column":17,"nodeType":"1291","messageId":"1292","endLine":74,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1389","line":74,"column":29,"nodeType":"1291","messageId":"1292","endLine":74,"endColumn":37},{"ruleId":"1289","severity":1,"message":"1390","line":74,"column":39,"nodeType":"1291","messageId":"1292","endLine":74,"endColumn":45},{"ruleId":"1289","severity":1,"message":"1301","line":23,"column":9,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1347","line":52,"column":11,"nodeType":"1291","messageId":"1292","endLine":52,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1348","line":52,"column":19,"nodeType":"1291","messageId":"1292","endLine":52,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1342","line":149,"column":9,"nodeType":"1291","messageId":"1292","endLine":149,"endColumn":22},{"ruleId":"1324","severity":1,"message":"1325","line":520,"column":17,"nodeType":"1314","endLine":520,"endColumn":54},{"ruleId":"1324","severity":1,"message":"1325","line":573,"column":17,"nodeType":"1314","endLine":573,"endColumn":60},{"ruleId":"1289","severity":1,"message":"1330","line":10,"column":8,"nodeType":"1291","messageId":"1292","endLine":10,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1391","line":23,"column":10,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1392","line":23,"column":21,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":37},{"ruleId":"1289","severity":1,"message":"1393","line":30,"column":7,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":14},{"ruleId":"1312","severity":1,"message":"1313","line":218,"column":13,"nodeType":"1314","endLine":222,"endColumn":56},{"ruleId":"1289","severity":1,"message":"1343","line":254,"column":21,"nodeType":"1291","messageId":"1292","endLine":254,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1329","line":254,"column":31,"nodeType":"1291","messageId":"1292","endLine":254,"endColumn":37},{"ruleId":"1324","severity":1,"message":"1325","line":415,"column":37,"nodeType":"1314","endLine":415,"endColumn":72},{"ruleId":"1289","severity":1,"message":"1394","line":1,"column":24,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1395","line":5,"column":16,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1396","line":5,"column":30,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":40},{"ruleId":"1289","severity":1,"message":"1397","line":50,"column":69,"nodeType":"1291","messageId":"1292","endLine":50,"endColumn":79},{"ruleId":"1302","severity":1,"message":"1303","line":153,"column":9,"nodeType":"1304","messageId":"1305","endLine":163,"endColumn":10},{"ruleId":"1302","severity":1,"message":"1303","line":177,"column":25,"nodeType":"1304","messageId":"1305","endLine":187,"endColumn":26},{"ruleId":"1302","severity":1,"message":"1303","line":192,"column":21,"nodeType":"1304","messageId":"1305","endLine":216,"endColumn":22},{"ruleId":"1398","severity":1,"message":"1399","line":211,"column":25,"nodeType":"1400","messageId":"1401","endLine":211,"endColumn":32},{"ruleId":"1398","severity":1,"message":"1399","line":213,"column":25,"nodeType":"1400","messageId":"1401","endLine":215,"endColumn":69},{"ruleId":"1289","severity":1,"message":"1402","line":248,"column":24,"nodeType":"1291","messageId":"1292","endLine":248,"endColumn":32},{"ruleId":"1289","severity":1,"message":"1403","line":248,"column":34,"nodeType":"1291","messageId":"1292","endLine":248,"endColumn":41},{"ruleId":"1289","severity":1,"message":"1404","line":248,"column":43,"nodeType":"1291","messageId":"1292","endLine":248,"endColumn":58},{"ruleId":"1289","severity":1,"message":"1379","line":249,"column":13,"nodeType":"1291","messageId":"1292","endLine":249,"endColumn":16},{"ruleId":"1312","severity":1,"message":"1313","line":373,"column":59,"nodeType":"1314","endLine":373,"endColumn":79},{"ruleId":"1312","severity":1,"message":"1313","line":375,"column":59,"nodeType":"1314","endLine":375,"endColumn":77},{"ruleId":"1289","severity":1,"message":"1405","line":2,"column":26,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":32},{"ruleId":"1289","severity":1,"message":"1406","line":73,"column":5,"nodeType":"1291","messageId":"1292","endLine":73,"endColumn":14},{"ruleId":"1302","severity":1,"message":"1303","line":496,"column":9,"nodeType":"1304","messageId":"1305","endLine":503,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1407","line":534,"column":22,"nodeType":"1291","messageId":"1292","endLine":534,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1408","line":534,"column":28,"nodeType":"1291","messageId":"1292","endLine":534,"endColumn":40},{"ruleId":"1289","severity":1,"message":"1409","line":688,"column":15,"nodeType":"1291","messageId":"1292","endLine":688,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1410","line":732,"column":17,"nodeType":"1291","messageId":"1292","endLine":732,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1412","line":796,"column":29,"nodeType":"1358","messageId":"1413","endLine":796,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1414","line":886,"column":13,"nodeType":"1291","messageId":"1292","endLine":886,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1415","line":889,"column":15,"nodeType":"1291","messageId":"1292","endLine":889,"endColumn":30},{"ruleId":"1289","severity":1,"message":"1416","line":891,"column":15,"nodeType":"1291","messageId":"1292","endLine":891,"endColumn":30},{"ruleId":"1289","severity":1,"message":"1417","line":893,"column":15,"nodeType":"1291","messageId":"1292","endLine":893,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1418","line":895,"column":15,"nodeType":"1291","messageId":"1292","endLine":895,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1419","line":900,"column":11,"nodeType":"1291","messageId":"1292","endLine":900,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1420","line":920,"column":15,"nodeType":"1291","messageId":"1292","endLine":920,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1410","line":947,"column":17,"nodeType":"1291","messageId":"1292","endLine":947,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1421","line":1068,"column":11,"nodeType":"1291","messageId":"1292","endLine":1068,"endColumn":22},{"ruleId":"1398","severity":1,"message":"1422","line":1287,"column":13,"nodeType":"1400","messageId":"1423","endLine":1288,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1424","line":2,"column":27,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1425","line":3,"column":10,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1426","line":8,"column":14,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1368","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1427","line":2,"column":16,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1405","line":2,"column":25,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1327","line":2,"column":33,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":38},{"ruleId":"1289","severity":1,"message":"1377","line":3,"column":10,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":30},{"ruleId":"1289","severity":1,"message":"1428","line":36,"column":10,"nodeType":"1291","messageId":"1292","endLine":36,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1429","line":67,"column":10,"nodeType":"1291","messageId":"1292","endLine":67,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1430","line":67,"column":24,"nodeType":"1291","messageId":"1292","endLine":67,"endColumn":38},{"ruleId":"1289","severity":1,"message":"1431","line":95,"column":10,"nodeType":"1291","messageId":"1292","endLine":95,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1432","line":95,"column":21,"nodeType":"1291","messageId":"1292","endLine":95,"endColumn":33},{"ruleId":"1289","severity":1,"message":"1433","line":128,"column":10,"nodeType":"1291","messageId":"1292","endLine":128,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1434","line":210,"column":13,"nodeType":"1291","messageId":"1292","endLine":210,"endColumn":20},{"ruleId":"1312","severity":1,"message":"1313","line":784,"column":17,"nodeType":"1314","endLine":784,"endColumn":62},{"ruleId":"1312","severity":1,"message":"1313","line":789,"column":17,"nodeType":"1314","endLine":789,"endColumn":65},{"ruleId":"1324","severity":1,"message":"1325","line":844,"column":15,"nodeType":"1314","endLine":850,"endColumn":16},{"ruleId":"1324","severity":1,"message":"1325","line":853,"column":15,"nodeType":"1314","endLine":859,"endColumn":16},{"ruleId":"1312","severity":1,"message":"1313","line":940,"column":17,"nodeType":"1314","endLine":940,"endColumn":62},{"ruleId":"1312","severity":1,"message":"1313","line":944,"column":15,"nodeType":"1314","endLine":944,"endColumn":64},{"ruleId":"1324","severity":1,"message":"1325","line":1061,"column":13,"nodeType":"1314","endLine":1065,"endColumn":14},{"ruleId":"1324","severity":1,"message":"1325","line":1142,"column":15,"nodeType":"1314","endLine":1150,"endColumn":16},{"ruleId":"1324","severity":1,"message":"1325","line":1165,"column":13,"nodeType":"1314","endLine":1165,"endColumn":76},{"ruleId":"1324","severity":1,"message":"1325","line":1236,"column":15,"nodeType":"1314","endLine":1244,"endColumn":16},{"ruleId":"1324","severity":1,"message":"1325","line":1268,"column":15,"nodeType":"1314","endLine":1272,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1435","line":1378,"column":9,"nodeType":"1291","messageId":"1292","endLine":1378,"endColumn":16},{"ruleId":"1364","severity":1,"message":"1436","line":1406,"column":6,"nodeType":"1366","endLine":1406,"endColumn":8,"suggestions":"1437"},{"ruleId":"1364","severity":1,"message":"1438","line":1410,"column":6,"nodeType":"1366","endLine":1410,"endColumn":32,"suggestions":"1439"},{"ruleId":"1312","severity":1,"message":"1313","line":1476,"column":15,"nodeType":"1314","endLine":1476,"endColumn":59},{"ruleId":"1312","severity":1,"message":"1313","line":1661,"column":19,"nodeType":"1314","endLine":1661,"endColumn":54},{"ruleId":"1312","severity":1,"message":"1313","line":1663,"column":19,"nodeType":"1314","endLine":1663,"endColumn":53},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1442","line":15,"column":7,"nodeType":"1291","messageId":"1292","endLine":15,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1443","line":16,"column":7,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1444","line":18,"column":5,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1445","line":54,"column":5,"nodeType":"1291","messageId":"1292","endLine":54,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1446","line":73,"column":5,"nodeType":"1291","messageId":"1292","endLine":73,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1424","line":2,"column":27,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1426","line":7,"column":14,"nodeType":"1291","messageId":"1292","endLine":7,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1447","line":10,"column":10,"nodeType":"1291","messageId":"1292","endLine":10,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1448","line":20,"column":10,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1449","line":51,"column":10,"nodeType":"1291","messageId":"1292","endLine":51,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1450","line":61,"column":10,"nodeType":"1291","messageId":"1292","endLine":61,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1451","line":71,"column":10,"nodeType":"1291","messageId":"1292","endLine":71,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1452","line":81,"column":10,"nodeType":"1291","messageId":"1292","endLine":81,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1453","line":91,"column":10,"nodeType":"1291","messageId":"1292","endLine":91,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1454","line":101,"column":10,"nodeType":"1291","messageId":"1292","endLine":101,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1455","line":5,"column":8,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":18},{"ruleId":"1364","severity":1,"message":"1456","line":283,"column":6,"nodeType":"1366","endLine":283,"endColumn":8,"suggestions":"1457"},{"ruleId":"1364","severity":1,"message":"1458","line":324,"column":6,"nodeType":"1366","endLine":324,"endColumn":36,"suggestions":"1459"},{"ruleId":"1289","severity":1,"message":"1460","line":16,"column":5,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":12},{"ruleId":"1364","severity":1,"message":"1461","line":54,"column":6,"nodeType":"1366","endLine":54,"endColumn":41,"suggestions":"1462"},{"ruleId":"1289","severity":1,"message":"1463","line":30,"column":10,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":18},{"ruleId":"1364","severity":1,"message":"1464","line":194,"column":6,"nodeType":"1366","endLine":194,"endColumn":23,"suggestions":"1465"},{"ruleId":"1364","severity":1,"message":"1466","line":85,"column":6,"nodeType":"1366","endLine":85,"endColumn":8,"suggestions":"1467"},{"ruleId":"1289","severity":1,"message":"1468","line":13,"column":10,"nodeType":"1291","messageId":"1292","endLine":13,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1469","line":13,"column":14,"nodeType":"1291","messageId":"1292","endLine":13,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1470","severity":1,"message":"1471","line":1,"column":1,"nodeType":"1472","endLine":256,"endColumn":3},{"ruleId":"1289","severity":1,"message":"1473","line":1,"column":28,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1474","line":19,"column":18,"nodeType":"1291","messageId":"1292","endLine":19,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1476","line":26,"column":11,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1474","line":26,"column":20,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1352","line":27,"column":7,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1473","line":1,"column":28,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1474","line":19,"column":18,"nodeType":"1291","messageId":"1292","endLine":19,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1468","line":20,"column":10,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1477","line":27,"column":29,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":45},{"ruleId":"1289","severity":1,"message":"1478","line":28,"column":10,"nodeType":"1291","messageId":"1292","endLine":28,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1479","line":28,"column":19,"nodeType":"1291","messageId":"1292","endLine":28,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1474","line":30,"column":18,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1480","line":34,"column":10,"nodeType":"1291","messageId":"1292","endLine":34,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1481","line":126,"column":9,"nodeType":"1291","messageId":"1292","endLine":126,"endColumn":23},{"ruleId":"1364","severity":1,"message":"1482","line":145,"column":6,"nodeType":"1366","endLine":145,"endColumn":8,"suggestions":"1483"},{"ruleId":"1364","severity":1,"message":"1484","line":167,"column":6,"nodeType":"1366","endLine":167,"endColumn":8,"suggestions":"1485"},{"ruleId":"1289","severity":1,"message":"1486","line":23,"column":10,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1468","line":26,"column":10,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1487","line":29,"column":26,"nodeType":"1291","messageId":"1292","endLine":29,"endColumn":32},{"ruleId":"1289","severity":1,"message":"1488","line":29,"column":34,"nodeType":"1291","messageId":"1292","endLine":29,"endColumn":39},{"ruleId":"1364","severity":1,"message":"1489","line":116,"column":6,"nodeType":"1366","endLine":116,"endColumn":8,"suggestions":"1490"},{"ruleId":"1312","severity":1,"message":"1313","line":168,"column":19,"nodeType":"1314","endLine":168,"endColumn":47},{"ruleId":"1289","severity":1,"message":"1491","line":12,"column":8,"nodeType":"1291","messageId":"1292","endLine":12,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1337","line":15,"column":8,"nodeType":"1291","messageId":"1292","endLine":15,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1492","line":17,"column":8,"nodeType":"1291","messageId":"1292","endLine":17,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1493","line":39,"column":12,"nodeType":"1291","messageId":"1292","endLine":39,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1494","line":40,"column":12,"nodeType":"1291","messageId":"1292","endLine":40,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1495","line":40,"column":20,"nodeType":"1291","messageId":"1292","endLine":40,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1496","line":23,"column":20,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1497","line":25,"column":33,"nodeType":"1291","messageId":"1292","endLine":25,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1498","line":27,"column":10,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1499","line":27,"column":22,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":35},{"ruleId":"1411","severity":1,"message":"1500","line":170,"column":48,"nodeType":"1358","messageId":"1413","endLine":170,"endColumn":50},{"ruleId":"1364","severity":1,"message":"1501","line":286,"column":6,"nodeType":"1366","endLine":286,"endColumn":8,"suggestions":"1502"},{"ruleId":"1289","severity":1,"message":"1299","line":5,"column":3,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1328","line":6,"column":3,"nodeType":"1291","messageId":"1292","endLine":6,"endColumn":7},{"ruleId":"1289","severity":1,"message":"1360","line":9,"column":3,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1376","line":13,"column":3,"nodeType":"1291","messageId":"1292","endLine":13,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1503","line":18,"column":8,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1504","line":84,"column":17,"nodeType":"1291","messageId":"1292","endLine":84,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1505","line":95,"column":10,"nodeType":"1291","messageId":"1292","endLine":95,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1506","line":99,"column":10,"nodeType":"1291","messageId":"1292","endLine":99,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1507","line":102,"column":18,"nodeType":"1291","messageId":"1292","endLine":102,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1508","line":114,"column":10,"nodeType":"1291","messageId":"1292","endLine":114,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1496","line":120,"column":20,"nodeType":"1291","messageId":"1292","endLine":120,"endColumn":31},{"ruleId":"1364","severity":1,"message":"1509","line":132,"column":6,"nodeType":"1366","endLine":132,"endColumn":32,"suggestions":"1510"},{"ruleId":"1289","severity":1,"message":"1511","line":142,"column":11,"nodeType":"1291","messageId":"1292","endLine":142,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1512","line":454,"column":24,"nodeType":"1291","messageId":"1292","endLine":454,"endColumn":28},{"ruleId":"1411","severity":1,"message":"1412","line":469,"column":49,"nodeType":"1358","messageId":"1413","endLine":469,"endColumn":51},{"ruleId":"1513","severity":1,"message":"1514","line":759,"column":34,"nodeType":"1515","messageId":"1516","endLine":759,"endColumn":35,"suggestions":"1517"},{"ruleId":"1513","severity":1,"message":"1518","line":764,"column":31,"nodeType":"1515","messageId":"1516","endLine":764,"endColumn":32,"suggestions":"1519"},{"ruleId":"1513","severity":1,"message":"1514","line":781,"column":34,"nodeType":"1515","messageId":"1516","endLine":781,"endColumn":35,"suggestions":"1520"},{"ruleId":"1513","severity":1,"message":"1518","line":786,"column":31,"nodeType":"1515","messageId":"1516","endLine":786,"endColumn":32,"suggestions":"1521"},{"ruleId":"1513","severity":1,"message":"1514","line":806,"column":34,"nodeType":"1515","messageId":"1516","endLine":806,"endColumn":35,"suggestions":"1522"},{"ruleId":"1513","severity":1,"message":"1518","line":811,"column":31,"nodeType":"1515","messageId":"1516","endLine":811,"endColumn":32,"suggestions":"1523"},{"ruleId":"1513","severity":1,"message":"1514","line":844,"column":34,"nodeType":"1515","messageId":"1516","endLine":844,"endColumn":35,"suggestions":"1524"},{"ruleId":"1513","severity":1,"message":"1518","line":849,"column":31,"nodeType":"1515","messageId":"1516","endLine":849,"endColumn":32,"suggestions":"1525"},{"ruleId":"1513","severity":1,"message":"1514","line":867,"column":34,"nodeType":"1515","messageId":"1516","endLine":867,"endColumn":35,"suggestions":"1526"},{"ruleId":"1513","severity":1,"message":"1518","line":872,"column":31,"nodeType":"1515","messageId":"1516","endLine":872,"endColumn":32,"suggestions":"1527"},{"ruleId":"1513","severity":1,"message":"1514","line":892,"column":34,"nodeType":"1515","messageId":"1516","endLine":892,"endColumn":35,"suggestions":"1528"},{"ruleId":"1513","severity":1,"message":"1518","line":897,"column":31,"nodeType":"1515","messageId":"1516","endLine":897,"endColumn":32,"suggestions":"1529"},{"ruleId":"1513","severity":1,"message":"1514","line":913,"column":59,"nodeType":"1515","messageId":"1516","endLine":913,"endColumn":60,"suggestions":"1530"},{"ruleId":"1513","severity":1,"message":"1518","line":913,"column":165,"nodeType":"1515","messageId":"1516","endLine":913,"endColumn":166,"suggestions":"1531"},{"ruleId":"1289","severity":1,"message":"1532","line":1331,"column":7,"nodeType":"1291","messageId":"1292","endLine":1331,"endColumn":12},{"ruleId":"1513","severity":1,"message":"1514","line":1487,"column":34,"nodeType":"1515","messageId":"1516","endLine":1487,"endColumn":35,"suggestions":"1533"},{"ruleId":"1513","severity":1,"message":"1518","line":1492,"column":31,"nodeType":"1515","messageId":"1516","endLine":1492,"endColumn":32,"suggestions":"1534"},{"ruleId":"1513","severity":1,"message":"1514","line":1508,"column":34,"nodeType":"1515","messageId":"1516","endLine":1508,"endColumn":35,"suggestions":"1535"},{"ruleId":"1513","severity":1,"message":"1518","line":1513,"column":31,"nodeType":"1515","messageId":"1516","endLine":1513,"endColumn":32,"suggestions":"1536"},{"ruleId":"1364","severity":1,"message":"1537","line":1764,"column":6,"nodeType":"1366","endLine":1764,"endColumn":21,"suggestions":"1538"},{"ruleId":"1364","severity":1,"message":"1539","line":1785,"column":6,"nodeType":"1366","endLine":1785,"endColumn":8,"suggestions":"1540"},{"ruleId":"1364","severity":1,"message":"1541","line":1832,"column":6,"nodeType":"1366","endLine":1832,"endColumn":23,"suggestions":"1542"},{"ruleId":"1364","severity":1,"message":"1543","line":1856,"column":6,"nodeType":"1366","endLine":1856,"endColumn":26,"suggestions":"1544"},{"ruleId":"1364","severity":1,"message":"1545","line":1907,"column":6,"nodeType":"1366","endLine":1907,"endColumn":24,"suggestions":"1546"},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":27,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1468","line":12,"column":10,"nodeType":"1291","messageId":"1292","endLine":12,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1474","line":24,"column":9,"nodeType":"1291","messageId":"1292","endLine":24,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1487","line":24,"column":26,"nodeType":"1291","messageId":"1292","endLine":24,"endColumn":32},{"ruleId":"1289","severity":1,"message":"1488","line":24,"column":34,"nodeType":"1291","messageId":"1292","endLine":24,"endColumn":39},{"ruleId":"1364","severity":1,"message":"1547","line":234,"column":6,"nodeType":"1366","endLine":234,"endColumn":22,"suggestions":"1548"},{"ruleId":"1411","severity":1,"message":"1500","line":245,"column":28,"nodeType":"1358","messageId":"1413","endLine":245,"endColumn":30},{"ruleId":"1364","severity":1,"message":"1549","line":248,"column":6,"nodeType":"1366","endLine":248,"endColumn":21,"suggestions":"1550"},{"ruleId":"1289","severity":1,"message":"1368","line":3,"column":3,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":7},{"ruleId":"1289","severity":1,"message":"1427","line":4,"column":3,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1405","line":5,"column":3,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1327","line":6,"column":3,"nodeType":"1291","messageId":"1292","endLine":6,"endColumn":8},{"ruleId":"1324","severity":1,"message":"1551","line":67,"column":11,"nodeType":"1314","endLine":72,"endColumn":12},{"ruleId":"1411","severity":1,"message":"1412","line":135,"column":24,"nodeType":"1358","messageId":"1413","endLine":135,"endColumn":26},{"ruleId":"1306","severity":1,"message":"1307","line":157,"column":31,"nodeType":"1308","messageId":"1309","endLine":157,"endColumn":33},{"ruleId":"1411","severity":1,"message":"1500","line":165,"column":29,"nodeType":"1358","messageId":"1413","endLine":165,"endColumn":31},{"ruleId":"1364","severity":1,"message":"1552","line":185,"column":6,"nodeType":"1366","endLine":185,"endColumn":18,"suggestions":"1553"},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1473","line":1,"column":28,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1312","severity":1,"message":"1313","line":34,"column":11,"nodeType":"1314","endLine":37,"endColumn":13},{"ruleId":"1312","severity":1,"message":"1313","line":41,"column":13,"nodeType":"1314","endLine":44,"endColumn":15},{"ruleId":"1312","severity":1,"message":"1313","line":49,"column":11,"nodeType":"1314","endLine":52,"endColumn":13},{"ruleId":"1312","severity":1,"message":"1313","line":59,"column":11,"nodeType":"1314","endLine":62,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1555","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1556","line":4,"column":8,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1557","line":16,"column":8,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1558","line":17,"column":8,"nodeType":"1291","messageId":"1292","endLine":17,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1476","line":20,"column":9,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1474","line":20,"column":18,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1559","line":23,"column":9,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1560","line":24,"column":10,"nodeType":"1291","messageId":"1292","endLine":24,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1561","line":24,"column":19,"nodeType":"1291","messageId":"1292","endLine":24,"endColumn":29},{"ruleId":"1411","severity":1,"message":"1412","line":30,"column":33,"nodeType":"1358","messageId":"1413","endLine":30,"endColumn":35},{"ruleId":"1312","severity":1,"message":"1313","line":32,"column":17,"nodeType":"1314","endLine":32,"endColumn":62},{"ruleId":"1411","severity":1,"message":"1412","line":36,"column":37,"nodeType":"1358","messageId":"1413","endLine":36,"endColumn":39},{"ruleId":"1312","severity":1,"message":"1313","line":38,"column":17,"nodeType":"1314","endLine":38,"endColumn":42},{"ruleId":"1289","severity":1,"message":"1555","line":3,"column":3,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1394","line":9,"column":3,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1562","line":10,"column":3,"nodeType":"1291","messageId":"1292","endLine":10,"endColumn":7},{"ruleId":"1289","severity":1,"message":"1563","line":46,"column":3,"nodeType":"1291","messageId":"1292","endLine":46,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1564","line":58,"column":5,"nodeType":"1291","messageId":"1292","endLine":58,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1383","line":59,"column":5,"nodeType":"1291","messageId":"1292","endLine":59,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1565","line":62,"column":5,"nodeType":"1291","messageId":"1292","endLine":62,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1566","line":63,"column":5,"nodeType":"1291","messageId":"1292","endLine":63,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1567","line":114,"column":5,"nodeType":"1291","messageId":"1292","endLine":114,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1568","line":118,"column":5,"nodeType":"1291","messageId":"1292","endLine":118,"endColumn":23},{"ruleId":"1356","severity":1,"message":"1357","line":177,"column":61,"nodeType":"1358","messageId":"1359","endLine":177,"endColumn":62},{"ruleId":"1356","severity":1,"message":"1357","line":185,"column":45,"nodeType":"1358","messageId":"1359","endLine":185,"endColumn":46},{"ruleId":"1289","severity":1,"message":"1379","line":237,"column":9,"nodeType":"1291","messageId":"1292","endLine":237,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1569","line":344,"column":9,"nodeType":"1291","messageId":"1292","endLine":344,"endColumn":21},{"ruleId":"1302","severity":1,"message":"1303","line":623,"column":9,"nodeType":"1304","messageId":"1305","endLine":630,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1407","line":678,"column":22,"nodeType":"1291","messageId":"1292","endLine":678,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1408","line":678,"column":28,"nodeType":"1291","messageId":"1292","endLine":678,"endColumn":40},{"ruleId":"1364","severity":1,"message":"1570","line":805,"column":6,"nodeType":"1366","endLine":805,"endColumn":13,"suggestions":"1571"},{"ruleId":"1364","severity":1,"message":"1572","line":827,"column":6,"nodeType":"1366","endLine":827,"endColumn":26,"suggestions":"1573"},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1327","line":5,"column":3,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1574","line":8,"column":10,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1395","line":8,"column":37,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":49},{"ruleId":"1289","severity":1,"message":"1575","line":25,"column":8,"nodeType":"1291","messageId":"1292","endLine":25,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1576","line":43,"column":27,"nodeType":"1291","messageId":"1292","endLine":43,"endColumn":45},{"ruleId":"1289","severity":1,"message":"1577","line":44,"column":31,"nodeType":"1291","messageId":"1292","endLine":44,"endColumn":53},{"ruleId":"1289","severity":1,"message":"1578","line":45,"column":10,"nodeType":"1291","messageId":"1292","endLine":45,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1579","line":45,"column":29,"nodeType":"1291","messageId":"1292","endLine":45,"endColumn":49},{"ruleId":"1289","severity":1,"message":"1580","line":51,"column":5,"nodeType":"1291","messageId":"1292","endLine":51,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1581","line":54,"column":5,"nodeType":"1291","messageId":"1292","endLine":54,"endColumn":15},{"ruleId":"1324","severity":1,"message":"1551","line":180,"column":11,"nodeType":"1314","endLine":180,"endColumn":49},{"ruleId":"1411","severity":1,"message":"1500","line":268,"column":28,"nodeType":"1358","messageId":"1413","endLine":268,"endColumn":30},{"ruleId":"1411","severity":1,"message":"1500","line":273,"column":48,"nodeType":"1358","messageId":"1413","endLine":273,"endColumn":50},{"ruleId":"1289","severity":1,"message":"1424","line":2,"column":5,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1473","line":3,"column":5,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1555","line":5,"column":10,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1557","line":17,"column":8,"nodeType":"1291","messageId":"1292","endLine":17,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1474","line":20,"column":18,"nodeType":"1291","messageId":"1292","endLine":20,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1559","line":23,"column":11,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1582","line":80,"column":10,"nodeType":"1291","messageId":"1292","endLine":80,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1583","line":98,"column":5,"nodeType":"1291","messageId":"1292","endLine":98,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1584","line":99,"column":5,"nodeType":"1291","messageId":"1292","endLine":99,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1585","line":100,"column":5,"nodeType":"1291","messageId":"1292","endLine":100,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1586","line":101,"column":5,"nodeType":"1291","messageId":"1292","endLine":101,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1587","line":102,"column":5,"nodeType":"1291","messageId":"1292","endLine":102,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1588","line":103,"column":5,"nodeType":"1291","messageId":"1292","endLine":103,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1589","line":104,"column":5,"nodeType":"1291","messageId":"1292","endLine":104,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1590","line":105,"column":5,"nodeType":"1291","messageId":"1292","endLine":105,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1591","line":106,"column":5,"nodeType":"1291","messageId":"1292","endLine":106,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1592","line":112,"column":5,"nodeType":"1291","messageId":"1292","endLine":112,"endColumn":23},{"ruleId":"1312","severity":1,"message":"1313","line":235,"column":11,"nodeType":"1314","endLine":235,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":237,"column":11,"nodeType":"1314","endLine":237,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":241,"column":11,"nodeType":"1314","endLine":241,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":243,"column":11,"nodeType":"1314","endLine":243,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":247,"column":11,"nodeType":"1314","endLine":247,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":249,"column":11,"nodeType":"1314","endLine":249,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":253,"column":11,"nodeType":"1314","endLine":253,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":255,"column":11,"nodeType":"1314","endLine":255,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":259,"column":11,"nodeType":"1314","endLine":259,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":261,"column":11,"nodeType":"1314","endLine":261,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":265,"column":11,"nodeType":"1314","endLine":265,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":267,"column":11,"nodeType":"1314","endLine":267,"endColumn":46},{"ruleId":"1312","severity":1,"message":"1313","line":271,"column":11,"nodeType":"1314","endLine":271,"endColumn":50},{"ruleId":"1312","severity":1,"message":"1313","line":273,"column":11,"nodeType":"1314","endLine":273,"endColumn":50},{"ruleId":"1312","severity":1,"message":"1313","line":277,"column":11,"nodeType":"1314","endLine":277,"endColumn":56},{"ruleId":"1312","severity":1,"message":"1313","line":279,"column":11,"nodeType":"1314","endLine":279,"endColumn":56},{"ruleId":"1312","severity":1,"message":"1313","line":283,"column":11,"nodeType":"1314","endLine":283,"endColumn":63},{"ruleId":"1312","severity":1,"message":"1313","line":285,"column":11,"nodeType":"1314","endLine":285,"endColumn":63},{"ruleId":"1312","severity":1,"message":"1313","line":289,"column":11,"nodeType":"1314","endLine":289,"endColumn":63},{"ruleId":"1312","severity":1,"message":"1313","line":291,"column":11,"nodeType":"1314","endLine":291,"endColumn":63},{"ruleId":"1312","severity":1,"message":"1313","line":306,"column":17,"nodeType":"1314","endLine":306,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":309,"column":17,"nodeType":"1314","endLine":309,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":321,"column":17,"nodeType":"1314","endLine":321,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":324,"column":17,"nodeType":"1314","endLine":324,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":336,"column":17,"nodeType":"1314","endLine":336,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":339,"column":17,"nodeType":"1314","endLine":339,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":351,"column":17,"nodeType":"1314","endLine":351,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":354,"column":17,"nodeType":"1314","endLine":354,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":366,"column":17,"nodeType":"1314","endLine":366,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":369,"column":17,"nodeType":"1314","endLine":369,"endColumn":67},{"ruleId":"1312","severity":1,"message":"1313","line":381,"column":17,"nodeType":"1314","endLine":381,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":384,"column":17,"nodeType":"1314","endLine":384,"endColumn":66},{"ruleId":"1312","severity":1,"message":"1313","line":396,"column":17,"nodeType":"1314","endLine":396,"endColumn":70},{"ruleId":"1312","severity":1,"message":"1313","line":399,"column":17,"nodeType":"1314","endLine":399,"endColumn":70},{"ruleId":"1312","severity":1,"message":"1313","line":411,"column":17,"nodeType":"1314","endLine":411,"endColumn":76},{"ruleId":"1312","severity":1,"message":"1313","line":414,"column":17,"nodeType":"1314","endLine":414,"endColumn":76},{"ruleId":"1312","severity":1,"message":"1313","line":426,"column":17,"nodeType":"1314","endLine":426,"endColumn":83},{"ruleId":"1312","severity":1,"message":"1313","line":429,"column":17,"nodeType":"1314","endLine":429,"endColumn":83},{"ruleId":"1324","severity":1,"message":"1551","line":681,"column":11,"nodeType":"1314","endLine":681,"endColumn":49},{"ruleId":"1364","severity":1,"message":"1593","line":702,"column":6,"nodeType":"1366","endLine":702,"endColumn":13,"suggestions":"1594"},{"ruleId":"1364","severity":1,"message":"1595","line":714,"column":6,"nodeType":"1366","endLine":714,"endColumn":18,"suggestions":"1596"},{"ruleId":"1364","severity":1,"message":"1597","line":747,"column":6,"nodeType":"1366","endLine":747,"endColumn":25,"suggestions":"1598"},{"ruleId":"1364","severity":1,"message":"1599","line":800,"column":6,"nodeType":"1366","endLine":800,"endColumn":44,"suggestions":"1600"},{"ruleId":"1312","severity":1,"message":"1313","line":817,"column":21,"nodeType":"1314","endLine":817,"endColumn":100},{"ruleId":"1312","severity":1,"message":"1313","line":834,"column":19,"nodeType":"1314","endLine":834,"endColumn":104},{"ruleId":"1289","severity":1,"message":"1601","line":9,"column":15,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1601","line":9,"column":15,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1601","line":9,"column":15,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1601","line":9,"column":15,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1554","line":9,"column":30,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1602","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":37},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":54,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":57},{"ruleId":"1289","severity":1,"message":"1603","line":9,"column":59,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":62},{"ruleId":"1289","severity":1,"message":"1426","line":16,"column":10,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1604","line":33,"column":10,"nodeType":"1291","messageId":"1292","endLine":33,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1605","line":51,"column":10,"nodeType":"1291","messageId":"1292","endLine":51,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1606","line":51,"column":20,"nodeType":"1291","messageId":"1292","endLine":51,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1496","line":62,"column":20,"nodeType":"1291","messageId":"1292","endLine":62,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1607","line":65,"column":10,"nodeType":"1291","messageId":"1292","endLine":65,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1608","line":65,"column":18,"nodeType":"1291","messageId":"1292","endLine":65,"endColumn":27},{"ruleId":"1312","severity":1,"message":"1313","line":138,"column":11,"nodeType":"1314","endLine":145,"endColumn":13},{"ruleId":"1312","severity":1,"message":"1313","line":150,"column":13,"nodeType":"1314","endLine":150,"endColumn":33},{"ruleId":"1312","severity":1,"message":"1313","line":196,"column":18,"nodeType":"1314","endLine":196,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":198,"column":18,"nodeType":"1314","endLine":198,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":200,"column":18,"nodeType":"1314","endLine":200,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":202,"column":18,"nodeType":"1314","endLine":202,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":226,"column":11,"nodeType":"1314","endLine":233,"endColumn":13},{"ruleId":"1312","severity":1,"message":"1313","line":238,"column":13,"nodeType":"1314","endLine":238,"endColumn":63},{"ruleId":"1364","severity":1,"message":"1609","line":369,"column":6,"nodeType":"1366","endLine":369,"endColumn":15,"suggestions":"1610"},{"ruleId":"1364","severity":1,"message":"1611","line":378,"column":6,"nodeType":"1366","endLine":378,"endColumn":8,"suggestions":"1612"},{"ruleId":"1364","severity":1,"message":"1466","line":133,"column":6,"nodeType":"1366","endLine":133,"endColumn":8,"suggestions":"1613"},{"ruleId":"1289","severity":1,"message":"1614","line":21,"column":8,"nodeType":"1291","messageId":"1292","endLine":21,"endColumn":14},{"ruleId":"1364","severity":1,"message":"1615","line":153,"column":6,"nodeType":"1366","endLine":153,"endColumn":8,"suggestions":"1616"},{"ruleId":"1364","severity":1,"message":"1617","line":160,"column":6,"nodeType":"1366","endLine":160,"endColumn":19,"suggestions":"1618"},{"ruleId":"1364","severity":1,"message":"1466","line":170,"column":6,"nodeType":"1366","endLine":170,"endColumn":8,"suggestions":"1619"},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":10,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":19},{"ruleId":"1289","severity":1,"message":"1557","line":3,"column":8,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1473","line":2,"column":17,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":25},{"ruleId":"1289","severity":1,"message":"1601","line":9,"column":15,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1440","line":9,"column":10,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1441","line":9,"column":25,"nodeType":"1291","messageId":"1292","endLine":9,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1620","line":6,"column":5,"nodeType":"1291","messageId":"1292","endLine":6,"endColumn":10},{"ruleId":"1411","severity":1,"message":"1412","line":97,"column":20,"nodeType":"1358","messageId":"1413","endLine":97,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1621","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1622","line":2,"column":17,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1405","line":23,"column":8,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":14},{"ruleId":"1306","severity":1,"message":"1307","line":225,"column":41,"nodeType":"1308","messageId":"1309","endLine":225,"endColumn":43},{"ruleId":"1306","severity":1,"message":"1307","line":237,"column":47,"nodeType":"1308","messageId":"1309","endLine":237,"endColumn":49},{"ruleId":"1289","severity":1,"message":"1349","line":451,"column":23,"nodeType":"1291","messageId":"1292","endLine":451,"endColumn":28},{"ruleId":"1289","severity":1,"message":"1493","line":830,"column":11,"nodeType":"1291","messageId":"1292","endLine":830,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1623","line":832,"column":11,"nodeType":"1291","messageId":"1292","endLine":832,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1624","line":850,"column":9,"nodeType":"1291","messageId":"1292","endLine":850,"endColumn":18},{"ruleId":"1289","severity":1,"message":"1625","line":938,"column":65,"nodeType":"1291","messageId":"1292","endLine":938,"endColumn":76},{"ruleId":"1289","severity":1,"message":"1405","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1626","line":2,"column":36,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1627","line":3,"column":10,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1468","line":19,"column":10,"nodeType":"1291","messageId":"1292","endLine":19,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1474","line":26,"column":18,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1628","line":30,"column":10,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1629","line":30,"column":19,"nodeType":"1291","messageId":"1292","endLine":30,"endColumn":29},{"ruleId":"1312","severity":1,"message":"1313","line":65,"column":16,"nodeType":"1314","endLine":65,"endColumn":41},{"ruleId":"1312","severity":1,"message":"1313","line":67,"column":16,"nodeType":"1314","endLine":67,"endColumn":41},{"ruleId":"1312","severity":1,"message":"1313","line":69,"column":16,"nodeType":"1314","endLine":69,"endColumn":41},{"ruleId":"1312","severity":1,"message":"1313","line":71,"column":16,"nodeType":"1314","endLine":71,"endColumn":41},{"ruleId":"1364","severity":1,"message":"1630","line":77,"column":3,"nodeType":"1291","endLine":77,"endColumn":12,"suggestions":"1631"},{"ruleId":"1289","severity":1,"message":"1394","line":5,"column":3,"nodeType":"1291","messageId":"1292","endLine":5,"endColumn":8},{"ruleId":"1289","severity":1,"message":"1632","line":7,"column":3,"nodeType":"1291","messageId":"1292","endLine":7,"endColumn":6},{"ruleId":"1289","severity":1,"message":"1633","line":57,"column":16,"nodeType":"1291","messageId":"1292","endLine":57,"endColumn":20},{"ruleId":"1289","severity":1,"message":"1532","line":62,"column":5,"nodeType":"1291","messageId":"1292","endLine":62,"endColumn":10},{"ruleId":"1289","severity":1,"message":"1496","line":80,"column":20,"nodeType":"1291","messageId":"1292","endLine":80,"endColumn":31},{"ruleId":"1312","severity":1,"message":"1313","line":143,"column":18,"nodeType":"1314","endLine":143,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":145,"column":18,"nodeType":"1314","endLine":145,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":147,"column":18,"nodeType":"1314","endLine":147,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":149,"column":18,"nodeType":"1314","endLine":149,"endColumn":47},{"ruleId":"1312","severity":1,"message":"1313","line":172,"column":11,"nodeType":"1314","endLine":180,"endColumn":13},{"ruleId":"1312","severity":1,"message":"1313","line":185,"column":13,"nodeType":"1314","endLine":185,"endColumn":63},{"ruleId":"1411","severity":1,"message":"1500","line":261,"column":28,"nodeType":"1358","messageId":"1413","endLine":261,"endColumn":30},{"ruleId":"1364","severity":1,"message":"1634","line":514,"column":6,"nodeType":"1366","endLine":514,"endColumn":13,"suggestions":"1635"},{"ruleId":"1364","severity":1,"message":"1611","line":523,"column":6,"nodeType":"1366","endLine":523,"endColumn":8,"suggestions":"1636"},{"ruleId":"1289","severity":1,"message":"1555","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":15},{"ruleId":"1289","severity":1,"message":"1468","line":16,"column":10,"nodeType":"1291","messageId":"1292","endLine":16,"endColumn":12},{"ruleId":"1289","severity":1,"message":"1614","line":29,"column":8,"nodeType":"1291","messageId":"1292","endLine":29,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1474","line":32,"column":18,"nodeType":"1291","messageId":"1292","endLine":32,"endColumn":24},{"ruleId":"1302","severity":1,"message":"1303","line":55,"column":5,"nodeType":"1304","messageId":"1305","endLine":63,"endColumn":6},{"ruleId":"1364","severity":1,"message":"1637","line":80,"column":6,"nodeType":"1366","endLine":80,"endColumn":21,"suggestions":"1638"},{"ruleId":"1312","severity":1,"message":"1313","line":127,"column":17,"nodeType":"1314","endLine":127,"endColumn":74},{"ruleId":"1312","severity":1,"message":"1313","line":148,"column":21,"nodeType":"1314","endLine":148,"endColumn":69},{"ruleId":"1312","severity":1,"message":"1313","line":168,"column":25,"nodeType":"1314","endLine":175,"endColumn":27},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":27,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":36},{"ruleId":"1289","severity":1,"message":"1426","line":4,"column":10,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1336","line":4,"column":20,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":24},{"ruleId":"1289","severity":1,"message":"1469","line":4,"column":26,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":28},{"ruleId":"1324","severity":1,"message":"1325","line":320,"column":9,"nodeType":"1314","endLine":335,"endColumn":10},{"ruleId":"1302","severity":1,"message":"1303","line":351,"column":5,"nodeType":"1304","messageId":"1305","endLine":370,"endColumn":6},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1639","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1640","line":2,"column":26,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1360","line":2,"column":33,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":38},{"ruleId":"1289","severity":1,"message":"1641","line":12,"column":8,"nodeType":"1291","messageId":"1292","endLine":12,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1642","line":13,"column":8,"nodeType":"1291","messageId":"1292","endLine":13,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1643","line":14,"column":8,"nodeType":"1291","messageId":"1292","endLine":14,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1644","line":15,"column":8,"nodeType":"1291","messageId":"1292","endLine":15,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1645","line":17,"column":8,"nodeType":"1291","messageId":"1292","endLine":17,"endColumn":17},{"ruleId":"1289","severity":1,"message":"1646","line":18,"column":8,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":13},{"ruleId":"1289","severity":1,"message":"1614","line":25,"column":8,"nodeType":"1291","messageId":"1292","endLine":25,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1557","line":26,"column":8,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1614","line":11,"column":8,"nodeType":"1291","messageId":"1292","endLine":11,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1557","line":12,"column":8,"nodeType":"1291","messageId":"1292","endLine":12,"endColumn":9},{"ruleId":"1364","severity":1,"message":"1647","line":42,"column":6,"nodeType":"1366","endLine":42,"endColumn":8,"suggestions":"1648"},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1639","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1640","line":2,"column":26,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1614","line":21,"column":8,"nodeType":"1291","messageId":"1292","endLine":21,"endColumn":14},{"ruleId":"1364","severity":1,"message":"1649","line":70,"column":6,"nodeType":"1366","endLine":70,"endColumn":8,"suggestions":"1650"},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1639","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1614","line":13,"column":8,"nodeType":"1291","messageId":"1292","endLine":13,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1557","line":14,"column":8,"nodeType":"1291","messageId":"1292","endLine":14,"endColumn":9},{"ruleId":"1398","severity":1,"message":"1422","line":51,"column":9,"nodeType":"1400","messageId":"1423","endLine":52,"endColumn":17},{"ruleId":"1398","severity":1,"message":"1422","line":82,"column":13,"nodeType":"1400","messageId":"1423","endLine":83,"endColumn":21},{"ruleId":"1364","severity":1,"message":"1651","line":102,"column":6,"nodeType":"1366","endLine":102,"endColumn":8,"suggestions":"1652"},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1639","line":2,"column":10,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":16},{"ruleId":"1289","severity":1,"message":"1640","line":2,"column":26,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":31},{"ruleId":"1289","severity":1,"message":"1360","line":2,"column":33,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":38},{"ruleId":"1289","severity":1,"message":"1614","line":22,"column":8,"nodeType":"1291","messageId":"1292","endLine":22,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1557","line":23,"column":8,"nodeType":"1291","messageId":"1292","endLine":23,"endColumn":9},{"ruleId":"1312","severity":1,"message":"1313","line":70,"column":15,"nodeType":"1314","endLine":70,"endColumn":37},{"ruleId":"1364","severity":1,"message":"1653","line":129,"column":6,"nodeType":"1366","endLine":129,"endColumn":8,"suggestions":"1654"},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1640","line":2,"column":18,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1562","line":2,"column":25,"nodeType":"1291","messageId":"1292","endLine":2,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1557","line":17,"column":8,"nodeType":"1291","messageId":"1292","endLine":17,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1352","line":22,"column":7,"nodeType":"1291","messageId":"1292","endLine":22,"endColumn":14},{"ruleId":"1655","severity":1,"message":"1656","line":44,"column":17,"nodeType":"1515","messageId":"1657","endLine":44,"endColumn":70},{"ruleId":"1289","severity":1,"message":"1424","line":1,"column":17,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1475","line":1,"column":38,"nodeType":"1291","messageId":"1292","endLine":1,"endColumn":44},{"ruleId":"1289","severity":1,"message":"1562","line":3,"column":25,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":29},{"ruleId":"1289","severity":1,"message":"1658","line":3,"column":31,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":35},{"ruleId":"1289","severity":1,"message":"1555","line":3,"column":37,"nodeType":"1291","messageId":"1292","endLine":3,"endColumn":42},{"ruleId":"1289","severity":1,"message":"1659","line":4,"column":10,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":26},{"ruleId":"1289","severity":1,"message":"1660","line":8,"column":8,"nodeType":"1291","messageId":"1292","endLine":8,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1557","line":18,"column":8,"nodeType":"1291","messageId":"1292","endLine":18,"endColumn":9},{"ruleId":"1289","severity":1,"message":"1352","line":27,"column":7,"nodeType":"1291","messageId":"1292","endLine":27,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1661","line":83,"column":9,"nodeType":"1291","messageId":"1292","endLine":83,"endColumn":20},{"ruleId":"1312","severity":1,"message":"1313","line":99,"column":13,"nodeType":"1314","endLine":112,"endColumn":41},{"ruleId":"1289","severity":1,"message":"1614","line":26,"column":8,"nodeType":"1291","messageId":"1292","endLine":26,"endColumn":14},{"ruleId":"1289","severity":1,"message":"1662","line":62,"column":10,"nodeType":"1291","messageId":"1292","endLine":62,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1663","line":64,"column":10,"nodeType":"1291","messageId":"1292","endLine":64,"endColumn":22},{"ruleId":"1289","severity":1,"message":"1664","line":65,"column":10,"nodeType":"1291","messageId":"1292","endLine":65,"endColumn":23},{"ruleId":"1289","severity":1,"message":"1665","line":66,"column":10,"nodeType":"1291","messageId":"1292","endLine":66,"endColumn":21},{"ruleId":"1289","severity":1,"message":"1496","line":69,"column":20,"nodeType":"1291","messageId":"1292","endLine":69,"endColumn":31},{"ruleId":"1302","severity":1,"message":"1303","line":193,"column":5,"nodeType":"1304","messageId":"1305","endLine":214,"endColumn":6},{"ruleId":"1289","severity":1,"message":"1666","line":268,"column":21,"nodeType":"1291","messageId":"1292","endLine":268,"endColumn":31},{"ruleId":"1364","severity":1,"message":"1501","line":373,"column":6,"nodeType":"1366","endLine":373,"endColumn":8,"suggestions":"1667"},{"ruleId":"1364","severity":1,"message":"1668","line":243,"column":6,"nodeType":"1366","endLine":243,"endColumn":26,"suggestions":"1669"},{"ruleId":"1289","severity":1,"message":"1405","line":4,"column":3,"nodeType":"1291","messageId":"1292","endLine":4,"endColumn":9},{"ruleId":"1670","severity":2,"message":"1671","line":11,"column":49,"nodeType":"1291","endLine":11,"endColumn":57},{"ruleId":"1670","severity":2,"message":"1672","line":13,"column":5,"nodeType":"1291","endLine":13,"endColumn":14},"no-unused-vars","'ConfigProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1673"],"no-negated-in-lhs",["1674"],"'BrowserRouter' is defined but never used.","'addScheduledPet' is defined but never used.","'message' is defined but never used.","'Heard' is defined but never used.","'Option' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petSpecies' is assigned a value but never used.","'imgurl' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'patientId' is assigned a value but never used.","'age' is assigned a value but never used.","'isMix' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'addLogin' is defined but never used.","'MyIcon' is assigned a value but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'_resend' is assigned a value but never used.","'Modal' is defined but never used.","'Spin' is defined but never used.","'bounds' is assigned a value but never used.","'MaxMin' is defined but never used.","'inviteUserByEmail' is defined but never used.","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'Close' is defined but never used.","'UploadImg' is defined but never used.","'MTop' is defined but never used.","'MyModal' is defined but never used.","'Draggable' is defined but never used.","'selectBreedBySpeciesId' is defined but never used.","'listAllPetInfo' is defined but never used.","'checkPatientId' is defined but never used.","'windowsHeight' is assigned a value but never used.","'disabled' is assigned a value but never used.","'selectDeviceName' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'Heart' is defined but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'petId' is assigned a value but never used.","'getOta' is defined but never used.","'mar' is assigned a value but never used.","'history' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'setImageUrl' is assigned a value but never used.","'getBase64' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Radio' is defined but never used.","'petUrl' is assigned a value but never used.","'country' is assigned a value but never used.","'infoData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.","ArrayExpression",["1675"],"'Menu' is defined but never used.","'dui' is defined but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'speciesId' is assigned a value but never used.","'breedName' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'Select' is defined but never used.","'createFromIconfontCN' is defined but never used.","'selectPetInfoByUserId' is defined but never used.","'url' is assigned a value but never used.","'userImage' is assigned a value but never used.","'imageId' is assigned a value but never used.","'images' is assigned a value but never used.","'num07' is assigned a value but never used.","'rMin_red' is defined but never used.","'rClose_red' is defined but never used.","'rMin_white' is defined but never used.","'rClose_white' is defined but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'checkUser' is defined but never used.","'deskRegistAWSSNS' is defined but never used.","'options' is assigned a value but never used.","'Space' is defined but never used.","'DownOutlined' is defined but never used.","'UpOutlined' is defined but never used.","'preOrderId' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'userName' is assigned a value but never used.","'endDate' is assigned a value but never used.","'selectListIndex' is assigned a value but never used.","'Button' is defined but never used.","'isMeasure' is assigned a value but never used.","'is15' is assigned a value but never used.","'self_tarting' is assigned a value but never used.","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'mac' is assigned a value but never used.","'hardwareVersion' is assigned a value but never used.","'softwareVersion' is assigned a value but never used.","'wifiFlag' is assigned a value but never used.","'control' is assigned a value but never used.","'weight' is assigned a value but never used.","'weightUnits' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","Expected a 'break' statement before 'default'.","default","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'mTop' is defined but never used.","'Popover' is defined but never used.","'getPetInfoByRFID' is defined but never used.","'placeContent' is assigned a value but never used.","'setPlaceholder' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","'headerRef' is assigned a value but never used.","'bluData' is assigned a value but never used.","'jiantou' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["1676"],"React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1677"],"'get' is defined but never used.","'del' is defined but never used.","'devWidth' is assigned a value but never used.","'devHeight' is assigned a value but never used.","'size' is assigned a value but never used.","'windowssize' is assigned a value but never used.","'timer' is assigned a value but never used.","'CtoF' is defined but never used.","'FtoC' is defined but never used.","'GToMl' is defined but never used.","'MltoG' is defined but never used.","'GToOz' is defined but never used.","'OztoG' is defined but never used.","'CmtoIn' is defined but never used.","'IntoCm' is defined but never used.","'biggieHome' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1678"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1679"],"'storage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hardwareInfo' and 'selectHardwareInfoFun'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1680"],"'useHover' is defined but never used.","React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1681"],"React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",["1682"],"'px' is defined but never used.","'pX' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'Header' is assigned a value but never used.","'useRef' is defined but never used.","'Content' is assigned a value but never used.","'mellaMeasurePart' is assigned a value but never used.","'vibible' is assigned a value but never used.","'setVibible' is assigned a value but never used.","'qsmPortName' is assigned a value but never used.","'getQsmPortName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'conectstatus'. Either include it or remove the dependency array.",["1683"],"React Hook useEffect has a missing dependency: 'readQSMConnectionStatus'. Either include it or remove the dependency array.",["1684"],"'devicesTitleHeight' is defined but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1685"],"'redJinggao' is defined but never used.","'MYButton' is defined but never used.","'loading' is assigned a value but never used.","'isSave' is assigned a value but never used.","'setIsSave' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","'getCurrPage' is assigned a value but never used.","'searchData' is assigned a value but never used.","'setSearchData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1686"],"'UnassignModal' is defined but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'lastWorkplaceId' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1687"],"'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1688","1689"],"Unnecessary escape character: \\-.",["1690","1691"],["1692","1693"],["1694","1695"],["1696","1697"],["1698","1699"],["1700","1701"],["1702","1703"],["1704","1705"],["1706","1707"],["1708","1709"],["1710","1711"],["1712","1713"],["1714","1715"],"'hisHe' is assigned a value but never used.",["1716","1717"],["1718","1719"],["1720","1721"],["1722","1723"],"React Hook useEffect has a missing dependency: '_getEmergencyHistory'. Either include it or remove the dependency array.",["1724"],"React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",["1725"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1726"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1727"],"React Hook useEffect has a missing dependency: 'units'. Either include it or remove the dependency array.",["1728"],"React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1729"],"React Hook useEffect has missing dependencies: 'hardwareReduce' and 'setBiggieConnectStatusFun'. Either include them or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1730"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1731"],"'patch' is defined but never used.","'Image' is defined but never used.","'PressButton_Pro' is defined but never used.","'_' is defined but never used.","'HistoryTable' is defined but never used.","'mellaConnectStatus' is assigned a value but never used.","'saveNum' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'Card' is defined but never used.","'mellaPredictReturnValue' is defined but never used.","'initTime' is assigned a value but never used.","'exchangeNum' is assigned a value but never used.","'time194' is assigned a value but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","'radioService' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1732"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1733"],"'ExclamationCircleOutlined' is defined but never used.","'down_red' is defined but never used.","'setLastWeightValue' is assigned a value but never used.","'setLastWeightTimeValue' is assigned a value but never used.","'lastRuleTimeValue' is assigned a value but never used.","'setLastRuleTimeValue' is assigned a value but never used.","'neckValue' is assigned a value but never used.","'torsoValue' is assigned a value but never used.","'useGetState' is defined but never used.","'torsoLength' is assigned a value but never used.","'l2rarmDistance' is assigned a value but never used.","'upperTorsoCircumference' is assigned a value but never used.","'lowerTorsoCircumference' is assigned a value but never used.","'h2tLength' is assigned a value but never used.","'neckCircumference' is assigned a value but never used.","'hindLimbLength' is assigned a value but never used.","'foreLimbLength' is assigned a value but never used.","'foreLimbCircumference' is assigned a value but never used.","'rulerConnectStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRecentPet' and 'weight'. Either include them or remove the dependency array.",["1734"],"React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1735"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1736"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'forelimbCircumferenceValue', 'forelimbLengthValue', 'headValue', 'hindlimbValue', 'inputIndex', 'lowerValue', 'neckValue', 'radioValue', 'receiveBroadcastHardwareInfo.deviceType', 'receiveBroadcastHardwareInfo.macId', 'rulerUnit', 'selectHardwareInfo', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1737"],"'postJson' is defined but never used.","'postFormData' is defined but never used.","'put' is defined but never used.","'useThrottleFn' is defined but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","'isMore' is assigned a value but never used.","'setIsMore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1738"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1739"],["1740"],"'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",["1741"],"React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",["1742"],["1743"],"'token' is assigned a value but never used.","'Table' is defined but never used.","'Popconfirm' is defined but never used.","'_del' is assigned a value but never used.","'tableData' is assigned a value but never used.","'historyData' is assigned a value but never used.","'Carousel' is defined but never used.","'PlusOutlined' is defined but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1744"],"'Tag' is defined but never used.","'memo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["1745"],["1746"],"React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1747"],"'Layout' is defined but never used.","'Input' is defined but never used.","'swirl' is defined but never used.","'BreakSeal' is defined but never used.","'label' is defined but never used.","'Incubator' is defined but never used.","'overnight' is defined but never used.","'rapid' is defined but never used.","React Hook useEffect has a missing dependency: 'onClick'. Either include it or remove the dependency array.",["1748"],"React Hook useEffect has a missing dependency: 'qsmMessage.qsmEarPart'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'qsmMessage.qsmEarPart', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmEarPart' in the reducer.",["1749"],"React Hook useEffect has a missing dependency: 'isNext'. Either include it or remove the dependency array.",["1750"],"React Hook useEffect has a missing dependency: 'qsmMessage.qsmTimeType'. Either include it or remove the dependency array. If 'setType' needs the current value of 'qsmMessage.qsmTimeType', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmTimeType' in the reducer.",["1751"],"no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression","'List' is defined but never used.","'InfoCircleFilled' is defined but never used.","'electronStore' is defined but never used.","'urlErrModal' is assigned a value but never used.","'connectionKey' is assigned a value but never used.","'selectRoleId' is assigned a value but never used.","'workplaceName' is assigned a value but never used.","'workplaceId' is assigned a value but never used.","'deviceType' is assigned a value but never used.",["1752"],"React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1753"],"react-hooks/rules-of-hooks","React Hook \"useState\" is called in function \"baseNotDetectedModal\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","React Hook \"useEffect\" is called in function \"baseNotDetectedModal\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","no-global-assign","no-unsafe-negation",{"desc":"1754","fix":"1755"},{"desc":"1756","fix":"1757"},{"desc":"1758","fix":"1759"},{"desc":"1760","fix":"1761"},{"desc":"1762","fix":"1763"},{"desc":"1764","fix":"1765"},{"desc":"1766","fix":"1767"},{"desc":"1768","fix":"1769"},{"desc":"1770","fix":"1771"},{"desc":"1772","fix":"1773"},{"desc":"1774","fix":"1775"},{"desc":"1776","fix":"1777"},{"desc":"1758","fix":"1778"},{"messageId":"1779","fix":"1780","desc":"1781"},{"messageId":"1782","fix":"1783","desc":"1784"},{"messageId":"1779","fix":"1785","desc":"1781"},{"messageId":"1782","fix":"1786","desc":"1784"},{"messageId":"1779","fix":"1787","desc":"1781"},{"messageId":"1782","fix":"1788","desc":"1784"},{"messageId":"1779","fix":"1789","desc":"1781"},{"messageId":"1782","fix":"1790","desc":"1784"},{"messageId":"1779","fix":"1791","desc":"1781"},{"messageId":"1782","fix":"1792","desc":"1784"},{"messageId":"1779","fix":"1793","desc":"1781"},{"messageId":"1782","fix":"1794","desc":"1784"},{"messageId":"1779","fix":"1795","desc":"1781"},{"messageId":"1782","fix":"1796","desc":"1784"},{"messageId":"1779","fix":"1797","desc":"1781"},{"messageId":"1782","fix":"1798","desc":"1784"},{"messageId":"1779","fix":"1799","desc":"1781"},{"messageId":"1782","fix":"1800","desc":"1784"},{"messageId":"1779","fix":"1801","desc":"1781"},{"messageId":"1782","fix":"1802","desc":"1784"},{"messageId":"1779","fix":"1803","desc":"1781"},{"messageId":"1782","fix":"1804","desc":"1784"},{"messageId":"1779","fix":"1805","desc":"1781"},{"messageId":"1782","fix":"1806","desc":"1784"},{"messageId":"1779","fix":"1807","desc":"1781"},{"messageId":"1782","fix":"1808","desc":"1784"},{"messageId":"1779","fix":"1809","desc":"1781"},{"messageId":"1782","fix":"1810","desc":"1784"},{"messageId":"1779","fix":"1811","desc":"1781"},{"messageId":"1782","fix":"1812","desc":"1784"},{"messageId":"1779","fix":"1813","desc":"1781"},{"messageId":"1782","fix":"1814","desc":"1784"},{"messageId":"1779","fix":"1815","desc":"1781"},{"messageId":"1782","fix":"1816","desc":"1784"},{"messageId":"1779","fix":"1817","desc":"1781"},{"messageId":"1782","fix":"1818","desc":"1784"},{"desc":"1819","fix":"1820"},{"desc":"1821","fix":"1822"},{"desc":"1823","fix":"1824"},{"desc":"1825","fix":"1826"},{"desc":"1827","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1831","fix":"1832"},{"desc":"1833","fix":"1834"},{"desc":"1835","fix":"1836"},{"desc":"1837","fix":"1838"},{"desc":"1839","fix":"1840"},{"desc":"1841","fix":"1842"},{"desc":"1843","fix":"1844"},{"desc":"1845","fix":"1846"},{"desc":"1847","fix":"1848"},{"desc":"1849","fix":"1850"},{"desc":"1768","fix":"1851"},{"desc":"1852","fix":"1853"},{"desc":"1854","fix":"1855"},{"desc":"1768","fix":"1856"},{"desc":"1857","fix":"1858"},{"desc":"1859","fix":"1860"},{"desc":"1849","fix":"1861"},{"desc":"1862","fix":"1863"},{"desc":"1864","fix":"1865"},{"desc":"1866","fix":"1867"},{"desc":"1868","fix":"1869"},{"desc":"1870","fix":"1871"},{"desc":"1776","fix":"1872"},{"desc":"1873","fix":"1874"},"Update the dependencies array to be: [form, storage.userId]",{"range":"1875","text":"1876"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1877","text":"1878"},"Update the dependencies array to be: []",{"range":"1879","text":"1880"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1881","text":"1882"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1883","text":"1884"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",{"range":"1885","text":"1886"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"1887","text":"1888"},"Update the dependencies array to be: [destroyOnClose, width]",{"range":"1889","text":"1890"},"Update the dependencies array to be: [conectstatus]",{"range":"1891","text":"1892"},"Update the dependencies array to be: [readQSMConnectionStatus]",{"range":"1893","text":"1894"},"Update the dependencies array to be: [hardwareList]",{"range":"1895","text":"1896"},"Update the dependencies array to be: [_getExam]",{"range":"1897","text":"1898"},{"range":"1899","text":"1880"},"removeEscape",{"range":"1900","text":"1901"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1902","text":"1903"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1904","text":"1901"},{"range":"1905","text":"1903"},{"range":"1906","text":"1901"},{"range":"1907","text":"1903"},{"range":"1908","text":"1901"},{"range":"1909","text":"1903"},{"range":"1910","text":"1901"},{"range":"1911","text":"1903"},{"range":"1912","text":"1901"},{"range":"1913","text":"1903"},{"range":"1914","text":"1901"},{"range":"1915","text":"1903"},{"range":"1916","text":"1901"},{"range":"1917","text":"1903"},{"range":"1918","text":"1901"},{"range":"1919","text":"1903"},{"range":"1920","text":"1901"},{"range":"1921","text":"1903"},{"range":"1922","text":"1901"},{"range":"1923","text":"1903"},{"range":"1924","text":"1901"},{"range":"1925","text":"1903"},{"range":"1926","text":"1901"},{"range":"1927","text":"1903"},{"range":"1928","text":"1901"},{"range":"1929","text":"1903"},{"range":"1930","text":"1901"},{"range":"1931","text":"1903"},{"range":"1932","text":"1901"},{"range":"1933","text":"1903"},{"range":"1934","text":"1901"},{"range":"1935","text":"1903"},{"range":"1936","text":"1901"},{"range":"1937","text":"1903"},"Update the dependencies array to be: [_getEmergencyHistory, petDetailInfo]",{"range":"1938","text":"1939"},"Update the dependencies array to be: [mellaMeasureNum]",{"range":"1940","text":"1941"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1942","text":"1943"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1944","text":"1945"},"Update the dependencies array to be: [biggieBodyWeight, units]",{"range":"1946","text":"1947"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1948","text":"1949"},"Update the dependencies array to be: [hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",{"range":"1950","text":"1951"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1952","text":"1953"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1954","text":"1955"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1956","text":"1957"},"Update the dependencies array to be: [getRecentPet, petId, weight]",{"range":"1958","text":"1959"},"Update the dependencies array to be: [finishScan, inputIndex, newData]",{"range":"1960","text":"1961"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1962","text":"1963"},"Update the dependencies array to be: [bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",{"range":"1964","text":"1965"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1966","text":"1967"},"Update the dependencies array to be: [storage.userId]",{"range":"1968","text":"1969"},{"range":"1970","text":"1890"},"Update the dependencies array to be: [getAllPet]",{"range":"1971","text":"1972"},"Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",{"range":"1973","text":"1974"},{"range":"1975","text":"1890"},"Add dependencies array: [callBack, timers]",{"range":"1976","text":"1977"},"Update the dependencies array to be: [getPetTemperatureData, petId]",{"range":"1978","text":"1979"},{"range":"1980","text":"1969"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1981","text":"1982"},"Update the dependencies array to be: [onClick]",{"range":"1983","text":"1984"},"Update the dependencies array to be: [qsmMessage.qsmEarPart]",{"range":"1985","text":"1986"},"Update the dependencies array to be: [isNext]",{"range":"1987","text":"1988"},"Update the dependencies array to be: [qsmMessage.qsmTimeType]",{"range":"1989","text":"1990"},{"range":"1991","text":"1898"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"1992","text":"1993"},[2508,2510],"[form, storage.userId]",[43085,43087],"[_noUSB, _send, blueSearch]",[43159,43185],"[]",[9394,9396],"[setReceiveBroadcastHardwareInfoFun]",[10498,10528],"[devicesList, receiveBroadcastHardwareInfo]",[1775,1810],"[selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",[6232,6249],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[2079,2081],"[destroyOnClose, width]",[4609,4611],"[conectstatus]",[5055,5057],"[readQSMConnectionStatus]",[3213,3215],"[hardwareList]",[8466,8468],"[_getExam]",[5316,5342],[23366,23367],"",[23366,23366],"\\",[23567,23568],[23567,23567],[24150,24151],[24150,24150],[24351,24352],[24351,24351],[25031,25032],[25031,25031],[25232,25233],[25232,25232],[26374,26375],[26374,26374],[26575,26576],[26575,26575],[27182,27183],[27182,27182],[27383,27384],[27383,27383],[28049,28050],[28049,28049],[28250,28251],[28250,28250],[28821,28822],[28821,28821],[28927,28928],[28927,28927],[45027,45028],[45027,45027],[45228,45229],[45228,45228],[45758,45759],[45758,45758],[45959,45960],[45959,45959],[53035,53050],"[_getEmergencyHistory, petDetailInfo]",[53467,53469],"[mellaMeasureNum]",[54710,54727],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[55268,55288],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[57152,57170],"[biggieBodyWeight, units]",[7234,7250],"[hardwareReduce, weight]",[7552,7567],"[hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",[5018,5030],"[letterListCopy, phoneListCopy, searchText]",[22054,22061],"[callBack, prediction, timeNum, value]",[22683,22703],"[mellaConnectStatus, value]",[23660,23667],"[getRecentPet, petId, weight]",[23920,23932],"[finishScan, inputIndex, newData]",[24584,24603],"[inputIndex, rulerConfirmCount]",[26595,26633],"[bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",[9688,9697],"[getPetTemperatureData, reRender, saveNum]",[9909,9911],"[storage.userId]",[3573,3575],[4188,4190],"[getAllPet]",[4321,4334],"[searchPetByPetNameOrPatientId, searchValue]",[4529,4531],[2218,2218],", [callBack, timers]",[14742,14749],"[getPetTemperatureData, petId]",[14947,14949],[2438,2453],"[callBack, carouselIndex]",[1076,1078],"[onClick]",[2041,2043],"[qsmMessage.qsmEarPart]",[3115,3117],"[isNext]",[3643,3645],"[qsmMessage.qsmTimeType]",[10673,10675],[7403,7423],"[hardwareList, selectHardwareInfo, selectHardwareType]"]