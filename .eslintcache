[{"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/index.js":"1","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/px.js":"2","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/index.js":"3","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/petType.js":"4","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/appversion.js":"5","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/PetsUI.jsx":"6","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/index.jsx":"7","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/reducers/hardwareReduce.js":"8","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/hardWareTypeUI.jsx":"9","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/hardwareType.js":"10","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/hardwareAction.js":"11","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/AddDevice.jsx":"12","/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/button/Button.js":"13"},{"size":341,"mtime":1655269876074,"results":"14","hashOfConfig":"15"},{"size":2868,"mtime":1655269876168,"results":"16","hashOfConfig":"15"},{"size":60,"mtime":1655269876081,"results":"17","hashOfConfig":"15"},{"size":152,"mtime":1655269876081,"results":"18","hashOfConfig":"15"},{"size":75,"mtime":1655269876086,"results":"19","hashOfConfig":"15"},{"size":8100,"mtime":1655284915932,"results":"20","hashOfConfig":"15"},{"size":35859,"mtime":1655288651120,"results":"21","hashOfConfig":"15"},{"size":2028,"mtime":1655287920602,"results":"22","hashOfConfig":"15"},{"size":3977,"mtime":1655288505177,"results":"23","hashOfConfig":"15"},{"size":868,"mtime":1655287382395,"results":"24","hashOfConfig":"15"},{"size":1676,"mtime":1655288076031,"results":"25","hashOfConfig":"15"},{"size":3179,"mtime":1655292992119,"results":"26","hashOfConfig":"15"},{"size":997,"mtime":1655269876152,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"15mxaen",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/index.js",[],["58","59"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/px.js",[],["60","61"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/index.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/petType.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/appversion.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/PetsUI.jsx",["62","63","64","65","66"],"import React, { useEffect, useState } from 'react'\nimport {\n  Dropdown,\n  Menu,\n} from 'antd'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport { px } from '../../utils/px'\nimport { petSortTypeFun, petDetailInfoFun } from '../../store/actions'\nimport electronStore from '../../utils/electronStore'\nimport petIcon from './../../assets/img/petIcon.png'\nimport xia from './../../assets/img/xia.png'\n\nimport { devicesTitleHeight } from '../../utils/InitDate'\n\n\nimport './mainbody.less'\nimport { fetchRequest } from '../../utils/FetchUtil1';\n\nlet storage = window.localStorage;\n\n\nconst PetsUI = ({ bodyHeight, petSortTypeFun, petSortType, petDetailInfoFun, petDetailInfo }) => {\n  //定义宠物列表数组\n  const [petList, setPetList] = useState([])\n\n  useEffect(() => {\n    //从本地获取宠物列表数据\n    let petList = electronStore.get('petList') || [];\n    _getExam()\n  }, [])\n  //获取宠物列表数据\n  const _getExam = () => {\n    //现在就只是获取数据库里面的数据\n    let params = {\n      // doctorId: storage.userId,\n      doctorId: 23,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('查询宠物的入参', params);\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\n      .then(res => {\n        console.log('查询所有宠物', res);\n        if (res.flag === true) {\n          let data = []\n          let oldList = res.data\n          // for (let i = 0; i < oldList.length; i++) {\n          //   let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n          //     h2tLength, torsoLength } = oldList[i]\n          //   let owner = ''\n          //   patientId = isUnKnow(patientId)\n          //   petName = isUnKnow(petName)\n          //   breedName = isUnKnow(breedName)\n          //   age = isUnKnow(age)\n          //   weight = isUnKnow(weight)\n          //   if (!firstName) {\n          //     firstName = ''\n          //   }\n          //   if (!lastName) {\n          //     lastName = ''\n          //   }\n          //   if (lastName === '' && firstName === '') {\n          //     owner = 'unknown'\n          //   } else {\n          //     owner = `${lastName} ${firstName}`\n          //   }\n          //   createTime = moment(createTime).format('X')\n          //   let petGender = ''\n          //   switch (`${gender}`) {\n          //     case '1': petGender = 'F'\n\n          //       break;\n          //     case '0': petGender = \"M\"\n          //       break;\n          //     default: petGender = 'unknown'\n          //       break;\n          //   }\n          //   let petAge = 'unknown'\n          //   if (birthday) {\n          //     petAge = moment(new Date()).diff(moment(birthday), 'years')\n          //   }\n\n          //   let json = {\n          //     insertedAt: createTime,\n          //     patientId,\n          //     petName,\n          //     owner,\n          //     breed: breedName,\n          //     gender: petGender,\n          //     age: petAge,\n          //     petId,\n          //     id: i,\n          //     weight,\n          //     rfid,\n          //     url,\n          //     speciesId,\n          //     l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n          //     h2tLength, torsoLength,\n          //     pethubId, macId,\n\n          //   }\n          //   data.push(json)\n\n          // }\n          let petArr = dataSort(oldList)\n          setPetList(petArr)\n        } else {\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n\n      })\n  }\n  const dataSort = (data) => {\n    let petList = [].concat(data)\n    switch (petSortType) {\n      case 'Time':\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n        break;\n      case 'Pet ID':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'Owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'Breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'Pet Name':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'Gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    return petList\n\n\n\n  }\n\n\n  const menu = () => {\n    let menuList = [\n      { value: 'Time' },\n      { value: 'Pet ID' },\n      { value: 'Owner' },\n      { value: 'Breed' },\n      { value: 'Pet Name' },\n      { value: 'Gender' },\n    ];\n    let options = menuList.map((item, index) => {\n      let itemstyle = {}, textColor = '#1a1a1a'\n      if (petSortType === item.value) {\n        itemstyle = { backgroundColor: '#e1206D' }\n        textColor = '#fff'\n      }\n      return (\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\n          <div style={{ color: textColor }}>{item.value}</div>\n        </Menu.Item>\n      )\n    })\n    return (\n      <Menu onClick={({ key, }) => {\n        petSortTypeFun(key)\n        dataSort(petList)\n      }}>\n        {options}\n\n      </Menu>\n    );\n  }\n  const petListUI = () => {\n    let options = petList.map((item, index) => {\n      let itemBac = '#E7E7E7', itemColor = '#141414'\n      if (item.petId === petDetailInfo.petId) {\n        itemBac = '#e1206D'\n        itemColor = '#fff'\n      }\n      return (\n        <li key={index} >\n          <div className='petItem'\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\n            onClick={() => {\n              console.log('点击了宠物', item);\n              petDetailInfoFun(item)\n            }}\n          >\n            {`${item.patientId}, ${item.petName}`}\n          </div>\n        </li>\n      )\n\n    })\n\n    return (\n      <div className=\"petList\" style={{ marginTop: px(10), height: bodyHeight - devicesTitleHeight - px(220) }}>\n        <ul>\n          {options}\n        </ul>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"PetUI\" style={{ height: bodyHeight - devicesTitleHeight, }}>\n      <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\n        <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n        <div className=\"titleText\" >Pets</div>\n      </div>\n      <div className=\"sort\" style={{ paddingLeft: px(20) }}>\n        <Dropdown overlay={menu} trigger={['click']}>\n          <div className=\"sortBox\">\n            <img src={xia} alt=\"\" width={px(20)} style={{ marginRight: px(10) }} />\n            <div className=\"sortText\" >\n              {`Sort by: ${petSortType}`}\n            </div>\n          </div>\n        </Dropdown>\n      </div>\n      {petListUI()}\n\n      <div className=\"walkBtn\">\n        <div\n          className=\"walkbtnBox\"\n          style={{ height: px(40), marginTop: px(30) }}\n          onClick={() => {\n            let json = {\n              isWalkIn: true,\n              petId: null,\n              petName: null,\n              owner: null,\n              breed: null,\n\n            }\n            petDetailInfoFun(json)\n          }}\n        >\n          <div className=\"walkText\">Walk-In</div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\n\nPetsUI.propTypes = {\n  bodyHeight: PropTypes.number\n}\n//默认值\nPetsUI.defaultProps = {\n  bodyHeight: 0\n}\nexport default connect(\n  state => ({\n    petSortType: state.petReduce.petSortType,\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  { petSortTypeFun, petDetailInfoFun }\n)(PetsUI)",["67","68"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/index.jsx",["69","70","71","72"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/reducers/hardwareReduce.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/hardWareTypeUI.jsx",["73","74","75"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actionTypes/hardwareType.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/store/actions/hardwareAction.js",[],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/components/mainbody/AddDevice.jsx",["76","77"],"/Users/mac/Desktop/workCode/Mella_Desktop_Super_USB/src/utils/button/Button.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"78","replacedBy":"82"},{"ruleId":"80","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":30,"column":9,"nodeType":"86","messageId":"87","endLine":30,"endColumn":16},{"ruleId":"88","severity":1,"message":"89","line":32,"column":6,"nodeType":"90","endLine":32,"endColumn":8,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"92","line":49,"column":11,"nodeType":"86","messageId":"87","endLine":49,"endColumn":19},{"ruleId":"84","severity":1,"message":"93","line":61,"column":15,"nodeType":"86","messageId":"87","endLine":61,"endColumn":19},{"ruleId":"94","severity":1,"message":"95","line":134,"column":5,"nodeType":"96","messageId":"97","endLine":153,"endColumn":6},{"ruleId":"78","replacedBy":"98"},{"ruleId":"80","replacedBy":"99"},{"ruleId":"84","severity":1,"message":"100","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":14},{"ruleId":"84","severity":1,"message":"101","line":6,"column":20,"nodeType":"86","messageId":"87","endLine":6,"endColumn":22},{"ruleId":"94","severity":1,"message":"95","line":256,"column":9,"nodeType":"96","messageId":"97","endLine":260,"endColumn":10},{"ruleId":"84","severity":1,"message":"102","line":877,"column":11,"nodeType":"86","messageId":"87","endLine":877,"endColumn":22},{"ruleId":"84","severity":1,"message":"103","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"104","line":1,"column":39,"nodeType":"86","messageId":"87","endLine":1,"endColumn":47},{"ruleId":"88","severity":1,"message":"105","line":39,"column":6,"nodeType":"90","endLine":39,"endColumn":23,"suggestions":"106"},{"ruleId":"84","severity":1,"message":"104","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"107","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],"no-unused-vars","'petList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.","ArrayExpression",["110"],"'isUnKnow' is assigned a value but never used.","'data' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["108"],["109"],"'mTop' is defined but never used.","'pX' is defined but never used.","'offsetWidth' is assigned a value but never used.","'Component' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'selectHardwareIndex', 'selectHardwareInfoFun', and 'selectHardwareList'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["111"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [_getExam]",{"range":"116","text":"117"},"Update the dependencies array to be: [devicesTypeList, selectHardwareIndex, selectHardwareInfoFun, selectHardwareList]",{"range":"118","text":"119"},[903,905],"[_getExam]",[1758,1775],"[devicesTypeList, selectHardwareIndex, selectHardwareInfoFun, selectHardwareList]"]