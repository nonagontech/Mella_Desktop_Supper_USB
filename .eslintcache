[{"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js":"1","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js":"2","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js":"3","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx":"4","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx":"5","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx":"6","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx":"7","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx":"8","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx":"9","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx":"10","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx":"11","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx":"12","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx":"13","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx":"14","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx":"15","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx":"16","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx":"17","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx":"18","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx":"19","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx":"20","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx":"21","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx":"22","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx":"23","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx":"24","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx":"25","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx":"26","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js":"27","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx":"28","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx":"29","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx":"30","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx":"31","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx":"32","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js":"33","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js":"34","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js":"35","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js":"36","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js":"37","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js":"38","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx":"39","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js":"40","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx":"41","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js":"42","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js":"43","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js":"44","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js":"45","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js":"46","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js":"47","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js":"48","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js":"49","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js":"50","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx":"51","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js":"52","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx":"53","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js":"54","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js":"55","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js":"56","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js":"57","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js":"58","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js":"59","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js":"60","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js":"61","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js":"62","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx":"63","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx":"64","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx":"65","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx":"66","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx":"67","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx":"68","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx":"69","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js":"70","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js":"71","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js":"72","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx":"73","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js":"74","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js":"75","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js":"76","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx":"77","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx":"78","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx":"79","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"80","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx":"81","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx":"82","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx":"83","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx":"84","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx":"85","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js":"86","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js":"87","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js":"88","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js":"89","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js":"90","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx":"91","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js":"92","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js":"93","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js":"94","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js":"95","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js":"96","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js":"97","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js":"98","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js":"99","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx":"100","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"101","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"102","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx":"103","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx":"104","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx":"105","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx":"106","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx":"107","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js":"108","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx":"109","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx":"110","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx":"111","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js":"112","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js":"113","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js":"114","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx":"115","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx":"116","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js":"117","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js":"118","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js":"119","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js":"120","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js":"121","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js":"122","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js":"123","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js":"124","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js":"125","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx":"126","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx":"127","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx":"128","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js":"129","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx":"130","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx":"131","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx":"132","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx":"133","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx":"134","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx":"135","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx":"136","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js":"137","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js":"138","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js":"139","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js":"140","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js":"141"},{"size":349,"mtime":1661943267097,"results":"142","hashOfConfig":"143"},{"size":4649,"mtime":1672210545324,"results":"144","hashOfConfig":"143"},{"size":577,"mtime":1657680900931,"results":"145","hashOfConfig":"143"},{"size":3909,"mtime":1671081633626,"results":"146","hashOfConfig":"143"},{"size":28721,"mtime":1672274480820,"results":"147","hashOfConfig":"143"},{"size":36189,"mtime":1668680100322,"results":"148","hashOfConfig":"143"},{"size":18041,"mtime":1671584505494,"results":"149","hashOfConfig":"143"},{"size":17771,"mtime":1670508764019,"results":"150","hashOfConfig":"143"},{"size":7530,"mtime":1661509757418,"results":"151","hashOfConfig":"143"},{"size":4323,"mtime":1670476781045,"results":"152","hashOfConfig":"143"},{"size":15135,"mtime":1670519612613,"results":"153","hashOfConfig":"143"},{"size":12263,"mtime":1661509757375,"results":"154","hashOfConfig":"143"},{"size":5219,"mtime":1661509757421,"results":"155","hashOfConfig":"143"},{"size":11673,"mtime":1672210545334,"results":"156","hashOfConfig":"143"},{"size":9521,"mtime":1661509757378,"results":"157","hashOfConfig":"143"},{"size":10140,"mtime":1672210545339,"results":"158","hashOfConfig":"143"},{"size":16765,"mtime":1671021465470,"results":"159","hashOfConfig":"143"},{"size":19954,"mtime":1672210545344,"results":"160","hashOfConfig":"143"},{"size":15044,"mtime":1672210545327,"results":"161","hashOfConfig":"143"},{"size":12450,"mtime":1666664976348,"results":"162","hashOfConfig":"143"},{"size":10681,"mtime":1671095219621,"results":"163","hashOfConfig":"143"},{"size":10447,"mtime":1663049218292,"results":"164","hashOfConfig":"143"},{"size":15523,"mtime":1671091924519,"results":"165","hashOfConfig":"143"},{"size":9902,"mtime":1671091398234,"results":"166","hashOfConfig":"143"},{"size":3542,"mtime":1670478058337,"results":"167","hashOfConfig":"143"},{"size":16728,"mtime":1672221638969,"results":"168","hashOfConfig":"143"},{"size":152,"mtime":1668680100336,"results":"169","hashOfConfig":"143"},{"size":14104,"mtime":1671699482301,"results":"170","hashOfConfig":"143"},{"size":20778,"mtime":1672210545435,"results":"171","hashOfConfig":"143"},{"size":12189,"mtime":1671417798446,"results":"172","hashOfConfig":"143"},{"size":48107,"mtime":1672221638959,"results":"173","hashOfConfig":"143"},{"size":14108,"mtime":1672221638961,"results":"174","hashOfConfig":"143"},{"size":1275,"mtime":1655168677817,"results":"175","hashOfConfig":"143"},{"size":248,"mtime":1672210801184,"results":"176","hashOfConfig":"143"},{"size":1153,"mtime":1668623363379,"results":"177","hashOfConfig":"143"},{"size":3628,"mtime":1671584243447,"results":"178","hashOfConfig":"143"},{"size":56262,"mtime":1672210545354,"results":"179","hashOfConfig":"143"},{"size":1451,"mtime":1655168677805,"results":"180","hashOfConfig":"143"},{"size":1565,"mtime":1668623363384,"results":"181","hashOfConfig":"143"},{"size":360,"mtime":1668680100338,"results":"182","hashOfConfig":"143"},{"size":2807,"mtime":1671093968382,"results":"183","hashOfConfig":"143"},{"size":3856,"mtime":1656498255377,"results":"184","hashOfConfig":"143"},{"size":407,"mtime":1672210545351,"results":"185","hashOfConfig":"143"},{"size":818,"mtime":1669460972754,"results":"186","hashOfConfig":"143"},{"size":115,"mtime":1667901350091,"results":"187","hashOfConfig":"143"},{"size":1011,"mtime":1661509757298,"results":"188","hashOfConfig":"143"},{"size":951,"mtime":1661849271242,"results":"189","hashOfConfig":"143"},{"size":17788,"mtime":1659945946500,"results":"190","hashOfConfig":"143"},{"size":11452,"mtime":1655168677771,"results":"191","hashOfConfig":"143"},{"size":792,"mtime":1669460972724,"results":"192","hashOfConfig":"143"},{"size":3692,"mtime":1666664900732,"results":"193","hashOfConfig":"143"},{"size":539,"mtime":1670523734619,"results":"194","hashOfConfig":"143"},{"size":1410,"mtime":1655168677807,"results":"195","hashOfConfig":"143"},{"size":1092,"mtime":1669460972756,"results":"196","hashOfConfig":"143"},{"size":465,"mtime":1657709941429,"results":"197","hashOfConfig":"143"},{"size":697,"mtime":1655467295909,"results":"198","hashOfConfig":"143"},{"size":4661,"mtime":1666773134630,"results":"199","hashOfConfig":"143"},{"size":9229,"mtime":1672305461469,"results":"200","hashOfConfig":"143"},{"size":1150,"mtime":1655427981745,"results":"201","hashOfConfig":"143"},{"size":899,"mtime":1661509757306,"results":"202","hashOfConfig":"143"},{"size":2328,"mtime":1669615972111,"results":"203","hashOfConfig":"143"},{"size":1041,"mtime":1655168677775,"results":"204","hashOfConfig":"143"},{"size":11604,"mtime":1665209511004,"results":"205","hashOfConfig":"143"},{"size":6984,"mtime":1669184380038,"results":"206","hashOfConfig":"143"},{"size":3308,"mtime":1671674230506,"results":"207","hashOfConfig":"143"},{"size":1745,"mtime":1671082970159,"results":"208","hashOfConfig":"143"},{"size":8495,"mtime":1666665069514,"results":"209","hashOfConfig":"143"},{"size":1635,"mtime":1671082870395,"results":"210","hashOfConfig":"143"},{"size":7962,"mtime":1667901350097,"results":"211","hashOfConfig":"143"},{"size":146,"mtime":1668680100333,"results":"212","hashOfConfig":"143"},{"size":2103,"mtime":1656498255375,"results":"213","hashOfConfig":"143"},{"size":322,"mtime":1669184380014,"results":"214","hashOfConfig":"143"},{"size":5765,"mtime":1661509757472,"results":"215","hashOfConfig":"143"},{"size":76,"mtime":1661509757291,"results":"216","hashOfConfig":"143"},{"size":99,"mtime":1661509757285,"results":"217","hashOfConfig":"143"},{"size":514,"mtime":1667901350087,"results":"218","hashOfConfig":"143"},{"size":6241,"mtime":1671083039476,"results":"219","hashOfConfig":"143"},{"size":8628,"mtime":1660703894009,"results":"220","hashOfConfig":"143"},{"size":64069,"mtime":1672210545332,"results":"221","hashOfConfig":"143"},{"size":2515,"mtime":1672221638967,"results":"222","hashOfConfig":"143"},{"size":20606,"mtime":1672279036611,"results":"223","hashOfConfig":"143"},{"size":13583,"mtime":1672276456506,"results":"224","hashOfConfig":"143"},{"size":2048,"mtime":1667801045516,"results":"225","hashOfConfig":"143"},{"size":9802,"mtime":1671184904080,"results":"226","hashOfConfig":"143"},{"size":3427,"mtime":1669184380030,"results":"227","hashOfConfig":"143"},{"size":4553,"mtime":1667901350100,"results":"228","hashOfConfig":"143"},{"size":71,"mtime":1670523569851,"results":"229","hashOfConfig":"143"},{"size":336,"mtime":1669460972752,"results":"230","hashOfConfig":"143"},{"size":224,"mtime":1655467295875,"results":"231","hashOfConfig":"143"},{"size":88,"mtime":1657709847680,"results":"232","hashOfConfig":"143"},{"size":8354,"mtime":1661509757395,"results":"233","hashOfConfig":"143"},{"size":2855,"mtime":1662620045686,"results":"234","hashOfConfig":"143"},{"size":866,"mtime":1661509757289,"results":"235","hashOfConfig":"143"},{"size":1323,"mtime":1661509757292,"results":"236","hashOfConfig":"143"},{"size":944,"mtime":1661509757290,"results":"237","hashOfConfig":"143"},{"size":664,"mtime":1661509757283,"results":"238","hashOfConfig":"143"},{"size":2237,"mtime":1667901350089,"results":"239","hashOfConfig":"143"},{"size":1023,"mtime":1666596984105,"results":"240","hashOfConfig":"143"},{"size":1353,"mtime":1669184380029,"results":"241","hashOfConfig":"143"},{"size":22309,"mtime":1672306242341,"results":"242","hashOfConfig":"143"},{"size":3693,"mtime":1671154997561,"results":"243","hashOfConfig":"143"},{"size":26512,"mtime":1671689733371,"results":"244","hashOfConfig":"143"},{"size":7541,"mtime":1672210785633,"results":"245","hashOfConfig":"143"},{"size":3907,"mtime":1662111155827,"results":"246","hashOfConfig":"143"},{"size":2115,"mtime":1671020970507,"results":"247","hashOfConfig":"143"},{"size":6885,"mtime":1669795915594,"results":"248","hashOfConfig":"143"},{"size":12474,"mtime":1666664891735,"results":"249","hashOfConfig":"143"},{"size":71,"mtime":1657699049494,"results":"250","hashOfConfig":"143"},{"size":10002,"mtime":1671678301363,"results":"251","hashOfConfig":"143"},{"size":1367,"mtime":1671083005824,"results":"252","hashOfConfig":"143"},{"size":44957,"mtime":1667805178264,"results":"253","hashOfConfig":"143"},{"size":574,"mtime":1661509757287,"results":"254","hashOfConfig":"143"},{"size":574,"mtime":1661509757286,"results":"255","hashOfConfig":"143"},{"size":664,"mtime":1661509757282,"results":"256","hashOfConfig":"143"},{"size":30738,"mtime":1666664961937,"results":"257","hashOfConfig":"143"},{"size":15314,"mtime":1671176500789,"results":"258","hashOfConfig":"143"},{"size":597,"mtime":1669184380016,"results":"259","hashOfConfig":"143"},{"size":1447,"mtime":1671696759553,"results":"260","hashOfConfig":"143"},{"size":706,"mtime":1661849271238,"results":"261","hashOfConfig":"143"},{"size":885,"mtime":1663040187632,"results":"262","hashOfConfig":"143"},{"size":583,"mtime":1661509757304,"results":"263","hashOfConfig":"143"},{"size":611,"mtime":1661509757305,"results":"264","hashOfConfig":"143"},{"size":1077,"mtime":1661509757299,"results":"265","hashOfConfig":"143"},{"size":738,"mtime":1667180552622,"results":"266","hashOfConfig":"143"},{"size":4312,"mtime":1668623363356,"results":"267","hashOfConfig":"143"},{"size":8417,"mtime":1666664842042,"results":"268","hashOfConfig":"143"},{"size":7925,"mtime":1671185827233,"results":"269","hashOfConfig":"143"},{"size":14664,"mtime":1672300904792,"results":"270","hashOfConfig":"143"},{"size":3044,"mtime":1655168677819,"results":"271","hashOfConfig":"143"},{"size":2266,"mtime":1669460972745,"results":"272","hashOfConfig":"143"},{"size":4418,"mtime":1669632776044,"results":"273","hashOfConfig":"143"},{"size":3032,"mtime":1669460972743,"results":"274","hashOfConfig":"143"},{"size":4595,"mtime":1668623363369,"results":"275","hashOfConfig":"143"},{"size":1223,"mtime":1666935452033,"results":"276","hashOfConfig":"143"},{"size":4219,"mtime":1667370458174,"results":"277","hashOfConfig":"143"},{"size":4076,"mtime":1669796393335,"results":"278","hashOfConfig":"143"},{"size":372,"mtime":1657709885011,"results":"279","hashOfConfig":"143"},{"size":532,"mtime":1655467295881,"results":"280","hashOfConfig":"143"},{"size":4251,"mtime":1663035379306,"results":"281","hashOfConfig":"143"},{"size":431,"mtime":1655168677773,"results":"282","hashOfConfig":"143"},{"size":846,"mtime":1655168677772,"results":"283","hashOfConfig":"143"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"287"},"1n0gb2o",{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"287"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"287"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"287"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"287"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"287"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"287"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"287"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"287"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"287"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"287"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"287"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"287"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"287"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"287"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"287"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"287"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"287"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"287"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"287"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"287"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"287"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"287"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"287"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"287"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"287"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"287"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"287"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"287"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"287"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"287"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"287"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"287"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"287"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"287"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"287"},{"filePath":"447","messages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"287"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"287"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"287"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"287"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"287"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"287"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"287"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"287"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"287"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"287"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"287"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"287"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"287"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"287"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"287"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"287"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"287"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"287"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"287"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"287"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"287"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"287"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"287"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"287"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"287"},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"287"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"287"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"287"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"287"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"287"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":56,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"287"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"287"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"287"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582","usedDeprecatedRules":"287"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585","usedDeprecatedRules":"287"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"287"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"287"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"287"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"287"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"287"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"287"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"287"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"287"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"287"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"287"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620","usedDeprecatedRules":"287"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"287"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"287"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"287"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"287"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"287"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"287"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"287"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"287"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"287"},"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js",["657"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n",["658","659"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js",["660","661"],"import React, { Component } from 'react'\r\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\r\nimport Home from './pages/home/index'\r\n\r\nimport MaxMinReturn from './utils/maxminreturn/MaxMinReturn'\r\n\r\nimport EditPetInfo from './pages/editPetInfo/index'\r\nimport DoctorAddPet from './pages/doctorAddPet/index'\r\n//登录部分\r\nimport SignIn from './pages/signIn/index'\r\nimport ForgotPassword from './pages/forgotPassword/index'\r\nimport ResetPassword from './pages//resetPassword/index'\r\nimport ScanCodeLogin from './pages/scanCodeLogin/index'\r\n//邮箱注册的整体部分\r\nimport VetPrifile from './pages/signUpVetProfile'\r\nimport JoinOrganizationByOption from './pages/joinOrganizationByOption/index'\r\nimport VerifyEmail from './pages/signUpVerifyEmail/index'\r\nimport NewOrganization from './pages/newOrganization/index'\r\nimport InviteTeam from './pages/inviteTeam/index'\r\n//options\r\nimport Help from './pages/help/index'\r\nimport Unassigned from './pages/unassigned/index'\r\nimport Settings from './pages/settings/index'\r\nimport AdvancedSettings from './pages/advancedSettings/index'\r\nimport PetAndParents from './pages/petAndParents/index'\r\nimport EditParent from './pages/editParent/index'\r\nimport MyAccount from './pages/myAccount/index'\r\nimport Veterinarians from './pages/admin_VetProfile/index'\r\nimport AddDevice from './pages/addDevice/index'\r\nimport ConnectWorkplace from './pages/connectWorkplace'\r\nimport NewOrg from './pages/newOrg/index'\r\nimport Team from './pages/team/index'\r\nimport MainBody from './pages/mainbody'\r\nimport Subscriptions from './pages/subscriptions'\r\nimport addScheduledPet from './pages/addScheduledPet'\r\nimport { setSystemTypeFun } from './store/actions'\r\nimport { connect } from 'react-redux'\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.getSystemType()\r\n  }\r\n  getSystemType = () => {\r\n    var agent = navigator.userAgent.toLowerCase();\r\n    console.log('agent', agent);\r\n    var isMac = /macintosh|mac os x/i.test(navigator.userAgent);\r\n    this.props.setSystemTypeFun(`${isMac ? \"mac\" : \"windows\"}`)\r\n    // this.props.setSystemTypeFun(`windows`)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          {/* <Route exact path=\"/\" component={addScheduledPet} /> */}\r\n\r\n          <Route exact path=\"/page7\" component={MaxMinReturn} />\r\n          <Route exact path=\"/page9\" component={EditPetInfo} />\r\n          <Route exact path=\"/MainBody\" component={MainBody} />\r\n          <Route exact path=\"/page11\" component={SignIn} />\r\n          <Route exact path=\"/user/login/forgotPassword\" component={ForgotPassword} />\r\n          <Route exact path=\"/user/login/resetPassword\" component={ResetPassword} />\r\n          <Route exact path=\"/user/login/scanCodeLogin\" component={ScanCodeLogin} />\r\n\r\n          <Route exact path=\"/uesr/logUp/VetPrifile\" component={VetPrifile} />\r\n          <Route exact path=\"/uesr/logUp/JoinOrganizationByOption\" component={JoinOrganizationByOption} />\r\n          <Route exact path=\"/uesr/logUp/VerifyEmail\" component={VerifyEmail} />\r\n          <Route exact path=\"/uesr/logUp/NewOrganization\" component={NewOrganization} />\r\n          {/* <Route exact path=\"/uesr/logUp/InviteTeam\" component={InviteTeam} /> */}\r\n\r\n\r\n          <Route exact path=\"/pet/doctorAddPet\" component={DoctorAddPet} />\r\n          <Route exact path=\"/menuOptions/InviteTeam\" component={InviteTeam} />\r\n          <Route exact path=\"/menuOptions/help\" component={Help} />\r\n          <Route exact path=\"/menuOptions/unassigned\" component={Unassigned} />\r\n          <Route exact path=\"/menuOptions/settings\" component={Settings} />\r\n          <Route exact path=\"/menuOptions/subscriptions\" component={Subscriptions} />\r\n          <Route exact path=\"/menuOptions/advancedsettings\" component={AdvancedSettings} />\r\n          <Route exact path=\"/menuOptions/petAndParents\" component={PetAndParents} />\r\n          <Route exact path=\"/menuOptions/editParent\" component={EditParent} />\r\n          <Route exact path=\"/MyAccount\" component={MyAccount} />\r\n          <Route exact path=\"/menuOptions/veterinarians\" component={Veterinarians} />\r\n          <Route exact path=\"/menuOptions/AddDevice\" component={AddDevice} />\r\n          <Route exact path=\"/menuOptions/ConnectWorkplace\" component={ConnectWorkplace} />\r\n          <Route exact path=\"/menuOptions/NewOrg\" component={NewOrg} />\r\n          <Route exact path=\"/menuOptions/Team\" component={Team} />\r\n\r\n\r\n\r\n        </Switch>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n\r\n  }),\r\n  { setSystemTypeFun }\r\n)(App)\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx",["662"],"import React, { Component, } from 'react'\nimport {\n  Button,\n  message,\n  Radio,\n} from 'antd';\n\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px, mTop, win } from '../../utils/px'\nimport MinClose from '../../utils/minClose/MinClose';\nimport { version } from '../../utils/appversion';\nimport logo from '../../assets/images/mella.png'\nimport './index.less';\nimport { connect } from 'react-redux';\n\nlet storage = window.localStorage;\n//定义变量:连续点击了几次logo\nlet logoClick = 0;\n//定义变量:点击logo的时间\nlet logoTime = 0;\nlet ipcRenderer = window.electron.ipcRenderer\n\nclass Home extends Component {\n  state = {\n    imgurl: '',\n    size: { width: 0, height: 0 }\n  }\n  componentDidMount() {\n    ipcRenderer.send('close-loading-window', 1)\n    ipcRenderer.send('small', win())\n    storage.measurepatientId = '';\n    temporaryStorage.logupVetInfo = {}\n    console.log('----===----', this.props.systemType);\n  }\n\n\n\n  _signUP = () => {\n    console.log('1');\n    this.props.history.push('/uesr/logUp/VetPrifile')\n  }\n\n  _openUtils = () => {\n    console.log('点击来了', logoClick);\n    if (new Date() - logoTime > 500) {\n      logoClick = 0;\n      logoTime = new Date();\n\n    } else {\n      logoClick++;\n      logoTime = new Date();\n      if (logoClick >= 8) {\n        logoClick = 0;\n        ipcRenderer.send('openDevTools', true)\n      }\n    }\n  }\n  render() {\n\n    let daohang = this.props.systemType === 'mac' ? 'daohang mac' : 'daohang windows'\n\n    return (\n      <div id=\"home\">\n        <div className={daohang} style={{ paddingTop: px(10), paddingRight: px(20), }}>\n          <MinClose />\n        </div>\n        <div className='flex refresh' style={{ alignItems: 'flex-end', paddingRight: px(20) }}>\n          <div className='flex' style={{ flexDirection: 'row', paddingTop: px(20), paddingRight: px(18), color: '#700B33', cursor: 'pointer' }}>\n            V{version}\n          </div>\n        </div>\n        <div className=\"heard\" >\n          <div className=\"logo\"\n            onClick={this._openUtils}\n          >\n            <img src={logo} alt=\"\" />\n          </div>\n        </div>\n        <div className=\"button\" style={{ marginBottom: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/page11') }}\n            className=\"siginInBtn\"\n          >\n            Sign In\n          </Button>\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>New to Mella? <p onClick={this._signUP} style={{textDecoration: 'underline' }}>Sign Up</p></div>\n        <div className=\"create\" style={{ marginBottom: mTop(20), marginTop: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            // onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Quick Start\n          </Button>\n          {/* <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Create an Account\n          </Button> */}\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>\n          <p style={{ width: '350px', fontSize: '18px', color: '#ffc4db', textAlign: 'left' }}>\n          <Radio></Radio>I have read and agreed to the <p></p>\n           <span style={{ marginLeft: '22px', textDecoration: 'underline', color: '#fff' }}>Terms and Services</span> and <span style={{ color: '#fff', textDecoration: 'underline' }}>Privacy Policy</span>\n          </p>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(Home)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx",["663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx",["679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694"],"import React, { Component } from 'react'\r\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\r\nimport { createFromIconfontCN, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport dog from '../../assets/images/pinkdog.png'\r\nimport cat from '../../assets/images/pinkcat.png'\r\nimport redDog from '../../assets/images/reddog.png'\r\nimport redCat from '../../assets/images/redcat.png'\r\nimport redother from '../../assets/images/redother.png'\r\nimport other from '../../assets/images/other.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport Close from '../../assets/img/close.png'\r\nimport nextImg from '../../assets/img/nextImg.png'\r\nimport dui from '../../assets/images/dui.png'\r\nimport female from '../../assets/images/female.png'\r\nimport male from '../../assets/images/male.png'\r\n\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport electronStore from '../../utils/electronStore';\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\nimport Button from '../../utils/button/Button';\r\nimport Avatar from '../../components/avatar/Avatar';\r\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { petDetailInfoFun } from '../../store/actions';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  checkPatientId,\r\n  getPetInfoByPatientIdAndPetId,\r\n  updatePetInfo,\r\n  deletePetByPetId,\r\n  updatePetInfo1\r\n} from '../../api/mellaserver/pet';\r\nimport {\r\n  listDoctorsByAdmin\r\n} from '../../api/mellaserver/organization';\r\n\r\nimport './index.less';\r\nimport _ from 'lodash';\r\nimport MinClose from '../../utils/minClose/MinClose';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nclass EditPetInfo extends Component {\r\n  state = {\r\n    dogImg: dog,\r\n    catImg: cat,\r\n    otherImg: other,\r\n    selectWZ: '',\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    api: '',\r\n    id: '',\r\n    seleceID: '',//医生id\r\n    petSpecies: 0,\r\n    unit: 1,\r\n    gender: 0,\r\n    isMix: false,\r\n    imageId: -1,\r\n    imgurl: '',\r\n    breedArr: [],\r\n    petSpeciesBreedId: '',\r\n    dogData: [],\r\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n    patientId: '',\r\n    petName: '',\r\n    petId: '',\r\n    lastName: '',\r\n    firstName: '',\r\n    breedName: '',\r\n    initpetName: '',\r\n    initpetId: '',\r\n    initlastName: '',\r\n    initfirstName: '',\r\n    initbreedName: '',\r\n    spin: false,\r\n    dogBreed: [],\r\n    catBreed: [],\r\n    oldPatientId: '',\r\n    searchBreed: '',\r\n    selectBreedJson: {},\r\n    confirmSelectBreedJson: {},\r\n    selectBreed: false,\r\n    doctorArr: [],\r\n    selectUser: false,\r\n    selectUserJson: {},\r\n    selectUserId: -1,\r\n    confirmSelectUserJson: {},\r\n    petUrl: '',\r\n    deletePetModalVisible: false,\r\n    rfid: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    let { petDetailInfo } = this.props\r\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\r\n    if (!isWalkIn) {\r\n      //判断是医生诊断宠物还是用户私有宠物\r\n      if (this.props.history.location?.pet) {\r\n        this.setState({\r\n          patientId: this.props.history.location?.pet?.patientId,\r\n          petId: this.props.history.location.pet?.petId,\r\n          oldPatientId: this.props.history.location?.pet?.patientId,\r\n          breedName: this.props.history.location?.pet?.breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      } else {\r\n        if (!patientId || patientId === 'unknown') {\r\n          patientId = null\r\n        }\r\n        this.setState({\r\n          patientId,\r\n          petId,\r\n          oldPatientId: patientId,\r\n          breedName: breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      }\r\n    }\r\n    let dogBreed = electronStore.get('dogBreed') || []\r\n    let catBreed = electronStore.get('catBreed') || []\r\n    this.setState({\r\n      dogBreed,\r\n      catBreed\r\n    })\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //获取工作场所\r\n    // this.getUser()\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  //获取工作场所\r\n  getUser = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n            let json = {\r\n              insertedAt: createTime,\r\n              breedName: `${lastName} ${firstName}`,\r\n              petSpeciesBreedId: userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  //获取宠物详情信息\r\n  _getPetInfo = () => {\r\n    let { patientId, petId } = this.state\r\n    let datas = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.org = storage.lastOrganization\r\n    }\r\n    if (patientId && patientId !== 'undefined') {\r\n      datas.patientId = patientId\r\n    }\r\n    if (petId) {\r\n      datas.petId = petId\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    getPetInfoByPatientIdAndPetId(datas)\r\n      .then(res => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            if (res.data[i].petId === this.state.petId) {\r\n              datas = res.data[i]\r\n              break\r\n            }\r\n          }\r\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId, rfid } = datas\r\n          if (isMix !== true) {\r\n            isMix = false\r\n          }\r\n          lastName = isNull(lastName)\r\n          firstName = isNull(firstName)\r\n          let confirmSelectBreedJson = {}\r\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\r\n            confirmSelectBreedJson = {\r\n              name: breedName,\r\n              petSpeciesBreedId\r\n            }\r\n          }\r\n          // url = isNull(url)\r\n          if (birthday != null) {\r\n            birthday = moment(birthday).format('MMMM D, YYYY')\r\n          }\r\n          else {\r\n            birthday = ''\r\n          }\r\n          if (gender === null || isNaN(gender) || `${gender}` === 'null' || `${gender}` === 'NaN') {\r\n            gender = 0\r\n          }\r\n          if (weight) {\r\n            weight = (weight * 2.2046).toFixed(1)\r\n          } else {\r\n            weight = ''\r\n          }\r\n          this.setState({\r\n            petId,\r\n            petName,\r\n            lastName,\r\n            firstName,\r\n            breedName,\r\n            isMix,\r\n            birthday,\r\n            weight,\r\n            imgurl: url,\r\n            gender,\r\n            initpetName: petName,\r\n            initlastName: lastName,\r\n            initfirstName: firstName,\r\n            confirmSelectBreedJson,\r\n            petSpeciesBreedId,\r\n            rfid\r\n          })\r\n        } else {\r\n          message.destroy()\r\n          message.error('data load failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n        message.destroy()\r\n        message.error('data load failed')\r\n      })\r\n    const isNull = (value) => {\r\n      if (value === null || isNaN(value) || `${value}` === 'null' || `${value}` === 'NaN') {\r\n        return ''\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n  //选择宠物默认品种\r\n  selectWZ = (val) => {\r\n    let { catBreed, dogBreed } = this.state\r\n    if (this.state.selectWZ !== val) {\r\n      switch (val) {\r\n        case 'dog':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: redDog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(dogBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultdog\",\r\n              petSpeciesBreedId: 12001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'cat':\r\n          this.setState({\r\n            catImg: redCat,\r\n            dogImg: dog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(catBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultcat\",\r\n              petSpeciesBreedId: 11001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'other':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: dog,\r\n            otherImg: redother,\r\n            selectWZ: val,\r\n            breedArr: [],\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultother\",\r\n              petSpeciesBreedId: 13001\r\n            }\r\n          })\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  //宠物详情第一列\r\n  _petSpecies = () => {\r\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n    this.avatar = imgurl ? imgurl : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\"\r\n        style={{ marginTop: mTop(30) }}\r\n      >\r\n        <div className=\"l\">\r\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n          <div className=\"selectSpecies\">\r\n            <ul>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog'\r\n\r\n                    onClick={() => { this.selectWZ('dog') }}>\r\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Dog\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Cat\r\n                </div>\r\n              </li>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Other\r\n                </div>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={imgurl ? imgurl : selectphoto} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                if (val.url) {\r\n                  this.setState({\r\n                    petUrl: val.url\r\n                  })\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //宠物详情第二列\r\n  _petName = () => {\r\n    let birthday = this.state.birthday\r\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Name</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.initpetName}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n                  initpetName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p >Pet Birthday</p>\r\n          <div className=\"infoInput\" >\r\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n              document.getElementById('calendar').style.display = 'block'\r\n            }}>{this.state.birthday}</p>\r\n            <div className=\"calendar\" id=\"calendar\">\r\n              <Calendar\r\n                fullscreen={false}\r\n                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n                  const start = 0;\r\n                  const end = 12;\r\n                  const monthOptions = [];\r\n\r\n                  const current = value.clone();\r\n                  const localeData = value.localeData();\r\n                  const months = [];\r\n                  for (let i = 0; i < 12; i++) {\r\n                    current.month(i);\r\n                    months.push(localeData.monthsShort(current));\r\n                  }\r\n\r\n                  for (let index = start; index < end; index++) {\r\n                    monthOptions.push(\r\n                      <Select.Option className=\"month-item\" key={`${index}`}>\r\n                        {months[index]}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  const month = value.month();\r\n\r\n                  const year = value.year();\r\n                  const options = [];\r\n                  for (let i = year - 10; i < year + 10; i += 1) {\r\n                    options.push(\r\n                      <Select.Option key={i} value={i} className=\"year-item\">\r\n                        {i}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div style={{ padding: 8 }}>\r\n                      <Row gutter={8}>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            className=\"my-year-select\"\r\n                            onChange={(newYear) => {\r\n                              const now = value.clone().year(newYear);\r\n                              onChange(now);\r\n                            }}\r\n                            value={String(year)}\r\n                          >\r\n                            {options}\r\n                          </Select>\r\n                        </Col>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            value={String(month)}\r\n                            onChange={(selectedMonth) => {\r\n                              const newValue = value.clone();\r\n                              newValue.month(parseInt(selectedMonth, 10));\r\n                              onChange(newValue);\r\n                            }}\r\n                          >\r\n                            {monthOptions}\r\n                          </Select>\r\n                        </Col>\r\n                        {/* <Col>\r\n                          <div className=\"btn\" onClick={() => {\r\n                            document.getElementById('calendar').style.display = 'none'\r\n                          }}>\r\n                            Choose this date\r\n                          </div>\r\n\r\n                        </Col> */}\r\n                      </Row>\r\n                    </div>\r\n                  );\r\n                }}\r\n                value={birthdayValue}\r\n                onSelect={(value) => {\r\n                  console.log(value);\r\n                  this.setState({\r\n                    birthday: moment(value).format('MMMM D, YYYY')\r\n                  })\r\n                  document.getElementById('calendar').style.display = 'none'\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //宠物详情第三列\r\n  _ownName = () => {\r\n    let { confirmSelectUserJson } = this.state\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\r\n      >\r\n        <div className=\"l\">\r\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.patientId}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                  intFlog: true\r\n                })\r\n                if (item.target.value !== errPatientId) {\r\n                  message.destroy()\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.patientId === this.state.oldPatientId) {\r\n                  return\r\n                }\r\n                if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n                  message.error('The pet ID cannot be empty');\r\n                  return\r\n                }\r\n                let params = {\r\n                  patientId: this.state.patientId ? this.state.patientId : null,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n                if (storage.lastOrganization) {\r\n                  params.organizationId = storage.lastOrganization\r\n                }\r\n                checkPatientId(params)\r\n                  .then(res => {\r\n                    if (res.flag === false) {\r\n                      errPatientId = params.patientId\r\n                      message.error('This patient ID is already occupied, please change to a new one');\r\n                    } else {\r\n                      errPatientId = '';\r\n                      if (!this.props.history.location?.pet && this.state.patientId !== null) {\r\n                        message.success('This pet ID will work');\r\n                      }\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                  })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\r\n            onClick={() => {\r\n              this.setState({\r\n                // selectUser: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //选择宠物详细品种\r\n  _select = (value, data) => {\r\n    console.log(value, data);  //value的值为id\r\n    this.setState({\r\n      petSpeciesBreedId: value,\r\n      breedName: data.children\r\n    })\r\n  }\r\n  //品种判断\r\n  _primaryBreed = () => {\r\n    let { breedName, confirmSelectBreedJson } = this.state;\r\n\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\r\n        <div className=\"l\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              this.setState({\r\n                selectBreed: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>\r\n              {\r\n                confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'\r\n              }\r\n            </div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"r\" >\r\n          <div className=\"max\">\r\n            Mix?\r\n            <div className=\"selected\"\r\n              onClick={() => this.setState({\r\n                isMix: !this.state.isMix\r\n              })}\r\n            >\r\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"l\">\r\n          <p >RFID</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.rfid}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  rfid: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //体重\r\n  _weight = () => {\r\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n    switch (this.state.unit) {\r\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n    }\r\n    switch (this.state.gender) {\r\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n    }\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Weight</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.weight}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  weight: item.target.value\r\n                })\r\n              }}\r\n            />\r\n            <div className=\"ibKg\">\r\n              <div className=\"ibs\"\r\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                onClick={() => {\r\n                  if (this.state.unit === 2) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight * 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                }}\r\n              >Ibs</div>\r\n              <div className=\"kgs\"\r\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                onClick={() => {\r\n\r\n                  if (this.state.unit === 1) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight / 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                  this.setState({ unit: 2 })\r\n                }}\r\n              >kgs</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n          <div className=\"gender\">\r\n            <div className=\"selectGender\">\r\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                <div className=\"femaleCiral\"\r\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 1 })}\r\n                >\r\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                </div>\r\n                Female\r\n              </div>\r\n              <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                <div className=\"maleCiral\"\r\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 0 })}\r\n                >\r\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n                Male\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //确认删除弹窗\r\n  confirm = () => {\r\n    Modal.confirm({\r\n      title: 'Delete',\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: 'Deleting this pet also deletes all health records associated with this pet. Are you sure?',\r\n      centered: 'true',\r\n      onOk: this.deletPet\r\n    });\r\n  };\r\n  //删除宠物\r\n  deletPet = () => {\r\n    let data = {\r\n      petId: this.state.petId\r\n    }\r\n    deletePetByPetId(data)\r\n      .then(ref => {\r\n        if (ref.flag === true) {\r\n          message.success('Successfully Delete');\r\n          this.props.petDetailInfoFun({});\r\n          this.props.history.goBack();\r\n        } else {\r\n          message.error('Fail to Delete!');\r\n        }\r\n      })\r\n  }\r\n  //更新宠物信息\r\n  save = () => {\r\n    let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson, rfid } = this.state\r\n    if (unit === 1) {\r\n      weight = (0.45359 * weight).toFixed(2)\r\n    }\r\n    let data = {}\r\n\r\n    if (this.state.patientId === this.state.oldPatientId) {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n      }\r\n    } else {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n        patientId: this.state.patientId,\r\n      }\r\n    }\r\n    if (birthday) {\r\n      data.birthday = moment(birthday).format('YYYY-MM-DD')\r\n    }\r\n    if (rfid) {\r\n      data.rfid = rfid\r\n    }\r\n    if (imageId !== -1) {\r\n      data.imageId = imageId\r\n    }\r\n    if (confirmSelectBreedJson.name) {\r\n      data.breedName = confirmSelectBreedJson.name\r\n    }\r\n    if (confirmSelectUserJson.petSpeciesBreedId) {\r\n      data.userId = confirmSelectUserJson.petSpeciesBreedId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      data.organizationId = storage.lastOrganization\r\n    }\r\n    if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n      message.error('The pet ID cannot be empty');\r\n    } else {\r\n      this.setState({\r\n        spin: true\r\n      })\r\n      //判断是用户更新宠物还是医生更新宠物\r\n      if (this.props.history.location?.pet) {\r\n        updatePetInfo1(this.props.history.location.userId, petId, data)\r\n          .then((res) => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              message.success('update successfully');\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            message.error(err)\r\n          })\r\n      } else {\r\n        updatePetInfo(petId, data)\r\n          .then(res => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              try {\r\n                if (storage.identity === '3') {\r\n                  let data = JSON.parse(storage.doctorExam)\r\n                  data.petName = petName\r\n                  data.weight = weight\r\n                  data.gender = gender\r\n                  data.patientId = this.state.patientId\r\n                  if (birthday) {\r\n                    data.age = moment(new Date()).diff(moment(birthday), 'years')\r\n                  }\r\n                  if (confirmSelectBreedJson.name) {\r\n                    data.breed = confirmSelectBreedJson.name\r\n                  }\r\n                  if (this.state.petUrl) {\r\n                    data.url = this.state.petUrl\r\n                  }\r\n\r\n                  storage.doctorExam = JSON.stringify(data)\r\n                }\r\n              } catch (error) {\r\n\r\n              }\r\n              this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId, weight: weight })\r\n              this.props.history.goBack()\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n          })\r\n      }\r\n    }\r\n\r\n  }\r\n  render() {\r\n    const { closeColor, closebgc, minbgc } = this.state\r\n    return (\r\n      <div id=\"editPetInfo\">\r\n        {/* 头部 */}\r\n        <div className=\"close1\">\r\n          {/* 菜单 */}\r\n          <div className=\"menu\">\r\n            {this.props.systemType === 'mac' &&\r\n              <div style={{ marginRight: '8px' }}>\r\n                <MinClose />\r\n              </div>\r\n            }\r\n            <MyIcon\r\n              type='icon-fanhui4'\r\n              className=\"icon\"\r\n              onClick={() => {\r\n                if (!_.isEmpty(this.props.history.location.userId)) {\r\n                  this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n                } else {\r\n                  this.props.history.goBack()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"text\">mella</div>\r\n          {this.props.systemType !== 'mac' ?\r\n            <div className='maxmin'>\r\n              <div\r\n                className=\"min iconfont icon-64\"\r\n                onClick={this._min}\r\n                onMouseEnter={this._minMove}\r\n                onMouseLeave={this._minLeave}\r\n                style={{ backgroundColor: minbgc }}\r\n              ></div>\r\n\r\n              <div\r\n                className=\"max iconfont icon-guanbi2\"\r\n                onClick={this._close}\r\n                onMouseEnter={this._closeMove}\r\n                onMouseLeave={this._closeLeave}\r\n                style={{ backgroundColor: closebgc, color: closeColor }}\r\n              ></div>\r\n            </div> :\r\n            <div style={{ width: '60px' }}></div>\r\n          }\r\n\r\n        </div>\r\n        <div className=\"editPetInfo_top\">\r\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\r\n          {this._petSpecies()}\r\n          {this._petName()}\r\n          {this._ownName()}\r\n          {this._primaryBreed()}\r\n          {this._weight()}\r\n        </div>\r\n        <div className=\"editPetInfo_foot\">\r\n          <div className='deletePet'\r\n            onClick={this.confirm}\r\n          >\r\n            Delete Pet\r\n          </div>\r\n          <div className=\"save\"\r\n            onClick={this.save}\r\n          >Save Changes</div>\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n        {\r\n          this.state.selectBreed && (\r\n            <SelectPetBreed\r\n              visible={this.state.selectBreed}\r\n              destroyOnClose\r\n              width={400}\r\n              value={this.state.petSpeciesBreedId}\r\n              onSelect={(value) => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                  selectBreedJson: value,\r\n                  petSpeciesBreedId: value.petSpeciesBreedId,\r\n                  confirmSelectBreedJson: value,\r\n                })\r\n              }}\r\n              onCancel={() => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                })\r\n              }}\r\n            />\r\n          )\r\n        }\r\n        {\r\n          this.state.selectUser && (\r\n            <MyModal\r\n              visible={this.state.selectUser}\r\n              element={\r\n                <div className='myfindOrg' >\r\n                  <div className=\"orgHeard\">\r\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                      <div>\r\n                      </div>\r\n                      <div\r\n                        onClick={() => {\r\n                          this.setState({\r\n                            selectUser: false,\r\n                            selectUserJson: {}\r\n                          })\r\n                        }}\r\n                      >\r\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text\" >Choose Parents</div>\r\n                    <div className=\"searchBox\">\r\n                      <Input\r\n                        placeholder=\" &#xe61b; Search name\"\r\n                        bordered={false}\r\n                        allowClear={true}\r\n                        value={this.state.searchBreed}\r\n                        onChange={(item) => {\r\n\r\n                          this.setState({\r\n                            searchBreed: item.target.value\r\n                          })\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"list\" >\r\n                    <PhoneBook\r\n                      listDate={this.state.doctorArr}\r\n                      confirmSelectBreed={this.state.selectUserId}\r\n                      selectFun={(val) => {\r\n                        this.setState({\r\n                          selectUserJson: val,\r\n                          selectUserId: val.petSpeciesBreedId\r\n                        })\r\n                      }}\r\n                      searchText={this.state.searchBreed}\r\n                    />\r\n                  </div>\r\n                  <div className=\"foot\">\r\n                    <Button\r\n                      text={'Select'}\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          confirmSelectUserJson: this.state.selectUserJson,\r\n                          selectUser: false\r\n                        })\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n    systemType: state.systemReduce.systemType\r\n  }),\r\n  { petDetailInfoFun }\r\n)(EditPetInfo)\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx",["695","696","697","698","699","700","701"],"import React, { Component } from \"react\";\nimport { Input, message, Spin } from \"antd\";\nimport {\n  createFromIconfontCN,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\n\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\nimport dui from \"./../../assets/images/dui.png\";\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back_hui.png\";\nimport back_hong from \"./../../assets/img/back-hui.png\";\n\nimport { getLoginQRcode, loginWithQRcode, mellaLogin } from \"../../api\"\n\nimport temporaryStorage from \"../../utils/temporaryStorage\";\nimport { px, win } from \"../../utils/px\";\nimport MinClose from \"./../../utils/minClose/MinClose\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\nimport { addLogin } from \"../../utils/axios\";\n\nimport \"./index.less\";\nimport { connect } from \"react-redux\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nlet storage = window.localStorage;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\n});\nlet num = 0;\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\nlet isSign = true;\n\nclass SignIn extends Component {\n  state = {\n    isRemember: false,\n    email: \"\",\n    hash: \"\",\n    isCode: false,\n    baseUrl: \"\",\n    QRToken: \"\",\n    isExpired: false, //二维码是否过期\n    spin: false,\n    isLoadQrCode: false, //是否正在加载二维码\n  };\n  componentDidMount() {\n    isSign = true;\n    storage.lastOrganization = \"\";\n    //通知main.js渲染一个small窗口\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"small\", win());\n    //如果有保存的账号密码则展示出来\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\n      let data = storage.signIn;\n      data = JSON.parse(data);\n      this.setState({\n        email: data.email,\n        hash: data.hash,\n        QRToken: \"\",\n      });\n    }\n    //是否勾选了保持登录\n    if (storage.isRemember !== undefined) {\n      let isRemember = storage.isRemember === \"true\" ? true : false;\n      this.setState({\n        isRemember,\n      });\n    }\n    // 监听分辨率是否改变\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //清空本地的注册界面的信息\n    temporaryStorage.logupVetInfo = {};\n    this._getQRCode();\n  }\n  componentWillUnmount() {\n    isSign = false;\n    this.timer && clearInterval(this.timer);\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    // ipcRenderer.send('small')\n    ipcRenderer.send(\"small\", win());\n    this.setState({});\n  };\n  _getQRCode = () => {\n    this.setState({\n      isLoadQrCode: true,\n    });\n    num = 0;\n\n    getLoginQRcode()\n      // addQRCode()\n      .then((res) => {\n        message.destroy();\n\n        console.log(\"---获取二维码\", res);\n        if (res.flag === true) {\n          this.setState({\n            baseUrl: res.data.QRcode,\n            QRToken: res.data.QRToken,\n            isLoadQrCode: false,\n          });\n          this.timer = setInterval(() => {\n            if (!isSign) {\n              this.timer && clearInterval(this.timer);\n            }\n            num++;\n            console.log(\"lunxin\");\n            this._polling();\n\n            if (num > 200) {\n              //超过280秒则去显示二维码过期，要重新获取\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n            }\n          }, 2000);\n        } else {\n          message.error(\"Failed to obtain QR code\", 10);\n          this.setState({\n            isLoadQrCode: false,\n          });\n        }\n      })\n      .catch((err) => {\n        message.error(\"Failed to obtain QR code\", 10);\n        this.setState({\n          isLoadQrCode: false,\n        });\n        console.log(err);\n      });\n  };\n  //轮询\n  _polling = () => {\n\n    loginWithQRcode(this.state.QRToken)\n      .then((res) => {\n        console.log(\"轮询结果：\", res);\n        if (res.flag === true) {\n          switch (res.code) {\n            case 10001:\n              console.log(\"未扫码\");\n\n              break;\n\n            case 11033:\n              console.log(\"扫码未点击登录\");\n              this.timer && clearInterval(this.timer);\n              temporaryStorage.QRToken = this.state.QRToken;\n              let { name, url } = res.data;\n              this.props.history.replace({\n                pathname: \"/user/login/scanCodeLogin\",\n                params: { name, url },\n              });\n\n              break;\n\n            case 11023:\n              console.log(\"过期\");\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n\n              break;\n\n            default:\n              break;\n          }\n        }\n        console.log(\"code\", res.code);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //登录接口\n  _continue = () => {\n    const { email, hash, isRemember } = this.state;\n\n    message.destroy();\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: \"1\",\n    };\n    if (email === \"\") {\n      message.error(\"please input your email\");\n      return;\n    }\n    if (hash === \"\") {\n      message.error(\"please input your password\");\n      return;\n    }\n    console.log(params);\n    this.setState({\n      spin: true,\n    });\n    mellaLogin(params)\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          spin: false,\n        });\n        if (res.status && res.status === 404) {\n          message.error(\"system error\");\n          return;\n        }\n        if (res.status === 500) {\n          message.error(\"system error\");\n\n          return;\n        }\n        if (res.code === 10001 && res.msg === \"账号错误\") {\n          message.error(\"Account error\");\n          return;\n        }\n        if (res.code === 10002 && res.msg === \"密码错误\") {\n          message.error(\"wrong password\");\n          return;\n        }\n        if (\n          res.code === 0 &&\n          res.msg === \"success\" &&\n          res.success.roleId === 1\n        ) {\n          message.error(\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\n          message.error(\n            \"The account is restricted, please contact the management\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10003) {\n          message.error(\"The password or email is incorrect, please re-enter\");\n          return;\n        }\n\n        if (res.code === 0 && res.msg === \"success\") {\n          this.timer && clearInterval(this.timer);\n          console.log(\"账号密码正确，登录进去了\");\n          let { userWorkplace, lastOrganization, token, firstName, lastName } = res.success;\n          storage.token = token;\n          storage.userId = \"\";\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          if (isRemember === true) {\n            storage.signIn = data;\n          } else {\n            storage.signIn = \"\";\n          }\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId;\n          storage.roleId = res.success.roleId;\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = \"\";\n          storage.defaultCurrent = \"\";\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace);\n            let connectionKey = \"\";\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n\n                  }\n                  storage.orgName = element.organizationEntity.name\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n          } else {\n            storage.userWorkplace = \"\";\n            storage.connectionKey = \"\";\n          }\n          console.log('storage.orgName', storage.orgName);\n          this.props.history.push(\"/MainBody\");\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          spin: false,\n        });\n        console.log(err);\n      });\n  };\n\n  _signUp = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\n  };\n  _change = () => {\n    let { isCode } = this.state;\n    message.destroy();\n    if (isCode === false) {\n      this._getQRCode();\n    } else {\n      this.timer && clearInterval(this.timer);\n      num = 0;\n      this.setState({\n        isExpired: false,\n      });\n    }\n    this.setState({ isCode: !this.state.isCode });\n  };\n  //二维码界面\n  _qrCode = () => {\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\n\n    if (!isExpired) {\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{\n              width: px(120),\n              height: px(120),\n              opacity: imgOpacity,\n            }}\n          />\n          {isLoadQrCode && (\n            // true &&\n\n            <div className=\"err\">\n              <Spin\n                indicator={antIcon}\n                tip=\"Loading...\"\n                style={{ fontSize: 16, color: \"#e1206d\" }}\n              />\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\n          />\n\n          <div className=\"err\">\n            <div className=\"errText\">QR code has expired</div>\n            <div\n              className=\"btn\"\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\n              onClick={this.refresh}\n            >\n              Refresh\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n  //点击refresh按钮\n  refresh = () => {\n    this.setState({\n      isExpired: false,\n    });\n    num = 0;\n    this._getQRCode();\n  };\n  beforeDiv = () => {\n    return <img src={back_hong} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  heard = () => {\n    if (this.props.systemType === 'mac') {\n      return (\n        <div className=\"macheard\"  >\n          <div className=\"macheardson\" >\n            {/* 根据ppt修改去掉，并向下移 */}\n            {/* <MinClose /> */}\n            <img\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n              src={back_hui} className={'returnImg'} />\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n      )\n    }\n\n  }\n\n  render() {\n    let { isCode, baseUrl } = this.state;\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\n    return (\n      <div id=\"signIn\">\n        {this.heard()}\n\n        <div className=\"body\">\n          <div className=\"logo\">\n            <img src={mellaLogo} alt=\"\" />\n          </div>\n          <div className=\"body\" style={{ position: \"relative\" }}>\n            <div\n              className=\"text\"\n              style={{\n                marginTop: '15px',\n              }}\n            >\n              Please enter email <br />\n              and password\n            </div>\n\n            <div className=\"inpF\">\n              <Input\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   fontSize: px(18),\n                // }}\n                value={this.state.email}\n                placeholder=\"rachel@friends.com\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    email: str,\n                  });\n                }}\n              />\n              <Input.Password\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   marginLeft: px(6),\n                //   marginBottom: px(18),\n                //   fontSize: px(18),\n                // }}\n                visibilityToggle={false}\n                value={this.state.hash}\n                placeholder=\"********\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    hash: str,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    this._continue();\n                  }\n                }}\n              />\n\n              <div\n                className=\"text\"\n                style={{\n                  marginTop: '15px',\n                }}\n              >\n                {\"Or scan QR Code\"}\n              </div>\n            </div>\n\n            {this._qrCode()}\n            <div\n              className=\"littleText flex\"\n              style={{\n                fontSize: px(12),\n                marginTop: px(10),\n                marginBottom: px(10),\n              }}\n            >\n              Go to your Mella mobile app to access\n              <br />\n              the QR scanner\n            </div>\n            <div className=\"stay\">\n              <div className=\"remember\">\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\n                <div\n                  className=\"box\"\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\n                  onClick={() => {\n                    let { isRemember } = this.state;\n                    this.setState({\n                      isRemember: !isRemember,\n                    });\n                    storage.isRemember = !isRemember;\n                  }}\n                >\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\n                </div>\n              </div>\n              <div\n                className=\"forgot\"\n                style={{ fontSize: px(16) }}\n                onMouseDown={() => {\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\n                  forget[0].style.opacity = 0.5;\n                }}\n                onMouseUp={() => {\n                  document.querySelectorAll(\n                    \"#signIn .forgot\"\n                  )[0].style.opacity = 1;\n                  if (this.state.email) {\n                    temporaryStorage.forgotPassword_email = this.state.email;\n                  }\n\n                  this.props.history.push(\"/user/login/forgotPassword\");\n                }}\n              >\n                Forgot?\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className=\"button11\"\n          style={{ backgroundColor: \"#E7E7E7\" }}\n        >\n          <div\n            className=\"btn1 flex\"\n            onClick={this._continue}\n          // style={{ height: px(40) }}\n          >\n            <p>{`CONTINUE`}</p>\n          </div>\n\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\n            <p style={{ fontSize: px(17) }}>\n              Do not have an account?{\" \"}\n              <a href=\"#\" onClick={this._signUp}>\n                Sign Up\n              </a>\n            </p>\n          </div>\n        </div>\n\n\n        <MyModal\n          visible={this.state.spin}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(SignIn)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx",["702","703","704","705","706"],"import React, { Component } from 'react'\nimport {\n  message,\n  Modal,\n  Input,\n  Spin\n} from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport Button from '../../utils/button/Button'\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { listAll, mellaLogin, } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { updateUserInfo } from '../../api/mellaserver'\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nexport default class FindWorkplace extends Component {\n\n  state = {\n    search: '',\n    listData: [],\n    searchData: [],\n    selectId: {},\n    isOrg: false,       //nodel框是否显示\n    isWorkplace: false,\n    workplaceList: [],\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    selectworkplace: {}\n  }\n  componentDidMount() {\n\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    listAll()\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    this.setState({\n      selectId: temporaryStorage.logupSelectOrganization\n    })\n    temporaryStorage.logupSelectOrganization = {}\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('---登录入参', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          isLoading: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.status && res.status === 500) {\n          message.error('Internal Server Error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n        if (res.code === 10000 && res.msg === '系统内部错误') {\n          message.error('system error')\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token, lastName, firstName } = res.success\n          storage.token = token\n          storage.userId = ''\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          this.setState({\n            isOrg: false,\n            isWorkplace: false\n          })\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        })\n        message.error('Login failed')\n      })\n  }\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n      className={ this.state.selectId.organizationId === item.organizationId ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n        }}\n      >\n        <div className=\"item\">{item.name}</div>\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  _updateUserInfo = (params) => {\n    updateUserInfo(params)\n      .then(res => {\n        console.log(res);\n\n        if (res.flag === true) {\n          message.success('Join successfully', 3)\n\n          console.log('成功',);\n          if (!this.props.location.isSettingIn) {\n            this._logIn()\n          } else {\n            this.setState({\n              isLoading: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            isLoading: false\n          })\n          message.error('Identity update failed', 3)\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n          })\n          console.log(item);\n\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  _addworkplaced = () => {\n    let userId = this.props.location.isSettingIn ? storage.userId : temporaryStorage.logupSuccessData.userId\n    let params = {\n      userId,\n      roleId: 2,\n      workplaceId: this.state.selectworkplace.workplaceId,\n      organizationId: this.state.selectworkplace.organizationId\n    }\n    console.log('入参：', params);\n    this.setState({\n      isLoading: true,\n      isWorkplace: false,\n      isOrg: false\n    })\n    this._updateUserInfo(params)\n\n\n  }\n\n  render() {\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\n    return (\n      <div id=\"joinOrganizationByOption\">\n        <div className=\"heard\">\n          {/* 关闭缩小 */}\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            // onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\n            onClick1={() => this.props.history.goBack()}\n\n          />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"text\">Find My Organization</div>\n\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n\n                this.setState({\n                  isOrg: true\n                })\n                console.log('搜索名称加入');\n              }}\n            >\n              <div className=\"iconBox\">\n                <MyIcon type='icon-search' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n\n                <div className=\"title\">Search Organization</div>\n\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                console.log('创建');\n                this.props.history.push('/uesr/logUp/NewOrganization')\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Create an organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                if (this.props.location.isSettingIn) {\n                  this.props.history.goBack()\n                } else {\n                  let params = {\n                    userId: temporaryStorage.logupSuccessData.userId,\n                    roleId: 2,\n                  }\n                  message.destroy()\n                  this.setState({\n                    isLoading: true\n                  })\n                  console.log('搜索id加入', params);\n                  this._updateUserInfo(params)\n                }\n\n\n\n\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-no' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Continue without organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={isOrg}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div></div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n                <div className=\"text\"\n                  onMouseOver={() => {\n                    if (disabled) {\n                      this.setState({\n                        disabled: false,\n                      });\n                    }\n                  }}\n                  onMouseOut={() => {\n                    this.setState({\n                      disabled: true,\n                    });\n                  }}\n\n                >Find my organization</div>\n                <div className=\"searchBox\">\n                  <Input\n                    placeholder=\"Type Organization Name\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._search}\n                  />\n                </div>\n              </div>\n              <div className=\"list\">\n                {this._list()}\n              </div>\n              <div className=\"foot\">\n                <Button\n                  text={'Join Organization'}\n                  onClick={this._goWorkplace}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n              </div>\n            </div>\n          }\n        />\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\" &#xe61b; Search workplace\"\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\"\n\n              >\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n        <MyModal\n          visible={this.state.isLoading}\n        />\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx",["707"],"import React, { useState, useEffect } from 'react'\nimport { message, Button } from 'antd'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport { useHistory } from 'react-router-dom'\n\nimport './index.less';\nimport { activateUserByEmailCode, resendDeskRegistEmail } from '../../api';\n\nconst VerifyEmail = () => {\n  let history = useHistory()\n  const [code, setCode] = useState('')\n  const [resend, setResend] = useState(60)\n  const [visible, setVisible] = useState(false)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (resend > 0) {\n        setResend(resend - 1)\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer)\n    }\n  })\n\n  const _resend = (e) => {\n\n    if (resend <= 0) {\n\n      //下面写逻辑代码\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\n      let params = {\n        firstName,\n        lastName,\n        domain, email, hash, phone,\n      }\n      if (birthday) {\n        params.birthday = birthday\n      }\n      console.log('重新获取验证码入参', params);\n\n      resendDeskRegistEmail(temporaryStorage.logupEmailCode, params)\n        .then(res => {\n          console.log('重新获取验证码', res);\n          if (res.msg === 'success') {\n            message.success('The email has been resent, please check', 3)\n            temporaryStorage.logupEmailCode = res.data\n            setResend(60)\n          } else {\n            message.error('Failed to send mail', 3)\n\n          }\n        })\n        .catch(err => {\n          console.log('重新获取验证码失败');\n        })\n\n    }\n\n    //阻止a链接跳转\n    if (e && e.preventDefault)\n      e.preventDefault();\n    else\n      window.event.returnValue = false;\n  }\n  const _next = () => {\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\n    message.destroy()\n    if (code !== temporaryStorage.logupEmailCode) {\n      message.error('Verification code input is incorrect', 3)\n      return\n    }\n    else {\n      setVisible(true)\n      activateUserByEmailCode(code)\n        .then(res => {\n          setVisible(false)\n          console.log('验证码验证返回信息：', res);\n          if (res.flag === true) {\n            console.log('验证成功');\n            temporaryStorage.logupSuccessData = res.data\n            temporaryStorage.logupEmailCode = ''\n            history.push('/uesr/logUp/JoinOrganizationByOption')\n          } else {\n            message.error('Verification code verification failed', 3)\n          }\n\n        })\n        .catch(err => {\n          setVisible(false)\n          console.log('验证码验证错误：', err);\n        })\n    }\n\n  }\n\n  return (\n    <div id=\"verifyEmail\">\n      <div className=\"heard\">\n        <MaxMin\n          onClick={() => { history.push('/') }}\n          onClick1={() => history.goBack()}\n        />\n      </div>\n      <div className=\"body\">\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\n        <div className=\"text\">Please enter it below to confirm your address.</div>\n        <div className=\"inpF\">\n          <input\n            className=\"inp\"\n            type=\"text\"\n            value={code}\n            placeholder=\"Code\"\n            onChange={(val) => { setCode(val.target.value) }}\n            maxLength={6}\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\n          />\n        </div>\n\n        {/* <div className=\"resend\">\n          <a href=\"#\" onClick={_resend}>Resend</a>\n          {resend > 0 && `(${resend})`}\n        </div> */}\n      </div>\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\n        <div className=\"btnF\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={_next}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      <MyModal\n        visible={visible}\n      />\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default VerifyEmail\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx",["708"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../assets/images/errorIcon.png'\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { px, mTop, pX, MTop } from '../../utils/px';\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\n\r\n\r\nimport './index.less';\r\nimport { checkForgetPassword, checkUser, forgetPwd, sendActivateEmail } from '../../api';\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    checkUser(email)\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    forgetPwd(this.state.email)\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n\r\n    checkForgetPassword(this.state.email)\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    sendActivateEmail(this.state.email)\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx",["709","710","711","712"],"\r\n/**\r\n *\r\n * this.props.location.isAddDoctor是上个组件传过来的标志,为true代表从设置里面的邀请跳转过来的\r\n */\r\nimport React, { Component, } from 'react'\r\nimport {\r\n  Tag,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport temporaryStorage from '../../utils/temporaryStorage'\r\nimport { px } from '../../utils/px';\r\nimport Button from '../../utils/button/Button'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\n\r\nimport './index.less';\r\nimport { checkUser, mellaLogin } from '../../api';\r\nimport { inviteUserByEmail } from '../../api/melladesk/user';\r\nimport { connect } from 'react-redux';\r\nimport { setMenuNum } from '../../store/actions';\r\nlet storage = window.localStorage;\r\nclass InviteTeam extends Component {\r\n  state = {\r\n    tags: [],\r\n    inputVisible: false,\r\n    inputValue: '',\r\n    editInputIndex: -1,\r\n    editInputValue: '',\r\n    visible: false\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  handleClose = removedTag => {\r\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    console.log(tags);\r\n    this.setState({ tags });\r\n  };\r\n\r\n  showInput = () => {\r\n    this.setState({ inputVisible: true }, () => this.input.focus());\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleInputConfirm = () => {\r\n    const { inputValue } = this.state;\r\n    let { tags } = this.state;\r\n    if (inputValue && tags.indexOf(inputValue) === -1) {\r\n      console.log('输入的内容为：', inputValue);\r\n      message.destroy()\r\n      checkUser(inputValue)\r\n        .then(res => {\r\n\r\n\r\n          console.log('检测邮箱存不存在', res);\r\n\r\n          if (res.code) {\r\n            switch (res.code) {\r\n\r\n              case 11011:\r\n                console.log('邮箱存在，发送邮件');\r\n                tags = [...tags, inputValue];\r\n                console.log(tags);\r\n\r\n                this.setState({\r\n                  tags,\r\n                  inputVisible: false,\r\n                  inputValue: '',\r\n                });\r\n                break;\r\n              // case 11012:\r\n              //     console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n              // case 11013:\r\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n              case 11014:\r\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                message.error('This mailbox was not found!', 3)\r\n                this.setState({\r\n                  inputVisible: false,\r\n                  inputValue: '',\r\n                });\r\n                break;\r\n\r\n            }\r\n          } else {\r\n            console.log('系统错误', res);\r\n            message.error('system error')\r\n            this.setState({\r\n              spin: false\r\n            })\r\n          }\r\n\r\n\r\n        })\r\n        .catch(err => {\r\n          message.error(`Error:${err.message}`)\r\n          console.log('检测邮箱号的接口出错了', err);\r\n        })\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  saveInputRef = input => {\r\n    this.input = input;\r\n  };\r\n\r\n  saveEditInputRef = input => {\r\n    this.editInput = input;\r\n  };\r\n\r\n  _next = () => {\r\n    console.log('this.props', this.props);\r\n    let { isAddDoctor } = this.props\r\n    message.destroy()\r\n    let { tags } = this.state\r\n    let { userId } = !isAddDoctor ? temporaryStorage.logupSuccessData : storage\r\n    let organizationId = !isAddDoctor ? temporaryStorage.logupOrganization.organizationId : storage.lastOrganization\r\n    console.log({ tags, userId, organizationId });\r\n    if (tags.length === 0) {\r\n      message.error('Please enter the invitation email')\r\n      return\r\n    }\r\n    this.setState({\r\n      visible: true\r\n    })\r\n    console.log('入参:', tags);\r\n\r\n    inviteUserByEmail(userId, organizationId, tags)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag === true) {\r\n          console.log('成功，跳转');\r\n          message.success('Invitation successful', 3)\r\n          if (!isAddDoctor) {\r\n            this._logIn()\r\n          } else {\r\n            this.setState({\r\n              visible: false\r\n            })\r\n            this.props.setMenuNum('5')\r\n          }\r\n\r\n        } else {\r\n          this.setState({\r\n            visible: false\r\n          })\r\n          if (res.code === 14003) {\r\n            message.destroy()\r\n            message.warn('Insufficient permissions')\r\n          }\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n  _logIn = () => {\r\n\r\n    let storage = window.localStorage;\r\n    let { email, hash } = temporaryStorage.logupVetInfo\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: '1'\r\n    }\r\n    console.log('登录入参:', params);\r\n    mellaLogin(params)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        if (res.status && res.status === 404) {\r\n          message.error('system error');\r\n          return\r\n        }\r\n        if (res.code === 10001 && res.msg === '账号错误') {\r\n          message.error('Account error');\r\n          return\r\n        }\r\n        if (res.code === 10002 && res.msg === '密码错误') {\r\n          message.error('wrong password')\r\n          return;\r\n        }\r\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n          return\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === 'success') {\r\n          console.log('账号密码正确，登录进去了');\r\n          let { userWorkplace, lastOrganization, token, lastName, firstName } = res.success\r\n          storage.token = token\r\n          storage.userId = ''\r\n          storage.userName = `${lastName} ${firstName}`\r\n          storage.userEmail = email\r\n          let data = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n          };\r\n          data = JSON.stringify(data);\r\n          storage.saveSign = data;\r\n\r\n          storage.userId = res.success.userId\r\n          storage.roleId = res.success.roleId\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = ''\r\n          storage.defaultCurrent = ''\r\n\r\n\r\n\r\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\r\n          if (res.success.lastWorkplaceId) {\r\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\r\n          } else {\r\n            storage.lastWorkplaceId = \"\";\r\n          }\r\n\r\n          if (res.success.lastOrganization) {\r\n            storage.lastOrganization = res.success.lastOrganization;\r\n          } else {\r\n            storage.lastOrganization = \"\";\r\n          }\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace)\r\n            let connectionKey = ''\r\n\r\n            for (let i = 0; i < userWorkplace.length; i++) {\r\n              const element = userWorkplace[i];\r\n              if (element.organizationEntity) {\r\n                if (\r\n                  element.organizationEntity.organizationId === lastOrganization\r\n                ) {\r\n                  if (element.organizationEntity.connectionKey) {\r\n                    connectionKey = element.organizationEntity.connectionKey;\r\n                  }\r\n                  if (element.roleId) {\r\n                    console.log(element.roleId);\r\n                    storage.roleId = element.roleId;\r\n                  }\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            console.log(\"----------key值为：\", connectionKey);\r\n            storage.connectionKey = connectionKey;\r\n\r\n          } else {\r\n            storage.userWorkplace = ''\r\n            storage.connectionKey = ''\r\n\r\n          }\r\n          this.props.history.push(\"/MainBody\");\r\n\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  _food = () => {\r\n    if (!this.props.isAddDoctor) {\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n    // console.log('---', editInputIndex);\r\n    return (\r\n      <div id=\"inviteTeam\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          {/* <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          /> */}\r\n          <div className=\"text\">Invite your Team</div>\r\n\r\n          <div className=\"addF\">\r\n            <p>To:</p>\r\n            <div className=\"add\">\r\n\r\n              <>\r\n                {tags.map((tag, index) => {\r\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                  const tagElem = (\r\n                    <Tag\r\n                      className=\"edit-tag\"\r\n                      key={tag}\r\n                      closable={true}\r\n                      onClose={() => this.handleClose(tag)}\r\n                    >\r\n                      <span>\r\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                      </span>\r\n                    </Tag>\r\n                  );\r\n                  return isLongTag ? (\r\n                    <Tooltip title={tag} key={tag}>\r\n                      {tagElem}\r\n                    </Tooltip>\r\n                  ) : (\r\n                    tagElem\r\n                  );\r\n                })}\r\n                {inputVisible && (\r\n                  <Input\r\n                    ref={this.saveInputRef}\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    className=\"tag-input\"\r\n                    value={inputValue}\r\n                    onChange={this.handleInputChange}\r\n                    onBlur={this.handleInputConfirm}\r\n                    onPressEnter={this.handleInputConfirm}\r\n                  />\r\n                )}\r\n                {!inputVisible && (\r\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                    <PlusOutlined />Press Enter to add mailbox\r\n                  </Tag>\r\n                )}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn\"\r\n          style={{ padding: `${px(40)}px 0` }}\r\n        >\r\n          {\r\n            !this.props.isAddDoctor && <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._logIn}\r\n              text={'Skip'}\r\n            >\r\n              Skip\r\n            </Button>\r\n          }\r\n\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._next}\r\n            text={'Send'}\r\n          >\r\n\r\n          </Button>\r\n        </div>\r\n        <MyModal visible={this.state.visible} />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n\r\n  }),\r\n  { setMenuNum }\r\n)(InviteTeam) ","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx",["713","714","715","716","717","718"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Button,\r\n  Upload,\r\n} from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { px } from '../../utils/px';\r\nimport Heard from '../../utils/heard/Heard'\r\n\r\nimport using from '../../assets/images/using.png'\r\nimport measuring from '../../assets/images/measuring.png'\r\nimport unassigned from '../../assets/images/unassigned.png'\r\nimport adding from '../../assets/images/adding.png'\r\nimport email from '../../assets/images/email.png'\r\nimport phone from '../../assets/images/phone.png'\r\nimport complaint from '../../assets/images/complaint.png'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\nimport { savefeedback } from '../../api';\r\n\r\nlet storage = window.localStorage;\r\nconst Help = () => {\r\n  const [form] = Form.useForm();\r\n  const { TextArea } = Input;\r\n  let list = [\r\n    {\r\n      img: using,\r\n      title: 'Using the app'\r\n    }, {\r\n      img: measuring,\r\n      title: 'Measuring with Mella'\r\n    }, {\r\n      img: unassigned,\r\n      title: 'Unassigned Readings'\r\n    },\r\n    {\r\n      img: adding,\r\n      title: 'Adding New Users'\r\n    },\r\n  ];\r\n  let num = 150 / list.length;\r\n  let mar = num + 'px';\r\n  let history = useHistory();\r\n  const [opinionsVisible, setOpinionsVisible] = useState(false);//弹窗显隐\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n  const [fileList, setFileList] = useState([]);//图片组\r\n\r\n  const changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big');\r\n  }\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    setOpinionsVisible(false);\r\n    setFileList([]);\r\n  };\r\n  //提交bug优化信息\r\n  const onFinish = (e) => {\r\n    setLoading(true);\r\n    let imageIds = []\r\n    _.map(fileList, (item) => {\r\n      imageIds.push(item.response.data.imageId)\r\n    })\r\n    let data = {\r\n      ...e,\r\n      imageIds: _.toString(imageIds),\r\n      userId: storage.userId\r\n    };\r\n    savefeedback(data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          setOpinionsVisible(false);\r\n          message.success('Submit Successfully~');\r\n        } else {\r\n          message.success('submit Failure!');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.success('submit Failure!');\r\n      })\r\n\r\n\r\n  };\r\n  //提交异常\r\n  const onFinishFailed = (e) => {\r\n    message.error('Please fill in the correct information!');\r\n  };\r\n  /**\r\n * 上传文件前校验\r\n */\r\n  const beforeNormFile = (e) => {\r\n    // 检查图片类型\r\n    const isJPG = e.type === 'image/jpeg';\r\n    const isPNG = e.type === 'image/png';\r\n    const isBMP = e.type === 'image/bmp';\r\n    const isGIF = e.type === 'image/gif';\r\n    const isWEBP = e.type === 'image/webp';\r\n    const isPic = isJPG || isPNG || isBMP || isGIF || isWEBP;\r\n    //文件大小校验\r\n    const isLt2M = e.size / 1024 / 1024 < 4;\r\n    if (!isPic) {\r\n      message.error(`${e.name} not a picture file`);\r\n    } else if (!isLt2M && isPic) {\r\n      message.error(`${e.name}Upload is not allowed if the limit exceeds 4M~`);\r\n    }\r\n    return isPic && isLt2M ? true : Upload.LIST_IGNORE;\r\n  };\r\n  /**\r\n   * Base64\r\n   */\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  /**\r\n * 文件上传后处理\r\n */\r\n  const handleChange = async (info) => {\r\n    console.log('info: ', info);\r\n    if (info.file.status === 'done') {\r\n      setFileList(info.fileList);\r\n    }\r\n    if (info.file.status === 'removed') {\r\n      setFileList(info.fileList);\r\n    }\r\n\r\n    // getBase64(info.file.originFileObj, (imageUrl) => {\r\n    //   setLoading(false);\r\n    //   setImageUrl(imageUrl);\r\n    // });\r\n  };\r\n  //添加图片按钮\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Upload\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', changeFenBianLv)\r\n    return (() => {\r\n      let ipcRenderer = window.electron.ipcRenderer\r\n      ipcRenderer.removeListener('changeFenBianLv', changeFenBianLv)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('fileList', fileList);\r\n  }, [fileList])\r\n\r\n  return (\r\n    <>\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n            />\r\n          </div>\r\n          <div className=\"list\">\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}>\r\n                  <>\r\n                    <img src={data.img} alt=\"\" />\r\n                    <p>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"popularArticles\">\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"time\">\r\n            <p style={{ fontSize: px(24) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(24) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={complaint} alt=\"\" />\r\n            <div className=\"text\">Make a Suggestion</div>\r\n            <p\r\n              onClick={() => { setOpinionsVisible(true) }}\r\n            >\r\n              Submit Opinions\r\n            </p>\r\n          </div>\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" />\r\n            <div className=\"text\">Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              onClick={(e) => { }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" />\r\n            <div className=\"text\">Bark at Us!</div>\r\n            <div className=\"text\">201.977.6411</div>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          visible={opinionsVisible}\r\n          destroyOnClose={true}\r\n          centered\r\n          maskClosable={false}\r\n          width={700}\r\n          onCancel={handleCancel}\r\n          className=\"opinionsModal\"\r\n          footer={[]}\r\n        >\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input title!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Clear titles can be verified more quickly\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input description!',\r\n\r\n                },\r\n                {\r\n                  min: 15,\r\n                  message: 'No less than 15 words'\r\n                }\r\n              ]}\r\n            >\r\n              <TextArea\r\n                showCount\r\n                maxLength={500}\r\n                autoSize={{\r\n                  minRows: 3,\r\n                  maxRows: 5,\r\n                }}\r\n                placeholder=\"Please describe your proposed use scenario and your optimization/improvement plan in detail (no less than 15 words)\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"imageIds\"\r\n              label={`${'Related pictures or screenshots' + '(' + fileList.length + '/' + 5 + ')'}`}\r\n            // valuePropName=\"fileList\"\r\n            >\r\n              <Upload\r\n                accept=\"image/*\"\r\n                name=\"img\"\r\n                action=\"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/image/uploadImage\"\r\n                beforeUpload={beforeNormFile}\r\n                onChange={handleChange}\r\n                withCredentials={true}\r\n                listType=\"picture-card\"\r\n              >\r\n                {fileList.length >= 5 ? null : uploadButton}\r\n              </Upload>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <div className='bugSubmitBox'>\r\n                <Button type=\"primary\" htmlType=\"submit\" size='large' loading={loading} block>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default Help;\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx",["719","720","721","722","723","724","725","726"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  Button,\r\n  Input\r\n} from 'antd'\r\n\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport dog from '../../assets/images/reddog.png'\r\nimport cat from '../../assets/images/redcat.png'\r\nimport other from '../../assets/images/redother.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\n\r\nimport moment from 'moment'\r\nimport { connect } from 'react-redux'\r\nimport { petDetailInfoFun } from '../../store/actions';\r\n\r\nimport './index.less';\r\nimport { pet_petall } from '../../api'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nclass PetAndParents extends Component {\r\n\r\n  state = {\r\n    parentList: [],       //宠物主人列表\r\n    petList: [],          //宠物列表\r\n    loading: false,       //加载中\r\n    parentSearchArr: [],  //搜索后的宠物主人列表\r\n    petSearchArr: [],     //搜索后的宠物列表\r\n    searchText: '',        //搜索文本\r\n    parentAndPetList: [],  //宠物主人下的所有宠物,\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n  }\r\n\r\n  _getExam = async () => {\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      offset: 0,\r\n      size: 500,\r\n    }\r\n    pet_petall(storage.lastOrganization, params)\r\n      .then(res => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = []\r\n          let list = res.data.list\r\n          let owerList = []\r\n          let parentAndPetList = []\r\n          for (let i = 0; i < list.length; i++) {\r\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\r\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: petName,\r\n              petId,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              type: 'pet',\r\n              patientId,\r\n              petBirthday: birthday,\r\n              breedName,\r\n              gender\r\n            }\r\n            data.push(json)\r\n            if (userId) {\r\n              let flogNum = -1\r\n\r\n              for (let i = 0; i < owerList.length; i++) {\r\n                let ower = owerList[i]\r\n                if (ower.userId === userId) {\r\n                  flogNum = i\r\n                  break;\r\n                }\r\n\r\n              }\r\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\r\n                let owerJson = {\r\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n                }\r\n                owerList.push(owerJson)\r\n                let parentAndPetJson = {\r\n                  parent: owerJson,\r\n                  pets: [json]\r\n                }\r\n                console.log('parentAndPetJson: ', parentAndPetJson);\r\n\r\n                parentAndPetList.push(parentAndPetJson)\r\n              } else {\r\n                parentAndPetList[flogNum].pets.push(json)\r\n              }\r\n            }\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            petList: data,\r\n            parentList: owerList,\r\n            parentAndPetList\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n  list = (value) => {\r\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\r\n    let data = []\r\n    if (value === 'parent') {\r\n      if (searchText.length > 0) {\r\n        data = parentSearchArr\r\n      } else {\r\n        data = parentList\r\n      }\r\n    } else {\r\n      if (searchText.length > 0) {\r\n        data = petSearchArr\r\n      } else {\r\n        data = petList\r\n      }\r\n    }\r\n    let options = data.map((item, index) => {\r\n      let { speciesId, url, userImageUrl, patientId, petId, name, userId } = item\r\n      let images = null\r\n      if (value === 'parent') {\r\n        images = `url(${userImageUrl}?download=0&width=150)`\r\n        if (!userImageUrl) {\r\n          images = `url(${parent})`\r\n        }\r\n      } else {\r\n        images = `url(${url}?download=0&width=150)`\r\n        if (!url) {\r\n          switch (speciesId) {\r\n            case 1: images = `url(${cat})`\r\n              break;\r\n            case 2: images = `url(${dog})`\r\n              break\r\n            default: images = `url(${other})`\r\n              break;\r\n          }\r\n        }\r\n      }\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 8px ${px(15)}px 0`, borderRadius: px(20) }}\r\n          onClick={() => {\r\n            let params = []\r\n            if (item.type !== 'pet') {\r\n              for (let i = 0; i < parentAndPetList.length; i++) {\r\n                if (item.userId === parentAndPetList[i].parent.userId) {\r\n                  params = parentAndPetList[i]\r\n                  break\r\n                }\r\n              }\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: userId })\r\n            } else {\r\n              this.props.petDetailInfoFun(item);\r\n              this.props.history.push({ pathname: '/page9', parent: params })\r\n            }\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 6) {\r\n      liStyle = { height: px(560), overflowY: 'auto' }\r\n    }\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { parentList, petList } = this.state\r\n    console.log(parentList, petList);\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n    for (let i = 0; i < parentList.length; i++) {\r\n      let petName = parentList[i].name.toLowerCase() || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        parentSearchData.push(parentList[i])\r\n      }\r\n    }\r\n\r\n    let petSearchData = []\r\n    for (let i = 0; i < petList.length; i++) {\r\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\r\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\r\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        petSearchData.push(petList[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      petSearchArr: petSearchData,\r\n      parentSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"PetAndParents\">\r\n        <div className=\"body\">\r\n          <div className='titleBox'>\r\n            <h1 style={{ fontSize: px(20) }}>{`Pet & Parents Profile Management`}</h1>\r\n          </div>\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              {/* <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              /> */}\r\n              <Input\r\n                style={{ height: px(34) }}\r\n                prefix={<SearchOutlined />}\r\n                bordered={false}\r\n                placeholder=\"Search\"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              >\r\n              </Input>\r\n            </div>\r\n            <div className=\"searchR\">\r\n              <Button\r\n                type=\"primary\"\r\n                size=\"small\"\r\n                shape=\"round\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"btns\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n            >\r\n              + New Parent\r\n            </Button>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              onClick={() => {\r\n                this.props.history.push('/pet/doctorAddPet')\r\n              }}\r\n            >\r\n              + New Pet\r\n            </Button>\r\n          </div>\r\n          <div className=\"lists\">\r\n            <div className=\"listsL\">\r\n              {this.list('parent')}\r\n            </div>\r\n            <div className=\"listsL\">\r\n              {this.list('pet')}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <MyModal visible={this.state.loading} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n\r\n  }),\r\n  {\r\n    petDetailInfoFun\r\n  }\r\n)(PetAndParents);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx",["727"],"\r\nimport React, { Component } from 'react'\r\nimport { message, Modal, Button } from 'antd';\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { px, win } from '../../utils/px'\r\nimport MyModal from '../../utils/myModal/MyModal.jsx'\r\nimport './index.less';\r\nimport { getOta } from '../../api/mellaserver/backend';\r\nimport { versionComarision } from '../../utils/commonFun';\r\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\r\nimport { localHardBinVersion } from '../../utils/appversion';\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\nlet uploadType = ''\r\n\r\nexport default class AdvancedSettings extends Component {\r\n\r\n  state = {\r\n    isHaveBase: true,\r\n    uploadText: '',\r\n    isUpload: false,\r\n    updateModal: false,\r\n    progress: 0,\r\n    localVersion: '',\r\n    cloudVersion: '',\r\n    filePath: '',\r\n    isModalOpen: false,\r\n    errorFlog: false\r\n  }\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    //检测是否有usb设备\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    //升级过程中发送的过程信息\r\n    ipcRenderer.on('uploadBaseInfo', this._uploadBaseInfo)\r\n    //底座发过来的指令信息\r\n    ipcRenderer.on('sned', this._send)\r\n    //发送结束升级指令,相当于初始化\r\n    ipcRenderer.send('reUpload', {})\r\n    //获取插入硬件版本\r\n    // this.getHardwareVersion();\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('uploadBaseInfo', this._uploadBaseInfo)\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  }\r\n  //进入界面时获取底座的版本\r\n  // getHardwareVersion = () => {\r\n  //   if(this.state.isHaveBase)\r\n  //   ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n  //   this.localVersionTimer = setTimeout(() => {\r\n  //     //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,给出弹窗提示\r\n  //     this.setState({ isModalOpen: true });\r\n  //     this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  //   }, 3000);\r\n  // }\r\n  //底座发过来的指令信息\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    console.log('_send', data);\r\n    if (this.state.errorFlog) {\r\n      this.setState({\r\n        errorFlog: true\r\n      })\r\n    }\r\n    let { isUpload } = this.state\r\n\r\n    if (data[2] === 54) {\r\n      if (isUpload) {\r\n        if (data[3] === 0) {\r\n          this.setState({\r\n            uploadText: 'Start the upgrade after re-plugging the base'\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n        }\r\n      }\r\n\r\n    } else if (data[2] === 182) {\r\n      //为0代表底座通讯关闭成功了\r\n\r\n      if (data[3] === 0) {\r\n        if (isUpload) {\r\n          console.log('发送指令让底座进入升级状态');\r\n          ipcRenderer.send('enterUpgrade', { command: '38', arr: ['5A'] })\r\n        }\r\n\r\n      }\r\n    } else if (data[2] === 136) {\r\n      //获取到了版本信息,把定时器关闭,此底座不是很老版本\r\n      console.log('版本信息:', data);\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\r\n      this.setState({\r\n        localVersion,\r\n        uploadText: `The current version number is v${localVersion}, getting the latest version`\r\n      }, () => {\r\n        this.cloudVersion()\r\n      })\r\n    }\r\n\r\n  }\r\n  //是否插上底座设备，为false则代表插上了底座设备，反之为拔掉了底座设备\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    let { isUpload, progress } = this.state\r\n    if (data === false) {\r\n      this.setState({\r\n        isHaveBase: true,\r\n      })\r\n      if (isUpload) {\r\n        if (progress === 0) {\r\n          console.log('正在升级过程中检测到了拔插 前去发送升级文件', uploadType);\r\n          if (uploadType === 'base') {\r\n            console.log('底座升级', this.state.cloudVersion);\r\n            //如果版本号和本地版本号一致则使用本地存放的硬件文件，如果没有云端版本或者，云端文件地址则也使用本地的升级文件包\r\n            if (localHardBinVersion === this.state.cloudVersion || !this.state.cloudVersion || !this.state.filePath) {\r\n\r\n              console.log('使用本地文件进行升级');\r\n              ipcRenderer.send('updateBase', { state: 'reset', type: 'base' })\r\n            } else {\r\n              ipcRenderer.send('updateBase', { state: 'base', url: this.state.filePath, fileName: `mellabase${this.state.cloudVersion}` })\r\n            }\r\n\r\n\r\n          } else if (uploadType === 'reset') {\r\n            console.log('底座出厂设置');\r\n            ipcRenderer.send('updateBase', { state: 'reset', type: 'reset' })\r\n          }\r\n        } else if (progress === 100) {\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.success('The update is successful. Please re plug the base');\r\n          ipcRenderer.send('reUpload', {})\r\n        } else {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n\r\n\r\n      }\r\n    } else {\r\n      if (this.state.isHaveBase) {\r\n        this.setState({\r\n          isHaveBase: false,\r\n\r\n        })\r\n      }\r\n      if (isUpload) {\r\n        if (progress > 0 && progress < 100) {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n  _uploadBaseInfo = (e, data) => {\r\n    console.log('升级过程中的信息：', data);\r\n    switch (data.status) {\r\n      case 'error':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n      case 'error1':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error('Upgrade failed, please try again')\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n\r\n\r\n      case 'normal':\r\n        this.setState({\r\n          uploadText: data.data,\r\n          progress: data.progress\r\n        })\r\n        this.timer && clearTimeout(this.timer)\r\n        if (data.progress < 10) {\r\n          this.timer && clearTimeout(this.timer)\r\n          this.timer = setTimeout(() => {\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Try again after unplugging the sled')\r\n            ipcRenderer.send('reUpload', {})\r\n\r\n          }, 1000);\r\n        }\r\n\r\n        if (data.progress === 100) {\r\n          console.log('进度到达100了');\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.failTimer = setTimeout(() => {\r\n\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Please reinsert the base')\r\n            ipcRenderer.send('reUpload', {})\r\n          }, 5000);\r\n        }\r\n        break;\r\n\r\n      case 'success':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n        })\r\n        message.destroy()\r\n        message.success(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n  }\r\n  _upload = (val) => {\r\n\r\n    let { isHaveBase } = this.state\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n      message.destroy()\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        isUpload: true,\r\n        updateModal: true,\r\n        progress: 0,\r\n        errorFlog: true\r\n      })\r\n      uploadType = val\r\n      //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\r\n      console.log('发送指令查看底座是否已经在升级状态');\r\n      ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n      const timer = setTimeout(() => {\r\n        if (this.state.errorFlog) {\r\n          this.setState({\r\n            uploadText: \"Please manually plug and unplug the base\"\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n\r\n        }\r\n        clearTimeout(timer)\r\n      }, 3000);\r\n\r\n\r\n      //2.如果能收到关闭指令，则发送开始升级指令\r\n\r\n      //3.如果如果测试检测到usb插拔，则去发送文件\r\n\r\n\r\n\r\n    }\r\n  }\r\n  _upload1 = (val) => {\r\n    let { isHaveBase } = this.state\r\n    message.destroy()\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        updateModal: true,\r\n        progress: 0,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n        errorFlog: true\r\n\r\n      }, () => {\r\n        this.localVersion()\r\n      })\r\n      uploadType = val\r\n    }\r\n  }\r\n  //询问本地的版本号\r\n  localVersion = () => {\r\n    this.setState({\r\n      uploadText: 'Query the local version number',\r\n    })\r\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    this.localVersionTimer = setTimeout(() => {\r\n      //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,直接去下载文件升级\r\n      this.cloudVersion()\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    }, 3000);\r\n  }\r\n  //询问网端最新的版本号\r\n  cloudVersion = () => {\r\n    getInfoOfLatestDevice('mellabase')\r\n      .then(res => {\r\n        console.log('获取到了网端的版本号', res);\r\n        if (res.flag) {\r\n          let { firmwareVersion, updateUrl } = res.data\r\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion)\r\n          console.log('比较信息:', firmwareVersion, this.state.localVersion, cloudBigtolocal);\r\n          if (cloudBigtolocal || !this.state.localVersion) {\r\n            this.setState({\r\n              cloudVersion: firmwareVersion,\r\n              filePath: updateUrl,\r\n              isUpload: true,\r\n              uploadText: 'Start getting upgrade files'\r\n\r\n            })\r\n            this.setState({\r\n              errorFlog: true\r\n            }, () => {\r\n              ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n              console.log('发送指令查看底座是否已经在升级状态');\r\n            })\r\n\r\n\r\n\r\n            const timer = setTimeout(() => {\r\n              if (this.state.errorFlog) {\r\n\r\n                this.setState({\r\n                  uploadText: \"Please manually plug and unplug the base\"\r\n                })\r\n                ipcRenderer.send('startUpload', {})\r\n\r\n              }\r\n              clearTimeout(timer)\r\n            }, 3000);\r\n          } else {\r\n            this.setState({\r\n              updateModal: false\r\n            })\r\n            message.success(`The hardware version is v${firmwareVersion}, which is the latest version`)\r\n          }\r\n\r\n\r\n\r\n        } else {\r\n          console.log('没有获取到版本的文件');\r\n          message.error('Failed to get the latest version')\r\n          this.setState({\r\n            updateModal: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('获取版本失败,停止升级', err);\r\n        message.error('Failed to get the latest version')\r\n        this.setState({\r\n          updateModal: false\r\n        })\r\n\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id='advancedsettings'>\r\n        <div className=\"heard\">\r\n          <Heart />\r\n          <div className=\"title\">\r\n            <h2>Advanced Settings</h2>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Factory Reset<br /><br />\r\n\r\n                This will erase all data from your Mella<br /> device, including:<br />\r\n                - All installed updates<br />\r\n                - User preferences and Settings<br />\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              // onClick={this._reset}\r\n              onClick={() => this._upload('reset')}\r\n            >\r\n              <div className=\"btn\">Erase all data and reset device</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Mella Base\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n\r\n              onClick={() => this._upload1('base')}\r\n            >\r\n              <div className=\"btn\">Update Mella Charging Base</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                MellaPro Thermometer\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              onClick={() => {\r\n                // ipcRenderer.send('usbdata', { command: '01', arr: ['11'] })\r\n              }}\r\n            >\r\n              <div className=\"btn\">Connect Bluetooth and Update</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.updateModal}\r\n          element={\r\n            <div style={{ height: px(200), borderRadius: px(20) }} className=\"upload\">\r\n\r\n              {/* <p>{this.state.uploadText} </p> */}\r\n              <p style={{ color: '#000', padding: 0, margin: 0 }}>{this.state.uploadText}</p>\r\n            </div>\r\n          }\r\n        />\r\n        <Modal\r\n          open={this.state.isModalOpen}\r\n          // width={432}\r\n          className='tipModal'\r\n          centered\r\n          keyboard={false}\r\n          closable={false}\r\n          footer={null}\r\n        >\r\n          <div className='modalContentBox'>\r\n            <p className=\"title\">An update for the Mella Pro Charger is available</p>\r\n            <div className=\"modalBtnBox\">\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => this.setState({ isModalOpen: false })}\r\n                className=\"modalBtn\"\r\n              >\r\n                cancel\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => {\r\n                  this._upload1('base');\r\n                  this.setState({ isModalOpen: false })\r\n                }}\r\n                className=\"modalBtn\"\r\n              >\r\n                Update Mella Charging Base\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx",["728","729","730","731","732"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\nimport redJinggao from '../../assets/img/redjinggao.png'\r\n\r\nimport Heard from '../../utils/heard/Heard'\r\nimport Slider from '../../utils/slider/Slider'\r\nimport Button from '../../utils/button/Button'\r\nimport electronStore from '../../utils/electronStore'\r\nimport { px, win } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\n\r\nimport './index.less'\r\nimport { connect } from 'react-redux';\r\nimport { setMenuNum } from '../../store/actions'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage\r\nclass Settings extends Component {\r\n\r\n  state = {\r\n    self_tarting: false,      //自启动，\r\n    isHua: true,              //为true代表为华氏度，为false代表℃\r\n    is15: true,               //腋温测量时长，为true则是15秒，为false则是35秒\r\n    isClicleStudy: false,     //是否处于临床测试，为true则在处于，false则不处于\r\n    isBacklight: true,        //是否开启背光，为true则是开启背光，为false则是关闭背光\r\n    isBeep: true,             //是否开启蜂鸣器，为true则是开启蜂鸣器，反之则是关闭蜂鸣器\r\n    backlightTimer: { length: 140, number: '45' },//背光时长，长度指的是在滑轨上面的距离，number指的是显示的秒数\r\n    autoOff: { length: 0, number: '30' },  //无操作自动关机，长度指的是在滑轨上面的距离，number指的是关闭的秒数\r\n\r\n\r\n    oldIsHua: true,\r\n    oldIs15: true,\r\n    oldIsBacklight: true,\r\n    oldIsBeep: true,\r\n    oldBacklightTimer: { length: 140, number: '45' },\r\n    oldAutoOff: { length: 0, number: '30' },\r\n    oldIsClicleStudy: false,\r\n\r\n    isSave: false,\r\n\r\n    num0: '',\r\n    num1: '',\r\n    num2: '',\r\n    num3: '',\r\n    num4: '',\r\n    num5: '',\r\n    verifyNum: '',\r\n\r\n    maxLength: 1, //验证码长度\r\n    valueA: \"\", //验证码第一位\r\n    valueB: \"\", //二\r\n    valueC: \"\", //三\r\n    valueD: \"\", //四\r\n    valueE: \"\", //5\r\n    valueF: \"\", //6\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    // if (windowsHeight < 900) {\r\n    //   ipcRenderer.send('table', win())\r\n    // } else {\r\n    //   ipcRenderer.send('setting', win())\r\n    // }\r\n    ipcRenderer.send('big', win())\r\n    //这里要根据保存的时候存到哪个位置的，然后拿出来更新state\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`)\r\n    console.log('----', hardSet);\r\n    let isClicleStudy = storage.isClinical === 'true' ? true : false\r\n    if (hardSet) {\r\n      console.log('不是第一次进来，有设置的');\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\r\n\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy,\r\n\r\n      })\r\n    } else {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false,  //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: '45' },\r\n        autoOff: { length: 0, number: '30' },\r\n      }\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = settings\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy\r\n\r\n\r\n      })\r\n    }\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _save = () => {\r\n    console.log('点击保存');\r\n    /**\r\n     * 分别两部分保存保存，\r\n     * 本地存储：程序自启动、测量单位、背光、蜂鸣器、背光时间、硬件自动关机时间、腋温测量时间\r\n     * 临时存储：处于临床测试状态\r\n     */\r\n    this.setState({\r\n      isSave: false\r\n    })\r\n    let { self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 } = this.state\r\n    // console.log({ self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 });\r\n    let settings = {\r\n      isHua,\r\n      is15,\r\n      self_tarting,\r\n      isBacklight,\r\n      isBeep,\r\n      backlightTimer,\r\n      autoOff,\r\n    }\r\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n    // temporaryStorage.isClicleStudy = isClicleStudy\r\n    storage.isClinical = `${isClicleStudy}`\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (self_tarting) {\r\n      ipcRenderer.send('openAutoStart')\r\n    } else {\r\n      ipcRenderer.send('closeAutoStart')\r\n    }\r\n    let setArr = ['03', 'ed', '07', 'dd', autoOff.number, isBacklight ? backlightTimer.number : '00', isBeep ? '11' : '00', isHua ? '00' : '01']\r\n    console.log('setArr', setArr);\r\n\r\n\r\n\r\n    ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n\r\n    this.props.history.goBack()\r\n  }\r\n  _goback = () => {\r\n    console.log('返回');\r\n    let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff, isClicleStudy,\r\n      oldAutoOff, oldBacklightTimer, oldIs15, oldIsBacklight, oldIsBeep, oldIsClicleStudy, oldIsHua, } = this.state\r\n    if (isHua !== oldIsHua || is15 !== oldIs15 || isBacklight !== oldIsBacklight || isBeep !== oldIsBeep || backlightTimer !== oldBacklightTimer\r\n      || autoOff !== oldAutoOff || isClicleStudy !== oldIsClicleStudy) {\r\n      console.log('做了更改');\r\n      this.setState({\r\n        isSave: true\r\n      })\r\n\r\n    } else {\r\n      this.props.history.goBack()\r\n    }\r\n\r\n  }\r\n\r\n  //验证码光标后移\r\n  handleInputValue = (e, type) => {\r\n\r\n    const { value = \"\" } = e.target;\r\n    switch (type) {\r\n      case \"A\":\r\n        if (value) this.secondFoucs.focus();\r\n\r\n        this.setState({\r\n          valueA: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n\r\n      case \"B\":\r\n        if (value) this.tridFoucs.focus();\r\n\r\n        this.setState({\r\n          valueB: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"C\":\r\n        if (value) this.fourFoucs.focus();\r\n\r\n        this.setState({\r\n          valueC: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"D\":\r\n        if (value) this.fiveFoucs.focus();\r\n\r\n        this.setState({\r\n          valueD: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"E\":\r\n        if (value) this.sixFoucs.focus();\r\n\r\n        this.setState({\r\n          valueE: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n      default:\r\n        this.setState({\r\n          valueF: value.slice(0, 1),\r\n          isShow: true\r\n        });\r\n        break;\r\n    }\r\n\r\n  };\r\n  //删除验证码\r\n  handleDel = e => {\r\n    const BACK_SPACE = 8;\r\n    const isBackSpaceKey = e.keyCode === BACK_SPACE;\r\n    if (isBackSpaceKey && e.target.value.length === 0) {\r\n      let previous = e.target;\r\n      //上一个兄弟节点\r\n      previous = previous.previousElementSibling;\r\n      if (previous !== null && previous.tagName.toLowerCase() === \"input\") {\r\n        previous.focus();\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  moceCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    if (index < 5) {\r\n      inputs[++index].focus()\r\n    }\r\n  }\r\n  backCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    inputs[--index].focus()\r\n  }\r\n  _device = () => {\r\n\r\n    let userId = storage.userId\r\n    let deviceList = electronStore.get(`${userId}-deviceList`)\r\n    console.log('---', deviceList);\r\n    if (!deviceList) {\r\n      let str = `${getRamNumber()}`\r\n      for (let i = 0; i < 5; i++) {\r\n        str += `:${getRamNumber()}`\r\n      }\r\n      console.log('随机生成的mac地址:', str);\r\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\r\n      electronStore.set(`${userId}-deviceList`, deviceList)\r\n    }\r\n\r\n\r\n    function getRamNumber() {\r\n      var result = '';\r\n      for (var i = 0; i < 2; i++) {\r\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\r\n      }\r\n      //默认字母小写，手动转大写\r\n      return result.toLowerCase();//另toLowerCase()转小写\r\n    }\r\n    let deviceArr = []\r\n    let selectDevice = electronStore.get(`${storage.userId}-selectDevice`)\r\n    let selectDeviceName = ''\r\n    for (let i = 0; i < deviceList.length; i++) {\r\n      const element = deviceList[i];\r\n      let json = {\r\n        key: element.macId, value: element.name\r\n      }\r\n      deviceArr.push(json)\r\n      if (selectDevice === element.macId) {\r\n        selectDeviceName = element.name\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      // <div className=\"item\" style={{ marginTop: px(15) }}>\r\n      <div className=\"title\">\r\n        <div className=\"hardSetting\">{`Hardware Settings`}</div>\r\n      </div>\r\n      // </div>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    let { isBacklight, isBeep, backlightTimer, } = this.state\r\n\r\n    let bodyHeight = '90%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div id=\"settings\">\r\n        <div className=\"body\">\r\n          <div className=\"setting\">\r\n            {/* 桌面设计 */}\r\n            <div className=\"desk\">\r\n              <div className=\"title\">Desktop Settings</div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Launch Mella on Computer Startup</div>\r\n                  <div className=\"icon\"\r\n                    onClick={() => this.setState({ self_tarting: !this.state.self_tarting })}\r\n                  >\r\n                    {(this.state.self_tarting) && <span  >&#xe619;</span>}\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Units:</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°F / lbs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°C / kg</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n            {/* 用户设计 */}\r\n            {\r\n              // storage.roleId === '3' &&\r\n              <div className=\"desk\">\r\n                <div className=\"title\">User Admin</div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\" onClick={() => {\r\n                    this.props.setMenuNum('ConnectWorkplace')\r\n                    // this.props.history.push('/menuOptions/ConnectWorkplace')\r\n                  }}\r\n                  >\r\n                    <div className=\"text\">{`Org & Practice Profiles`}</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l\" onClick={() => {\r\n                    this.props.setMenuNum('InviteTeam')\r\n                    // this.props.history.push({ pathname: '/uesr/logUp/InviteTeam', isAddDoctor: true })\r\n                  }}>\r\n                    <div className=\"text\">Invite Your Team</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\"\r\n                    onClick={() => {\r\n                      console.log(storage.roleId);\r\n                      message.destroy()\r\n                      if (storage.roleId === '3') {\r\n                        // this.props.history.push('/menuOptions/veterinarians')\r\n                        this.props.setMenuNum('veterinarians')\r\n                      } else {\r\n                        message.error('You do not have administrator rights')\r\n                      }\r\n                    }}\r\n\r\n                  >\r\n                    <div className=\"text\">Vet Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l \"\r\n                    onClick={() =>\r\n                      this.props.setMenuNum('PetAndParents')\r\n                      // this.props.history.push('/menuOptions/petAndParents')\r\n                    }\r\n                    style={{ marginTop: '25px', }}>\r\n                    <div className=\"text\">Pet and Parents Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            }\r\n\r\n\r\n            {/* 硬件设置 */}\r\n\r\n            <div className=\"desk\">\r\n\r\n              {this._device()}\r\n              <div className=\"item\">\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Backlight</div>\r\n                  <Switch\r\n                    checked={isBacklight}\r\n                    onClick={() => this.setState({ isBacklight: !isBacklight })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Action Beep</div>\r\n                  <Switch\r\n                    checked={isBeep}\r\n                    onClick={() => this.setState({ isBeep: !isBeep })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"item\">\r\n                <div className=\"l\">\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Backlight Timer</div>\r\n                    <div className=\"solid\">\r\n                      10 Secs\r\n                      <div className=\"slider\" >\r\n                        <Slider\r\n                          min={10}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { console.log(e); this.setState({ backlightTimer: e }) }}\r\n                          left={backlightTimer.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"l\" >\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Auto Off After</div>\r\n                    <div className=\"solid\">\r\n                      30 Secs\r\n                      <div className=\"slider\">\r\n                        <Slider\r\n                          min={30}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { this.setState({ autoOff: e }) }}\r\n                          left={this.state.autoOff.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\">\r\n\r\n\r\n\r\n                <div className=\"l\" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                  <div className=\"text\">Measurement Time for Axillary Sensor</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">15 Secs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">30 Secs</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"l cursor\" onClick={() => this.props.history.push('/menuOptions/advancedsettings')}>\r\n                  <div className=\"text\">Advanced Settings</div>\r\n                  <div className=\"rightIcon\">&#xe60c;</div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"btnSave\">\r\n            <Button\r\n              text={'Save Changes'}\r\n              onClick={this._save}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.isSave}\r\n          element={\r\n            <div className='isSave'>\r\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n              <p>Settings changed - save?</p>\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <Button\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isSave: false\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'OK'}\r\n                  onClick={this._save}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n\r\n  }),\r\n  { setMenuNum }\r\n)(Settings)\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx",["733","734","735","736","737","738","739","740","741"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  message,\r\n  Button\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport close from '../../assets/img/close.png'\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport Avatar from '../../components/avatar/Avatar'\r\nimport moment from 'moment'\r\nimport './index.less';\r\nimport { listDoctorsByAdmin } from '../../api/mellaserver/organization'\r\nimport { admin_users } from '../../api/mellaserver/new'\r\nimport { connect } from 'react-redux'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nclass Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n\r\n\r\n    this._getExam()\r\n\r\n  }\r\n\r\n\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    admin_users(userId, params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(34), marginLeft: px(10) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(18), height: px(35) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchR\" style={{ fontSize: px(18), height: px(40) }}>\r\n              <Button\r\n                type=\"primary\"\r\n                size=\"small\"\r\n                shape=\"round\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n\r\n)(Veterinarians)","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx",["742","743"],"import React, { Component } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport { mTop, px, MTop, } from '../../utils/px';\nimport electronStore from '../../utils/electronStore';\n\nimport back_white from '../../assets/img/back-white.png';\nimport back_hui from '../../assets/img/back-hui.png';\nimport redclose from '../../assets/img/redclose.png';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet num07 = 0       //接收到07命令行的次数\n\n\nexport default class AddDevice extends Component {\n\n  state = {\n    noUSB: false,\n    devicesList: [],\n    selectDevice: null,\n    // selectDevice: true,\n    reName: '',\n    saveDeviceMac: []  //这是已经保存过的设备的macid\n\n  }\n\n  componentDidMount() {\n    message.destroy()\n\n    ipcRenderer.send('small')\n    // 监听分辨率是否改变\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('noUSB', this._noUSB)\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\n    if (devicesList) {\n      let saveDeviceMac = []\n      for (let i = 0; i < devicesList.length; i++) {\n        const element = devicesList[i];\n        saveDeviceMac.push(element.macId)\n      }\n      this.setState({\n        saveDeviceMac\n      })\n    }\n\n\n\n    // const timer = setTimeout(() => {\n    //   let deviceList = [\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\n    //   ]\n    //   this.setState({\n    //     devicesList: deviceList\n    //   })\n    //   clearTimeout(timer)\n    // }, 500);\n\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n\n        this.setState({\n          noUSB: true\n        })\n      }\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    // console.log(data);\n    this.command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    const instruction = [255]\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    // console.log(dataArr1);\n    const commandArr = {\n      255: () => {//蓝牙软尺广播的数据\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n              }\n              bluName = str\n              break;\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n            case 3: console.log('----尺子的,不知道什么用'); break;\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let macId = ''\n        if (bluData.length > 7) {\n          macId = this.getMac(bluName, bluData)\n        }\n\n\n        let sameFlog = this.state.devicesList.some((device, index) => {\n          return device.macId === macId\n        })\n        if (sameFlog || !macId) {   //重复直接退出\n          return\n        }\n        let deviceType = ''\n        switch (bluName) {\n          case 'Biggie':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n          case 'C19':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n\n          case 'MaeBowl':   //这是称量碗\n            deviceType = 'maeBowl'\n            break;\n\n          case 'Mella Measure': //这是蓝牙尺\n            deviceType = 'tape'\n            break;\n\n        }\n        if (macId && deviceType && bluName) {\n          let json = {\n            name: bluName,\n            deviceType,\n            macId\n          }\n          let deviceArr = [].concat(this.state.devicesList)\n          deviceArr.push(json)\n          this.setState({\n            devicesList: deviceArr\n          })\n        }\n\n\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  getMac = (bluName, bluData) => {\n    switch (bluName) {\n      case 'Biggie':\n      case 'MaeBowl':\n      case 'Mella Measure':\n      case 'C19':\n        let str = bluData[1]\n        for (let i = 2; i < 7; i++) {\n          str += `:${bluData[i]}`\n        }\n        return str\n\n\n      default:\n        break;\n    }\n\n  }\n\n\n\n  changeFenBianLv = (e) => {\n    ipcRenderer.send('small')\n    this.setState({\n    })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  body = () => {\n    let { noUSB, devicesList, selectDevice, reName } = this.state\n    if (selectDevice) {\n      return <div className=\"addDevice flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\n            this Mella device?</div>\n\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                this.setState({\n                  reName: value.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write the name\n            on the sticker provided so it is easy\n            to select your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              console.log('---', deviceList);\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              let { saveDeviceMac } = this.state\n              saveDeviceMac.push(selectDevice.macId)\n              this.setState({\n                saveDeviceMac,\n                selectDevice: null,\n                reName: ''\n              })\n\n            }}\n          >\n            <p className='btnText'>Add Another</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              this.props.history.goBack()\n\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                {'searching...'}\n              </p>\n            </div>\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n            let { saveDeviceMac } = this.state\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  this.setState({\n                    selectDevice: item\n                  })\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div id=\"addDevice\">\n        <div className=\"heaed\">\n          <div className=\"l\"\n          >\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                let { selectDevice } = this.state\n                if (selectDevice) {\n                  this.setState({\n                    selectDevice: null\n                  })\n                } else {\n                  this.props.history.goBack()\n                }\n\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n        <div className=\"body flex\">\n          {this.body()}\n        </div>\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx",["744","745","746","747","748"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { } from \"../../store/actions\";\nimport {\n  Layout,\n  Button,\n  Form,\n  Input,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n  message,\n} from \"antd\";\n\nimport changePhoto from '../../assets/images/changePhoto.png';\n\nimport { px, mTop } from \"../../utils/px\";\nimport countryList from '../../utils/areaCode/country';\nimport Avatar from '../../components/avatar/Avatar'\nimport { getUserInfoByUserId, update } from '../../api'\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst MyAccount = ({ bodyHeight }) => {\n  let storage = window.localStorage;\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [imageId, setImageId] = useState();\n  const [petUrl, setPetUrl] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [country, setCountry] = useState('US');\n  const [countryArr, setCountryArr] = useState();\n  const [infoData, setInfoDate] = useState();\n\n  const onFinish = (values) => {\n    let array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n    for (let index = 0; index < _.size(values.domain); index++) {\n      array[_.toNumber(values.domain[index])] = '1';\n    }\n    let reg = new RegExp(',', \"g\");\n    let res = _.toString(array).replace(reg, '');\n    let data = {\n      ...values,\n      imageId: imageId,\n      domain: res,\n      userId: storage.userId\n    };\n    update(data)\n      .then((res) => {\n        if (res.msg === 'success') {\n          message.success('The user information is updated successfully');\n        } else {\n          message.error('Description Failed to update user information');\n        }\n      })\n  };\n\n  useEffect(() => {\n    let arr = countryList.map(item => item.locale)\n    arr.sort(function (a, b) {\n      return a.localeCompare(b)\n    })\n    setCountryArr(arr);\n  }, []);\n\n  useEffect(() => {\n    getUserInfoByUserId(storage.userId)\n      .then((res) => {\n        if (res.flag === true) {\n          let newData = {\n            ...res.data,\n            domain: _.toArray(res.data.domain)\n\n          }\n          let arr = [];\n          for (let index = 0; index < _.size(newData.domain); index++) {\n            if (newData.domain[index] === '1') {\n              arr.push(_.toString(index));\n            }\n          }\n          newData.domain = arr;\n          form.setFieldsValue(newData);\n          setInfoDate(newData);\n          setImgUrl(res.data?.userImage?.url);\n        }\n      })\n  }, [])\n\n  return (\n    <Layout className=\"myAccountBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{\n          height: '100%',\n          backgroundColor: '#FFFFFF',\n          borderBottom: '2px solid #979797',\n          display: 'flex'\n        }}>\n          <span className=\"headerTitle\">My Account</span>\n        </div>\n      </div>\n      <div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={onFinish}\n          className=\"accountForm\"\n        >\n          <Row>\n            <Col flex={1} className=\"leftColBox\">\n              <Form.Item valuePropName=\"fileList\" name=\"imageId\" className=\"imageFormItem\">\n                <div className=\"upImg\" style={{ display: 'grid', justifyItems: 'center', alignItems: 'center' }}>\n                  <Avatar\n                    init={\n                      <div className=\"ciral\">\n                        <img src={imgUrl ? imgUrl : changePhoto} alt=\"\" id=\"touxiang\" />\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Change Photo</p>\n                      </div>\n                    }\n                    getinfo={(val) => {\n                      if (val) {\n                        setImageId(val);\n                      }\n\n                    }}\n                    getAllInfo={(val) => {\n                      if (val.url) {\n                        setPetUrl(val.url);\n                      }\n                    }}\n                  />\n                </div>\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n            <Col flex={1} className=\"rightColBox\">\n              <Form.Item label=\"FirstName\" name=\"firstName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"LastName\" name=\"lastName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"Phone\" name=\"phone\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item className=\"addressFormItem\" label=\"Address\">\n            <div style={{ display: 'flex' }}>\n              <Form.Item name=\"address1\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address1\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"address2\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address2\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"city\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"city\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"state\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"state\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"zipcode\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"zipcode\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"country\">\n                <Select\n                  showSearch\n                  style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\n                  bordered={false}\n                  optionFilterProp=\"children\"\n                  defaultValue=\"US\"\n                  // onChange={onChange}\n                  onSelect={(val) => { setCountry(val) }}\n                  filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                // open\n                // dropdownClassName=\"addressSelectBox\"\n                >\n                  {_.map(countryArr, (item, index) => (\n                    <Option key={index} value={item}>{item}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </div>\n          </Form.Item>\n          <Form.Item className=\"expertiseFormItem\" label=\"Areas of Expertise\" name=\"domain\">\n            <Checkbox.Group>\n              <Row>\n                <Col span={6}>\n                  <Checkbox\n                    value='0'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Dogs\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='1'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cats\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='2'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Small Pets\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='3'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Nutrition\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='4'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Surgery\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='5'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Zoo\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='6'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Wildlife\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='7'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cardiology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='8'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Neurology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='9'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Anaesthesia\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='10'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Other\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className=\"btnFormItem\">\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\" size=\"large\" style={{ width: px(260) }}>Save Changes</Button>\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n\nMyAccount.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({}),\n)(MyAccount);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx",["749","750","751","752","753","754","755","756","757"],"import React, { Component } from 'react'\nimport { Menu, message, Select, Button, Spin, Avatar } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport reddog from '../../assets/images/reddog.png'\nimport redcat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport selectphoto from '../../assets/images/sel.png'\n\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport AvatarUpload from '../../components/avatar/Avatar';\nimport { petPicture } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\nimport { getUserInfoByUserId, updateUserInfo, selectPetInfoByUserId } from '../../api/mellaserver/user';\n\nimport { getPersonPetByUserId } from '../../api/mellaserver/petall';\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nclass EditParent extends Component {\n  state = {\n    lastName: '',       //宠物主人性\n    firstName: '',      //宠物主人名\n    email: '',          //邮箱号\n    phone: '',          //电话号码\n    spin: false,        //加载中\n    imageId: null,      //图片的ID值\n    petList: [],         //当前这个宠物主人下的所有宠物\n    userId: '',          //当前这个宠物主人的userId\n    userImageUrl: '',\n    loading: false,//加载\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (this.props.history.location.userId) { //接受入参\n      let userId = this.props.history.location.userId\n      this.getPersonPet(userId);\n      this._getParent(userId);\n      this.setState({\n        userId,\n      })\n    }\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    this.setState({\n    })\n  }\n  //获取用户详情信息\n  _getParent = (data) => {\n    this.setState({\n      spin: true\n    })\n    getUserInfoByUserId(data)\n      .then(res => {\n        if (res.msg === 'success') {\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\n          firstName = firstName ? firstName : ''\n          phone = phone ? phone : ''\n          email = email ? email : ''\n          lastName = lastName ? lastName : ''\n          this.setState({\n            userImageUrl,\n            firstName,\n            lastName,\n            phone,\n            email,\n            imageId,\n            spin: false\n          })\n        } else {\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  //获取用户当前组织下的所有宠物\n  getPersonPet = (userId) => {\n    this.setState({ loading: true });\n    let newData = {\n      orgId: storage.lastOrganization,\n      userId: userId,\n    }\n    getPersonPetByUserId(newData)\n      .then((res) => {\n        this.setState({ loading: false });\n        if (res.msg === 'success') {\n          this.setState({ petList: res.data })\n        } else {\n          message.error('Failed to obtain pet information');\n        }\n      })\n      .catch((err) => {\n        message.error('Failed to obtain pet information');\n      })\n  }\n  _petSpecies = () => {\n    let { userImageUrl } = this.state\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\n    let { firstName, lastName } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>First Name</p>\n            <input\n              type=\"text\"\n              value={firstName}\n              onChange={(item) => {\n                this.setState({\n                  firstName: item.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Last Name</p>\n            <input\n              type=\"text\"\n              value={lastName}\n              onChange={(item) => {\n                this.setState({\n                  lastName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <AvatarUpload\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _petName = () => {\n    let { email, phone } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物列表\n  petList = () => {\n    let { petList } = this.state\n    let options = petList.map((item, index) => {\n      let { url, breedName, birthday, gender, petName, imageId, petSpeciesBreedId } = item\n      let images = `url(${url}?download=0&width=150)`\n      let petAge = moment(new Date()).diff(moment(birthday), 'years')\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div className=\"itemL\">\n              <Avatar src={this.shoePetPicture(petSpeciesBreedId, url)} size={50} />\n              <p\n                onClick={(e) => {\n                  let location = {\n                    pet: { ...item },\n                    userId: this.props.history.location.userId\n                  }\n                  this.props.history.push({ pathname: '/page9', ...location });\n                }}\n              >\n                {petName}\n              </p>\n            </div>\n            <div className=\"itemC\">\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\n            </div>\n            <div className=\"itemR\">\n              <p>{`${breedName}`}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\n    if (petList.length > 3) {\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\n    }\n    return (\n      <ul style={liStyle}>\n        {options}\n      </ul>\n    )\n  }\n  //保存\n  save = () => {\n    message.destroy()\n    let { firstName, lastName, email, phone, imageId, userId } = this.state\n    console.log({ firstName, lastName, email, phone, imageId });\n    let parames = {\n      userId,\n      email,\n      phone,\n      firstName,\n      lastName,\n      imageId\n    }\n    this.setState({\n      spin: true\n    })\n    message.destroy()\n    updateUserInfo(parames)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          this.props.history.goBack()\n        } else {\n          message.error('fail to edit')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        message.error('fail to edit')\n        console.log(err);\n      })\n  }\n  //选择宠物头像\n  shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  render() {\n    return (\n      <div id=\"editParent\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"editPetInfo_top\" >\n          <div className=\"parentInfo\">\n            <div className=\"title\" >{`Parent Information`}</div>\n            <div className=\"info\">\n              {this._petSpecies()}\n              {this._petName()}\n            </div>\n          </div>\n          <div className=\"pets\">\n            <div className=\"petsTitle\">\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\n              {/* <Button type=\"primary\" shape=\"round\">+ Add New Pet</Button> */}\n            </div>\n            <div className=\"petList\">\n              {this.petList()}\n            </div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              message.destroy()\n              this.props.history.push('/menuOptions/petAndParents');\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              this.save();\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n      </div>\n    )\n  }\n};\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(EditParent);\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx",["758","759","760"],"import React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, inviteUserByEmail, mellaLogin } from '../../api';\n\nexport default class Team extends Component {\n\n  state = {\n\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = temporaryStorage.logupSuccessData\n    let { organizationId } = temporaryStorage.logupOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      this._logIn()\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          this._logIn()\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let sign = storage.saveSign\n    try {\n      sign = JSON.parse(sign)\n    } catch (error) {\n\n    }\n\n    let { email, hash } = sign\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId\n                  }\n\n                  break\n                }\n              }\n\n            }\n            console.log('----------key值为：', connectionKey);\n            storage.connectionKey = connectionKey\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n\n\n\n\n\n\n\n          this.props.history.push('/menuOptions/ConnectWorkplace')\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n          <div className=\"line\"></div>\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._logIn}\n            text={'Skip'}\n          >\n            Skip\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",["761","762","763","764","765","766","767"],"import React, { Component } from 'react';\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\n\nimport { px } from '../../utils/px';\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\n\n\n\nimport './maxminreturn.less'\nimport MinClose from '../minClose/MinClose';\nimport { connect } from 'react-redux';\n\nclass MaxMin extends Component {\n    state = {\n        closebgc: '',\n        minbgc: '',\n        closeColor: '',\n    }\n    _close = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('关闭程序');\n        ipcRenderer.send('window-close')\n    }\n    _min = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('最小化程序');\n        ipcRenderer.send('window-min')\n        this.setState({\n            minbgc: '',\n        })\n    }\n    _minMove = () => {\n\n        this.setState({\n            minbgc: 'rgb(229,229,229)'\n        })\n    }\n    _minLeave = () => {\n        this.setState({\n            minbgc: ''\n        })\n    }\n    _closeMove = () => {\n        this.setState({\n            closeColor: 'red',\n            closebgc: '#fff'\n        })\n    }\n    _closeLeave = () => {\n        this.setState({\n            closeColor: ' rgb(245, 145, 145)',\n            closebgc: ''\n        })\n    }\n    _home = () => {\n        console.log(this.props);\n        // this.props.history.push('/')\n    }\n\n    beforeDiv = () => {\n      return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n    };\n    afterDiv = () => {\n      return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n    };\n\n\n    render() {\n        const { closeColor, closebgc, minbgc } = this.state\n        return (\n            <div className=\"maxminreturn\">\n                <div className=\"heard1\">\n                    {this.props.systemType === 'mac' && <MinClose />}\n                    {/* <div\n                        className=\" iconfont icon-left heard\"\n                        onClick={this.props.onClick1}\n                    /> */}\n                    <MouseDiv\n                        className=\"mouseDiv\"\n                        beforeDiv={this.beforeDiv}\n                        afterDiv={this.afterDiv}\n                        divClick={this.props.onClick1}\n                      />\n                </div>\n                {/* <div className='headIconBox'>\n                </div> */}\n                <div className=\"close123\">\n                    {/* <div className=\"home iconfont icon-zhuye3\"\n                        onClick={this.props.onClick}\n                    /> */}\n                    {this.props.systemType !== 'mac' &&\n                        <>\n                          <div\n                            className=\"heaed\"\n                            // style={{ paddingRight: px(20) }}\n                          >\n                            <div className=\"l\">\n\n                            </div>\n                            <div className=\"r\">\n                              <MinClose />\n                            </div>\n                          </div>\n                        </>\n                    }\n\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default connect(\n    (state) => ({\n        systemType: state.systemReduce.systemType\n    })\n\n)(MaxMin)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx",["768","769","770","771","772","773","774","775","776","777","778","779","780","781"],"import React, { Component } from \"react\";\r\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Heard from \"./../../utils/heard/Heard\";\r\nimport del from \"./../../assets/images/del.png\";\r\nimport Close from \"./../../assets/img/close.png\";\r\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\r\nimport { px, MTop } from \"./../../utils/px\";\r\nimport electronStore from \"./../../utils/electronStore\";\r\nimport MyModal from \"./../../utils/myModal/MyModal\";\r\nimport SelectPetModal from \"../../components/selectPetModal\";\r\nimport AddPetModal from \"../../components/addPetModal\";\r\n\r\nimport moment from \"moment\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport \"./index.less\";\r\nimport {\r\n  getPetExamByDoctorId,\r\n  selectBreedBySpeciesId,\r\n  listAllPetInfo,\r\n  checkPatientId,\r\n  addDeskPet,\r\n  addAndSavePetExam,\r\n  deletePetExamByExamId,\r\n} from './../../api';\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\n\r\nexport default class Unassigned extends Component {\r\n  state = {\r\n    historyData: [], //列表的数据集合\r\n    units: \"℉\",\r\n    searchText: \"\", //搜索测试记录框输入的内容\r\n    serchExamData: [], //搜索到的测量记录\r\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\r\n    visible: false, //nodel框是否显示\r\n    imgId: -1, //上传后返回的图像id号\r\n\r\n    assignPatientId: \"\",\r\n    assignPetName: \"\",\r\n    assignOwnerName: \"\",\r\n    assignBreed: \"\",\r\n    assignBreedId: \"\",\r\n    assignPetAge: \"\",\r\n    assignPetWeight: \"\",\r\n    assignPetId: \"\",\r\n    assignPetImgUrl: \"\",\r\n    inputDisabled: false,\r\n    breedArr: [], //猫、狗品种集合\r\n    loading: false,\r\n    disabled: true, //model是否可拖拽\r\n    search: \"\", //分配宠物搜索框\r\n    petListData: [],\r\n    searchPetList: [],\r\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\r\n    selectPetId: \"\",\r\n    modalLoading: false,//控制弹窗加载\r\n    pageSize: 10,//数量\r\n    currPage: 1,//页码\r\n    total: 0,//总数\r\n    deviceType: 0,//未分配类型\r\n    addPetId: '',//添加新宠物的id\r\n    selectPetModalLoading: false,//选择宠物弹窗加载\r\n    addPetVisible: false,//添加宠物弹窗\r\n    addPetModalLoading: false,//添加宠物弹窗加载\r\n  };\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.send(\"big\");\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    let getBreed = electronStore.get(\"getBreed\");\r\n    if (getBreed) {\r\n      this.setState({\r\n        breedArr: getBreed,\r\n      });\r\n    }\r\n    this.setState({\r\n      deviceType: this.props.deviceType\r\n    }, () => {\r\n      this._getEmergencyHistory(1);\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    message.destroy();\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    this.setState({});\r\n  };\r\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\r\n  _getEmergencyHistory = (currPage) => {\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate(data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = [];\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    let data = {\r\n      pageSize: this.state.pageSize,\r\n      currPage: currPage,\r\n      deviceType: this.state.deviceType,\r\n    }\r\n    getPetExamByDoctorId(storage.userId, data)\r\n      .then((res) => {\r\n        if (res.flag === true) {\r\n          let datas = res.data.list;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            let {\r\n              petId,\r\n              examId,\r\n              userId,\r\n              petVitalTypeId,\r\n              temperature,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              memo,\r\n              clinicalDatagroupId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              createTime,\r\n              clinicalDataEntity,\r\n            } = datas[i];\r\n            let day = moment().diff(moment(createTime), \"day\");\r\n            let Tem = temperature;\r\n            try {\r\n              if (clinicalDataEntity) {\r\n                Tem = temperature || clinicalDataEntity.data0;\r\n              }\r\n            } catch (error) {\r\n              console.log(\"抛出的异常\", error);\r\n            }\r\n            let str = {\r\n              clinicalDatagroupId,\r\n              createTime,\r\n              date: moment(createTime).format(\"MMM DD\"),\r\n              time: moment(createTime).format(\"hh:mm A\"),\r\n              temp: parseInt(Tem * 10) / 10,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n              day,\r\n            };\r\n            historys.push(str);\r\n          }\r\n          let newArr = [];\r\n          if (this.state.currPage === 1) {\r\n            newArr = historys\r\n          } else {\r\n            let oldArr = this.state.historyData;\r\n            let arr = historys;\r\n            newArr = [...oldArr, ...arr];\r\n          }\r\n          //把所有数据拿完后做个排序\r\n          let historyData = ForwardRankingDate(newArr, \"createTime\");\r\n          this.setState({\r\n            historyData,\r\n            loading: false,\r\n            total: res.data.totalCount\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  };\r\n  _search = (value = \"\") => {\r\n    let list = this.state.historyData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\r\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      serchExamData: searchData,\r\n    });\r\n  };\r\n  draggleRef = React.createRef();\r\n  //表格滚动\r\n  onScrollCapture = () => {\r\n    // 滚动的容器\r\n    let tableEleNodes = document.querySelectorAll(`.tableStyle .ant-table-body`)[0];\r\n    //是否滚动到底部\r\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\r\n    if (bottomType) {\r\n      if (this.state.total === this.state.historyData.length) {\r\n        return false;\r\n      }\r\n      this.setState({\r\n        currPage: this.state.currPage + 1,\r\n      })\r\n      this._getEmergencyHistory(this.state.currPage + 1);\r\n    }\r\n  }\r\n  //选择宠物进行分配\r\n  assignPet = (value) => {\r\n    this.setState({ selectPetModalLoading: true });\r\n    let parmes = {\r\n      petId: value.petId,\r\n      clinicalDatagroupId: this.state.seleceEmergencies.clinicalDatagroupId,\r\n    };\r\n    addAndSavePetExam(this.state.seleceEmergencies.historyId, parmes)\r\n      .then((res) => {\r\n        this.setState({ selectPetModalLoading: false });\r\n        if (res.flag === true) {\r\n          message.success(\"Assigned successfully\");\r\n          this.setState({\r\n            assignVisible: false,\r\n            addPetId: ''\r\n          })\r\n          this._getEmergencyHistory(1);\r\n        } else {\r\n          message.error(\"Assignment failed\");\r\n        }\r\n\r\n      })\r\n      .catch((err) => {\r\n        message.error(\"Assignment failed\");\r\n        this.setState({ selectPetModalLoading: false });\r\n      })\r\n\r\n\r\n  }\r\n  //添加宠物弹窗显示\r\n  onAddPet = () => {\r\n    this.setState({\r\n      addPetId: '',\r\n      addPetVisible: true,\r\n      assignVisible: false,\r\n    })\r\n  }\r\n  //添加新宠物\r\n  addNewPet = (value) => {\r\n    let data = {\r\n      ...value,\r\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\r\n    };\r\n    if (storage.lastWorkplaceId) {\r\n      data.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      data.organizationId = storage.lastOrganization\r\n    }\r\n    if (storage.userId) {\r\n      data.doctorId = storage.userId\r\n    }\r\n    this.setState({ addPetModalLoading: true }, () => {\r\n      addDeskPet(value.patientId, data)\r\n        .then((res) => {\r\n          this.setState({ addPetModalLoading: false })\r\n          if (res.flag === true) {\r\n            message.success('Adding pets successfully');\r\n            this.setState({\r\n              addPetId: res.data.petId,\r\n              addPetVisible: false,\r\n              assignVisible: true,\r\n            })\r\n          } else {\r\n            message.error('patientId already exists');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          message.error('system exception');\r\n        })\r\n    });\r\n\r\n  }\r\n  //删除分配记录\r\n  deletePetExam = (key, record) => {\r\n    deletePetExamByExamId(key, '')\r\n      .then((res) => {\r\n        if (res.flag === true) {\r\n          const historyData = [...this.state.historyData];\r\n          this.setState({\r\n            historyData: historyData.filter((item) => item.historyId !== key),\r\n          });\r\n        } else {\r\n          message.error('Fail to delete')\r\n        }\r\n      }\r\n      )\r\n      .catch((err) => {\r\n        message.error('system exception');\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let { loading, disabled, historyData, searchText, serchExamData } = this.state;\r\n\r\n    const columns = [\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        key: \"operation\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                margin: `${px(8)}px 0`,\r\n              }}\r\n            >\r\n              <Popconfirm\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => this.deletePetExam(record.historyId, record)}\r\n              >\r\n                <img src={del} alt=\"\" width={25} style={{ marginRight: \"8px\" }} />\r\n              </Popconfirm>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Pet Description\",\r\n        dataIndex: \"description\",\r\n        key: \"description\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        width: 150,\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Species\",\r\n        dataIndex: \"species\",\r\n        key: \"species\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Note\",\r\n        dataIndex: \"note\",\r\n        key: \"note\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"assign\",\r\n        key: \"assign\",\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              className=\"assign\"\r\n              style={{\r\n                fontSize: px(16),\r\n                paddingTop: px(5),\r\n                paddingBottom: px(5),\r\n                fontFamily: 'serif'\r\n              }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  assignVisible: true,\r\n                  seleceEmergencies: record,\r\n                });\r\n              }}\r\n            >\r\n              Assign\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\r\n    return (\r\n      <div id=\"unassigned\" style={{ height: this.props.bodyHeight }}>\r\n        <div className=\"body\">\r\n          <div\r\n            className=\"title\"\r\n            style={{\r\n              marginTop: px(30),\r\n              fontSize: px(30),\r\n              marginBottom: px(40),\r\n            }}\r\n          >\r\n            Unassigned Measurements\r\n          </div>\r\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\r\n            <div className=\"searchBox\">\r\n              <Input\r\n                placeholder=\"Search Pet Name or Description\"\r\n                bordered={false}\r\n                value={this.state.searchText}\r\n                allowClear={true}\r\n                prefix={<SearchOutlined />}\r\n                onChange={(e) => {\r\n                  this.setState({\r\n                    searchText: e.target.value,\r\n                  });\r\n                  this._search(e.target.value);\r\n                }}\r\n                onKeyUp={(e) => {\r\n                  if (e.keyCode === 13) {\r\n                    this._search();\r\n                  }\r\n                  if (e.keyCode === 27) {\r\n                    this.setState({\r\n                      searchText: \"\",\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div\r\n              className=\"searchBtn\"\r\n              style={{ height: px(35), fontSize: px(18) }}\r\n              onClick={this._search}\r\n            >\r\n              <p>Search</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"tableBox\" onScrollCapture={() => this.onScrollCapture()}>\r\n            <Table\r\n              style={{\r\n                width: \"95%\",\r\n                margin: \"0 auto\",\r\n                border: '1px solid #979797',\r\n                fontFamily: 'serif'\r\n\r\n              }}\r\n              bordered\r\n              loading={loading}\r\n              columns={columns}\r\n              dataSource={tableData}\r\n              rowKey={(columns) => columns.historyId}\r\n              pagination={false}\r\n              scroll={{\r\n                // y: MTop(500),\r\n                y: 500\r\n              }}\r\n              className=\"tableStyle\"\r\n            />\r\n          </div>\r\n        </div>\r\n        {\r\n          this.state.assignVisible && (\r\n            <SelectPetModal\r\n              visible={this.state.assignVisible}\r\n              destroyOnClose\r\n              width={400}\r\n              value={this.state.addPetId}\r\n              onCancel={() => {\r\n                this.setState({\r\n                  assignVisible: false,\r\n                  addPetId: ''\r\n                })\r\n              }}\r\n              onAddPet={() => this.onAddPet()}\r\n              onSelect={(value) => {\r\n                this.assignPet(value);\r\n              }}\r\n              onLoading={this.state.selectPetModalLoading}\r\n            />\r\n          )\r\n        }\r\n        {\r\n          this.state.addPetVisible && (\r\n            <AddPetModal\r\n              visible={this.state.addPetVisible}\r\n              destroyOnClose\r\n              width={400}\r\n              onCancel={() => {\r\n                this.setState({\r\n                  addPetVisible: false,\r\n                  assignVisible: true,\r\n                })\r\n              }}\r\n              onConfirm={(value) => {\r\n                this.addNewPet(value);\r\n              }}\r\n              onLoading={this.state.addPetModalLoading}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx",["782","783","784","785","786","787","788","789","790","791","792","793","794","795","796"],"import { message, Tag, Space, Table  } from 'antd'\nimport moment from 'moment/moment'\nimport React, { Component } from 'react'\n\nimport Icon, { DownOutlined, UpOutlined } from '@ant-design/icons';\n\nimport { px } from '../../utils/px';\n\nimport { buy, getOrderInfo, getPreOrderById, payForOrder, reFund  } from '../../api'\nimport BuySub from '../../components/buySub'\nimport MyModal from '../../utils/myModal/MyModal'\nimport { win } from '../../utils/px'\nimport defaultUserIcon from './../../assets/img/defaultUserIcon.png'\n\nimport down from '../../assets/img/xia.png'\nimport expand from '../../assets/img/expand.png'\n\nimport \"./index.less\"\n\nlet storage = window.localStorage;\n\nlet num = 0\n\n\nexport default class Subscriptions extends Component {\n    state = {\n        subscriptionData: [],   // 订阅列表的数据集合\n        userUrl: '',\n        userName: '',\n        endDate: '',\n        selectListIndex: 0,\n        buyModal: false,\n        loadings: [false, false, false]\n\n    }\n    componentDidMount() {\n        let ipcRenderer = window.electron.ipcRenderer\n        ipcRenderer.send('big', win())\n        this.getOrderInfo()\n    }\n    componentWillUnmount() {\n        this.timer && clearInterval(this.timer);\n    }\n    getOrderInfo = () => {\n        getOrderInfo(storage.userId)\n            .then(res => {\n                console.log('res', res);\n                let { msg, success, code } = res\n                if (code === 0 && msg === 'success') {\n                    let { firstName, imageUrl, isExpired, lastName, preOrderId, endTime } = success[0]\n                    let tempData = success\n                    let endDate = moment(endTime).format('MMMM D, YYYY')\n                    endDate = isExpired === 0 ? endDate : ''\n                    console.log('tempData', tempData);\n                    this.setState({\n                        subscriptionData: tempData,\n                        userName: `${lastName} ${firstName}`,\n                        userUrl: imageUrl,\n                        endDate\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 21 ~ Subscriptions ~ err\", err)\n            })\n    }\n    buyFun = (item) => {\n\n        let loadings = [].concat(this.state.loadings)\n        let params = {\n            count: 1,\n            details: '测试'\n        }\n        switch (item.type) {\n            case 'month':\n                loadings[0] = true\n                params.productId = 1\n                break;\n            case 'year':\n                loadings[1] = true\n                params.productId = 2\n\n                break;\n            case 'free':\n                params.productId = 3\n                loadings[2] = true\n                break;\n\n            default:\n                break;\n        }\n        this.setState({\n            loadings\n        })\n        console.log('params:', params);\n        console.log('storage', storage);\n        buy(storage.userId, params)\n            .then(res => {\n                console.log(res);\n                let buyItem = item.type\n                let payParams  = {\n                  organizationId: storage.lastOrganization || null,\n                  userId: storage.userId\n                }\n                if (res.code === 0 && res.msg === 'success') {\n                    let { preOrderId } = res.data\n                    let buyItem1 = buyItem\n                    payForOrder(preOrderId, payParams)\n\n                        .then(res => {\n                            let { code, message, url } = res\n                            if (code === 0) {\n                                window.open(url)\n                                this.timer = setInterval(() => {\n\n                                    num++;\n                                    this._polling(preOrderId, buyItem1);\n\n                                    if (num > 280) {\n                                        //超过280秒则去显示二维码过期，要重新获取\n\n                                        num = 0;\n                                        this.timer && clearInterval(this.timer);\n                                    }\n                                }, 1500);\n                            } else {\n                                this.changeLoadings(buyItem1)\n                                message.destroy()\n                                message.error('Bill generation failed')\n                            }\n\n                        })\n                        .catch(err => {\n                            this.changeLoadings(buyItem1)\n                            message.destroy()\n                            message.error('Bill generation failed')\n                            console.log(err);\n                        })\n                } else {\n                    this.changeLoadings(buyItem)\n                    message.destroy()\n                    message.error('Order acquisition failed')\n                }\n            })\n            .catch(err => {\n                message.destroy()\n                message.error('Order acquisition failed')\n                console.log(err);\n            })\n    }\n    changeLoadings = (buyItem) => {\n        let arr = [].concat(this.state.loadings)\n        switch (buyItem) {\n            case 'month':\n                arr[0] = false\n                break;\n            case 'year':\n                arr[1] = false\n                break;\n            case 'free':\n                arr[2] = false\n                break;\n        }\n        this.setState({\n            loadings: arr\n        })\n    }\n    _polling = (preOrderId, buyItem) => {\n        getPreOrderById(preOrderId)\n            .then(res => {\n                console.log(res);\n                let { code, data } = res\n                if (code === 0) {\n                    let { status } = data\n                    if (status && status !== 1) {\n                        let arr = [].concat(this.state.loadings)\n                        switch (buyItem) {\n                            case 'month':\n                                arr[0] = false\n                                break;\n                            case 'year':\n                                arr[1] = false\n                                break;\n                            case 'free':\n                                arr[2] = false\n                                break;\n                        }\n                        this.setState({\n                            loadings: arr\n                        })\n                    }\n                    switch (status) {\n                        case 1:\n                            //待支付\n                            break;\n                        case 2:\n                            //取消支付\n                            message.destroy()\n                            message.warn('User cancels payment')\n                            this.timer && clearInterval(this.timer);\n                            break;\n                        case 3:\n                            message.destroy()\n                            message.success('The user paid successfully')\n                            this.timer && clearInterval(this.timer);\n\n                            //支付成功\n                            break;\n                        case 6:\n                        //待退款\n                        case 7:\n                        //已退款\n                        case 8:\n                            //已过期\n                            this.timer && clearInterval(this.timer);\n                    }\n                }\n            })\n\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    // 取消订阅，退款\n    cancelSub = (value) => {\n      reFund(value).then(res => {\n        console.log('cancelRes', res);\n      })\n    }\n\n    typeText = (text) => {\n      switch (text) {\n        case 1:\n          return 'Premium Monthly';\n        case 2:\n          return 'Premium Yearly';\n        case 3:\n          return 'Free Trial';\n        default:\n          return '';\n      }\n    }\n\n\n\n    render() {\n        let { userUrl, userName, endDate, selectListIndex, subscriptionData } = this.state\n        let url = !userUrl ? defaultUserIcon : userUrl\n\n        let bodyHeight = '90%'\n        try {\n          bodyHeight = document.getElementById('subscriptions').clientHeight\n        } catch (error) {\n\n        }\n        const expandedRowRender = (record) => {\n          let expandList = []\n          expandList.push(record)\n          console.log('record111', expandList);\n          const columns = [\n            {\n              title: '',\n              dataIndex: 'quotaType',\n              key: 'quotaType',\n              width: '30%',\n              align: \"left\",\n              render: (text, record, index) => {\n                return <>\n                  <p style={{ textAlign: \"left\" }}>{record.quotaType}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                  <p style={{ textAlign: \"left\" }}>{text}</p>\n                </>\n              },\n            },\n            {\n              title: '',\n              dataIndex: 'startTime',\n              key: 'name',\n              render: (text, record) => <p style={{ textAlign: \"left\" }}>Start Date: {moment(text).format(\"MMM D, YYYY\")}</p>,\n            },\n          ];\n          return <Table className=\"expandTable\" border={false} showHeader={false} columns={columns} dataSource={expandList} pagination={false} />;\n        };\n        const columns = [\n          {\n            title: '',\n            dataIndex: 'quotaType',\n            key: 'quotaType',\n            width: '30%',\n            render: (text, record, index) => {\n              if (text === 1) {\n                return <p>Premium Monthly</p>;\n              } else if (text === 2) {\n                return <p>Premium Yearly</p>;\n              } else if (text === 3) {\n                return <p>Free Trialy</p>;\n              } else {\n                return '';\n              }\n            },\n          },\n          {\n            title: '',\n            dataIndex: 'endTime',\n            key: 'endTime',\n            align: \"left\",\n            render: (text, record) => <p>Expires {moment(text).format(\"MMM D, YYYY\")}</p>,\n          },\n          {\n            title: '',\n            dataIndex: 'isExpired',\n            width: '20%',\n            key: 'isExpired',\n            render: (text, index) => {\n              if (text === 0) {\n                return <Tag color=\"#87d068\" style={{width: px(65), height: px(22), fontSize: 18}}>Active</Tag>\n              } else {\n                return <Tag color=\"#4a4a4a\" style={{width: px(65), height: px(22), fontSize: 18}}>Expired</Tag>\n\n              }\n            }\n          },\n\n        ];\n        let tableData = subscriptionData;\n        return (\n            <div id=\"subscriptions\">\n                <div className=\"top\">\n                  <div className=\"TitleItem flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n                    <div className=\"title\">Billing & Subscriptions</div>\n                  </div>\n\n                </div>\n\n                <div className=\"content flex\">\n                  <div className=\"TitleItem flex\" style={{ paddingLeft: px(20) }}>\n                    <div className=\"title\" style={{ fontSize: 26 }}>My Subscriptions</div>\n                    <div className=\"subTitle\">\n                      <p>View and manage</p>\n                      <p>the subscriptions you’ve purchased</p>\n                    </div>\n                  </div>\n\n                  <div className=\"walkBtn1\" style={{ marginLeft: px(50) }}>\n                    <div\n                      className=\"walkbtnBox\"\n                      style={{ height: px(40), width: px(200) }}\n                      onClick={() => this.setState({ buyModal: true })}\n                    >\n                      <div className=\"walkText\">Change Subscription</div>\n                    </div>\n                    <div className=\"sub\" style={{ marginTop: px(12) }} onClick={() => this.cancelSub('13f215776b104325a6ba23b0c5931d14')}>Cancel Subscription</div>\n\n                  </div>\n                </div>\n\n                <div className=\"tableDiv\" style={{ height: bodyHeight - px(250) }} >\n                <Table\n                    className='mainTable'\n                    showHeader={false}\n                    columns={columns}\n                    pagination={false}\n                    rowKey={(columns) => columns.orderId}\n                    expandable={{\n                      expandedRowRender,\n                      defaultExpandedRowKeys: ['0'],\n                      // columnWidth: '100px',\n                      expandIconColumnIndex: '4',\n                      expandIcon: ({ expanded, onExpand, record }) =>\n                                expanded ? (\n                                  <Icon component={() => (<img src={expand} />)} onClick={e => onExpand(record, e)}  />\n                                ) : (\n                                  <Icon component={() => (<img src={down} />)} onClick={e => onExpand(record, e)} />\n                                )\n                    }}\n                    dataSource={tableData}\n                    size=\"small\"\n                  />\n                </div>\n\n                <MyModal\n                    visible={this.state.buyModal}\n                    // visible={true}\n\n                    element={\n                        <div className='buyModal'>\n                            <BuySub\n                                cancleFun={() => this.setState({ buyModal: false })}\n                                buyFun={(item) => {\n                                    // window.open('https://www.baidu.com')\n                                    this.buyFun(item)\n                                }}\n                                loadings={this.state.loadings}\n                            />\n                        </div>\n                    }\n                />\n\n\n            </div>\n        )\n    }\n}\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx",["797","798","799","800","801","802","803"],"import React, { Component } from \"react\";\r\nimport { Select, Input, message, Modal, } from \"antd\";\r\nimport Heart from \"../../utils/heard/Heard\";\r\nimport { px } from \"../../utils/px\";\r\nimport \"./index.less\";\r\nimport Integration from \"./components/Integration\";\r\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Close from '../../assets/img/close.png'\r\nimport left1 from '../../assets/img/left1.png'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport { listAll } from '../../api';\r\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\r\nimport { addOrganization } from '../../api';\r\nimport { setMenuNum, setMenuActive } from \"../../store/actions\";\r\n\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport Button from '../../utils/button/Button'\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nconsole.log('storage: ', storage);\r\n\r\nclass ConnectWorkplace extends Component {\r\n  state = {\r\n    orgArr: [],\r\n    workplaceJson: {},\r\n    connectionKey: \"\",\r\n    selectOrgId: -1,\r\n    selectRoleId: \"\",\r\n    switchType: 'vetspire',//选择是哪种集成\r\n    roleId: '',//权限id\r\n\r\n    search: '',\r\n    listData: [],\r\n    selectId: {},\r\n    searchData: [],\r\n    selectworkplace: [],\r\n    workplaceList: [],  // 工作场所列表\r\n    isOrg: false,     // 选择组织弹窗\r\n    isWorkplace: false,   // 选择工作场所弹窗\r\n    visible: false,       //model框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    loadVisible: false,\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n  };\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    ipcRenderer.send(\"big\");\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    let userWorkplace = [];\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\r\n    } catch (error) {\r\n      console.log(\"字符串转对象失败\", error);\r\n    }\r\n    let orgArr = [],\r\n      workplaceJson = {};\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i];\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element;\r\n        const { name, organizationId, connectionKey } = organizationEntity;\r\n        const { workplaceName, workplaceId } = workplaceEntity;\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          this.setState({\r\n            workplaceName,\r\n            workplaceId: storage.lastWorkplaceId,\r\n          });\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n          this.setState({\r\n            organizationName: name,\r\n            organizationId: storage.lastOrganization,\r\n            selectOrgId: storage.lastOrganization,\r\n          });\r\n        }\r\n\r\n        let orgRepeatFlog = false,\r\n          repeatFlogNum = -1;\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true;\r\n            repeatFlogNum = j;\r\n            break;\r\n          }\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName,\r\n            workplaceId,\r\n          };\r\n          let id = orgArr[repeatFlogNum].organizationId;\r\n          workplaceJson[`${id}`] = workplace;\r\n        } else {\r\n          let connectKey = connectionKey || \"\";\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId,\r\n          };\r\n          let workplace = [\r\n            {\r\n              workplaceName,\r\n              workplaceId,\r\n            },\r\n          ];\r\n          workplaceJson[`${organizationId}`] = workplace;\r\n\r\n          orgArr.push(json);\r\n        }\r\n      }\r\n    }\r\n    listAll().then((res) => {\r\n      console.log(res);\r\n      if (res.msg === 'success') {\r\n        this.setState({\r\n          listData: res.data\r\n        })\r\n      }\r\n    })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n    console.log('temporaryStorage.logupSelectOrganization', temporaryStorage.logupSelectOrganization);\r\n    this.setState({\r\n      orgArr,\r\n      workplaceJson,\r\n      connectionKey: storage.connectionKey,\r\n      selectRoleId: storage.roleId,\r\n      selectId: temporaryStorage.logupSelectOrganization\r\n    });\r\n    temporaryStorage.logupSelectOrganization = {}\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    this.setState({});\r\n  };\r\n  //选择集成\r\n  onSwitchIntegration = (type) => {\r\n    this.setState({\r\n      switchType: type\r\n    });\r\n  }\r\n  clickItem = () => {\r\n\r\n  }\r\n\r\n  getAllList = () => {\r\n    listAll().then((res) => {\r\n      console.log(res);\r\n      if (res.msg === 'success') {\r\n        this.setState({\r\n          listData: res.data\r\n        })\r\n      }\r\n    })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  deleteWorkPlace = (item) => {\r\n    console.log('@', item);\r\n  }\r\n\r\n  // 选择组织列表\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.organizationId}\r\n        className={this.state.selectId.organizationId === item.organizationId ? 'highlight' : null}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          temporaryStorage.logupSelectOrganization = item\r\n        }}\r\n      >\r\n        <div className=\"item\">{item.name}</div>\r\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  // 工作场所列表\r\n  _list1 = () => {\r\n    const { search, workplaceList, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : workplaceList\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.workplaceId}\r\n        className={ this.state.selectworkplace === item ? 'highlight' : null }\r\n        onClick={() => {\r\n          this.setState({\r\n            selectworkplace: item\r\n          })\r\n        }}\r\n\r\n      >\r\n\r\n        {item.workplaceName}\r\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  // 搜索组织\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n\r\n  // 搜索工作场所\r\n  _searchworkPlace = (val) => {\r\n    let search = val.target.value\r\n    let listData = this.state.workplaceList\r\n    console.log('----------------', listData);\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n\r\n  // 创建组织\r\n  _goNewOrg = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    this.props.history.push(\"/menuOptions/NewOrg\")\r\n  }\r\n\r\n  // 创建组织\r\n  _goNewWorkplace = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    // this.props.history.push('/uesr/logUp/NewOrganization')\r\n    this.props.history.push(\"/menuOptions/NewOrg\")\r\n  }\r\n\r\n  // 跳转工作场所\r\n  _goWorkplace = () => {\r\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            workplaceList: res.data,\r\n            isOrg: false,\r\n\r\n          }, () => {\r\n            this.setState({\r\n              isWorkplace: true\r\n            })\r\n          })\r\n        } else {\r\n          console.log('请求错误');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  // 添加组织\r\n  _addworkplaced = () => {\r\n    let { selectworkplace } = this.state || {};\r\n    console.log(selectworkplace);\r\n    console.log(temporaryStorage.logupSelectOrganization);\r\n    console.log(storage.userId);\r\n    let params = {\r\n      name: temporaryStorage.logupSelectOrganization.name,\r\n      workplaceName: selectworkplace.workplaceName,\r\n      workplaceTypeId: selectworkplace.workplaceTypeId,\r\n      address1: selectworkplace.address1,\r\n      address2: selectworkplace.address2,\r\n      // phone: `+${code}${phone}`,\r\n      country: selectworkplace.country,\r\n      city: selectworkplace.city,\r\n      state: selectworkplace.state,\r\n      zipcode: selectworkplace.zipcode,\r\n      email: selectworkplace.email\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n    addOrganization(storage.userId, params)\r\n      .then(res => {\r\n        // console.log('添加组织返回的信息', res);\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        if (res.flag === true) {\r\n          if (res.code === 11030) {\r\n            this.setState({ visible: true })\r\n          }\r\n          if (res.code === 20000) {\r\n            console.log('添加成功，跳转');\r\n            // temporaryStorage.logupOrganization = res.data\r\n            // this.props.history.push('/uesr/logUp/InviteTeam')\r\n            this.setState({\r\n              isOrg: false,\r\n              isWorkplace: false,\r\n            }, this.getAllList())\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('添加组织接口失败', err);\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { orgArr, selectOrgId, bounds, visible, disabled, isOrg, isWorkplace } = this.state;\r\n    let option = orgArr.map((item, index) => {\r\n      let bac =\r\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\r\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\r\n      // console.log('---', this.state.selectRoleId);\r\n      return (\r\n        <li\r\n          key={`${item.organizationId}`}\r\n          style={{ background: bac, color: col }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            this.setState({\r\n              selectOrgId: item.organizationId,\r\n              connectionKey: item.connectionKey,\r\n              selectRoleId: item.roleId,\r\n            });\r\n          }}\r\n        >\r\n          <div className=\"org\" style={{ fontSize: px(16) }}>\r\n            {item.organizationName}\r\n            <span style={{ marginRight: px(20) }} onClick={(e) => {\r\n              e.stopPropagation();\r\n              e.nativeEvent.stopImmediatePropagation();\r\n              this.deleteWorkPlace(item)\r\n            }}><CloseCircleOutlined /></span>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <div id=\"connectworkplace\">\r\n\r\n\r\n        <div className=\"body\">\r\n          <div className=\"top\">\r\n            <div className=\"title flex\">\r\n              <p style={{ fontSize: px(28), fontWeight: \"700\" }}>\r\n                Connected Workplaces\r\n              </p>\r\n              <div\r\n                className=\"addbtn flex\"\r\n                style={{ height: px(45) }}\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isOrg: true\r\n                  })\r\n                  console.log('搜索组织');\r\n                  console.log(isOrg);\r\n                }}\r\n              >\r\n                <p>+ Add Workplace</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"tablebox\">\r\n              <div className=\"table\" style={{ height: px(220) }}>\r\n                <ul>{option}</ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {`${this.state.selectRoleId}` !== '4' && <Integration />}\r\n          <div className=\"footer flex\">\r\n            <div\r\n              className=\"saveBtn flex\"\r\n              style={{ height: px(45) }}\r\n              onClick={() => {\r\n                let {\r\n                  selectOrgId,\r\n                  selectRoleId,\r\n                  connectionKey,\r\n                  workplaceJson,\r\n                } = this.state;\r\n                storage.roleId = selectRoleId;\r\n                storage.lastOrganization = selectOrgId;\r\n                try {\r\n                  let key = parseInt(selectOrgId);\r\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\r\n                  storage.lastWorkplaceId = lastWorkplaceId;\r\n                } catch (error) { }\r\n                storage.connectionKey = connectionKey;\r\n                this.props.setMenuNum('1')\r\n                this.props.setMenuActive('1')\r\n                // this.props.history.goBack();\r\n              }}\r\n            >\r\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* // 组织 */}\r\n        <MyModal\r\n          visible={isOrg}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div></div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"text\"\r\n                  onMouseOver={() => {\r\n                    if (disabled) {\r\n                      this.setState({\r\n                        disabled: false,\r\n                      });\r\n                    }\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    this.setState({\r\n                      disabled: true,\r\n                    });\r\n                  }}\r\n\r\n                >Find my organization</div>\r\n                <div className=\"searchBox\">\r\n                  <Input\r\n                    placeholder=\"Type Organization Name\"\r\n                    prefix={<SearchOutlined />}\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._search}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"list\">\r\n                {this._list()}\r\n              </div>\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Organization'}\r\n                  onClick={this._goWorkplace}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\r\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n        {/* // 工作场所 */}\r\n        <MyModal\r\n          visible={isWorkplace}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                    // className=\" iconfont icon-left return\"\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\r\n                  </div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\r\n\r\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\r\n                  <Input\r\n                    placeholder=\"Search workplace\"\r\n                    prefix={<SearchOutlined />}\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._searchworkPlace}\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\">\r\n                {this._list1()}\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Workplace'}\r\n                  onClick={this._addworkplaced}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\r\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n        <Modal\r\n          title={\r\n            <div\r\n              style={{\r\n                width: '100%',\r\n                cursor: 'move',\r\n                height: '20px',\r\n                fontWeight: '700'\r\n              }}\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false\r\n                })\r\n              }}\r\n            >\r\n              remind\r\n            </div>\r\n          }\r\n          open={visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          footer={[\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false,\r\n                  organizationName: ''\r\n                })\r\n              }}\r\n            >Cancel</button>,\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false,\r\n                  isOrg: false,\r\n                  isWorkplace: false,\r\n                })\r\n                // this.props.history.replace('/uesr/logUp/JoinOrganizationByOption')\r\n              }}\r\n            >Join</button>\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <p>This organization has already been registered, do you want to join?</p>\r\n          </div>\r\n        </Modal>\r\n\r\n        <MyModal\r\n          visible={this.state.loadVisible}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n\r\n  }),\r\n  { setMenuNum, setMenuActive }\r\n)(ConnectWorkplace)","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",["804","805","806","807","808","809"],"import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { message, Button } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport redJinggao from '../../assets/img/redjinggao.png'\n\nimport { setMenuNum } from '../../store/actions';\nimport MyModal from '../../utils/myModal/MyModal';\nimport { px } from '../../utils/px';\nimport MYButton from '../../utils/button/Button';\nimport './index.less';\nimport { petall_subscribe } from '../../api/mellaserver/new';\n\nconst MyIcon = createFromIconfontCN({\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\n\nlet defaultData = {\n    patientId: \"\",\n    wuzhong: 'dog',\n    petName: '',\n    miaoshu: ''\n}\n\nlet storage = window.localStorage;\nconst AddScheduledPet = ({ bodyHeight, setMenuNum }) => {\n    const [addPetist1, setAddPetist] = useState([]);\n    const [petName, setPetName] = useState('');\n    const [wuzhong, setWuzhong] = useState('dog');\n    const [patientId, setPatientId] = useState('');\n    const [miaoshu, setMiaoshu] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [isSave, setIsSave] = useState(false);\n\n    const selsectwuzhong = (val) => {\n        setWuzhong(val);\n\n    }\n    console.log('addPetist1', addPetist1);\n\n    const add = () => {\n        message.destroy()\n        if (!patientId) {\n            message.error(`Please enter the pet's patientId`)\n            return\n        }\n        setLoading(true)\n\n        let petSpeciesBreedId = 12001\n        switch (wuzhong) {\n            case 'dog': petSpeciesBreedId = 12001; break;\n            case 'cat': petSpeciesBreedId = 11001; break;\n            case 'other': petSpeciesBreedId = 13001; break;\n            default:\n                break;\n        }\n        let params = {\n            description: miaoshu,\n            doctorId: storage.userId,\n            patientId,\n            petName,\n            petSpeciesBreedId\n        }\n\n        if (storage.lastOrganization) {\n            params.organizationId = storage.lastOrganization\n        }\n        if (storage.lastWorkplaceId) {\n            params.workplaceId = storage.lastWorkplaceId\n        }\n        console.log('入参', params);\n        petall_subscribe(params)\n            .then(res => {\n                console.log(res);\n                if (res.flag) {\n                    let json = {\n                        patientId,\n                        wuzhong,\n                        petName,\n                        miaoshu\n                    }\n                    let list = [].concat(addPetist1)\n                    list.push(json)\n                    setAddPetist(list)\n                    setLoading(false)\n                    setPatientId('')\n                    setWuzhong('')\n                    setPetName('')\n                    setMiaoshu('')\n\n                } else {\n\n                    setLoading(false)\n                    message.error('add failed')\n                }\n            })\n            .catch(err => {\n                console.log('错误原因', err);\n                setLoading(false)\n                message.error('add failed')\n            })\n\n    }\n    const body = () => {\n        let addPetist = [].concat(addPetist1)\n        addPetist.push(defaultData)\n        console.log('新的:', addPetist);\n        let options = addPetist.map((item, index) => {\n\n            if (index === addPetist.length - 1) {\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={patientId}\n                                onChange={value => {\n                                    setPatientId(value.target.value)\n\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={petName}\n                                onChange={value => {\n\n                                    setPetName(value.target.value)\n                                }}\n                            />\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('dog')\n                                }}>\n                                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            </div>\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('cat')\n                                }}>\n                                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            </div>\n\n                            <div\n                                style={{ cursor: 'pointer' }}\n                                onClick={() => {\n                                    selsectwuzhong('other')\n                                }}>\n                                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                            </div>\n\n\n\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <input type=\"text\" className='tableInput'\n                                value={miaoshu}\n                                onChange={value => {\n\n                                    setMiaoshu(value.target.value)\n                                }}\n\n                            />\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n                            <div\n                                className='flex'\n                                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\n                                onClick={add}\n\n                            >\n\n                                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\n                            </div>\n\n\n\n\n\n\n\n                        </div>\n\n                    </div>\n                </li>\n            } else {\n                let { patientId, wuzhong, petName, miaoshu } = item\n                return <li key={`${index}`} style={{ width: '100%', }}>\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'>\n                                {patientId}\n                            </div>\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\n                            <div className='tableText'> {petName}</div>\n                        </div>\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\n                            <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\n                            <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\n                        </div>\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\n                            <div className='tableText'>{miaoshu}</div>\n                        </div>\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\n\n                        </div>\n                    </div>\n\n\n                </li>\n            }\n\n\n        })\n\n        return (\n            <div style={{ width: '100%', marginTop: px(30), height: px(500), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%', }}>\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\n                    <div className='tableHeard'>Patient Id</div>\n                    <div className='tableHeard'>Pet Name</div>\n                    <div className='tableHeard'>species</div>\n                    <div className='tableHeard' style={{ width: '30%' }}>description</div>\n                    <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\n\n                </div>\n                <ul >\n                    {options}\n                </ul>\n            </div>\n        )\n    }\n    return (\n        <div className='addScjediled' style={{ height: bodyHeight }}>\n            <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26 }}>\n                <div>December 2022 </div>\n                <div style={{ width: '200px' }}>\n                    <Button\n                        type=\"primary\"\n                        shape=\"round\"\n                        size=\"large\"\n                        block\n                    >\n                    Save Schedule\n                    </Button>\n                </div>\n            </div>\n            <div className='addSBody' style={{ width: '100%', height: bodyHeight - px(100), }}>\n            {body()}\n            </div>\n\n            {/* <MyModal\n                visible={loading}\n            />\n            <MyModal\n                visible={isSave}\n                element={\n                    <div className='isSave'\n                    //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\n                    >\n                        <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\n                        <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\n                        <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\n                            <MYButton\n                                text={'Cancel'}\n                                onClick={() => {\n                                    setIsSave(false)\n\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                            <MYButton\n                                text={'Exit'}\n                                onClick={() => {\n                                    setIsSave(false)\n                                    setMenuNum('3')\n                                }}\n                                textBoxStyle={{\n                                    width: '40%',\n                                    height: px(40)\n                                }}\n                            />\n                        </div>\n                    </div>\n                }\n            /> */}\n        </div >\n\n    )\n}\n\n\nAddScheduledPet.propTypes = {\n\n}\n//默认值\nAddScheduledPet.defaultProps = {\n\n}\nexport default connect(\n    state => ({\n\n    }),\n    { setMenuNum }\n)(AddScheduledPet)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx",["810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828"],"import React, { Component } from \"react\";\r\nimport { Modal, message, Button } from \"antd\";\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport Heard from \"../../utils/heard/Heard\";\r\nimport { px, win, timerFun } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport { compareArray } from \"../../utils/current\";\r\nimport { versionComarision } from '../../utils/commonFun';\r\n\r\nimport HardAndPetsUI from \"./HardAndPetsUI\";\r\nimport HardWareTypeUI from \"./hardWareTypeUI\";\r\nimport AddDevice from \"./AddDevice\";\r\n\r\nimport BiggiePage from \"../../pages/biggiePage\";\r\nimport ScanPage from \"../../pages/scanPage\";\r\nimport AllPets from \"../../pages/allPetsPage\";\r\nimport ScheduledPetPage from \"../../pages/scheduledPetsPage\";\r\nimport Subscriptions from \"../../pages/subscriptions\";\r\nimport Settings from \"../settings\";\r\nimport AddScheduledPet from \"../../pages/addScheduledPet\";\r\nimport PetAndParents from \"../../pages/petAndParents\"\r\nimport InviteTeam from \"../../pages/inviteTeam\"\r\nimport Unassigned from \"../../pages/unassigned\"\r\nimport ClininalStudy from \"../../pages/clinicalStudyPage\";\r\nimport CombineScales from \"../../pages/combineScales\";\r\nimport OtterEQPage from '../../pages/otterEQ';\r\nimport MyAccount from \"../../pages/myAccount\";\r\nimport TemperaturePage from \"../../pages/temperaturePage\";\r\nimport MabelPage from \"../mabelPage\";\r\nimport EnrolledPlan from '../enrolledPlan';\r\nimport ConnectWorkplace from './../../pages/connectWorkplace'\r\n\r\nimport ModalClose from \"../../assets/img/ModalClose.png\"\r\nimport DetectBase from \"../../assets/img/DetectBase.png\"\r\n\r\n\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setHardwareList,\r\n  selectHardwareModalShowFun,\r\n  setIsHaveUsbDeviceFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n  setMellaDeviceIdFun,\r\n  setMellaMeasureNumFun,\r\n  setBiggieConnectStatusFun,\r\n  setBiggieBodyFatFun,\r\n  setBiggieBodyWeightFun,\r\n  setBiggieUnitFun,\r\n  setBiggieSameWeightCountFun,\r\n  setRulerConnectStatusFun,\r\n  setRulerMeasureValueFun,\r\n  setRulerUnitFun,\r\n  setRulerConfirmCountFun,\r\n  setReceiveBroadcastHardwareInfoFun,\r\n} from \"../../store/actions\";\r\n\r\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\r\n\r\n\r\nimport \"./mainbody.less\";\r\nimport { devType } from \"../../config/config\";\r\nimport MotionCamera from \"../motionCamera\";\r\nimport DoctorAddPet from \"../doctorAddPet\";\r\nimport Veterinarians from \"../admin_VetProfile\";\r\n\r\n\r\n// let ipcRenderer = window.require(\"electron\").ipcRenderer;\r\nlet ipcRenderer = window.electron.ipcRenderer;\r\nlet isMeasure = false; //是否正在测量,用于判断是否需要发送指定指令给USB,查看硬件是否连接\r\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\r\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\r\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\r\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\r\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\r\nlet time194 = 0\r\n\r\n//用于预测的东西\r\nlet clinicalYuce = [],\r\n  clinicalIndex = 0;\r\n\r\nlet storage = window.localStorage;\r\nconst { confirm } = Modal;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    //body部分窗口高度\r\n    bodyHeight: 0,\r\n    //本地保存的硬件类型数组,不包括Add这个类型\r\n    devicesTypeList: [],\r\n    //展示硬件类型的数组\r\n    showHardWareTypeList: [],\r\n    //是否有USB设备\r\n    isHaveUsbDevice: true,\r\n    //mella温度计测量状态\r\n    mellaMeasureStatus: \"disconnected\", //connected,disconnected,isMeasuring,complete\r\n\r\n    //点击菜单的序号\r\n    clickMenuIndex: \"1\",\r\n    err07Visible: false,\r\n    units: '℉',\r\n    localVersion: '',//底座版本号\r\n    updateBaseLaterType: false,//底座是否在延迟更新\r\n    baseModalVisible: false,  // 控制弹窗显隐\r\n  };\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    timerFun();\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    //获取窗口高度\r\n    this.resize();\r\n    //react监听屏幕窗口改变\r\n    window.addEventListener(\"resize\", this.resize);\r\n\r\n    //获取设备类型\r\n    this.getDevicesType();\r\n\r\n    //检测USB设备发来的信息\r\n    ipcRenderer.on(\"sned\", this._send);\r\n    //检测是否有USB设备\r\n    ipcRenderer.on(\"noUSB\", this._noUSB);\r\n    //定时查看mella温度计是否与底座连接或断开\r\n    if (devType === 'electron') {\r\n      this._whether_to_connect_to_mella();\r\n    }\r\n\r\n\r\n    //获取本地设置\r\n    this.getLocalSetting();\r\n    //获取单位\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`) || {}\r\n    // console.log('----', hardSet);\r\n    let { isHua, } = hardSet\r\n    if (isHua === false) {\r\n      this.setState({\r\n        units: '℃'\r\n      })\r\n    } else {\r\n      this.setState({\r\n        units: '℉'\r\n      })\r\n    }\r\n    //获取插入底座设备的版本信息\r\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] });//这里会导致出现已连接状态TODO\r\n    //获取底座是否延迟更新\r\n    ipcRenderer.on('updateBaseLaterType', this.updateBaseLaterType);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    //组件销毁，取消监听\r\n    window.removeEventListener(\"resize\", this.resize);\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n    ipcRenderer.removeListener(\"sned\", this._send);\r\n    ipcRenderer.removeListener(\"noUSB\", this._noUSB);\r\n    ipcRenderer.removeListener(\"updateBaseLaterType\", this.updateBaseLaterType);\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    this.rulerTimer && clearTimeout(this.rulerTimer);\r\n    message.destroy();\r\n  }\r\n  //检测到props里的hardwareList更新\r\n  UNSAFE_componentWillReceiveProps(prevProps) {\r\n    //对比props里的hardwareList和state里的hardwareList是否相同\r\n    if (!compareArray(prevProps.hardwareList, this.state.devicesTypeList)) {\r\n      let showHardWareTypeList = [].concat(prevProps.hardwareList);\r\n      showHardWareTypeList.push({\r\n        type: \"add\",\r\n        devices: [],\r\n      });\r\n      this.setState({\r\n        devicesTypeList: prevProps.hardwareList,\r\n        showHardWareTypeList,\r\n      });\r\n    }\r\n    if (!compareObject(prevProps.menuNum, this.state.clickMenuIndex)) {\r\n      this.setState({\r\n        clickMenuIndex: prevProps.menuNum,\r\n      });\r\n    }\r\n  }\r\n  updateBaseLaterType = (e, data) => {\r\n    this.setState({\r\n      updateBaseLaterType: data\r\n    })\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.send(\"big\", win());\r\n  };\r\n  //获取本地设置\r\n  getLocalSetting = () => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (!hardSet) {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false, //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: \"45\" },\r\n        autoOff: { length: 0, number: \"30\" },\r\n      };\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\r\n    }\r\n  };\r\n  //检测USB设备发来的信息\r\n  _send = (e, data) => {\r\n    console.log(data);\r\n    //data就是测量的数据，是十进制的数字\r\n    this.command(data)();\r\n    //获取到了版本信息,此底座不是很老版本\r\n    if (data[2] === 136) {\r\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\r\n      console.log('插入底座的版本是: ', localVersion, this.state.updateBaseLaterType);\r\n      this.setState({ localVersion: localVersion }, () => {\r\n        if (!this.state.updateBaseLaterType) {\r\n          this.cloudVersion();\r\n        }\r\n      });\r\n    }\r\n  };\r\n  //询问网端底座最新的版本号\r\n  cloudVersion = () => {\r\n    getInfoOfLatestDevice('mellabase')\r\n      .then((res) => {\r\n\r\n        if (res.flag) {\r\n          let { firmwareVersion } = res.data\r\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion);//true则为线上底座版本大于当前底座版本需要升级\r\n          if (cloudBigtolocal && !this.state.updateBaseLaterType) {\r\n            confirm({\r\n              icon: <ExclamationCircleOutlined />,\r\n              content: <div>A new version of your base has been detected. Whether to go to update?</div>,\r\n              centered: true,\r\n              okText: 'Update',\r\n              cancelText: 'Update Later',\r\n              className: 'updateBaseTip',\r\n              onOk: () => { this.props.history.push('/menuOptions/advancedsettings') },\r\n              onCancel: () => {\r\n                ipcRenderer.send('update-base-later');\r\n              },\r\n            });\r\n          } else {\r\n\r\n          }\r\n        } else {\r\n          message.error('Description Failed to obtain the base version');\r\n        }\r\n      })\r\n      .catch((res) => {\r\n        message.error('Description Failed to obtain the base version');\r\n      })\r\n  }\r\n\r\n  //监听是否有USB设备,true代表没有USB设备，false代表有USB设备\r\n  _noUSB = (e, data) => {\r\n    if (data === false) {\r\n      //获取插入设备的版本信息\r\n      ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n      message.destroy();\r\n    } else {\r\n      if (this.state.isHaveUsbDevice) {\r\n        message.destroy();\r\n        if (this.props.selectHardwareType !== \"otterEQ\" && this.props.selectHardwareType !== \"camera\") {\r\n          this.setState({\r\n            baseModalVisible: true\r\n          })\r\n          // message.error(\"The base is not detected. Please insert the base\", 0);\r\n          Modal.destroyAll();\r\n        }\r\n      }\r\n    }\r\n    if (data === this.props.isHaveUsbDevice) {\r\n      this.props.setIsHaveUsbDeviceFun(!data);\r\n    }\r\n    if (data === this.state.isHaveUsbDevice) {\r\n      this.setState({\r\n        isHaveUsbDevice: !data,\r\n      });\r\n    }\r\n  };\r\n  //监听mella温度计是否与底座连接或断开\r\n  _whether_to_connect_to_mella = () => {\r\n    message.destroy();\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    //2秒检测一次\r\n    this.detectTimer = setInterval(() => {\r\n      exchangeNum++;\r\n      //如果正在测量或者没有USB设备，不检测\r\n      let { mellaConnectStatus } = this.props\r\n      if (this.state.isHaveUsbDevice && mellaConnectStatus !== 'isMeasuring' && mellaConnectStatus !== 'disconnected') {\r\n        if (exchangeNum % 2 === 0) {\r\n          //让底座发送查询温度计信息指令\r\n          ipcRenderer.send(\"usbdata\", { command: \"07\", arr: [\"5A\"] });\r\n        } else {\r\n          // console.log('获取温度计31');\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n        }\r\n      }\r\n\r\n\r\n      //如果底座没有回应，则计算时间差,时间差大于5秒，则没与温度计连接\r\n      if (new Date() - initTime > 6000) {\r\n        this._disconnect_to_mella();\r\n      }\r\n    }, 2000);\r\n  };\r\n  //底座与温度计断开连接\r\n  _disconnect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus, setMellaDeviceIdFun, setMellaMeasurePartFun } = this.props;\r\n    if (mellaConnectStatus !== \"disconnected\") {\r\n      setMellaConnectStatusFun(\"disconnected\");\r\n      setMellaMeasurePartFun(\"\");\r\n    }\r\n    setMellaDeviceIdFun(\"\");\r\n  };\r\n  //底座与温度计连接\r\n  _connect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus } = this.props;\r\n    if (mellaConnectStatus !== \"connected\") {\r\n      setMellaConnectStatusFun(\"connected\");\r\n    }\r\n  };\r\n\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    let dataArr1 = newArr.map((item) => {\r\n      if (item.toString(16).length < 2) {\r\n        return \"0\" + item.toString(16);\r\n      } else {\r\n        return item.toString(16);\r\n      }\r\n    });\r\n    //除了255,其他都是温度计的数据\r\n    let {\r\n      setMellaConnectStatusFun,\r\n      setMellaMeasureValueFun,\r\n      setMellaPredictValueFun,\r\n      setMellaMeasurePartFun,\r\n      mellaMeasurePart,\r\n      mellaConnectStatus,\r\n      setBiggieBodyFatFun,\r\n      setBiggieBodyWeightFun,\r\n      setBiggieConnectStatusFun,\r\n      setBiggieUnitFun,\r\n      setBiggieSameWeightCountFun,\r\n    } = this.props;\r\n    let {\r\n      biggieConnectStatus,\r\n      biggieBodyFat,\r\n      biggieBodyWeight,\r\n      biggieUnit,\r\n      biggieSameWeightCount,\r\n    } = this.props.hardwareReduce;\r\n\r\n    const instruction = [\r\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255, 182,\r\n    ];\r\n\r\n    if (newArr[2] !== 7 && newArr[2] !== 255 && newArr[2] !== 182 && newArr[2] !== 136) {\r\n      initTime = new Date();\r\n      num07 = 0;\r\n      if (mellaConnectStatus === \"disconnected\") {\r\n        this._connect_to_mella();\r\n      }\r\n    } else {\r\n      num07++;\r\n    }\r\n\r\n    const commandArr = {\r\n      209: () => {\r\n        //腋温\r\n        //第一次测量去获取探头ID\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          // console.log(\"去获取探头id\");\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\r\n        let Temp = temp0;\r\n        if (\r\n          Temp === 24.7 ||\r\n          Temp === 0 ||\r\n          Temp === null ||\r\n          Temp === undefined\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        let dataS = {\r\n          sample: clinicalIndex++,\r\n          data0: temp0,\r\n          data1: temp1,\r\n        };\r\n        clinicalYuce.push(dataS);\r\n        if (clinicalYuce.length >= 30) {\r\n          setMellaPredictValueFun(clinicalYuce);\r\n        }\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n        if (mellaMeasurePart !== \"腋温\" && mellaMeasurePart !== \"肛温\") {\r\n\r\n          setMellaMeasurePartFun(\"腋温\");\r\n        }\r\n        this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\r\n      },\r\n      208: () => {\r\n        //耳温\r\n\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[8]}`);\r\n        let Temp = temp0;\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n\r\n        if (mellaMeasurePart !== \"耳温\") {\r\n          setMellaMeasurePartFun(\"耳温\");\r\n        }\r\n      },\r\n      193: () => {\r\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\r\n        //为了清除黏贴的数据，使用定时器\r\n        this.time193 && clearTimeout(this.time193);\r\n        this.time193 = setTimeout(() => {\r\n          if (new Date() - time194 < 1000) {\r\n            this.time193 && clearTimeout(this.time193);\r\n            return;\r\n          }\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaMeasureValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            console.log('要去写了', units, temp);\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          this.time193 && clearTimeout(this.time193);\r\n        }, 500);\r\n      },\r\n      194: () => {\r\n        //硬件收到机器学习结果并停止测量，\r\n        this.time193 && clearTimeout(this.time193);\r\n        time194 = new Date()\r\n        console.log(\"---机器学习\", newArr);\r\n        if (mellaConnectStatus !== \"complete\") {\r\n          setMellaConnectStatusFun(\"complete\");\r\n        }\r\n        const timer = setTimeout(() => {\r\n          setMellaMeasureValueFun(this.props.mellaPredictReturnValue);\r\n\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaPredictReturnValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          clearTimeout(timer);\r\n        }, 80);\r\n        clinicalYuce = [];\r\n        clinicalIndex = 0;\r\n      },\r\n      192: () => {\r\n        //温度计收到40开始数据后返回的指令\r\n        switch (newArr[3]) {\r\n          case 90:\r\n            console.log(\"有探头，开始测量的返回指令·\");\r\n            break;\r\n          case 11:\r\n            console.log(\"没有探头，开始测量的返回值\");\r\n            break;\r\n        }\r\n      },\r\n      129: () => {\r\n        //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n      },\r\n      135: () => {\r\n        //硬件的一些基本信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间\r\n         * newArr[8] 背光时间\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n\r\n        let hardSet = electronStore.get(\r\n          `${storage.userId}-hardwareConfiguration`\r\n        );\r\n        if (!hardSet) {\r\n          hardSet = {\r\n            isHua: true,\r\n            is15: true,\r\n            self_tarting: false, //自启动\r\n            isBacklight: true,\r\n            isBeep: true,\r\n            backlightTimer: { length: 140, number: \"45\" },\r\n            autoOff: { length: 0, number: \"30\" },\r\n          };\r\n        }\r\n        let { isHua, is15, self_tarting, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\r\n\r\n        let beep = isBeep ? \"11\" : \"00\";\r\n        let unit = isHua ? \"00\" : \"01\";\r\n        let autoOffNumber = autoOff.number\r\n        let backlightTimerNumber = isBacklight ? backlightTimer.number : '00'\r\n        if (\r\n          dataArr1[7] === autoOffNumber &&\r\n          dataArr1[8] === backlightTimerNumber &&\r\n          dataArr1[9] === beep &&\r\n          dataArr1[10] === unit\r\n        ) {\r\n        } else {\r\n          let setArr = [\"03\", \"ed\", \"07\", \"dd\", autoOffNumber, backlightTimerNumber, beep, unit,];\r\n          ipcRenderer.send(\"usbdata\", { command: \"21\", arr: setArr });\r\n        }\r\n      },\r\n      238: () => {\r\n        //探头松动\r\n        console.log(\"探头松动\");\r\n        message.error(\r\n          \"The probe is loose, please re-install and measure again\",\r\n          5\r\n        );\r\n      },\r\n      98: () => {\r\n        //蓝牙连接断开\r\n        console.log(\r\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\r\n        );\r\n        firstEar = true;\r\n        // console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 1300) {\r\n          return;\r\n        }\r\n        this._disconnect_to_mella();\r\n      },\r\n      97: () => {\r\n        //蓝牙连接\r\n        console.log(\r\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\r\n        );\r\n        this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        this.getIdTimer = setTimeout(() => {\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n          this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        }, 50);\r\n        is97Time = new Date();\r\n        this._connect_to_mella();\r\n      },\r\n      177: () => {\r\n        //探头id\r\n        let dataArr1 = newArr.map((item) => {\r\n          if (item.toString(16).length < 2) {\r\n            return \"0\" + item.toString(16);\r\n          } else {\r\n            return item.toString(16);\r\n          }\r\n        });\r\n\r\n        let id = \"\";\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i];\r\n        }\r\n        setMellaDeviceIdFun(id);\r\n        if (dataArr1[7] === \"01\") {\r\n          if (mellaMeasurePart !== \"腋温\") {\r\n            setMellaMeasurePartFun(\"腋温\");\r\n          }\r\n        } else if (dataArr1[7] === \"02\") {\r\n          if (mellaMeasurePart !== \"肛温\") {\r\n            setMellaMeasurePartFun(\"肛温\");\r\n          }\r\n        } else if (dataArr1[7] === \"03\") {\r\n          if (mellaMeasurePart !== \"耳温\") {\r\n            setMellaMeasurePartFun(\"耳温\");\r\n          }\r\n        }\r\n      },\r\n      7: () => {\r\n        //发什么收什么，需要去重新插拔底座\r\n        console.log(\"重新插拔底座\");\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true,\r\n          });\r\n        }\r\n      },\r\n      255: () => {\r\n        console.log('newArr', newArr);\r\n        let length = newArr.length;\r\n        let frameLength = newArr[1]; //帧长\r\n        let itemLength = newArr[3] + 1; //数据位的长度   13\r\n        let dataIndex = 0;\r\n        let bluName = \"\";\r\n        let bluData = [];\r\n\r\n        while (itemLength < length && itemLength + 3 <= frameLength) {\r\n          let itemData = [];\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5]);\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = \"\";\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16);\r\n                str += String.fromCharCode(item);\r\n              }\r\n              bluName = str;\r\n              // console.log('--蓝牙名称:', bluName);\r\n\r\n              break;\r\n\r\n            case 255:\r\n              bluData = itemData;\r\n              break;\r\n            case 7:\r\n              console.log(\"---UUID\");\r\n              break;\r\n            case 239:\r\n              // console.log('---mac地址');\r\n              break;\r\n\r\n            case 3:\r\n              // console.log('----尺子的,不知道什么用');\r\n              break;\r\n\r\n            default:\r\n              console.log(\"直接跳出循环\");\r\n              return;\r\n          }\r\n          dataIndex = itemLength;\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\r\n        }\r\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n        let { setReceiveBroadcastHardwareInfoFun, hardwareReduce } = this.props;\r\n\r\n        let { receiveBroadcastHardwareInfo } = hardwareReduce;\r\n\r\n        if (bluName.indexOf(\"C19\") !== -1 && bluData.length > 10) {\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: \"00:00:00:00:00:00\",\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          let weight = `0x${bluData[10]}${bluData[11]}`;\r\n          let impedance = `0x${bluData[12]}${bluData[13]}`;\r\n          let sendWeight = null;\r\n          //C19发送的体重值单位只是KG\r\n          try {\r\n            weight = parseInt(weight) / 100;\r\n            if (impedance) {\r\n              impedance = parseInt(impedance);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n          if (weight === biggieBodyWeight) {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          } else {\r\n            setBiggieSameWeightCountFun(0);\r\n            setBiggieBodyWeightFun(weight);\r\n          }\r\n          if (impedance) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n          if (biggieConnectStatus !== \"isMeasuring\") {\r\n            setBiggieConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          if (biggieUnit !== \"kg\") {\r\n            setBiggieUnitFun(\"kg\");\r\n          }\r\n        } else if (bluName.indexOf(\"Mella Measure\") !== -1) {\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          // console.log('结束循环蓝牙名称', bluData)\r\n          let confirmBtn = bluData[8]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[11], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9];\r\n          let num2 = bluData[10];\r\n          let num = getVal(num1, num2);\r\n          try {\r\n            newVal = parseFloat(num);\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2);\r\n            } else {\r\n              newVal = newVal.toFixed(1);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            return `${num1}.${num2}`;\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n        } else if (bluName.indexOf(\"Biggie\") !== -1) {\r\n          this.timeER && clearTimeout(this.timeER)\r\n          this.timeER = setTimeout(() => {\r\n            setBiggieConnectStatusFun('disconnected')\r\n          }, 3000)\r\n          if (bluData.length == 0) {\r\n            setBiggieConnectStatusFun('connected')\r\n          } else if (bluData.length <= 13) {\r\n            return;\r\n          }\r\n          // console.log(\"biggie\", bluData);\r\n          if (bluData[0] !== \"aa\") {\r\n            return;\r\n          }\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n\r\n          let newArr = bluData;\r\n\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n          //定义体重的控制字符\r\n          let weightControl = newArr[8];\r\n          //定义体重的值\r\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(\r\n            newArr[10].toString(16)\r\n          )}`;\r\n          weight = parseInt(weight, 16);\r\n          //定义体脂值\r\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(\r\n            newArr[13].toString(16)\r\n          )}`;\r\n          impedance = parseInt(impedance, 16);\r\n          let arr11 = getVal(newArr[11].toString(16));\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n\r\n          let weightUnits = arr11[1] === \"1\" ? \"lb\" : \"kg\";\r\n\r\n          let biggieStatus = \"isMeasuring\";\r\n          switch (weightControl) {\r\n            case 1:\r\n              biggieStatus = \"connected\";\r\n              break;\r\n            case 2:\r\n              biggieStatus = \"isMeasuring\";\r\n              break;\r\n            case 3:\r\n              biggieStatus = \"complete\";\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n\r\n\r\n          if (biggieStatus !== biggieConnectStatus) {\r\n            setBiggieConnectStatusFun(biggieStatus);\r\n          }\r\n          if (weightUnits !== biggieUnit) {\r\n            setBiggieUnitFun(weightUnits);\r\n          }\r\n          if (weight !== biggieBodyWeight) {\r\n            setBiggieBodyWeightFun(weight);\r\n            setBiggieSameWeightCountFun(0);\r\n          } else {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          }\r\n          if (impedance !== biggieBodyFat) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n        } else if (bluName.indexOf(\"MaeBowl\") !== -1 && bluData.length > 15) {\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          //定义硬件版本号\r\n          let hardwareVersion = bluData[7] + bluData[8];\r\n          //定义软件版本号\r\n          let softwareVersion = bluData[9];\r\n          //定义wifi标志位\r\n          let wifiFlag = bluData[10];\r\n          //定义控制字\r\n          let control = bluData[11];\r\n          //定义重量\r\n          let weight = `${getVal(bluData[12].toString(16))}${getVal(bluData[13].toString(16))}`\r\n          weight = parseInt(weight, 16);\r\n          let arr11 = bluData[14]\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n          let weightUnits = null\r\n          switch (arr11[1]) {\r\n            case '0':\r\n              weightUnits = 'kg'\r\n\r\n              break;\r\n            case '1':\r\n              weightUnits = 'lb'\r\n\r\n              break;\r\n            case '2':\r\n              weightUnits = 'g'\r\n\r\n              break;\r\n            case '3':\r\n              weightUnits = 'ml'\r\n\r\n              break;\r\n            case '4':\r\n              weightUnits = 'oz'\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n\r\n        } else if (bluName.indexOf(\"Tabby\") !== -1 && bluData.length > 10) {\r\n          // console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          let confirmBtn = bluData[10]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[13], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 9;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[11];\r\n          let num2 = bluData[12];\r\n          let num = getVal(num1, num2, units);\r\n          // try {\r\n          //   newVal = parseFloat(num);\r\n          //   if (rulerUnitNum === 17) {\r\n          //     newVal = newVal.toFixed(2);\r\n          //   } else {\r\n          //     newVal = newVal.toFixed(1);\r\n          //   }\r\n          // } catch (error) {\r\n          //   console.log(error);\r\n          // }\r\n          newVal = num\r\n\r\n          function getVal(shi, xiaoshuo, units) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            // console.log(shi, xiaoshuo, num1, num2, `${num1}.${num2}`, units);\r\n            if (units === 'cm') {\r\n              let value = parseFloat(`${num1}.${num2}`).toFixed(1)\r\n              return value\r\n            } else {\r\n              if (num2 < 10) {\r\n                num2 = `0${num2}`\r\n              }\r\n              let value = parseFloat(`${num1}.${num2}`).toFixed(2)\r\n              return value\r\n            }\r\n\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n\r\n\r\n\r\n\r\n        }\r\n      },\r\n      182: () => {\r\n        console.log(\"打开了底座通信\");\r\n      },\r\n    };\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]];\r\n    } else {\r\n      return () => {\r\n        console.log(\"没有控制命令\", commandArr);\r\n      };\r\n    }\r\n  };\r\n\r\n  testCheck = (arr) => {\r\n    if (arr.length < 7) {\r\n      return false;\r\n    }\r\n    let i = 7;\r\n    let checkFloag = arr[i];\r\n\r\n    for (i = 8; i < arr.length - 2; i++) {\r\n      checkFloag = checkFloag ^ arr[i];\r\n    }\r\n    return checkFloag;\r\n  };\r\n  getMac = (arr) => {\r\n    // console.log(arr);\r\n    let str = arr[1].toString(16);\r\n    if (str.length === 1) {\r\n      str = \"0\" + str;\r\n    }\r\n    for (let i = 2; i < 7; i++) {\r\n      let item = arr[i].toString(16);\r\n      if (item.length === 1) {\r\n        item = \"0\" + item;\r\n      }\r\n      str += `:${item}`;\r\n      // }\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n  //监听屏幕窗口改变\r\n  resize = () => {\r\n    let { offsetWidth, offsetHeight } = this.mainbody;\r\n    // console.log('resize', this.mainbody, { offsetWidth, offsetHeight });\r\n    if (offsetHeight !== this.state.bodyHeight) {\r\n      this.setState({\r\n        bodyHeight: offsetHeight - px(50),\r\n      });\r\n    }\r\n  };\r\n  //获取设备类型(渲染左侧硬件种类侧边栏)\r\n  getDevicesType = () => {\r\n    // let devicesTypeList = [\r\n    //   {\r\n    //     type: 'mellaPro',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'mellaPro',\r\n    //         mac: '',\r\n    //         deviceType: 'mellaPro',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'biggie',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'biggie',\r\n    //         mac: '',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       },\r\n    //       {\r\n    //         name: 'biggie002',\r\n    //         mac: '1253',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'otterEQ',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'otterEQ',\r\n    //         mac: '',\r\n    //         deviceType: 'otterEQ',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n\r\n    //   {\r\n    //     type: 'rfid',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'rfid',\r\n    //         mac: '',\r\n    //         deviceType: 'rfid',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'tape',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'tape',\r\n    //         mac: '',\r\n    //         deviceType: 'tape',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'maeBowl',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'maeBowl',\r\n    //         mac: '',\r\n    //         deviceType: 'maeBowl',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   }\r\n    // ]\r\n\r\n    let devicesTypeList =\r\n      electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-devicesTypeList`\r\n      ) || [];\r\n    // console.log(\"获取的设22222备列表\", devicesTypeList);\r\n    if (devicesTypeList.length === 0) {\r\n      devicesTypeList.push({\r\n        type: \"mellaPro\",\r\n        devices: [\r\n          {\r\n            name: \"mellaPro\",\r\n            mac: \"\",\r\n            deviceType: \"mellaPro\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"biggie\",\r\n        devices: [\r\n          {\r\n            name: \"biggie\",\r\n            mac: \"\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n          {\r\n            name: \"biggie002\",\r\n            mac: \"1253\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"tape\",\r\n        devices: [\r\n          // {\r\n          //   name: \"tape\",\r\n          //   mac: \"45264\",\r\n          //   deviceType: \"tape\",\r\n          //   examRoom: \"\",\r\n          // },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"otterEQ\",\r\n        devices: [\r\n          {\r\n            name: \"otterEQ\",\r\n            mac: \"375082\",\r\n            deviceType: \"otterEQ\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"mabel\",\r\n        devices: [\r\n          {\r\n            name: \"mabel\",\r\n            mac: \"2.1.5.123.5\",\r\n            deviceType: \"mabel\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"camera\",\r\n        devices: [\r\n          {\r\n            name: \"camera\",\r\n            mac: \"\",\r\n            deviceType: \"camera\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    let hardList = [].concat(devicesTypeList);\r\n    this.props.setHardwareList(hardList);\r\n    let showHardWareTypeList = [].concat(devicesTypeList);\r\n    showHardWareTypeList.push({\r\n      type: \"add\",\r\n      devices: [],\r\n    });\r\n\r\n    this.setState({\r\n      devicesTypeList,\r\n      showHardWareTypeList,\r\n    });\r\n  };\r\n  body = () => {\r\n    let { selectHardwareType } = this.props;\r\n\r\n    let { bodyHeight, clickMenuIndex } = this.state;\r\n    let measurePage = null;\r\n    //clickMenuIndex 点击菜单的序号\r\n    switch (clickMenuIndex) {\r\n      case \"1\":\r\n        // return <Veterinarians history={this.props.history} />\r\n        if (electronStore.get(`${storage.userId}-isClical`)) {\r\n          return (\r\n            <>\r\n              <HardAndPetsUI bodyHeight={bodyHeight} />\r\n              <ClininalStudy bodyHeight={bodyHeight} />\r\n            </>\r\n          );\r\n        } else {\r\n          switch (selectHardwareType) {\r\n\r\n            case \"mellaPro\":\r\n              measurePage = <TemperaturePage bodyHeight={bodyHeight} />;\r\n\r\n              break;\r\n            case \"biggie\":\r\n              measurePage = <BiggiePage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            case \"tape\":\r\n              measurePage = <ScanPage bodyHeight={bodyHeight} />;\r\n              break;\r\n            case \"otterEQ\":\r\n              measurePage = <OtterEQPage bodyHeight={bodyHeight} />;\r\n              break;\r\n            case \"mabel\":\r\n              measurePage = <MabelPage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            case \"camera\":\r\n              measurePage = <MotionCamera bodyHeight={bodyHeight} />;\r\n\r\n\r\n            default:\r\n              break;\r\n          }\r\n          if (selectHardwareType === \"add\") {\r\n            return <AddDevice bodyHeight={bodyHeight} />;\r\n          } else if (selectHardwareType === 'prescribePlan') {\r\n            return <EnrolledPlan bodyHeight={bodyHeight} />;\r\n          }\r\n          else {\r\n            return (\r\n              <>\r\n                <HardAndPetsUI bodyHeight={bodyHeight} />\r\n                {measurePage}\r\n              </>\r\n            );\r\n          }\r\n        }\r\n      case \"2\":\r\n        return <AllPets bodyHeight={bodyHeight} />;\r\n      case \"CombineScales\":   //体重秤组合\r\n        return <CombineScales bodyHeight={bodyHeight} />;\r\n      case \"AddDevice\":\r\n        return <AddDevice bodyHeight={bodyHeight} />;\r\n      // 配置左侧菜单\r\n      case \"AddPet\":\r\n        return <DoctorAddPet history={this.props.history} />;\r\n      case \"3\":\r\n        return <ScheduledPetPage bodyHeight={bodyHeight} />;\r\n      case \"5\":\r\n        return <Settings history={this.props.history} />\r\n      case \"PetAndParents\":\r\n        return <PetAndParents history={this.props.history} />;\r\n      case \"AddScheduledPet\":\r\n        return <AddScheduledPet bodyHeight={bodyHeight} />;\r\n      // 配置菜单\r\n      case \"Unassigned0\":\r\n        return <Unassigned deviceType={0} />;\r\n      case \"Unassigned1\":\r\n        return <Unassigned deviceType={1} />;\r\n      case \"InviteTeam\":\r\n        return <InviteTeam isAddDoctor={true} history={this.props.history} />;\r\n      case \"veterinarians\":\r\n        return <Veterinarians history={this.props.history} />\r\n      //   case \"AddScheduledPet\":\r\n      // return <AddScheduledPet />;\r\n      // case \"AddScheduledPet\":\r\n      // return <AddScheduledPet />;\r\n      // case \"AddScheduledPet\":\r\n      // return <AddScheduledPet />;\r\n      // case \"AddScheduledPet\":\r\n      // return <AddScheduledPet />;\r\n\r\n      case \"ConnectWorkplace\":\r\n        return <ConnectWorkplace history={this.props.history} />\r\n      case \"6\":\r\n        return (\r\n          <>\r\n            <HardAndPetsUI bodyHeight={bodyHeight} />\r\n            <ClininalStudy bodyHeight={bodyHeight} />\r\n          </>\r\n        );\r\n      case \"7\":\r\n        return <Subscriptions />\r\n      case \"4\":\r\n        return (\r\n          <MyAccount bodyHeight={bodyHeight} />\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { bodyHeight } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className=\"flex\"\r\n        id=\"mainbody\"\r\n        ref={(val) => (this.mainbody = val)}\r\n        onClick={() => {\r\n          if (this.props.selectHardwareModalShowFun) {\r\n            this.props.selectHardwareModalShowFun(false);\r\n          }\r\n        }}\r\n      >\r\n        <Heard />\r\n        <div className=\"mainbody-body\">\r\n          <HardWareTypeUI\r\n            bodyHeight={bodyHeight}\r\n            devicesTypeList={this.state.showHardWareTypeList}\r\n          />\r\n          {this.body()}\r\n        </div>\r\n        <Modal\r\n          open={this.state.err07Visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id=\"vetPrifileModal\">\r\n            <div className=\"title\">prompt</div>\r\n\r\n            <div className=\"text\">Please re-plug the base device</div>\r\n\r\n            <div\r\n              className=\"btn\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"5px\",\r\n              }}\r\n            >\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n                  });\r\n                  num07 = 0;\r\n                }}\r\n              >\r\n                OK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n        <Modal\r\n          open={this.state.baseModalVisible}\r\n          onOk={this.handleOk}\r\n          centered\r\n          onCancel={() => this.setState({ baseModalVisible: false })}\r\n          width={430}\r\n          footer={[]}\r\n          className=\"baseNotDetected\"\r\n        >\r\n          <div className=\"modalContainer\">\r\n            <img src={ModalClose} alt=\"\" width={50} height={50} />\r\n            <div className=\"title\">\r\n              <span>Base Not Detected</span>\r\n            </div>\r\n            <div className=\"content\">\r\n              <p>Please connect your </p>\r\n              <p>charging base to computer </p>\r\n              <a onClick={() => {\r\n                this.props.history.push('/menuOptions/advancedsettings')\r\n              }}>update your base.</a>\r\n            </div>\r\n            <img style={{ marginBottom: '20px' }} src={DetectBase} alt=\"\" width={280} height={200} />\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({\r\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\r\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\r\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\r\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\r\n    mellaMeasurePart: state.hardwareReduce.mellaMeasurePart,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareReduce: state.hardwareReduce,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\r\n    menuNum: state.userReduce.menuNum,\r\n    mellaPredictReturnValue: state.hardwareReduce.mellaPredictReturnValue,\r\n    test: state.userReduce.test\r\n  }),\r\n  {\r\n    setHardwareList,\r\n    selectHardwareModalShowFun,\r\n    setIsHaveUsbDeviceFun,\r\n\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n    setMellaDeviceIdFun,\r\n    setBiggieConnectStatusFun,\r\n    setBiggieBodyFatFun,\r\n    setBiggieBodyWeightFun,\r\n    setBiggieUnitFun,\r\n    setBiggieSameWeightCountFun,\r\n    setRulerConnectStatusFun,\r\n    setRulerMeasureValueFun,\r\n    setRulerUnitFun,\r\n    setRulerConfirmCountFun,\r\n    setReceiveBroadcastHardwareInfoFun,\r\n    setMellaMeasureNumFun,\r\n  }\r\n)(App);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx",["829","830","831","832","833","834","835","836"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  message\r\n} from 'antd';\r\nimport { CaretDownFilled } from '@ant-design/icons';\r\n\r\nimport imgArray from '../../utils/areaCode/imgArray'\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport countryList from '../../utils/areaCode/country';\r\nimport temporaryStorage from '../../utils/temporaryStorage'\r\nimport { px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport MinClose from '../../utils/minClose/MinClose';\r\nimport back_white from \"./../../assets/img/back-white.png\";\r\nimport back_hui from \"./../../assets/img/back-hui.png\";\r\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\r\n\r\n\r\n\r\n\r\nimport { checkUser, deskRegistAWSSNS, registByAWSSES } from '../../api';\r\n\r\nimport moment from 'moment';\r\n\r\nimport './index.less';\r\nimport { connect } from 'react-redux';\r\n\r\nconst options = [\r\n  { label: 'Dogs', value: 'Dogs' },\r\n  { label: 'Cats', value: 'Cats' },\r\n  { label: 'Small Pets', value: 'Small Pets' },\r\n  { label: 'Nutrition', value: 'Nutrition' },\r\n  { label: 'Surgery', value: 'Surgery' },\r\n  { label: 'Zoo', value: 'Zoo' },\r\n  { label: 'Wildlife', value: 'Wildlife' },\r\n  { label: 'Cardiology', value: 'Cardiology' },\r\n  { label: 'Neurology', value: 'Neurology' },\r\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\r\n  { label: 'Other', value: 'Other' },\r\n]\r\nclass VetPrifile extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    otherText: '',\r\n    name: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    birthday: moment(),\r\n    password: '',\r\n    password1: '',\r\n    checboxtValue: [],\r\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\r\n\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    loadVisible: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log('_________________config', process.env, process.env.REACT_APP_MELLASERVER_BASE_URL,);\r\n    //发送指令让main.js创建一个big窗口\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //检测是否本地是否有注册信息，有就展示出来。\r\n    console.log(temporaryStorage.logupVetInfo);\r\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\r\n      console.log('进来了');\r\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\r\n      this.setState({\r\n        name: firstName || '',\r\n        lastName,\r\n        email,\r\n        password: hash,\r\n        password1: hash,\r\n        code,\r\n        phone: initPhone || '',\r\n        imgArrayIndex\r\n      })\r\n\r\n\r\n    }\r\n\r\n\r\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\r\n    if (this.props.location && this.props.location.email) {\r\n      this.setState({\r\n        email: this.props.location.email\r\n      })\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  _next = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n\r\n\r\n    let params = {\r\n      firstName: name,\r\n      lastName,\r\n      email,\r\n      hash: password,\r\n    }\r\n    if (phone) {\r\n      params.phone = `+${code}${phone}`\r\n    }\r\n\r\n    registByAWSSES(params)\r\n      .then(res => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        // console.log('注册接口返回数据：', res);\r\n        switch (res.code) {\r\n          case 11011:\r\n            console.log('用户已存在，应该跳出弹框')\r\n            this.setState({\r\n              visible: true\r\n            })\r\n\r\n            break;\r\n\r\n          case 20000:\r\n          case 200:\r\n            console.log('可以注册，跳转到下一页');\r\n            temporaryStorage.logupEmailCode = res.data\r\n            params.code = code\r\n            params.initPhone = phone\r\n            params.imgArrayIndex = this.state.imgArrayIndex\r\n            temporaryStorage.logupVetInfo = params\r\n            this.props.history.push('/uesr/logUp/VerifyEmail')\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('注册接口抛出错误：', err);\r\n      })\r\n\r\n  }\r\n  _signIn = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push('/page11')\r\n  }\r\n\r\n  beforeDiv = () => {\r\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n  afterDiv = () => {\r\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n\r\n  heard = () => {\r\n    if (this.props.systemType === 'mac') {\r\n      return (\r\n        <div className=\"macheard\"  >\r\n          <div className=\"macheardson\" >\r\n            <MinClose />\r\n            <img\r\n              onClick={() => {\r\n                this.props.history.push(\"/\");\r\n              }}\r\n              src={back_hui} className={'returnImg'} />\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"heaed\"\r\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\r\n        >\r\n          <div className=\"l\">\r\n            <MouseDiv\r\n              className=\"mouseDiv\"\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.push(\"/\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n            <MinClose />\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\r\n    return (\r\n      <div id=\"vetPrifile\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          {this.heard()}\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), marginBottom: px(120) }}\r\n          >\r\n            Let’s start by creating your account\r\n          </div>\r\n          <div className=\"form\" >\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={name}\r\n                  placeholder=\"First Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      name: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  placeholder=\"Last Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      lastName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Email\"\r\n                  value={email}\r\n                  placeholder=\"Email Address*\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      email: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\r\n                  {countryList.map((item, index) => {\r\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                    return (\r\n                      <li key={index}>\r\n                        <div key={index}\r\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                          onClick={() => {\r\n                            console.log(item, index);\r\n                            this.setState({\r\n                              code: item.code,\r\n                              imgArrayIndex: index\r\n                            })\r\n                            document.getElementById('list').style.display = \"none\"\r\n                          }}\r\n                        >\r\n                          <img src={url} alt=\"\" />\r\n                          <p >{`${item.en}   +${item.code}`}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n\r\n\r\n                <div className='phone'>\r\n                  <div\r\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\r\n                    onClick={() => {\r\n                      document.getElementById('list').style.display = \"block\"\r\n                    }}\r\n                  >\r\n                    <img style={{ zIndex: '888' }}\r\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                    />\r\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                  </div>\r\n\r\n\r\n                  <input\r\n                    type=\"Phone\"\r\n                    value={phone}\r\n                    placeholder=\"Phone Number\"\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        phone: data.replace(/[^\\-?\\d]/g, '')\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password}\r\n                  placeholder=\"Create Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password1}\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password1: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"footText\"\r\n          >Already have an account? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\r\n\r\n          {/* 按钮 */}\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n\r\n          visible={this.state.loadVisible}\r\n        />\r\n\r\n        <Modal\r\n          open={visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">Email Already Exists</div>\r\n\r\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\r\n\r\n            <div className=\"btn\">\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false,\r\n                    email: ''\r\n                  })\r\n                }}\r\n              >Try Again</button>\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false\r\n                  })\r\n                  this.props.history.replace('/page11')\r\n                }}\r\n              >Sign Up</button>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({\r\n    systemType: state.systemReduce.systemType\r\n  })\r\n)(VetPrifile)\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",["837","838","839"],"\nimport React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\n\nimport './minClose.less'\nimport { px, mTop } from './../px'\nimport rMin_red from './../../assets/img/min-red.png'\nimport rClose_red from './../../assets/img/close-red.png'\n\nimport rMin_white from './../../assets/img/min-white.png'\nimport rClose_white from './../../assets/img/close-white.png'\nimport { connect } from 'react-redux';\n\nlet ipcRenderer = window.electron.ipcRenderer\n\n/**\n *\n * @param {string} minHeight 最小化、最大化方块的宽高\n * @param {number} imgWidth 最小化、最大化图片的高度\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\n */\nconst MinClose = ({ minHeight, imgWidth, systemType }) => {\n  const [minbgc, setMinbgc] = useState('')\n  const [rMin, setRMin] = useState(rMin_red)\n  const [closebgc, setClosebgc] = useState('')\n  const [rClose, setRClose] = useState(rClose_red)\n\n  const [closeText, setCloseText] = useState('')\n  const [minText, setMinText] = useState('')\n\n  const minMouseEnter = () => {\n    setMinbgc('rgba(70, 70, 70, 0.5)')\n    setRMin(rMin_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const minMouseLeave = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const minClock = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    ipcRenderer.send('window-min')\n\n  }\n\n\n  const closeMouseEnter = () => {\n    setClosebgc('rgba(232,17,35)')\n    setRClose(rClose_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const closeMouseLeave = () => {\n    setClosebgc('')\n    setRClose(rClose_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const closeClock = () => {\n    ipcRenderer.send('window-close')\n  }\n  // console.log('systemType', systemType);\n\n  const body = () => {\n    if (systemType === 'mac') {\n      return (\n        <>\n          <div\n            className='macStyle'\n            style={{ marginLeft: '21px' }}\n            onClick={closeClock}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <div className='mactext'>{closeText} </div>\n          </div>\n\n          <div\n            className='macStyle'\n            onClick={minClock}\n            style={{ backgroundColor: 'rgb(254,180,41' }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <div className='mactext'>{minText} </div>\n          </div>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <div\n            className='min_icon'\n            onClick={minClock}\n            style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n          <div\n            className='min_icon'\n            onClick={closeClock}\n            style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n        </>\n      )\n    }\n  }\n\n  return (\n    <div id='minClose' >\n      {body()}\n    </div>\n  )\n}\n\nMinClose.propTypes = {\n  minHeight: PropTypes.string,\n  imgWidth: PropTypes.string,\n}\nMinClose.defaultProps = {\n  minHeight: '40px',\n  imgWidth: `${px(20)}px`\n\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(MinClose)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",["840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872"],"import React, { useState, useEffect } from \"react\";\r\nimport { Menu, Popover, Button, Modal, message } from \"antd\";\r\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport help from \"./../../assets/images/help.png\";\r\nimport biggieHelp from \"./../../assets/images/biggieHelp.png\";\r\nimport tabbyHelp from \"./../../assets/images/tabbyHelp.png\";\r\nimport otterEQHelp from \"./../../assets/images/otterEQHelp.png\";\r\nimport mabelHelp from \"./../../assets/images/mabelHelp.png\";\r\nimport messageImg from \"./../../assets/images/message.png\";\r\nimport biggieMessage from \"./../../assets/images/biggieMessage.png\";\r\nimport dog from \"./../../assets/images/reddog.png\";\r\nimport cat from \"./../../assets/images/redcat.png\";\r\nimport other from \"./../../assets/images/redother.png\";\r\nimport menu from \"./../../assets/img/menu.png\";\r\nimport close from \"./../../assets/img/close.png\";\r\nimport jinggao from \"./../../assets/img/jinggao.png\";\r\nimport redclose from \"./../../assets/img/redclose.png\";\r\nimport rMin_red from \"./../../assets/img/min-red.png\";\r\nimport rClose_red from \"./../../assets/img/close-red.png\";\r\nimport rMin_white from \"./../../assets/img/min-white.png\";\r\nimport rClose_white from \"./../../assets/img/close-white.png\";\r\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\r\n\r\nimport { mTop, px, MTop } from \"../px\";\r\nimport electronStore from \"../electronStore\";\r\nimport MyModal from './../myModal/MyModal'\r\nimport { version, updateTime } from \"./../appversion\";\r\n\r\nimport { connect } from 'react-redux'\r\nimport { setMenuNum, setSelectHardwareType, petDetailInfoFun, setMenuActive } from '../../store/actions';\r\nimport moment from 'moment'\r\nimport PropTypes from \"prop-types\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { getPetInfoByRFID, getPetByPetNameOrPatientId, getPetInfoByRFID1 } from \"../../api\";\r\n\r\nimport \"./heard.less\";\r\nimport MinClose from \"../minClose/MinClose\";\r\n\r\n\r\nlet storage = window.localStorage;\r\nlet ipcRenderer = window.electron.ipcRenderer;\r\nlet mouseoutTimer = null;\r\nlet matchingTimer = null;\r\n/**\r\n *\r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns\r\n */\r\n\r\nconst Heard = ({\r\n  onSearch,\r\n  blueSearch,\r\n  setMenuNum,\r\n  setSelectHardwareType,\r\n  setMenuActive,\r\n  petListArr,\r\n  petDetailInfoFun,\r\n  selectHardwareType,\r\n  systemType,\r\n  activeIndex,        // 菜单高亮\r\n}) => {\r\n  let history = useHistory();\r\n\r\n  const [placeContent, setPlaceholder] = useState('Search Pet')\r\n  const [minbgc, setMinbgc] = useState('')        //最小化的背景颜色\r\n  const [closebgc, setClosebgc] = useState('')    //关闭按钮的背景色\r\n  const [rMin, setRMin] = useState(rMin_red)      //最小化的图标\r\n  const [rClose, setRClose] = useState(rClose_red) //关闭按钮图标\r\n  const [value, setValue] = useState('')          //搜索框输入的内容\r\n  const [visible, setVisible] = useState(false)   //搜索框下面的搜索model\r\n  const [loading, setLoading] = useState(false)     //搜索宠物过程中的加载图标\r\n  const [petList, setPetList] = useState([])        //搜索到的宠物列表\r\n  const [menuVisible, setMenuVisible] = useState(false)//菜单图标下面的菜单内容图标\r\n  const [menuMouseOverIndex, setMenuMouseOverIndex] = useState('')//用来定位鼠标滑到哪个菜单选项\r\n\r\n  const [modalvisible, setModalVisible] = useState(false)       //关于的弹窗\r\n  const [modalVis, setModalVis] = useState(false)               //RFID搜索是否有宠物的弹窗\r\n  const [isNotFound, setIsNotFound] = useState(false)           //是否找到RFID对应的图标\r\n  const [deviceModel, setDeviceModel] = useState(false)         //我的设备弹窗\r\n\r\n  const [noUSB, setNoUSB] = useState(false)                 //没有底座设备\r\n  const [searchMac, setSearchMac] = useState(false)         //是否展示狗牌mac搜索图标下面的Modal框\r\n  const [bluDevice, setBluDevice] = useState([])            //搜索到的狗牌设备mac地址\r\n\r\n  const [isShowBlePetList, setIsShowBlePetList] = useState(false)  //是否展示狗牌对应宠物\r\n  const [isMatchPet, setIsMatchPet] = useState(false)      //正在匹配狗牌对应的宠物\r\n  const [macMatchPetList, setMacMatchPetList] = useState([])\r\n  const [updateStatus, setUpdateStatus] = useState('init')\r\n  const [lastVersion, setLastVersion] = useState(version)\r\n  const [downLoadNum, setDownLoadingNum] = useState(0)\r\n  const [selectDeviceMac, setSelectDeviceMac] = useState('')\r\n  const [clickType, setClickType] = useState(false);\r\n\r\n  //这里是为了模拟数据所做出来的,后期要改成接口\r\n  const testPetList = [\r\n    {\r\n      macId: \"E0:7C:62:30:08:08\",\r\n      petName: \"Mella\",\r\n      petId: \"b9de0868-9202-4fc9-9f1b-325220ceeccf\",\r\n    },\r\n    {\r\n      macId: \"E0:7C:62:03:75:32\",\r\n      petName: \"Possum\",\r\n      petId: \"e4b11580-1277-4b10-bd64-46b097f6f882\",\r\n    },\r\n    {\r\n      macId: \"E0:7D:EA:A8:8D:7E\",\r\n      petName: \"Charlie\",\r\n      petId: \"b4e7a185-1c7e-4885-ab95-4a7d2d2ada83\",\r\n    },\r\n    {\r\n      macId: \"E0:7C:62:32:76:8C\",\r\n      petName: \"Noah\",\r\n      petId: \"01b34bf2-47e6-4036-884f-47299447cb6a\",\r\n    },\r\n\r\n    {\r\n      macId: \"84:C2:E4:03:C3:06\",\r\n      petName: \"Whitey\",\r\n      petId: \"f713a238-f5df-4c85-8c4f-5766b0770c07\",\r\n    },\r\n  ];\r\n  const [size, setSize] = useState({ height: px(47) });\r\n  const [color, setColor] = useState({ backgroundColor: '#e1206d' })\r\n  const [headerRef, setHeaderRef] = useState();\r\n\r\n  const uploadMessage = (e, data) => {\r\n    switch (data.payload.status) {\r\n      case -1:\r\n        console.log('查询异常');\r\n        setUpdateStatus('error')\r\n        break;\r\n\r\n      case 0:\r\n        console.log(\"正在检查应用程序更新\");\r\n        setUpdateStatus(\"check\");\r\n        break;\r\n\r\n      case 2:\r\n        console.log(\"正在检查应用程序更新\");\r\n        setUpdateStatus(\"lastVersion\");\r\n        break;\r\n\r\n      case 1:\r\n        console.log(\"检测到新版本\");\r\n        let version = data.output.version;\r\n        setLastVersion(version);\r\n\r\n        setUpdateStatus(\"newVersion\");\r\n        break;\r\n\r\n      // case 3:\r\n      //   console.log(\"下载新版成功\");\r\n      // case 4:\r\n      //   console.log(\"取消背景下载\");\r\n      case 5:\r\n        console.log(\"取消安装\");\r\n        setUpdateStatus(\"init\");\r\n        break;\r\n      case 6:\r\n        console.log(\"正在下载\");\r\n        setUpdateStatus(\"downLoading\");\r\n        let loadNum = data.output.percent\r\n          ? (data.output.percent / 100).toFixed(1)\r\n          : 0;\r\n        setDownLoadingNum(loadNum);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  const _noUSB = (e, data) => {\r\n    console.log(\"没有USB设备：\", data);\r\n    if (data === false) {\r\n      setNoUSB(false);\r\n    } else {\r\n      if (!noUSB) {\r\n        setNoUSB(true);\r\n      }\r\n    }\r\n  };\r\n  const _send = (event, data) => {\r\n    command(data)();\r\n  };\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  const command = (newArr) => {\r\n    let dataArr1 = newArr.map((item) => {\r\n      if (item.toString(16).length < 2) {\r\n        return \"0\" + item.toString(16);\r\n      } else {\r\n        return item.toString(16);\r\n      }\r\n    });\r\n    console.log(dataArr1);\r\n    const instruction = [255];\r\n    const commandArr = {\r\n      255: () => {\r\n        // console.log(dataArr1);\r\n        // console.log(bluDevice);\r\n        let length = newArr.length;\r\n        let frameLength = newArr[1]; //帧长\r\n        let itemLength = newArr[3] + 1; //数据位的长度   13\r\n        let dataIndex = 0;\r\n\r\n        let MAC = \"\";\r\n        let bluData = [];\r\n        let UUID = \"\";\r\n        while (itemLength < length && itemLength + 3 <= frameLength) {\r\n          let itemData = [];\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5]);\r\n          }\r\n          // console.log('循环得到的数据', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              break;\r\n            case 255:\r\n              break;\r\n            case 3:\r\n              break;\r\n            case 239:\r\n              // console.log('---mac地址');\r\n              let str = itemData[0];\r\n              for (let i = 1; i < itemData.length; i++) {\r\n                str += `:${itemData[i]}`;\r\n              }\r\n              MAC = str.toUpperCase();\r\n\r\n              break;\r\n            case 7:\r\n              console.log(\"uuid\");\r\n              let uuid = \"\";\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                uuid += `${itemData[i]}`;\r\n              }\r\n              UUID = uuid;\r\n              break;\r\n            default:\r\n              return;\r\n          }\r\n          dataIndex = itemLength;\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\r\n\r\n          // console.log(itemLength, itemLength < length && (itemLength + 3 <= frameLength));\r\n        }\r\n        console.log(\"----mac\", MAC, \"-----uuid\", UUID);\r\n        if (UUID === \"d7895ab1acc74de3b9919e825c24c809\") {\r\n          // console.log('uuid相等', bluDevice, bluDevice.indexOf(MAC) === -1,);\r\n          if (bluDevice.indexOf(MAC) === -1) {\r\n            let dataArr = [].concat(bluDevice);\r\n            dataArr.push(MAC);\r\n            setBluDevice(dataArr);\r\n          }\r\n        }\r\n      },\r\n    };\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]];\r\n    } else {\r\n      return () => {\r\n        console.log(\"没有控制命令\", commandArr);\r\n      };\r\n    }\r\n  };\r\n  //最小化，关闭的\r\n  const MINCOLOSE = {\r\n    minMouseEnter: () => {\r\n      setMinbgc(\"rgba(70, 70, 70, 0.5)\");\r\n      setRMin(rMin_white);\r\n    },\r\n    minMouseLeave: () => {\r\n      setMinbgc(\"\");\r\n      setRMin(rMin_red);\r\n    },\r\n    minClock: () => {\r\n      setMinbgc(\"\");\r\n      setRMin(rMin_red);\r\n      let ipcRenderer = window.electron.ipcRenderer;\r\n      ipcRenderer.send(\"window-min\");\r\n    },\r\n    closeMouseEnter: () => {\r\n      setClosebgc(\"rgba(232,17,35)\");\r\n      setRClose(rClose_white);\r\n    },\r\n    closeMouseLeave: () => {\r\n      setClosebgc(\"\");\r\n      setRClose(rClose_red);\r\n    },\r\n    closeClock: () => {\r\n      let ipcRenderer = window.electron.ipcRenderer;\r\n      ipcRenderer.send(\"window-close\");\r\n    },\r\n  };\r\n  //搜索框内容\r\n  const searchPetBody = () => {\r\n    if (loading) {\r\n      //加载中\r\n      return (\r\n        <div className=\"searchPetLoading\" style={{ padding: `${20}px 0` }}>\r\n          <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\r\n            <LoadingOutlined\r\n              style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\r\n            />\r\n          </div>\r\n          <p style={{ color: \"#e1206d\", marginTop: px(5) }}>loading...</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      if (petList.length > 0) {\r\n        //找到了宠物，展示出来\r\n        let option = petList.map((item, index) => {\r\n          let { speciesId, url } = item;\r\n\r\n          let images = `url(${url}?download=0&width=150)`;\r\n          if (!url) {\r\n            switch (speciesId) {\r\n              case 1:\r\n                images = `url(${cat})`;\r\n\r\n                break;\r\n              case 2:\r\n                images = `url(${dog})`;\r\n                break;\r\n              default:\r\n                images = `url(${other})`;\r\n                break;\r\n            }\r\n          }\r\n          return (\r\n            <li\r\n              key={`${index}`}\r\n              style={{ margin: `${px(20)}px 0` }}\r\n              onClick={() => {\r\n                setValue('')\r\n                setVisible(false)\r\n                setPetList([])\r\n                petDetailInfoFun(item)\r\n                // onSearch(item)\r\n                history.push('/MainBody')\r\n              }}\r\n            >\r\n              <div className=\"item\" style={{ paddingLeft: px(40) }}>\r\n                <div\r\n                  className=\"img\"\r\n                  style={{\r\n                    width: px(50),\r\n                    height: px(50),\r\n                    marginRight: px(40),\r\n                    borderRadius: px(60),\r\n                    backgroundImage: images,\r\n                  }}\r\n                >\r\n\r\n                </div>\r\n\r\n                <div className=\"petInfo\">\r\n                  <p\r\n                    style={{\r\n                      color: \"#141414\",\r\n                      fontWeight: 600,\r\n                      fontSize: px(20),\r\n                    }}\r\n                  >\r\n                    {item.petName}\r\n                  </p>\r\n                  <p\r\n                    style={{ color: \"#797979\", fontSize: px(18) }}\r\n                  >{`Patient ID: ${item.patientId}`}</p>\r\n                  <p\r\n                    style={{ color: \"#797979\", fontSize: px(18) }}\r\n                  >{`Owner: ${item.owner}`}</p>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          );\r\n        });\r\n        let liStyle = { backgroundColor: \"#fff\" };\r\n        if (petList.length > 4) {\r\n          liStyle = { height: px(500), overflowY: \"auto\" };\r\n        }\r\n\r\n        return (\r\n          <div className=\"searchPetList\">\r\n            <ul style={liStyle}>{option}</ul>\r\n          </div>\r\n        );\r\n      } else {\r\n        //没有发现这个宠物\r\n        return (\r\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\r\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\r\n              Pet not found. Would you like to add a new patient?\r\n            </p>\r\n\r\n            <div\r\n              className=\"searchPetBtn\"\r\n              style={{ fontSize: px(18) }}\r\n              onClick={() => {\r\n                history.push(\"/pet/doctorAddPet\");\r\n              }}\r\n            >\r\n              <p style={{ padding: `${px(8)}px 0` }}>+ New Patient</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  };\r\n  const inputChange = (text) => {\r\n    function isNumber(val) {\r\n      var regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\r\n      var regNeg =\r\n        /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\r\n      if (regPos.test(val) || regNeg.test(val)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    //去除前后空格\r\n    let search = text.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\");\r\n    setValue(search);\r\n    if (search.length > 0) {\r\n      setVisible(true);\r\n      setLoading(true);\r\n      //搜索分成两种，一种是通过手输入数据搜索，一种是通过RFID扫描过后搜索\r\n      if (search.length === 15 && isNumber(search)) {\r\n        //这是RFID扫描后的搜索\r\n        getPetInfoByRFID1(search, storage.lastOrganization)\r\n          .then((res) => {\r\n            if (res.flag === true && res.data) {\r\n              let {\r\n                createTime,\r\n                patientId,\r\n                petName,\r\n                firstName,\r\n                lastName,\r\n                url,\r\n                speciesId,\r\n                breedName,\r\n                gender,\r\n                birthday,\r\n                petId,\r\n                rfid,\r\n                weight,\r\n              } = res.data;\r\n              patientId = patientId || \"unknown\";\r\n              petName = petName || \"unknown\";\r\n              breedName = breedName || \"unknown\";\r\n              weight = weight || \"unknown\";\r\n              let owner = \"\";\r\n              if (!firstName) {\r\n                firstName = \"\";\r\n              }\r\n              if (!lastName) {\r\n                lastName = \"\";\r\n              }\r\n              if (lastName === \"\" && firstName === \"\") {\r\n                owner = \"unknown\";\r\n              } else {\r\n                owner = `${lastName} ${firstName}`;\r\n              }\r\n              createTime = moment(createTime).format(\"X\");\r\n              let petGender = \"\";\r\n              switch (`${gender}`) {\r\n                case \"1\":\r\n                  petGender = \"F\";\r\n\r\n                  break;\r\n                case \"0\":\r\n                  petGender = \"M\";\r\n                  break;\r\n                default:\r\n                  petGender = \"unknown\";\r\n                  break;\r\n              }\r\n              let petAge = \"unknown\";\r\n              if (birthday) {\r\n                petAge = moment(new Date()).diff(moment(birthday), \"years\");\r\n                // console.log('petAge', petAge);\r\n              }\r\n              let json = {\r\n                insertedAt: createTime,\r\n                patientId,\r\n                petName,\r\n                owner,\r\n                breed: breedName,\r\n                gender: petGender,\r\n                age: petAge,\r\n                petId,\r\n                id: 0,\r\n                weight,\r\n                rfid,\r\n                url,\r\n                speciesId,\r\n              };\r\n              let searchData = [];\r\n              searchData.push(json);\r\n              setLoading(false);\r\n              setPetList(searchData);\r\n            } else if (\r\n              res.flag === true &&\r\n              res.msg === \"The organization has no information about this pet\"\r\n            ) {\r\n              setLoading(false);\r\n              setModalVis(true);\r\n              setIsNotFound(false);\r\n              setValue(\"\");\r\n              setVisible(false);\r\n            } else {\r\n              setLoading(false);\r\n              setModalVis(true);\r\n              setIsNotFound(true);\r\n              setValue(\"\");\r\n              setVisible(false);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            setLoading(false);\r\n          });\r\n        return;\r\n      }\r\n      let params = {\r\n        searchValue: search,\r\n      }\r\n      if (storage.lastOrganization) {\r\n        params.orgId = storage.lastOrganization\r\n      }\r\n      getPetByPetNameOrPatientId(storage.userId, params)\r\n        .then((res) => {\r\n          if (res.msg === 'success') {\r\n            setPetList(res.success)\r\n          } else {\r\n            message.warning('system error');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          message.error('system error')\r\n\r\n        })\r\n      /**\r\n       * 使用indexof方法实现模糊查询\r\n       *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n       *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n       *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n       *\r\n       * list         原数组\r\n       * keyWord      查询关键词\r\n       * searchData   查询的结果\r\n       *\r\n       * toLowerCase（）方法：将字符串统一转成小写\r\n       * toUpperCase（）方法：将字符串统一转成大写\r\n       *\r\n       */\r\n      // let list = petListArr || [];\r\n      // let searchData = [];\r\n      // let keyWord = search;\r\n      // for (let i = 0; i < list.length; i++) {\r\n      //   let petName = list[i].petName ? list[i].petName.toLowerCase() : '';\r\n      //   let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : '';\r\n      //   let rfid = list[i].rfid || '';\r\n      //   if (\r\n      //     `${petName}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n      //     `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n      //     `${rfid}`.indexOf(keyWord) !== -1\r\n      //   ) {\r\n      //     searchData.push(list[i]);\r\n      //   }\r\n      // }\r\n      // setPetList(searchData);\r\n      setLoading(false);\r\n    } else {\r\n      setVisible(false);\r\n    }\r\n  };\r\n  //左侧菜单栏\r\n  const menuList = () => {\r\n    let name = electronStore.get(`${storage.userId}-isClical`) ? 'Exit Clinical Study Mode' : 'Enter Clinical Study Mode'\r\n    let menulistArr = [\r\n      { name: \"Home\", index: \"1\" },\r\n      { name: \"All Patients\", index: \"2\" },\r\n      { name: \"Scheduled Patients\", index: \"3\" },\r\n      { name: \"My Account\", index: \"4\" },\r\n      { name: \"Org & Practice Profiles\", index: \"10\" },\r\n      { name: \"Settings\", index: \"5\" },\r\n      { name: name, index: \"6\" },\r\n      { name: `Billing & Subscriptions`, index: \"7\" },\r\n      { name: \"About Mella\", index: \"8\" },\r\n      { name: \"Log Out\", index: \"9\" },\r\n    ];\r\n    let menuOption = menulistArr.map((item, index) => {\r\n      let pColor = menuMouseOverIndex === item.index ? \"#e1206d\" : null;\r\n      let activeColor = activeIndex === item.index ? \"#e1206d\" : \"#1a1a1a\";\r\n      return (\r\n        <li\r\n          key={item.index}\r\n          style={{ padding: `${px(15)}px ${px(20)}px` }}\r\n          onClick={() => {\r\n            menulistClick(item);\r\n          }}\r\n          onMouseOver={(e) => {\r\n            setMenuMouseOverIndex(item.index);\r\n            e.stopPropagation();\r\n            e.nativeEvent.stopImmediatePropagation();\r\n            menuMouseOver();\r\n          }}\r\n          onMouseOut={(e) => {\r\n            setMenuMouseOverIndex(\"\");\r\n            e.stopPropagation();\r\n            e.nativeEvent.stopImmediatePropagation();\r\n            menuMouseOut();\r\n          }}\r\n        >\r\n          <div className=\"item\" style={{ color: activeColor }}>\r\n            <p style={{ color: pColor }}>{item.name}</p>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return <ul>{menuOption}</ul>;\r\n  };\r\n  const menulistClick = (e) => {\r\n    mouseoutTimer && clearTimeout(mouseoutTimer);\r\n    setMenuVisible(false);\r\n    setMenuMouseOverIndex(\"\");\r\n    setMenuActive(e.index)\r\n    console.log('000000000000', e.index);\r\n    switch (e.index) {\r\n      case \"1\":\r\n\r\n      case \"2\":\r\n\r\n      case \"3\":\r\n\r\n      case \"4\":\r\n\r\n      case \"5\":\r\n        //跳转到设置\r\n        history.push(\"/MainBody\");\r\n        setMenuNum(e.index);\r\n        break;\r\n      case \"6\":\r\n        if (e.name === \"Exit Clinical Study Mode\") {\r\n          setMenuNum('1');\r\n          electronStore.set(`${storage.userId}-isClical`, false)\r\n          setSelectHardwareType(\"mellaPro\");\r\n        } else {\r\n          setMenuNum(e.index);\r\n          electronStore.set(`${storage.userId}-isClical`, true)\r\n        }\r\n        history.push(\"/MainBody\");\r\n        console.log(\"临床测试\");\r\n        break;\r\n      case \"7\":\r\n        setMenuNum(e.index);\r\n        break;\r\n\r\n      case \"8\":\r\n        setModalVisible(true);\r\n        console.log(\"关于\");\r\n        break;\r\n      case \"9\":\r\n        console.log(\"退出登录\");\r\n        storage.userId = \"\";\r\n        storage.roleId = \"\";\r\n        storage.userWorkplace = \"\";\r\n        storage.lastOrganization = \"\";\r\n        storage.lastWorkplaceId = \"\";\r\n        storage.connectionKey = \"\";\r\n        storage.isClinical = \"false\";\r\n        setMenuNum(\"1\");\r\n        history.push(\"/\");\r\n        break;\r\n\r\n      case \"10\":\r\n        // history.push('/menuOptions/ConnectWorkplace');\r\n        setMenuNum(\"ConnectWorkplace\");\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const menuMouseOut = () => {\r\n    mouseoutTimer && clearTimeout(mouseoutTimer);\r\n    mouseoutTimer = setTimeout(() => {\r\n      setMenuVisible(false);\r\n      mouseoutTimer && clearTimeout(mouseoutTimer);\r\n    }, 1000);\r\n  };\r\n  const menuMouseOver = () => {\r\n    mouseoutTimer && clearTimeout(mouseoutTimer);\r\n    setMenuVisible(true);\r\n  };\r\n  const updatePage = () => {\r\n    switch (updateStatus) {\r\n      case \"init\":\r\n        return (\r\n          <div\r\n            className=\"updateBtn\"\r\n            style={{ height: px(40) }}\r\n            onClick={() => {\r\n              setDownLoadingNum(0);\r\n              setUpdateStatus(\"check\");\r\n\r\n              ipcRenderer.send(\"clickUpdateBtn\");\r\n            }}\r\n          >\r\n            Check for Updates\r\n          </div>\r\n        );\r\n      case \"check\":\r\n        return (\r\n          <div className=\"updateLoading flex\">\r\n            <div className=\"loadIcon1\">\r\n              <LoadingOutlined\r\n                style={{ fontSize: 30, color: \"#e1206d\", marginRight: px(20) }}\r\n              />\r\n            </div>\r\n            <p style={{ color: \"#e1206d\" }}>Checking for updates</p>\r\n          </div>\r\n        );\r\n      case \"lastVersion\":\r\n        return (\r\n          <div style={{ fontSize: px(22), }}>\r\n            already the latest version\r\n          </div>\r\n        )\r\n      case 'error':\r\n        return (\r\n          <div style={{ fontSize: px(22), }}>\r\n            Failed to get the latest version, please try again later\r\n          </div>\r\n        )\r\n\r\n\r\n      case \"newVersion\":\r\n        return (\r\n          <div style={{ fontSize: px(22) }}>\r\n            {`Found new version V${lastVersion}`}\r\n          </div>\r\n        );\r\n      case \"downLoading\":\r\n        return (\r\n          <div style={{ fontSize: px(22) }}>\r\n            {`Download progress: ${downLoadNum}%`}\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  //关于界面\r\n  const modal = () => {\r\n    return (\r\n      <div\r\n        className=\"settingModal\"\r\n        style={{ height: `${document.documentElement.clientHeight}px` }}\r\n      >\r\n        <div className=\"writeBox\" style={{ borderRadius: px(25) }}>\r\n          <div className=\"modalHeadr\">\r\n            <div className=\"close\">\r\n              <div\r\n                className=\"imgBox\"\r\n                style={{ padding: `0 ${px(30)}px` }}\r\n                onClick={() => {\r\n                  setModalVisible(false);\r\n                  setUpdateStatus(\"init\");\r\n                }}\r\n              >\r\n                <img src={close} style={{ width: px(23) }} />\r\n              </div>\r\n            </div>\r\n            <div className=\"heaerCenter\">\r\n              <div className=\"heaerCenterL\">\r\n                <img src={mellaLogo} style={{ width: \"80%\" }} />\r\n              </div>\r\n              <div className=\"heaerCenterR\">\r\n                <h1 style={{ fontSize: px(45), marginBottom: px(10) }}>\r\n                  About the System\r\n                </h1>\r\n                <div className=\"version\">\r\n                  <div\r\n                    className=\"versionL\"\r\n                    style={{ fontSize: px(22), width: px(180) }}\r\n                  >\r\n                    Version\r\n                  </div>\r\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\r\n                    {version}\r\n                  </div>\r\n                </div>\r\n                <div className=\"version\">\r\n                  <div\r\n                    className=\"versionL\"\r\n                    style={{ fontSize: px(22), width: px(180) }}\r\n                  >\r\n                    Last Checked\r\n                  </div>\r\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\r\n                    {updateTime}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"check\" style={{ marginTop: px(20) }}>\r\n                  {updatePage()}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"modalfoot\">\r\n            <div\r\n              className=\"about\"\r\n              style={{ marginTop: px(40), fontSize: px(18) }}\r\n            >\r\n              Nanjing Jiubian Technology Co., Ltd. was founded in 2019, located\r\n              in Nanjing Yuhuatai Software Valley Branch City, the company\r\n              brings together medical sensors, mobile Internet and other\r\n              industry's top professionals, business areas covering artificial\r\n              intelligence, smart medical, pet health, sleep monitoring, etc.,\r\n              is a design, research and development, production, sales, service\r\n              in one of the high-tech companies. The nine-sided science and\r\n              technology to \"the number of heavens and earths, starting from\r\n              one, finally nine\" as the cultural concept, adhering to the\r\n              essence of Chinese artisans, with an international vision, always\r\n              standing in the forefront of bio-intelligent medical monitoring\r\n              technology.\r\n            </div>\r\n\r\n            <div className=\"aLable\">\r\n              <a\r\n                href=\"#\"\r\n                style={{ fontSize: px(18), marginRight: px(50) }}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Terms and Agreements\r\n              </a>\r\n              <a\r\n                href=\"#\"\r\n                style={{ fontSize: px(18) }}\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                }}\r\n              >\r\n                Privacy Policy\r\n              </a>\r\n            </div>\r\n\r\n            <div className=\"foot\" style={{ marginBottom: px(40) }}>\r\n              © 2021 Mella Pet Care All RIghts Reserved\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  //设备列表界面\r\n  const devices = () => {\r\n    let userId = storage.userId;\r\n    let deviceList = electronStore.get(`${userId}-deviceList`);\r\n    console.log(\"---\", deviceList);\r\n    if (!deviceList) {\r\n      let str = `${getRamNumber()}`;\r\n      for (let i = 0; i < 5; i++) {\r\n        str += `:${getRamNumber()}`;\r\n      }\r\n      console.log(\"随机生成的mac地址:\", str);\r\n      deviceList = [{ name: \"MellaPro\", deviceType: \"mellaPro\", macId: str }];\r\n      electronStore.set(`${userId}-deviceList`, deviceList);\r\n    }\r\n\r\n    function getRamNumber() {\r\n      var result = \"\";\r\n      for (var i = 0; i < 2; i++) {\r\n        result += Math.floor(Math.random() * 16).toString(16); //获取0-15并通过toString转16进制\r\n      }\r\n      //默认字母小写，手动转大写\r\n      return result.toLowerCase(); //另toLowerCase()转小写\r\n    }\r\n    let options = deviceList.map((item, index) => {\r\n      return (\r\n        <li\r\n          className=\"flex\"\r\n          key={`${index}`}\r\n          style={{ marginBottom: px(15), marginTop: px(5) }}\r\n          onClick={() => {\r\n            console.log(item.macId);\r\n            setSelectDeviceMac(item.macId);\r\n          }}\r\n        >\r\n          <div className=\"liLeft\" style={{ fontSize: px(16) }}>\r\n            {item.name}\r\n          </div>\r\n          <div className=\"liCenter\" style={{ fontSize: px(16) }}>\r\n            {item.macId}\r\n          </div>\r\n          <div className=\"liRight\">\r\n            <div\r\n              className=\"circle flex\"\r\n              style={{ width: px(18), height: px(18) }}\r\n            >\r\n              {selectDeviceMac === item.macId && <div className=\"redCircle\" />}\r\n            </div>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div\r\n        className=\"settingModal\"\r\n        style={{ height: `${document.documentElement.clientHeight}px` }}\r\n      >\r\n        <div\r\n          className=\"writeBox devices\"\r\n          style={{ borderRadius: px(25), width: px(400) }}\r\n        >\r\n          <div className=\"deviceHeadr\">\r\n            <div className=\"close\">\r\n              <div\r\n                className=\"imgBox\"\r\n                style={{ padding: `0 ${px(30)}px` }}\r\n                onClick={() => setDeviceModel(false)}\r\n              >\r\n                <img src={close} style={{ width: px(23) }} />\r\n              </div>\r\n            </div>\r\n            <div className=\"logo flex\">\r\n              <img src={mellaLogo} style={{ width: px(60) }} />\r\n              <div style={{ fontSize: px(22), marginTop: px(30) }}>Devices</div>\r\n              <div\r\n                className=\"bodyText\"\r\n                style={{ fontSize: px(18), marginTop: px(40) }}\r\n              >\r\n                Select the device you would\r\n                <br />\r\n                like to use or add a new device.\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceCenter\">\r\n            <ul>{options}</ul>\r\n          </div>\r\n          <div\r\n            className=\"deviceFooter flex\"\r\n            style={{\r\n              borderBottomLeftRadius: px(25),\r\n              borderBottomRightRadius: px(25),\r\n            }}\r\n          >\r\n            <div\r\n              className=\"btn\"\r\n              style={{ height: px(40) }}\r\n              onMouseDown={() => {\r\n                let button = document.querySelectorAll(\r\n                  \"#heard .deviceFooter .btn\"\r\n                );\r\n                button[0].style.opacity = \"0.5\";\r\n              }}\r\n              onMouseUp={() => {\r\n                let button = document.querySelectorAll(\r\n                  \"#heard .deviceFooter .btn\"\r\n                );\r\n                button[0].style.opacity = \"1\";\r\n              }}\r\n              onClick={() => {\r\n                setDeviceModel(false);\r\n                history.push(\"/menuOptions/AddDevice\");\r\n              }}\r\n            >\r\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\r\n                New Device\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"btn\"\r\n              style={{ height: px(40) }}\r\n              onMouseDown={() => {\r\n                let button = document.querySelectorAll(\r\n                  \"#heard .deviceFooter .btn\"\r\n                );\r\n                button[1].style.opacity = \"0.5\";\r\n              }}\r\n              onMouseUp={() => {\r\n                let button = document.querySelectorAll(\r\n                  \"#heard .deviceFooter .btn\"\r\n                );\r\n                button[1].style.opacity = \"1\";\r\n              }}\r\n              onClick={() => {\r\n                electronStore.set(\r\n                  `${storage.userId}-selectDevice`,\r\n                  selectDeviceMac\r\n                );\r\n                setDeviceModel(false);\r\n              }}\r\n            >\r\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\r\n                Connect\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  //点击蓝牙搜索图标\r\n  const blueClick = () => {\r\n    console.log(\"点击了蓝牙图标\");\r\n    setIsShowBlePetList(false);\r\n    setSearchMac(true);\r\n  };\r\n  //点击取消链接\r\n  const cencleClick = (e) => {\r\n    console.log(\"mac列表为空,点击取消\");\r\n    setBluDevice([]);\r\n    setSearchMac(false);\r\n    setIsShowBlePetList(false);\r\n    setIsMatchPet(false);\r\n    setMacMatchPetList([]);\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    matchingTimer && clearTimeout(matchingTimer);\r\n  };\r\n  //搜索狗牌的蓝牙\r\n  const blusearchBody = () => {\r\n    console.log(\"搜索狗牌的蓝牙\", searchMac, bluDevice);\r\n    if (isShowBlePetList) {\r\n      if (isMatchPet) {\r\n        return (\r\n          <div\r\n            className=\"searchPetLoading\"\r\n            style={{ padding: `${20}px 0`, width: \"100%\" }}\r\n          >\r\n            <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\r\n              <LoadingOutlined\r\n                style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\r\n              />\r\n            </div>\r\n            <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\r\n              matching...\r\n            </p>\r\n\r\n            <a\r\n              href=\"#\"\r\n              style={{ color: \"#e1206d\", marginTop: px(30) }}\r\n              onClick={cencleClick}\r\n            >\r\n              Cencle\r\n            </a>\r\n          </div>\r\n        );\r\n      } else {\r\n        if (macMatchPetList.length > 0) {\r\n          let option = macMatchPetList.map((item, index) => {\r\n            let { speciesId, url } = item;\r\n\r\n            let images = `url(${url}?download=0&width=150)`;\r\n            if (!url) {\r\n              switch (speciesId) {\r\n                case 1:\r\n                  images = `url(${cat})`;\r\n                  break;\r\n                case 2:\r\n                  images = `url(${dog})`;\r\n                  break;\r\n                default:\r\n                  images = `url(${other})`;\r\n                  break;\r\n              }\r\n            }\r\n            return (\r\n              <li\r\n                key={`${index}`}\r\n                style={{ margin: `${px(20)}px 0` }}\r\n                onClick={() => {\r\n                  cencleClick();\r\n                  onSearch(item);\r\n                }}\r\n              >\r\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\r\n                  <div\r\n                    className=\"img\"\r\n                    style={{\r\n                      width: px(50),\r\n                      height: px(50),\r\n                      marginRight: px(40),\r\n                      borderRadius: px(60),\r\n                      backgroundImage: images,\r\n                    }}\r\n                  >\r\n                    {/* <img src={images} style={{ width: px(40) }} /> */}\r\n                  </div>\r\n\r\n                  <div className=\"petInfo\">\r\n                    <p\r\n                      style={{\r\n                        color: \"#141414\",\r\n                        fontWeight: 600,\r\n                        fontSize: px(20),\r\n                        textAlign: \"start\",\r\n                      }}\r\n                    >\r\n                      {item.petName}\r\n                    </p>\r\n                    <p\r\n                      style={{ color: \"#797979\", fontSize: px(18) }}\r\n                    >{`Patient ID: ${item.patientId}`}</p>\r\n                    <p\r\n                      style={{ color: \"#797979\", fontSize: px(18) }}\r\n                    >{`Owner: ${item.owner}`}</p>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            );\r\n          });\r\n          let liStyle = { backgroundColor: \"#fff\" };\r\n          if (petList.length > 4) {\r\n            liStyle = { height: px(500), overflowY: \"auto\" };\r\n          }\r\n\r\n          return (\r\n            <div className=\"searchPetList flex\">\r\n              <ul style={liStyle}>{option}</ul>\r\n              <a\r\n                href=\"#\"\r\n                style={{\r\n                  color: \"#e1206d\",\r\n                  marginTop: px(10),\r\n                  marginBottom: px(21),\r\n                }}\r\n                onClick={cencleClick}\r\n              >\r\n                Cencle\r\n              </a>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (noUSB) {\r\n        return (\r\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\r\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\r\n              Please insert address and scan\r\n            </p>\r\n\r\n            <a href=\"#\" style={{ color: \"#e1206d\" }} onClick={cencleClick}>\r\n              Cencle\r\n            </a>\r\n          </div>\r\n        );\r\n      } else {\r\n        if (bluDevice.length > 0) {\r\n          let option = bluDevice.map((item, index) => {\r\n            return (\r\n              <li\r\n                key={`${index}`}\r\n                style={{ margin: `${px(20)}px 0` }}\r\n                onClick={() => {\r\n                  console.log(\"mac列表为空,点击列表内容\");\r\n                  setBluDevice([]);\r\n                  // setSearchMac(false)\r\n                  setIsShowBlePetList(true);\r\n                  setIsMatchPet(true);\r\n                  matchingTimer && clearTimeout(matchingTimer);\r\n                  matchingTimer = setTimeout(() => {\r\n                    let haveFlog = false,\r\n                      index = -1;\r\n                    for (let i = 0; i < testPetList.length; i++) {\r\n                      if (testPetList[i].macId === item) {\r\n                        haveFlog = true;\r\n                        index = i;\r\n                        break;\r\n                      }\r\n                    }\r\n                    if (haveFlog) {\r\n                      if (storage.lastOrganization === \"1\") {\r\n                        matchPet(testPetList[index].petId);\r\n                      } else {\r\n                        setModalVis(true);\r\n                        setIsNotFound(false);\r\n                        cencleClick();\r\n                      }\r\n                    } else {\r\n                      setModalVis(true);\r\n                      setIsNotFound(true);\r\n                      cencleClick();\r\n                    }\r\n\r\n                    setIsMatchPet(false);\r\n                    matchingTimer && clearTimeout(matchingTimer);\r\n                  }, 2000);\r\n                }}\r\n              >\r\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\r\n                  <div className=\"petInfo\">\r\n                    <p\r\n                      style={{\r\n                        color: \"#141414\",\r\n                        fontWeight: 600,\r\n                        fontSize: px(20),\r\n                      }}\r\n                    >\r\n                      mac:{item}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </li>\r\n            );\r\n          });\r\n          let liStyle = { backgroundColor: \"#fff\" };\r\n          if (bluDevice.length > 4) {\r\n            liStyle = { height: px(500), overflowY: \"auto\" };\r\n          }\r\n          return (\r\n            <div className=\"searchPetList\" style={{ flexDirection: \"column\" }}>\r\n              <ul style={liStyle}>{option}</ul>\r\n              <a\r\n                href=\"#\"\r\n                style={{\r\n                  color: \"#e1206d\",\r\n                  marginTop: px(10),\r\n                  marginBottom: px(21),\r\n                }}\r\n                onClick={cencleClick}\r\n              >\r\n                Cencle\r\n              </a>\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div\r\n              className=\"searchPetLoading\"\r\n              style={{ padding: `${20}px 0`, width: \"100%\" }}\r\n            >\r\n              <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\r\n                <LoadingOutlined\r\n                  style={{\r\n                    fontSize: 30,\r\n                    color: \"#e1206d\",\r\n                    marginTop: mTop(-30),\r\n                  }}\r\n                />\r\n              </div>\r\n              <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\r\n                scanning...\r\n              </p>\r\n\r\n              <a\r\n                href=\"#\"\r\n                style={{ color: \"#e1206d\", marginTop: px(30) }}\r\n                onClick={cencleClick}\r\n              >\r\n                Cencle\r\n              </a>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const matchPet = (searchValue) => {\r\n    console.log(\"搜索词:\", searchValue);\r\n    let list = electronStore.get(\"doctorExam\");\r\n\r\n    let searchData = [];\r\n    let keyWord = searchValue;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let petName = `${list[i].petId}`;\r\n      if (keyWord === petName) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    setIsMatchPet(false);\r\n\r\n    setMacMatchPetList(searchData);\r\n  };\r\n  //分配walk-in记录图标\r\n  const onWalkIn = () => {\r\n    switch (selectHardwareType) {\r\n      case 'mellaPro':\r\n        return (\r\n          <img\r\n            src={messageImg}\r\n            alt=\"\"\r\n            style={{ height: px(25), width: px(25) }}\r\n            onClick={() => {\r\n              setMenuNum('Unassigned0')\r\n              // history.push({ pathname: \"/menuOptions/unassigned\", deviceType: 0 })\r\n            }}\r\n          />\r\n        );\r\n      case 'biggie':\r\n        return (\r\n          <img\r\n            src={biggieMessage}\r\n            alt=\"\"\r\n            style={{ height: px(25), width: px(25) }}\r\n            onClick={() => {\r\n              setMenuNum('Unassigned1')\r\n              // history.push({ pathname: \"/menuOptions/unassigned\", deviceType: 1 })\r\n            }}\r\n          />\r\n        );\r\n      case 'tape':\r\n        return (\r\n          null\r\n        );\r\n      case 'otterEQ':\r\n        return (\r\n          null\r\n        );\r\n      case 'mabel':\r\n        return (\r\n          null\r\n        );\r\n      default:\r\n        return (\r\n          null\r\n        );\r\n    }\r\n  }\r\n  //帮助图标切换\r\n  const onHelp = () => {\r\n    switch (selectHardwareType) {\r\n      case 'mellaPro':\r\n        return (\r\n          <img src={help} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n      case 'biggie':\r\n      case 'camera':\r\n        return (\r\n          <img src={biggieHelp} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n      case 'tape':\r\n        return (\r\n          <img src={tabbyHelp} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n      case 'otterEQ':\r\n        return (\r\n          <img src={otterEQHelp} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n      case 'mabel':\r\n        return (\r\n          <img src={mabelHelp} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n\r\n\r\n\r\n      default:\r\n        return (\r\n          <img src={help} alt=\"\" style={{ height: px(25) }} />\r\n        );\r\n    }\r\n\r\n  }\r\n\r\n  const jiantou = () => {\r\n    return (\r\n      <span class=\"icon iconfont\">&#xe61b;</span>\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    mouseoutTimer && clearTimeout(mouseoutTimer);\r\n    setBluDevice([]);\r\n    return () => {\r\n      matchingTimer && clearTimeout(matchingTimer);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    ipcRenderer.on(\"uploadMessage\", uploadMessage);\r\n    return () => {\r\n      ipcRenderer.removeListener(\"uploadMessage\", uploadMessage);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    if (blueSearch) {\r\n      ipcRenderer.on(\"sned\", _send);\r\n      ipcRenderer.on(\"noUSB\", _noUSB);\r\n      return () => {\r\n        ipcRenderer.removeListener(\"sned\", _send);\r\n        ipcRenderer.removeListener(\"noUSB\", _noUSB);\r\n      };\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    //监听屏幕窗口改变\r\n    setSize({ height: 47 });\r\n  }, [window.screen.availWidth]);\r\n  //切换头部颜色\r\n  useEffect(() => {\r\n    switch (selectHardwareType) {\r\n      case 'mellaPro':\r\n        setColor({ backgroundColor: '#e1206d' });\r\n        break;\r\n      case 'biggie':\r\n        setColor({ backgroundColor: '#12ADE4' });\r\n        break;\r\n      case 'tape':\r\n        setColor({ backgroundColor: '#D5B019' });\r\n        break;\r\n      case 'otterEQ':\r\n        setColor({ backgroundColor: '#FFA132' });\r\n        break;\r\n      case 'mabel':\r\n        setColor({ backgroundColor: '#F78F2F' });\r\n        break;\r\n      case 'camera':\r\n        setColor({ backgroundColor: '#12ADE4' });\r\n        break;\r\n      default:\r\n        setColor({ backgroundColor: '#e1206d' });\r\n        break;\r\n    }\r\n    return (() => { })\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div id=\"heardUI\">\r\n      <div\r\n        id=\"heardUITop\"\r\n        style={{ ...color }}\r\n      >\r\n        {\r\n          systemType === 'mac'\r\n            ? <div style={{ height: '100%', backgroundColor: '#E7E7E7', width: '80px' }}></div>\r\n            : <></>\r\n        }\r\n      </div>\r\n      <div\r\n        id=\"heard\"\r\n        style={{ ...size, ...color }}\r\n        ref={(val) => {\r\n          setHeaderRef(val);\r\n        }}\r\n      >\r\n        <div className=\"l\">\r\n          {systemType === 'mac' ?\r\n            (\r\n              <div className=\"macMinClose\">\r\n                <MinClose />\r\n              </div>\r\n            ) : <></>\r\n          }\r\n\r\n          <div\r\n            className=\"menuF\"\r\n            style={{ marginLeft: px(parseInt(`${systemType === 'mac' ? '20' : '30'}`)), marginRight: px(40) }}\r\n          >\r\n            <div\r\n              className=\"menu\"\r\n              onMouseOver={menuMouseOver}\r\n              onMouseOut={menuMouseOut}\r\n            >\r\n              <img src={menu} style={{ width: px(20) }} />\r\n              {menuVisible ? (\r\n                // true\r\n                <div className=\"manuBody\" style={{ top: px(20), left: px(-40) }}>\r\n                  <div\r\n                    className=\"triangle\"\r\n                    style={{\r\n                      borderLeft: `${px(10)}px solid transparent`,\r\n                      borderRight: `${px(10)}px solid transparent`,\r\n                      borderBottom: `${px(13)}px solid #fff`,\r\n                      left: px(40),\r\n                    }}\r\n                  />\r\n                  <div className=\"manuBodyList\" style={{ marginTop: px(13) }}>\r\n                    {menuList()}\r\n                  </div>\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"search\" style={{ width: px(300) }}>\r\n            <input\r\n              // 后续修改，不知道怎么在模板字符串里添加字体图标\r\n              placeholder=\"Search Pet  &#xe61f;\"\r\n              // &#xe61f;\r\n              // placeholder={`${placeContent}`}\r\n\r\n              style={{ fontSize: px(16), paddingLeft: px(20) }}\r\n              value={value}\r\n              onChange={(text) => {\r\n                inputChange(text);\r\n              }}\r\n              // 后续修改，鼠标聚焦清除placeholder\r\n              // onFocus={() => setPlaceholder('')}\r\n              // onBlur={() => setPlaceholder('Search Pet')}\r\n              onKeyUp={(e) => {\r\n                // console.log(e);\r\n                if (e.keyCode === 13) {\r\n                  console.log(\"回车,去搜索\");\r\n                }\r\n                if (e.keyCode === 27) {\r\n                  console.log(\"清空\");\r\n                  setValue(\"\");\r\n                  setVisible(false);\r\n                }\r\n              }}\r\n            />\r\n            {blueSearch ? (\r\n              <div\r\n                className=\"searchIconFa bluSearch\"\r\n              // style={{ cursor: 'pointer', backgroundColor: 'pink' }}\r\n              // onClick={blueClick}\r\n              >\r\n                <div onClick={blueClick}>\r\n                  {/* <img src={blueSearchPng} style={{ width: '50%' }} /> */}\r\n                  <span\r\n                    className=\" iconfont icon-sousuo searchIcon\"\r\n                    style={{ fontSize: px(25) }}\r\n                  />\r\n                </div>\r\n\r\n                {searchMac ? (\r\n                  // true ?\r\n                  <div className=\"searchPet flex\" style={{ width: px(400) }}>\r\n                    <div\r\n                      className=\"triangle\"\r\n                      style={{\r\n                        borderLeft: `${px(20)}px solid transparent`,\r\n                        borderRight: `${px(20)}px solid transparent`,\r\n                        borderBottom: `${px(25)}px solid #fff`,\r\n                        // marginLeft: px(30),\r\n                        zIndex: 999,\r\n                      }}\r\n                    />\r\n\r\n                    <div className=\"searchPetBody\" style={{ width: \"100%\" }}>\r\n                      {blusearchBody()}\r\n                    </div>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n            ) : (\r\n              // <div className=\"searchIconFa\">\r\n              //   <span\r\n              //     className=\" iconfont icon-sousuo searchIcon\"\r\n              //     style={{ fontSize: px(25) }}\r\n              //   />\r\n              // </div>\r\n              <>\r\n              </>\r\n            )}\r\n\r\n            {visible ? (\r\n              // true ?\r\n              <div className=\"searchPet\" style={{ top: px(35), width: px(400) }}>\r\n                <div\r\n                  className=\"triangle\"\r\n                  style={{\r\n                    borderLeft: `${px(20)}px solid transparent`,\r\n                    borderRight: `${px(20)}px solid transparent`,\r\n                    borderBottom: `${px(25)}px solid #fff`,\r\n                    marginLeft: px(30),\r\n                    zIndex: 999,\r\n                  }}\r\n                />\r\n\r\n                <div className=\"searchPetBody\">{searchPetBody()}</div>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <div className=\"heardCenter\">\r\n            <div\r\n              className=\"message\"\r\n            >\r\n\r\n              {\r\n                onWalkIn()\r\n              }\r\n            </div>\r\n            <div\r\n              className=\"help\"\r\n              style={{ margin: `0 ${px(25)}px` }}\r\n              onClick={() => history.push(\"/menuOptions/help\")}\r\n            >\r\n              {\r\n                onHelp()\r\n              }\r\n            </div>\r\n          </div>\r\n          {systemType !== 'mac' && <>\r\n            <div className=\"min_close\" style={{ paddingRight: px(15) }}>\r\n              <div\r\n                className=\"min_icon\"\r\n                onClick={MINCOLOSE.minClock}\r\n                style={{ backgroundColor: minbgc, height: px(47), width: px(47) }}\r\n                onMouseEnter={MINCOLOSE.minMouseEnter}\r\n                onMouseLeave={MINCOLOSE.minMouseLeave}\r\n              >\r\n                <img src={rMin} alt=\"\" style={{ width: px(20) }} />\r\n              </div>\r\n              <div\r\n                className=\"min_icon\"\r\n                onClick={MINCOLOSE.closeClock}\r\n                style={{ backgroundColor: closebgc, height: px(47), width: px(47) }}\r\n                onMouseEnter={MINCOLOSE.closeMouseEnter}\r\n                onMouseLeave={MINCOLOSE.closeMouseLeave}\r\n              >\r\n                <img src={rClose} alt=\"\" style={{ width: px(20) }} />\r\n              </div>\r\n            </div>\r\n          </>}\r\n\r\n        </div>\r\n\r\n        {modalvisible && modal()}\r\n        {deviceModel && devices()}\r\n\r\n        <MyModal\r\n          visible={modalVis}\r\n          element={\r\n            <div\r\n              className=\"tip\"\r\n              style={{ width: px(420), height: px(480), borderRadius: px(20) }}\r\n            >\r\n              <div\r\n                className=\"close\"\r\n                style={{ height: px(60) }}\r\n                onClick={() => setModalVis(false)}\r\n              >\r\n                <div className=\"flex\" style={{ height: px(60), width: px(60) }}>\r\n                  <img src={close} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n              </div>\r\n              <div className=\"text\">\r\n                <h1 style={{ fontSize: px(36), marginTop: px(30) }}>\r\n                  {\" \"}\r\n                  {isNotFound ? \"Pet not found!\" : \"Pet found!\"}\r\n                </h1>\r\n              </div>\r\n              <div className=\"flex\" style={{ margin: `${px(20)}px 0` }}>\r\n                {isNotFound ? (\r\n                  <img src={redclose} width=\"50px\" />\r\n                ) : (\r\n                  <img src={jinggao} width=\"50px\" />\r\n                )}\r\n              </div>\r\n              <div\r\n                className=\"textbody\"\r\n                style={{ marginTop: px(30), color: \"#000\" }}\r\n              >\r\n                {isNotFound ? (\r\n                  <p style={{ fontSize: px(22) }}>\r\n                    {\" \"}\r\n                    This pet is not on your database\r\n                  </p>\r\n                ) : (\r\n                  <p style={{ fontSize: px(22) }}>\r\n                    Pet Identified but does not <br /> belong to your\r\n                    organization.\r\n                  </p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex\" style={{ marginTop: px(30), width: \"100%\" }}>\r\n                <div\r\n                  className=\"btn flex\"\r\n                  style={{ height: px(40) }}\r\n                  onClick={() => {\r\n                    setModalVis(false);\r\n                    cencleClick();\r\n                  }}\r\n                >\r\n                  <p>OK</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nHeard.propTypes = {\r\n  onReturn: PropTypes.func,\r\n  onSearch: PropTypes.func,\r\n\r\n  blueSearch: PropTypes.bool,\r\n};\r\n// let userHistory = useHistory()\r\nHeard.defaultProps = {\r\n  onSearch: () => { },\r\n  onReturn: () => { },\r\n\r\n  blueSearch: false,\r\n};\r\n\r\nexport default connect(\r\n  state => ({\r\n    menuNum: state.userReduce.menuNum,\r\n    petListArr: state.petReduce.petListArr,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    systemType: state.systemReduce.systemType,\r\n    activeIndex: state.systemReduce.activeIndex\r\n  }),\r\n  { setMenuNum, setSelectHardwareType, petDetailInfoFun, setMenuActive }\r\n)(Heard)\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",["873","874"],"\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx",["875","876","877","878","879"],"/**\r\n *\r\n * 获取屏幕分辨率宽高\r\n * let width = parseInt(window.screen.width)\r\n * let height = parseInt(window.screen.height)\r\n *\r\n * 获取应用窗口大小\r\n * document.documentElement.clientHeight\r\n * document.documentElement.clientWidth\r\n */\r\n//\r\n\r\n//\r\n\r\nconst devWidth = 1920;\r\nconst devHeight = 1040;\r\n\r\nlet size = window.screen\r\n// console.log('-------------------------分辨率的大小-----------------', size);\r\nlet width = parseInt(window.screen.availWidth);\r\nlet height = parseInt(window.screen.availHeight);\r\nif (width < height) {\r\n  let a = width;\r\n  width = height;\r\n  height = a;\r\n}\r\n\r\nexport const px = (val) => {\r\n  return val\r\n};\r\n\r\nexport const mTop = (val) => {\r\n  return val\r\n};\r\n\r\nexport const fs = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n};\r\nexport const pX = (val) => {\r\n  let windowWidth = document.documentElement.clientWidth;\r\n  // console.log('px', window.screen,)\r\n  return parseInt((windowWidth / 650) * val);\r\n};\r\nexport const MTop = (val) => {\r\n  return val\r\n};\r\n\r\nlet windowssize = {\r\n  width: 0,\r\n  height: 0,\r\n};\r\n\r\nexport const win = () => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n  return {\r\n    width: 1920,\r\n    height: 1080,\r\n  };\r\n};\r\n\r\nlet timer = null;\r\nexport const timerFun = () => {\r\n\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js",["880","881"],"/**\r\n * @file new.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/new`\r\n\r\n\r\n/**\r\n * @dec 添加预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const petall_subscribe = (params) => {\r\n    return postJson(`${baseURL}/petall/subscribe`, params)\r\n}\r\n\r\n/**\r\n * @dec 管理员添加医生\r\n * @param {string} userId 管理员id\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const admin_users = (userId, params) => {\r\n    return patch(`${baseURL}/admin/users/${userId}`, params)\r\n}\r\n\r\n\r\n/**\r\n * @dec 获取预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const pet_subscribe_page = (params) => {\r\n    return postJson(`${baseURL}/pet/subscribe/page`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js",["882"],"/**\r\n * @file mellarecord.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/mellarecord 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/mellarecord`\r\n\r\n\r\n/**\r\n * @dec 增加硬件记录并更新ota硬件版本\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const saveRecord = (params) => {\r\n    return postJson(`${baseURL}/saveRecord`, params)\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getInfoOfLatestDevice = (hardWareType) => {\r\n    return get(`${baseURL}/getInfoOfLatestDevice?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",["883"],"export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx",["884"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\n\nimport _ from 'lodash';\n\nimport './index.less';\nimport { selectBreedBySpeciesId } from '../../api';\n\nconst SelectPetBreed = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel }) => {\n\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [breedList, setBreedList] = useState([]);//所有宠物品种\n  const [searchValue, setSearchValue] = useState();//搜索框的值\n  const [selePetBreedValue, setSelePetBreedValue] = useState();//选择的宠物品种\n  const [loading, setLoading] = useState(false);//加载\n\n  //获取所有宠物品种\n  const getAllPetBreed = () => {\n    let data = {\n      speciesId: null,//null是获取所有宠物品种不分猫和狗\n    }\n    setLoading(true);\n\n    selectBreedBySpeciesId(data)\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          setBreedList(res.petlist);\n        } else {\n          message.error('Failed to obtain pet breed')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    onSelect(selePetBreedValue);\n    setIsModalVisible(visible);\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入内容\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { });\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPetBreed();\n    return (() => { });\n  }, []);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  return (\n    <>\n      <Modal\n        title=\"Choose Breed\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetBreedModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <PhoneBook\n                listDate={breedList}\n                confirmSelectBreed={value}\n                selectFun={(val) => {\n                  setSelePetBreedValue(val);\n                }}\n                searchText={searchValue}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                >\n                  Select\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPetBreed;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",["885","886"],"\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js",["887","888","889","890","891","892"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js",["893"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/workplace 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/workplace`\r\n\r\n\r\n/**\r\n * \r\n * @dec 根据组织id获取工作场所\r\n * @param {string} organizationId \r\n * @returns \r\n */\r\nexport const listAllWorkplaceByOrganizationId = (organizationId) => {\r\n    return get(`${baseURL}/listAllWorkplaceByOrganizationId/${organizationId}`, '')\r\n}\r\n\r\n\r\n/**\r\n * @dec 添加工作场所\r\n * @param {str} userId 用户id\r\n * @param {*} params \r\n * @returns \r\n */\r\n\r\nexport const addWorkplace = (userId, params) => {\r\n    return postJson(`${baseURL}/addWorkplace${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx",["894","895","896"],"import React, { useState, useEffect } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport biggieHome from './../../assets/img/searchType-biggieHome.png';\nimport biggiePro from './../../assets/img/searchType-biggiePro.png';\nimport mellaHome from './../../assets/img/searchType-home.png';\nimport mellaPro from './../../assets/img/searchType-mellaPro.png';\nimport maeBowl from './../../assets/img/searchType-maeBowl.png';\nimport other from './../../assets/img/searchType-other.png';\nimport possum from './../../assets/img/searchType-possum.png';\nimport rfid from './../../assets/img/searchType-rfid.png';\nimport redclose from '../../assets/img/redclose.png';\nimport tabby from '../../assets/img/searchType-tabby.png';\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, MTop } from '../../utils/px';\n\nimport { connect } from 'react-redux'\nimport {\n  setReceiveBroadcastHardwareInfoFun,\n  setHardwareList,\n  changeselectHardwareIndex,\n  setSelectHardwareType,\n  selectHardwareList\n} from '../../store/actions';\nimport PropTypes from 'prop-types';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n  //是否有底座设备\n  const [noUSB, setNoUSB] = useState(false)\n  //设备列表\n  const [devicesList, setDevicesList] = useState([])\n  //选择的设备\n  const [selectDevice, setSelectDevice] = useState(null)\n  //重命名\n  const [reName, setReName] = useState('')\n  //房间号\n  const [examRoom, setExamRoom] = useState('')\n  //已经保存过的设备的macid\n  const [saveDeviceMac, setSaveDeviceMac] = useState([])\n  //顶部文本\n  const [topText, setTopText] = useState(' Pair Device')\n\n\n\n  const addDevice = () => {\n    //从redux拿到列表中的所有硬件设备 hardwareList\n    console.log('hardwareList', hardwareList);\n    //拿到硬件的macid 类型 名称 房间号\n    console.log('selectDevice', selectDevice);\n    let sameFlog = hardwareList.some((item, index) => {\n      return item.type === selectDevice.deviceType\n    })\n    let hardwareArr = [].concat(hardwareList)\n    let { deviceType, macId, name } = selectDevice\n    let newDevice = {\n      name: reName || name,\n      mac: macId,\n      deviceType,\n      examRoom: examRoom || '',\n    }\n    console.log('newDevice', newDevice);\n    if (sameFlog) {\n      //相同就代表有这个硬件类型,可以直接去push\n\n      for (let i = 0; i < hardwareArr.length; i++) {\n        if (hardwareArr[i].type === selectDevice.deviceType) {\n          hardwareArr[i].devices.push(newDevice)\n          break\n        }\n      }\n\n    } else {\n      //没有就要新建一个硬件类型\n      let json = {\n        type: selectDevice.deviceType,\n        devices: [newDevice]\n      }\n      hardwareArr.push(json)\n    }\n    setReName('')\n    setExamRoom('')\n    setHardwareList(hardwareArr)\n\n    return newDevice\n\n\n  }\n\n  const body = () => {\n\n    if (selectDevice) {\n      return <div className=\"addDevice1 flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n            {`this ${selectDevice.name} device?`}</div>\n\n          <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n            {`SN: ${selectDevice.macId}`}</div>\n\n\n          <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                setReName(value.target.value)\n\n              }}\n              placeholder={`${selectDevice.name} Device Name`}\n            />\n          </div>\n          <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={examRoom}\n              onChange={(value) => {\n                setExamRoom(value.target.value)\n\n              }}\n              placeholder={`Exam Room Name`}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write<br /> the name\n            on the sticker provided so it is easy\n            to select<br /> your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              addDevice()\n              setSelectDevice(null)\n              setSelectHardwareType('add')\n\n            }}\n          >\n            <p className='btnText'>Add Another Device</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let newDevice = addDevice()\n              setSelectHardwareType(selectDevice.deviceType)\n\n\n              electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n              setSelectDevice(null)\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          let options = (val) => {\n            let arr = []\n            if (val === 1) {\n              arr = [mellaPro, mellaHome, biggiePro, rfid]\n            } else {\n              arr = [possum, maeBowl, tabby, other,]\n            }\n            let option = arr.map((item, index) => {\n              let imgWidth = px(100)\n              // imgWidth = index === 2 ? px(65) : imgWidth\n              return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                <div className=\"searchType-item\" key={index} >\n                  <img src={item} alt=\"\" width={imgWidth} />\n                </div>\n              </li>)\n            })\n            return (\n              <ul>\n                {option}\n              </ul>\n            )\n          }\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n            <div className=\"addDeviceContent\">\n              <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                  <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                </div>\n              </div>\n              <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n              </div>\n              <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                <div className=\"btnText\">\n                  Scan For Devices\n                </div>\n              </div>\n              <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                Or\n              </div>\n              <div className=\"select\">\n                Select device type to\n              </div>\n              <div className=\"add\">\n                add manually\n              </div>\n\n              <div className=\"item\">\n                {options(1)}\n                {options(2)}\n              </div>\n            </div>\n\n            {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n\n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  setSelectDevice(item)\n\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList ' >\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n  //初始化\n  useEffect(() => {\n    setNoUSB(false)\n    setDevicesList([])\n    setSelectDevice(null)\n    setReName('')\n    setSaveDeviceMac([])\n    setTopText(' Pair Device')\n    //组件渲染完毕后要先清空广播的硬件信息\n    setReceiveBroadcastHardwareInfoFun({\n      deviceType: '',\n      macId: '',\n      name: ''\n    })\n  }, [])\n  useEffect(() => {\n\n    if (hardwareList.length > 0) {\n      let saveDeviceMac = []\n      for (let i = 0; i < hardwareList.length; i++) {\n        const element = hardwareList[i];\n        for (let j = 0; j < element.devices.length; j++) {\n          const device = element.devices[j];\n          saveDeviceMac.push(device.mac)\n        }\n      }\n      setSaveDeviceMac(saveDeviceMac)\n\n    }\n  }, [hardwareList])\n  useEffect(() => {\n    if (!selectDevice) {\n      setTopText(' Pair Device')\n    } else {\n      setTopText('Device Connected')\n    }\n\n  }, [selectDevice])\n  useEffect(() => {\n    setNoUSB(!isHaveUsbDevice)\n  }, [isHaveUsbDevice])\n  useEffect(() => {\n    let sameFlog = devicesList.some((device, index) => {\n      return device.macId === receiveBroadcastHardwareInfo.macId\n    })\n    if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n      return\n    }\n    console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n    let deviceArr = [].concat(devicesList)\n    deviceArr.push(receiveBroadcastHardwareInfo)\n    setDevicesList(deviceArr)\n\n\n\n  }, [receiveBroadcastHardwareInfo])\n\n  return (\n    <div className='addDevice' style={{ height: bodyHeight }}>\n      <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\n        {topText}\n      </div>\n\n      {body()}\n    </div >\n  )\n}\n\n\nAddDevice.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    hardwareReducer: state.hardwareReduce,\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n    hardwareList: state.hardwareReduce.hardwareList,\n  }),\n  { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx",["897","898"],"import React, { useEffect, useState } from \"react\";\r\nimport { message } from 'antd'\r\n\r\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\r\nimport moveMellaPro from \"./../../assets/img/moveMellaPro.png\";\r\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\r\nimport moveBiggie from \"./../../assets/img/moveBiggie.png\";\r\nimport tape from \"./../../assets/img/hardList-tape.png\";\r\nimport moveTape from \"./../../assets/img/moveTape.png\";\r\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\r\nimport moveOtterEQ from \"./../../assets/img/moveOtterEQ.png\";\r\nimport mabel from \"./../../assets/img/hardList-mabel.png\";\r\nimport moveMabel from \"./../../assets/img/moveMabel.png\";\r\n\r\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\r\nimport smalls from './../../assets/img/smalls.png'\r\nimport cameraIcon from './../../assets/img/cameraIcon.png'\r\nimport add from \"./../../assets/img/hardList-add.png\";\r\n\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { px } from \"../../utils/px\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport { useHover } from 'ahooks';\r\n\r\nlet storage = window.localStorage;\r\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\r\nconst HardWareTypeUI = ({\r\n  bodyHeight,\r\n  devicesTypeList,\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  selectHardwareType,\r\n  setMenuNum,\r\n  menuNum,\r\n}) => {\r\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\r\n  const [onMouseEnterIndex, setOnMouseEnterIndex] = useState(-1);//移入硬件图片的下标\r\n\r\n  let options = devicesTypeList.map((item, index) => {\r\n    let img = null;\r\n    switch (item.type) {\r\n      case \"mellaPro\":\r\n        img = onMouseEnterIndex === 0 ? moveMellaPro : mellaPro;\r\n        break;\r\n      case \"biggie\":\r\n        img = onMouseEnterIndex === 1 ? moveBiggie : biggie;\r\n        break;\r\n      case \"tape\":\r\n        img = onMouseEnterIndex === 2 ? moveTape : tape;\r\n        break;\r\n      case \"otterEQ\":\r\n        img = onMouseEnterIndex === 3 ? moveOtterEQ : otterEQ;\r\n        break;\r\n      case \"mabel\":\r\n        img = onMouseEnterIndex === 4 ? moveMabel : mabel;\r\n        break;\r\n      case \"rfid\":\r\n        img = rfid;\r\n        break;\r\n      case \"camera\":\r\n        img = onMouseEnterIndex === 5 ? cameraIcon : smalls\r\n        break\r\n      case \"add\":\r\n        img = add;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    let borderStyle = ``;\r\n    if (item.type === selectHardwareType && menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n      borderStyle = ` 2px solid #3B3A3A`;\r\n    }\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        style={{ margin: `${px(10)}px 0` }}\r\n        onClick={() => {\r\n          if (menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType(item.type);\r\n            if (item.type === \"add\") {\r\n            } else {\r\n              let devicesInfo = {\r\n                deviceType: item.type,\r\n                examRoom: null,\r\n                mac: null,\r\n                name: null\r\n              }\r\n              if (item.devices.length > 0) {\r\n                devicesInfo = electronStore.get(\r\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\r\n                ) || {};\r\n                let isSame = item.devices.some((item) => item.mac === devicesInfo.mac)\r\n                if (!isSame) {\r\n                  devicesInfo = item.devices[0];\r\n                  electronStore.set(\r\n                    `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\r\n                    devicesInfo\r\n                  );\r\n                }\r\n              }\r\n              selectHardwareInfoFun(devicesInfo);\r\n            }\r\n          }\r\n          else {\r\n            message.destroy();\r\n            message.warning('Please exit clinical trial mode first');\r\n          }\r\n        }}\r\n        onMouseEnter={() => {\r\n          setOnMouseEnterIndex(index);\r\n        }}\r\n        onMouseLeave={() => {\r\n          setOnMouseEnterIndex(-1);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"item\"\r\n          style={{ border: borderStyle }}\r\n          id={`item${index}`}\r\n        >\r\n          <img src={img} alt=\"\" width={px(55)} />\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    let Index = null;\r\n    for (let i = 0; i < devicesTypeList.length; i++) {\r\n      const element = devicesTypeList[i];\r\n      if (element.type === selectHardwareType) {\r\n        Index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (Index === null) {\r\n      return;\r\n    }\r\n\r\n    let hard = devicesTypeList[Index];\r\n    if (hard && hard.type !== \"add\") {\r\n      let devicesInfo = electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\r\n      );\r\n      if (!devicesInfo) {\r\n        if (hard.devices.length > 0) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        } else if (hard.devices.length === 0) {\r\n          devicesInfo = {\r\n            deviceType: hard.type,\r\n            examRoom: null,\r\n            mac: null,\r\n            name: null,\r\n          };\r\n        }\r\n      } else {\r\n        let sameFlag = false;\r\n        for (let i = 0; i < hard.devices.length; i++) {\r\n          const element = hard.devices[i];\r\n          if (\r\n            element.mac === devicesInfo.mac &&\r\n            element.name === devicesInfo.name\r\n          ) {\r\n            sameFlag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!sameFlag) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.delete(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n      }\r\n      selectHardwareInfoFun(devicesInfo);\r\n    }\r\n  }, [devicesTypeList]);\r\n\r\n  return (\r\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\r\n      <ul>{options}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nHardWareTypeUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array,\r\n};\r\n//默认值\r\nHardWareTypeUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: [],\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    menuNum: state.userReduce.menuNum,\r\n  }),\r\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\r\n)(HardWareTypeUI);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx",["899","900"],"import React, { useState, useEffect } from 'react'\n\nimport xia from './../../assets/img/xia.png'\n\nimport { px } from '../../utils/px'\n\nimport PetsUI from './PetsUI.jsx'\nimport HardListModal from './HardListModal'\n\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { selectHardwareModalShowFun, selectHardwareInfoFun } from './../../store/actions';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun, hardwareInfo, selectHardwareInfoFun }) => {\n  //定义选择的硬件详细信息\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\n  useEffect(() => {\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\n\n    for (let i = 0; i < hardwareList.length; i++) {\n      const element = hardwareList[i];\n\n      if (element.type === selectHardwareType) {\n        let list = element.devices || []\n\n        //获取被选中的硬件的详细信息\n        let selectHardwareInfo = hardwareInfo || {}\n        if (selectHardwareInfo.mac === null && list[0]) {\n          let selectHardwareInfo = list[0]\n          selectHardwareInfoFun(selectHardwareInfo)\n\n          setSelectHardwareDetail(selectHardwareInfo)\n        } else {\n          let sameFlag = false\n          for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\n              setSelectHardwareDetail(selectHardwareInfo)\n              sameFlag = true\n              break\n            }\n          }\n          if (!sameFlag) {\n            let selectHardwareInfo = list[0] || {}\n            setSelectHardwareDetail(selectHardwareInfo)\n          }\n        }\n        break\n      }\n    }\n  }, [selectHardwareType, hardwareList,])\n\n\n  // console.log('=====----===', selectHardwareDetail);\n\n  return (\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\n      <div className='deviceAndPets-title'\n        onClick={(e) => {\n          //react阻止冒泡\n          e.stopPropagation()\n          selectHardwareModalShowFun(!selectHardwareModalShow)\n        }}\n      >\n        <div className=\"devicesName\" style={{ fontSize: px(30) }}>\n          {selectHardwareDetail.name || \"No Device\"}\n        </div>\n        <div className=\"imgBox\" style={{ marginLeft: px(7)}}>\n          <img src={xia} alt=\"\" width={px(25)} />\n        </div>\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\n          setSelectHardwareDetail(item)\n        }} />}\n      </div>\n      <PetsUI\n        bodyHeight={bodyHeight}\n      />\n    </div >\n  )\n}\n\n\nHardAndPetsUI.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nHardAndPetsUI.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n\n  }),\n  {\n    selectHardwareModalShowFun,\n    selectHardwareInfoFun\n  }\n)(HardAndPetsUI)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx",["901","902"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MotionCamera = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  //为了清除应没有底座跳出的弹框\n  useEffect(() => {\n    message.destroy();\n  }, [])\n\n  return (\n    <Layout id=\"motionCamera\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column'}}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMotionCamera.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MotionCamera);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx",["903","904","905","906","907"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Checkbox, Layout, List, Avatar, Modal, Form, Input } from \"antd\";\n\nimport catFood from '../../assets/img/catFood.png';\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\nimport electronStore from \"../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst EnrolledPlan = ({ petMessage, hardwareMessage, bodyHeight,setSelectHardwareType }) => {\n  const { Content, Header } = Layout;\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [nextType, setNextType] = useState('selectIllness');//切换当前页面的组件。selectIllness：选择疾病；createPlan:创建计划；planInfo:计划详情。\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const options = [\n    {\n      label: 'Hepatic Disease',\n      value: '1',\n    },\n    {\n      label: 'Renal Disease',\n      value: '2',\n    },\n    {\n      label: 'Osteoarthritis / Mobility / Joint',\n      value: '3',\n    },\n  ];\n  const data = [\n    {\n      title: 'Title 1',\n    },\n    {\n      title: 'Title 2',\n    },\n    {\n      title: 'Title 3',\n    },\n    {\n      title: 'Title 4',\n    },\n  ];\n  //表单提交\n  const onFinish = (values) => {\n    console.log(values);\n    setSelectHardwareType(\"mabel\");\n  };\n  //选择的疾病\n  const onChange = (checkedValues) => {\n    console.log('checked = ', checkedValues);\n  };\n  //切换头部文字\n  const topTitle = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return 'Prescription Diet Matrix';\n      case 'createPlan':\n        return 'Prescription Diet Recommendations'\n      case 'planInfo':\n        return 'Feeding Plan'\n      default:\n        break;\n    }\n  }\n  //切换中间组件\n  const middleContent = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <div className=\"selectIllness\">\n            <Checkbox.Group\n              options={options}\n              onChange={onChange}\n              className=\"checkboxGroup\"\n            />\n          </div>\n        );\n      case 'createPlan':\n        return (\n          <div className=\"recommendMessageBox\">\n            <div className=\"leftBox\">\n              <img src={catFood} alt=\"\" />\n            </div>\n            <div className=\"rightBox\">\n              <p>Hill's Science Diet Adult 11+ Chicken Recipe cat food</p>\n              <p>Fluffy's Feeding Plan:</p>\n              <div className=\"descriptionTitle\">\n                <p>\n                  Based on Fluffy's BCS of 7, age 14, and osteoarthritis, we recommend feeding her 1 1/8 cups of kibble per day.\n                </p>\n                <p>443 Calories per cup</p>\n              </div>\n            </div>\n          </div>\n        )\n      case 'planInfo':\n        return (\n          <div className=\"planList\">\n            <List\n              dataSource={data}\n              renderItem={(item) => (\n                <div className=\"listBox\">\n                  <List.Item className=\"listItem\">\n                    <div className=\"item\">\n                      <div className=\"top\">\n                        <p>{item.title}</p>\n                        <p>123</p>\n                      </div>\n                      <div className=\"bottom\">\n                        <p>Weight</p>\n                        <p>465</p>\n                      </div>\n                    </div>\n                  </List.Item>\n                </div>\n              )}\n            />\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n  //切换底部按钮\n  const bottomBtn = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              electronStore.set(`${petMessage.petId}-planType`, true);\n              setNextType('createPlan');\n            }}\n          >\n            Set Recommendations\n          </Button>\n        );\n      case 'createPlan':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => { setNextType('planInfo') }}\n          >\n            Create Feeding Plan\n          </Button>\n        );\n      case 'planInfo':\n        return (\n          <>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => { }}\n              className=\"itemBtn\"\n            >\n              Email\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { }}\n            >\n              Print\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { setIsModalVisible(true) }}\n            >\n              Send to Mabel\n            </Button>\n          </>\n        );\n      default:\n        break;\n    }\n  }\n  //展示宠物照片\n  const shoePetPicture = () => {\n    if (_.isEmpty(petMessage?.url)) {\n      switch (petPicture(petMessage?.petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return petMessage?.url\n    }\n  }\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(petMessage?.firstName) && _.isEmpty(petMessage?.lastName)) {\n      return \"unknown\";\n    } else {\n      return petMessage?.firstName + \" \" + petMessage?.lastName;\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Layout className=\"planContentBox\" style={{ height: bodyHeight }}>\n      <div className=\"heardTitleBox\">\n        <p>{topTitle()}</p>\n      </div>\n      <div className=\"petMessageBox\">\n        <div className=\"left\">\n          <Avatar src={shoePetPicture()} size={64} />\n          <div className=\"petMsg\">\n            <p>{petMessage.petName ? petMessage?.petName : 'unknown'}</p>\n            <p>{ownerName()}</p>\n          </div>\n        </div>\n        <div className=\"right\">\n          <p>{calculateAge(petMessage?.birthday) === 'unknown' ? 'unknown' : `${calculateAge(petMessage?.birthday)} Years Old`}</p>\n          <p>{petMessage?.weight} lbs</p>\n          <p>{petMessage?.gender === 0 ? 'Male' : 'Female'}</p>\n          <p>{petMessage?.breedName}</p>\n        </div>\n      </div>\n      <div className=\"middleBox\">\n        {middleContent()}\n      </div>\n      <div className=\"btnBox\">\n        {bottomBtn()}\n      </div>\n      <Modal\n        title=\"Send Feeding Plan to Mabel\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        destroyOnClose\n        width={300}\n        className=\"planModal\"\n      >\n        <div className=\"modalContentBox\">\n          <div className=\"description\">\n            <p>Enter pet parent's email associated with their Mella Health App.</p>\n          </div>\n          <div className=\"formBox\">\n            <Form form={form} onFinish={onFinish} preserve={false}>\n              <Form.Item\n                name=\"mellaId\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" shape=\"round\" block htmlType=\"submit\">\n                  Send\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </Modal>\n    </Layout>\n  );\n};\n\nEnrolledPlan.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType,\n  }\n)(EnrolledPlan);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx",["908","909","910"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MabelPage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  return (\n    <Layout className=\"mabelPageBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMabelPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MabelPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",["911","912","913","914","915","916","917","918","919"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Menu,\r\n  Popover,\r\n  Button,\r\n  Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\nimport './phoneBook.less'\r\nimport { px } from '../px';\r\n/**\r\n *\r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns\r\n */\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n  const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n  const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n  const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n  const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n  const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n  const _phoneList = () => {\r\n    let option = phoneList.map((item, index) => {\r\n      let data = item.data\r\n      let option1 = data.map((value, index1) => {\r\n        return (\r\n          <li\r\n            key={`option1${index1}`}\r\n            onClick={() => {\r\n              setSelectBreed(value.petSpeciesBreedId)\r\n              selectFun(value)\r\n            }}>\r\n            {value.name}\r\n            {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n          </li>\r\n        )\r\n      })\r\n      return (\r\n        <div className=\"phoneBody\">\r\n          <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n          <ul>\r\n            {option1}\r\n          </ul>\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const _letterList = () => {\r\n\r\n    let option = letterList.map((item, index) => {\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n\r\n          style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n          <a\r\n\r\n            onClick={() => {\r\n              litterClick(item)\r\n            }}\r\n          >{item}</a>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <ul className=\"letterUL\">\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const litterClick = (anchorName) => {\r\n    // console.log(anchorName);\r\n    if (anchorName) {\r\n      // 找到锚点\r\n      let anchorElement = document.getElementById(anchorName);\r\n      // console.log(anchorElement);\r\n      // 如果对应id的锚点存在，就跳转到锚点\r\n      if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n    }\r\n    // e.preventDefault();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (confirmSelectBreed !== -1) {\r\n      setSelectBreed(confirmSelectBreed)\r\n    }\r\n  }, [confirmSelectBreed]);\r\n\r\n  useEffect(() => {\r\n    let test = []\r\n    listDate.forEach((item, index) => {\r\n      let data = {\r\n        name: item.breedName,\r\n        hidden: false,\r\n        petSpeciesBreedId: item.petSpeciesBreedId\r\n      }\r\n      test.push(data)\r\n    })\r\n    //获取联系人列表\r\n    let list = test;\r\n    let sections = [], letterArr = [];\r\n    // 右侧字母栏数据处理\r\n    list.forEach((item, index) => {\r\n      letterArr.push(pinyin(item.name.substring(0, 1), {\r\n        style: pinyin.STYLE_FIRST_LETTER,\r\n      })[0][0].toUpperCase());\r\n\r\n      letterArr = [...new Set(letterArr)].sort();\r\n    });\r\n    // 分组数据处理\r\n    letterArr.forEach((item, index) => {\r\n      sections.push({\r\n        title: item,\r\n        data: []\r\n      })\r\n    });\r\n    list.forEach(item => {\r\n      let listItem = item;\r\n      sections.forEach(item => {\r\n        let first = listItem.name.substring(0, 1);\r\n        let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n        if (item.title == test) {\r\n          item.data.push({\r\n            firstName: first,\r\n            name: listItem.name,\r\n            hidden: listItem.hidden,\r\n            petSpeciesBreedId: listItem.petSpeciesBreedId\r\n          });\r\n        }\r\n      })\r\n    });\r\n    setPhoneList(sections)\r\n    setPhoneListCopy(sections)\r\n    setLetterList(letterArr)\r\n    setLetterListCopy(letterArr)\r\n  }, [listDate]);\r\n\r\n  useEffect(() => {\r\n    if (letterListCopy.length > 0) {\r\n      let allData = phoneListCopy\r\n      let newArr = []\r\n      let arr = []\r\n      if (searchText.length > 0) {\r\n        allData.map((item, i) => {\r\n          item.data.forEach((data, index) => {\r\n            let dataName = data.name ? data.name.toUpperCase() : ''\r\n            let keyData = searchText ? searchText.toUpperCase() : ''\r\n            if (dataName.search(keyData) !== -1) {\r\n              newArr.push(data)\r\n            }\r\n          })\r\n          if (newArr.length != 0) {\r\n            let oneGreep = {\r\n              title: item.title,\r\n              data: newArr\r\n            }\r\n            arr.push(oneGreep)\r\n          }\r\n          newArr = []\r\n        })\r\n        let letterArr = []\r\n        arr.forEach((item, index) => {\r\n          letterArr.push(item.title)\r\n        })\r\n        setPhoneList(arr)\r\n        setLetterList(letterArr)\r\n      } else {\r\n        setPhoneList(phoneListCopy)\r\n        setLetterList(letterListCopy)\r\n      }\r\n    }\r\n  }, [searchText]);\r\n\r\n  return (\r\n    <div id=\"phoneBook\">\r\n      <div className=\"phone\">\r\n        {_phoneList()}\r\n      </div>\r\n      <div className=\"litter\">\r\n        {_letterList()}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n  listDate: PropTypes.array,\r\n  selectFun: PropTypes.func,\r\n  searchText: PropTypes.string,\r\n  confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n  listDate: [],\r\n  selectFun: () => { },\r\n  searchText: '',\r\n  confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js",["920","921","922"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nconst baseURL = 'https://api2.vetspire.com';\r\n// const baseURL = '/v1';\r\n\r\n\r\n\r\n\r\nexport const graphql = (params, token) => {\r\n    return postJson(`${baseURL}/graphql`, params, { Authorization: token })\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx",["923","924","925","926","927"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport SwabPetEar from \"./components/swabPetEar\";\nimport ExperimentalPage from \"./components/experimental\";\nimport TimerPage from \"./components/timer\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport SelectPatient from '../../assets/img/SelectPatient.png'\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setQsmConnectStatus,\n  setQsmPart\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\nimport Result from \"./components/result\";\n\n\n// const ipcRenderer = window.require(\"electron\").ipcRenderer;\nlet ipcRenderer = window.electron.ipcRenderer;\nconst SDK = require(\"qsm-otter-sdk\");\n\nconst { Content, Header } = Layout;\nconst OtterEQPage = ({ petMessage, hardwareMessage, bodyHeight, setQsmConnectStatus, setQsmPart }) => {\n  const [cutPageType, setCutPageType] = useState('linkPage');\n  const [qsmConStatus, setQsmConStatus] = useState('linkPage');\n  const [qsmPortName, setQsmPortName] = useState('')\n  const changePage = () => {\n    if (qsmConStatus === 'connected')\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        // return <Result cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n          return <SwabPetEar cutPageType={getCutPageType} />;\n        case \"experimentalPage\":\n          return <ExperimentalPage cutPageType={getCutPageType} />;\n        case \"timerPage\":\n          return <TimerPage cutPageType={getCutPageType} />;\n        case \"result\":\n          return <Result cutPageType={getCutPageType} />;\n        default:\n          break;\n      } else {\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n        case \"experimentalPage\":\n        case \"timerPage\":\n          return <LinkEquipment cutPageType={getCutPageType} isNext={true} />;\n        default:\n          break;\n      }\n    }\n  };\n\n  const getCutPageType = (type) => {\n    console.log('type: ', type);\n    if (!_.isEmpty(type)) {\n      setCutPageType(type);\n    }\n  }\n\n  //查看是否有QSM设备插入\n  const readQSMConnectionStatus = async () => {\n    try {\n      const pairInstrument = await SDK.pairInstrument()\n      console.log(\"🚀 ~ file: index.jsx ~ line 69 ~ readQSMConnectionStatus ~ pairInstrument\", pairInstrument)\n      setQsmPart(pairInstrument)\n    } catch (error) {\n      console.log('error', error);\n    }\n\n    setTimeout(async () => {\n      const connectionStatus = await SDK.readConnectionStatus()\n\n      let a = typeof (connectionStatus)\n      console.log('插入情况', connectionStatus, a);\n      if (typeof (connectionStatus) === 'boolean') {\n        let status = connectionStatus ? 'connected' : 'disconnected'\n        setQsmConnectStatus(status)\n        setQsmConStatus(status)\n      }\n    }, 500);\n  }\n\n  /**\n   * @dec 从main.js传过来的usb插拔事件\n   * @param {*} e\n   * @param {*} data 值为true 代表插入设备，false为拔掉设备\n   */\n  const usbDetect = async (e, data) => {\n    // if (data) { // readQSMConnectionStatus()\n    //   readQSMConnectionStatus()\n    // } else {\n    //   const connectionStatus = await SDK.readConnectionStatus()\n\n    //   let a = typeof (connectionStatus)\n    //   console.log('插入情况', connectionStatus, a);\n    //   if (typeof (connectionStatus) === 'boolean') {\n    //     let status = connectionStatus ? 'connected' : 'disconnected'\n    //     setQsmConnectStatus(status)setQsmPart\n    //     setQsmConStatus(status)\n    //   }\n    // }\n\n  }\n  let deviceStatus = null\n  const conectstatus = async () => {\n    deviceStatus = await SDK.readConnectionStatus()\n    console.log('connect', deviceStatus)\n    if (typeof (deviceStatus) === 'boolean') {\n      let status = deviceStatus ? 'connected' : 'disconnected'\n      setQsmConnectStatus(status)\n      setQsmConStatus(status)\n    }\n  }\n  const getQsmPortName = (e, data) => {\n    setQsmPart(data)\n    setQsmPortName(data)\n  }\n\n  useEffect(() => {\n    setCutPageType('linkPage');\n    return (() => { })\n\n  }, [petMessage.petId])\n\n  useEffect(() => {\n    console.log('连接监听');\n    navigator.serial.addEventListener(\"connect\", conectstatus);\n    navigator.serial.addEventListener(\"disconnect\", conectstatus);\n    return () => {\n      navigator.serial.removeEventListener(\"connect\", conectstatus);\n      navigator.serial.removeEventListener(\"disconnect\", conectstatus);\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   ipcRenderer.on('qsmPortName', getQsmPortName);\n  //   return () => { ipcRenderer.removeListener(\"qsmPortName\", getQsmPortName); };\n\n  // }, [])\n\n\n\n\n  //监听usb的插拔\n  useEffect(() => {\n    ipcRenderer.on(\"usbDetect\", usbDetect);\n    return () => {\n      ipcRenderer.removeListener(\"usbDetect\", usbDetect);\n    }\n  }, [])\n  //初始化获取设备是否插入\n  useEffect(() => {\n    readQSMConnectionStatus()\n    message.destroy();\n  }, [])\n\n\n  return (\n    <Layout className=\"ottterEQBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className=\"otterEQcontent\">\n          {changePage()}\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nOtterEQPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmConnectStatus,\n    setQsmPart\n  }\n)(OtterEQPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",["928","929","930","931","932","933"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Avatar,\n  Button,\n  Card,\n  Space,\n  message,\n  Input,\n  Modal,\n} from \"antd\";\nimport {\n  CheckCircleFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport {\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Meta } = Card;\nconst { confirm } = Modal;\nconst CombineScales = ({\n  petMessage,\n  hardwareMessage,\n  userMessage,\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n}) => {\n  let { hardwareList } = hardwareMessage;\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\n  const [confirmType, setConfirmType] = useState(false); //确认选择\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\n\n  //点击卡片选择效果\n  const onClick = (index, data) => {\n    console.log(data);\n    let changeClassName = document.getElementById(index).classList;\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\n    let cardClassNametype = document\n      .getElementById(index)\n      .classList.contains(\"cardBoxClick\");\n    cardClassNametype\n      ? changeClassName.remove(\"cardBoxClick\")\n      : changeClassName.add(\"cardBoxClick\");\n    cardClassNametype\n      ? (iconClassName.style.display = \"none\")\n      : (iconClassName.style.display = \"\");\n    let oldData = checkHardwareList;\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\n  };\n  //确认选择两个体重秤\n  const onChangeScales = () => {\n    if (_.size(checkHardwareList) > 1) {\n      setConfirmType(true);\n    } else {\n      message.error({\n        content: \"Please choose more than two scales\",\n        style: {\n          marginTop: \"20vh\",\n        },\n      });\n    }\n  };\n  //保存用户更改的名字\n  const saveChangeName = (e) => {\n    setSaveName(e.target.value);\n  };\n\n  //跳转准备测量\n  const startMeasuring = () => {\n    confirm({\n      title: \"Are you sure to incorporate the body fat scale?\",\n      icon: <ExclamationCircleOutlined />,\n      style: {\n        marginTop: \"20vh\",\n      },\n      width: 480,\n      onOk() {\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\n        let newData = {\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\n          mac: mac,\n          deviceType: \"biggie\",\n          examRoom: \"\",\n        };\n        let newHardwareList = hardwareList;\n        newHardwareList[1].devices.push({ ...newData });\n        selectHardwareList(newHardwareList);\n        selectHardwareInfoFun(newData);\n        setMenuNum(\"1\");\n      },\n    });\n  };\n\n  useEffect(() => {\n    let newData = [];\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\n      if (item.mac.indexOf(\"/\") === -1) {\n        newData.push(item);\n      }\n    });\n    setBiggieList(newData);\n    return () => { };\n  }, []);\n\n  return (\n    <>\n      <Layout className=\"mergePage\">\n        <Header className=\"mergeHeaderBox\">\n          <span className=\"headerTitle\">\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\n          </span>\n        </Header>\n        <Content className=\"combineContentBox\">\n          <div>\n            <div className=\"tipTitleBox\">\n              {!confirmType ? (\n                <span>\n                  Select the scales you'd\n                  <br />\n                  like to combine\n                </span>\n              ) : (\n                <span>\n                  These two scales are now combined.\n                  <br />\n                  Please give this combination a name\n                </span>\n              )}\n            </div>\n            {confirmType ? (\n              <div className=\"asOneCardBox\">\n                <Space>\n                  {_.map(checkHardwareList, (item, index) => {\n                    return (\n                      <Card className=\"asOneCard\">\n                        <Meta\n                          avatar={<Avatar src={scaleImage} size={53} />}\n                          description={\n                            <div style={{ display: \"grid\" }}>\n                              <span>Device Name:{item.name}</span>\n                              <span>\n                                {item.deviceType === \"biggie\"\n                                  ? \"Biggie Pro Scale\"\n                                  : \"Biggie Home Scale\"}\n                              </span>\n                              <span>SN:{item.mac}</span>\n                            </div>\n                          }\n                        />\n                      </Card>\n                    );\n                  })}\n                </Space>\n                <div className=\"acOneImageBox\">\n                  <img src={combinedscales} />\n                </div>\n              </div>\n            ) : (\n              <div className=\"selectScalesBox\">\n                <div>\n                  {_.map(biggieList, (item, index) => {\n                    return (\n                      <Card\n                        className=\"cardBox\"\n                        hoverable\n                        onClick={() => onClick(`${index}`, item)}\n                        id={`${index}`}\n                        key={index}\n                      >\n                        <div className=\"cardBodyBox\">\n                          <Meta\n                            avatar={<Avatar src={scaleImage} size={53} />}\n                            description={\n                              <div style={{ display: \"grid\" }}>\n                                <span>Device Name:{item.name}</span>\n                                <span>\n                                  {item.deviceType === \"biggie\"\n                                    ? \"Biggie Pro Scale\"\n                                    : \"Biggie Home Scale\"}\n                                </span>\n                                <span>SN:{item.mac}</span>\n                              </div>\n                            }\n                          />\n                          <CheckCircleFilled\n                            id={`${\"icon\" + index}`}\n                            style={{\n                              color: \"#5cbbe0\",\n                              fontSize: \"20px\",\n                              display: \"none\",\n                            }}\n                          />\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            {confirmType ? (\n              <>\n                <div className=\"inputBox\">\n                  <Input\n                    placeholder=\"Combined Scale Name\"\n                    className=\"inputName\"\n                    maxLength={25}\n                    onChange={saveChangeName}\n                  />\n                </div>\n                <div className=\"scalesBtnBox\">\n                  <Button\n                    type=\"primary\"\n                    className=\"scalesBtn\"\n                    shape=\"round\"\n                    onClick={() => startMeasuring()}\n                  >\n                    Save & Start Measuring\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <Space className=\"scalesBtnBox\">\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => setMenuNum(\"AddDevice\")}\n                >\n                  Add New Scale\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => onChangeScales()}\n                >\n                  Combine Scales\n                </Button>\n              </Space>\n            )}\n          </div>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    userMessage: state.userReduce,\n  }),\n  {\n    setMenuNum,\n    selectHardwareInfoFun,\n    selectHardwareList,\n  }\n)(CombineScales);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",["934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968"],"import React, { useEffect, useRef, useState, useCallback } from \"react\";\r\nimport { Layout, message, Input, Modal, Table, Popconfirm, Select, Radio } from \"antd\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\n\r\nimport edit from \"./../../assets/images/edit.png\";\r\nimport del from \"./../../assets/images/del.png\";\r\nimport start from \"./../../assets/img/start.png\";\r\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\r\nimport placement_er from \"./../../assets/images/placement_er.png\";\r\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\r\nimport thrDot from \"./../../assets/img/thrDot.png\"\r\nimport completeMeasure from \"./../../assets/img/completMeasure.png\"\r\nimport measuringDots from \"./../../assets/img/measuringDots.png\"\r\nimport TempReady from \"./../../assets/img/TempReady.png\"\r\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\r\nimport { px, mTop } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport UnassignModal from './../../components/UnassignModal/UnassignModal';\r\nimport SelectPet from \"../../components/selectPetModal\";\r\nimport AddPetModal from \"../../components/addPetModal\";\r\nimport {\r\n  addAllClinical,\r\n  deletePetExamByExamId,\r\n  getClinicalDataByExamId,\r\n  getPetExamAndClinicalByPetId,\r\n  getPetExamByDoctorId,\r\n  updatePetExam,\r\n  updatePetInfo,\r\n  addAndSavePetExam,\r\n  addDeskPet,\r\n} from \"../../api\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { setTest } from \"../../store/actions\";\r\nimport ReactECharts from \"echarts-for-react\";\r\nimport propTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport Draggable from \"react-draggable\";\r\nimport _ from \"lodash\";\r\n\r\nimport \"./index.less\";\r\n\r\n\r\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\r\nlet storage = window.localStorage;\r\n\r\nlet mellaMeasureNumCopy = 0;\r\n\r\n//定义echarts的数据个数\r\nconst { Option } = Select;\r\nlet saveHistoryTime = null;\r\nconst ClinicalStudy = ({\r\n  bodyHeight,\r\n  mellaConnectStatus,\r\n  mellaMeasureValue,\r\n  mellaMeasureNum,\r\n  petDetailInfo,\r\n  setTest,\r\n  biggieBodyWeight,\r\n  biggieUnit,\r\n}) => {\r\n  const [units, setUnits] = useState(\"\");\r\n  const [temperature, setTemp] = useState(0);\r\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\r\n  const [echarsData, setEcharsData] = useState({\r\n    Eci: [],\r\n    wen0: [],\r\n    wen1: [],\r\n  });\r\n  const [echarsData1, setEcharsData1] = useState({\r\n    Eci: [],\r\n    wen0: [],\r\n    wen1: [],\r\n  });\r\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\r\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\r\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\r\n    useState(\"\");\r\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\r\n  const [furLength, setFurLength] = useState(\"\");\r\n  const [heartRate, setHeartRate] = useState(\"\");\r\n  const [bloodPressure, setBloodPressure] = useState(\"\");\r\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\r\n  const [notes, setNotes] = useState(\"\");\r\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\r\n  const [historyData, setHistoryData] = useState([]);//walk-in中未分配的数据\r\n  const [editRectal, setEditRectal] = useState(\"\");\r\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\r\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\r\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\r\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\r\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\r\n  const [editVisible, setEditVisible] = useState(false);\r\n  const [editId, setEditId] = useState(\"\");\r\n  const [editMemo, setEditMemo] = useState(\"\");\r\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\r\n  const [editFurLength, setEditFurLength] = useState(\"\");\r\n  const [tipSpin, setTipSpin] = useState(false);\r\n  const [tip, setTip] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [disabled, setDisabled] = useState(true);\r\n  const [bounds, setBounds] = useState({\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  });\r\n  const [memo, setMemo] = useState(\"\");\r\n  const [windowWidth, setWindowWidth] = useState(px(600));\r\n  const [WeightValue, setWeightValue] = useState('');\r\n  const echartsElement = useRef(null);\r\n  const clinicalRef = useRef(null);\r\n  const [seleceEmergencies, setSeleceEmergencies] = useState({});\r\n  const [lastWorkplaceId, setLastLastWorkplaceId] = useState('');\r\n  const [selectPetVisible, setSelectPetVisible] = useState(false);//选择宠物弹窗显隐\r\n  const [addPetVisible, setAddPetVisible] = useState(false);//添加新宠物弹窗显隐\r\n  const [selectPetModalLoading, setSelectPetModalLoading] = useState(false);//分配宠物后调用接口加载\r\n  const [addPetModalLoading, setAddPetModalLoading] = useState(false);//添加新宠物调用接口加载\r\n  const [addPetId, setAddPetId] = useState('');//添加宠物成功后返回的宠物id\r\n  const [pageSize, setPageSize] = useState(10); // 每页10条\r\n  const [total, setTotal] = useState(0);//历史数据的总条数\r\n  const [currPage, setCurrPage] = useState(1);//页码\r\n  const [excludeType, setExcludeType] = useState(0);//0不排除，1排除，默认0\r\n\r\n  //分辨率变化\r\n  const chartsBox = useCallback((node) => {\r\n    if (node !== null && echartsElement.current) {\r\n      setTimeout(() => {\r\n        if (echartsElement.current) {\r\n          echartsElement.current.getEchartsInstance().resize({ height: px(380) });\r\n        }\r\n      }, 1000)\r\n    }\r\n  }, [window.screen.availWidth]);\r\n  //窗口宽高变化\r\n  const resize = () => {\r\n    if (clinicalRef.current && clinicalRef.current.offsetWidth) {\r\n      setWindowWidth(clinicalRef.current.offsetWidth);\r\n    }\r\n  };\r\n  //临床测试数据保存\r\n  const addClinical = () => {\r\n    let emerData = [];\r\n    let { Eci, wen0, wen1 } = echarsData;\r\n    for (let i = 0; i < wen0.length; i++) {\r\n      const element = wen0[i];\r\n      let str = {\r\n        data0: element,\r\n        data1: wen1[i],\r\n      };\r\n      emerData.push(str);\r\n    }\r\n    saveHistoryTime && clearTimeout(saveHistoryTime);\r\n    saveHistoryTime = setTimeout(() => {\r\n      let BCS =\r\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\r\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\r\n      let respireatoryR =\r\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\r\n\r\n      let roomT =\r\n        roomTemperature === \"\"\r\n          ? null\r\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\r\n\r\n      let referenceT =\r\n        referenceRectalTemperature === \"\"\r\n          ? null\r\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\r\n\r\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\r\n\r\n      let petVitalId = 1;\r\n\r\n      let datas = {\r\n        temperature: parseFloat(temperature), //测量温度\r\n        roomTemperature: roomT, //室温\r\n        bodyConditionScore: BCS, //身体状况评分\r\n        heartRate: hrartR, //心率\r\n        respiratoryRate: respireatoryR, //呼吸率\r\n        referenceRectalTemperature: referenceT, //参考腹部温度\r\n        furLength: furL, //毛发长度\r\n        bloodPressure: bloodPressure, //血压\r\n        memo: notes,\r\n        petVitalTypeId: petVitalId,\r\n        clinicalDataEntityList: emerData,\r\n        anusTemperature: referenceT,\r\n        exclude: excludeType,\r\n      };\r\n      if (storage.roleId === `1`) {\r\n        datas.userId = storage.userId;\r\n      } else {\r\n        datas.doctorId = storage.userId;\r\n        datas.userId = storage.userId;\r\n      }\r\n      let ubdateWeight = units === \"℉\" ? (parseFloat(WeightValue / 2)).toFixed(2) : parseFloat(WeightValue).toFixed(2);\r\n      let updatePetInfoData = {\r\n        weight: ubdateWeight\r\n      }\r\n      if (storage.lastOrganization) {\r\n        updatePetInfoData.organizationId = storage.lastOrganization\r\n      }\r\n\r\n      let { petId, isWalkIn } = petDetailInfo;\r\n      if (petId && !isWalkIn) {\r\n        datas.petId = petId;\r\n        addAllClinical(datas)\r\n          .then((res) => {\r\n            if (res.flag === true) {\r\n              message.success(\"Uploaded successfully\");\r\n              _getHistory11(petDetailInfo.petId);\r\n            } else {\r\n              message.error(\"upload failed\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            message.error(\"upload failed\");\r\n          });\r\n      } else if (isWalkIn) {\r\n        addAllClinical(datas)\r\n          .then((res) => {\r\n            if (res.flag === true) {\r\n              message.success(\"Uploaded successfully\");\r\n              _getEmergencyHistory(1);\r\n            } else {\r\n              message.error(\"upload failed\");\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            message.error(err);\r\n          });\r\n      }\r\n      if (WeightValue !== '' && !isWalkIn) {\r\n        updatePetInfo(petId, updatePetInfoData)\r\n          .then((res) => {\r\n            if (res.flag === true) {\r\n\r\n            } else {\r\n              message.error('Failed to update pet weight');\r\n            }\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n          })\r\n      }\r\n    }, 500);\r\n  };\r\n  //获取宠物历史记录\r\n  const _getHistory11 = (petId) => {\r\n    let historys = [];\r\n    setLoading(true);\r\n    getPetExamAndClinicalByPetId(petId)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.flag === true) {\r\n          let datas = res.data;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            let data = datas[i];\r\n\r\n            let {\r\n              petId,\r\n              examId,\r\n              clinicalDatagroupId,\r\n              userId,\r\n              petVitalTypeId,\r\n              temperature,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              memo,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              createTime,\r\n              clinicalDataEntity,\r\n              modifiedTime,\r\n            } = data;\r\n\r\n            if (!clinicalDatagroupId) {\r\n              continue;\r\n            }\r\n            let Tem = temperature;\r\n            if (clinicalDataEntity) {\r\n              Tem = Tem || clinicalDataEntity.data0;\r\n            }\r\n            Tem = Tem ? Tem : 0;\r\n\r\n            let time = null;\r\n            if (\r\n              createTime &&\r\n              `${createTime}` !== \"\" &&\r\n              `${createTime}` !== `undefined`\r\n            ) {\r\n              time = createTime;\r\n            } else {\r\n              time = modifiedTime;\r\n            }\r\n            let json = {\r\n              time,\r\n              Temp: Tem,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n            };\r\n            historys.push(json);\r\n          }\r\n          let historyData = [];\r\n          for (let i = 0; i < historys.length; i++) {\r\n            let history = historys[i];\r\n            let {\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n              examId,\r\n            } = history;\r\n            // console.log('--------', history.placement);\r\n            let placement = history.placement;\r\n            if (placement === null || placement === \"\") {\r\n              placement = 1;\r\n            }\r\n            let str = {\r\n              date: moment(history.time).format(\"MMM DD\"),\r\n              time: moment(history.time).format(\"hh:mm A\"),\r\n              temp: history.Temp,\r\n              placement,\r\n              note: history.note,\r\n              historyId: history.historyId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n              key: examId,\r\n            };\r\n            historyData.push(str);\r\n          }\r\n          // this.setState({\r\n          //     historyData\r\n          // })\r\n          setHistoryData(historyData);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  };\r\n  //获取walk-in下未分配宠物的临床测试记录\r\n  const _getEmergencyHistory = (currPage) => {\r\n    let historys = [];\r\n    setLoading(true);\r\n    let data = {\r\n      pageSize: pageSize,\r\n      currPage: currPage,\r\n      deviceType: 0,\r\n    }\r\n    getPetExamByDoctorId(storage.userId, data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.flag === true) {\r\n          setTotal(res.data.totalCount);\r\n          let datas = res.data.list;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            let {\r\n              petId,\r\n              examId,\r\n              userId,\r\n              petVitalTypeId,\r\n              temperature,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              memo,\r\n              clinicalDatagroupId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              createTime,\r\n              clinicalDataEntity,\r\n            } = datas[i];\r\n            let Tem = temperature;\r\n            try {\r\n              Tem = temperature || clinicalDataEntity.data0;\r\n            } catch (error) {\r\n              console.log(\"抛出的异常\", error);\r\n            }\r\n            let str = {\r\n              clinicalDatagroupId,\r\n              createTime,\r\n              date: moment(createTime).format(\"MMM DD\"),\r\n              time: moment(createTime).format(\"hh:mm A\"),\r\n              temp: parseInt(Tem * 10) / 10,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n            };\r\n            historys.push(str);\r\n          }\r\n          let newArr = [];\r\n          if (currPage === 1) {\r\n            newArr = historys;\r\n          } else {\r\n            let oldArr = historyData;\r\n            let arr = historys;\r\n            newArr = [...oldArr, ...arr];\r\n          }\r\n          setHistoryData(_.orderBy(newArr, 'createTime', 'desc'));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        console.log(err);\r\n      });\r\n  };\r\n  const getOption = () => {\r\n    let option = {};\r\n    try {\r\n      let min, max;\r\n      if (units === \"℃\") {\r\n        min = 25;\r\n        max = 45;\r\n      } else {\r\n        min = 75;\r\n        max = 115;\r\n      }\r\n      let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci)\r\n        ? echarsData\r\n        : echarsData1;\r\n      option = {\r\n        color: [\"#81b22f\"],\r\n        tooltip: {\r\n          /*返回需要的信息*/\r\n          trigger: \"axis\",\r\n          triggerOn: \"mousemove\",\r\n          enterable: true,\r\n          formatter: function (param) {\r\n            var value = param[0].value;\r\n            // console.log('---valuez值', value, units);\r\n            if (\r\n              (units === \"℉\" && parseInt(value) <= 32) ||\r\n              (units === \"℃\" && parseInt(value) == 0)\r\n            ) {\r\n              return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:--</div>`;\r\n            }\r\n            return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\r\n              1\r\n            )}${units}</div>`;\r\n          },\r\n        },\r\n        xAxis: {\r\n          name: \"SPL\",\r\n          nameLocation: \"end\",\r\n          nameTextStyle: {\r\n            align: \"left\",\r\n          },\r\n          type: \"category\",\r\n          data: Eci,\r\n          axisLine: {\r\n            lineStyle: {\r\n              // 设置x轴颜色\r\n              color: \"#A0A0A0\",\r\n              show: true,\r\n            },\r\n          },\r\n          // 设置X轴数据旋转倾斜\r\n          axisLabel: {\r\n            rotate: 0, // 旋转角度\r\n            interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\r\n          },\r\n        },\r\n        yAxis: {\r\n          name: \"temperature\",\r\n          type: \"value\",\r\n          min, // 设置y轴刻度的最小值\r\n          max, // 设置y轴刻度的最大值\r\n          splitNumber: 0, // 设置y轴刻度间隔个数\r\n          nameTextStyle: {\r\n            padding: [0, 0, 0, 8],\r\n            // backgroundColor: 'pink',\r\n            width: \"1200px\",\r\n            // fontSize: 20,\r\n            align: \"left\",\r\n          },\r\n\r\n          axisLine: {\r\n            lineStyle: {\r\n              // 设置x轴颜色\r\n              color: \"#A0A0A0\",\r\n              show: true,\r\n            },\r\n          },\r\n          splitLine: {\r\n            show: false,\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"模拟数据\",\r\n            type: \"line\",\r\n            showSymbol: false,\r\n            hoverAnimation: false,\r\n            // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\r\n            data: wen0,\r\n            smooth: 0.5,\r\n            symbol: \"none\",\r\n            // itemStyle: {\r\n            //     normal: {\r\n\r\n            //     }\r\n            // }\r\n            lineStyle: {\r\n              // 系列级个性化折线样式\r\n              width: 2,\r\n              type: \"solid\",\r\n              color: {\r\n                type: \"linear\",\r\n                x: 0,\r\n                y: 1,\r\n                x2: 0,\r\n                y2: 0,\r\n                colorStops: [\r\n                  {\r\n                    offset: 0.5,\r\n                    color: \"#47C2ED\", // 0% 处的颜色  蓝\r\n                  },\r\n                  {\r\n                    offset: 1,\r\n                    color: \"#78D35D\", // 50% 处的颜色  绿\r\n                  },\r\n                  // {\r\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\r\n                  // }\r\n                ],\r\n                globalCoord: false, // 缺省为 false\r\n              },\r\n            },\r\n          },\r\n        ],\r\n      };\r\n    } catch (error) { }\r\n\r\n    return option;\r\n  };\r\n  const getSwitch = (status, text) => {\r\n    switch (status) {\r\n      case 'disconnected':\r\n        return (\r\n          <span style={{ position: \"absolute\", left: '-20px', fontSize: px(32), fontWeight: \"bold\" }}>\r\n            {text}\r\n          </span>\r\n        )\r\n      case 'connected':\r\n        return (\r\n          <>\r\n            <img src={thrDot} alt=\"\" style={{ height: '20px', position: \"absolute\", bottom: \"140px\", right: '20px' }} />\r\n            <img src={TempReady} alt=\"\" style={{ height: '250px', position: \"absolute\", bottom: \"-140px\", right: 0 }} />\r\n          </>\r\n        )\r\n      case 'complete':\r\n        return (\r\n          <>\r\n            <span style={{ position: \"absolute\", bottom: '-140px', right: '30px', fontSize: px(32), fontWeight: \"bold\" }}>\r\n              {text}\r\n            </span>\r\n          </>\r\n        )\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  const _status = () => {\r\n    // let mellaConnectStatus = 'complete'\r\n    let text = \"\",\r\n      unit = \"\",\r\n      temColor = \"\";\r\n    // let Temp = 35;\r\n    let Temp = parseFloat(temperature);\r\n    if (mellaConnectStatus === \"disconnected\") {\r\n      if (!showHistoryEchart) {\r\n        Temp = \"\";\r\n        text = \"disconnected\";\r\n        temColor = \"#3B3A3A\";\r\n      } else {\r\n        text = \"disconnected\";\r\n        temColor = \"#3B3A3A\";\r\n      }\r\n    } else if (mellaConnectStatus === \"connected\") {\r\n      Temp = \"\";\r\n      text = \"connected\";\r\n      temColor = \"#3B3A3A\";\r\n    } else {\r\n      text = \"connected\";\r\n      temColor = \"#3B3A3A\";\r\n      if (Temp > 15) {\r\n        unit = units;\r\n        if (Temp > 39) {\r\n          text = \"High\";\r\n          temColor = \"#E1206D\";\r\n        } else if (Temp < 31) {\r\n          text = \"Low\";\r\n          temColor = \"#47C2ED\";\r\n        } else {\r\n          text = \"Normal\";\r\n          temColor = \"#78D35D\";\r\n        }\r\n      }\r\n    }\r\n    let temp = null;\r\n\r\n    if (`${Temp}` !== \"NaN\" && Temp) {\r\n      temp =\r\n        units === \"℉\" ? _.round((Temp * 1.8 + 32), 1) : Temp.toFixed(1);\r\n    }\r\n    let lowFlog = false;\r\n    if (unit === \"℃\") {\r\n      if (temp < 24.8) {\r\n        lowFlog = true;\r\n      }\r\n    } else {\r\n      if (temp < 76.6) {\r\n        lowFlog = true;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"Tem\"\r\n        style={{\r\n          color: temColor,\r\n          right: px(5),\r\n          bottom: mTop(200),\r\n          pointerEvents: \"none\",\r\n        }}\r\n      >\r\n        {mellaConnectStatus !== \"isMeasuring\" ? (\r\n          showHistoryEchart ? (\r\n            <>\r\n              <span style={{ fontSize: px(42), fontWeight: \"bold\" }}>\r\n                {temp}{\" \"}\r\n                <sup style={{ fontSize: px(26), fontWeight: \"bold\" }}>\r\n                  {units}\r\n                </sup>\r\n              </span>\r\n              <br />\r\n              <span style={{ fontSize: px(22) }}>{text}</span>\r\n\r\n              <span\r\n                style={{\r\n                  fontSize: px(32),\r\n                  color: \"#8a8a8a\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >{`History`}</span>\r\n            </>\r\n          ) : (\r\n            <>\r\n              {mellaConnectStatus === 'complete' &&\r\n                <>\r\n                  <img src={completeMeasure} alt=\"\" style={{ height: '30px', position: \"absolute\", bottom: \"140px\", right: '20px' }} />\r\n                </>\r\n              }\r\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\r\n                {temp < 3 && !temp ? null : temp}{\" \"}\r\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\r\n                  {unit}\r\n                </sup>\r\n              </span>\r\n              <br />\r\n              {getSwitch(mellaConnectStatus, text)}\r\n            </>\r\n          )\r\n        ) : lowFlog ? (\r\n          <>\r\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\r\n              {\"Low\"}\r\n            </span>\r\n            <br />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <img src={measuringDots} alt=\"\" style={{ height: '20px', position: \"absolute\", bottom: \"140px\", right: '50px' }} />\r\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\r\n              {temp}{\" \"}\r\n              <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>{unit}</sup>\r\n            </span>\r\n            <br />\r\n            <div style={{ position: \"absolute\", bottom: '-140px', right: '50px', color: '#3b3a3a', fontSize: '17px', fontFamily: 'VAG Rounded Std', fontWeight: 'bold' }}>Measuring...</div>\r\n          </>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  const handleChange = (index) => {\r\n    setFurLength(index);\r\n  };\r\n  //Exam Details内容\r\n  const _petCharacteristics = () => {\r\n    let placeholder = \"\";\r\n    switch (`${furLength}`) {\r\n      case \"1\":\r\n        placeholder = \"smooth\";\r\n        break;\r\n      case \"2\":\r\n        placeholder = \"short\";\r\n        break;\r\n      case \"3\":\r\n        placeholder = \"medium\";\r\n        break;\r\n      case \"4\":\r\n        placeholder = \"long\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return (\r\n      <div\r\n        className=\"petChaeacteristics\"\r\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\r\n      >\r\n        <div className=\"child\">\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Room Temperature: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              value={roomTemperature}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setRoomTemperature(str);\r\n              }}\r\n              suffix={'℉'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Reference Rectal Temperature: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              value={`${referenceRectalTemperature}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setReferenceRectalTemperature(str);\r\n              }}\r\n              suffix={'℉'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"child\">\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Body Condition Score: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              value={bodyConditionScore}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setBodyConditionScore(str);\r\n              }}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n          <div className=\"item\">\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Fur Length: </p>\r\n            <Select\r\n              className=\"inpSelect\"\r\n              placeholder\r\n              onChange={handleChange}\r\n              value={placeholder}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <div className=\"child\">\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Heart Rate: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              value={`${heartRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setHeartRate(str);\r\n              }}\r\n              suffix={'bpm'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Blood Pressure: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              value={bloodPressure}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setBloodPressure(str);\r\n              }}\r\n              suffix={'mm'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"child\">\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Respiratory Rate: </p>\r\n            <Input\r\n              className=\"inp\"\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              value={`${respiratoryRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setRespiratoryRate(str);\r\n              }}\r\n              suffix={'bpm'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n          <div\r\n            className=\"item\"\r\n          >\r\n            <p className=\"labelTitle\" style={{ width: '140px' }}>Weight:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={WeightValue}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                setWeightValue(str);\r\n              }}\r\n              suffix={units === '℉' ? 'lb' : 'kg'}\r\n              maxLength={8}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"child\">\r\n          <div className=\"item\">\r\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Exclude Data: </p>\r\n            <Radio.Group onChange={excludeChange} value={excludeType}>\r\n              <Radio value={1}>YES</Radio>\r\n              <Radio value={0}>NO</Radio>\r\n            </Radio.Group>\r\n          </div>\r\n          <div className=\"item\" style={{ width: '225px' }}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  //用户选择是否排除该条数据\r\n  const excludeChange = (e) => {\r\n    setExcludeType(e.target.value);\r\n  }\r\n  //历史数据\r\n  const _history = () => {\r\n    const _del = (key, record) => {\r\n      deletePetExamByExamId(key)\r\n        .then(\r\n          (res) => {\r\n            if (res.flag === true) {\r\n              const historyData1 = [...historyData];\r\n              setHistoryData(\r\n                historyData1.filter((item) => item.historyId !== key)\r\n              );\r\n            } else {\r\n              message.error('fail to delete!');\r\n            }\r\n          }\r\n        );\r\n    };\r\n    const _edit = (key, record) => {\r\n      let {\r\n        heartRate,\r\n        bloodPressure,\r\n        respiratoryRate,\r\n        referenceRectalTemperature,\r\n        roomTemperature,\r\n        bodyConditionScore,\r\n        furLength,\r\n        note,\r\n      } = record;\r\n      let editHeartRate =\r\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\r\n      let editBloodPressure =\r\n        bloodPressure !== null && bloodPressure !== undefined\r\n          ? bloodPressure\r\n          : \"\";\r\n      let editRespiratoryRate =\r\n        respiratoryRate !== null && respiratoryRate !== undefined\r\n          ? respiratoryRate\r\n          : \"\";\r\n      let editRectal =\r\n        referenceRectalTemperature !== null &&\r\n          referenceRectalTemperature !== undefined\r\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\r\n          : \"\";\r\n      let editRoomTemperature =\r\n        roomTemperature !== null && roomTemperature !== undefined\r\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\r\n          : \"\";\r\n      let editBodyConditionScore =\r\n        bodyConditionScore !== null && bodyConditionScore !== undefined\r\n          ? bodyConditionScore\r\n          : \"\";\r\n      let editFurLength = furLength;\r\n      let mome = note ? note : \"\";\r\n\r\n      console.log(\r\n        editRectal,\r\n        editRoomTemperature,\r\n        editHeartRate,\r\n        editBloodPressure,\r\n        editRespiratoryRate\r\n      );\r\n\r\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\r\n      setEditRectal(editRectal);\r\n      setEditRoomTemperature(editRoomTemperature);\r\n      setEditHeartRate(editHeartRate);\r\n      setEditBloodPressure(editBloodPressure);\r\n      setEditRespiratoryRate(editRespiratoryRate);\r\n      setEditVisible(true);\r\n      setEditId(key);\r\n      setEditMemo(record.note);\r\n      setEditBodyConditionScore(editBodyConditionScore);\r\n      setEditFurLength(editFurLength);\r\n      setMemo(mome);\r\n    };\r\n    const see = (id, record) => {\r\n      setEcharsData1({\r\n        Eci: [],\r\n        wen0: [],\r\n        wen1: [],\r\n      });\r\n      console.log(id, record);\r\n      setTip(\"data is loading\");\r\n      setTipSpin(true);\r\n      getClinicalDataByExamId(id)\r\n        .then((res) => {\r\n          setTip(\"\");\r\n          setTipSpin(false);\r\n          if (res.flag) {\r\n            let datas = res.data.clinicalDataEntityList;\r\n            if (datas) {\r\n              let echarsData = {\r\n                Eci: [],\r\n                wen0: [],\r\n                wen1: [],\r\n              };\r\n              let { wen0, wen1, Eci } = echarsData;\r\n              for (let i = 0; i < datas.length; i++) {\r\n                let { data0, data1 } = datas[i];\r\n\r\n                Eci.push(i);\r\n                if (units === \"℃\") {\r\n                  wen0.push(data0);\r\n                  wen1.push(data1);\r\n                } else {\r\n                  wen0.push(data0 * 1.8 + 32);\r\n                  wen1.push(data1 * 1.8 + 32);\r\n                }\r\n              }\r\n              let Temp = datas[datas.length - 1].data0 || \"\";\r\n              setEcharsData(echarsData);\r\n              setTemp(Temp);\r\n              setShowHistoryEchart(true);\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          setTip(\"\");\r\n          setTipSpin(false);\r\n          console.log(err);\r\n        });\r\n    };\r\n    const isflog = window.screen.height < 1000 ? true : false;\r\n    const columns = [\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        key: \"operation\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              className=\"activeImageBox\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: 'center'\r\n              }}\r\n            >\r\n              <img\r\n                src={start}\r\n                alt=\"\"\r\n                // style={{ width: px(25) }}\r\n                onClick={() => see(record.historyId, record)}\r\n                className=\"activeImages\"\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: `Temp(${units})`,\r\n        // title: `Temp(℉)`,\r\n        key: \"temp\",\r\n        dataIndex: \"temp\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          // console.log(text, record);\r\n\r\n          /**\r\n           * bag：温度数值前的圆圈的背景颜色\r\n           * tem：展示的温度\r\n           * endvalue:将从后台得到的数据全部转化成华氏度\r\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n           *\r\n           */\r\n\r\n          let bag = \"\",\r\n            tem = \"\";\r\n\r\n          let endValue =\r\n            text > 55 ? text : _.round((text * 1.8 + 32), 1);\r\n          let min = 100.4,\r\n            max = 102.56;\r\n\r\n          if (endValue > max) {\r\n            bag = \"#E1206D\";\r\n          } else if (endValue < min) {\r\n            bag = \"#98DA86\";\r\n          } else {\r\n            bag = \"#58BDE6\";\r\n          }\r\n\r\n          if (units === \"℃\") {\r\n            if (text) {\r\n              tem = `${text}${units}`;\r\n              if (text > 55) {\r\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\r\n              } else {\r\n                tem = `${text.toFixed(1)}${units}`;\r\n              }\r\n            }\r\n          } else {\r\n            if (text) {\r\n              if (text > 55) {\r\n                tem = `${text}${units}`;\r\n              } else {\r\n                tem = `${_.round((text * 1.8 + 32), 1)}${units}`;\r\n              }\r\n            }\r\n          }\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              {tem ? (\r\n                <div\r\n                  style={{\r\n                    width: \"8px\",\r\n                    height: \"8px\",\r\n                    borderRadius: \"8px\",\r\n                    backgroundColor: bag,\r\n                    marginRight: \"3px\",\r\n                  }}\r\n                />\r\n              ) : null}\r\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: `Rectal Temperature`,\r\n        key: \"referenceRectalTemperature\",\r\n        dataIndex: \"referenceRectalTemperature\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          // console.log('肛温的值：', text);\r\n          let num = text;\r\n          if (text !== null) {\r\n            num = _.round((text * 1.8 + 32), 1);\r\n          }\r\n\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              {text !== null && (\r\n                <p style={{ margin: 0, padding: 0 }}>\r\n                  {num} <span>{\"℉\"}</span>\r\n                </p>\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: \"Placement\",\r\n        dataIndex: \"placement\",\r\n        key: \"placement\",\r\n        align: \"center\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        render: (text, record, index) => {\r\n          switch (record.placement) {\r\n            case 1:\r\n              return (\r\n                //腋温\r\n                <div>\r\n                  <img src={palcement_ye} alt=\"\" />\r\n                </div>\r\n              );\r\n            case 3:\r\n              return (\r\n                //肛温\r\n                <div>\r\n                  <img src={placement_gang} alt=\"\" />\r\n                </div>\r\n              );\r\n            case 2:\r\n              return (\r\n                //肛温\r\n                <div>\r\n                  <img src={placement_gang} alt=\"\" />\r\n                </div>\r\n              );\r\n            case 4:\r\n              return (\r\n                //耳温\r\n                <div>\r\n                  <img src={placement_er} alt=\"\" />\r\n                </div>\r\n              );\r\n            default:\r\n              return null;\r\n          }\r\n        },\r\n      },\r\n      {\r\n        title: \"Note\",\r\n        dataIndex: \"note\",\r\n        key: \"note\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n        ellipsis: true,\r\n        align: \"center\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"100%\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        key: \"operation\",\r\n        className: `${isflog ? \"operation\" : \"\"}`,\r\n\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              className=\"activeImageBox\"\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: 'space-around'\r\n              }}\r\n            >\r\n\r\n              {petDetailInfo.isWalkIn ? (\r\n                <div\r\n                  className=\"assign\"\r\n                  style={{\r\n                    fontSize: px(14),\r\n                  }}\r\n                  onClick={() => {\r\n                    setSelectPetVisible(true);\r\n                    setSeleceEmergencies(record);\r\n                    setLastLastWorkplaceId(storage.lastOrganization);\r\n                  }}\r\n                >\r\n                  Assign\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  <img\r\n                    src={edit}\r\n                    alt=\"\"\r\n                    // style={{ width: px(25) }}\r\n                    onClick={() => _edit(record.historyId, record)}\r\n                    className=\"activeImages\"\r\n                  />\r\n                </>\r\n              )}\r\n\r\n              <Popconfirm\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => _del(record.historyId, record)}\r\n              >\r\n                <img src={del} alt=\"\" className=\"activeImages\" />\r\n              </Popconfirm>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n    let hisHe = mTop(200);\r\n    try {\r\n      let historyElement = document.querySelectorAll(\r\n        \"#clinicalMeasure11 .historyTable\"\r\n      );\r\n      hisHe = historyElement[0].clientHeight - mTop(100);\r\n    } catch (error) { }\r\n\r\n    return (\r\n      <div className=\"historyTableBox\" onScrollCapture={onScrollCapture}>\r\n        <Table\r\n          className=\"historyTable\"\r\n          columns={columns}\r\n          loading={loading}\r\n          dataSource={historyData}\r\n          rowKey={(columns) => columns.historyId}\r\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\r\n          pagination={false}\r\n          scroll={{\r\n            // y: hisHe,\r\n            y: '80%'\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  //滚动监听\r\n  const onScrollCapture = () => {\r\n    // 滚动的容器\r\n    let tableEleNodes = document.querySelectorAll(`.historyTable .ant-table-body`)[0];\r\n    //是否滚动到底部\r\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\r\n    if (bottomType) {\r\n      if (total === historyData.length) {\r\n        return false;\r\n      }\r\n      setCurrPage(currPage + 1);\r\n      _getEmergencyHistory(currPage + 1);\r\n    }\r\n  }\r\n  const _editModal = () => {\r\n    function save() {\r\n      let datas = {\r\n        memo: memo,\r\n        bodyConditionScore: parseInt(editBodyConditionScore),\r\n        furLength: parseInt(editFurLength),\r\n        heartRate: editHeartRate,\r\n        bloodPressure: editBloodPressure,\r\n        respiratoryRate: editRespiratoryRate,\r\n      };\r\n      if (editRoomTemperature) {\r\n        datas.roomTemperature = (\r\n          (parseFloat(editRoomTemperature) - 32) /\r\n          1.8\r\n        ).toFixed(2);\r\n      }\r\n      if (editRectal) {\r\n        datas.referenceRectalTemperature = (\r\n          (parseFloat(editRectal) - 32) /\r\n          1.8\r\n        ).toFixed(2);\r\n      }\r\n\r\n      setEditVisible(false);\r\n      setTip(\"Data is being modified\");\r\n      setTipSpin(true);\r\n\r\n\r\n      updatePetExam(editId, datas)\r\n        .then((res) => {\r\n          console.log(res);\r\n          setTipSpin(false);\r\n          setTip(\"\");\r\n          message.success(\"Data modified successfully\");\r\n\r\n          _getHistory11(petDetailInfo.petId);\r\n        })\r\n        .catch((err) => {\r\n          setTipSpin(false);\r\n          setTip(\"\");\r\n\r\n          message.success(\" Data modification failed\");\r\n\r\n          console.log(err);\r\n        });\r\n    }\r\n\r\n    let furLength = \"\";\r\n    if (editFurLength !== null && editFurLength !== undefined) {\r\n      switch (`${editFurLength}`) {\r\n        case \"1\":\r\n          furLength = \"smooth\";\r\n          break;\r\n        case \"2\":\r\n          furLength = \"short\";\r\n          break;\r\n        case \"3\":\r\n          furLength = \"medium\";\r\n          break;\r\n        case \"4\":\r\n          furLength = \"long\";\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"20px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                setDisabled(false);\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              setDisabled(true);\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Modification history information\r\n          </div>\r\n        }\r\n        open={editVisible}\r\n        onCancel={() => {\r\n          setEditVisible(false);\r\n        }}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n          // onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n        className=\"editModalBox\"\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editRoomTemperature}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n\r\n                setEditRoomTemperature(str);\r\n              }}\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editRectal}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                  .replace(/[^\\d^\\.]+/g, \"\")\r\n                  .replace(/\\.{2,}/g, \".\")\r\n                  .replace(\".\", \"$#$\")\r\n                  .replace(/\\./g, \"\")\r\n                  .replace(\"$#$\", \".\")\r\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\r\n                setEditRectal(str);\r\n              }}\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editBodyConditionScore}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\r\n\r\n                setEditBodyConditionScore(str);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"bodyType11\">\r\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\r\n            <Select\r\n              placeholder\r\n              onChange={(index) => {\r\n                console.log(index);\r\n                setEditFurLength(index);\r\n              }}\r\n              style={{\r\n                borderRadius: \"40px\",\r\n                height: \"33px\",\r\n                outline: \"none\",\r\n                borderWidth: 0,\r\n              }}\r\n              value={furLength}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editHeartRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\r\n                setEditHeartRate(str);\r\n              }}\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editBloodPressure}\r\n              onChange={(item) => {\r\n                setEditBloodPressure(item.target.value);\r\n              }}\r\n            />\r\n            <span>mm</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\r\n            <Input\r\n              style={{ border: \"none\", outline: \"medium\" }}\r\n              bordered={false}\r\n              value={editRespiratoryRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\r\n                setEditRespiratoryRate(str);\r\n              }}\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: \"80px\" }}>Notes</p>\r\n            <textarea\r\n              rows=\"2\"\r\n              cols=\"40\"\r\n              style={{ textIndent: \"10px\" }}\r\n              value={memo}\r\n              onChange={(val) => {\r\n                setMemo(val.target.value);\r\n              }}\r\n            ></textarea>\r\n          </div>\r\n\r\n          <div className=\"btn\" onClick={save}>\r\n            Save\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  };\r\n  const _foot = () => {\r\n    let lbgc = \"\",\r\n      rbgc = \"\";\r\n    if (isPetCharacteristics) {\r\n      lbgc = \"rgba(25,173,228,0.5)\";\r\n      rbgc = \"rgba(105,201,237,1)\";\r\n    } else {\r\n      lbgc = \"rgba(105,201,237,1)\";\r\n      rbgc = \"rgba(25,173,228,0.5)\";\r\n    }\r\n    return (\r\n      <div className=\"clinical_foot\">\r\n        <div className=\"top\">\r\n          <div\r\n            className=\"foot_l\"\r\n            style={{ backgroundColor: lbgc }}\r\n            onClick={() => setIsPetCharacteristics(true)}\r\n          >\r\n            Exam Details\r\n          </div>\r\n          <div\r\n            className=\"foot_l\"\r\n            style={{ backgroundColor: rbgc }}\r\n            onClick={() => setIsPetCharacteristics(false)}\r\n          >\r\n            History\r\n          </div>\r\n        </div>\r\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\r\n      </div>\r\n    );\r\n  };\r\n  //获取本地数据\r\n  const getLocalSetting = () => {\r\n    let settings = {\r\n      isHua: true,\r\n      is15: true,\r\n      self_tarting: false, //自启动\r\n      isBacklight: true,\r\n      isBeep: true,\r\n      backlightTimer: { length: 140, number: \"45\" },\r\n      autoOff: { length: 0, number: \"30\" },\r\n    };\r\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\r\n  };\r\n  //echars渲染\r\n  const echars = () => {\r\n    return (\r\n      <div id=\"myCharts\"\r\n        style={{ width: windowWidth }}\r\n        ref={chartsBox}\r\n      >\r\n        <ReactECharts\r\n          option={getOption()}\r\n          theme=\"Imooc\"\r\n          style={{ height: 'auto', width: '70%' }}\r\n          notMerge={true}\r\n          lazyUpdate={true}\r\n          ref={echartsElement}\r\n          className=\"charts\"\r\n        />\r\n        {_status()}\r\n      </div>\r\n    );\r\n  };\r\n  //分配宠物walk-in信息\r\n  const assignPet = (value) => {\r\n    setSelectPetModalLoading(true);\r\n    let parmes = {\r\n      petId: value.petId,\r\n      clinicalDatagroupId: seleceEmergencies.clinicalDatagroupId,\r\n\r\n    };\r\n    addAndSavePetExam(seleceEmergencies.historyId, parmes)\r\n      .then((res) => {\r\n        setSelectPetModalLoading(false);\r\n        if (res.flag === true) {\r\n          message.success(\"Assigned successfully\");\r\n          setSelectPetVisible(false);\r\n          setAddPetId('');\r\n          _getEmergencyHistory(1);\r\n        } else {\r\n          message.error(\"Assignment failed\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setSelectPetModalLoading(false);\r\n        message.error(\"Assignment failed\");\r\n      });\r\n  }\r\n  //添加宠物弹窗显示\r\n  const onAddPet = () => {\r\n    setAddPetId('');\r\n    setSelectPetVisible(false);\r\n    setAddPetVisible(true);\r\n  }\r\n  //添加宠物\r\n  const addNewPet = (value) => {\r\n    let data = {\r\n      ...value,\r\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\r\n    };\r\n    if (storage.lastWorkplaceId) {\r\n      data.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      data.organizationId = storage.lastOrganization\r\n    }\r\n    if (storage.userId) {\r\n      data.doctorId = storage.userId\r\n    }\r\n    setAddPetModalLoading(true);\r\n    addDeskPet(value.patientId, data)\r\n      .then((res) => {\r\n        setAddPetModalLoading(false);\r\n        if (res.flag === true) {\r\n          message.success('Adding pets successfully');\r\n          setAddPetId(res.data.petId);\r\n          setAddPetVisible(false);\r\n          setSelectPetVisible(true);\r\n        } else {\r\n          message.error('patientId already exists');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setAddPetModalLoading(false);\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (petDetailInfo.petId) {\r\n      setCurrPage(1);\r\n      setHistoryData([]);\r\n      setTotal(0);\r\n      _getHistory11(petDetailInfo.petId);\r\n    } else if (petDetailInfo.isWalkIn) {\r\n      setCurrPage(1);\r\n      setHistoryData([]);\r\n      setTotal(0);\r\n      _getEmergencyHistory(1);\r\n    }\r\n    return () => {\r\n      setCurrPage(1);\r\n      setHistoryData([]);\r\n      setTotal(0);\r\n    };\r\n  }, [petDetailInfo]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      saveHistoryTime && clearTimeout(saveHistoryTime);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //react监听屏幕窗口改变\r\n    window.addEventListener(\"resize\", resize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    mellaMeasureNumCopy = mellaMeasureNum;\r\n    // setTest(echartsElement);\r\n    return (() => { })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (mellaMeasureNumCopy === mellaMeasureNum) {\r\n      return;\r\n    }\r\n    mellaMeasureNumCopy = mellaMeasureNum;\r\n    // console.log('监听', mellaMeasureValue);\r\n    setTemp(mellaMeasureValue);\r\n    let { Eci, wen0, wen1 } = echarsData;\r\n    //两个数组合并成一个数组\r\n    let EciCopy = [...Eci];\r\n\r\n    let win0Copy = [...wen0];\r\n    let wen1Copy = [...wen1];\r\n    EciCopy.push(EciCopy.length + 1);\r\n    win0Copy.push(mellaMeasureValue);\r\n    wen1Copy.push(mellaMeasureValue);\r\n    let json = {\r\n      Eci: EciCopy,\r\n      wen0: win0Copy,\r\n      wen1: wen1Copy,\r\n    };\r\n    setEcharsData(json);\r\n    let Eci1 = echarsData1.Eci;\r\n    let wen01 = echarsData1.wen0;\r\n    let wen11 = echarsData1.wen1;\r\n    let EciCopy1 = [...Eci1];\r\n\r\n    let win0Copy1 = [...wen01];\r\n    let wen1Copy1 = [...wen11];\r\n    EciCopy1.push(EciCopy1.length + 1);\r\n    let num =\r\n      units === \"℃\"\r\n        ? mellaMeasureValue\r\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\r\n    win0Copy1.push(num);\r\n    wen1Copy1.push(num);\r\n    let json1 = {\r\n      Eci: EciCopy1,\r\n      wen0: win0Copy1,\r\n      wen1: wen1Copy1,\r\n    };\r\n    setEcharsData1(json1);\r\n    // const option = getOption();\r\n    // echartsElement.current.getEchartsInstance().setOption(option);\r\n    return () => { };\r\n  }, [mellaMeasureNum]);\r\n\r\n  useEffect(() => {\r\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\r\n      addClinical();\r\n    }\r\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\r\n      setEcharsData({\r\n        Eci: [],\r\n        wen0: [],\r\n        wen1: [],\r\n      });\r\n      setEcharsData1({\r\n        Eci: [],\r\n        wen0: [],\r\n        wen1: [],\r\n      });\r\n    }\r\n    if (mellaConnectStatus === \"isMeasuring\") {\r\n      setShowHistoryEchart(false);\r\n    }\r\n\r\n    setMellaStatus(mellaConnectStatus);\r\n    return () => { };\r\n  }, [mellaConnectStatus]);\r\n\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (!hardSet) {\r\n      getLocalSetting();\r\n    } else {\r\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\r\n    }\r\n    return () => { };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let bufferData = electronStore.get(`${petDetailInfo.petId}`);\r\n    // console.log('bufferData: ', bufferData);\r\n    setRoomTemperature(bufferData ? bufferData?.roomTemperature : '');\r\n    setReferenceRectalTemperature(bufferData ? bufferData?.referenceRectalTemperature : '');\r\n    setBodyConditionScore(bufferData ? bufferData?.bodyConditionScore : '');\r\n    setFurLength(bufferData ? bufferData?.furLength : '');\r\n    setHeartRate(bufferData ? bufferData?.heartRate : '');\r\n    setBloodPressure(bufferData ? bufferData?.bloodPressure : '');\r\n    setRespiratoryRate(bufferData ? bufferData?.respiratoryRate : '');\r\n    setWeightValue(bufferData ? bufferData?.WeightValue : '');\r\n    return (() => { })\r\n  }, [petDetailInfo.petId]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      let newData = {\r\n        roomTemperature: roomTemperature,\r\n        referenceRectalTemperature: referenceRectalTemperature,\r\n        bodyConditionScore: bodyConditionScore,\r\n        furLength: furLength,\r\n        heartRate: heartRate,\r\n        bloodPressure: bloodPressure,\r\n        respiratoryRate: respiratoryRate,\r\n        WeightValue: WeightValue\r\n      }\r\n      electronStore.set(`${petDetailInfo.petId}`, newData);\r\n    }\r\n  }, [roomTemperature, referenceRectalTemperature, bodyConditionScore, furLength, heartRate, bloodPressure, respiratoryRate, WeightValue, petDetailInfo.petId])\r\n\r\n  useEffect(() => {\r\n    if (biggieBodyWeight !== 0) {\r\n      if (units === '℉') {\r\n        setWeightValue((biggieBodyWeight * 2).toFixed(2));\r\n      } else {\r\n        setWeightValue(biggieBodyWeight.toFixed(2));\r\n      }\r\n    }\r\n    return (() => { })\r\n  }, [biggieBodyWeight])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        id=\"clinical\"\r\n        style={{\r\n          height: bodyHeight,\r\n          minWidth: px(200),\r\n          minHeight: bodyHeight,\r\n          overflow: \"hidden\",\r\n        }}\r\n        ref={clinicalRef}\r\n      >\r\n        <div\r\n          className=\"headerContentBox\"\r\n          style={{ background: \"#fff\", position: \"relative\" }}\r\n        >\r\n          <Layout style={{ height: \"100%\" }}>\r\n            <HeaderItem timeNum={60} />\r\n          </Layout>\r\n        </div>\r\n        <div\r\n          className=\"clinicalBody\"\r\n          style={{ width: \"100%\", height: bodyHeight - px(70) }}\r\n        >\r\n          <div className=\"clinical_top\">\r\n            <div className=\"r\">\r\n              {/*顶部按钮Re-sync Base*/}\r\n              {mellaConnectStatus === \"disconnected\" && (\r\n                <div className=\"bb1\">\r\n                  <div\r\n                    className=\"btn78\"\r\n                    onClick={() => {\r\n                      if (resyncDeviceIsClick === true) {\r\n                        resyncDeviceIsClick = false;\r\n                        let ipcRenderer = window.electron.ipcRenderer;\r\n                        ipcRenderer.send(\"qiehuan\");\r\n                        const time = setTimeout(() => {\r\n                          resyncDeviceIsClick = true;\r\n                          clearTimeout(time);\r\n                        }, 2500);\r\n                      }\r\n                    }}\r\n                  >\r\n                    Re-sync Base\r\n                  </div>\r\n                </div>\r\n              )}\r\n              {echars()}\r\n              {/* 底部宠物信息 */}\r\n              {_foot()}\r\n              {_editModal()}\r\n              {tipSpin && (\r\n                <div className=\"modal\">\r\n                  <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n                    <LoadingOutlined\r\n                      style={{\r\n                        fontSize: 30,\r\n                        color: \"#fff\",\r\n                        marginTop: mTop(-30),\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <p>data is loading...</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {\r\n          selectPetVisible && (\r\n            <SelectPet\r\n              visible={selectPetVisible}\r\n              destroyOnClose\r\n              width={400}\r\n              value={addPetId}\r\n              onCancel={() => {\r\n                setAddPetId('');\r\n                setSelectPetVisible(false);\r\n              }}\r\n              onSelect={(value) => {\r\n                assignPet(value);\r\n              }}\r\n              onAddPet={() => onAddPet()}\r\n              onLoading={selectPetModalLoading}\r\n            />\r\n          )\r\n        }\r\n        {\r\n          addPetVisible && (\r\n            <AddPetModal\r\n              visible={addPetVisible}\r\n              destroyOnClose\r\n              width={400}\r\n              onCancel={() => {\r\n                setAddPetVisible(false);\r\n                setSelectPetVisible(true);\r\n              }}\r\n              onConfirm={(value) => {\r\n                addNewPet(value);\r\n              }}\r\n              onLoading={addPetModalLoading}\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nClinicalStudy.propTypes = {\r\n  bodyHeight: propTypes.number,\r\n};\r\nClinicalStudy.defaultProps = {\r\n  bodyHeight: 0,\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\r\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\r\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\r\n    biggieBodyWeight: state.hardwareReduce.biggieBodyWeight,\r\n    biggieUnit: state.hardwareReduce.biggieUnit,\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n  }),\r\n  { setTest }\r\n)(ClinicalStudy);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["969","970","971","972","973"],"import React, { useEffect, useState } from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport Measurement from \"./components/measurement\";\r\nimport MeasuredData from \"./components/measuredData\";\r\nimport HeaderItem from \"./components/headerItem\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport SelectPatient from '../../assets/img/SelectPatient.png'\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../store/actions\";\r\nimport { px } from \"../../utils/px\";\r\nimport _ from \"lodash\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"./index.less\";\r\n\r\nconst TemperaturePage = ({ petMessage, hardwareMessage, bodyHeight }) => {\r\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\r\n  const [vibible, setVibible] = useState(false);\r\n\r\n  //测量温度中的页面变化\r\n  const changePage = () => {\r\n    // return <MeasuredData />\r\n    switch (mellaConnectStatus) {\r\n      case \"isMeasuring\":\r\n        return <Measurement />;\r\n      case \"complete\":\r\n        return <MeasuredData />;\r\n      case \"connected\":\r\n        return <LinkEquipment />;\r\n      case \"disconnected\":\r\n        // return <MeasuredData />;\r\n        return <LinkEquipment />;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <Layout className=\"homeBox\" style={{ height: bodyHeight }}>\r\n        <div className=\"headerContentBox\">\r\n          <div style={{ height: '100%' }}>\r\n            <HeaderItem />\r\n          </div>\r\n        </div>\r\n        {_.isEmpty(petMessage) ? (\r\n          <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\r\n            <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\r\n            <p className=\"chackPatientTitle\">Select a patient</p>\r\n          </div>\r\n        ) : (\r\n          changePage()\r\n        )}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nTemperaturePage.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array\r\n}\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(TemperaturePage);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx",["974","975","976","977","978","979"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",["980","981","982","983","984","985"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",["986"],"import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/LinkEquipment\";\nimport ScanPet from \"./components/scanPet\";\nimport CalculationResult from \"./components/calculationResult\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\n\nimport \"./index.less\";\n\nconst ScanPage = ({ petMessage, hardwareMessage, bodyHeight, }) => {\n  let { petId, isWalkIn } = petMessage;\n  const [calculationResultType, setCalculationResultType] = useState(false);//切换计算结果界面\n  const [measureData, setMeasureData] = useState({});//测量的值\n\n\n  return (\n    <>\n      <Layout className=\"scanHomeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {\n          calculationResultType ?\n            (\n              <CalculationResult type={setCalculationResultType} getMeasureData={measureData} />\n            ) :\n            (\n              _.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet type={setCalculationResultType} setMeasureData={setMeasureData} />\n            )\n        }\n\n      </Layout>\n    </>\n  );\n};\n\nScanPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(ScanPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",["987","988","989","990","991","992","993"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport { connect } from \"react-redux\";\nimport { setBiggieConnectStatusFun } from \"../../store/actions\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport HistoryTable from \"../../components/historyTable\";\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Biggie from \"./components/Biggie\";\n\nimport { px } from \"../../utils/px\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { ezyvetGetPetLatestExam, ezyvetUpdateWeight, vetspireGetPetLatestExam, vetspireUpdateWeight } from \"../../api\";\nimport { addClamantPetExam } from '../../api/mellaserver/exam'\n\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nconst { Header, Content, Footer, Sider } = Layout;\nlet storage = window.localStorage;\n\nconst BiggirPage = ({\n  hardwareReduce,\n  setBiggieConnectStatusFun,\n  petReduce,\n  bodyHeight,\n}) => {\n  let { petDetailInfo } = petReduce;\n  let { biggieBodyWeight } = hardwareReduce;\n  //定义体重值 体脂值 体重单位 连接状态\n  const [weight, setWeight] = useState(0);\n  const [impedance, setImpedance] = useState(null)\n  const [saveNum, setSaveNum] = useState(0);\n  const [fat, setFat] = useState(0);\n  const [unit, setUnit] = useState(\"kg\");\n  const [connectStatus, setConnectStatus] = useState(\"disconnected\");\n  const [isSavePMS, setIsSavePMS] = useState(false);\n  const [saveLoad, setSaveLoad] = useState(false);\n  const [isHaveSaveBtn, setIsHaveSaveBtn] = useState(true);\n\n  const _saveWeight = () => {\n    let params = {\n      petId: petDetailInfo.petId,\n      doctorId: storage.userId,\n      weight: weight,\n      memo: \"\",\n      fat: null,\n      bodyConditionScore: null,\n      impedance: impedance ? impedance : null\n    };\n    setSaveLoad(true);\n    addClamantPetExam(params)\n      .then((res) => {\n        setSaveLoad(false);\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataWeightVetspire()\n              break;\n            case '4'://ezyVet\n              updataWeightEzyvet()\n              break;\n            default:\n              message.success(\"Data successfully saved in Mella\");\n              break;\n          }\n          setSaveNum(saveNum + 1);\n          setIsHaveSaveBtn(false);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaveLoad(false);\n      });\n  };\n  const updataWeightVetspire = () => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: petDetailInfo.patientId,\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            weight: unit === 'kg' ? (weight * 2.2046).toFixed(1) : weight\n          }\n          vetspireUpdateWeight(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n\n  }\n  const updataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reUpdataWeightEzyvet();\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reUpdataWeightEzyvet();\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  const reUpdataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  useEffect(() => {\n    let isSave = storage.connectionKey ? false : true;\n    setIsSavePMS(isSave);\n    return () => { };\n  }, []);\n  useEffect(() => {\n    let {\n      biggieConnectStatus,\n      biggieBodyFat,\n      biggieBodyWeight,\n      biggieUnit,\n      biggieSameWeightCount,\n    } = hardwareReduce;\n    setConnectStatus(biggieConnectStatus);\n    setFat(biggieBodyFat);\n    setImpedance(biggieBodyFat)\n    setUnit(biggieUnit);\n    if (biggieUnit === \"lb\") {\n      biggieBodyWeight = biggieBodyWeight * 2;\n    }\n    setWeight(biggieBodyWeight);\n    if (biggieSameWeightCount === 6) {\n      // let ipcRenderer = window.require(\"electron\").ipcRenderer;\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"keyboardWriting\", weight);\n    }\n\n    return () => { };\n  }, [hardwareReduce]);\n\n  useEffect(() => {\n    setIsHaveSaveBtn(true);\n    return () => { };\n  }, [biggieBodyWeight]);\n  //宠物变了,要设置为未连接\n  useEffect(() => {\n    let {\n      biggieConnectStatus,\n    } = hardwareReduce;\n    if(biggieConnectStatus != 'disconnected') {\n      setBiggieConnectStatusFun(\"connected\")\n    }\n  }, [petDetailInfo]);\n\n  return (\n    <>\n      <Layout className=\"biggiePage\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        <Content className=\"biggieContentBox\">\n          {_.isEmpty(petDetailInfo) ? (\n            <>\n              <div className=\"chackPatientBox\">\n                <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n                <p className=\"chackPatientTitle\">Select a patient</p>\n              </div>\n            </>\n          ) : connectStatus === \"isMeasuring\" ? (\n            <div className=\"biggbody\">\n              <div className=\"biggieTopBox\">\n                <Biggie\n                  weight={weight}\n                  bodyFat={fat ? 5 : 0}\n                  score={5}\n                  impedance={fat}\n                  isIbs={unit === \"lb\"}\n                  onPress={_saveWeight}\n                  discardOnPress={() =>\n                    setBiggieConnectStatusFun(\"connected\")\n                  }\n                  issave={isSavePMS}\n                  isHaveSaveBtn={isHaveSaveBtn}\n                />\n              </div>\n            </div>\n          ) : (\n            <div style={{ height: connectStatus !== \"disconnected\" ? '50%' : '100%'}}>\n              <LinkEquipment />\n            </div>\n          )}\n          {\n            !_.isEmpty(petDetailInfo) && connectStatus !== \"disconnected\" && (\n              <div className=\"bottomContent\">\n                <div className=\"biggeTitleBox\">\n                  <p className=\"biggeTitle\">History</p>\n                </div>\n                <HistoryTable saveNum={saveNum} tableColumnType='weight' />\n              </div>\n            )\n          }\n        </Content>\n      </Layout>\n      <MyModal visible={saveLoad} />\n    </>\n  );\n};\n\nBiggirPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    hardwareReduce: state.hardwareReduce,\n    petReduce: state.petReduce,\n  }),\n  {\n    setBiggieConnectStatusFun,\n  }\n)(BiggirPage);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx",["994"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Button\r\n} from \"antd\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { accessArr, subAdvantage } from './components/accessArr';\r\nimport close from './../../assets/img/close-white.png'\r\nimport './index.less'\r\nimport { list } from '../../api';\r\n\r\n\r\nconst BuySub = ({ cancleFun, buyFun, loadings }) => {\r\n\r\n    useEffect(() => {\r\n        list()\r\n            .then(res => {\r\n                console.log(\"🚀 ~ file: index.jsx ~ line 23 ~ useEffect ~ res\", res)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }, [])\r\n\r\n    const listUI = () => {\r\n        let options = accessArr.map((item, index) => {\r\n\r\n            return (\r\n                <li key={`1${index}`}>\r\n                    <div>\r\n                        <div className=\"title1\" style={{ backgroundColor: item.color }}>{item.title1}</div>\r\n                        <div className=\"title\">{item.title}</div>\r\n                        <div className=\"h2\">{item.h2}</div>\r\n                        <div className=\"h3\">{item.h3}</div>\r\n                        <Button type=\"primary\" shape=\"round\" className='buyBtn'\r\n                            onClick={() => {\r\n                                buyFun(item)\r\n                            }}\r\n                            loading={loadings[index]}\r\n                        >Buy Bow</Button>\r\n                    </div>\r\n                </li>\r\n            )\r\n        })\r\n        return (<ul>\r\n            {options}\r\n        </ul>)\r\n    }\r\n    const advantage = () => {\r\n        let options = subAdvantage.map((item1, index) => {\r\n            let option = item1.map((item, index1) => {\r\n                return (\r\n                    <li key={`${index}${index1}`}>\r\n                        <div className=\"itemone\">\r\n                            <div className=\"icon\">\r\n                                <img src={item.icon} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"text\">{item.text}</div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })\r\n            return (\r\n                <ul className={`ul${index}`}>\r\n                    {option}\r\n                </ul>\r\n            )\r\n        })\r\n        return options\r\n    }\r\n\r\n    return (\r\n        <div id='buySub'>\r\n            <div className=\"cencerIcon\">\r\n                <div onClick={cancleFun}>\r\n                    <img src={close} alt=\"\" />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"buySubTitle\">Select the option that best describes your needs</div>\r\n            <div className=\"subList\">\r\n                {listUI()}\r\n            </div>\r\n            <div className=\"premium\">Premium Features</div>\r\n            <div className=\"subAdvantage\">\r\n                {advantage()}\r\n            </div>\r\n            {/* <div className=\"bottom\">\r\n                <div>\r\n\r\n                </div>\r\n                <div\r\n                    className=\"cancel\"\r\n                    onClick={cancleFun}\r\n                >cancel</div>\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}\r\nBuySub.propTypes = {\r\n    cancleFun: PropTypes.func,\r\n    buyFun: PropTypes.func,\r\n    loadings: PropTypes.array\r\n};\r\nBuySub.defaultProps = {\r\n    cancleFun: () => { },\r\n    buyFun: () => { },\r\n    loadings: [false, false, false]\r\n}\r\n\r\nexport default BuySub;","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js",["995","996"],"\r\n\r\n// let COMMON_URL = '';\r\n// let COMMON_URL = 'https://api.trial.ezyvet.com/v1';\r\nlet COMMON_URL = process.env.REACT_APP_EZYVET_BASE_URL\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function FetchEzyVet(url, method, params = '', token = '') {\r\n\r\n    if (method === 'GET' || method === 'DELETE') {\r\n        let headers = null\r\n        if (token !== '') {\r\n            headers = {\r\n                'authorization': token,\r\n            };\r\n        }\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            // 定一个空数组\r\n            let paramsArray = [];\r\n            //  拆分对象\r\n            Object.keys(params).forEach(key =>\r\n                paramsArray.push(key + \"=\" + params[key])\r\n            );\r\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n            if (url.search(/\\?/) === -1) {\r\n                url = url + \"?\" + paramsArray.join(\"&\");\r\n            } else {\r\n                url = url + \"&\" + paramsArray.join(\"&\");\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": 'text/plain'\r\n                    }\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else if (method === 'POST') {\r\n        let header = {\r\n            \"Content-type\": \"application/json\"\r\n        };\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    // mode: 'cors',\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else {\r\n        let header = {\r\n            \"Content-type\": \"application/merge-patch+json\",\r\n            authorization: token\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx",["997"],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n  setSelectHardwareType\r\n} from \"./../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n  setSelectHardwareType\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n          onClick={() => {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType('add');\r\n          }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25), }}\r\n\r\n\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => { },\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum, setSelectHardwareType }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js",["998"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/EzyVet`\r\n\r\n\r\n/**\r\n * @dec 重新获取令牌\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const ezyvetauth = (parames) => {\r\n    return get(`${baseURL}/ezyvetauth`, parames)\r\n}\r\n\r\n\r\nexport const checkAndSaveAnimalList = (parames) => {\r\n    return postJson(`${baseURL}/checkAndSaveAnimalList`, parames)\r\n}\r\n\r\nexport const healthstatus = (paramId, petVitalId, parames) => {\r\n    return patch(`${baseURL}/healthstatus/${paramId}/${petVitalId}`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js",["999","1000"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/user`\r\n\r\n\r\n/**\r\n * @dec 邀请别人加入组织\r\n * @param {*} userId 用户id\r\n * @param {*} organizationId 组织id\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const inviteUserByEmail = (userId, organizationId, parames) => {\r\n    return postJson(`${baseURL}/inviteUserByEmail/${userId}/${organizationId}`, parames)\r\n}\r\n\r\nexport const updateUserInfo = (parames) => {\r\n    return postJson(`${baseURL}/updateUserInfo`, parames)\r\n}\r\n\r\n\r\n\r\n\r\nexport const loginWithQRcode = (QRToken) => {\r\n    return get(`${baseURL}/loginWithQRcode/${QRToken}`, '')\r\n}\r\n\r\n\r\nexport const getLoginQRcode = () => {\r\n    return get(`${baseURL}/getLoginQRcode`, '')\r\n}\r\n\r\n\r\n\r\nexport const resendDeskRegistEmail = (logupEmailCode, params) => {\r\n    return get(`${baseURL}/resendDeskRegistEmail/${logupEmailCode}`, params)\r\n}\r\n\r\n\r\nexport const deskRegistAWSSNS = (params) => {\r\n    return postJson(`${baseURL}/deskRegistAWSSNS`, params)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js",["1001","1002","1003"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const selectExamByPatientId = (parames) => {\r\n    return postJson(`${baseURL}/selectExamByPatientId`, parames)\r\n}\r\n\r\n\r\nexport const updateVitalsTemperatureByVitalId = (parames) => {\r\n    return postJson(`${baseURL}/updateVitalsTemperatureByVitalId`, parames)\r\n}\r\n\r\n\r\nexport const selectLocations = (parames) => {\r\n    return postJson(`${baseURL}/selectLocations`, parames)\r\n}\r\n\r\n\r\nexport const selectProvidersByLocationId = (parames) => {\r\n    return postJson(`${baseURL}/selectProvidersByLocationId`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js",["1004","1005","1006"],"/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const vetspireGetPetLatestExam = (params) => {\r\n    return postJson(`${baseURL}/vetspireGetPetLatestExam`, params)\r\n}\r\n\r\n\r\n\r\n\r\nexport const vetspireUpdateWeight = (params) => {\r\n    return postJson(`${baseURL}/vetspireUpdateWeight`, params)\r\n}\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js",["1007"],"/**\n * @file exam.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/exam`\n\n\n/**\n * @dec 温度保存和体重保存\n * @param {*} params\n * @returns\n */\nexport const addClamantPetExam = (params) => {\n  return postJson(`${baseURL}/addClamantPetExam`, params)\n}\n\n/**\n * @dec 根据历史记录id获取全部的过程数据\n * @param {str} examId 历史记录id\n * @returns\n */\nexport const getClinicalDataByExamId = (examId) => {\n  return get(`${baseURL}/getClinicalDataByExamId/${examId}`, \"\")\n}\n/**\n * @dec 获取宠物上一次测量体重，体长，温度的结果和时间\n * @param {*} petId\n * @returns\n */\nexport const getRecentPetData = (petId) => {\n  return get(`${baseURL}/getRecentPetData?petId=${petId}`, \"\");\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",["1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Progress, Layout, Carousel } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport { px } from \"../../../utils/px\";\nimport electronStore from \"../../../utils/electronStore\";\nimport _ from \"lodash\";\n\nimport \"./measurement.less\";\n\nlet storage = window.localStorage;\nconst { Content, Header } = Layout;\n\nconst Measurement = ({ petMessage, hardwareMessage }) => {\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\n  const [percent, setPercent] = useState(0);\n  const [value, setValue] = useState(0);\n  const [timers, setTimers] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    const random = 1;\n    setValue(value + random);\n    setTimers(timers + random);\n  };\n\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    let num = parseFloat(percent);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    }\n    return (\n      <>\n        {mellaMeasurePart !== \"耳温\" ? (\n          <p className=\"ProgressTitle\">\n            {num}\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\n          </p>\n        ) : (\n          <></>\n        )}\n        <p className=\"ProgressTitle\">Measuring</p>\n      </>\n    );\n  };\n  //图片切换\n  const checkImage = () => {\n    switch (timers) {\n      case 0:\n        return <img src={Animation_1} />;\n      case 1:\n        return <img src={Animation_2} />;\n      case 2:\n        return <img src={Animation_3} />;\n      case 3:\n        return <img src={Animation_3} />;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (timers > 2) {\n      setTimers(0);\n    }\n    return () => { };\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    const timer = setInterval(tick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* <HeaderItem /> */}\n      <Content className={\"measureContentBox\"}>\n        <div style={{height: '100%', display: 'flex', flexDirection: 'column', alignItems:'center', justifyContent:'center'}}>\n          <div style={{ marginTop: 16 }}>\n            <Progress\n              type=\"dashboard\"\n              percent={_.round(mellaMeasureValue, 1)}\n              gapDegree={30}\n              // width={px(260)}\n              strokeWidth={\"8\"}\n              format={(percent) => ProgressTitle(percent)}\n              strokeColor={'#4C595E'}\n              className='measuringProgress'\n            />\n          </div>\n          {checkImage()}\n        </div>\n      </Content>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(Measurement);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Image,\n  Layout,\n  Dropdown,\n  Col,\n  Row,\n  Avatar,\n  Space,\n  Card,\n  Menu,\n  Progress,\n  message\n} from \"antd\";\n\nimport xia from '../../../assets/img/xia.png'\nimport { px } from '../../../utils/px'\n\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\nimport Connect from './../../../assets/img/connect.png'\nimport connectBle from \"./../../../assets/img/connectBle.png\";\nimport redcat from \"./../../../assets/images/redcat.png\";\nimport reddog from \"./../../../assets/images/reddog.png\";\nimport redother from \"./../../../assets/images/redother.png\";\n\nimport electronStore from \"../../../utils/electronStore\";\nimport { catv12Predict } from \"../../../api\";\nimport { changeThemeColor } from \"../../../utils/commonFun\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaPredictReturnValueFun,\n\n\n  mellaPredictReturnValue,\n  setMellaDeviceIdFun,\n} from \"../../../store/actions\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nimport \"./headerItem.less\";\nimport { devType } from \"../../../config/config\";\nimport { buf2hex, hex2buf, hex2arr } from '../../../utils/commonFun'\nconst { Header } = Layout;\n\n//连接\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\nlet time194 = 0\n\n//用于预测的东西\nlet clinicalYuce = [],\n  clinicalIndex = 0;\n\n\n\n\n\nlet readCharacteristic = null,\n  writeCharacteristic = null\n\n//搜索到的设备\nlet device = null\n//因为每次点击断开连接的图标都会产生一次断开监听，因此做一个标志位，让他只有第一次才会监听\nlet dicconnectFlog = null\n\n\nconst HeaderItem = ({\n  petMessage,\n  hardwareMessage,\n  timeNum = 15,\n  setMellaPredictReturnValueFun,\n\n  setMellaConnectStatusFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  mellaPredictReturnValue,\n  setMellaDeviceIdFun,\n  setMellaMeasureValueFun\n}) => {\n  let history = useHistory();\n  let storage = window.localStorage;\n  let {\n    petName,\n    patientId,\n    firstName,\n    lastName,\n    gender,\n    breedName,\n    birthday,\n    weight,\n    url,\n    petSpeciesBreedId,\n    petId,\n    isWalkIn,\n  } = petMessage;\n  let {\n    mellaConnectStatus,\n    mellaPredictValue,\n    mellaMeasureValue,\n    mellaMeasurePart,\n    rulerConnectStatus,\n    biggieConnectStatus,\n    selectHardwareInfo,\n    selectHardwareType,\n  } = hardwareMessage;\n  const [value, setValue] = useState(0);\n  const [color, setColor] = useState('#e1206d');//颜色切换\n  const saveCallBack = useRef();\n  const callBack = () => {\n    let random = null;\n    if (timeNum === 15) {\n      random = 7;\n    } else if (timeNum === 30) {\n      random = 3.5;\n    } else {\n      random = 1.75;\n    }\n    setValue(value + random);\n  };\n  //展示宠物照片方法\n  const petPicture = (size) => {\n    if (_.isEmpty(url)) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <Avatar src={redcat} size={size} />;\n      } else if (\n        petSpeciesBreedId === 12001 ||\n        _.inRange(petSpeciesBreedId, 136, 456)\n      ) {\n        return <Avatar src={reddog} size={size} />;\n      } else if (petSpeciesBreedId === 13001) {\n        return <Avatar src={redother} size={size} />;\n      } else {\n        return <Avatar src={redother} size={size} />;\n      }\n    } else {\n      return <Avatar src={url} size={size} />;\n    }\n  };\n  //展示名字或id方法\n  const showNameOrId = () => {\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\n      return \"unknown\";\n    } else if (!_.isEmpty(petName)) {\n      return petName;\n    } else {\n      return patientId;\n    }\n  };\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\n      return \"unknown\";\n    } else {\n      return firstName + \" \" + lastName;\n    }\n  };\n  //计算宠物年龄\n  const calculateAge = () => {\n    if (_.isEmpty(birthday)) {\n      return \"unknown\";\n    } else {\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\n    }\n  };\n  //计算宠物体重\n  const calculateWeight = () => {\n    if (_.isEmpty(weight)) {\n      return \"unknown\";\n    } else {\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\n    }\n  };\n  //头部弹出卡片\n  const cardItem = () => {\n    return (\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\n        <Menu.Item className=\"topItem\">\n          <div className=\"cardTopBox\" style={{ backgroundColor: color }}>\n            <div className=\"topLeftBox\">\n              {petPicture(91)}\n              <p className=\"cardTitle\" style={{ fontWeight: 700 }} >{showNameOrId()}</p>\n              <p className=\"cardTitle\">{ownerName()}</p>\n            </div>\n            <div className=\"topRightBox\">\n              <p className=\"cardTitle\">{calculateAge()}</p>\n              <p className=\"cardTitle\">{calculateWeight()}</p>\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\n              <p className=\"cardTitle\">{breedName}</p>\n            </div>\n          </div>\n        </Menu.Item>\n        <Menu.Item key={\"temperatureHistory\"} style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Temperature History</p>\n        </Menu.Item>\n        <Menu.Item key={\"editPetInfo\"} style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Edit Pet Profile</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export Temperature History</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export All Vitals History</p>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n  const clilkMenu = (item) => {\n    console.log(\"---item\", item);\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\n      //跳转到编辑宠物信息页面\n      history.push(\"/page9\");\n    }\n  };\n  //超过15s后调用接口\n  const prediction = () => {\n    let parame = {\n      ambient_temperature: 17,\n      data: mellaPredictValue,\n      deviceId: \"11111\",\n      sampling_rate: \"135ms\",\n    };\n    let url = \"/clinical/catv12Predict\";\n    catv12Predict(parame)\n      .then((res) => {\n        console.log(\"res\", res);\n        let ipcRenderer = window.electron.ipcRenderer;\n        if (res.message === \"Success\") {\n          let prediction = res.result.prediction.toFixed(2);\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\n          setMellaPredictReturnValueFun(num);\n          let tempArr = prediction.split(\".\");\n          let intNum = tempArr[0];\n          let flotNum = tempArr[1];\n          if (intNum.length < 2) {\n            intNum = \"0\" + intNum;\n          }\n          if (flotNum.length < 2) {\n            flotNum = \"0\" + flotNum;\n          }\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", {\n              command: \"42\",\n              arr: [intNum, flotNum],\n            });\n\n            timeID && clearTimeout(timeID);\n          }, 10);\n        } else {\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n            clearTimeout(timeID);\n          }, 10);\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n      });\n  };\n  //判断仪器是否连接从而判断选择什么图片\n  const isConnect = () => {\n    const checkImage = () => {\n      switch (mellaMeasurePart) {\n        case \"腋温\": return AxillaryBluetooth;\n        case \"耳温\": return EarBluetoothIcon;\n        case \"肛温\": return RectalBluetoothIcon;\n        case \"\": return Connect;\n\n        default:\n          break;\n      }\n\n    };\n\n    if (electronStore.get(`${storage.userId}-isClical`)) {\n      return _.isEqual(mellaConnectStatus, \"disconnected\") || _.isEmpty(mellaMeasurePart) ? (\n        <Avatar size={40} src={BluetoothNotConnected} />\n      ) : (\n        <Progress\n          width={48}\n          type=\"circle\"\n          percent={value}\n          format={() => <Avatar size={40} src={checkImage()} />}\n        />\n      );\n    } else {\n      switch (selectHardwareType) {\n        case \"mellaPro\":\n          return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} onClick={() => { if (devType === 'react') { connectMellaHome() } }} />\n          ) : (\n            <Progress\n              width={48}\n              type=\"circle\"\n              percent={value}\n              format={() => <Avatar size={40} src={checkImage()} />}\n            />\n          );\n        case \"biggie\":\n          return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        case \"tape\":\n          return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        default:\n          break;\n      }\n    }\n  };\n\n\n\n  //下面是网页端时网页连接的逻辑\n  //点击未连接图标开始挑出弹框\n  //搜索连接mellahome\n  const connectMellaHome = async () => {\n\n    let option = {\n      filters: [{ name: 'MellaHome' }, { name: 'MellaPro' },],\n      // acceptAllDevices: true,\n      optionalServices: ['0000ffe0-0000-1000-8000-00805f9b34fb']\n      // optionalServices: [0xff0f]\n    }\n    let radioService = null\n    console.log('准备', device);\n    // if (device) {\n    //   device.removeAddEventListener('gattserverdisconnected', onDisconnected);//监听设备断开连接\n    // }\n    if (!navigator.bluetooth) {\n      message.error('No Web Bluetooth support.')\n    }\n    device = null\n\n\n    device = await navigator.bluetooth.requestDevice(option)\n    console.log('----', device);\n    //没有做销毁监听，会重复监听\n    if (!dicconnectFlog) {\n      device.addEventListener('gattserverdisconnected', onDisconnected);//监听设备断开连接\n      dicconnectFlog = true\n    }\n    let connectStatus = device.gatt.connected\n    console.log('设备', device, connectStatus);\n    if (connectStatus) {\n      console.log('已经连接，返回');\n      return\n    }\n    let server = await device.gatt.connect(); //蓝牙连接\n    console.log('连接成功', server);\n    // let alltPrimaryServices = await server.getPrimaryServices()//获取服务uuid\n    // console.log('服务uuid：', alltPrimaryServices);\n    if (mellaConnectStatus !== \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    }\n    try {\n      let service = await server.getPrimaryService('0000ffe0-0000-1000-8000-00805f9b34fb'); //获取一个主GATT服务\n      let characteristics = await service.getCharacteristics()//获取所有的特征值\n      console.log('所有的特征值：', characteristics);\n      let readcharacteristic = await service.getCharacteristic('0000ffe4-0000-1000-8000-00805f9b34fb')\n      // setReadCharacteristic(readcharacteristic)\n      readCharacteristic = readcharacteristic\n      let writecharacteristic = await service.getCharacteristic('0000ffe1-0000-1000-8000-00805f9b34fb')\n      // setWriteCharacteristic(writecharacteristic)\n      writeCharacteristic = writecharacteristic\n    } catch (error) {\n      console.log('----====---', error);\n    }\n\n\n\n\n    try {\n      await readCharacteristic.startNotifications()\n    } catch (error) {\n      console.log('读通知', error);\n    }\n    console.log('设置监听');\n    try {\n      readCharacteristic.addEventListener('characteristicvaluechanged',\n        handleCharacteristicValueChanged);\n    } catch (error) {\n      console.log('监听出错', error);\n    }\n\n    // sendData(\"07\", [\"5A\"], writeCharacteristic)\n    // setTimeout(() => {\n    //   sendData(\"07\", [\"5A\"], writeCharacteristic)\n\n    // }, 500);\n    sendData(\"48\", [\"02\"], writeCharacteristic)\n    // setTimeout(() => {\n    //   sendData(\"48\", [\"02\"], writeCharacteristic)\n\n    // }, 500);\n\n  }\n  const handleCharacteristicValueChanged = (event) => {\n    const value = event.target.value.buffer;\n    let hex = buf2hex(value)\n    let arr = hex2arr(hex)\n    console.log('Received ', arr);\n    command(arr)()\n  }\n  const onDisconnected = async (event) => {\n\n    const device1 = event.target;\n    console.log(`设备: ${device1.name} 已经断开连接`);\n\n    setMellaConnectStatusFun(\"disconnected\");\n    if (readCharacteristic) {\n      await readCharacteristic.removeEventListener('characteristicvaluechanged',\n        handleCharacteristicValueChanged);\n\n      // setReadCharacteristic(null)\n      readCharacteristic = null\n      writeCharacteristic = null\n    }\n\n\n\n  }\n\n  const blueSend = async (sendText, cha = writeCharacteristic) => {\n    if (cha) {\n      let buffer = hex2buf(sendText)\n      console.log('发送的hex', sendText);\n      await cha.writeValue(buffer)\n\n      cha.writeValue(buffer)\n        .catch(() => {\n          console.log(\"DOMException: GATT operation already in progress.\");\n          return Promise.resolve()\n            .then(() => setTimeout(() => {\n\n            }, 500))\n            .then(() => { cha.writeValue(buffer); });\n        });\n    } else {\n      console.log('没有', writeCharacteristic);\n    }\n\n  }\n  // 发送数据\n  const sendData = (command, arr, cha = writeCharacteristic) => {\n    //帧长,如果帧长是一位,前面加0\n    let length = arr.length + 3;\n    length = length.toString(16);\n    if (length.length < 2) {\n      length = '0' + length;\n    }\n    // console.log(length , command)\n    //开始生成校验位\n    let Check = parseInt(length, 16) ^ parseInt(command, 16);\n    for (let i = 0; i < arr.length; i++) {\n      Check = Check ^ parseInt(arr[i].toString(16), 16);\n    }\n    //如果校验位长度为1前面补0\n    Check = Check.toString(16);\n    if (Check.length < 2) {\n      Check = '0' + Check;\n    }\n    // console.log(Check)\n    let str = 'AA' + length + command + arr.join('') + Check + '55';\n    // console.log('发送的数据', str);\n\n    blueSend(str, cha)\n  };\n\n\n\n\n\n  //底座与温度计断开连接\n  const _disconnect_to_mella = () => {\n\n    if (mellaConnectStatus !== \"disconnected\") {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n    // setMellaDeviceIdFun(\"\");\n  };\n  //底座与温度计连接\n  const _connect_to_mella = () => {\n\n    if (mellaConnectStatus !== \"connected\") {\n      // setMellaConnectStatusFun(\"connected\");\n    }\n  };\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  const command = (newArr) => {\n\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    console.log('我进来了', dataArr1);\n\n\n    const instruction = [\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 99, 134\n    ];\n\n\n    if (mellaConnectStatus === \"disconnected\") {\n      _connect_to_mella();\n    }\n\n\n    const commandArr = {\n      209: () => {\n\n        //腋温\n        //第一次测量去获取探头ID\n        if (firstEar) {\n          firstEar = false;\n          // console.log(\"去获取探头id\");\n          //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\n        let Temp = temp0;\n        if (\n          Temp === 24.7 ||\n          Temp === 0 ||\n          Temp === null ||\n          Temp === undefined\n        ) {\n          return;\n        }\n\n        let dataS = {\n          sample: clinicalIndex++,\n          data0: temp0,\n          data1: temp1,\n        };\n        clinicalYuce.push(dataS);\n        if (clinicalYuce.length >= 30) {\n          setMellaPredictValueFun(clinicalYuce);\n        }\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n        if (mellaMeasurePart !== \"腋温\" && mellaMeasurePart !== \"肛温\") {\n\n          setMellaMeasurePartFun(\"腋温\");\n        }\n        // this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\n      },\n      208: () => {\n        //耳温\n\n        if (firstEar) {\n          firstEar = false;\n          //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        //现在探头0可能不存在，所以把探头0改为探头1\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[4.18]}`);\n        let Temp = temp0;\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n\n        if (mellaMeasurePart !== \"耳温\") {\n          setMellaMeasurePartFun(\"耳温\");\n        }\n      },\n      193: () => {\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\n\n        firstEar = true;\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n      },\n      194: () => {\n        //硬件收到机器学习结果并停止测量，\n        time194 = new Date()\n        console.log(\"---机器学习\", newArr);\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n        setMellaMeasureValueFun(mellaPredictReturnValue);\n        firstEar = true;\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n\n        clinicalYuce = [];\n        clinicalIndex = 0;\n      },\n      192: () => {\n        //温度计收到40开始数据后返回的指令\n        switch (newArr[3]) {\n          case 90:\n            console.log(\"有探头，开始测量的返回指令·\");\n            break;\n          case 11:\n            console.log(\"没有探头，开始测量的返回值\");\n            break;\n        }\n      },\n      129: () => {\n        //返回硬件版本号\n        console.log(`返回的版本号为${newArr[3]}`);\n      },\n      134: () => {\n        switch (newArr[3]) {\n          case 1:\n            console.log('腋温');\n            setMellaMeasurePartFun(\"腋温\");\n            break;\n          case 2:\n            console.log('肛温');\n            setMellaMeasurePartFun(\"肛温\");\n            break;\n\n          default:\n            break;\n        }\n        sendData(\"07\", [\"5A\"], writeCharacteristic)\n      },\n      135: () => {\n        //硬件的一些基本信息\n        /**\n         * ______________新版、旧版没法控制温度计__________________\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\n         * newArr[7] 无操作关机时间\n         * newArr[8] 背光时间\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\n         * newArr[10] 测量单位    01代表℃，00代表℉\n         */\n\n        let hardSet = electronStore.get(\n          `${storage.userId}-hardwareConfiguration`\n        );\n        console.log('--hardSet--', hardSet);\n        if (!hardSet) {\n          hardSet = {\n            isHua: true,\n            is15: true,\n            self_tarting: false, //自启动\n            isBacklight: true,\n            isBeep: true,\n            backlightTimer: { length: 140, number: \"45\" },\n            autoOff: { length: 0, number: \"30\" },\n          };\n        }\n        let { isHua, is15, self_tarting, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\n\n        let beep = isBeep ? \"11\" : \"00\";\n        let unit = isHua ? \"00\" : \"01\";\n        let autoOffNumber = autoOff.number\n        let backlightTimerNumber = isBacklight ? backlightTimer.number : '00'\n        if (\n          dataArr1[7] === autoOffNumber &&\n          dataArr1[8] === backlightTimerNumber &&\n          dataArr1[9] === beep &&\n          dataArr1[10] === unit\n        ) {\n        } else {\n          let setArr = [\"03\", \"ed\", \"07\", \"dd\", autoOffNumber, backlightTimerNumber, beep, unit,];\n          console.log('不相同，我要去发送配置');\n          sendData(\"21\", setArr)\n        }\n      },\n      238: () => {\n        //探头松动\n        console.log(\"探头松动\");\n        message.error(\n          \"The probe is loose, please re-install and measure again\",\n          5\n        );\n      },\n\n      98: () => {\n        //蓝牙连接断开\n        console.log(\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\n        );\n        firstEar = true;\n        // console.log(new Date() - is97Time);\n        if (new Date() - is97Time < 1300) {\n          return;\n        }\n        _disconnect_to_mella();\n      },\n      97: () => {\n        //蓝牙连接\n        console.log(\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\n        );\n\n        //ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n\n\n\n        is97Time = new Date();\n        _connect_to_mella();\n      },\n      177: () => {\n        //探头id\n        let dataArr1 = newArr.map((item) => {\n          if (item.toString(16).length < 2) {\n            return \"0\" + item.toString(16);\n          } else {\n            return item.toString(16);\n          }\n        });\n\n        let id = \"\";\n        for (let i = 3; i < dataArr1.length - 2; i++) {\n          id += dataArr1[i];\n        }\n        // console.log(id, dataArr1[7]);\n        setMellaDeviceIdFun(id);\n        // this.setState({\n        //   probeID: id,\n        //   petVitalTypeId: dataArr1[7]\n        // })\n        if (dataArr1[7] === \"01\") {\n          if (mellaMeasurePart !== \"腋温\") {\n            setMellaMeasurePartFun(\"腋温\");\n          }\n        } else if (dataArr1[7] === \"02\") {\n          if (mellaMeasurePart !== \"肛温\") {\n            setMellaMeasurePartFun(\"肛温\");\n          }\n        } else if (dataArr1[7] === \"03\") {\n          if (mellaMeasurePart !== \"耳温\") {\n            setMellaMeasurePartFun(\"耳温\");\n          }\n        }\n      },\n\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (value === 105 && timeNum !== 60) {\n      prediction();\n    } else if (value === 105 && timeNum === 60) {\n      let ipcRenderer = window.electron.ipcRenderer;\n      const timeID = setTimeout(() => {\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n        clearTimeout(timeID);\n      }, 10);\n    }\n    return () => { };\n  }, [value]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setValue(0);\n      timer = setInterval(tick, 1000);\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\n      clearInterval(timer);\n    } else if (mellaConnectStatus === \"disconnected\") {\n      setValue(0);\n    };\n    if (mellaConnectStatus === \"complete\") {\n      // let ipcRenderer = window.electron.ipcRenderer;\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    setColor(changeThemeColor(selectHardwareType));\n  }, [selectHardwareType]);\n\n  return (\n    <div className=\"headerBox\">\n      <Header style={{ background: \"#fff\", height: '100%' }}>\n        {_.isEmpty(petId) && !isWalkIn ? (\n          <></>\n        ) : (\n          <Row className=\"heardRow\" >\n            {/*头部左侧 */}\n            <Col flex={10}>\n              {isWalkIn ? (\n                <span className=\"walkInTitle\">Walk-In</span>\n              ) : (\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\n                  <div\n                    className=\"petMessageBox\"\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {petPicture(50)}\n                    <div className=\"petMessageBox\">\n                      <div className=\"petName\">\n                        {!_.isEmpty(petMessage.patientId)\n                          ? petMessage.patientId\n                          : \"unknown\"}\n                        ,{\" \"}\n                        {!_.isEmpty(petMessage.petName)\n                          ? petMessage.petName\n                          : \"unknown\"}\n                      </div>\n                      <img src={xia} alt=\"\" width={px(25)}  />\n                    </div>\n                  </div>\n                </Dropdown>\n              )}\n            </Col>\n            {/*头部右侧 */}\n            <Col flex={1}>\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\n            </Col>\n          </Row>\n        )}\n      </Header>\n    </div>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    mellaPredictReturnValue: state.hardwareReducemellaPredictReturnValue\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaPredictReturnValueFun,\n    setMellaDeviceIdFun\n  }\n)(HeaderItem);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",["1058","1059","1060","1061","1062","1063","1064","1065"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Image, Layout, Button } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\nimport Reading from './../../../assets/img/Reading.png'\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\nimport { px } from \"../../../utils/px\";\n\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport moment from \"moment\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  let imageMap = [\n    Standing_Dog,\n    Standing_Cat,\n    Sitting_Dog,\n    Sitting_Cat,\n    Laying_Dog,\n    Laying_Cat,\n  ];\n\n  const [type, setType] = useState(false); //是否显示轮播图\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\n  const [title, setTitle] = useState('Ready, place under foreleg')//准备测量的文字\n  const saveCallBack = useRef();\n  const callBack = () => {\n    setCarouselIndex(carouselIndex + 1);\n  };\n\n  //切换图片\n  const checkImage = () => {\n    switch (mellaMeasurePart) {\n      case \"腋温\":\n        return AxillaryPlacement;\n      case \"耳温\":\n        return EarPlacement;\n      case \"肛温\":\n        return RectalPlacement;\n      case \"\": return Reading\n    }\n\n  };\n  //点击进入轮播图\n  const clickIntoTip = () => {\n    setType(true);\n  };\n  //小圆点点击事件\n  const clickPoint = (index) => {\n    setCarouselIndex(index);\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (carouselIndex === 6) {\n      setCarouselIndex(0);\n    }\n  }, [carouselIndex]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (type && mellaConnectStatus === \"connected\") {\n      timer = setInterval(tick, 1500);\n    }\n    if (mellaConnectStatus !== \"connected\") {\n      setType(false);\n      setCarouselIndex(0);\n      clearInterval(timer);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [type, mellaConnectStatus]);\n\n  useEffect(() => {\n    switch (mellaMeasurePart) {\n      case '腋温': setTitle('Ready, place under foreleg'); break;\n      case '耳温': setTitle('Ready, place in ear'); break;\n      case '肛温': setTitle('Ready, place in anus'); break;\n      case '': setTitle('Reading Probe Information'); break;\n\n      default:\n        break;\n    }\n\n  }, [mellaMeasurePart])\n\n  return (\n    <>\n      <Content className={\"temperatureContentBox\"}>\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\n          <>\n            <div className=\"startBox\">\n              <span className=\"startTitle\">\n                Turn on your\n                <br />\n                Mella Thermometer\n                <br />\n                or Pair New Mella\n              </span>\n              <div style={{ display: 'flex', justifyContent: 'center', width: px(520) }}>\n                <img src={PressButton_Pro} className=\"PressButton_Pro\"\n\n\n                />\n              </div>\n            </div>\n            <div className=\"tableBox\">\n              <div className=\"temperatureTitleBox\">\n                <p className=\"temperatureTitle\">Temperature History</p>\n              </div>\n              <HistoryTable tableColumnType='temperature' />\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"startBox\" style={{ height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n              <p className=\"startTitle\">\n                {!type\n                  ? title\n                  : \"Place Under Foreleg Standing\"}\n              </p>\n              {!type ? (\n                <>\n                  <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <img src={checkImage()} className=\"checkImages\"></img>\n                  </div>\n\n                  {mellaMeasurePart === \"腋温\" ? (\n                    <div className=\"bottomTip1\">\n                      <div className=\"bottomTip1_1\">\n                        <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\n                          Need Help With Accurate Placement On Pet?\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ) : (\n                <>\n                  <div className=\"carouselBox\">\n                    {_.map(imageMap, (item, index) => {\n                      return (\n                        <img\n                          key={index}\n                          className=\"contentImgStyle\"\n                          src={item}\n                          style={{\n                            display: carouselIndex === index ? \"\" : \"none\",\n                          }}\n                        />\n                      );\n                    })}\n                  </div>\n                  <div className=\"dotBox\">\n                    <ul className=\"dotList\">\n                      {_.map(imageMap, (item, index) => {\n                        return (\n                          <li key={index}>\n                            <Button\n                              className=\"dotItem\"\n                              onClick={() => clickPoint(index)}\n                              style={{\n                                background:\n                                  carouselIndex === index\n                                    ? \"#0a0a0a\"\n                                    : \"#bdbaba\",\n                              }}\n                            >\n                              {index}\n                            </Button>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                  <Button\n                    style={{ backgroundColor: \"#e1206d\" }}\n                    className=\"btn\"\n                    type=\"danger\"\n                    shape=\"round\"\n                    onClick={() => setType(false)}\n                  >\n                    Return To Measuring Screen\n                  </Button>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </Content>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx",["1066","1067","1068","1069"],"import React, { } from 'react'\nimport PropTypes from 'prop-types';\nimport { px, mTop } from '../../../utils/px'\nimport cir from '../../../assets/images/cir.png'\nimport xia from '../../../assets/img/xia.png'\nimport './biggie.less'\n/**\n *\n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * @returns\n */\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ fontWeight: '800' }}>{weight}</div>\n          <div className='cTTextUnit'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText'>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n      <div className='biggiefoot'>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n          </div>\n        }\n        <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10), height: '28px' }}>{(impedance && impedance > 0) ? `Impedance ${impedance} Ohms` : ''}</div>\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",["1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083"],"import React, { useEffect, useState } from \"react\";\nimport { Image, Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\nimport connectScale from \"../../../assets/img/connectScale.png\"\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, biggieConnectStatus, biggieBodyFat }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [saveNum, setSaveNum] = useState(0);\n  return (\n    <>\n      <div className={\"linkBox\"}>\n        <div className=\"startBox\">\n          {\n            biggieConnectStatus == 'disconnected' ? (\n              <>\n                <img className=\"scaleImg\" src={connectScale}></img>\n                <p className=\"startTitle\">Connect scale to start</p>\n              </>\n\n            ) : biggieConnectStatus == 'connected' ?  (\n              <>\n                <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p>\n              </>\n            ) : ''\n          }\n\n              {/* <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p> */}\n\n\n        </div>\n      </div>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    biggieConnectStatus: state.hardwareReduce.biggieConnectStatus,\n    biggieBodyFat: state.hardwareReduce.biggieBodyFat\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx",["1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio, message } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmTimeType\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\nimport overnight from \"../../../../assets/img/overnight.png\";\nimport rapid from \"../../../../assets/img/rapid.png\";\nimport addSwab from \"../../../../assets/images/addSwab.png\";\nimport test1 from \"../../../../assets/images/test1.png\";\nimport success from \"../../../../assets/images/success.png\";\n\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\n\nlet storage = window.localStorage;\n\nconst Result = ({ petMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\n    const [value, setValue] = useState(1);\n    const [visible, setVisible] = useState(false)\n\n    const cutTitle = () => {\n        switch (value) {\n            case 1:\n                return (<>{`${'Insert new swab and '}`}<br />{`${'collect sample'}`}</>);\n            case 2:\n                return (<>{`${'Put new swab sample'}`}<br />{`${'to sensor'}`} </>);\n            case 3:\n                return (<>{`${'Test complete!'}`} </>);\n            default:\n                break;\n        }\n    }\n\n\n    const cutImage = () => {\n        switch (value) {\n            case 1:\n                return <img src={addSwab} alt=\"\" style={{ width: px(287 / 420 * 514), height: px(287) }} />;\n            case 2:\n                return <img src={test1} alt=\"\" style={{ width: px(287 / 566 * 682), height: px(287) }} />;\n            case 3:\n                return <img src={success} alt=\"\" style={{ width: px(287), height: px(287) }} />;\n            default:\n                break;\n        }\n    }\n\n    const onClick = () => {\n\n        switch (value) {\n            case 1: setValue(value + 1); break;\n\n            case 2:\n                let { petId, petName, birthday, speciesId, userId, firstName, lastName, phone } = petMessage\n                let species = 0\n                switch (speciesId) {\n                    case 1:\n                    case 11001:\n                        species = 1; break;\n                    default:\n                        break;\n                }\n                let pet = {\n                    id: petId,\n                    species,\n                }\n                if (petName) {\n                    pet.name = petName;\n                }\n                if (birthday) {\n                    pet.dob = birthday;\n                }\n\n\n                let pet_owner = {\n                    id: userId || storage.userId,\n                }\n                if (firstName) {\n                    pet_owner.name = firstName\n                }\n                if (lastName) {\n                    pet_owner.family_name = lastName\n                }\n                if (phone) {\n                    pet_owner.phone = phone\n                }\n\n\n                let { qsmEarPart, qsmTimeType } = qsmMessage\n                let kind = qsmEarPart === 1 ? 1 : 0\n                let sample_area = qsmTimeType\n                let test = {\n                    kind,\n                    sample_area\n                }\n                RunMeasurement(pet, pet_owner, test)\n\n                break;\n            case 3: cutPageType('linkPage'); break;\n            default:\n                break;\n        }\n\n    }\n    const RunMeasurement = async (pet, pet_owner, test) => {\n        let { qsmPart } = qsmMessage\n        let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\n        let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\n        let user_id = storage.userId;\n        console.log(\"🚀 ~ file: index.jsx ~ line 115 ~ RunMeasurement ~ storage.userId\", storage.userId)\n        let practice_id = storage.lastOrganization;\n        const SDK = require(\"qsm-otter-sdk\");\n\n        let num = 0\n\n        async function runMeasurement() {\n            try {\n                console.log('入参：', { qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test, num });\n                setVisible(true)\n                const res = await SDK.runMeasurement(qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test)\n                // let res = { status: 200 }\n                setVisible(false)\n\n\n                console.log(\"🚀 ~ file: index.jsx ~ line 112 ~ RunMeasurement ~ res\", res)\n                if (res.status === 200) {\n                    message.success(res.data.message)\n                    // qsmPart.close()\n                    console.log('关闭弹窗并调到下一页');\n                    setValue(3)\n                } else {\n                    message.error(res.statusText)\n                }\n\n\n\n            } catch (error) {\n                if (`${error}`.indexOf(`Failed to execute 'open' on 'SerialPort': The port is already open.`) !== -1) {\n                    if (num < 3) {\n                        num++\n                        try {\n                            qsmPart.close()\n                        } catch (error) {\n\n                        }\n\n                        setTimeout(() => {\n                            runMeasurement()\n                        }, 2000);\n\n                    }\n                } else {\n                    setVisible(false)\n                }\n                console.error('error', error)\n            }\n        }\n        runMeasurement()\n\n\n    }\n    const btnText = () => {\n        switch (value) {\n            case 1:\n                return 'Next'\n            case 2:\n                return 'Run Measurement'\n            case 3:\n                return 'Run New Test'\n            default:\n                break;\n        }\n    }\n    return (\n        <div className=\"qsmResult\">\n            <div className=\"topBox\">\n                <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n                    {cutTitle()}\n                </p>\n            </div>\n            <div className=\"imageBox\">\n                {cutImage()}\n            </div>\n            <div className=\"bottomBox\">\n                <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{btnText()}</Button>\n            </div>\n            <MyModal visible={visible} />\n        </div>\n    );\n\n};\n\nexport default connect(\n    (state) => ({\n        petMessage: state.petReduce.petDetailInfo,\n        qsmMessage: state.qsmReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setQsmTimeType\n    }\n)(Result);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",["1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\n\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\nimport Delete from \"./../../assets/img/Delete.png\";\n\nimport { mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport { deletePetExamByExamId, getPetExamByPetId, updatePetExam } from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { useThrottleFn, useDebounceFn, useDebounceEffect } from 'ahooks';\n\nimport \"./index.less\";\n\nconst HistoryTable = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n  saveNum = 0,\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\n}) => {\n  let { petId } = petMessage;\n  let storage = window.localStorage;\n  let draggleRef = React.createRef();\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [reRender, setReRender] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const [loading, setLoading] = useState(false);//加载\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n  const [isMore, setIsMore] = useState(true); // 是否还有数据 false-已经到底\n  //体重表格渲染\n  const weightColumns = [\n    {\n      title: \"Data\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: \"Weight\",\n      dataIndex: \"weight\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\n      ),\n    },\n\n    {\n      // title: \"BF%\",\n      // dataIndex: \"fat\",\n      title: \"Impedance\",\n      dataIndex: \"impedance\",\n\n\n\n      key: \"fat\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"BCS\",\n      dataIndex: \"bodyConditionScore\",\n      key: \"bodyConditionScore\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"Note\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //温度表格渲染\n  const TemperatureColumns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            style={{ cursor: \"pointer\" }}\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //选择表格colum渲染\n  const columType = () => {\n    switch (tableColumnType) {\n      case \"temperature\":\n        return TemperatureColumns;\n      case \"weight\":\n        return weightColumns;\n      default:\n        break;\n    }\n  };\n  //判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //获取历史宠物数据\n  const { run: getPetTemperatureData } = useDebounceFn((currPage) => {\n    setLoading(true);\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: tableColumnType === \"temperature\" ? 0 : 1,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        setLoading(false);\n        setTotal(res.data.totalCount);\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, { wait: 0 });\n\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史记录\n  const deletePetMessage = (examId) => {\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useDebounceEffect(() => {\n    setCurrPage(1);\n    setPetData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n  }, [petId], { wait: 0 });\n\n  useEffect(() => {\n    if (reRender !== saveNum) {\n      setCurrPage(1);\n      setPetData([]);\n      setTotal(0);\n      setReRender(saveNum);\n      getPetTemperatureData(1);\n    }\n    return () => { };\n  }, [saveNum]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n    return (() => { });\n  }, []);\n\n  return (\n    <div className=\"tableContainer\" onScrollCapture={onScrollCapture}>\n      <Table\n        rowKey={\"examId\"}\n        columns={columType()}\n        dataSource={petData}\n        pagination={false}\n        loading={loading}\n        scroll={{\n          y: '80%'\n        }}\n        className=\"historyTableStyle\"\n      />\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        open={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(HistoryTable);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx",["1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Layout,\n  Modal,\n  message,\n} from \"antd\";\nimport { ExclamationCircleOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { useHistory } from \"react-router-dom\";\nimport { updatePetInfo1 } from \"../../../api\";\nimport { petPicture, calculateAge, catLeanBodyMass, catFatMass, dogLeanBodyMass, dogFatMass, dogBodyFatPercentage } from '../../../utils/commonFun';\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n} from \"../../../store/actions\";\nimport xia_hui from \"./../../../assets/img/xia_hui.png\";\nimport up_red from \"./../../../assets/img/up_red.png\"\nimport down_red from \"./../../../assets/img/down_red.png\"\nimport down_black from \"./../../../assets/img/down_black.png\"\nimport { useUpdateEffect } from 'ahooks';\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\n\nimport \"./calculationResult.less\";\n\nconst { Content } = Layout;\nconst CalculationResult = ({\n  type,\n  petMessage,\n  petDetailInfoFun,\n  ruleMessage,\n  getMeasureData,\n  setRulerUnitFun\n}) => {\n  let history = useHistory();\n  const [lastWeightValue, setLastWeightValue] = useState('');//最近一次的体重值\n  const [lastWeightTimeValue, setLastWeightTimeValue] = useState('');//最近一次的体重测量时间\n  const [lastRuleTimeValue, setLastRuleTimeValue] = useState('');//最近一次的尺子测量时间\n\n  let { petId, petSpeciesBreedId, weight, birthday } = petMessage;\n  let { rulerUnit, biggieUnit } = ruleMessage;\n  let {\n    headValue,\n    neckValue,\n    upperValue,\n    lowerValue,\n    torsoValue,\n    bodyValue,\n    hindlimbValue,\n    forelimbLengthValue,\n    forelimbCircumferenceValue,\n  } = getMeasureData;\n  let storage = window.localStorage;\n\n  let btnList = [\n    {\n      key: 'LBM',\n      name: 'Previous LBM',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'FM',\n      name: 'Previous FM',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'BF',\n      name: 'Previous BF%',\n      data: '1',\n      unit: 'lb'\n    },\n    {\n      key: 'day',\n      name: 'Days to goal',\n      data: '2'\n    }\n  ]\n\n  //重新测量\n  const onAgainMeasure = () => {\n    type(false);\n  }\n  //用户点击保存\n  const onSave = () => {\n    // Modal.confirm({\n    //   title: \"Confirm\",\n    //   icon: <ExclamationCircleOutlined />,\n    //   content: \"Whether To Save Data\",\n    //   top: \"40vh\",\n    //   onOk: saveData,\n    // });\n    saveData()\n  }\n  //in-cm转换\n  const in_cm = (val) => {\n    if (val) {\n      if (rulerUnit === \"in\") {\n        return parseFloat((parseFloat(val) * 2.54).toFixed(1));\n      } else {\n        return parseFloat(val);\n      }\n    } else {\n      return 0;\n    }\n  }\n  //保存数据\n  const saveData = () => {\n    let prams = {\n      l2rarmDistance: in_cm(getMeasureData.bodyValue) || null,\n      lowerTorsoCircumference: in_cm(getMeasureData.lowerValue) || null,\n      upperTorsoCircumference: in_cm(getMeasureData.upperValue) || null,\n      neckCircumference: in_cm(getMeasureData.neckValue) || null,\n      h2tLength: in_cm(getMeasureData.headValue) || null,\n      torsoLength: in_cm(getMeasureData.torsoValue) || null,\n      hindLimbLength: in_cm(getMeasureData.hindlimbValue) || null,\n      foreLimbLength: in_cm(getMeasureData.forelimbLengthValue) || null,\n      foreLimbCircumference: in_cm(getMeasureData.forelimbCircumferenceValue) || null,\n    };\n    updatePetInfo1(storage.userId, petId, prams)\n      .then((res) => {\n        if (res.flag) {\n          petDetailInfoFun({\n            ...petMessage,\n            ...prams,\n          });\n          message.success(\"Uploaded successfully\");\n          type(false);\n        } else {\n          message.error(\"upload failed\");\n        }\n      })\n      .catch((err) => {\n        message.error(\"update failed\");\n      });\n  };\n  //获取LeanBodyMass\n  const getLeanBodyMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catLeanBodyMass(headValue, in_cm(hindlimbValue), in_cm(forelimbCircumferenceValue), in_cm(forelimbLengthValue), in_cm(bodyValue), in_cm(upperValue)), 2);\n      case 'dog':\n        return _.round(dogLeanBodyMass(weight * 2.2046, calculateAge(birthday), in_cm(headValue), in_cm(forelimbLengthValue), in_cm(hindlimbValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取FatMass\n  const getFatMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catFatMass(weight * 2.2046, in_cm(headValue), in_cm(forelimbLengthValue), in_cm(forelimbCircumferenceValue)), 2);\n      case 'dog':\n        return _.round(dogFatMass(weight * 2.2046, in_cm(hindlimbValue), in_cm(upperValue), in_cm(headValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  // 下拉历史\n  const TempHisVisible = () => {\n    console.log('1');\n  }\n  //判断上一次测量的体重是否超过一个月\n  const judgeWightTime = () => {\n    let newTime = moment();\n    let diffTime = newTime.diff(moment(lastWeightTimeValue), 'month');\n    if (diffTime >= 1 && lastWeightValue) {\n      return (\n        <p className=\"historyWeightWarningTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}.Please\n          <a onClick={() => updatePetMessage()}>update the pet's weight</a>.\n        </p>\n      );\n    } else if (diffTime === 0 && lastWeightValue) {\n      return <p className=\"historyWeightTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}: {lastWeightValue} {biggieUnit === 'kg' ? 'kg' : 'lbs'}</p>\n    } else {\n      return null\n    }\n  }\n  //用户更新宠物体重信息\n  const updatePetMessage = () => {\n    //跳转到编辑宠物信息页面\n    history.push(\"/page9\");\n  }\n  //获取BodyFatPercent\n  const getBodyFatPercent = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return;\n      case 'dog':\n        return _.round(dogBodyFatPercentage(in_cm(upperValue), in_cm(lowerValue), in_cm(hindlimbValue), in_cm(headValue)), 2);\n\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n\n  useUpdateEffect(() => {\n    type(false);\n    return () => { };\n  }, [petId]);\n\n  return (\n    <Content className=\"calculationResultContentBox\">\n      <div className=\"historyWeightBox\">\n        {\n          judgeWightTime()\n        }\n      </div>\n      <div className=\"localityGroup\">\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getLeanBodyMass() > 0 ? `${getLeanBodyMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lean Body Mass</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getBodyFatPercent() > 0 ? `${getBodyFatPercent()}%` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Body Fat Percent</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getFatMass() > 0 ? `${getFatMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Fat Mass</p>\n          </div>\n          <img src={down_black} className=\"downBlack\" alt=\"\"  />\n        </div>\n      </div>\n      <div className=\"measureContent\">\n        {btnList.map((item, index) => (\n          // <li key={index}>\n          //   <>\n          //     <img src={data.img} alt=\"\" />\n          //     <p>{data.title}</p>\n          //   </>\n          // </li>\n          <div key={index} className=\"item\">\n            <>\n              <p className=\"pSt1\">{item.name}</p>\n              <div className=\"bottom\">\n                {\n                  item.key != 'day' && <img src={up_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  />\n                }\n                {/* <img src={up_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  />\n                <img src={down_red} style={{ width: \"20px\" , marginRight: \"10px\"}} alt=\"\"  /> */}\n                <p className=\"pSt2\">{item.data}</p>\n                <p className=\"pSt2\">{ item.key != 'day' ? item.unit : null}</p>\n              </div>\n              {/* <p className=\"pSt2\">{item.data}</p> */}\n            </>\n          </div>\n        ))}\n      </div>\n      <div className=\"calculateBtnBox\">\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onAgainMeasure()}\n        >\n          Measure Again\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onSave()}\n        >\n          Save\n        </Button>\n      </div>\n      <div className=\"scrollHistory\">\n        <span className=\"his\" onClick={() => TempHisVisible()}>Hisory</span>\n        <img src={xia_hui} style={{ width: \"30px\", cursor: \"pointer\" }} alt=\"\" onClick={() => TempHisVisible()} />\n      </div>\n    </Content>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n  }\n)(CalculationResult);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",["1128","1129","1130","1131","1132","1133"],"import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport { Image, Layout } from 'antd';\nimport { connect } from 'react-redux';\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun\n} from '../../../store/actions';\nimport SelectPatient from '../../../assets/img/SelectPatient.png'\nimport _ from 'lodash';\nimport './LinkEquipment.less';\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n    let { mellaConnectStatus } = hardwareMessage;\n    return (\n\n        <Content className={\"contentBox\"}>\n            <div className='chackPatientBox' style={{ flexDirection: 'column' }}>\n                <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n                <p className='chackPatientTitle'>Select a patient</p>\n            </div>\n        </Content>\n\n    );\n}\nexport default connect(\n    state => ({\n        petMessage: state.petReduce.petDetailInfo,\n        hardwareMessage: state.hardwareReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setMellaConnectStatusFun,\n        setMellaMeasureValueFun,\n        setMellaPredictValueFun,\n        setMellaMeasurePartFun\n    }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",["1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185","1186","1187","1188","1189"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Layout,\n  Radio,\n  Input,\n  Space,\n  Button,\n  message,\n  Modal,\n  Spin,\n} from \"antd\";\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\n\n\nimport dogHead from \"./../../../assets/img/dogHead.png\";\nimport dogNeck from \"./../../../assets/img/dogNeck.png\";\nimport dogUpper from \"./../../../assets/img/dogUpper.png\";\nimport dogLower from \"./../../../assets/img/dogLower.png\";\nimport dogTorso from \"./../../../assets/img/dogTorso.png\";\nimport dogBody from \"./../../../assets/img/dogBody.png\";\nimport dogHindlimb from \"./../../../assets/img/dogHindlimb.png\";\nimport dogForelimbLength from \"./../../../assets/img/dogForelimbLength.png\";\nimport dogForelimbCircumference from \"./../../../assets/img/dogForelimbCircumference.png\";\n\nimport dogHead_D from \"./../../../assets/img/dogHead_D.png\";\nimport dogNeck_D from \"./../../../assets/img/dogNeck_D.png\";\nimport dogUpper_D from \"./../../../assets/img/dogUpper_D.png\";\nimport dogLower_D from \"./../../../assets/img/dogLower_D.png\";\nimport dogTorso_D from \"./../../../assets/img/dogTorso_D.png\";\nimport dogBody_D from \"./../../../assets/img/dogBody_D.png\";\nimport dogHindlimb_D from \"./../../../assets/img/dogHindlimb_D.png\";\nimport dogForelimbLength_D from \"./../../../assets/img/dogForelimbLength_D.png\";\nimport dogForelimbCircumference_D from \"./../../../assets/img/dogForelimbCircumference_D.png\";\n\nimport catHead from \"./../../../assets/img/catHead.png\";\nimport catNeck from \"./../../../assets/img/catNeck.png\";\nimport catUpper from \"./../../../assets/img/catUpper.png\";\nimport catLower from \"./../../../assets/img/catLower.png\";\nimport catTorso from \"./../../../assets/img/catTorso.png\";\nimport catBody from \"./../../../assets/img/catBody.png\";\nimport catHindlimb from \"./../../../assets/img/catHindlimb.png\";\nimport catForelimbLength from \"./../../../assets/img/catForelimbLength.png\";\nimport catForelimbCircumference from \"./../../../assets/img/catForelimbCircumference.png\";\n\nimport catHead_D from \"./../../../assets/img/catHead_D.png\";\nimport catNeck_D from \"./../../../assets/img/catNeck_D.png\";\nimport catUpper_D from \"./../../../assets/img/catUpper_D.png\";\nimport catLower_D from \"./../../../assets/img/catLower_D.png\";\nimport catTorso_D from \"./../../../assets/img/catTorso_D.png\";\nimport catBody_D from \"./../../../assets/img/catBody_D.png\";\nimport catHindlimb_D from \"./../../../assets/img/catHindlimb_D.png\";\nimport catForelimbLength_D from \"./../../../assets/img/catForelimbLength_D.png\";\nimport catForelimbCircumference_D from \"./../../../assets/img/catForelimbCircumference_D.png\";\n\nimport amplification from './../../../assets/img/amplification.png';\nimport shrink from './../../../assets/img/shrink.png';\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n  setSelectHardwareType\n} from \"../../../store/actions\";\n\nimport { KgtoLb } from '../../../utils/commonFun';\nimport { px } from \"../../../utils/px\";\nimport NumericInput from \"./numericInput\";\nimport {\n  getRecentPetData\n} from \"./../../../api\";\n\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\nimport { useGetState } from 'ahooks';\n\nimport \"./scanPet.less\";\n\nconst { Content } = Layout;\nconst ScanPet = ({\n  petMessage,\n  ruleMessage,\n  setRulerUnitFun,\n  type,\n  setMeasureData,\n  setSelectHardwareType,\n}) => {\n  let history = useHistory();\n  let {\n    petSpeciesBreedId,\n    petId,\n    weight,\n    torsoLength,\n    l2rarmDistance,\n    upperTorsoCircumference,\n    lowerTorsoCircumference,\n    h2tLength,\n    neckCircumference,\n    hindLimbLength,\n    foreLimbLength,\n    foreLimbCircumference\n  } = petMessage;\n  let {\n    rulerMeasureValue,\n    rulerConfirmCount,\n    rulerUnit,\n    rulerConnectStatus,\n    selectHardwareInfo,\n    receiveBroadcastHardwareInfo,\n    biggieUnit\n  } = ruleMessage;\n  const [radioValue, setRadioValue] = useState(\"in\");//单位\n  const [inputIndex, setInputIndex] = useState(-1);//输入框下标\n  const [missInputIndex, setMissInputIndex] = useState(0);//输入框下标\n  const [carouselIndex, setCarouselIndex] = useState(1);//小小圆点下标\n\n  const [headValue, setHeadValue] = useState(\"\"); //接收输入框的值\n  const [neckValue, setNeckValue] = useState(\"\"); //接收输入框的值\n  const [upperValue, setUpperValue] = useState(\"\"); //接收输入框的值\n  const [lowerValue, setLowerValue] = useState(\"\"); //接收输入框的值\n  const [torsoValue, setTorsoValue] = useState(\"\"); //接收输入框的值\n  const [bodyValue, setBodyValue] = useState(\"\"); //接收输入框的值\n  const [hindlimbValue, setHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [forelimbLengthValue, setForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [forelimbCircumferenceValue, setForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [missHeadValue, setMissHeadValue] = useState(\"\"); //接收输入框的值\n  const [missNeckValue, setMissNeckValue] = useState(\"\"); //接收输入框的值\n  const [missUpperValue, setMissUpperValue] = useState(\"\"); //接收输入框的值\n  const [missLowerValue, setMissLowerValue] = useState(\"\"); //接收输入框的值\n  const [missTorsoValue, setMissTorsoValue] = useState(\"\"); //接收输入框的值\n  const [missBodyValue, setMissBodyValue] = useState(\"\"); //接收输入框的值\n  const [missHindlimbValue, setMissHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbLengthValue, setMissForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbCircumferenceValue, setMissForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [lastHeadValue, setLastHeadValue] = useState(\"\"); //上一次测量的值\n  const [lastNeckValue, setLastNeckValue] = useState(\"\"); //上一次测量的值\n  const [lastUpperValue, setLastUpperValue] = useState(\"\"); //上一次测量的值\n  const [lastLowerValue, setLastLowerValue] = useState(\"\"); //上一次测量的值\n  const [lastTorsoValue, setLastTorsoValue] = useState(\"\"); //上一次测量的值\n  const [lastBodyValue, setLastBodyValue] = useState(\"\"); //上一次测量的值\n  const [lastHindlimbValue, setLastHindlimbValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbLengthValue, setLastForelimbLengthValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbCircumferenceValue, setLastForelimbCircumferenceValue] = useState(\"\"); //上一次测量的值\n\n  const [loding, setLoding] = useState(false);//界面加载\n  const [lookType, setLookType] = useState(false);//用户查看局部放大图片\n  const [weightTipVisible, setWeightTipVisible] = useState(false);//体重是否为空的弹窗\n  const [missMeasureVisible, setMissMeasureVisible] = useState(false);//是否有遗漏测量的弹窗\n  const [lastWeightValue, setLastWeightValue] = useState('');//最近一次的体重值\n  const [lastWeightTimeValue, setLastWeightTimeValue] = useState('');//最近一次的体重测量时间\n  const [lastRuleTimeValue, setLastRuleTimeValue] = useState('');//最近一次的尺子测量时间\n\n  let newData = [];\n  let missNewData = [];\n\n  //保存input组，为了选中\n  const inputEl = (data) => {\n    newData.push(data);\n  };\n  //保存遗漏的input组，为了选中\n  const missInputEl = (data) => {\n    missNewData.push(data);\n  }\n  //切换聚焦事件\n  const switchFocus = () => {\n    let num = inputIndex;\n    if (num === 3) {\n      setCarouselIndex(2);\n    }\n    if (num === 7) {\n      setCarouselIndex(3);\n    }\n    if (num < 8) {\n      setInputIndex(num + 1);\n    }\n  };\n  //切换到计算界面，判断测量结果是否有遗漏\n  const finishScan = () => {\n    if (headValue && neckValue && upperValue && lowerValue && torsoValue && bodyValue && hindlimbValue && forelimbLengthValue && forelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue,\n        neckValue: neckValue,\n        upperValue: upperValue,\n        lowerValue: lowerValue,\n        torsoValue: torsoValue,\n        bodyValue: bodyValue,\n        hindlimbValue: hindlimbValue,\n        forelimbLengthValue: forelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue,\n      });\n    } else {\n      setMissHeadValue(headValue);\n      setMissNeckValue(neckValue);\n      setMissUpperValue(upperValue);\n      setMissLowerValue(lowerValue);\n      setMissTorsoValue(torsoValue);\n      setMissBodyValue(bodyValue);\n      setMissHindlimbValue(hindlimbValue);\n      setMissForelimbLengthValue(forelimbLengthValue);\n      setMissForelimbCircumferenceValue(forelimbCircumferenceValue);\n      setMissMeasureVisible(true);\n    }\n  };\n  //判断是猫还是狗还是其他\n  const checkPetType = () => {\n    //0是猫，1是狗，或者petSpeciesBreedId为空判断图片为狗\n    if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n      return 0;\n    } else if (\n      petSpeciesBreedId === 12001 ||\n      _.inRange(petSpeciesBreedId, 136, 456)\n    ) {\n      return 1;\n    } else {\n      return 1;\n    }\n  };\n  //用户点击放大按钮查看局部详情\n  const onLookImage = (type) => {\n    setLookType(type);\n  }\n  //切换整体图片\n  const changeImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return checkPetType() === 1 ? (\n          <img src={dogHead} width='320px' />\n        ) : (\n          <img src={catHead} width='320px' />\n        );\n      case 1:\n        return checkPetType() === 1 ? (\n          <img src={dogNeck} width='320px' />\n        ) : (\n          <img src={catNeck} width='320px' />\n        );\n      case 2:\n        return checkPetType() === 1 ? (\n          <img src={dogUpper} width='320px' />\n        ) : (\n          <img src={catUpper} width='320px' />\n        );\n      case 3:\n        return checkPetType() === 1 ? (\n          <img src={dogLower} width='320px' />\n        ) : (\n          <img src={catLower} width='320px' />\n        );\n      case 4:\n        return checkPetType() === 1 ? (\n          <img src={dogTorso} width='320px' />\n        ) : (\n          <img src={catTorso} width='320px' />\n        );\n      case 5:\n        return checkPetType() === 1 ? (\n          <img src={dogBody} width='320px' />\n        ) : (\n          <img src={catBody} width='320px' />\n        );\n      case 6:\n        return checkPetType() === 1 ? (\n          <img src={dogHindlimb} width='320px' />\n        ) : (\n          <img src={catHindlimb} width='320px' />\n        );\n      case 7:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbLength} width='320px' />\n        ) : (\n          <img src={catForelimbLength} width='320px' />\n        );\n      case 8:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n      default:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n    }\n  };\n  //切换局部放大图片\n  const changeLookImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Head<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHead_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHead_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 1:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Neck<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogNeck_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catNeck_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 2:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Upper Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogUpper_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catUpper_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 3:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lower Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogLower_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catLower_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 4:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Torso<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogTorso_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catTorso_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 5:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Body<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogBody_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catBody_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 6:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Hindlimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHindlimb_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHindlimb_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 7:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbLength_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbLength_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 8:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbCircumference_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbCircumference_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      default:\n        return;\n    }\n  }\n  //点击输入框事件\n  const clickInput = (index) => {\n    setInputIndex(index);\n  };\n  //点击遗漏输入框事件\n  const missClickInput = (index) => {\n    setMissInputIndex(index);\n  }\n  //单位转化\n  const changeUnit = (value) => {\n    if (rulerUnit === \"cm\") {\n      return _.round(value * 2.54, 1);\n    } else if (rulerUnit === \"in\") {\n      return _.floor(_.divide(value, 2.54), 2);\n    }\n  };\n  //单选框改变事件\n  const changeRadio = (e) => {\n    setRadioValue(e.target.value);\n    setRulerUnitFun(e.target.value);\n  };\n  //左箭头点击事件\n  const letfClick = () => {\n    if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(1);\n    } else if (inputIndex === 8) {\n      setCarouselIndex(2);\n    }\n\n  }\n  //右箭头点击事件\n  const rightClick = () => {\n    if (_.inRange(inputIndex, 0, 4)) {\n      setCarouselIndex(2);\n    } else if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(3);\n    }\n  }\n  //切换宠物获取到长度信息,对数据根据界面单位进行换算\n  const petLengthDataConvert = (val) => {\n    if (!val) {\n      return \"\";\n    } else {\n      if (rulerUnit === \"cm\") {\n        return val.toFixed(1);\n      } else {\n        return _.floor(_.divide(val, 2.54), 2);\n      }\n    }\n  };\n  //放大输入框的值\n  const onValue = () => {\n    switch (inputIndex) {\n      case 0:\n        return headValue;\n      case 1:\n        return neckValue;\n      case 2:\n        return upperValue;\n      case 3:\n        return lowerValue;\n      case 4:\n        return torsoValue;\n      case 5:\n        return bodyValue;\n      case 6:\n        return hindlimbValue;\n      case 7:\n        return forelimbLengthValue;\n      case 8:\n        return forelimbCircumferenceValue;\n      default:\n        return headValue;\n    }\n  }\n  //放大输入框的输入事件\n  const onOnChange = () => {\n    switch (inputIndex) {\n      case 0:\n        return setHeadValue;\n      case 1:\n        return setNeckValue;\n      case 2:\n        return setUpperValue;\n      case 3:\n        return setLowerValue;\n      case 4:\n        return setTorsoValue;\n      case 5:\n        return setBodyValue;\n      case 6:\n        return setHindlimbValue;\n      case 7:\n        return setForelimbLengthValue;\n      case 8:\n        return setForelimbCircumferenceValue;\n      default:\n        return setHeadValue;\n    }\n  }\n  //上一次历史数据展示\n  const historyData = () => {\n    switch (carouselIndex) {\n      case 1:\n        return (\n          <Space className=\"historyData\">\n            <p>{lastHeadValue}</p>\n            <p>{lastNeckValue}</p>\n            <p>{lastUpperValue}</p>\n            <p>{lastLowerValue}</p>\n          </Space>\n        );\n      case 2:\n        return <Space className=\"historyData\">\n          <p>{lastTorsoValue}</p>\n          <p>{lastBodyValue}</p>\n          <p>{lastHindlimbValue}</p>\n          <p>{lastForelimbLengthValue}</p>\n        </Space>;\n      case 3:\n        return <Space className=\"historyData\">\n          <p>{lastForelimbCircumferenceValue}</p>\n        </Space>;\n      default:\n        return <Space className=\"historyData\">\n          <p>{lastHeadValue}</p>\n          <p>{lastNeckValue}</p>\n          <p>{lastUpperValue}</p>\n          <p>{lastLowerValue}</p>\n        </Space>;\n    }\n  }\n  //用户忽视体重为空\n  const onCancel = () => {\n    setWeightTipVisible(false);\n  }\n  //用户更新宠物体重信息\n  const updatePetMessage = () => {\n    //跳转到编辑宠物信息页面\n    history.push(\"/page9\");\n  }\n  //用户前往体脂秤界面进行测量体重\n  const goToBiggieScale = () => {\n    setSelectHardwareType('biggie');\n    //跳转到mainBody界面\n    history.push(\"/MainBody\");\n  }\n  //用户完成遗漏的数值填写\n  const saveMiss = () => {\n    if (missHeadValue && missNeckValue && missUpperValue && missLowerValue && missTorsoValue && missBodyValue && missHindlimbValue && missForelimbLengthValue && missForelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue || missHeadValue,\n        neckValue: neckValue || missNeckValue,\n        upperValue: upperValue || missUpperValue,\n        lowerValue: lowerValue || missLowerValue,\n        torsoValue: torsoValue || missTorsoValue,\n        bodyValue: bodyValue || missBodyValue,\n        hindlimbValue: hindlimbValue || missHindlimbValue,\n        forelimbLengthValue: forelimbLengthValue || missForelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue || missForelimbCircumferenceValue,\n      });\n    } else {\n      message.warning('Please complete the missing values');\n    }\n\n  }\n  //获取上一次测量的体重和上一次的尺子测量值\n  const getRecentPet = () => {\n    setLoding(true);\n    getRecentPetData(petId)\n      .then((res) => {\n        setLoding(false);\n        if (res.msg === 'success') {\n          if (res.ruler.updateTime) {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLastLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setLastUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setLastNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setLastHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setLastTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setLastHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setLastForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(res.ruler.updateTime);\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n          } else {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(\"\"));\n            setLastLowerValue(petLengthDataConvert(\"\"));\n            setLastUpperValue(petLengthDataConvert(\"\"));\n            setLastNeckValue(petLengthDataConvert(\"\"));\n            setLastHeadValue(petLengthDataConvert(\"\"));\n            setLastTorsoValue(petLengthDataConvert(\"\"));\n            setLastHindlimbValue(petLengthDataConvert(\"\"));\n            setLastForelimbLengthValue(petLengthDataConvert(\"\"));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(\"\");\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(\"\"));\n            setLowerValue(petLengthDataConvert(\"\"));\n            setUpperValue(petLengthDataConvert(\"\"));\n            setNeckValue(petLengthDataConvert(\"\"));\n            setHeadValue(petLengthDataConvert(\"\"));\n            setTorsoValue(petLengthDataConvert(\"\"));\n            setHindlimbValue(petLengthDataConvert(\"\"));\n            setForelimbLengthValue(petLengthDataConvert(\"\"));\n            setForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n          }\n          if (res.weight) {\n            setLastWeightValue(biggieUnit === 'kg' ? res.weight.weight : KgtoLb(res.weight.weight));\n            setLastWeightTimeValue(res.weight.createTime);\n          } else {\n            setLastWeightValue('');\n            setLastWeightTimeValue('');\n          }\n        } else {\n          message.error('The latest data cannot be obtained');\n        }\n      })\n      .catch((err) => {\n        setLoding(false);\n        message.error('The latest data cannot be obtained');\n      })\n  }\n  //判断上一次测量的体重是否超过一个月\n  const judgeWightTime = () => {\n    let newTime = moment();\n    let diffTime = newTime.diff(moment(lastWeightTimeValue), 'month');\n    if (diffTime >= 1 && lastWeightValue) {\n      return (\n        <p className=\"historyWeightWarningTitle\">Last date Weighed was {moment(lastWeightTimeValue).format(\"LL\")}.Please\n          <a onClick={() => updatePetMessage()}>update the pet's weight</a>.\n        </p>\n      );\n    } else if (diffTime === 0 && lastWeightValue) {\n      return <p className=\"historyWeightTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}: {lastWeightValue} {biggieUnit === 'kg' ? 'kg' : 'lbs'}</p>\n    } else {\n      return null\n    }\n  }\n\n  //监听切换了宠物\n  useEffect(() => {\n    setInputIndex(0);\n    setCarouselIndex(1);\n    //获取上一次测量的体重\n    getRecentPet();\n    //检测宠物体重是否为空\n    if (!weight) {\n      setWeightTipVisible(true)\n    }\n    return () => { };\n  }, [petId]);\n  //监听点击界面中下一步按钮\n  useEffect(() => {\n    console.log(\"inputIndex\", inputIndex);\n\n    if (inputIndex < 9 && inputIndex !== -1) {\n      newData[inputIndex].focus();\n    }\n    if (inputIndex === 9) {\n      finishScan();\n    }\n    return () => { };\n  }, [inputIndex]);\n  //监听切换\n  useEffect(() => {\n    switch (carouselIndex) {\n      case 1:\n        setInputIndex(0);\n        break;\n      case 2:\n        setInputIndex(4);\n        break;\n      case 3:\n        setInputIndex(8);\n        break;\n      default:\n        setInputIndex(0);\n        break;\n    }\n    return () => { };\n  }, [carouselIndex]);\n  //监听用户点击了硬件中的下一步按钮\n  useEffect(() => {\n    if (inputIndex === -1) {\n      setInputIndex(0);\n    } else if (inputIndex < 9) {\n      setInputIndex(inputIndex + 1);\n    }\n    if (inputIndex === 3) {\n      setCarouselIndex(2);\n    }\n    if (inputIndex === 7) {\n      setCarouselIndex(3);\n    }\n    return () => { };\n  }, [rulerConfirmCount]);\n  //监听用户点击了硬件中的下一步按钮和拉动皮尺\n  useEffect(() => {\n    if (inputIndex < 9) {\n      let { deviceType, mac } = selectHardwareInfo;\n      if (deviceType === 'tape') {\n        if (mac === null || (mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac)) {\n          switch (inputIndex) {\n            case 0:\n              setHeadValue(rulerMeasureValue);\n              break;\n            case 1:\n              setNeckValue(rulerMeasureValue);\n              break;\n            case 2:\n              setUpperValue(rulerMeasureValue);\n              break;\n            case 3:\n              setLowerValue(rulerMeasureValue);\n              break;\n            case 4:\n              setTorsoValue(rulerMeasureValue);\n              break;\n            case 5:\n              setBodyValue(rulerMeasureValue);\n              break;\n            case 6:\n              setHindlimbValue(rulerMeasureValue);\n              break;\n            case 7:\n              setForelimbLengthValue(rulerMeasureValue);\n              break;\n            case 8:\n              setForelimbCircumferenceValue(rulerMeasureValue);\n              break;\n            default:\n              break;\n          }\n          if (rulerUnit !== radioValue) {\n            setRadioValue(rulerUnit);\n            setHeadValue(headValue && changeUnit(headValue));\n            setNeckValue(neckValue && changeUnit(neckValue));\n            setUpperValue(upperValue && changeUnit(upperValue));\n            setLowerValue(lowerValue && changeUnit(lowerValue));\n            setTorsoValue(torsoValue && changeUnit(torsoValue));\n            setBodyValue(bodyValue && changeUnit(bodyValue));\n            setHindlimbValue(hindlimbValue && changeUnit(hindlimbValue));\n            setForelimbLengthValue(forelimbLengthValue && changeUnit(forelimbLengthValue));\n            setForelimbCircumferenceValue(forelimbCircumferenceValue && changeUnit(forelimbCircumferenceValue));\n          }\n        }\n      }\n    }\n  }, [rulerConfirmCount, rulerMeasureValue]);\n\n  return (\n    <>\n      <Content className=\"scanContentBox\">\n        <Spin spinning={loding} size=\"large\" wrapperClassName=\"scanPageLoding\">\n          <div className=\"historyWeightBox\">\n            {\n              judgeWightTime()\n            }\n          </div>\n          {\n            lookType ?\n              (\n                <>\n                  <div className=\"lookImageBox\">\n                    {changeLookImage()}\n                    < img src={shrink} className=\"checkImage\" onClick={() => onLookImage(false)} />\n                  </div>\n                  <div className=\"lookInputBox\">\n                    <NumericInput\n                      value={onValue()}\n                      onChange={onOnChange()}\n                      onClick={() => clickInput(inputIndex)}\n                      index={inputIndex}\n                      indexkey={inputIndex}\n                      changesize={'32px'}\n                    />\n                  </div>\n                </>\n              ) :\n              (\n                <div className=\"scanImageBox\">\n                  {changeImage()}\n                  < img src={amplification} className=\"checkImage\" onClick={() => onLookImage(true)} />\n                </div>\n              )\n          }\n          {/*选择单位框*/}\n          <Radio.Group\n            value={radioValue}\n            onChange={changeRadio}\n            buttonStyle=\"solid\"\n            className=\"selectLengthUnit\"\n          >\n            <Radio.Button\n              value=\"in\"\n              className=\"inButton\"\n              style={{\n                background: radioValue === \"in\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"in\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopRightRadius: \"0px\",\n                borderBottomRightRadius: \"0px\",\n              }}\n            >\n              in\n            </Radio.Button>\n            <Radio.Button\n              value=\"cm\"\n              className=\"cmButton\"\n              style={{\n                background: radioValue === \"cm\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"cm\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopLeftRadius: \"0px\",\n                borderBottomLeftRadius: \"0px\",\n              }}\n            >\n              cm\n            </Radio.Button>\n          </Radio.Group>\n          {/**输入框 */}\n          <div className=\"slideshowBox\" style={{ height: px(100) }}>\n            <div className=\"leftImageBox\" onClick={() => letfClick()}>\n              <LeftOutlined style={{ fontSize: '24px', visibility: carouselIndex === 1 ? 'hidden' : 'visible' }} />\n            </div>\n            <div className=\"scollInputGroup\">\n              {/*第一列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 1 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Head Circumference</p>\n                    <NumericInput\n                      value={headValue}\n                      onChange={setHeadValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(0)}\n                      index={inputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={neckValue}\n                      onChange={setNeckValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(1)}\n                      index={inputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={upperValue}\n                      onChange={setUpperValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(2)}\n                      index={inputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={lowerValue}\n                      onChange={setLowerValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(3)}\n                      index={inputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第二列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 2 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={torsoValue}\n                      onChange={setTorsoValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(4)}\n                      index={inputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={bodyValue}\n                      onChange={setBodyValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(5)}\n                      index={inputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={hindlimbValue}\n                      onChange={setHindlimbValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(6)}\n                      index={inputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={forelimbLengthValue}\n                      onChange={setForelimbLengthValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(7)}\n                      index={inputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第三列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 3 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={forelimbCircumferenceValue}\n                      onChange={setForelimbCircumferenceValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(8)}\n                      index={inputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n            </div>\n            <div className=\"rightImageBox\" onClick={() => rightClick()}>\n              <RightOutlined style={{ fontSize: '24px', visibility: carouselIndex === 3 ? 'hidden' : 'visible' }} />\n            </div>\n          </div>\n          {/*历史测量数据展示*/}\n          <div className=\"historyBox\">\n            <div className=\"historyTimeBox\">\n              {\n                lastRuleTimeValue && (\n                  <p>{`Previously Measured on ${moment(lastRuleTimeValue).format('L')}`}</p>\n                )\n              }\n            </div>\n            <div className=\"historyDataBox\">\n              {historyData()}\n            </div>\n\n          </div>\n          {/*下一步 */}\n          <div className=\"nextBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              className=\"nextBtn\"\n              onClick={inputIndex > 7 ? finishScan : switchFocus}\n            >\n              {inputIndex > 7 ? \"Calculate\" : \"Next\"}\n            </Button>\n          </div>\n        </Spin>\n      </Content>\n      <Modal\n        open={weightTipVisible}\n        width={320}\n        className='weightTipModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">Weight Required</p>\n          <div className=\"tipTitleBox\">\n            <p className=\"tipTitle\">\n              This pet's weight has not been\n            </p>\n            <p className=\"tipTitle\">\n              entered into their profile. Update\n            </p>\n            <p className=\"tipTitle\">\n              their pet profile with the weight or\n            </p>\n            <div className=\"tipTitle\">\n              use the\n              <p onClick={() => goToBiggieScale()}>Biggie Scale</p>\n              .\n            </div>\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => onCancel()}\n              className=\"modalBtn\"\n            >\n              Skip\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => updatePetMessage()}\n              className=\"modalBtn\"\n            >\n              Update Profile\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      <Modal\n        open={missMeasureVisible}\n        width={432}\n        className='missMeasureModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">You've missed these measurements</p>\n          <p className=\"title\">Enter these missing readings</p>\n          <div className=\"inputBox\">\n            {\n              headValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missHeadValue}\n                      onChange={setMissHeadValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(0)}\n                      index={missInputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              neckValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={missNeckValue}\n                      onChange={setMissNeckValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(1)}\n                      index={missInputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              upperValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={missUpperValue}\n                      onChange={setMissUpperValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(2)}\n                      index={missInputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                )\n            }\n            {\n              lowerValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={missLowerValue}\n                      onChange={setMissLowerValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(3)}\n                      index={missInputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                )\n            }\n            {\n              torsoValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missTorsoValue}\n                      onChange={setMissTorsoValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(4)}\n                      index={missInputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                )\n            }\n            {\n              bodyValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={missBodyValue}\n                      onChange={setMissBodyValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(5)}\n                      index={missInputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                )\n            }\n            {\n              hindlimbValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={missHindlimbValue}\n                      onChange={setMissHindlimbValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(6)}\n                      index={missInputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbLengthValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={missForelimbLengthValue}\n                      onChange={setMissForelimbLengthValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(7)}\n                      index={missInputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbCircumferenceValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={missForelimbCircumferenceValue}\n                      onChange={setMissForelimbCircumferenceValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(8)}\n                      index={missInputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                )\n            }\n\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => setMissMeasureVisible(false)}\n              className=\"modalBtn\"\n            >\n              cancel\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => saveMiss()}\n              className=\"modalBtn\"\n            >\n              Save and Calculate\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n    setSelectHardwareType,\n  }\n)(ScanPet);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js",["1190","1191","1192"],"/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/user`\r\n\r\n\r\nexport const changeLatestWorkplace = (userId, workplaceId, roleId = 2) => {\r\n    return get(`${baseURL}/changeLatestWorkplace/${userId}/${roleId}/${workplaceId}`,\r\n        '')\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js",["1193","1194","1195"],"/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/pet`\r\n\r\n\r\n\r\n\r\n\r\nexport const getPetInfoByRFID = (heardSearchText, lastOrganization) => {\r\n    return get(`${baseURL}/getPetInfoByRFID/${heardSearchText}/${lastOrganization}`, '')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js",["1196","1197"],"/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/EzyVet`\r\n\r\n\r\n\r\n\r\nexport const ezyvetGetPetLatestExam = (params) => {\r\n    return get(`${baseURL}/ezyvetGetPetLatestExam`, params)\r\n}\r\n\r\n\r\nexport const ezyvetUpdateWeight = (paramId, params) => {\r\n    return patch(`${baseURL}/ezyvetUpdateWeight/${paramId}`, params)\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx",["1198","1199","1200","1201","1202","1203","1204","1205","1206","1207"],"import React, { Component } from 'react'\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\nimport './unassignModal.less'\nimport Draggable from \"react-draggable\";\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport {\n  getPetExamByDoctorId,\n  selectBreedBySpeciesId,\n  checkPatientId,\n  addDeskPet,\n  addAndSavePetExam,\n  deletePetExamByExamId,\n  listAllPetInfo\n} from './../../api';\n\nimport Close from \"./../../assets/img/close.png\";\n\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { mTop, px, MTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport MyModal from \"../../utils/myModal/MyModal\";\nimport Button from \"./../../utils/button/Button\";\n\nimport moment from \"moment\";\n\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\n\n\n\nexport default class UnassignModal extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    workplaceId: storage.lastWorkplaceId,\n    loadingPets: false,\n  };\n\n  componentDidMount() {\n\n    if (this.props.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n\n\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('prevProps', prevProps, prevState);\n    if (this.props.assignVisible !== this.state.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n    if (this.props.lastWorkplaceId !== this.state.workplaceId) {\n      this.setState({\n        petListData: [],\n        workplaceId: this.props.lastWorkplaceId\n      })\n\n      this.gerAllPetMsg();\n\n    }\n    if (this.props.seleceEmergencies !== this.state.seleceEmergencies) {\n      this.setState({\n        seleceEmergencies: this.props.seleceEmergencies\n      })\n    }\n\n  }\n\n\n\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n\n    getPetExamByDoctorId(storage.userId)\n      .then((res) => {\n        console.log(\"---res\", res);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let day = moment().diff(moment(createTime), \"day\");\n              // console.log(day);\n              if (day > 3) {\n                continue;\n              }\n\n              let Tem = temperature;\n              try {\n                if (clinicalDataEntity) {\n                  Tem = temperature || clinicalDataEntity.data0;\n                }\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n                day,\n              };\n\n              historys.push(str);\n            }\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          this.setState({\n            historyData,\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    selectBreedBySpeciesId({ speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n          selectBreedBySpeciesId({ speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('获取列表');\n    this.setState({\n      loadingPets: true,\n    })\n    listAllPetInfo(params)\n      .then((res) => {\n        console.log('res33: ', res);\n        this.setState({\n          loadingPets: false,\n        })\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadingPets: false,\n        })\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n          checkPatientId(datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n\n      addDeskPet(this.state.assignPatientId, petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  this.props.success(true)\n\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        open={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      deletePetExamByExamId(key, '')\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              console.log(\"删除成功\");\n              const historyData = [...this.state.historyData];\n              console.log(historyData);\n              this.setState({\n                historyData: historyData.filter((item) => item.historyId !== key),\n              });\n            } else {\n              console.log(\"删除失败\");\n            }\n          }\n        );\n    };\n\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n\n    return (\n      <div id='unassignedModal111'>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                          this.props.onChangeVisible(false)\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this.state.loadingPets ?\n                    <div style={{ display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                      <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                        <LoadingOutlined style={{ fontSize: 30, color: '#000', marginTop: mTop(-30), }} />\n                      </div>\n                      <p style={{ color: '#000' }}>\n                        {'loading...'}\n                      </p>\n                    </div> :\n                    this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                        this.props.onChangeVisible(false)\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                this.props.success(true)\n\n                                this.setState({\n                                  assignVisible: false,\n                                });\n                                this.props.onChangeVisible(false)\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n        {this._modal()}\n      </div>\n\n    )\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx",["1208","1209","1210","1211","1212","1213","1214","1215","1216"],"import React, { useEffect, useState } from 'react'\nimport {\n  Dropdown,\n  Menu,\n  Select,\n  Tooltip,\n  Spin,\n  message\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport petIcon from './../../assets/img/petIcon.png'\nimport xia from './../../assets/img/xia.png'\nimport MyModal from './../../utils/myModal/MyModal'\nimport redjinggao from './../../assets/img/redjinggao.png'\nimport orgicn from './../../assets/img/orgicn.png'\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\n\nimport { px } from '../../utils/px';\nimport { changeThemeColor } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petSortTypeFun, petDetailInfoFun, setPetListArrFun, setMenuNum } from '../../store/actions';\nimport { useHistory } from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport moment from 'moment';\nimport _ from 'lodash';\nimport { useThrottleFn } from 'ahooks';\n\nimport './mainbody.less'\nimport { listAllPetInfo } from '../../api';\n\nlet storage = window.localStorage;\n\nconst { Option } = Select;\n\nconst PetsUI = ({\n  bodyHeight,\n  petSortTypeFun,\n  petSortType,\n  petDetailInfoFun,\n  petDetailInfo,\n  setPetListArrFun,\n  petListArr,\n  selectHardwareType,\n  rulerConnectStatus,\n  selectHardwareInfo,\n  receiveBroadcastHardwareInfo,\n  setMenuNum\n}) => {\n  const history = useHistory();\n  //定义宠物列表数组\n  const [petList, setPetList] = useState([])\n  //是否展示弹窗\n  const [showModal, setShowModal] = useState(false)\n  //选中的宠物的详细信息\n  const [selectPetDetail, setSelectPetDetail] = useState({})\n  //获取宠物列表加载动画\n  const [loading, setLoading] = useState(false)\n  const [orgArr, setOrgArr] = useState([])\n  const [workplaceJson, setWorkplaceJson] = useState({})\n  const [connectionKey, setConnectionKey] = useState(\"\")\n  const [selectOrgId, setSelectOrgId] = useState(-1)\n  const [selectRoleId, setSelectRoleId] = useState(\"\")\n  const [workplaceName, setWorkplaceName] = useState(\"\")\n  const [workplaceId, setWorkplaceId] = useState()\n  const [organizationName, setOrganizationName] = useState(\"\")\n  const [color, setColor] = useState('#e1206d');//颜色切换\n  const [pageSize, setPageSize] = useState(20); // 每页20条\n  const [total, setTotal] = useState(0);//宠物列表数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //获取组织列表\n  const getOrgList = () => {\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          setWorkplaceName(workplaceName)\n          setWorkplaceId(workplaceId)\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n\n          setOrganizationName(name)\n          setSelectOrgId(storage.lastOrganization)\n          storage.orgName = name\n\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n\n    setOrgArr(orgArr)\n    setWorkplaceJson(workplaceJson)\n    setConnectionKey(storage.connectionKey)\n    setSelectRoleId(storage.roleId)\n\n  }\n  //获取宠物列表数据\n  const _getExam = (currPage = 1) => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      pageSize: pageSize,\n      currPage: currPage,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    //TODO逻辑好像还有问题\n    listAllPetInfo(params)\n      .then(res => {\n        setLoading(false);\n        if (res.flag === true) {\n          setTotal(res.data.count);\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.data;\n          } else {\n            let oldArr = petList;\n            let arr = res.data.data;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetList(newArr);\n          setPetListArrFun(newArr);\n        } else if (res.msg === '用户没有关联任何宠物') {\n          message.warn('The user is not associated with any pets');\n          setPetList([]);\n          setPetListArrFun([]);\n        }\n      })\n      .catch(err => {\n        setLoading(false);\n        setPetList([]);\n        setPetListArrFun([]);\n      })\n  }\n  const dataSort = (data, key,) => {\n    if (!key) {\n      key = petSortType\n    }\n    let petList = [].concat(data)\n    switch (key) {\n\n      case 'Time':\n      case 'Recent':\n        petList.sort((a, b) => { return a.createTime > b.createTime ? -1 : 1 })\n        break;\n      case 'Pet ID':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'Owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'Breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'Pet Name':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'Gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    return petList\n  }\n  const menu = () => {\n    let menuList = [\n      // { value: 'Time' },\n      { value: 'Pet ID' },\n      // { value: 'Owner' },\n      // { value: 'Breed' },\n      { value: 'Pet Name' },\n      { value: 'Recent' },\n      // { value: 'Gender' },\n    ];\n    let options = menuList.map((item, index) => {\n      let itemstyle = {}, textColor = '#1a1a1a'\n      if (petSortType === item.value) {\n        itemstyle = { backgroundColor: '#e1206D' }\n        textColor = '#fff'\n      }\n      return (\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\n          <div style={{ color: textColor }}>{item.value}</div>\n        </Menu.Item>\n      )\n    })\n    return (\n      <Menu\n        onClick={({ key, }) => {\n          petSortTypeFun(key)\n          let petArr = dataSort(petList, key,)\n          setPetList(petArr)\n          setPetListArrFun(petArr)\n        }}\n      >\n        {options}\n\n      </Menu>\n    );\n  }\n  //宠物列表\n  const petListUI = () => {\n    let options = petList.map((item, index) => {\n      let itemBac = '', itemColor = '#141414'\n      if (item.petId === petDetailInfo.petId) {\n        itemBac = color\n        itemColor = '#fff'\n      }\n      return (\n        <li key={item.petId} >\n          <div className='petItem'\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\n            onClick={() => {\n              //当硬件是尺子且尺子还在测量的时候,要做出提示\n              setSelectPetDetail(item)\n              let { deviceType, mac } = selectHardwareInfo\n              if ((mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac) && selectHardwareType === 'tape' && rulerConnectStatus !== 'disconnected') {\n                setShowModal(true)\n              } else {\n                petDetailInfoFun(item)\n              }\n            }}\n          >\n            {`${item.patientId}, ${item.petName}`}\n          </div>\n        </li >\n      )\n    });\n    //加载图标\n    const antIcon = (\n      <LoadingOutlined\n        style={{\n          fontSize: 24,\n          color: color,\n        }}\n        spin\n      />\n    );\n\n    return (\n      <div className=\"petList\" onScrollCapture={onScrollCapture}>\n        <ul>\n          {options}\n        </ul>\n        <Spin spinning={loading} indicator={antIcon} />\n      </div>\n    )\n  }\n  //滚动监听\n  const { run: onScrollCapture } = useThrottleFn(() => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.petList ul`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (currPage === _.ceil(total / pageSize)) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      _getExam(currPage + 1);\n    }\n  }, { wait: 1000 });\n  //组织列表\n  const selectOrgUI = () => {\n    const selectOrgFn = (value, option) => {\n      setPetList([]);\n      setTotal(0);\n      setCurrPage(1);\n      setOrganizationName(value);\n      storage.roleId = option.roleid;\n      storage.lastOrganization = option.organizationid;\n      storage.connectionKey = option.connectionkey;\n      storage.orgName = option.value\n\n      try {\n        let key = parseInt(selectOrgId);\n        let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n        storage.lastWorkplaceId = lastWorkplaceId;\n      } catch (error) { }\n      _getExam()\n    }\n    let options = orgArr.map((item, index) => {\n      if (index === 1) {\n      }\n      return (\n        <Option\n          key={`${item.organizationId}`}\n          value={item.organizationName}\n          organizationid={item.organizationId}\n          roleid={item.roleId}\n          connectionkey={item.connectionKey}\n        >\n          {item.organizationName}\n        </Option>\n      )\n    })\n    return (\n      <Select\n        style={{ width: '70%', marginLeft: px(15) }}\n        value={organizationName}\n        onChange={selectOrgFn}\n        popupClassName=\"selectOrgUI\"\n        bordered={false}\n        suffixIcon={<img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10) }} />}\n      >\n        {options}\n      </Select>\n    )\n\n  }\n  //设置宠物列表数据\n  useEffect(() => {\n    setPetList(petListArr);\n    return (() => { });\n  }, [petListArr])\n  //获取组织列表\n  useEffect(() => {\n    getOrgList();\n    _getExam();\n    return (() => { });\n  }, []);\n  //修改颜色\n  useEffect(() => {\n    setColor(changeThemeColor(selectHardwareType));\n  }, [selectHardwareType]);\n\n  return (\n    <div className=\"PetUI11\" style={{ height: bodyHeight - px(100), }}>\n      <MyModal\n        visible={showModal}\n        element={\n          <div className='petUiModal'>\n            <img src={redjinggao} alt=\"\" width={'45px'} style={{ margin: `${px(25)}px 0` }} />\n            <div className='bodyText' style={{ marginTop: px(30) }}>Patient Switched – select dimension to measure</div>\n            <div className=\"btns\" style={{ marginTop: px(35) }}>\n              <div className=\"btn\" onClick={() => { setShowModal(false) }}>Cancel</div>\n              <div className=\"btn\" onClick={() => { setShowModal(false); petDetailInfoFun(selectPetDetail) }}>Confirm</div>\n            </div>\n          </div>\n        }\n      />\n      <div style={{ width: '100%', position: 'relative', height: bodyHeight - px(100), }}>\n        <div className=\"selectOrg\" style={{ width: '100%' }}>\n          <div className=\"title\" style={{ padding: `${px(10)}px 0px ${px(10)}px ${px(20)}px ` }}>\n            <img src={orgicn} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n            <div className=\"titleText\" >{`Organization`}</div>\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            {selectOrgUI()}\n            <Tooltip placement='bottom' title='Add an organization'>\n              <div\n                className=\"addImgBox\"\n                onClick={() => history.push(\"/menuOptions/NewOrg\")}\n\n              >\n                <img\n                  src={deivceAdd}\n                  alt=\"\"\n                  width={px(20)}\n                  style={{ marginLeft: px(12) }}\n                />\n              </div>\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\n          <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n          <div className=\"titleText\" >Pets</div>\n        </div>\n        <div className=\"sort\" style={{ paddingLeft: px(15), display: 'flex' }}>\n          <Dropdown overlay={menu} trigger={['click']}>\n            <div className=\"sortBox\">\n              <div className=\"sortText\" >\n                {`Sort by: ${petSortType}`}\n              </div>\n              <img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10), cursor: 'pointer' }} />\n            </div>\n          </Dropdown>\n          <Tooltip placement='bottom' title='Add a Pet'>\n            <div\n              className=\"addImgBox\"\n              onClick={() =>\n                setMenuNum('AddPet')\n                // history.push(\"/pet/doctorAddPet\")\n              }\n            >\n              <img\n                src={deivceAdd}\n                alt=\"\"\n                width={px(20)}\n                style={{ marginLeft: px(12) }}\n              />\n            </div>\n          </Tooltip>\n\n        </div>\n        {petListUI()}\n        <div className=\"walkBtn\">\n          <div\n            className=\"walkbtnBox\"\n            // 根据主题变换颜色，现在都要改成#e1206d\n            style={{ height: px(40), marginTop: px(15), backgroundColor: '#e1206d' }}\n            onClick={() => {\n              let json = {\n                isWalkIn: true,\n                petId: null,\n                petName: null,\n                owner: null,\n                breed: null,\n              }\n              petDetailInfoFun(json)\n            }}\n          >\n            <div className=\"walkText\">Walk-In</div>\n          </div>\n        </div>\n      </div >\n    </div >\n  )\n}\n\n\nPetsUI.propTypes = {\n  bodyHeight: PropTypes.number\n}\n//默认值\nPetsUI.defaultProps = {\n  bodyHeight: 0\n}\nexport default connect(\n  state => ({\n    petSortType: state.petReduce.petSortType,\n    petDetailInfo: state.petReduce.petDetailInfo,\n    petListArr: state.petReduce.petListArr,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    rulerConnectStatus: state.hardwareReduce.rulerConnectStatus,\n    selectHardwareInfo: state.hardwareReduce.selectHardwareInfo,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n  }),\n  { petSortTypeFun, petDetailInfoFun, setPetListArrFun, setMenuNum }\n)(PetsUI)\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js",["1217","1218"],"/**\r\n * @file product.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/product 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20221121\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/product`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据组织获取所有宠物\r\n * @param {str} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const list = () => {\r\n    return get(`${baseURL}/list`, '')\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js",["1219","1220","1221"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/preOrder 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20221121\n *\n */\nimport { get, postJson, postFormData, postFormData2, del, put } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/preOrder`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\n\n//用户获取订阅信息\nexport const getOrderInfo = (userId) => {\n    return get(`${baseURL}/getOrderInfo/${userId}`, '')\n}\n//生成订单\nexport const buy = (userId, params) => {\n    return postJson(`${baseURL}/${userId}`, params)\n}\n//对订单进行付款\nexport const payForOrder = (preOrderId, params) => {\n    return postFormData2(`${baseURL}/payForOrder/${preOrderId}`, params)\n}\n// //退款,等待审核\n// export const reFund = (preOrderId) => {\n//   return get(`${baseURL}/checkRefund/${preOrderId}`, '')\n// }\n\n//管理员审核退款\nexport const reFund = (preOrderId) => {\n  return postFormData2(`${baseURL}/refund/${preOrderId}`, {\n    isPassCheck: 'true'\n  })\n}\n\n/**\n * 根据订单号获取订单是否支付、过期等\n * @param {string} preOrderId\n * @returns\n */\nexport const getPreOrderById = (preOrderId,) => {\n    return get(`${baseURL}/getPreOrderById/${preOrderId}`, '')\n}\n\n\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js",["1222","1223"],"/**\r\n * @file backend.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/backend 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/backend`\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getOta = (hardWareType) => {\r\n    return get(`${baseURL}/getOta?type=${hardWareType}`)\r\n}","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js",["1224"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/petall 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/petall`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\nexport const pet_petall = (lastOrganization, params) => {\n  return postJson(`${baseURL}/pet/${lastOrganization}/petall`, params)\n}\n/**\n * @dec 根据用户id查询当前组织下的所有宠物\n * @param {*} params\n * @returns\n */\nexport const getPersonPetByUserId = (params) => {\n  return get(`${baseURL}/getPersonPetByUserId?userId=${params.userId}&orgId=${params.orgId}`);\n}\n\n\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js",["1225","1226"],"/**\r\n * @file userfeedback.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/userfeedback 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/userfeedback`\r\n\r\n\r\n/**\r\n * @dec bug提交\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const savefeedback = (params) => {\r\n    return postJson(`${baseURL}/savefeedback`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js",["1227","1228"],"/**\r\n * @file vetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/VetSpire`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据vetspire中的api验证\r\n * @param params \r\n */\r\n\r\nexport const selectLocationsByOrganization = (params) => {\r\n    return postJson(`${baseURL}/selectLocationsByOrganization`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js",["1229"],"/**\r\n * @file organization.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/organization 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/organization`\r\n\r\n\r\n\r\n/**\r\n * @dec  管理员获取组织下的所有医生\r\n * @param {string} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\n\r\nexport const listDoctorsByAdmin = (lastOrganization, params) => {\r\n    return get(`${baseURL}/listDoctorsByAdmin/${lastOrganization}`, params)\r\n}\r\n\r\n/**\r\n * @dec 获取所有组织\r\n * @returns\r\n *\r\n */\r\nexport const listAll = () => {\r\n    return get(`${baseURL}/listAll`, '')\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 创建一个组织\r\n * @param {str} userId 用户id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const addOrganization = (userId, params) => {\r\n    return postJson(`${baseURL}/addOrganization/${userId}`, params)\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js",["1230","1231"],"/**\n * @file clinical.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/clinical 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/clinical`\n\n\n/**\n * @dec 临床测试数据保存\n * @param {*} params\n * @returns\n */\nexport const addAllClinical = (params) => {\n    return postJson(`${baseURL}/addAllClinical`, params)\n}\n\n/**\n * @dec 1.2版本的猫预测\n * @param {*} params\n * @returns\n */\nexport const catv12Predict = (params) => {\n    return postJson(`${baseURL}/catv12Predict`, params)\n}\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx",["1232"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Select,\n} from \"antd\";\n\nimport UploadImg from \"../../utils/uploadImg/UploadImg\";\n\nimport {\n  checkPatientId,\n  selectBreedBySpeciesId,\n} from '../../api';\n\nimport _ from 'lodash';\n\nimport './index.less';\n\nconst AddPetModal = ({ visible, width, title, destroyOnClose, value, onConfirm, onCancel, onLoading }) => {\n  const { Option } = Select;\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [loading, setLoading] = useState(false);//加载\n  const [breedList,  setBreedList] = useState([]);//\n  const [imageId, setImageId] = useState('');//上传后图片id\n  const [patientId, setPatientId] = useState('');//用户输入的病人id\n  const [petName, setPetName] = useState('');//用户输入的宠物名字\n  const [ownerName, setOwnerName] = useState('');//用户输入的主人名字\n  const [breedId, setBreedId] = useState('');//用户选择的宠物品种id\n  const [petAge, setPetAge] = useState('');//用户输入的宠物年龄\n  const [petWeight, setPetWeight] = useState('');//用户输入的宠物体重\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n\n  //确认选择\n  const handleOk = () => {\n    if (patientId === '') {\n      message.error('Please enter the patientId!');\n    } else {\n      setIsModalVisible(visible);\n      onConfirm({\n        imageId: imageId,\n        patientId: patientId,\n        petName: petName,\n        petSpeciesBreedId: breedId,\n        age: petAge,\n        weight: petWeight,\n        owner: ownerName,\n      })\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //判断用户输入的patientId是否存在\n  const getPetInfoByPatientId = () => {\n    setLoading(true);\n    let datas = {\n      patientId: patientId,\n      doctorId: storage.userId\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.organizationId = storage.lastOrganization\n    }\n    checkPatientId(datas)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === false) {\n          message.error('The patient ID already exists, please replace it !');\n        } else {\n          message.success('The patientId can be used ~')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        message.error('Abnormal interface');\n      })\n\n  }\n  //获取宠物品种\n  const selectBreed = () => {\n    setLoading(true);\n    selectBreedBySpeciesId({ speciesId: null })\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          let arr = [];\n          _.map(res.petlist, (item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n            };\n            arr.push(data);\n          });\n          setBreedList(arr);\n        } else {\n          message.error('Failed to obtain pet breed information!');\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    selectBreed();\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  return (\n    <>\n      <Modal\n        title=\"Add a Pet\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"addPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className='petMsgBox'>\n              <div className='addPhoto'>\n                <UploadImg\n                  getImg={(val) => {\n                    setImageId(val.imageId);\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Patient ID:</p>\n                <Input\n                  value={patientId}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPatientId(e.target.value)\n                  }}\n                  onBlur={() => {\n                    if (patientId.length > 0) {\n                      getPetInfoByPatientId();\n                    }\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Name:</p>\n                <Input\n                  value={petName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetName(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Owner Name:</p>\n                <Input\n                  value={ownerName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setOwnerName(e.target.value)\n                  }}\n                />\n              </div>\n\n              <div className=\"item\">\n                <p>Breed:</p>\n                <div className='selectBox'>\n                  <Select\n                    showSearch\n                    style={{ width: \"100%\" }}\n                    bordered={false}\n                    value={breedId}\n                    placeholder=\"Search to Select\"\n                    optionFilterProp=\"children\"\n                    listHeight={256}\n                    onSelect={(value, data) => setBreedId(value)}\n                    filterOption={(input, option) =>\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                      0\n                    }\n                    filterSort={(optionA, optionB) =>\n                      optionA.children\n                        .toLowerCase()\n                        .localeCompare(optionB.children.toLowerCase())\n                    }\n                  >\n                    {\n                      _.map(breedList, (item, index) => (\n                        <Option key={item.petSpeciesBreedId}>{item.breedName}</Option>\n                      ))\n                    }\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p>Pet Age:</p>\n                <Input\n                  value={petAge}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetAge(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Weight:</p>\n                <Input\n                  value={petWeight}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetWeight(e.target.value)\n                  }}\n                />\n                <div className=\"unit\">{`kg`}</div>\n              </div>\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n\n};\n\nexport default AddPetModal;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx",["1233","1234","1235","1236"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Avatar,\n  List\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nconst SelectPet = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel, onLoading, onAddPet }) => {\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [petList, setPetList] = useState([]);//当前组织下所有宠物\n  const [searchPetList, setSearchPetList] = useState([]);//搜索宠物列表\n  const [searchValue, setSearchValue] = useState('');//搜索框的值\n  const [selePetValue, setSelePetValue] = useState();//选中的宠物值\n  const [selePetId, setSelePetId] = useState('');//选中的宠物id\n  const [loading, setLoading] = useState(false);//数据加载\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n  //获取所有宠物\n  const getAllPet = () => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag) {\n          let newData = [];\n          _.map(res.data, (item, index) => {\n            newData.push({\n              petId: item.petId,\n              petIndex: index,\n              birthday: item.birthday,\n              breedName: item.breedName,\n              patientId: item.patientId,\n              petName: item.petName,\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              gender: item.gender,\n              url: item.url,\n            })\n          });\n          setPetList(_.orderBy(newData, ['petIndex'], ['desc']));\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    if (_.isEmpty(selePetValue)) {\n      message.error('Please choose a pet!');\n    } else {\n      onSelect(selePetValue);\n      setIsModalVisible(visible);\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入值\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n  //展示宠物照片\n  const shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  //选择宠物事件\n  const selectPet = (petId, item) => {\n    setSelePetValue(item);\n    setSelePetId(petId);\n  }\n  //搜索宠物名字或patientId\n  const searchPetByPetNameOrPatientId = () => {\n    let list = petList;\n    let searchData = [];\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n      if (\n        `${name}`.indexOf(searchValue.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(searchValue.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n    setSearchPetList(searchData);\n  }\n  //取消或添加宠物\n  const handleCancelOrAddPet = () => {\n    onAddPet(false);\n    setIsModalVisible(visible);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPet();\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (searchValue.length > 0) {\n      searchPetByPetNameOrPatientId();\n    }\n    return (() => { })\n  }, [searchValue]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  useEffect(() => {\n    if (_.find(petList, ['petId', value]) !== undefined) {\n      setSelePetId(_.toString(value));\n      setSelePetValue(_.find(petList, ['petId', value]));\n    }\n    return (() => { })\n  }, [value, petList]);\n\n  return (\n    <>\n      <Modal\n        title=\"Assign Measurement\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Pet\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={searchValue.length > 0 ? searchPetList : petList}\n                renderItem={(item, index) => (\n                  <List.Item\n                    extra={selePetId === item.petId ? <span className=\"search\">&#xe614;</span> : null}\n                    onClick={() => selectPet(item.petId, item)}\n                  >\n                    <List.Item.Meta\n                      avatar={<Avatar src={shoePetPicture(item.petSpeciesBreedId, item.url)} />}\n                      title={\n                        <div className='petListItemTitle'>\n                          {item.petName ? item.petName : 'unKnown'},{item.patientId ? item.patientId : 'unKnown'}\n                        </div>\n                      }\n                      description={\n                        <div>\n                          {calculateAge(item.birthday) === 'unknown' ? 'unknown' : `${calculateAge(item.birthday)} yrs`},\n                          {item.gender === 0 ? \"Male\" : \"Venter\"},\n                          {item.breedName ? item.breedName : 'unKnow'}\n                        </div>\n                      }\n                    />\n                  </List.Item>\n\n                )}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancelOrAddPet}\n                >\n                  +Add New Pet\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPet;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",["1237","1238","1239","1240","1241","1242","1243"],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",["1244"],"\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx",["1245","1246","1247","1248"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Progress } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\nlet timer = null\r\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\r\n  const [time, setTime] = useState(60)\r\n  const timeLengthTo2 = (value) => {\r\n    if (`${value}`.length === 1) {\r\n      return `0${value}`\r\n    }\r\n    return `${value}`\r\n\r\n  }\r\n  const onClick = () => {\r\n    timer && clearInterval(timer)\r\n    cutPageType('result');\r\n  }\r\n  useEffect(() => {\r\n    timer && clearInterval(timer)\r\n    timer = setInterval(() => {\r\n      setTime(v => {\r\n        if (v === 0) {\r\n          timer && clearInterval(timer)\r\n          onClick()\r\n          return v\r\n        }\r\n        return v - 1\r\n      })\r\n\r\n    }, 1000)\r\n    return () => timer && clearInterval(timer)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Results Processing\r\n        </p>\r\n      </div>\r\n      <div className=\"middleBox\" style={{ margin: px(-100) }}>\r\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\r\n          Please wait for\r\n          <br />\r\n          accurate results\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <Progress\r\n          type=\"circle\"\r\n          percent={time / 60 * 100}\r\n          format={() => <div style={{ fontSize: '32px' }}>{`00:00:${timeLengthTo2(time)}`}</div>}\r\n          width={270}\r\n          strokeWidth={12}\r\n          strokeColor={'#FFA132'}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40), fontSize: '20px' }} onClick={onClick}>{`skip timer & procees`}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(TimerPage);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx",["1249","1250","1251","1252","1253","1254","1255","1256"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmTimeType\r\n} from \"../../../../store/actions\";\r\n\r\nimport swirl from \"../../../../assets/img/swirl.png\";\r\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\r\nimport label from \"../../../../assets/img/label.png\";\r\nimport Incubator from \"../../../../assets/img/Incubator.png\";\r\n\r\nimport overnight from \"../../../../assets/img/overnight.png\";\r\nimport rapid from \"../../../../assets/img/rapid.png\";\r\nimport dui from \"../../../../assets/img/dui1.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\nconst lists = [\r\n  {\r\n\r\n    title: 'Rapid Test Prep',\r\n    text: 'Mix sample swab in elution buffer for 60 seconds.',\r\n    img: rapid\r\n  },\r\n  {\r\n    title: 'Overnight test prep',\r\n    text: 'Swirl a fresh sterile swab on the surface of the culture medium.',\r\n    img: overnight\r\n  }\r\n]\r\n\r\nconst ExperimentalPage = ({ petMessage, hardwareMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\r\n  const [value, setValue] = useState(1);\r\n  // const [value, setValue] = useState(3);\r\n  const [type, setType] = useState(0)\r\n\r\n  const cutTitle = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\r\n      case 2:\r\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\r\n      case 3:\r\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\r\n      case 4:\r\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\r\n      case 5:\r\n        return (<>{`${'Select Test Type'}`} </>);\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  const itemList = () => {\r\n    let options = lists.map((item, index) => {\r\n      return (\r\n        <li key={index.toString()}>\r\n          <div className=\"liItem\" onClick={() => {\r\n            setType(index)\r\n            setQsmTimeType(index)\r\n          }}>\r\n            <div className=\"img\">\r\n              <img src={item.img} />\r\n            </div>\r\n            <div className=\"textbox\">\r\n              <h5 className=\"title\">{item.title}</h5>\r\n              <div className=\"text\">{item.text}</div>\r\n            </div>\r\n            <div className=\"select\">\r\n              {type === index ?\r\n                <img src={dui} alt=\"\" /> :\r\n                <div style={{ width: '30px' }} />\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        </li>\r\n      )\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const cutImage = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 2:\r\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 3:\r\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 4:\r\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 5:\r\n        return <div className=\"qsmSelectTime\">\r\n          {itemList()}\r\n        </div>\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (value !== 5) {\r\n      setValue(value + 1)\r\n    } else {\r\n      if (type === 0) {\r\n        cutPageType('timerPage');\r\n      } else {\r\n        cutPageType('result');\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setType(qsmMessage.qsmTimeType)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {cutTitle()}\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {cutImage()}\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmTimeType\r\n  }\r\n)(ExperimentalPage);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx",["1257","1258","1259","1260","1261"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmEarPart\r\n} from \"../../../../store/actions\";\r\n\r\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\r\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\r\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\r\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\n\r\nconst SwabPetEar = ({ petMessage, hardwareMessage, cutPageType, setQsmEarPart, qsmMessage }) => {\r\n  let {\r\n    petSpeciesBreedId,\r\n  } = petMessage;\r\n  const [value, setValue] = useState(1);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const imagetypeEvent = () => {\r\n    if (value === 1) {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatRightEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      }\r\n    } else {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatLeftEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      }\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    //这里需要将qsm的耳朵记录下来\r\n    setQsmEarPart(value)\r\n    cutPageType('experimentalPage');\r\n    // if (value === 1) {\r\n    //   setValue(2);\r\n    // } else {\r\n    //   cutPageType('experimentalPage');\r\n    // }\r\n\r\n  }\r\n  useEffect(() => {\r\n    setValue(qsmMessage.qsmEarPart)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Swab Pet's Ear\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {imagetypeEvent()}\r\n      </div>\r\n      <div className=\"radioBox\">\r\n        <Radio.Group onChange={onChange} value={value}>\r\n          <Radio value={1}>Right Ear</Radio>\r\n          <Radio value={2}>Left Ear</Radio>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce\r\n\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmEarPart\r\n  }\r\n)(SwabPetEar);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx",["1262","1263","1264","1265","1266","1267","1268"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, message } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport PlugInOtter from \"../../../../assets/img/PlugInOtter.png\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage, cutPageType, qsmConnectStatus, isNext = false }) => {\r\n  const [nextType, setNextType] = useState(false);\r\n  const [serialNumber, setSerialNumber] = useState('')\r\n\r\n\r\n  const onClick = async () => {\r\n\r\n    await register()\r\n    await verify()\r\n    setNextType(true);\r\n  }\r\n  const register = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let userId = storage.userId, userName = storage.userName, email = storage.userEmail, orgId = storage.lastOrganization, orgName = storage.orgName\r\n\r\n    console.log('register入参：', { userId, userName, email, orgId, orgName });\r\n    const response = await SDK.registerUserAndPractice(\"EX1QrGQTwPAjkJ0p7EEG7A\", \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\", userId, userName, email, orgId, orgName)\r\n    console.log('register入参：', response, response.status)\r\n    let res = response\r\n    if (res.status === 200) {\r\n      message.success(res.data.message)\r\n    } else {\r\n      let zhenshu = parseInt(res.status / 100)\r\n      switch (zhenshu) {\r\n        case 2:\r\n          message.success(res.data.message || res.data.error)\r\n          break;\r\n        case 4: message.warn(res.data.message || res.data.error)\r\n          break;\r\n        case 5:\r\n          message.warn(res.data.message || res.data.error)\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const verify = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let user_id = storage.userId;\r\n    let practice_id = storage.lastOrganization;\r\n    let serial_number = serialNumber;\r\n    let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\r\n    let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\r\n\r\n    await SDK.verifyInstrument(API_KEY, ACCESS_TOKEN, user_id, practice_id, serial_number)\r\n      .then(res => {\r\n        console.log('verify', res)\r\n        if (res.status === 200) {\r\n          message.success(res.data.message)\r\n        } else {\r\n          let zhenshu = parseInt(res.status / 100)\r\n          switch (zhenshu) {\r\n            case 2:\r\n              message.success(res.data.message || res.data.error)\r\n              break;\r\n            case 4: message.warn(res.data.message || res.data.error)\r\n              break;\r\n            case 5:\r\n              message.warn(res.data.message || res.data.error)\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setNextType(false);\r\n    return (() => { })\r\n\r\n  }, [petMessage.petId])\r\n  useEffect(() => {\r\n\r\n    if (isNext) {\r\n      setNextType(true)\r\n    }\r\n  }, [])\r\n\r\n\r\n  const body = () => {\r\n    if (!nextType) {\r\n      return (\r\n        <>\r\n          <div className=\"middleBox\">\r\n            <Input placeholder=\"Please enter your serial number\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\r\n              value={serialNumber}\r\n              onChange={(val) => setSerialNumber(val.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"bottomBox\">\r\n            <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick} >Next</Button>\r\n          </div>\r\n        </>\r\n      )\r\n    } else {\r\n      if (qsmConnectStatus === 'disconnected') {\r\n        return (\r\n          <div className=\"imageBox\">\r\n            <img src={PlugInOtter} alt=\"\" style={{ height: px(360) }} />\r\n          </div>\r\n        )\r\n      } else {\r\n        cutPageType('swabPetEarPage')\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {!nextType ? 'Register OtterEQ' : 'Plug in OtterEQ'}\r\n        </p>\r\n      </div>\r\n      {\r\n        body()\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmConnectStatus: state.qsmReduce.qsmConnectStatus,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(LinkEquipment);\r\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",["1269","1270"],"import { useEffect } from 'react';\nimport { Input } from 'antd';\nimport _ from 'lodash';\nimport './numericInput.less'\n\n\nconst NumericInput = (props) => {\n  const { value, onChange, onInput, onClick, indexkey, index, changesize = '' } = props;\n  //输入框输入\n  const handleChange = (e) => {\n    const { value: inputValue } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n\n    if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\n      onChange(inputValue);\n    }\n  }\n  //失去焦点\n  const handleBlur = () => {\n    let valueTemp = value;\n    if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\n  };\n  //输入框点击事件\n  const handleClick = () => {\n    onClick();\n  }\n  //修改样式\n  let bordercolor = indexkey === index ? '#D5B019' : '#d9d9d9';\n\n\n  return (\n    <Input\n      {...props}\n      className='inputNum'\n      onChange={handleChange}\n      onBlur={handleBlur}\n      maxLength={10}\n      ref={onInput}\n      onClick={handleClick}\n      style={{ borderColor: bordercolor, textAlign: \"center\", fontSize: changesize }}\n    />\n  );\n\n};\n\nexport default NumericInput;\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx",["1271","1272","1273","1274","1275","1276"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Input, Card, List } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport scale from \"../../../../assets/img/scale.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, setSelectHardwareType }) => {\n  let history = useHistory();\n  const data = [\n    {\n      title: 'Last 24 hrs',\n      number: '1'\n    },\n    {\n      title: 'Last 7 days',\n      number: '3'\n    },\n    {\n      title: 'Days to goal',\n      number: '33'\n    },\n    {\n      title: 'Ideal Weight',\n      number: '42'\n    },\n  ];\n  const [planType, setPlanType] = useState(false);\n\n  useEffect(() => {\n    console.log('electronStore.get(`${petMessage.petId}-planType`): ', electronStore.get(`${petMessage.petId}-planType`));\n    setPlanType(electronStore.get(`${petMessage.petId}-planType`) ? true : false);\n  }, [petMessage.petId]);\n\n\n\n  return (\n    <div className=\"contentBox\">\n      {\n        planType ?\n          (\n            <>\n              <div className=\"topBox annulusBox\">\n                <div className=\"excircle\">\n                  <div className=\"circleContentBox\">\n                    <img src={scale} alt=\"\" />\n                    <div className=\"floatBox\">\n                      <div className=\"weightTitle\">\n                        <p>70</p>\n                        <p>lbs</p>\n                      </div>\n                      <div className=\"identification\">\n                        <p>Current Weight</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"middleBox\">\n                <div className=\"bodyState\">\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Fat Percent: 88%</p>\n                  </div>\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Condition Score: 9</p>\n                  </div>\n                </div>\n                <p className=\"hintTitle\">23 lbs over ideal weight</p>\n              </div>\n              <div className=\"bottomBox\">\n                <List\n                  dataSource={data}\n                  renderItem={(item) => (\n                    <div className=\"listBox\">\n                      <List.Item>\n                        <div className=\"item\">\n                          <div className=\"top\">\n                            <p>{item.title}</p>\n                          </div>\n                          <div className=\"bottom\">\n                            <p>{item.number}</p>\n                          </div>\n                        </div>\n                      </List.Item>\n                    </div>\n                  )}\n                />\n              </div>\n            </>\n          )\n          :\n          (\n            <div className=\"planBox\">\n              <p className=\"title\">\n                {`${petMessage.petName}`} is not enrolled<br />in a feeding plan\n              </p>\n              <p className=\"recommendedTitle\">A Mabel smart bowl scale is recommended.</p>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  block\n                  onClick={() => {\n                    setSelectHardwareType('prescribePlan');\n                  }}\n                >\n                  Prescribe Feeding Plan\n                </Button>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx",["1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287"],"import React, { useEffect, useState, useRef } from \"react\";\n// import html2canvas from 'html2canvas';\nimport { Button, Input, Card, List, Image, } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport takePhto from \"../../../../assets/img/takePhto.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { px } from \"../../../../utils/px\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\nlet loadVidio = false\nlet timer = null\nconst LinkEquipment = ({ petMessage, }) => {\n  let history = useHistory();\n  const [ip, setIp] = useState('');\n  const [showIp, setShowIp] = useState('')\n  const [loading, setLoading] = useState(false)\n  const next = () => {\n    setLoading(true)\n    setIp(showIp)\n    loadVidio = false\n    timer && clearTimeout(timer)\n    timer = setTimeout(() => {\n      if (!loadVidio) {\n        console.log('视频加载失败，前往重新获取');\n        setLoading(false)\n      }\n    }, 5000);\n  }\n\n  const inputIp = () => {\n    return (\n      <div className=\"inputIp\">\n        <div className=\"title\">Please enter the IP<br />address</div>\n\n        <div className=\"middleBox\">\n          <Input placeholder=\"192.168.0.204\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\n            value={showIp}\n            onChange={(val) => setShowIp(val.target.value)}\n          />\n        </div>\n        <div className=\"bottomBox\">\n          <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={next} >Next</Button>\n        </div>\n      </div>\n    )\n  }\n  const takePhoto = async () => {\n\n    // // let res = await html2canvas(document.getElementById('aphoto'), { useCORS: true })\n    // // console.log(\"🚀 ~ file: index.jsx ~ line 65 ~ takePhoto ~ res\", res)\n    // console.log('电控');\n    // html2canvas(document.getElementById('aphoto'), {\n    //   allowTaint: false,\n    //   useCORS: true,\n    //   proxy: 'http://192.168.0.203:81'\n    // }).then(function (canvas) {\n    //   console.log(canvas);\n    //   // toImage\n    //   const dataImg = new Image()\n    //   dataImg.src = canvas.toDataURL('image/png')\n    //   const alink = document.createElement(\"a\");\n    //   alink.href = dataImg.src;\n    //   alink.download = \"testImg.jpg\";\n    //   alink.click();\n    // });\n\n\n  }\n  const urlErrModal = () => {\n    return (\n      <div className=\"urlErrModal\">\n        <div className=\"close\">\n\n        </div>\n\n      </div>\n    )\n  }\n\n  const vidio = () => {\n    return (\n      <div className=\"vidio\">\n        <div className=\"vidioFa\">\n          <div id=\"aphoto\">\n            <img\n              onError={(err) => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 59 ~ vidio ~ err\", err)\n                timer && clearTimeout(timer)\n                setLoading(false)\n              }}\n              onLoad={e => {\n                console.log('e', e);\n                setLoading(false)\n                loadVidio = true\n                timer && clearTimeout(timer)\n              }}\n\n              src={`http://${ip}:81`} />\n          </div>\n\n\n\n\n        </div>\n        <div\n          className=\"btn\"\n          onClick={takePhoto}\n        >\n          <img src={takePhto} alt=\"\" />\n        </div>\n\n        <MyModal\n          visible={loading}\n        // element={urlErrModal()}\n        />\n\n\n\n\n      </div>\n\n    )\n\n\n  }\n\n  // useEffect(() => {\n  //   setIp('')\n  // }, [])\n\n\n\n\n\n  return (\n    <div id=\"motionCameraBody\">\n      {ip ? vidio() : inputIp()}\n      {/* {inputIp()} */}\n      {/* {vidio()} */}\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",[],"C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",[],{"ruleId":"1288","severity":1,"message":"1289","line":3,"column":10,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":24},{"ruleId":"1292","replacedBy":"1293"},{"ruleId":"1294","replacedBy":"1295"},{"ruleId":"1288","severity":1,"message":"1296","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1297","line":35,"column":8,"nodeType":"1290","messageId":"1291","endLine":35,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1298","line":4,"column":3,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1299","line":18,"column":8,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1300","line":29,"column":9,"nodeType":"1290","messageId":"1291","endLine":29,"endColumn":15},{"ruleId":"1301","severity":1,"message":"1302","line":99,"column":5,"nodeType":"1303","messageId":"1304","endLine":105,"endColumn":6},{"ruleId":"1305","severity":1,"message":"1306","line":112,"column":41,"nodeType":"1307","messageId":"1308","endLine":112,"endColumn":43},{"ruleId":"1305","severity":1,"message":"1306","line":150,"column":41,"nodeType":"1307","messageId":"1308","endLine":150,"endColumn":43},{"ruleId":"1288","severity":1,"message":"1309","line":257,"column":11,"nodeType":"1290","messageId":"1291","endLine":257,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1310","line":257,"column":49,"nodeType":"1290","messageId":"1291","endLine":257,"endColumn":55},{"ruleId":"1311","severity":1,"message":"1312","line":507,"column":15,"nodeType":"1313","endLine":507,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":537,"column":15,"nodeType":"1313","endLine":537,"endColumn":63},{"ruleId":"1301","severity":1,"message":"1302","line":558,"column":5,"nodeType":"1303","messageId":"1304","endLine":561,"endColumn":6},{"ruleId":"1301","severity":1,"message":"1302","line":562,"column":5,"nodeType":"1303","messageId":"1304","endLine":565,"endColumn":6},{"ruleId":"1288","severity":1,"message":"1314","line":679,"column":11,"nodeType":"1290","messageId":"1291","endLine":679,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1315","line":682,"column":11,"nodeType":"1290","messageId":"1291","endLine":682,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1309","line":805,"column":29,"nodeType":"1290","messageId":"1291","endLine":805,"endColumn":39},{"ruleId":"1288","severity":1,"message":"1316","line":805,"column":79,"nodeType":"1290","messageId":"1291","endLine":805,"endColumn":84},{"ruleId":"1288","severity":1,"message":"1317","line":805,"column":117,"nodeType":"1290","messageId":"1291","endLine":805,"endColumn":139},{"ruleId":"1288","severity":1,"message":"1318","line":2,"column":17,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1319","line":2,"column":60,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":64},{"ruleId":"1288","severity":1,"message":"1320","line":14,"column":8,"nodeType":"1290","messageId":"1291","endLine":14,"endColumn":11},{"ruleId":"1288","severity":1,"message":"1321","line":105,"column":29,"nodeType":"1290","messageId":"1291","endLine":105,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1322","line":105,"column":38,"nodeType":"1290","messageId":"1291","endLine":105,"endColumn":46},{"ruleId":"1288","severity":1,"message":"1323","line":105,"column":48,"nodeType":"1290","messageId":"1291","endLine":105,"endColumn":57},{"ruleId":"1288","severity":1,"message":"1324","line":232,"column":103,"nodeType":"1290","messageId":"1291","endLine":232,"endColumn":112},{"ruleId":"1288","severity":1,"message":"1309","line":392,"column":11,"nodeType":"1290","messageId":"1291","endLine":392,"endColumn":21},{"ruleId":"1311","severity":1,"message":"1312","line":651,"column":15,"nodeType":"1313","endLine":651,"endColumn":63},{"ruleId":"1288","severity":1,"message":"1325","line":668,"column":11,"nodeType":"1290","messageId":"1291","endLine":668,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":687,"column":15,"nodeType":"1313","endLine":687,"endColumn":63},{"ruleId":"1301","severity":1,"message":"1302","line":724,"column":5,"nodeType":"1303","messageId":"1304","endLine":727,"endColumn":6},{"ruleId":"1301","severity":1,"message":"1302","line":728,"column":5,"nodeType":"1303","messageId":"1304","endLine":731,"endColumn":6},{"ruleId":"1288","severity":1,"message":"1326","line":833,"column":51,"nodeType":"1290","messageId":"1291","endLine":833,"endColumn":68},{"ruleId":"1288","severity":1,"message":"1316","line":833,"column":70,"nodeType":"1290","messageId":"1291","endLine":833,"endColumn":75},{"ruleId":"1288","severity":1,"message":"1325","line":833,"column":108,"nodeType":"1290","messageId":"1291","endLine":833,"endColumn":117},{"ruleId":"1288","severity":1,"message":"1327","line":20,"column":10,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1328","line":27,"column":7,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1329","line":353,"column":11,"nodeType":"1290","messageId":"1291","endLine":353,"endColumn":17},{"ruleId":"1311","severity":1,"message":"1312","line":427,"column":13,"nodeType":"1313","endLine":431,"endColumn":56},{"ruleId":"1288","severity":1,"message":"1330","line":461,"column":19,"nodeType":"1290","messageId":"1291","endLine":461,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1331","line":462,"column":9,"nodeType":"1290","messageId":"1291","endLine":462,"endColumn":13},{"ruleId":"1332","severity":1,"message":"1333","line":605,"column":15,"nodeType":"1313","endLine":605,"endColumn":50},{"ruleId":"1288","severity":1,"message":"1334","line":4,"column":3,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1319","line":6,"column":3,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":7},{"ruleId":"1288","severity":1,"message":"1335","line":390,"column":21,"nodeType":"1290","messageId":"1291","endLine":390,"endColumn":27},{"ruleId":"1332","severity":1,"message":"1333","line":533,"column":17,"nodeType":"1313","endLine":533,"endColumn":54},{"ruleId":"1332","severity":1,"message":"1333","line":585,"column":17,"nodeType":"1313","endLine":585,"endColumn":60},{"ruleId":"1288","severity":1,"message":"1336","line":30,"column":9,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":16},{"ruleId":"1301","severity":1,"message":"1302","line":77,"column":11,"nodeType":"1303","messageId":"1304","endLine":98,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1337","line":15,"column":8,"nodeType":"1290","messageId":"1291","endLine":15,"endColumn":14},{"ruleId":"1301","severity":1,"message":"1302","line":72,"column":13,"nodeType":"1303","messageId":"1304","endLine":101,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1338","line":305,"column":45,"nodeType":"1290","messageId":"1291","endLine":305,"endColumn":59},{"ruleId":"1288","severity":1,"message":"1339","line":305,"column":61,"nodeType":"1290","messageId":"1291","endLine":305,"endColumn":75},{"ruleId":"1288","severity":1,"message":"1340","line":50,"column":7,"nodeType":"1290","messageId":"1291","endLine":50,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1341","line":51,"column":7,"nodeType":"1290","messageId":"1291","endLine":51,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1342","line":54,"column":10,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1343","line":54,"column":20,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1344","line":121,"column":9,"nodeType":"1290","messageId":"1291","endLine":121,"endColumn":18},{"ruleId":"1345","severity":1,"message":"1346","line":291,"column":59,"nodeType":"1347","messageId":"1348","endLine":291,"endColumn":60},{"ruleId":"1288","severity":1,"message":"1349","line":16,"column":8,"nodeType":"1290","messageId":"1291","endLine":16,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1300","line":27,"column":9,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1350","line":42,"column":9,"nodeType":"1290","messageId":"1291","endLine":42,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1351","line":43,"column":11,"nodeType":"1290","messageId":"1291","endLine":43,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1352","line":43,"column":19,"nodeType":"1290","messageId":"1291","endLine":43,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1350","line":48,"column":9,"nodeType":"1290","messageId":"1291","endLine":48,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1314","line":154,"column":43,"nodeType":"1290","messageId":"1291","endLine":154,"endColumn":52},{"ruleId":"1288","severity":1,"message":"1353","line":154,"column":54,"nodeType":"1290","messageId":"1291","endLine":154,"endColumn":59},{"ruleId":"1288","severity":1,"message":"1354","line":8,"column":10,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1299","line":11,"column":8,"nodeType":"1290","messageId":"1291","endLine":11,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1300","line":22,"column":9,"nodeType":"1290","messageId":"1291","endLine":22,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1355","line":66,"column":9,"nodeType":"1290","messageId":"1291","endLine":66,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1356","line":338,"column":9,"nodeType":"1290","messageId":"1291","endLine":338,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1357","line":359,"column":7,"nodeType":"1290","messageId":"1291","endLine":359,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1349","line":14,"column":8,"nodeType":"1290","messageId":"1291","endLine":14,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1300","line":24,"column":9,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1350","line":46,"column":9,"nodeType":"1290","messageId":"1291","endLine":46,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1351","line":47,"column":11,"nodeType":"1290","messageId":"1291","endLine":47,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1352","line":47,"column":19,"nodeType":"1290","messageId":"1291","endLine":47,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1323","line":132,"column":18,"nodeType":"1290","messageId":"1291","endLine":132,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1322","line":132,"column":29,"nodeType":"1290","messageId":"1291","endLine":132,"endColumn":37},{"ruleId":"1311","severity":1,"message":"1312","line":536,"column":19,"nodeType":"1313","endLine":543,"endColumn":61},{"ruleId":"1332","severity":1,"message":"1333","line":551,"column":19,"nodeType":"1313","endLine":559,"endColumn":30},{"ruleId":"1288","severity":1,"message":"1358","line":19,"column":5,"nodeType":"1290","messageId":"1291","endLine":19,"endColumn":10},{"ruleId":"1301","severity":1,"message":"1302","line":165,"column":9,"nodeType":"1303","messageId":"1304","endLine":183,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1359","line":9,"column":3,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1360","line":34,"column":10,"nodeType":"1290","messageId":"1291","endLine":34,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1361","line":36,"column":10,"nodeType":"1290","messageId":"1291","endLine":36,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1362","line":38,"column":10,"nodeType":"1290","messageId":"1291","endLine":38,"endColumn":18},{"ruleId":"1363","severity":1,"message":"1364","line":92,"column":6,"nodeType":"1365","endLine":92,"endColumn":8,"suggestions":"1366"},{"ruleId":"1288","severity":1,"message":"1318","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1367","line":2,"column":25,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1319","line":2,"column":41,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":45},{"ruleId":"1288","severity":1,"message":"1368","line":3,"column":10,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":30},{"ruleId":"1288","severity":1,"message":"1369","line":18,"column":47,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":68},{"ruleId":"1288","severity":1,"message":"1370","line":74,"column":61,"nodeType":"1290","messageId":"1291","endLine":74,"endColumn":64},{"ruleId":"1288","severity":1,"message":"1371","line":74,"column":66,"nodeType":"1290","messageId":"1291","endLine":74,"endColumn":75},{"ruleId":"1288","severity":1,"message":"1372","line":216,"column":56,"nodeType":"1290","messageId":"1291","endLine":216,"endColumn":63},{"ruleId":"1288","severity":1,"message":"1373","line":217,"column":11,"nodeType":"1290","messageId":"1291","endLine":217,"endColumn":17},{"ruleId":"1301","severity":1,"message":"1302","line":81,"column":13,"nodeType":"1303","messageId":"1304","endLine":110,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1338","line":286,"column":45,"nodeType":"1290","messageId":"1291","endLine":286,"endColumn":59},{"ruleId":"1288","severity":1,"message":"1339","line":286,"column":61,"nodeType":"1290","messageId":"1291","endLine":286,"endColumn":75},{"ruleId":"1288","severity":1,"message":"1374","line":2,"column":8,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1375","line":3,"column":8,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1376","line":4,"column":8,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1377","line":5,"column":8,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1378","line":74,"column":17,"nodeType":"1290","messageId":"1291","endLine":74,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1379","line":74,"column":29,"nodeType":"1290","messageId":"1291","endLine":74,"endColumn":37},{"ruleId":"1288","severity":1,"message":"1380","line":74,"column":39,"nodeType":"1290","messageId":"1291","endLine":74,"endColumn":45},{"ruleId":"1288","severity":1,"message":"1334","line":2,"column":29,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":34},{"ruleId":"1288","severity":1,"message":"1319","line":2,"column":60,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":64},{"ruleId":"1288","severity":1,"message":"1299","line":4,"column":8,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1381","line":6,"column":8,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1382","line":7,"column":8,"nodeType":"1290","messageId":"1291","endLine":7,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1383","line":8,"column":14,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1384","line":10,"column":8,"nodeType":"1290","messageId":"1291","endLine":10,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1385","line":15,"column":8,"nodeType":"1290","messageId":"1291","endLine":15,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1386","line":20,"column":3,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1387","line":21,"column":3,"nodeType":"1290","messageId":"1291","endLine":21,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1388","line":22,"column":3,"nodeType":"1290","messageId":"1291","endLine":22,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1300","line":29,"column":9,"nodeType":"1290","messageId":"1291","endLine":29,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1355","line":96,"column":9,"nodeType":"1290","messageId":"1291","endLine":96,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1389","line":331,"column":20,"nodeType":"1290","messageId":"1291","endLine":331,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1390","line":1,"column":24,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1391","line":5,"column":16,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1392","line":5,"column":30,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":40},{"ruleId":"1288","severity":1,"message":"1393","line":50,"column":69,"nodeType":"1290","messageId":"1291","endLine":50,"endColumn":79},{"ruleId":"1301","severity":1,"message":"1302","line":153,"column":9,"nodeType":"1303","messageId":"1304","endLine":163,"endColumn":10},{"ruleId":"1301","severity":1,"message":"1302","line":177,"column":25,"nodeType":"1303","messageId":"1304","endLine":187,"endColumn":26},{"ruleId":"1301","severity":1,"message":"1302","line":192,"column":21,"nodeType":"1303","messageId":"1304","endLine":216,"endColumn":22},{"ruleId":"1394","severity":1,"message":"1395","line":211,"column":25,"nodeType":"1396","messageId":"1397","endLine":211,"endColumn":32},{"ruleId":"1394","severity":1,"message":"1395","line":213,"column":25,"nodeType":"1396","messageId":"1397","endLine":215,"endColumn":69},{"ruleId":"1288","severity":1,"message":"1398","line":248,"column":24,"nodeType":"1290","messageId":"1291","endLine":248,"endColumn":32},{"ruleId":"1288","severity":1,"message":"1399","line":248,"column":34,"nodeType":"1290","messageId":"1291","endLine":248,"endColumn":41},{"ruleId":"1288","severity":1,"message":"1400","line":248,"column":43,"nodeType":"1290","messageId":"1291","endLine":248,"endColumn":58},{"ruleId":"1288","severity":1,"message":"1370","line":249,"column":13,"nodeType":"1290","messageId":"1291","endLine":249,"endColumn":16},{"ruleId":"1311","severity":1,"message":"1312","line":373,"column":59,"nodeType":"1313","endLine":373,"endColumn":79},{"ruleId":"1311","severity":1,"message":"1312","line":375,"column":59,"nodeType":"1313","endLine":375,"endColumn":77},{"ruleId":"1288","severity":1,"message":"1349","line":3,"column":8,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1300","line":25,"column":9,"nodeType":"1290","messageId":"1291","endLine":25,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1351","line":54,"column":11,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1352","line":54,"column":19,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1355","line":151,"column":9,"nodeType":"1290","messageId":"1291","endLine":151,"endColumn":22},{"ruleId":"1332","severity":1,"message":"1333","line":522,"column":17,"nodeType":"1313","endLine":522,"endColumn":54},{"ruleId":"1332","severity":1,"message":"1333","line":575,"column":17,"nodeType":"1313","endLine":575,"endColumn":60},{"ruleId":"1288","severity":1,"message":"1401","line":12,"column":8,"nodeType":"1290","messageId":"1291","endLine":12,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1384","line":15,"column":8,"nodeType":"1290","messageId":"1291","endLine":15,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1402","line":17,"column":8,"nodeType":"1290","messageId":"1291","endLine":17,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1403","line":39,"column":12,"nodeType":"1290","messageId":"1291","endLine":39,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1404","line":40,"column":12,"nodeType":"1290","messageId":"1291","endLine":40,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1405","line":40,"column":20,"nodeType":"1290","messageId":"1291","endLine":40,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1406","line":2,"column":26,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":32},{"ruleId":"1288","severity":1,"message":"1407","line":75,"column":5,"nodeType":"1290","messageId":"1291","endLine":75,"endColumn":14},{"ruleId":"1301","severity":1,"message":"1302","line":498,"column":9,"nodeType":"1303","messageId":"1304","endLine":505,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1408","line":536,"column":22,"nodeType":"1290","messageId":"1291","endLine":536,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1409","line":536,"column":28,"nodeType":"1290","messageId":"1291","endLine":536,"endColumn":40},{"ruleId":"1288","severity":1,"message":"1410","line":690,"column":15,"nodeType":"1290","messageId":"1291","endLine":690,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1411","line":734,"column":17,"nodeType":"1290","messageId":"1291","endLine":734,"endColumn":26},{"ruleId":"1412","severity":1,"message":"1413","line":798,"column":30,"nodeType":"1347","messageId":"1414","endLine":798,"endColumn":32},{"ruleId":"1288","severity":1,"message":"1415","line":888,"column":13,"nodeType":"1290","messageId":"1291","endLine":888,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1416","line":891,"column":15,"nodeType":"1290","messageId":"1291","endLine":891,"endColumn":30},{"ruleId":"1288","severity":1,"message":"1417","line":893,"column":15,"nodeType":"1290","messageId":"1291","endLine":893,"endColumn":30},{"ruleId":"1288","severity":1,"message":"1418","line":895,"column":15,"nodeType":"1290","messageId":"1291","endLine":895,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1419","line":897,"column":15,"nodeType":"1290","messageId":"1291","endLine":897,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1420","line":902,"column":11,"nodeType":"1290","messageId":"1291","endLine":902,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1421","line":922,"column":15,"nodeType":"1290","messageId":"1291","endLine":922,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1411","line":949,"column":17,"nodeType":"1290","messageId":"1291","endLine":949,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1422","line":1070,"column":11,"nodeType":"1290","messageId":"1291","endLine":1070,"endColumn":22},{"ruleId":"1394","severity":1,"message":"1423","line":1290,"column":13,"nodeType":"1396","messageId":"1424","endLine":1291,"endColumn":21},{"ruleId":"1332","severity":1,"message":"1425","line":1438,"column":15,"nodeType":"1313","endLine":1440,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1337","line":10,"column":8,"nodeType":"1290","messageId":"1291","endLine":10,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1426","line":23,"column":10,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1427","line":23,"column":21,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":37},{"ruleId":"1288","severity":1,"message":"1428","line":30,"column":7,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":14},{"ruleId":"1311","severity":1,"message":"1312","line":207,"column":13,"nodeType":"1313","endLine":211,"endColumn":56},{"ruleId":"1288","severity":1,"message":"1389","line":243,"column":21,"nodeType":"1290","messageId":"1291","endLine":243,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1335","line":243,"column":31,"nodeType":"1290","messageId":"1291","endLine":243,"endColumn":37},{"ruleId":"1332","severity":1,"message":"1333","line":400,"column":37,"nodeType":"1313","endLine":400,"endColumn":72},{"ruleId":"1288","severity":1,"message":"1429","line":2,"column":27,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1430","line":3,"column":10,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1431","line":8,"column":14,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1318","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1432","line":2,"column":16,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1406","line":2,"column":25,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1334","line":2,"column":33,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":38},{"ruleId":"1288","severity":1,"message":"1368","line":3,"column":10,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":30},{"ruleId":"1288","severity":1,"message":"1433","line":36,"column":10,"nodeType":"1290","messageId":"1291","endLine":36,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1434","line":67,"column":10,"nodeType":"1290","messageId":"1291","endLine":67,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1435","line":67,"column":24,"nodeType":"1290","messageId":"1291","endLine":67,"endColumn":38},{"ruleId":"1288","severity":1,"message":"1436","line":95,"column":10,"nodeType":"1290","messageId":"1291","endLine":95,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1437","line":95,"column":21,"nodeType":"1290","messageId":"1291","endLine":95,"endColumn":33},{"ruleId":"1288","severity":1,"message":"1438","line":128,"column":10,"nodeType":"1290","messageId":"1291","endLine":128,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1439","line":210,"column":13,"nodeType":"1290","messageId":"1291","endLine":210,"endColumn":20},{"ruleId":"1394","severity":1,"message":"1395","line":637,"column":7,"nodeType":"1396","messageId":"1397","endLine":637,"endColumn":16},{"ruleId":"1394","severity":1,"message":"1395","line":639,"column":7,"nodeType":"1396","messageId":"1397","endLine":639,"endColumn":16},{"ruleId":"1394","severity":1,"message":"1395","line":641,"column":7,"nodeType":"1396","messageId":"1397","endLine":641,"endColumn":16},{"ruleId":"1394","severity":1,"message":"1395","line":643,"column":7,"nodeType":"1396","messageId":"1397","endLine":647,"endColumn":15},{"ruleId":"1311","severity":1,"message":"1312","line":779,"column":17,"nodeType":"1313","endLine":779,"endColumn":62},{"ruleId":"1311","severity":1,"message":"1312","line":784,"column":17,"nodeType":"1313","endLine":784,"endColumn":65},{"ruleId":"1332","severity":1,"message":"1333","line":839,"column":15,"nodeType":"1313","endLine":845,"endColumn":16},{"ruleId":"1332","severity":1,"message":"1333","line":848,"column":15,"nodeType":"1313","endLine":854,"endColumn":16},{"ruleId":"1311","severity":1,"message":"1312","line":935,"column":17,"nodeType":"1313","endLine":935,"endColumn":62},{"ruleId":"1311","severity":1,"message":"1312","line":939,"column":15,"nodeType":"1313","endLine":939,"endColumn":64},{"ruleId":"1332","severity":1,"message":"1333","line":1056,"column":13,"nodeType":"1313","endLine":1060,"endColumn":14},{"ruleId":"1332","severity":1,"message":"1333","line":1137,"column":15,"nodeType":"1313","endLine":1145,"endColumn":16},{"ruleId":"1332","severity":1,"message":"1333","line":1160,"column":13,"nodeType":"1313","endLine":1160,"endColumn":76},{"ruleId":"1332","severity":1,"message":"1333","line":1231,"column":15,"nodeType":"1313","endLine":1239,"endColumn":16},{"ruleId":"1332","severity":1,"message":"1333","line":1263,"column":15,"nodeType":"1313","endLine":1267,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1440","line":1373,"column":9,"nodeType":"1290","messageId":"1291","endLine":1373,"endColumn":16},{"ruleId":"1363","severity":1,"message":"1441","line":1401,"column":6,"nodeType":"1365","endLine":1401,"endColumn":8,"suggestions":"1442"},{"ruleId":"1363","severity":1,"message":"1443","line":1405,"column":6,"nodeType":"1365","endLine":1405,"endColumn":32,"suggestions":"1444"},{"ruleId":"1311","severity":1,"message":"1312","line":1471,"column":15,"nodeType":"1313","endLine":1471,"endColumn":59},{"ruleId":"1311","severity":1,"message":"1312","line":1656,"column":19,"nodeType":"1313","endLine":1656,"endColumn":54},{"ruleId":"1311","severity":1,"message":"1312","line":1658,"column":19,"nodeType":"1313","endLine":1658,"endColumn":53},{"ruleId":"1288","severity":1,"message":"1429","line":2,"column":27,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1431","line":7,"column":14,"nodeType":"1290","messageId":"1291","endLine":7,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1445","line":15,"column":7,"nodeType":"1290","messageId":"1291","endLine":15,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1446","line":16,"column":7,"nodeType":"1290","messageId":"1291","endLine":16,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1447","line":18,"column":5,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1448","line":54,"column":5,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1449","line":73,"column":5,"nodeType":"1290","messageId":"1291","endLine":73,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1452","severity":1,"message":"1453","line":1,"column":1,"nodeType":"1454","endLine":256,"endColumn":3},{"ruleId":"1363","severity":1,"message":"1455","line":85,"column":6,"nodeType":"1365","endLine":85,"endColumn":8,"suggestions":"1456"},{"ruleId":"1288","severity":1,"message":"1457","line":13,"column":10,"nodeType":"1290","messageId":"1291","endLine":13,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1458","line":13,"column":14,"nodeType":"1290","messageId":"1291","endLine":13,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1459","line":51,"column":10,"nodeType":"1290","messageId":"1291","endLine":51,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1460","line":61,"column":10,"nodeType":"1290","messageId":"1291","endLine":61,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1461","line":71,"column":10,"nodeType":"1290","messageId":"1291","endLine":71,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1462","line":81,"column":10,"nodeType":"1290","messageId":"1291","endLine":81,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1463","line":91,"column":10,"nodeType":"1290","messageId":"1291","endLine":91,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1464","line":101,"column":10,"nodeType":"1290","messageId":"1291","endLine":101,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1465","line":5,"column":8,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":18},{"ruleId":"1363","severity":1,"message":"1466","line":283,"column":6,"nodeType":"1365","endLine":283,"endColumn":8,"suggestions":"1467"},{"ruleId":"1363","severity":1,"message":"1468","line":324,"column":6,"nodeType":"1365","endLine":324,"endColumn":36,"suggestions":"1469"},{"ruleId":"1288","severity":1,"message":"1470","line":30,"column":10,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":18},{"ruleId":"1363","severity":1,"message":"1471","line":194,"column":6,"nodeType":"1365","endLine":194,"endColumn":23,"suggestions":"1472"},{"ruleId":"1288","severity":1,"message":"1473","line":16,"column":5,"nodeType":"1290","messageId":"1291","endLine":16,"endColumn":12},{"ruleId":"1363","severity":1,"message":"1474","line":54,"column":6,"nodeType":"1365","endLine":54,"endColumn":41,"suggestions":"1475"},{"ruleId":"1288","severity":1,"message":"1476","line":1,"column":28,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1477","line":19,"column":18,"nodeType":"1290","messageId":"1291","endLine":19,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1479","line":26,"column":11,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1477","line":26,"column":20,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1341","line":27,"column":7,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1476","line":1,"column":28,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1477","line":19,"column":18,"nodeType":"1290","messageId":"1291","endLine":19,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1318","line":3,"column":3,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":7},{"ruleId":"1288","severity":1,"message":"1432","line":4,"column":3,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1406","line":5,"column":3,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1334","line":6,"column":3,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":8},{"ruleId":"1332","severity":1,"message":"1425","line":67,"column":11,"nodeType":"1313","endLine":72,"endColumn":12},{"ruleId":"1412","severity":1,"message":"1413","line":135,"column":24,"nodeType":"1347","messageId":"1414","endLine":135,"endColumn":26},{"ruleId":"1305","severity":1,"message":"1306","line":157,"column":31,"nodeType":"1307","messageId":"1308","endLine":157,"endColumn":33},{"ruleId":"1412","severity":1,"message":"1480","line":165,"column":29,"nodeType":"1347","messageId":"1414","endLine":165,"endColumn":31},{"ruleId":"1363","severity":1,"message":"1481","line":185,"column":6,"nodeType":"1365","endLine":185,"endColumn":18,"suggestions":"1482"},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1477","line":30,"column":18,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1484","line":34,"column":10,"nodeType":"1290","messageId":"1291","endLine":34,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1485","line":126,"column":9,"nodeType":"1290","messageId":"1291","endLine":126,"endColumn":23},{"ruleId":"1363","severity":1,"message":"1486","line":145,"column":6,"nodeType":"1365","endLine":145,"endColumn":8,"suggestions":"1487"},{"ruleId":"1363","severity":1,"message":"1488","line":167,"column":6,"nodeType":"1365","endLine":167,"endColumn":8,"suggestions":"1489"},{"ruleId":"1288","severity":1,"message":"1490","line":23,"column":10,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1457","line":26,"column":10,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1491","line":29,"column":26,"nodeType":"1290","messageId":"1291","endLine":29,"endColumn":32},{"ruleId":"1288","severity":1,"message":"1492","line":29,"column":34,"nodeType":"1290","messageId":"1291","endLine":29,"endColumn":39},{"ruleId":"1363","severity":1,"message":"1493","line":116,"column":6,"nodeType":"1365","endLine":116,"endColumn":8,"suggestions":"1494"},{"ruleId":"1311","severity":1,"message":"1312","line":168,"column":19,"nodeType":"1313","endLine":168,"endColumn":47},{"ruleId":"1288","severity":1,"message":"1495","line":18,"column":8,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1496","line":84,"column":17,"nodeType":"1290","messageId":"1291","endLine":84,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1497","line":95,"column":10,"nodeType":"1290","messageId":"1291","endLine":95,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1498","line":99,"column":10,"nodeType":"1290","messageId":"1291","endLine":99,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1499","line":102,"column":18,"nodeType":"1290","messageId":"1291","endLine":102,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1500","line":114,"column":10,"nodeType":"1290","messageId":"1291","endLine":114,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1501","line":120,"column":20,"nodeType":"1290","messageId":"1291","endLine":120,"endColumn":31},{"ruleId":"1363","severity":1,"message":"1502","line":134,"column":6,"nodeType":"1365","endLine":134,"endColumn":32,"suggestions":"1503"},{"ruleId":"1288","severity":1,"message":"1504","line":144,"column":11,"nodeType":"1290","messageId":"1291","endLine":144,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1505","line":456,"column":24,"nodeType":"1290","messageId":"1291","endLine":456,"endColumn":28},{"ruleId":"1412","severity":1,"message":"1413","line":471,"column":49,"nodeType":"1347","messageId":"1414","endLine":471,"endColumn":51},{"ruleId":"1506","severity":1,"message":"1507","line":761,"column":34,"nodeType":"1508","messageId":"1509","endLine":761,"endColumn":35,"suggestions":"1510"},{"ruleId":"1506","severity":1,"message":"1511","line":766,"column":31,"nodeType":"1508","messageId":"1509","endLine":766,"endColumn":32,"suggestions":"1512"},{"ruleId":"1506","severity":1,"message":"1507","line":783,"column":34,"nodeType":"1508","messageId":"1509","endLine":783,"endColumn":35,"suggestions":"1513"},{"ruleId":"1506","severity":1,"message":"1511","line":788,"column":31,"nodeType":"1508","messageId":"1509","endLine":788,"endColumn":32,"suggestions":"1514"},{"ruleId":"1506","severity":1,"message":"1507","line":808,"column":34,"nodeType":"1508","messageId":"1509","endLine":808,"endColumn":35,"suggestions":"1515"},{"ruleId":"1506","severity":1,"message":"1511","line":813,"column":31,"nodeType":"1508","messageId":"1509","endLine":813,"endColumn":32,"suggestions":"1516"},{"ruleId":"1506","severity":1,"message":"1507","line":846,"column":34,"nodeType":"1508","messageId":"1509","endLine":846,"endColumn":35,"suggestions":"1517"},{"ruleId":"1506","severity":1,"message":"1511","line":851,"column":31,"nodeType":"1508","messageId":"1509","endLine":851,"endColumn":32,"suggestions":"1518"},{"ruleId":"1506","severity":1,"message":"1507","line":869,"column":34,"nodeType":"1508","messageId":"1509","endLine":869,"endColumn":35,"suggestions":"1519"},{"ruleId":"1506","severity":1,"message":"1511","line":874,"column":31,"nodeType":"1508","messageId":"1509","endLine":874,"endColumn":32,"suggestions":"1520"},{"ruleId":"1506","severity":1,"message":"1507","line":894,"column":34,"nodeType":"1508","messageId":"1509","endLine":894,"endColumn":35,"suggestions":"1521"},{"ruleId":"1506","severity":1,"message":"1511","line":899,"column":31,"nodeType":"1508","messageId":"1509","endLine":899,"endColumn":32,"suggestions":"1522"},{"ruleId":"1506","severity":1,"message":"1507","line":915,"column":59,"nodeType":"1508","messageId":"1509","endLine":915,"endColumn":60,"suggestions":"1523"},{"ruleId":"1506","severity":1,"message":"1511","line":915,"column":165,"nodeType":"1508","messageId":"1509","endLine":915,"endColumn":166,"suggestions":"1524"},{"ruleId":"1288","severity":1,"message":"1525","line":1333,"column":7,"nodeType":"1290","messageId":"1291","endLine":1333,"endColumn":12},{"ruleId":"1506","severity":1,"message":"1507","line":1489,"column":34,"nodeType":"1508","messageId":"1509","endLine":1489,"endColumn":35,"suggestions":"1526"},{"ruleId":"1506","severity":1,"message":"1511","line":1494,"column":31,"nodeType":"1508","messageId":"1509","endLine":1494,"endColumn":32,"suggestions":"1527"},{"ruleId":"1506","severity":1,"message":"1507","line":1510,"column":34,"nodeType":"1508","messageId":"1509","endLine":1510,"endColumn":35,"suggestions":"1528"},{"ruleId":"1506","severity":1,"message":"1511","line":1515,"column":31,"nodeType":"1508","messageId":"1509","endLine":1515,"endColumn":32,"suggestions":"1529"},{"ruleId":"1363","severity":1,"message":"1530","line":1766,"column":6,"nodeType":"1365","endLine":1766,"endColumn":21,"suggestions":"1531"},{"ruleId":"1363","severity":1,"message":"1532","line":1787,"column":6,"nodeType":"1365","endLine":1787,"endColumn":8,"suggestions":"1533"},{"ruleId":"1363","severity":1,"message":"1534","line":1834,"column":6,"nodeType":"1365","endLine":1834,"endColumn":23,"suggestions":"1535"},{"ruleId":"1363","severity":1,"message":"1536","line":1858,"column":6,"nodeType":"1365","endLine":1858,"endColumn":26,"suggestions":"1537"},{"ruleId":"1363","severity":1,"message":"1538","line":1909,"column":6,"nodeType":"1365","endLine":1909,"endColumn":24,"suggestions":"1539"},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1457","line":20,"column":10,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1540","line":27,"column":29,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":45},{"ruleId":"1288","severity":1,"message":"1541","line":28,"column":10,"nodeType":"1290","messageId":"1291","endLine":28,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1542","line":28,"column":19,"nodeType":"1290","messageId":"1291","endLine":28,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1319","line":6,"column":3,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":7},{"ruleId":"1288","severity":1,"message":"1359","line":9,"column":3,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1367","line":13,"column":3,"nodeType":"1290","messageId":"1291","endLine":13,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1543","line":47,"column":10,"nodeType":"1290","messageId":"1291","endLine":47,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1544","line":47,"column":22,"nodeType":"1290","messageId":"1291","endLine":47,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1545","line":324,"column":9,"nodeType":"1290","messageId":"1291","endLine":324,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1501","line":23,"column":20,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1546","line":25,"column":33,"nodeType":"1290","messageId":"1291","endLine":25,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1547","line":27,"column":10,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1548","line":27,"column":22,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":35},{"ruleId":"1412","severity":1,"message":"1480","line":170,"column":48,"nodeType":"1347","messageId":"1414","endLine":170,"endColumn":50},{"ruleId":"1363","severity":1,"message":"1549","line":286,"column":6,"nodeType":"1365","endLine":286,"endColumn":8,"suggestions":"1550"},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":27,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1457","line":12,"column":10,"nodeType":"1290","messageId":"1291","endLine":12,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1477","line":24,"column":9,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1491","line":24,"column":26,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":32},{"ruleId":"1288","severity":1,"message":"1492","line":24,"column":34,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":39},{"ruleId":"1363","severity":1,"message":"1551","line":234,"column":6,"nodeType":"1365","endLine":234,"endColumn":22,"suggestions":"1552"},{"ruleId":"1412","severity":1,"message":"1480","line":245,"column":28,"nodeType":"1347","messageId":"1414","endLine":245,"endColumn":30},{"ruleId":"1363","severity":1,"message":"1553","line":248,"column":6,"nodeType":"1365","endLine":248,"endColumn":21,"suggestions":"1554"},{"ruleId":"1288","severity":1,"message":"1476","line":1,"column":28,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1555","line":6,"column":5,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":10},{"ruleId":"1412","severity":1,"message":"1413","line":97,"column":20,"nodeType":"1347","messageId":"1414","endLine":97,"endColumn":22},{"ruleId":"1363","severity":1,"message":"1556","line":243,"column":6,"nodeType":"1365","endLine":243,"endColumn":26,"suggestions":"1557"},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1390","line":5,"column":3,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1558","line":7,"column":3,"nodeType":"1290","messageId":"1291","endLine":7,"endColumn":6},{"ruleId":"1288","severity":1,"message":"1559","line":61,"column":16,"nodeType":"1290","messageId":"1291","endLine":61,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1525","line":66,"column":5,"nodeType":"1290","messageId":"1291","endLine":66,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1560","line":77,"column":10,"nodeType":"1290","messageId":"1291","endLine":77,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1501","line":88,"column":20,"nodeType":"1290","messageId":"1291","endLine":88,"endColumn":31},{"ruleId":"1311","severity":1,"message":"1312","line":151,"column":18,"nodeType":"1313","endLine":151,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":153,"column":18,"nodeType":"1313","endLine":153,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":155,"column":18,"nodeType":"1313","endLine":155,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":157,"column":18,"nodeType":"1313","endLine":157,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":180,"column":11,"nodeType":"1313","endLine":188,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":193,"column":13,"nodeType":"1313","endLine":193,"endColumn":63},{"ruleId":"1412","severity":1,"message":"1480","line":301,"column":28,"nodeType":"1347","messageId":"1414","endLine":301,"endColumn":30},{"ruleId":"1363","severity":1,"message":"1561","line":556,"column":6,"nodeType":"1365","endLine":556,"endColumn":13,"suggestions":"1562"},{"ruleId":"1363","severity":1,"message":"1563","line":565,"column":6,"nodeType":"1365","endLine":565,"endColumn":8,"suggestions":"1564"},{"ruleId":"1311","severity":1,"message":"1312","line":570,"column":14,"nodeType":"1313","endLine":570,"endColumn":43},{"ruleId":"1311","severity":1,"message":"1312","line":572,"column":14,"nodeType":"1313","endLine":572,"endColumn":43},{"ruleId":"1311","severity":1,"message":"1312","line":574,"column":14,"nodeType":"1313","endLine":574,"endColumn":43},{"ruleId":"1311","severity":1,"message":"1312","line":576,"column":14,"nodeType":"1313","endLine":576,"endColumn":43},{"ruleId":"1288","severity":1,"message":"1406","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1565","line":2,"column":36,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1566","line":3,"column":10,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1457","line":19,"column":10,"nodeType":"1290","messageId":"1291","endLine":19,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1477","line":26,"column":18,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1567","line":30,"column":10,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1568","line":30,"column":19,"nodeType":"1290","messageId":"1291","endLine":30,"endColumn":29},{"ruleId":"1311","severity":1,"message":"1312","line":65,"column":16,"nodeType":"1313","endLine":65,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":67,"column":16,"nodeType":"1313","endLine":67,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":69,"column":16,"nodeType":"1313","endLine":69,"endColumn":41},{"ruleId":"1311","severity":1,"message":"1312","line":71,"column":16,"nodeType":"1313","endLine":71,"endColumn":41},{"ruleId":"1363","severity":1,"message":"1569","line":77,"column":3,"nodeType":"1290","endLine":77,"endColumn":12,"suggestions":"1570"},{"ruleId":"1288","severity":1,"message":"1571","line":3,"column":3,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1390","line":9,"column":3,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1572","line":10,"column":3,"nodeType":"1290","messageId":"1291","endLine":10,"endColumn":7},{"ruleId":"1288","severity":1,"message":"1573","line":46,"column":3,"nodeType":"1290","messageId":"1291","endLine":46,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1574","line":58,"column":5,"nodeType":"1290","messageId":"1291","endLine":58,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1358","line":59,"column":5,"nodeType":"1290","messageId":"1291","endLine":59,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1575","line":62,"column":5,"nodeType":"1290","messageId":"1291","endLine":62,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1576","line":63,"column":5,"nodeType":"1290","messageId":"1291","endLine":63,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1577","line":114,"column":5,"nodeType":"1290","messageId":"1291","endLine":114,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1578","line":118,"column":5,"nodeType":"1290","messageId":"1291","endLine":118,"endColumn":23},{"ruleId":"1345","severity":1,"message":"1346","line":177,"column":61,"nodeType":"1347","messageId":"1348","endLine":177,"endColumn":62},{"ruleId":"1345","severity":1,"message":"1346","line":185,"column":45,"nodeType":"1347","messageId":"1348","endLine":185,"endColumn":46},{"ruleId":"1288","severity":1,"message":"1370","line":237,"column":9,"nodeType":"1290","messageId":"1291","endLine":237,"endColumn":12},{"ruleId":"1288","severity":1,"message":"1579","line":344,"column":9,"nodeType":"1290","messageId":"1291","endLine":344,"endColumn":21},{"ruleId":"1301","severity":1,"message":"1302","line":623,"column":9,"nodeType":"1303","messageId":"1304","endLine":630,"endColumn":10},{"ruleId":"1288","severity":1,"message":"1408","line":678,"column":22,"nodeType":"1290","messageId":"1291","endLine":678,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1409","line":678,"column":28,"nodeType":"1290","messageId":"1291","endLine":678,"endColumn":40},{"ruleId":"1363","severity":1,"message":"1580","line":805,"column":6,"nodeType":"1365","endLine":805,"endColumn":13,"suggestions":"1581"},{"ruleId":"1363","severity":1,"message":"1582","line":827,"column":6,"nodeType":"1365","endLine":827,"endColumn":26,"suggestions":"1583"},{"ruleId":"1288","severity":1,"message":"1571","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1584","line":29,"column":8,"nodeType":"1290","messageId":"1291","endLine":29,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1477","line":32,"column":18,"nodeType":"1290","messageId":"1291","endLine":32,"endColumn":24},{"ruleId":"1301","severity":1,"message":"1302","line":55,"column":5,"nodeType":"1303","messageId":"1304","endLine":63,"endColumn":6},{"ruleId":"1363","severity":1,"message":"1585","line":80,"column":6,"nodeType":"1365","endLine":80,"endColumn":21,"suggestions":"1586"},{"ruleId":"1311","severity":1,"message":"1312","line":127,"column":17,"nodeType":"1313","endLine":130,"endColumn":19},{"ruleId":"1311","severity":1,"message":"1312","line":151,"column":21,"nodeType":"1313","endLine":151,"endColumn":69},{"ruleId":"1311","severity":1,"message":"1312","line":171,"column":25,"nodeType":"1313","endLine":178,"endColumn":27},{"ruleId":"1311","severity":1,"message":"1312","line":34,"column":11,"nodeType":"1313","endLine":37,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":41,"column":13,"nodeType":"1313","endLine":44,"endColumn":15},{"ruleId":"1311","severity":1,"message":"1312","line":49,"column":11,"nodeType":"1313","endLine":52,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":59,"column":11,"nodeType":"1313","endLine":62,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1571","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1587","line":4,"column":8,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1588","line":16,"column":8,"nodeType":"1290","messageId":"1291","endLine":16,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1589","line":17,"column":8,"nodeType":"1290","messageId":"1291","endLine":17,"endColumn":20},{"ruleId":"1288","severity":1,"message":"1479","line":20,"column":9,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1477","line":20,"column":18,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1590","line":23,"column":9,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1591","line":24,"column":10,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1592","line":24,"column":19,"nodeType":"1290","messageId":"1291","endLine":24,"endColumn":29},{"ruleId":"1412","severity":1,"message":"1413","line":30,"column":33,"nodeType":"1347","messageId":"1414","endLine":30,"endColumn":35},{"ruleId":"1311","severity":1,"message":"1312","line":32,"column":17,"nodeType":"1313","endLine":32,"endColumn":62},{"ruleId":"1412","severity":1,"message":"1413","line":36,"column":37,"nodeType":"1347","messageId":"1414","endLine":36,"endColumn":39},{"ruleId":"1311","severity":1,"message":"1312","line":38,"column":17,"nodeType":"1313","endLine":38,"endColumn":42},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1593","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1594","line":2,"column":26,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1359","line":2,"column":33,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":38},{"ruleId":"1288","severity":1,"message":"1595","line":12,"column":8,"nodeType":"1290","messageId":"1291","endLine":12,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1596","line":13,"column":8,"nodeType":"1290","messageId":"1291","endLine":13,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1597","line":14,"column":8,"nodeType":"1290","messageId":"1291","endLine":14,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1598","line":15,"column":8,"nodeType":"1290","messageId":"1291","endLine":15,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1599","line":17,"column":8,"nodeType":"1290","messageId":"1291","endLine":17,"endColumn":17},{"ruleId":"1288","severity":1,"message":"1600","line":18,"column":8,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1584","line":25,"column":8,"nodeType":"1290","messageId":"1291","endLine":25,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1588","line":26,"column":8,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1431","line":16,"column":10,"nodeType":"1290","messageId":"1291","endLine":16,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1601","line":33,"column":10,"nodeType":"1290","messageId":"1291","endLine":33,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1602","line":51,"column":10,"nodeType":"1290","messageId":"1291","endLine":51,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1603","line":51,"column":20,"nodeType":"1290","messageId":"1291","endLine":51,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1501","line":62,"column":20,"nodeType":"1290","messageId":"1291","endLine":62,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1604","line":65,"column":10,"nodeType":"1290","messageId":"1291","endLine":65,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1605","line":65,"column":18,"nodeType":"1290","messageId":"1291","endLine":65,"endColumn":27},{"ruleId":"1311","severity":1,"message":"1312","line":138,"column":11,"nodeType":"1313","endLine":145,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":150,"column":13,"nodeType":"1313","endLine":150,"endColumn":33},{"ruleId":"1311","severity":1,"message":"1312","line":196,"column":18,"nodeType":"1313","endLine":196,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":198,"column":18,"nodeType":"1313","endLine":198,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":200,"column":18,"nodeType":"1313","endLine":200,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":202,"column":18,"nodeType":"1313","endLine":202,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":226,"column":11,"nodeType":"1313","endLine":233,"endColumn":13},{"ruleId":"1311","severity":1,"message":"1312","line":238,"column":13,"nodeType":"1313","endLine":238,"endColumn":63},{"ruleId":"1363","severity":1,"message":"1606","line":369,"column":6,"nodeType":"1365","endLine":369,"endColumn":15,"suggestions":"1607"},{"ruleId":"1363","severity":1,"message":"1563","line":378,"column":6,"nodeType":"1365","endLine":378,"endColumn":8,"suggestions":"1608"},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1334","line":5,"column":3,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":8},{"ruleId":"1288","severity":1,"message":"1609","line":8,"column":10,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1391","line":8,"column":37,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":49},{"ruleId":"1288","severity":1,"message":"1610","line":25,"column":8,"nodeType":"1290","messageId":"1291","endLine":25,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1611","line":43,"column":27,"nodeType":"1290","messageId":"1291","endLine":43,"endColumn":45},{"ruleId":"1288","severity":1,"message":"1612","line":44,"column":31,"nodeType":"1290","messageId":"1291","endLine":44,"endColumn":53},{"ruleId":"1288","severity":1,"message":"1613","line":45,"column":10,"nodeType":"1290","messageId":"1291","endLine":45,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1614","line":45,"column":29,"nodeType":"1290","messageId":"1291","endLine":45,"endColumn":49},{"ruleId":"1288","severity":1,"message":"1615","line":51,"column":5,"nodeType":"1290","messageId":"1291","endLine":51,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1616","line":54,"column":5,"nodeType":"1290","messageId":"1291","endLine":54,"endColumn":15},{"ruleId":"1332","severity":1,"message":"1425","line":180,"column":11,"nodeType":"1313","endLine":180,"endColumn":49},{"ruleId":"1412","severity":1,"message":"1480","line":268,"column":28,"nodeType":"1347","messageId":"1414","endLine":268,"endColumn":30},{"ruleId":"1412","severity":1,"message":"1480","line":273,"column":48,"nodeType":"1347","messageId":"1414","endLine":273,"endColumn":50},{"ruleId":"1288","severity":1,"message":"1429","line":2,"column":5,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1476","line":3,"column":5,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1571","line":5,"column":10,"nodeType":"1290","messageId":"1291","endLine":5,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1588","line":17,"column":8,"nodeType":"1290","messageId":"1291","endLine":17,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1477","line":20,"column":18,"nodeType":"1290","messageId":"1291","endLine":20,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1590","line":23,"column":11,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1617","line":80,"column":10,"nodeType":"1290","messageId":"1291","endLine":80,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1618","line":98,"column":5,"nodeType":"1290","messageId":"1291","endLine":98,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1619","line":99,"column":5,"nodeType":"1290","messageId":"1291","endLine":99,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1620","line":100,"column":5,"nodeType":"1290","messageId":"1291","endLine":100,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1621","line":101,"column":5,"nodeType":"1290","messageId":"1291","endLine":101,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1622","line":102,"column":5,"nodeType":"1290","messageId":"1291","endLine":102,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1623","line":103,"column":5,"nodeType":"1290","messageId":"1291","endLine":103,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1624","line":104,"column":5,"nodeType":"1290","messageId":"1291","endLine":104,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1625","line":105,"column":5,"nodeType":"1290","messageId":"1291","endLine":105,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1626","line":106,"column":5,"nodeType":"1290","messageId":"1291","endLine":106,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1627","line":112,"column":5,"nodeType":"1290","messageId":"1291","endLine":112,"endColumn":23},{"ruleId":"1311","severity":1,"message":"1312","line":235,"column":11,"nodeType":"1313","endLine":235,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":237,"column":11,"nodeType":"1313","endLine":237,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":241,"column":11,"nodeType":"1313","endLine":241,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":243,"column":11,"nodeType":"1313","endLine":243,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":247,"column":11,"nodeType":"1313","endLine":247,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":249,"column":11,"nodeType":"1313","endLine":249,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":253,"column":11,"nodeType":"1313","endLine":253,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":255,"column":11,"nodeType":"1313","endLine":255,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":259,"column":11,"nodeType":"1313","endLine":259,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":261,"column":11,"nodeType":"1313","endLine":261,"endColumn":47},{"ruleId":"1311","severity":1,"message":"1312","line":265,"column":11,"nodeType":"1313","endLine":265,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":267,"column":11,"nodeType":"1313","endLine":267,"endColumn":46},{"ruleId":"1311","severity":1,"message":"1312","line":271,"column":11,"nodeType":"1313","endLine":271,"endColumn":50},{"ruleId":"1311","severity":1,"message":"1312","line":273,"column":11,"nodeType":"1313","endLine":273,"endColumn":50},{"ruleId":"1311","severity":1,"message":"1312","line":277,"column":11,"nodeType":"1313","endLine":277,"endColumn":56},{"ruleId":"1311","severity":1,"message":"1312","line":279,"column":11,"nodeType":"1313","endLine":279,"endColumn":56},{"ruleId":"1311","severity":1,"message":"1312","line":283,"column":11,"nodeType":"1313","endLine":283,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":285,"column":11,"nodeType":"1313","endLine":285,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":289,"column":11,"nodeType":"1313","endLine":289,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":291,"column":11,"nodeType":"1313","endLine":291,"endColumn":63},{"ruleId":"1311","severity":1,"message":"1312","line":306,"column":17,"nodeType":"1313","endLine":306,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":309,"column":17,"nodeType":"1313","endLine":309,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":321,"column":17,"nodeType":"1313","endLine":321,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":324,"column":17,"nodeType":"1313","endLine":324,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":336,"column":17,"nodeType":"1313","endLine":336,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":339,"column":17,"nodeType":"1313","endLine":339,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":351,"column":17,"nodeType":"1313","endLine":351,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":354,"column":17,"nodeType":"1313","endLine":354,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":366,"column":17,"nodeType":"1313","endLine":366,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":369,"column":17,"nodeType":"1313","endLine":369,"endColumn":67},{"ruleId":"1311","severity":1,"message":"1312","line":381,"column":17,"nodeType":"1313","endLine":381,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":384,"column":17,"nodeType":"1313","endLine":384,"endColumn":66},{"ruleId":"1311","severity":1,"message":"1312","line":396,"column":17,"nodeType":"1313","endLine":396,"endColumn":70},{"ruleId":"1311","severity":1,"message":"1312","line":399,"column":17,"nodeType":"1313","endLine":399,"endColumn":70},{"ruleId":"1311","severity":1,"message":"1312","line":411,"column":17,"nodeType":"1313","endLine":411,"endColumn":76},{"ruleId":"1311","severity":1,"message":"1312","line":414,"column":17,"nodeType":"1313","endLine":414,"endColumn":76},{"ruleId":"1311","severity":1,"message":"1312","line":426,"column":17,"nodeType":"1313","endLine":426,"endColumn":83},{"ruleId":"1311","severity":1,"message":"1312","line":429,"column":17,"nodeType":"1313","endLine":429,"endColumn":83},{"ruleId":"1332","severity":1,"message":"1425","line":681,"column":11,"nodeType":"1313","endLine":681,"endColumn":49},{"ruleId":"1363","severity":1,"message":"1628","line":702,"column":6,"nodeType":"1365","endLine":702,"endColumn":13,"suggestions":"1629"},{"ruleId":"1363","severity":1,"message":"1630","line":714,"column":6,"nodeType":"1365","endLine":714,"endColumn":18,"suggestions":"1631"},{"ruleId":"1363","severity":1,"message":"1632","line":747,"column":6,"nodeType":"1365","endLine":747,"endColumn":25,"suggestions":"1633"},{"ruleId":"1363","severity":1,"message":"1634","line":800,"column":6,"nodeType":"1365","endLine":800,"endColumn":44,"suggestions":"1635"},{"ruleId":"1311","severity":1,"message":"1312","line":817,"column":21,"nodeType":"1313","endLine":817,"endColumn":100},{"ruleId":"1311","severity":1,"message":"1312","line":834,"column":19,"nodeType":"1313","endLine":834,"endColumn":104},{"ruleId":"1288","severity":1,"message":"1636","line":9,"column":15,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1636","line":9,"column":15,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1483","line":9,"column":30,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1636","line":9,"column":15,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1637","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1638","line":2,"column":17,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":27},{"ruleId":"1288","severity":1,"message":"1406","line":23,"column":8,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":14},{"ruleId":"1305","severity":1,"message":"1306","line":225,"column":41,"nodeType":"1307","messageId":"1308","endLine":225,"endColumn":43},{"ruleId":"1305","severity":1,"message":"1306","line":237,"column":47,"nodeType":"1307","messageId":"1308","endLine":237,"endColumn":49},{"ruleId":"1288","severity":1,"message":"1353","line":451,"column":23,"nodeType":"1290","messageId":"1291","endLine":451,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1403","line":830,"column":11,"nodeType":"1290","messageId":"1291","endLine":830,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1639","line":832,"column":11,"nodeType":"1290","messageId":"1291","endLine":832,"endColumn":15},{"ruleId":"1288","severity":1,"message":"1640","line":850,"column":9,"nodeType":"1290","messageId":"1291","endLine":850,"endColumn":18},{"ruleId":"1288","severity":1,"message":"1641","line":938,"column":65,"nodeType":"1290","messageId":"1291","endLine":938,"endColumn":76},{"ruleId":"1288","severity":1,"message":"1584","line":26,"column":8,"nodeType":"1290","messageId":"1291","endLine":26,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1642","line":62,"column":10,"nodeType":"1290","messageId":"1291","endLine":62,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1643","line":64,"column":10,"nodeType":"1290","messageId":"1291","endLine":64,"endColumn":22},{"ruleId":"1288","severity":1,"message":"1644","line":65,"column":10,"nodeType":"1290","messageId":"1291","endLine":65,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1645","line":66,"column":10,"nodeType":"1290","messageId":"1291","endLine":66,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1501","line":69,"column":20,"nodeType":"1290","messageId":"1291","endLine":69,"endColumn":31},{"ruleId":"1301","severity":1,"message":"1302","line":193,"column":5,"nodeType":"1303","messageId":"1304","endLine":214,"endColumn":6},{"ruleId":"1288","severity":1,"message":"1646","line":268,"column":21,"nodeType":"1290","messageId":"1291","endLine":268,"endColumn":31},{"ruleId":"1363","severity":1,"message":"1549","line":373,"column":6,"nodeType":"1365","endLine":373,"endColumn":8,"suggestions":"1647"},{"ruleId":"1288","severity":1,"message":"1636","line":9,"column":15,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1648","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":37},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":54,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":57},{"ruleId":"1288","severity":1,"message":"1649","line":9,"column":59,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":62},{"ruleId":"1288","severity":1,"message":"1636","line":9,"column":15,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1450","line":9,"column":10,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":13},{"ruleId":"1288","severity":1,"message":"1451","line":9,"column":25,"nodeType":"1290","messageId":"1291","endLine":9,"endColumn":28},{"ruleId":"1363","severity":1,"message":"1455","line":133,"column":6,"nodeType":"1365","endLine":133,"endColumn":8,"suggestions":"1650"},{"ruleId":"1288","severity":1,"message":"1584","line":21,"column":8,"nodeType":"1290","messageId":"1291","endLine":21,"endColumn":14},{"ruleId":"1363","severity":1,"message":"1651","line":153,"column":6,"nodeType":"1365","endLine":153,"endColumn":8,"suggestions":"1652"},{"ruleId":"1363","severity":1,"message":"1653","line":160,"column":6,"nodeType":"1365","endLine":160,"endColumn":19,"suggestions":"1654"},{"ruleId":"1363","severity":1,"message":"1455","line":170,"column":6,"nodeType":"1365","endLine":170,"endColumn":8,"suggestions":"1655"},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":27,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":36},{"ruleId":"1288","severity":1,"message":"1431","line":4,"column":10,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1383","line":4,"column":20,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":24},{"ruleId":"1288","severity":1,"message":"1458","line":4,"column":26,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":28},{"ruleId":"1288","severity":1,"message":"1656","line":6,"column":10,"nodeType":"1290","messageId":"1291","endLine":6,"endColumn":22},{"ruleId":"1332","severity":1,"message":"1333","line":322,"column":11,"nodeType":"1313","endLine":337,"endColumn":12},{"ruleId":"1301","severity":1,"message":"1302","line":355,"column":5,"nodeType":"1303","messageId":"1304","endLine":374,"endColumn":6},{"ruleId":"1288","severity":1,"message":"1476","line":2,"column":17,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":25},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1584","line":11,"column":8,"nodeType":"1290","messageId":"1291","endLine":11,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1588","line":12,"column":8,"nodeType":"1290","messageId":"1291","endLine":12,"endColumn":9},{"ruleId":"1363","severity":1,"message":"1657","line":42,"column":6,"nodeType":"1365","endLine":42,"endColumn":8,"suggestions":"1658"},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1593","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1594","line":2,"column":26,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1359","line":2,"column":33,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":38},{"ruleId":"1288","severity":1,"message":"1584","line":22,"column":8,"nodeType":"1290","messageId":"1291","endLine":22,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1588","line":23,"column":8,"nodeType":"1290","messageId":"1291","endLine":23,"endColumn":9},{"ruleId":"1311","severity":1,"message":"1312","line":70,"column":15,"nodeType":"1313","endLine":70,"endColumn":37},{"ruleId":"1363","severity":1,"message":"1659","line":129,"column":6,"nodeType":"1365","endLine":129,"endColumn":8,"suggestions":"1660"},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1593","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1594","line":2,"column":26,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":31},{"ruleId":"1288","severity":1,"message":"1584","line":21,"column":8,"nodeType":"1290","messageId":"1291","endLine":21,"endColumn":14},{"ruleId":"1363","severity":1,"message":"1661","line":70,"column":6,"nodeType":"1365","endLine":70,"endColumn":8,"suggestions":"1662"},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1593","line":2,"column":10,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":16},{"ruleId":"1288","severity":1,"message":"1584","line":13,"column":8,"nodeType":"1290","messageId":"1291","endLine":13,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1588","line":14,"column":8,"nodeType":"1290","messageId":"1291","endLine":14,"endColumn":9},{"ruleId":"1394","severity":1,"message":"1423","line":51,"column":9,"nodeType":"1396","messageId":"1424","endLine":52,"endColumn":17},{"ruleId":"1394","severity":1,"message":"1423","line":82,"column":13,"nodeType":"1396","messageId":"1424","endLine":83,"endColumn":21},{"ruleId":"1363","severity":1,"message":"1663","line":102,"column":6,"nodeType":"1365","endLine":102,"endColumn":8,"suggestions":"1664"},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":10,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":19},{"ruleId":"1288","severity":1,"message":"1588","line":3,"column":8,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1594","line":2,"column":18,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":23},{"ruleId":"1288","severity":1,"message":"1572","line":2,"column":25,"nodeType":"1290","messageId":"1291","endLine":2,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1588","line":17,"column":8,"nodeType":"1290","messageId":"1291","endLine":17,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1341","line":22,"column":7,"nodeType":"1290","messageId":"1291","endLine":22,"endColumn":14},{"ruleId":"1665","severity":1,"message":"1666","line":44,"column":17,"nodeType":"1508","messageId":"1667","endLine":44,"endColumn":70},{"ruleId":"1288","severity":1,"message":"1429","line":1,"column":17,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1478","line":1,"column":38,"nodeType":"1290","messageId":"1291","endLine":1,"endColumn":44},{"ruleId":"1288","severity":1,"message":"1572","line":3,"column":25,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":29},{"ruleId":"1288","severity":1,"message":"1668","line":3,"column":31,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":35},{"ruleId":"1288","severity":1,"message":"1571","line":3,"column":37,"nodeType":"1290","messageId":"1291","endLine":3,"endColumn":42},{"ruleId":"1288","severity":1,"message":"1669","line":4,"column":10,"nodeType":"1290","messageId":"1291","endLine":4,"endColumn":26},{"ruleId":"1288","severity":1,"message":"1670","line":8,"column":8,"nodeType":"1290","messageId":"1291","endLine":8,"endColumn":21},{"ruleId":"1288","severity":1,"message":"1588","line":18,"column":8,"nodeType":"1290","messageId":"1291","endLine":18,"endColumn":9},{"ruleId":"1288","severity":1,"message":"1341","line":27,"column":7,"nodeType":"1290","messageId":"1291","endLine":27,"endColumn":14},{"ruleId":"1288","severity":1,"message":"1671","line":83,"column":9,"nodeType":"1290","messageId":"1291","endLine":83,"endColumn":20},{"ruleId":"1311","severity":1,"message":"1312","line":99,"column":13,"nodeType":"1313","endLine":112,"endColumn":41},"no-unused-vars","'ConfigProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1672"],"no-negated-in-lhs",["1673"],"'BrowserRouter' is defined but never used.","'addScheduledPet' is defined but never used.","'message' is defined but never used.","'Heard' is defined but never used.","'Option' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petSpecies' is assigned a value but never used.","'imgurl' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'patientId' is assigned a value but never used.","'age' is assigned a value but never used.","'isMix' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'Menu' is defined but never used.","'Spin' is defined but never used.","'dui' is defined but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'speciesId' is assigned a value but never used.","'breedName' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'addLogin' is defined but never used.","'MyIcon' is assigned a value but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Modal' is defined but never used.","'bounds' is assigned a value but never used.","'_resend' is assigned a value but never used.","'MaxMin' is defined but never used.","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'mar' is assigned a value but never used.","'history' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'setImageUrl' is assigned a value but never used.","'getBase64' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Heart' is defined but never used.","'ipcRenderer' is assigned a value but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'petId' is assigned a value but never used.","'getOta' is defined but never used.","'windowsHeight' is assigned a value but never used.","'selectDeviceName' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'num07' is assigned a value but never used.","'Radio' is defined but never used.","'petUrl' is assigned a value but never used.","'country' is assigned a value but never used.","'infoData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.","ArrayExpression",["1674"],"'Select' is defined but never used.","'createFromIconfontCN' is defined but never used.","'selectPetInfoByUserId' is defined but never used.","'url' is assigned a value but never used.","'userImage' is assigned a value but never used.","'imageId' is assigned a value but never used.","'images' is assigned a value but never used.","'rMin_red' is defined but never used.","'rClose_red' is defined but never used.","'rMin_white' is defined but never used.","'rClose_white' is defined but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'Close' is defined but never used.","'UploadImg' is defined but never used.","'MTop' is defined but never used.","'MyModal' is defined but never used.","'Draggable' is defined but never used.","'selectBreedBySpeciesId' is defined but never used.","'listAllPetInfo' is defined but never used.","'checkPatientId' is defined but never used.","'disabled' is assigned a value but never used.","'Space' is defined but never used.","'DownOutlined' is defined but never used.","'UpOutlined' is defined but never used.","'preOrderId' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'userName' is assigned a value but never used.","'endDate' is assigned a value but never used.","'selectListIndex' is assigned a value but never used.","'redJinggao' is defined but never used.","'MYButton' is defined but never used.","'loading' is assigned a value but never used.","'isSave' is assigned a value but never used.","'setIsSave' is assigned a value but never used.","'Button' is defined but never used.","'isMeasure' is assigned a value but never used.","'is15' is assigned a value but never used.","'self_tarting' is assigned a value but never used.","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'mac' is assigned a value but never used.","'hardwareVersion' is assigned a value but never used.","'softwareVersion' is assigned a value but never used.","'wifiFlag' is assigned a value but never used.","'control' is assigned a value but never used.","'weight' is assigned a value but never used.","'weightUnits' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","Expected a 'break' statement before 'default'.","default","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'checkUser' is defined but never used.","'deskRegistAWSSNS' is defined but never used.","'options' is assigned a value but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'mTop' is defined but never used.","'Popover' is defined but never used.","'getPetInfoByRFID' is defined but never used.","'placeContent' is assigned a value but never used.","'setPlaceholder' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","'headerRef' is assigned a value but never used.","'bluData' is assigned a value but never used.","'jiantou' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["1675"],"React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1676"],"'devWidth' is assigned a value but never used.","'devHeight' is assigned a value but never used.","'size' is assigned a value but never used.","'windowssize' is assigned a value but never used.","'timer' is assigned a value but never used.","'get' is defined but never used.","'del' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",["1677"],"'px' is defined but never used.","'pX' is defined but never used.","'GToMl' is defined but never used.","'MltoG' is defined but never used.","'GToOz' is defined but never used.","'OztoG' is defined but never used.","'CmtoIn' is defined but never used.","'IntoCm' is defined but never used.","'biggieHome' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1678"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1679"],"'useHover' is defined but never used.","React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1680"],"'storage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hardwareInfo' and 'selectHardwareInfoFun'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1681"],"'useState' is defined but never used.","'Header' is assigned a value but never used.","'useRef' is defined but never used.","'Content' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1682"],"'patch' is defined but never used.","'qsmPortName' is assigned a value but never used.","'getQsmPortName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'conectstatus'. Either include it or remove the dependency array.",["1683"],"React Hook useEffect has a missing dependency: 'readQSMConnectionStatus'. Either include it or remove the dependency array.",["1684"],"'devicesTitleHeight' is defined but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1685"],"'UnassignModal' is defined but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'lastWorkplaceId' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1686"],"'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1687","1688"],"Unnecessary escape character: \\-.",["1689","1690"],["1691","1692"],["1693","1694"],["1695","1696"],["1697","1698"],["1699","1700"],["1701","1702"],["1703","1704"],["1705","1706"],["1707","1708"],["1709","1710"],["1711","1712"],["1713","1714"],"'hisHe' is assigned a value but never used.",["1715","1716"],["1717","1718"],["1719","1720"],["1721","1722"],"React Hook useEffect has a missing dependency: '_getEmergencyHistory'. Either include it or remove the dependency array.",["1723"],"React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",["1724"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1725"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1726"],"React Hook useEffect has a missing dependency: 'units'. Either include it or remove the dependency array.",["1727"],"'mellaMeasurePart' is assigned a value but never used.","'vibible' is assigned a value but never used.","'setVibible' is assigned a value but never used.","'petLoading' is assigned a value but never used.","'setPetLoading' is assigned a value but never used.","'searchPetBody' is assigned a value but never used.","'getCurrPage' is assigned a value but never used.","'searchData' is assigned a value but never used.","'setSearchData' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1728"],"React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1729"],"React Hook useEffect has missing dependencies: 'hardwareReduce' and 'setBiggieConnectStatusFun'. Either include them or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1730"],"'token' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1731"],"'Tag' is defined but never used.","'memo' is assigned a value but never used.","'loding' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'getRecentPet'. Either include them or remove the dependency array.",["1732"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1733"],"'Carousel' is defined but never used.","'PlusOutlined' is defined but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1734"],"'Image' is defined but never used.","'Card' is defined but never used.","'mellaPredictReturnValue' is defined but never used.","'initTime' is assigned a value but never used.","'exchangeNum' is assigned a value but never used.","'time194' is assigned a value but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","'radioService' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1735"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1736"],"'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1737"],"'PressButton_Pro' is defined but never used.","'_' is defined but never used.","'HistoryTable' is defined but never used.","'mellaConnectStatus' is assigned a value but never used.","'saveNum' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'Layout' is defined but never used.","'Input' is defined but never used.","'swirl' is defined but never used.","'BreakSeal' is defined but never used.","'label' is defined but never used.","'Incubator' is defined but never used.","'overnight' is defined but never used.","'rapid' is defined but never used.","'useThrottleFn' is defined but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","'isMore' is assigned a value but never used.","'setIsMore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1738"],["1739"],"'ExclamationCircleOutlined' is defined but never used.","'down_red' is defined but never used.","'setLastWeightValue' is assigned a value but never used.","'setLastWeightTimeValue' is assigned a value but never used.","'lastRuleTimeValue' is assigned a value but never used.","'setLastRuleTimeValue' is assigned a value but never used.","'neckValue' is assigned a value but never used.","'torsoValue' is assigned a value but never used.","'useGetState' is defined but never used.","'torsoLength' is assigned a value but never used.","'l2rarmDistance' is assigned a value but never used.","'upperTorsoCircumference' is assigned a value but never used.","'lowerTorsoCircumference' is assigned a value but never used.","'h2tLength' is assigned a value but never used.","'neckCircumference' is assigned a value but never used.","'hindLimbLength' is assigned a value but never used.","'foreLimbLength' is assigned a value but never used.","'foreLimbCircumference' is assigned a value but never used.","'rulerConnectStatus' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRecentPet' and 'weight'. Either include them or remove the dependency array.",["1740"],"React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1741"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1742"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'forelimbCircumferenceValue', 'forelimbLengthValue', 'headValue', 'hindlimbValue', 'inputIndex', 'lowerValue', 'neckValue', 'radioValue', 'receiveBroadcastHardwareInfo.deviceType', 'receiveBroadcastHardwareInfo.macId', 'rulerUnit', 'selectHardwareInfo', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1743"],"'postJson' is defined but never used.","'Table' is defined but never used.","'Popconfirm' is defined but never used.","'_del' is assigned a value but never used.","'tableData' is assigned a value but never used.","'historyData' is assigned a value but never used.","'connectionKey' is assigned a value but never used.","'selectRoleId' is assigned a value but never used.","'workplaceName' is assigned a value but never used.","'workplaceId' is assigned a value but never used.","'deviceType' is assigned a value but never used.",["1744"],"'postFormData' is defined but never used.","'put' is defined but never used.",["1745"],"React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",["1746"],"React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",["1747"],["1748"],"'SyncOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'onClick'. Either include it or remove the dependency array.",["1749"],"React Hook useEffect has a missing dependency: 'qsmMessage.qsmTimeType'. Either include it or remove the dependency array. If 'setType' needs the current value of 'qsmMessage.qsmTimeType', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmTimeType' in the reducer.",["1750"],"React Hook useEffect has a missing dependency: 'qsmMessage.qsmEarPart'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'qsmMessage.qsmEarPart', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmEarPart' in the reducer.",["1751"],"React Hook useEffect has a missing dependency: 'isNext'. Either include it or remove the dependency array.",["1752"],"no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression","'List' is defined but never used.","'InfoCircleFilled' is defined but never used.","'electronStore' is defined but never used.","'urlErrModal' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1753","fix":"1754"},{"desc":"1755","fix":"1756"},{"desc":"1757","fix":"1758"},{"desc":"1759","fix":"1760"},{"desc":"1761","fix":"1762"},{"desc":"1763","fix":"1764"},{"desc":"1765","fix":"1766"},{"desc":"1767","fix":"1768"},{"desc":"1769","fix":"1770"},{"desc":"1771","fix":"1772"},{"desc":"1773","fix":"1774"},{"desc":"1775","fix":"1776"},{"desc":"1757","fix":"1777"},{"messageId":"1778","fix":"1779","desc":"1780"},{"messageId":"1781","fix":"1782","desc":"1783"},{"messageId":"1778","fix":"1784","desc":"1780"},{"messageId":"1781","fix":"1785","desc":"1783"},{"messageId":"1778","fix":"1786","desc":"1780"},{"messageId":"1781","fix":"1787","desc":"1783"},{"messageId":"1778","fix":"1788","desc":"1780"},{"messageId":"1781","fix":"1789","desc":"1783"},{"messageId":"1778","fix":"1790","desc":"1780"},{"messageId":"1781","fix":"1791","desc":"1783"},{"messageId":"1778","fix":"1792","desc":"1780"},{"messageId":"1781","fix":"1793","desc":"1783"},{"messageId":"1778","fix":"1794","desc":"1780"},{"messageId":"1781","fix":"1795","desc":"1783"},{"messageId":"1778","fix":"1796","desc":"1780"},{"messageId":"1781","fix":"1797","desc":"1783"},{"messageId":"1778","fix":"1798","desc":"1780"},{"messageId":"1781","fix":"1799","desc":"1783"},{"messageId":"1778","fix":"1800","desc":"1780"},{"messageId":"1781","fix":"1801","desc":"1783"},{"messageId":"1778","fix":"1802","desc":"1780"},{"messageId":"1781","fix":"1803","desc":"1783"},{"messageId":"1778","fix":"1804","desc":"1780"},{"messageId":"1781","fix":"1805","desc":"1783"},{"messageId":"1778","fix":"1806","desc":"1780"},{"messageId":"1781","fix":"1807","desc":"1783"},{"messageId":"1778","fix":"1808","desc":"1780"},{"messageId":"1781","fix":"1809","desc":"1783"},{"messageId":"1778","fix":"1810","desc":"1780"},{"messageId":"1781","fix":"1811","desc":"1783"},{"messageId":"1778","fix":"1812","desc":"1780"},{"messageId":"1781","fix":"1813","desc":"1783"},{"messageId":"1778","fix":"1814","desc":"1780"},{"messageId":"1781","fix":"1815","desc":"1783"},{"messageId":"1778","fix":"1816","desc":"1780"},{"messageId":"1781","fix":"1817","desc":"1783"},{"desc":"1818","fix":"1819"},{"desc":"1820","fix":"1821"},{"desc":"1822","fix":"1823"},{"desc":"1824","fix":"1825"},{"desc":"1826","fix":"1827"},{"desc":"1828","fix":"1829"},{"desc":"1830","fix":"1831"},{"desc":"1832","fix":"1833"},{"desc":"1834","fix":"1835"},{"desc":"1836","fix":"1837"},{"desc":"1838","fix":"1839"},{"desc":"1840","fix":"1841"},{"desc":"1842","fix":"1843"},{"desc":"1844","fix":"1845"},{"desc":"1846","fix":"1847"},{"desc":"1848","fix":"1849"},{"desc":"1838","fix":"1850"},{"desc":"1851","fix":"1852"},{"desc":"1853","fix":"1854"},{"desc":"1855","fix":"1856"},{"desc":"1857","fix":"1858"},{"desc":"1828","fix":"1859"},{"desc":"1759","fix":"1860"},{"desc":"1861","fix":"1862"},{"desc":"1863","fix":"1864"},{"desc":"1759","fix":"1865"},{"desc":"1866","fix":"1867"},{"desc":"1868","fix":"1869"},{"desc":"1870","fix":"1871"},{"desc":"1872","fix":"1873"},"Update the dependencies array to be: [form, storage.userId]",{"range":"1874","text":"1875"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1876","text":"1877"},"Update the dependencies array to be: []",{"range":"1878","text":"1879"},"Update the dependencies array to be: [destroyOnClose, width]",{"range":"1880","text":"1881"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1882","text":"1883"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1884","text":"1885"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"1886","text":"1887"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",{"range":"1888","text":"1889"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1890","text":"1891"},"Update the dependencies array to be: [conectstatus]",{"range":"1892","text":"1893"},"Update the dependencies array to be: [readQSMConnectionStatus]",{"range":"1894","text":"1895"},"Update the dependencies array to be: [hardwareList]",{"range":"1896","text":"1897"},{"range":"1898","text":"1879"},"removeEscape",{"range":"1899","text":"1900"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1901","text":"1902"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1903","text":"1900"},{"range":"1904","text":"1902"},{"range":"1905","text":"1900"},{"range":"1906","text":"1902"},{"range":"1907","text":"1900"},{"range":"1908","text":"1902"},{"range":"1909","text":"1900"},{"range":"1910","text":"1902"},{"range":"1911","text":"1900"},{"range":"1912","text":"1902"},{"range":"1913","text":"1900"},{"range":"1914","text":"1902"},{"range":"1915","text":"1900"},{"range":"1916","text":"1902"},{"range":"1917","text":"1900"},{"range":"1918","text":"1902"},{"range":"1919","text":"1900"},{"range":"1920","text":"1902"},{"range":"1921","text":"1900"},{"range":"1922","text":"1902"},{"range":"1923","text":"1900"},{"range":"1924","text":"1902"},{"range":"1925","text":"1900"},{"range":"1926","text":"1902"},{"range":"1927","text":"1900"},{"range":"1928","text":"1902"},{"range":"1929","text":"1900"},{"range":"1930","text":"1902"},{"range":"1931","text":"1900"},{"range":"1932","text":"1902"},{"range":"1933","text":"1900"},{"range":"1934","text":"1902"},{"range":"1935","text":"1900"},{"range":"1936","text":"1902"},"Update the dependencies array to be: [_getEmergencyHistory, petDetailInfo]",{"range":"1937","text":"1938"},"Update the dependencies array to be: [mellaMeasureNum]",{"range":"1939","text":"1940"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1941","text":"1942"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1943","text":"1944"},"Update the dependencies array to be: [biggieBodyWeight, units]",{"range":"1945","text":"1946"},"Update the dependencies array to be: [_getExam]",{"range":"1947","text":"1948"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1949","text":"1950"},"Update the dependencies array to be: [hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",{"range":"1951","text":"1952"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"1953","text":"1954"},"Update the dependencies array to be: [getPetTemperatureData, getRecentPet, petId]",{"range":"1955","text":"1956"},"Update the dependencies array to be: [storage.userId]",{"range":"1957","text":"1958"},"Add dependencies array: [callBack, timers]",{"range":"1959","text":"1960"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1961","text":"1962"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1963","text":"1964"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1965","text":"1966"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1967","text":"1968"},{"range":"1969","text":"1958"},"Update the dependencies array to be: [getRecentPet, petId, weight]",{"range":"1970","text":"1971"},"Update the dependencies array to be: [finishScan, inputIndex, newData]",{"range":"1972","text":"1973"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1974","text":"1975"},"Update the dependencies array to be: [bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",{"range":"1976","text":"1977"},{"range":"1978","text":"1948"},{"range":"1979","text":"1881"},"Update the dependencies array to be: [getAllPet]",{"range":"1980","text":"1981"},"Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",{"range":"1982","text":"1983"},{"range":"1984","text":"1881"},"Update the dependencies array to be: [onClick]",{"range":"1985","text":"1986"},"Update the dependencies array to be: [qsmMessage.qsmTimeType]",{"range":"1987","text":"1988"},"Update the dependencies array to be: [qsmMessage.qsmEarPart]",{"range":"1989","text":"1990"},"Update the dependencies array to be: [isNext]",{"range":"1991","text":"1992"},[2508,2510],"[form, storage.userId]",[44259,44261],"[_noUSB, _send, blueSearch]",[44337,44363],"[]",[2079,2081],"[destroyOnClose, width]",[9394,9396],"[setReceiveBroadcastHardwareInfoFun]",[10498,10528],"[devicesList, receiveBroadcastHardwareInfo]",[6232,6249],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[1775,1810],"[selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",[5018,5030],"[letterListCopy, phoneListCopy, searchText]",[4609,4611],"[conectstatus]",[5055,5057],"[readQSMConnectionStatus]",[3213,3215],"[hardwareList]",[5499,5525],[24176,24177],"",[24176,24176],"\\",[24382,24383],[24382,24382],[24982,24983],[24982,24982],[25188,25189],[25188,25188],[25888,25889],[25888,25888],[26094,26095],[26094,26094],[27269,27270],[27269,27269],[27475,27476],[27475,27475],[28100,28101],[28100,28100],[28306,28307],[28306,28306],[28992,28993],[28992,28992],[29198,29199],[29198,29198],[29785,29786],[29785,29785],[29891,29892],[29891,29891],[46565,46566],[46565,46565],[46771,46772],[46771,46771],[47317,47318],[47317,47317],[47523,47524],[47523,47523],[54850,54865],"[_getEmergencyHistory, petDetailInfo]",[55303,55305],"[mellaMeasureNum]",[56593,56610],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[57175,57195],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[59110,59128],"[biggieBodyWeight, units]",[8468,8470],"[_getExam]",[7234,7250],"[hardwareReduce, weight]",[7552,7567],"[hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",[7403,7423],"[hardwareList, selectHardwareInfo, selectHardwareType]",[15969,15976],"[getPetTemperatureData, getRecentPet, petId]",[16165,16167],"[storage.userId]",[2218,2218],", [callBack, timers]",[22054,22061],"[callBack, prediction, timeNum, value]",[22683,22703],"[mellaConnectStatus, value]",[2438,2453],"[callBack, carouselIndex]",[9688,9697],"[getPetTemperatureData, reRender, saveNum]",[9909,9911],[23660,23667],"[getRecentPet, petId, weight]",[23920,23932],"[finishScan, inputIndex, newData]",[24584,24603],"[inputIndex, rulerConfirmCount]",[26595,26633],"[bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",[10673,10675],[3573,3575],[4188,4190],"[getAllPet]",[4321,4334],"[searchPetByPetNameOrPatientId, searchValue]",[4529,4531],[1076,1078],"[onClick]",[3643,3645],"[qsmMessage.qsmTimeType]",[2041,2043],"[qsmMessage.qsmEarPart]",[3115,3117],"[isNext]"]