[
    {
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js": "1",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js": "2",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js": "3",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx": "4",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx": "5",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx": "6",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx": "7",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx": "8",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx": "9",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx": "10",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx": "11",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx": "12",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx": "13",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx": "14",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx": "15",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx": "16",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx": "17",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx": "18",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx": "19",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx": "20",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx": "21",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx": "22",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx": "23",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx": "24",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx": "25",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx": "26",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js": "27",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx": "28",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx": "29",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx": "30",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx": "31",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js": "32",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js": "33",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js": "34",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js": "35",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js": "36",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js": "37",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js": "38",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js": "39",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx": "40",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx": "41",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js": "42",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js": "43",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js": "44",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js": "45",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js": "46",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js": "47",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js": "48",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js": "49",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js": "50",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx": "51",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx": "52",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx": "53",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js": "54",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx": "55",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js": "56",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js": "57",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js": "58",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx": "59",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js": "60",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js": "61",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js": "62",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js": "63",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js": "64",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx": "65",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx": "66",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx": "67",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx": "68",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx": "69",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx": "70",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx": "71",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx": "72",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx": "73",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx": "74",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx": "75",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx": "76",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js": "77",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js": "78",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js": "79",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js": "80",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js": "81",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx": "82",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js": "83",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx": "84",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js": "85",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js": "86",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js": "87",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx": "88",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js": "89",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js": "90",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js": "91",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js": "92",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js": "93",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx": "94",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx": "95",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx": "96",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx": "97",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx": "98",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx": "99",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js": "100",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js": "101",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js": "102",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js": "103",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js": "104",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js": "105",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js": "106",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js": "107",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js": "108",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js": "109",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js": "110",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js": "111",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx": "112",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx": "113",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx": "114",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx": "115",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js": "116",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js": "117",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js": "118",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js": "119",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js": "120",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js": "121",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js": "122",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js": "123",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js": "124",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx": "125",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx": "126",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx": "127",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx": "128",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx": "129",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx": "130",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx": "131",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx": "132",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx": "133",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx": "134",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx": "135",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx": "136",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx": "137",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx": "138",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js": "139",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js": "140",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js": "141",
        "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\baseNotDetectedModal\\index.jsx": "142"
    },
    {
        "size": 349,
        "mtime": 1661943267097,
        "results": "143",
        "hashOfConfig": "144"
    },
    {
        "size": 4375,
        "mtime": 1671175438277,
        "results": "145",
        "hashOfConfig": "144"
    },
    {
        "size": 577,
        "mtime": 1657680900931,
        "results": "146",
        "hashOfConfig": "144"
    },
    {
        "size": 3909,
        "mtime": 1671081633626,
        "results": "147",
        "hashOfConfig": "144"
    },
    {
        "size": 28721,
        "mtime": 1671176891249,
        "results": "148",
        "hashOfConfig": "144"
    },
    {
        "size": 17918,
        "mtime": 1671074728778,
        "results": "149",
        "hashOfConfig": "144"
    },
    {
        "size": 12263,
        "mtime": 1661509757375,
        "results": "150",
        "hashOfConfig": "144"
    },
    {
        "size": 7530,
        "mtime": 1661509757418,
        "results": "151",
        "hashOfConfig": "144"
    },
    {
        "size": 5219,
        "mtime": 1661509757421,
        "results": "152",
        "hashOfConfig": "144"
    },
    {
        "size": 15135,
        "mtime": 1670519612613,
        "results": "153",
        "hashOfConfig": "144"
    },
    {
        "size": 4323,
        "mtime": 1670476781045,
        "results": "154",
        "hashOfConfig": "144"
    },
    {
        "size": 17771,
        "mtime": 1670508764019,
        "results": "155",
        "hashOfConfig": "144"
    },
    {
        "size": 10946,
        "mtime": 1671173798794,
        "results": "156",
        "hashOfConfig": "144"
    },
    {
        "size": 16101,
        "mtime": 1671193060760,
        "results": "157",
        "hashOfConfig": "144"
    },
    {
        "size": 19240,
        "mtime": 1671178642586,
        "results": "158",
        "hashOfConfig": "144"
    },
    {
        "size": 10087,
        "mtime": 1671178804418,
        "results": "159",
        "hashOfConfig": "144"
    },
    {
        "size": 16765,
        "mtime": 1671021465470,
        "results": "160",
        "hashOfConfig": "144"
    },
    {
        "size": 9521,
        "mtime": 1661509757378,
        "results": "161",
        "hashOfConfig": "144"
    },
    {
        "size": 10681,
        "mtime": 1671095219621,
        "results": "162",
        "hashOfConfig": "144"
    },
    {
        "size": 36189,
        "mtime": 1668680100322,
        "results": "163",
        "hashOfConfig": "144"
    },
    {
        "size": 10447,
        "mtime": 1663049218292,
        "results": "164",
        "hashOfConfig": "144"
    },
    {
        "size": 12450,
        "mtime": 1666664976348,
        "results": "165",
        "hashOfConfig": "144"
    },
    {
        "size": 15523,
        "mtime": 1671091924519,
        "results": "166",
        "hashOfConfig": "144"
    },
    {
        "size": 9902,
        "mtime": 1671091398234,
        "results": "167",
        "hashOfConfig": "144"
    },
    {
        "size": 15395,
        "mtime": 1661509757340,
        "results": "168",
        "hashOfConfig": "144"
    },
    {
        "size": 3542,
        "mtime": 1670478058337,
        "results": "169",
        "hashOfConfig": "144"
    },
    {
        "size": 152,
        "mtime": 1668680100336,
        "results": "170",
        "hashOfConfig": "144"
    },
    {
        "size": 19827,
        "mtime": 1670520445537,
        "results": "171",
        "hashOfConfig": "144"
    },
    {
        "size": 14247,
        "mtime": 1670478185136,
        "results": "172",
        "hashOfConfig": "144"
    },
    {
        "size": 13678,
        "mtime": 1669789296111,
        "results": "173",
        "hashOfConfig": "144"
    },
    {
        "size": 46106,
        "mtime": 1671190636300,
        "results": "174",
        "hashOfConfig": "144"
    },
    {
        "size": 1275,
        "mtime": 1655168677817,
        "results": "175",
        "hashOfConfig": "144"
    },
    {
        "size": 1153,
        "mtime": 1668623363379,
        "results": "176",
        "hashOfConfig": "144"
    },
    {
        "size": 3631,
        "mtime": 1670986048810,
        "results": "177",
        "hashOfConfig": "144"
    },
    {
        "size": 54460,
        "mtime": 1671174045432,
        "results": "178",
        "hashOfConfig": "144"
    },
    {
        "size": 1011,
        "mtime": 1661509757298,
        "results": "179",
        "hashOfConfig": "144"
    },
    {
        "size": 1077,
        "mtime": 1661509757299,
        "results": "180",
        "hashOfConfig": "144"
    },
    {
        "size": 248,
        "mtime": 1671016874864,
        "results": "181",
        "hashOfConfig": "144"
    },
    {
        "size": 360,
        "mtime": 1668680100338,
        "results": "182",
        "hashOfConfig": "144"
    },
    {
        "size": 1565,
        "mtime": 1668623363384,
        "results": "183",
        "hashOfConfig": "144"
    },
    {
        "size": 2807,
        "mtime": 1671093968382,
        "results": "184",
        "hashOfConfig": "144"
    },
    {
        "size": 3856,
        "mtime": 1656498255377,
        "results": "185",
        "hashOfConfig": "144"
    },
    {
        "size": 396,
        "mtime": 1670523667714,
        "results": "186",
        "hashOfConfig": "144"
    },
    {
        "size": 1451,
        "mtime": 1655168677805,
        "results": "187",
        "hashOfConfig": "144"
    },
    {
        "size": 115,
        "mtime": 1667901350091,
        "results": "188",
        "hashOfConfig": "144"
    },
    {
        "size": 951,
        "mtime": 1661849271242,
        "results": "189",
        "hashOfConfig": "144"
    },
    {
        "size": 792,
        "mtime": 1669460972724,
        "results": "190",
        "hashOfConfig": "144"
    },
    {
        "size": 9528,
        "mtime": 1668623363376,
        "results": "191",
        "hashOfConfig": "144"
    },
    {
        "size": 2328,
        "mtime": 1669615972111,
        "results": "192",
        "hashOfConfig": "144"
    },
    {
        "size": 539,
        "mtime": 1670523734619,
        "results": "193",
        "hashOfConfig": "144"
    },
    {
        "size": 11604,
        "mtime": 1665209511004,
        "results": "194",
        "hashOfConfig": "144"
    },
    {
        "size": 3311,
        "mtime": 1671153041231,
        "results": "195",
        "hashOfConfig": "144"
    },
    {
        "size": 6984,
        "mtime": 1669184380038,
        "results": "196",
        "hashOfConfig": "144"
    },
    {
        "size": 1092,
        "mtime": 1669460972756,
        "results": "197",
        "hashOfConfig": "144"
    },
    {
        "size": 3692,
        "mtime": 1666664900732,
        "results": "198",
        "hashOfConfig": "144"
    },
    {
        "size": 465,
        "mtime": 1657709941429,
        "results": "199",
        "hashOfConfig": "144"
    },
    {
        "size": 697,
        "mtime": 1655467295909,
        "results": "200",
        "hashOfConfig": "144"
    },
    {
        "size": 4661,
        "mtime": 1666773134630,
        "results": "201",
        "hashOfConfig": "144"
    },
    {
        "size": 1410,
        "mtime": 1655168677807,
        "results": "202",
        "hashOfConfig": "144"
    },
    {
        "size": 1150,
        "mtime": 1655427981745,
        "results": "203",
        "hashOfConfig": "144"
    },
    {
        "size": 899,
        "mtime": 1661509757306,
        "results": "204",
        "hashOfConfig": "144"
    },
    {
        "size": 1041,
        "mtime": 1655168677775,
        "results": "205",
        "hashOfConfig": "144"
    },
    {
        "size": 17788,
        "mtime": 1659945946500,
        "results": "206",
        "hashOfConfig": "144"
    },
    {
        "size": 11452,
        "mtime": 1655168677771,
        "results": "207",
        "hashOfConfig": "144"
    },
    {
        "size": 1745,
        "mtime": 1671082970159,
        "results": "208",
        "hashOfConfig": "144"
    },
    {
        "size": 8495,
        "mtime": 1666665069514,
        "results": "209",
        "hashOfConfig": "144"
    },
    {
        "size": 1635,
        "mtime": 1671082870395,
        "results": "210",
        "hashOfConfig": "144"
    },
    {
        "size": 2428,
        "mtime": 1671160161306,
        "results": "211",
        "hashOfConfig": "144"
    },
    {
        "size": 6241,
        "mtime": 1671083039476,
        "results": "212",
        "hashOfConfig": "144"
    },
    {
        "size": 8628,
        "mtime": 1660703894009,
        "results": "213",
        "hashOfConfig": "144"
    },
    {
        "size": 12203,
        "mtime": 1671190817748,
        "results": "214",
        "hashOfConfig": "144"
    },
    {
        "size": 8464,
        "mtime": 1671195081569,
        "results": "215",
        "hashOfConfig": "144"
    },
    {
        "size": 11878,
        "mtime": 1671189179952,
        "results": "216",
        "hashOfConfig": "144"
    },
    {
        "size": 60682,
        "mtime": 1671184507547,
        "results": "217",
        "hashOfConfig": "144"
    },
    {
        "size": 2048,
        "mtime": 1667801045516,
        "results": "218",
        "hashOfConfig": "144"
    },
    {
        "size": 9802,
        "mtime": 1671184904080,
        "results": "219",
        "hashOfConfig": "144"
    },
    {
        "size": 818,
        "mtime": 1669460972754,
        "results": "220",
        "hashOfConfig": "144"
    },
    {
        "size": 372,
        "mtime": 1657709885011,
        "results": "221",
        "hashOfConfig": "144"
    },
    {
        "size": 532,
        "mtime": 1655467295881,
        "results": "222",
        "hashOfConfig": "144"
    },
    {
        "size": 146,
        "mtime": 1668680100333,
        "results": "223",
        "hashOfConfig": "144"
    },
    {
        "size": 2103,
        "mtime": 1656498255375,
        "results": "224",
        "hashOfConfig": "144"
    },
    {
        "size": 7962,
        "mtime": 1667901350097,
        "results": "225",
        "hashOfConfig": "144"
    },
    {
        "size": 322,
        "mtime": 1669184380014,
        "results": "226",
        "hashOfConfig": "144"
    },
    {
        "size": 5765,
        "mtime": 1661509757472,
        "results": "227",
        "hashOfConfig": "144"
    },
    {
        "size": 76,
        "mtime": 1661509757291,
        "results": "228",
        "hashOfConfig": "144"
    },
    {
        "size": 514,
        "mtime": 1667901350087,
        "results": "229",
        "hashOfConfig": "144"
    },
    {
        "size": 99,
        "mtime": 1661509757285,
        "results": "230",
        "hashOfConfig": "144"
    },
    {
        "size": 3427,
        "mtime": 1669184380030,
        "results": "231",
        "hashOfConfig": "144"
    },
    {
        "size": 1023,
        "mtime": 1666596984105,
        "results": "232",
        "hashOfConfig": "144"
    },
    {
        "size": 71,
        "mtime": 1670523569851,
        "results": "233",
        "hashOfConfig": "144"
    },
    {
        "size": 336,
        "mtime": 1669460972752,
        "results": "234",
        "hashOfConfig": "144"
    },
    {
        "size": 88,
        "mtime": 1657709847680,
        "results": "235",
        "hashOfConfig": "144"
    },
    {
        "size": 224,
        "mtime": 1655467295875,
        "results": "236",
        "hashOfConfig": "144"
    },
    {
        "size": 3907,
        "mtime": 1662111155827,
        "results": "237",
        "hashOfConfig": "144"
    },
    {
        "size": 2115,
        "mtime": 1671020970507,
        "results": "238",
        "hashOfConfig": "144"
    },
    {
        "size": 26481,
        "mtime": 1671192647046,
        "results": "239",
        "hashOfConfig": "144"
    },
    {
        "size": 6574,
        "mtime": 1670985311720,
        "results": "240",
        "hashOfConfig": "144"
    },
    {
        "size": 1367,
        "mtime": 1671083005824,
        "results": "241",
        "hashOfConfig": "144"
    },
    {
        "size": 44957,
        "mtime": 1667805178264,
        "results": "242",
        "hashOfConfig": "144"
    },
    {
        "size": 2855,
        "mtime": 1662620045686,
        "results": "243",
        "hashOfConfig": "144"
    },
    {
        "size": 597,
        "mtime": 1669184380016,
        "results": "244",
        "hashOfConfig": "144"
    },
    {
        "size": 866,
        "mtime": 1661509757289,
        "results": "245",
        "hashOfConfig": "144"
    },
    {
        "size": 2237,
        "mtime": 1667901350089,
        "results": "246",
        "hashOfConfig": "144"
    },
    {
        "size": 664,
        "mtime": 1661509757283,
        "results": "247",
        "hashOfConfig": "144"
    },
    {
        "size": 574,
        "mtime": 1661509757287,
        "results": "248",
        "hashOfConfig": "144"
    },
    {
        "size": 574,
        "mtime": 1661509757286,
        "results": "249",
        "hashOfConfig": "144"
    },
    {
        "size": 664,
        "mtime": 1661509757282,
        "results": "250",
        "hashOfConfig": "144"
    },
    {
        "size": 1323,
        "mtime": 1661509757292,
        "results": "251",
        "hashOfConfig": "144"
    },
    {
        "size": 944,
        "mtime": 1661509757290,
        "results": "252",
        "hashOfConfig": "144"
    },
    {
        "size": 1168,
        "mtime": 1669615900491,
        "results": "253",
        "hashOfConfig": "144"
    },
    {
        "size": 1353,
        "mtime": 1669184380029,
        "results": "254",
        "hashOfConfig": "144"
    },
    {
        "size": 12474,
        "mtime": 1666664891735,
        "results": "255",
        "hashOfConfig": "144"
    },
    {
        "size": 8417,
        "mtime": 1666664842042,
        "results": "256",
        "hashOfConfig": "144"
    },
    {
        "size": 7925,
        "mtime": 1671185827233,
        "results": "257",
        "hashOfConfig": "144"
    },
    {
        "size": 1223,
        "mtime": 1666935452033,
        "results": "258",
        "hashOfConfig": "144"
    },
    {
        "size": 3044,
        "mtime": 1655168677819,
        "results": "259",
        "hashOfConfig": "144"
    },
    {
        "size": 706,
        "mtime": 1661849271238,
        "results": "260",
        "hashOfConfig": "144"
    },
    {
        "size": 885,
        "mtime": 1663040187632,
        "results": "261",
        "hashOfConfig": "144"
    },
    {
        "size": 583,
        "mtime": 1661509757304,
        "results": "262",
        "hashOfConfig": "144"
    },
    {
        "size": 611,
        "mtime": 1661509757305,
        "results": "263",
        "hashOfConfig": "144"
    },
    {
        "size": 738,
        "mtime": 1667180552622,
        "results": "264",
        "hashOfConfig": "144"
    },
    {
        "size": 4312,
        "mtime": 1668623363356,
        "results": "265",
        "hashOfConfig": "144"
    },
    {
        "size": 4553,
        "mtime": 1667901350100,
        "results": "266",
        "hashOfConfig": "144"
    },
    {
        "size": 71,
        "mtime": 1657699049494,
        "results": "267",
        "hashOfConfig": "144"
    },
    {
        "size": 30738,
        "mtime": 1666664961937,
        "results": "268",
        "hashOfConfig": "144"
    },
    {
        "size": 3693,
        "mtime": 1671154997561,
        "results": "269",
        "hashOfConfig": "144"
    },
    {
        "size": 19502,
        "mtime": 1671160091241,
        "results": "270",
        "hashOfConfig": "144"
    },
    {
        "size": 7179,
        "mtime": 1671192504923,
        "results": "271",
        "hashOfConfig": "144"
    },
    {
        "size": 12386,
        "mtime": 1671193760887,
        "results": "272",
        "hashOfConfig": "144"
    },
    {
        "size": 6885,
        "mtime": 1669795915594,
        "results": "273",
        "hashOfConfig": "144"
    },
    {
        "size": 2266,
        "mtime": 1669460972745,
        "results": "274",
        "hashOfConfig": "144"
    },
    {
        "size": 3032,
        "mtime": 1669460972743,
        "results": "275",
        "hashOfConfig": "144"
    },
    {
        "size": 4595,
        "mtime": 1668623363369,
        "results": "276",
        "hashOfConfig": "144"
    },
    {
        "size": 4418,
        "mtime": 1669632776044,
        "results": "277",
        "hashOfConfig": "144"
    },
    {
        "size": 4219,
        "mtime": 1667370458174,
        "results": "278",
        "hashOfConfig": "144"
    },
    {
        "size": 4076,
        "mtime": 1669796393335,
        "results": "279",
        "hashOfConfig": "144"
    },
    {
        "size": 15314,
        "mtime": 1671176500789,
        "results": "280",
        "hashOfConfig": "144"
    },
    {
        "size": 8354,
        "mtime": 1661509757395,
        "results": "281",
        "hashOfConfig": "144"
    },
    {
        "size": 4251,
        "mtime": 1663035379306,
        "results": "282",
        "hashOfConfig": "144"
    },
    {
        "size": 431,
        "mtime": 1655168677773,
        "results": "283",
        "hashOfConfig": "144"
    },
    {
        "size": 846,
        "mtime": 1655168677772,
        "results": "284",
        "hashOfConfig": "144"
    },
    {
        "size": 843,
        "mtime": 1671074170954,
        "results": "285",
        "hashOfConfig": "144"
    },
    {
        "filePath": "286",
        "messages": "287",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "288",
        "usedDeprecatedRules": "289"
    },
    "1n0gb2o",
    {
        "filePath": "290",
        "messages": "291",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "292",
        "messages": "293",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "294",
        "messages": "295",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "296",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "297",
        "messages": "298",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 16,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "299",
        "messages": "300",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "301",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "302",
        "messages": "303",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "304",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "305",
        "messages": "306",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "307",
        "messages": "308",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "309",
        "messages": "310",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "311",
        "messages": "312",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "313",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "314",
        "messages": "315",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "316",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "317",
        "messages": "318",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "319",
        "messages": "320",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 14,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "321",
        "messages": "322",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "323",
        "messages": "324",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "325",
        "messages": "326",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "327",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "328",
        "messages": "329",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "330",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "331",
        "messages": "332",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "333",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "334",
        "messages": "335",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 16,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "336",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "337",
        "messages": "338",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "339",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "340",
        "messages": "341",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "342",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "343",
        "messages": "344",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "345",
        "messages": "346",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "347",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "348",
        "messages": "349",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "350",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "351",
        "messages": "352",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "353",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "354",
        "messages": "355",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "356",
        "messages": "357",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "358",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "359",
        "messages": "360",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "361",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "362",
        "messages": "363",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 15,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "364",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "365",
        "messages": "366",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 18,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "367",
        "messages": "368",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "369",
        "messages": "370",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "371",
        "messages": "372",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "373",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "374",
        "messages": "375",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 29,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "376",
        "messages": "377",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "378",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "379",
        "messages": "380",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "381",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "382",
        "messages": "383",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "384",
        "messages": "385",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "386",
        "messages": "387",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "388",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "389",
        "messages": "390",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "391",
        "messages": "392",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "393",
        "messages": "394",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "395",
        "messages": "396",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "397",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "398",
        "messages": "399",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "400",
        "messages": "401",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "402",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "403",
        "messages": "404",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "405",
        "messages": "406",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "407",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "408",
        "messages": "409",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "410",
        "messages": "411",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "412",
        "messages": "413",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "414",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "415",
        "messages": "416",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "417",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "418",
        "messages": "419",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "420",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "421",
        "messages": "422",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "423",
        "messages": "424",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "425",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "426",
        "messages": "427",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "428",
        "messages": "429",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "430",
        "messages": "431",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "432",
        "messages": "433",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "434",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "435",
        "messages": "436",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "437",
        "messages": "438",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "439",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "440",
        "messages": "441",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "442",
        "messages": "443",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "444",
        "messages": "445",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "446",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "447",
        "messages": "448",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "449",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "450",
        "messages": "451",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "452",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "453",
        "messages": "454",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "455",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "456",
        "messages": "457",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "458",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "459",
        "messages": "460",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "461",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "462",
        "messages": "463",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "464",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "465",
        "messages": "466",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "467",
        "messages": "468",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "469",
        "messages": "470",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "471",
        "messages": "472",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 36,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "473",
        "messages": "474",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "475",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "476",
        "messages": "477",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "478",
        "messages": "479",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "480",
        "messages": "481",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "482",
        "messages": "483",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "484",
        "messages": "485",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "486",
        "messages": "487",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "488",
        "messages": "489",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "490",
        "messages": "491",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "492",
        "messages": "493",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "494",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "495",
        "messages": "496",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "497",
        "messages": "498",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "499",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "500",
        "messages": "501",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "502",
        "messages": "503",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "504",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "505",
        "messages": "506",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "507",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "508",
        "messages": "509",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "510",
        "messages": "511",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "512",
        "messages": "513",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "514",
        "messages": "515",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "516",
        "messages": "517",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "518",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "519",
        "messages": "520",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 14,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "521",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "522",
        "messages": "523",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 19,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "524",
        "messages": "525",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "526",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "527",
        "messages": "528",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "529",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "530",
        "messages": "531",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 56,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "532",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "533",
        "messages": "534",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "535",
        "messages": "536",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "537",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "538",
        "messages": "539",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "540",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "541",
        "messages": "542",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "543",
        "messages": "544",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "545",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "546",
        "messages": "547",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "548",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "549",
        "messages": "550",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "551",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "552",
        "messages": "553",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "554",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "555",
        "messages": "556",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "557",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "558",
        "messages": "559",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "560",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "561",
        "messages": "562",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 3,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "563",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "564",
        "messages": "565",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "566",
        "messages": "567",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 17,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "568",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "569",
        "messages": "570",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "571",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "572",
        "messages": "573",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "574",
        "messages": "575",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "576",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "577",
        "messages": "578",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "579",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "580",
        "messages": "581",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "582",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "583",
        "messages": "584",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "585",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "586",
        "messages": "587",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "588",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "589",
        "messages": "590",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "591",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "592",
        "messages": "593",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "594",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "595",
        "messages": "596",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "597",
        "messages": "598",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "599",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "600",
        "messages": "601",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "602",
        "messages": "603",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 10,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "604",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "605",
        "messages": "606",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 12,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "607",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "608",
        "messages": "609",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 16,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "610",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "611",
        "messages": "612",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "613",
        "messages": "614",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "615",
        "messages": "616",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 13,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "617",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "618",
        "messages": "619",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 4,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "620",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "621",
        "messages": "622",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 5,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "623",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "624",
        "messages": "625",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 7,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "626",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "627",
        "messages": "628",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 8,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "629",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "630",
        "messages": "631",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 6,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "632",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "633",
        "messages": "634",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 11,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "635",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "636",
        "messages": "637",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 9,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    {
        "filePath": "638",
        "messages": "639",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "640",
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "641",
        "messages": "642",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "643",
        "messages": "644",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "645",
        "messages": "646",
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": "289"
    },
    {
        "filePath": "647",
        "messages": "648",
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": null
    },
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\index.js",
    [
        "649"
    ],
    "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n",
    [
        "650",
        "651"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\App.js",
    [
        "652"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx",
    [
        "653"
    ],
    "import React, { Component, } from 'react'\nimport {\n  Button,\n  message,\n  Radio,\n} from 'antd';\n\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px, mTop, win } from '../../utils/px'\nimport MinClose from '../../utils/minClose/MinClose';\nimport { version } from '../../utils/appversion';\nimport logo from '../../assets/images/mella.png'\nimport './index.less';\nimport { connect } from 'react-redux';\n\nlet storage = window.localStorage;\n//定义变量:连续点击了几次logo\nlet logoClick = 0;\n//定义变量:点击logo的时间\nlet logoTime = 0;\nlet ipcRenderer = window.electron.ipcRenderer\n\nclass Home extends Component {\n  state = {\n    imgurl: '',\n    size: { width: 0, height: 0 }\n  }\n  componentDidMount() {\n    ipcRenderer.send('close-loading-window', 1)\n    ipcRenderer.send('small', win())\n    storage.measurepatientId = '';\n    temporaryStorage.logupVetInfo = {}\n    console.log('----===----', this.props.systemType);\n  }\n\n\n\n  _signUP = () => {\n    console.log('1');\n    this.props.history.push('/uesr/logUp/VetPrifile')\n  }\n\n  _openUtils = () => {\n    console.log('点击来了', logoClick);\n    if (new Date() - logoTime > 500) {\n      logoClick = 0;\n      logoTime = new Date();\n\n    } else {\n      logoClick++;\n      logoTime = new Date();\n      if (logoClick >= 8) {\n        logoClick = 0;\n        ipcRenderer.send('openDevTools', true)\n      }\n    }\n  }\n  render() {\n\n    let daohang = this.props.systemType === 'mac' ? 'daohang mac' : 'daohang windows'\n\n    return (\n      <div id=\"home\">\n        <div className={daohang} style={{ paddingTop: px(10), paddingRight: px(20), }}>\n          <MinClose />\n        </div>\n        <div className='flex refresh' style={{ alignItems: 'flex-end', paddingRight: px(20) }}>\n          <div className='flex' style={{ flexDirection: 'row', paddingTop: px(20), paddingRight: px(18), color: '#700B33', cursor: 'pointer' }}>\n            V{version}\n          </div>\n        </div>\n        <div className=\"heard\" >\n          <div className=\"logo\"\n            onClick={this._openUtils}\n          >\n            <img src={logo} alt=\"\" />\n          </div>\n        </div>\n        <div className=\"button\" style={{ marginBottom: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/page11') }}\n            className=\"siginInBtn\"\n          >\n            Sign In\n          </Button>\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>New to Mella? <p onClick={this._signUP} style={{textDecoration: 'underline' }}>Sign Up</p></div>\n        <div className=\"create\" style={{ marginBottom: mTop(20), marginTop: px(25) }}>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            // onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Quick Start\n          </Button>\n          {/* <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={() => { this.props.history.push('/uesr/logUp/VetPrifile') }}\n            className=\"createBtn\"\n          >\n            Create an Account\n          </Button> */}\n        </div>\n        <div className=\"text\"  style={{ marginTop: mTop(5), marginBottom: mTop(5) }}>\n          <p style={{ width: '350px', fontSize: '18px', color: '#ffc4db', textAlign: 'left' }}>\n          <Radio></Radio>I have read and agreed to the <p></p>\n           <span style={{ marginLeft: '22px', textDecoration: 'underline', color: '#fff' }}>Terms and Services</span> and <span style={{ color: '#fff', textDecoration: 'underline' }}>Privacy Policy</span>\n          </p>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(Home)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx",
    [
        "654",
        "655",
        "656",
        "657",
        "658",
        "659",
        "660",
        "661",
        "662",
        "663",
        "664",
        "665",
        "666",
        "667",
        "668",
        "669"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx",
    [
        "670",
        "671",
        "672",
        "673",
        "674",
        "675",
        "676"
    ],
    "import React, { Component } from \"react\";\nimport { Input, message, Spin } from \"antd\";\nimport {\n  createFromIconfontCN,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\n\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\nimport dui from \"./../../assets/images/dui.png\";\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\n\nimport { getLoginQRcode, loginWithQRcode, mellaLogin } from \"../../api\"\n\nimport temporaryStorage from \"../../utils/temporaryStorage\";\nimport { px, win } from \"../../utils/px\";\nimport MinClose from \"./../../utils/minClose/MinClose\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\nimport { addLogin } from \"../../utils/axios\";\n\nimport \"./index.less\";\nimport { connect } from \"react-redux\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nlet storage = window.localStorage;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\n});\nlet num = 0;\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\nlet isSign = true;\n\nclass SignIn extends Component {\n  state = {\n    isRemember: false,\n    email: \"\",\n    hash: \"\",\n    isCode: false,\n    baseUrl: \"\",\n    QRToken: \"\",\n    isExpired: false, //二维码是否过期\n    spin: false,\n    isLoadQrCode: false, //是否正在加载二维码\n  };\n  componentDidMount() {\n    isSign = true;\n    storage.lastOrganization = \"\";\n    //通知main.js渲染一个small窗口\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"small\", win());\n    //如果有保存的账号密码则展示出来\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\n      let data = storage.signIn;\n      data = JSON.parse(data);\n      this.setState({\n        email: data.email,\n        hash: data.hash,\n        QRToken: \"\",\n      });\n    }\n    //是否勾选了保持登录\n    if (storage.isRemember !== undefined) {\n      let isRemember = storage.isRemember === \"true\" ? true : false;\n      this.setState({\n        isRemember,\n      });\n    }\n    // 监听分辨率是否改变\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //清空本地的注册界面的信息\n    temporaryStorage.logupVetInfo = {};\n    this._getQRCode();\n  }\n  componentWillUnmount() {\n    isSign = false;\n    this.timer && clearInterval(this.timer);\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    // ipcRenderer.send('small')\n    ipcRenderer.send(\"small\", win());\n    this.setState({});\n  };\n  _getQRCode = () => {\n    this.setState({\n      isLoadQrCode: true,\n    });\n    num = 0;\n\n    getLoginQRcode()\n      // addQRCode()\n      .then((res) => {\n        message.destroy();\n\n        console.log(\"---获取二维码\", res);\n        if (res.flag === true) {\n          this.setState({\n            baseUrl: res.data.QRcode,\n            QRToken: res.data.QRToken,\n            isLoadQrCode: false,\n          });\n          this.timer = setInterval(() => {\n            if (!isSign) {\n              this.timer && clearInterval(this.timer);\n            }\n            num++;\n            console.log(\"lunxin\");\n            this._polling();\n\n            if (num > 200) {\n              //超过280秒则去显示二维码过期，要重新获取\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n            }\n          }, 2000);\n        } else {\n          message.error(\"Failed to obtain QR code\", 10);\n          this.setState({\n            isLoadQrCode: false,\n          });\n        }\n      })\n      .catch((err) => {\n        message.error(\"Failed to obtain QR code\", 10);\n        this.setState({\n          isLoadQrCode: false,\n        });\n        console.log(err);\n      });\n  };\n  //轮询\n  _polling = () => {\n\n    loginWithQRcode(this.state.QRToken)\n      .then((res) => {\n        console.log(\"轮询结果：\", res);\n        if (res.flag === true) {\n          switch (res.code) {\n            case 10001:\n              console.log(\"未扫码\");\n\n              break;\n\n            case 11033:\n              console.log(\"扫码未点击登录\");\n              this.timer && clearInterval(this.timer);\n              temporaryStorage.QRToken = this.state.QRToken;\n              let { name, url } = res.data;\n              this.props.history.replace({\n                pathname: \"/user/login/scanCodeLogin\",\n                params: { name, url },\n              });\n\n              break;\n\n            case 11023:\n              console.log(\"过期\");\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n\n              break;\n\n            default:\n              break;\n          }\n        }\n        console.log(\"code\", res.code);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //登录接口\n  _continue = () => {\n    const { email, hash, isRemember } = this.state;\n\n    message.destroy();\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: \"1\",\n    };\n    if (email === \"\") {\n      message.error(\"please input your email\");\n      return;\n    }\n    if (hash === \"\") {\n      message.error(\"please input your password\");\n      return;\n    }\n    console.log(params);\n    this.setState({\n      spin: true,\n    });\n    mellaLogin(params)\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          spin: false,\n        });\n        if (res.status && res.status === 404) {\n          message.error(\"system error\");\n          return;\n        }\n        if (res.status === 500) {\n          message.error(\"system error\");\n\n          return;\n        }\n        if (res.code === 10001 && res.msg === \"账号错误\") {\n          message.error(\"Account error\");\n          return;\n        }\n        if (res.code === 10002 && res.msg === \"密码错误\") {\n          message.error(\"wrong password\");\n          return;\n        }\n        if (\n          res.code === 0 &&\n          res.msg === \"success\" &&\n          res.success.roleId === 1\n        ) {\n          message.error(\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\n          message.error(\n            \"The account is restricted, please contact the management\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10003) {\n          message.error(\"The password or email is incorrect, please re-enter\");\n          return;\n        }\n\n        if (res.code === 0 && res.msg === \"success\") {\n          this.timer && clearInterval(this.timer);\n          console.log(\"账号密码正确，登录进去了\");\n          let { userWorkplace, lastOrganization, token, firstName, lastName } = res.success;\n          storage.token = token;\n          storage.userId = \"\";\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          if (isRemember === true) {\n            storage.signIn = data;\n          } else {\n            storage.signIn = \"\";\n          }\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId;\n          storage.roleId = res.success.roleId;\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = \"\";\n          storage.defaultCurrent = \"\";\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace);\n            let connectionKey = \"\";\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n\n                  }\n                  storage.orgName = element.organizationEntity.name\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n          } else {\n            storage.userWorkplace = \"\";\n            storage.connectionKey = \"\";\n          }\n          console.log('storage.orgName', storage.orgName);\n          this.props.history.push(\"/MainBody\");\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          spin: false,\n        });\n        console.log(err);\n      });\n  };\n\n  _signUp = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\n  };\n  _change = () => {\n    let { isCode } = this.state;\n    message.destroy();\n    if (isCode === false) {\n      this._getQRCode();\n    } else {\n      this.timer && clearInterval(this.timer);\n      num = 0;\n      this.setState({\n        isExpired: false,\n      });\n    }\n    this.setState({ isCode: !this.state.isCode });\n  };\n  //二维码界面\n  _qrCode = () => {\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\n\n    if (!isExpired) {\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{\n              width: px(120),\n              height: px(120),\n              opacity: imgOpacity,\n            }}\n          />\n          {isLoadQrCode && (\n            // true &&\n\n            <div className=\"err\">\n              <Spin\n                indicator={antIcon}\n                tip=\"Loading...\"\n                style={{ fontSize: 16, color: \"#e1206d\" }}\n              />\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\n          />\n\n          <div className=\"err\">\n            <div className=\"errText\">QR code has expired</div>\n            <div\n              className=\"btn\"\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\n              onClick={this.refresh}\n            >\n              Refresh\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n  //点击refresh按钮\n  refresh = () => {\n    this.setState({\n      isExpired: false,\n    });\n    num = 0;\n    this._getQRCode();\n  };\n  beforeDiv = () => {\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  heard = () => {\n    if (this.props.systemType === 'mac') {\n      return (\n        <div className=\"macheard\"  >\n          <div className=\"macheardson\" >\n            <MinClose />\n            <img\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n              src={back_hui} className={'returnImg'} />\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n      )\n    }\n\n  }\n\n  render() {\n    let { isCode, baseUrl } = this.state;\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\n    return (\n      <div id=\"signIn\">\n        {this.heard()}\n\n        <div className=\"body\">\n          <div className=\"logo\">\n            <img src={mellaLogo} alt=\"\" />\n          </div>\n          <div className=\"body\" style={{ position: \"relative\" }}>\n            <div\n              className=\"text\"\n              style={{\n                marginTop: '15px',\n              }}\n            >\n              Please enter email <br />\n              and password\n            </div>\n\n            <div className=\"inpF\">\n              <Input\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   fontSize: px(18),\n                // }}\n                value={this.state.email}\n                placeholder=\"rachel@friends.com\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    email: str,\n                  });\n                }}\n              />\n              <Input.Password\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   marginLeft: px(6),\n                //   marginBottom: px(18),\n                //   fontSize: px(18),\n                // }}\n                visibilityToggle={false}\n                value={this.state.hash}\n                placeholder=\"********\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    hash: str,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    this._continue();\n                  }\n                }}\n              />\n\n              <div\n                className=\"text\"\n                style={{\n                  marginTop: '15px',\n                }}\n              >\n                {\"Or scan QR Code\"}\n              </div>\n            </div>\n\n            {this._qrCode()}\n            <div\n              className=\"littleText flex\"\n              style={{\n                fontSize: px(12),\n                marginTop: px(10),\n                marginBottom: px(10),\n              }}\n            >\n              Go to your Mella mobile app to access\n              <br />\n              the QR scanner\n            </div>\n            <div className=\"stay\">\n              <div className=\"remember\">\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\n                <div\n                  className=\"box\"\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\n                  onClick={() => {\n                    let { isRemember } = this.state;\n                    this.setState({\n                      isRemember: !isRemember,\n                    });\n                    storage.isRemember = !isRemember;\n                  }}\n                >\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\n                </div>\n              </div>\n              <div\n                className=\"forgot\"\n                style={{ fontSize: px(16) }}\n                onMouseDown={() => {\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\n                  forget[0].style.opacity = 0.5;\n                }}\n                onMouseUp={() => {\n                  document.querySelectorAll(\n                    \"#signIn .forgot\"\n                  )[0].style.opacity = 1;\n                  if (this.state.email) {\n                    temporaryStorage.forgotPassword_email = this.state.email;\n                  }\n\n                  this.props.history.push(\"/user/login/forgotPassword\");\n                }}\n              >\n                Forgot?\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className=\"button11\"\n          style={{ backgroundColor: \"#E7E7E7\" }}\n        >\n          <div\n            className=\"btn1 flex\"\n            onClick={this._continue}\n          // style={{ height: px(40) }}\n          >\n            <p>{`CONTINUE`}</p>\n          </div>\n\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\n            <p style={{ fontSize: px(17) }}>\n              Do not have an account?{\" \"}\n              <a href=\"#\" onClick={this._signUp}>\n                Sign Up\n              </a>\n            </p>\n          </div>\n        </div>\n\n\n        <MyModal\n          visible={this.state.spin}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(SignIn)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx",
    [
        "677"
    ],
    "import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../assets/images/errorIcon.png'\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { px, mTop, pX, MTop } from '../../utils/px';\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\n\r\n\r\nimport './index.less';\r\nimport { checkForgetPassword, checkUser, forgetPwd, sendActivateEmail } from '../../api';\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    checkUser(email)\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    forgetPwd(this.state.email)\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n\r\n    checkForgetPassword(this.state.email)\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    sendActivateEmail(this.state.email)\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVerifyEmail\\index.jsx",
    [
        "678"
    ],
    "import React, { useState, useEffect } from 'react'\nimport { message, Button } from 'antd'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport { useHistory } from 'react-router-dom'\n\nimport './index.less';\nimport { activateUserByEmailCode, resendDeskRegistEmail } from '../../api';\n\nconst VerifyEmail = () => {\n  let history = useHistory()\n  const [code, setCode] = useState('')\n  const [resend, setResend] = useState(60)\n  const [visible, setVisible] = useState(false)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (resend > 0) {\n        setResend(resend - 1)\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer)\n    }\n  })\n\n  const _resend = (e) => {\n\n    if (resend <= 0) {\n\n      //下面写逻辑代码\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\n      let params = {\n        firstName,\n        lastName,\n        domain, email, hash, phone,\n      }\n      if (birthday) {\n        params.birthday = birthday\n      }\n      console.log('重新获取验证码入参', params);\n\n      resendDeskRegistEmail(temporaryStorage.logupEmailCode, params)\n        .then(res => {\n          console.log('重新获取验证码', res);\n          if (res.msg === 'success') {\n            message.success('The email has been resent, please check', 3)\n            temporaryStorage.logupEmailCode = res.data\n            setResend(60)\n          } else {\n            message.error('Failed to send mail', 3)\n\n          }\n        })\n        .catch(err => {\n          console.log('重新获取验证码失败');\n        })\n\n    }\n\n    //阻止a链接跳转\n    if (e && e.preventDefault)\n      e.preventDefault();\n    else\n      window.event.returnValue = false;\n  }\n  const _next = () => {\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\n    message.destroy()\n    if (code !== temporaryStorage.logupEmailCode) {\n      message.error('Verification code input is incorrect', 3)\n      return\n    }\n    else {\n      setVisible(true)\n      activateUserByEmailCode(code)\n        .then(res => {\n          setVisible(false)\n          console.log('验证码验证返回信息：', res);\n          if (res.flag === true) {\n            console.log('验证成功');\n            temporaryStorage.logupSuccessData = res.data\n            temporaryStorage.logupEmailCode = ''\n            history.push('/uesr/logUp/JoinOrganizationByOption')\n          } else {\n            message.error('Verification code verification failed', 3)\n          }\n\n        })\n        .catch(err => {\n          setVisible(false)\n          console.log('验证码验证错误：', err);\n        })\n    }\n\n  }\n\n  return (\n    <div id=\"verifyEmail\">\n      <div className=\"heard\">\n        <MaxMin\n          onClick={() => { history.push('/') }}\n          onClick1={() => history.goBack()}\n        />\n      </div>\n      <div className=\"body\">\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\n        <div className=\"text\">Please enter it below to confirm your address.</div>\n        <div className=\"inpF\">\n          <input\n            className=\"inp\"\n            type=\"text\"\n            value={code}\n            placeholder=\"Code\"\n            onChange={(val) => { setCode(val.target.value) }}\n            maxLength={6}\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\n          />\n        </div>\n\n        {/* <div className=\"resend\">\n          <a href=\"#\" onClick={_resend}>Resend</a>\n          {resend > 0 && `(${resend})`}\n        </div> */}\n      </div>\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\n        <div className=\"btnF\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={_next}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      <MyModal\n        visible={visible}\n      />\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default VerifyEmail\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\joinOrganizationByOption\\index.jsx",
    [
        "679",
        "680",
        "681",
        "682",
        "683"
    ],
    "import React, { Component } from 'react'\nimport {\n  message,\n  Modal,\n  Input,\n  Spin\n} from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport Button from '../../utils/button/Button'\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { listAll, mellaLogin, } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { updateUserInfo } from '../../api/mellaserver'\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nexport default class FindWorkplace extends Component {\n\n  state = {\n    search: '',\n    listData: [],\n    searchData: [],\n    selectId: {},\n    isOrg: false,       //nodel框是否显示\n    isWorkplace: false,\n    workplaceList: [],\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    selectworkplace: {}\n  }\n  componentDidMount() {\n\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    listAll()\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    this.setState({\n      selectId: temporaryStorage.logupSelectOrganization\n    })\n    temporaryStorage.logupSelectOrganization = {}\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('---登录入参', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          isLoading: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.status && res.status === 500) {\n          message.error('Internal Server Error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n        if (res.code === 10000 && res.msg === '系统内部错误') {\n          message.error('system error')\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token, lastName, firstName } = res.success\n          storage.token = token\n          storage.userId = ''\n          storage.userName = `${lastName} ${firstName}`\n          storage.userEmail = email\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          this.setState({\n            isOrg: false,\n            isWorkplace: false\n          })\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        })\n        message.error('Login failed')\n      })\n  }\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n      className={ this.state.selectId.organizationId === item.organizationId ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n        }}\n      >\n        <div className=\"item\">{item.name}</div>\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  _updateUserInfo = (params) => {\n    updateUserInfo(params)\n      .then(res => {\n        console.log(res);\n\n        if (res.flag === true) {\n          message.success('Join successfully', 3)\n\n          console.log('成功',);\n          if (!this.props.location.isSettingIn) {\n            this._logIn()\n          } else {\n            this.setState({\n              isLoading: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            isLoading: false\n          })\n          message.error('Identity update failed', 3)\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n          })\n          console.log(item);\n\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  _addworkplaced = () => {\n    let userId = this.props.location.isSettingIn ? storage.userId : temporaryStorage.logupSuccessData.userId\n    let params = {\n      userId,\n      roleId: 2,\n      workplaceId: this.state.selectworkplace.workplaceId,\n      organizationId: this.state.selectworkplace.organizationId\n    }\n    console.log('入参：', params);\n    this.setState({\n      isLoading: true,\n      isWorkplace: false,\n      isOrg: false\n    })\n    this._updateUserInfo(params)\n\n\n  }\n\n  render() {\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\n    return (\n      <div id=\"joinOrganizationByOption\">\n        <div className=\"heard\">\n          {/* 关闭缩小 */}\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            // onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\n            onClick1={() => this.props.history.goBack()}\n\n          />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"text\">Find My Organization</div>\n\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n\n                this.setState({\n                  isOrg: true\n                })\n                console.log('搜索名称加入');\n              }}\n            >\n              <div className=\"iconBox\">\n                <MyIcon type='icon-search' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n\n                <div className=\"title\">Search Organization</div>\n\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                console.log('创建');\n                this.props.history.push('/uesr/logUp/NewOrganization')\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Create an organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                if (this.props.location.isSettingIn) {\n                  this.props.history.goBack()\n                } else {\n                  let params = {\n                    userId: temporaryStorage.logupSuccessData.userId,\n                    roleId: 2,\n                  }\n                  message.destroy()\n                  this.setState({\n                    isLoading: true\n                  })\n                  console.log('搜索id加入', params);\n                  this._updateUserInfo(params)\n                }\n\n\n\n\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-no' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Continue without organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={isOrg}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div></div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n                <div className=\"text\"\n                  onMouseOver={() => {\n                    if (disabled) {\n                      this.setState({\n                        disabled: false,\n                      });\n                    }\n                  }}\n                  onMouseOut={() => {\n                    this.setState({\n                      disabled: true,\n                    });\n                  }}\n\n                >Find my organization</div>\n                <div className=\"searchBox\">\n                  <Input\n                    placeholder=\"Type Organization Name\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._search}\n                  />\n                </div>\n              </div>\n              <div className=\"list\">\n                {this._list()}\n              </div>\n              <div className=\"foot\">\n                <Button\n                  text={'Join Organization'}\n                  onClick={this._goWorkplace}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n              </div>\n            </div>\n          }\n        />\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\" &#xe61b; Search workplace\"\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\"\n\n              >\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n        <MyModal\n          visible={this.state.isLoading}\n        />\n\n      </div>\n    )\n  }\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\inviteTeam\\index.jsx",
    [
        "684",
        "685",
        "686",
        "687"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx",
    [
        "688",
        "689",
        "690",
        "691",
        "692",
        "693",
        "694",
        "695",
        "696",
        "697",
        "698",
        "699",
        "700",
        "701"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx",
    [
        "702",
        "703",
        "704",
        "705",
        "706"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx",
    [
        "707",
        "708",
        "709",
        "710",
        "711",
        "712",
        "713"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx",
    [
        "714"
    ],
    "\r\nimport React, { Component } from 'react'\r\nimport { message, Modal, Button } from 'antd';\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { px, win } from '../../utils/px'\r\nimport MyModal from '../../utils/myModal/MyModal.jsx'\r\nimport './index.less';\r\nimport { getOta } from '../../api/mellaserver/backend';\r\nimport { versionComarision } from '../../utils/commonFun';\r\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\r\nimport { localHardBinVersion } from '../../utils/appversion';\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\nlet uploadType = ''\r\n\r\nexport default class AdvancedSettings extends Component {\r\n\r\n  state = {\r\n    isHaveBase: true,\r\n    uploadText: '',\r\n    isUpload: false,\r\n    updateModal: false,\r\n    progress: 0,\r\n    localVersion: '',\r\n    cloudVersion: '',\r\n    filePath: '',\r\n    isModalOpen: false,\r\n    errorFlog: false\r\n  }\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    //检测是否有usb设备\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    //升级过程中发送的过程信息\r\n    ipcRenderer.on('uploadBaseInfo', this._uploadBaseInfo)\r\n    //底座发过来的指令信息\r\n    ipcRenderer.on('sned', this._send)\r\n    //发送结束升级指令,相当于初始化\r\n    ipcRenderer.send('reUpload', {})\r\n    //获取插入硬件版本\r\n    // this.getHardwareVersion();\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('uploadBaseInfo', this._uploadBaseInfo)\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  }\r\n  //进入界面时获取底座的版本\r\n  // getHardwareVersion = () => {\r\n  //   if(this.state.isHaveBase)\r\n  //   ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n  //   this.localVersionTimer = setTimeout(() => {\r\n  //     //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,给出弹窗提示\r\n  //     this.setState({ isModalOpen: true });\r\n  //     this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n  //   }, 3000);\r\n  // }\r\n  //底座发过来的指令信息\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    console.log('_send', data);\r\n    if (this.state.errorFlog) {\r\n      this.setState({\r\n        errorFlog: true\r\n      })\r\n    }\r\n    let { isUpload } = this.state\r\n\r\n    if (data[2] === 54) {\r\n      if (isUpload) {\r\n        if (data[3] === 0) {\r\n          this.setState({\r\n            uploadText: 'Start the upgrade after re-plugging the base'\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n        }\r\n      }\r\n\r\n    } else if (data[2] === 182) {\r\n      //为0代表底座通讯关闭成功了\r\n\r\n      if (data[3] === 0) {\r\n        if (isUpload) {\r\n          console.log('发送指令让底座进入升级状态');\r\n          ipcRenderer.send('enterUpgrade', { command: '38', arr: ['5A'] })\r\n        }\r\n\r\n      }\r\n    } else if (data[2] === 136) {\r\n      //获取到了版本信息,把定时器关闭,此底座不是很老版本\r\n      console.log('版本信息:', data);\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`;\r\n      this.setState({\r\n        localVersion,\r\n        uploadText: `The current version number is v${localVersion}, getting the latest version`\r\n      }, () => {\r\n        this.cloudVersion()\r\n      })\r\n    }\r\n\r\n  }\r\n  //是否插上底座设备，为false则代表插上了底座设备，反之为拔掉了底座设备\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    let { isUpload, progress } = this.state\r\n    if (data === false) {\r\n      this.setState({\r\n        isHaveBase: true,\r\n      })\r\n      if (isUpload) {\r\n        if (progress === 0) {\r\n          console.log('正在升级过程中检测到了拔插 前去发送升级文件', uploadType);\r\n          if (uploadType === 'base') {\r\n            console.log('底座升级', this.state.cloudVersion);\r\n            //如果版本号和本地版本号一致则使用本地存放的硬件文件，如果没有云端版本或者，云端文件地址则也使用本地的升级文件包\r\n            if (localHardBinVersion === this.state.cloudVersion || !this.state.cloudVersion || !this.state.filePath) {\r\n\r\n              console.log('使用本地文件进行升级');\r\n              ipcRenderer.send('updateBase', { state: 'reset', type: 'base' })\r\n            } else {\r\n              ipcRenderer.send('updateBase', { state: 'base', url: this.state.filePath, fileName: `mellabase${this.state.cloudVersion}` })\r\n            }\r\n\r\n\r\n          } else if (uploadType === 'reset') {\r\n            console.log('底座出厂设置');\r\n            ipcRenderer.send('updateBase', { state: 'reset', type: 'reset' })\r\n          }\r\n        } else if (progress === 100) {\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.success('The update is successful. Please re plug the base');\r\n          ipcRenderer.send('reUpload', {})\r\n        } else {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n\r\n\r\n      }\r\n    } else {\r\n      if (this.state.isHaveBase) {\r\n        this.setState({\r\n          isHaveBase: false,\r\n\r\n        })\r\n      }\r\n      if (isUpload) {\r\n        if (progress > 0 && progress < 100) {\r\n          this.setState({\r\n            isUpload: false,\r\n            updateModal: false,\r\n            progress: 0,\r\n            localVersion: '',\r\n            cloudVersion: '',\r\n          })\r\n          message.destroy()\r\n          message.error('Upgrade failed, Please reinsert the base')\r\n          ipcRenderer.send('reUpload', {})\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n  }\r\n  _uploadBaseInfo = (e, data) => {\r\n    console.log('升级过程中的信息：', data);\r\n    switch (data.status) {\r\n      case 'error':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n      case 'error1':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n          progress: 0,\r\n          localVersion: '',\r\n          cloudVersion: '',\r\n        })\r\n        message.destroy()\r\n        message.error('Upgrade failed, please try again')\r\n        ipcRenderer.send('reUpload', {})\r\n        break;\r\n\r\n\r\n      case 'normal':\r\n        this.setState({\r\n          uploadText: data.data,\r\n          progress: data.progress\r\n        })\r\n        this.timer && clearTimeout(this.timer)\r\n        if (data.progress < 10) {\r\n          this.timer && clearTimeout(this.timer)\r\n          this.timer = setTimeout(() => {\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Try again after unplugging the sled')\r\n            ipcRenderer.send('reUpload', {})\r\n\r\n          }, 1000);\r\n        }\r\n\r\n        if (data.progress === 100) {\r\n          console.log('进度到达100了');\r\n          this.failTimer && clearTimeout(this.failTimer)\r\n          this.failTimer = setTimeout(() => {\r\n\r\n            this.setState({\r\n              isUpload: false,\r\n              updateModal: false,\r\n              progress: 0,\r\n              localVersion: '',\r\n              cloudVersion: '',\r\n            })\r\n            message.destroy()\r\n            message.error('Upgrade failed, Please reinsert the base')\r\n            ipcRenderer.send('reUpload', {})\r\n          }, 5000);\r\n        }\r\n        break;\r\n\r\n      case 'success':\r\n        this.setState({\r\n          isUpload: false,\r\n          updateModal: false,\r\n        })\r\n        message.destroy()\r\n        message.success(data.data)\r\n        ipcRenderer.send('reUpload', {})\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n  }\r\n  _upload = (val) => {\r\n\r\n    let { isHaveBase } = this.state\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n      message.destroy()\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        isUpload: true,\r\n        updateModal: true,\r\n        progress: 0,\r\n        errorFlog: true\r\n      })\r\n      uploadType = val\r\n      //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\r\n      console.log('发送指令查看底座是否已经在升级状态');\r\n      ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n      const timer = setTimeout(() => {\r\n        if (this.state.errorFlog) {\r\n          this.setState({\r\n            uploadText: \"Please manually plug and unplug the base\"\r\n          })\r\n          ipcRenderer.send('startUpload', {})\r\n\r\n        }\r\n        clearTimeout(timer)\r\n      }, 3000);\r\n\r\n\r\n      //2.如果能收到关闭指令，则发送开始升级指令\r\n\r\n      //3.如果如果测试检测到usb插拔，则去发送文件\r\n\r\n\r\n\r\n    }\r\n  }\r\n  _upload1 = (val) => {\r\n    let { isHaveBase } = this.state\r\n    message.destroy()\r\n    if (!isHaveBase) {\r\n      this.setState({\r\n        isUpload: false,\r\n        updateModal: false,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n      })\r\n\r\n      message.error('No base device found, please plug it in and try again')\r\n    } else {\r\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\r\n      this.setState({\r\n        uploadText: 'Detect upgrade environment',\r\n        updateModal: true,\r\n        progress: 0,\r\n        localVersion: '',\r\n        cloudVersion: '',\r\n        errorFlog: true\r\n\r\n      }, () => {\r\n        this.localVersion()\r\n      })\r\n      uploadType = val\r\n    }\r\n  }\r\n  //询问本地的版本号\r\n  localVersion = () => {\r\n    this.setState({\r\n      uploadText: 'Query the local version number',\r\n    })\r\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] });\r\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    this.localVersionTimer = setTimeout(() => {\r\n      //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,直接去下载文件升级\r\n      this.cloudVersion()\r\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\r\n    }, 3000);\r\n  }\r\n  //询问网端最新的版本号\r\n  cloudVersion = () => {\r\n    getInfoOfLatestDevice('mellabase')\r\n      .then(res => {\r\n        console.log('获取到了网端的版本号', res);\r\n        if (res.flag) {\r\n          let { firmwareVersion, updateUrl } = res.data\r\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion)\r\n          console.log('比较信息:', firmwareVersion, this.state.localVersion, cloudBigtolocal);\r\n          if (cloudBigtolocal || !this.state.localVersion) {\r\n            this.setState({\r\n              cloudVersion: firmwareVersion,\r\n              filePath: updateUrl,\r\n              isUpload: true,\r\n              uploadText: 'Start getting upgrade files'\r\n\r\n            })\r\n            this.setState({\r\n              errorFlog: true\r\n            }, () => {\r\n              ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\r\n              console.log('发送指令查看底座是否已经在升级状态');\r\n            })\r\n\r\n\r\n\r\n            const timer = setTimeout(() => {\r\n              if (this.state.errorFlog) {\r\n\r\n                this.setState({\r\n                  uploadText: \"Please manually plug and unplug the base\"\r\n                })\r\n                ipcRenderer.send('startUpload', {})\r\n\r\n              }\r\n              clearTimeout(timer)\r\n            }, 3000);\r\n          } else {\r\n            this.setState({\r\n              updateModal: false\r\n            })\r\n            message.success(`The hardware version is v${firmwareVersion}, which is the latest version`)\r\n          }\r\n\r\n\r\n\r\n        } else {\r\n          console.log('没有获取到版本的文件');\r\n          message.error('Failed to get the latest version')\r\n          this.setState({\r\n            updateModal: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('获取版本失败,停止升级', err);\r\n        message.error('Failed to get the latest version')\r\n        this.setState({\r\n          updateModal: false\r\n        })\r\n\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id='advancedsettings'>\r\n        <div className=\"heard\">\r\n          <Heart />\r\n          <div className=\"title\">\r\n            <h2>Advanced Settings</h2>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Factory Reset<br /><br />\r\n\r\n                This will erase all data from your Mella<br /> device, including:<br />\r\n                - All installed updates<br />\r\n                - User preferences and Settings<br />\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              // onClick={this._reset}\r\n              onClick={() => this._upload('reset')}\r\n            >\r\n              <div className=\"btn\">Erase all data and reset device</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                Mella Base\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n\r\n              onClick={() => this._upload1('base')}\r\n            >\r\n              <div className=\"btn\">Update Mella Charging Base</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <div className=\"ltext\">\r\n              <p style={{ fontSize: px(18) }}>\r\n                MellaPro Thermometer\r\n              </p>\r\n            </div>\r\n            <div className=\"rbtn\"\r\n              onClick={() => {\r\n                // ipcRenderer.send('usbdata', { command: '01', arr: ['11'] })\r\n              }}\r\n            >\r\n              <div className=\"btn\">Connect Bluetooth and Update</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.updateModal}\r\n          element={\r\n            <div style={{ height: px(200), borderRadius: px(20) }} className=\"upload\">\r\n\r\n              {/* <p>{this.state.uploadText} </p> */}\r\n              <p style={{ color: '#000', padding: 0, margin: 0 }}>{this.state.uploadText}</p>\r\n            </div>\r\n          }\r\n        />\r\n        <Modal\r\n          open={this.state.isModalOpen}\r\n          // width={432}\r\n          className='tipModal'\r\n          centered\r\n          keyboard={false}\r\n          closable={false}\r\n          footer={null}\r\n        >\r\n          <div className='modalContentBox'>\r\n            <p className=\"title\">An update for the Mella Pro Charger is available</p>\r\n            <div className=\"modalBtnBox\">\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => this.setState({ isModalOpen: false })}\r\n                className=\"modalBtn\"\r\n              >\r\n                cancel\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size='middle'\r\n                onClick={() => {\r\n                  this._upload1('base');\r\n                  this.setState({ isModalOpen: false })\r\n                }}\r\n                className=\"modalBtn\"\r\n              >\r\n                Update Mella Charging Base\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\help\\index.jsx",
    [
        "715",
        "716",
        "717",
        "718",
        "719",
        "720"
    ],
    "import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Modal,\r\n  Form,\r\n  Input,\r\n  message,\r\n  Button,\r\n  Upload,\r\n} from \"antd\";\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport { px } from '../../utils/px';\r\nimport Heard from '../../utils/heard/Heard'\r\n\r\nimport using from '../../assets/images/using.png'\r\nimport measuring from '../../assets/images/measuring.png'\r\nimport unassigned from '../../assets/images/unassigned.png'\r\nimport adding from '../../assets/images/adding.png'\r\nimport email from '../../assets/images/email.png'\r\nimport phone from '../../assets/images/phone.png'\r\nimport complaint from '../../assets/images/complaint.png'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport _ from 'lodash';\r\n\r\nimport './index.less';\r\nimport { savefeedback } from '../../api';\r\n\r\nlet storage = window.localStorage;\r\nconst Help = () => {\r\n  const [form] = Form.useForm();\r\n  const { TextArea } = Input;\r\n  let list = [\r\n    {\r\n      img: using,\r\n      title: 'Using the app'\r\n    }, {\r\n      img: measuring,\r\n      title: 'Measuring with Mella'\r\n    }, {\r\n      img: unassigned,\r\n      title: 'Unassigned Readings'\r\n    },\r\n    {\r\n      img: adding,\r\n      title: 'Adding New Users'\r\n    },\r\n  ];\r\n  let num = 150 / list.length;\r\n  let mar = num + 'px';\r\n  let history = useHistory();\r\n  const [opinionsVisible, setOpinionsVisible] = useState(false);//弹窗显隐\r\n  const [loading, setLoading] = useState(false);\r\n  const [imageUrl, setImageUrl] = useState();\r\n  const [fileList, setFileList] = useState([]);//图片组\r\n\r\n  const changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big');\r\n  }\r\n  //关闭弹窗\r\n  const handleCancel = () => {\r\n    setOpinionsVisible(false);\r\n    setFileList([]);\r\n  };\r\n  //提交bug优化信息\r\n  const onFinish = (e) => {\r\n    setLoading(true);\r\n    let imageIds = []\r\n    _.map(fileList, (item) => {\r\n      imageIds.push(item.response.data.imageId)\r\n    })\r\n    let data = {\r\n      ...e,\r\n      imageIds: _.toString(imageIds),\r\n      userId: storage.userId\r\n    };\r\n    savefeedback(data)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.msg === 'success') {\r\n          setOpinionsVisible(false);\r\n          message.success('Submit Successfully~');\r\n        } else {\r\n          message.success('submit Failure!');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.success('submit Failure!');\r\n      })\r\n\r\n\r\n  };\r\n  //提交异常\r\n  const onFinishFailed = (e) => {\r\n    message.error('Please fill in the correct information!');\r\n  };\r\n  /**\r\n * 上传文件前校验\r\n */\r\n  const beforeNormFile = (e) => {\r\n    // 检查图片类型\r\n    const isJPG = e.type === 'image/jpeg';\r\n    const isPNG = e.type === 'image/png';\r\n    const isBMP = e.type === 'image/bmp';\r\n    const isGIF = e.type === 'image/gif';\r\n    const isWEBP = e.type === 'image/webp';\r\n    const isPic = isJPG || isPNG || isBMP || isGIF || isWEBP;\r\n    //文件大小校验\r\n    const isLt2M = e.size / 1024 / 1024 < 4;\r\n    if (!isPic) {\r\n      message.error(`${e.name} not a picture file`);\r\n    } else if (!isLt2M && isPic) {\r\n      message.error(`${e.name}Upload is not allowed if the limit exceeds 4M~`);\r\n    }\r\n    return isPic && isLt2M ? true : Upload.LIST_IGNORE;\r\n  };\r\n  /**\r\n   * Base64\r\n   */\r\n  const getBase64 = (img, callback) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener('load', () => callback(reader.result));\r\n    reader.readAsDataURL(img);\r\n  };\r\n  /**\r\n * 文件上传后处理\r\n */\r\n  const handleChange = async (info) => {\r\n    console.log('info: ', info);\r\n    if (info.file.status === 'done') {\r\n      setFileList(info.fileList);\r\n    }\r\n    if (info.file.status === 'removed') {\r\n      setFileList(info.fileList);\r\n    }\r\n\r\n    // getBase64(info.file.originFileObj, (imageUrl) => {\r\n    //   setLoading(false);\r\n    //   setImageUrl(imageUrl);\r\n    // });\r\n  };\r\n  //添加图片按钮\r\n  const uploadButton = (\r\n    <div>\r\n      <PlusOutlined />\r\n      <div\r\n        style={{\r\n          marginTop: 8,\r\n        }}\r\n      >\r\n        Upload\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', changeFenBianLv)\r\n    return (() => {\r\n      let ipcRenderer = window.electron.ipcRenderer\r\n      ipcRenderer.removeListener('changeFenBianLv', changeFenBianLv)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log('fileList', fileList);\r\n  }, [fileList])\r\n\r\n  return (\r\n    <>\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n            />\r\n          </div>\r\n          <div className=\"list\">\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}>\r\n                  <>\r\n                    <img src={data.img} alt=\"\" />\r\n                    <p>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"popularArticles\">\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"time\">\r\n            <p style={{ fontSize: px(24) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(24) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={complaint} alt=\"\" />\r\n            <div className=\"text\">Make a Suggestion</div>\r\n            <p\r\n              onClick={() => { setOpinionsVisible(true) }}\r\n            >\r\n              Submit Opinions\r\n            </p>\r\n          </div>\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" />\r\n            <div className=\"text\">Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              onClick={(e) => { }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" />\r\n            <div className=\"text\">Bark at Us!</div>\r\n            <div className=\"text\">201.977.6411</div>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          visible={opinionsVisible}\r\n          destroyOnClose={true}\r\n          centered\r\n          maskClosable={false}\r\n          width={700}\r\n          onCancel={handleCancel}\r\n          className=\"opinionsModal\"\r\n          footer={[]}\r\n        >\r\n          <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item\r\n              name=\"title\"\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input title!',\r\n                },\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Clear titles can be verified more quickly\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"description\"\r\n              label=\"Description\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input description!',\r\n\r\n                },\r\n                {\r\n                  min: 15,\r\n                  message: 'No less than 15 words'\r\n                }\r\n              ]}\r\n            >\r\n              <TextArea\r\n                showCount\r\n                maxLength={500}\r\n                autoSize={{\r\n                  minRows: 3,\r\n                  maxRows: 5,\r\n                }}\r\n                placeholder=\"Please describe your proposed use scenario and your optimization/improvement plan in detail (no less than 15 words)\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"imageIds\"\r\n              label={`${'Related pictures or screenshots' + '(' + fileList.length + '/' + 5 + ')'}`}\r\n            // valuePropName=\"fileList\"\r\n            >\r\n              <Upload\r\n                accept=\"image/*\"\r\n                name=\"img\"\r\n                action=\"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/image/uploadImage\"\r\n                beforeUpload={beforeNormFile}\r\n                onChange={handleChange}\r\n                withCredentials={true}\r\n                listType=\"picture-card\"\r\n              >\r\n                {fileList.length >= 5 ? null : uploadButton}\r\n              </Upload>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <div className='bugSubmitBox'>\r\n                <Button type=\"primary\" htmlType=\"submit\" size='large' loading={loading} block>\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default Help;\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx",
    [
        "721",
        "722",
        "723",
        "724",
        "725"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { } from \"../../store/actions\";\nimport {\n  Layout,\n  Button,\n  Form,\n  Input,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n  message,\n} from \"antd\";\n\nimport changePhoto from '../../assets/images/changePhoto.png';\n\nimport { px, mTop } from \"../../utils/px\";\nimport countryList from '../../utils/areaCode/country';\nimport Avatar from '../../components/avatar/Avatar'\nimport { getUserInfoByUserId, update } from '../../api'\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst MyAccount = ({ bodyHeight }) => {\n  let storage = window.localStorage;\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [imageId, setImageId] = useState();\n  const [petUrl, setPetUrl] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [country, setCountry] = useState('US');\n  const [countryArr, setCountryArr] = useState();\n  const [infoData, setInfoDate] = useState();\n\n  const onFinish = (values) => {\n    let array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n    for (let index = 0; index < _.size(values.domain); index++) {\n      array[_.toNumber(values.domain[index])] = '1';\n    }\n    let reg = new RegExp(',', \"g\");\n    let res = _.toString(array).replace(reg, '');\n    let data = {\n      ...values,\n      imageId: imageId,\n      domain: res,\n      userId: storage.userId\n    };\n    update(data)\n      .then((res) => {\n        if (res.msg === 'success') {\n          message.success('The user information is updated successfully');\n        } else {\n          message.error('Description Failed to update user information');\n        }\n      })\n  };\n\n  useEffect(() => {\n    let arr = countryList.map(item => item.locale)\n    arr.sort(function (a, b) {\n      return a.localeCompare(b)\n    })\n    setCountryArr(arr);\n  }, []);\n\n  useEffect(() => {\n    getUserInfoByUserId(storage.userId)\n      .then((res) => {\n        if (res.flag === true) {\n          let newData = {\n            ...res.data,\n            domain: _.toArray(res.data.domain)\n\n          }\n          let arr = [];\n          for (let index = 0; index < _.size(newData.domain); index++) {\n            if (newData.domain[index] === '1') {\n              arr.push(_.toString(index));\n            }\n          }\n          newData.domain = arr;\n          form.setFieldsValue(newData);\n          setInfoDate(newData);\n          setImgUrl(res.data?.userImage?.url);\n        }\n      })\n  }, [])\n\n  return (\n    <Layout className=\"myAccountBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{\n          height: '100%',\n          backgroundColor: '#FFFFFF',\n          borderBottom: '2px solid #979797',\n          display: 'flex'\n        }}>\n          <span className=\"headerTitle\">My Account</span>\n        </div>\n      </div>\n      <div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={onFinish}\n          className=\"accountForm\"\n        >\n          <Row>\n            <Col flex={1} className=\"leftColBox\">\n              <Form.Item valuePropName=\"fileList\" name=\"imageId\" className=\"imageFormItem\">\n                <div className=\"upImg\" style={{ display: 'grid', justifyItems: 'center', alignItems: 'center' }}>\n                  <Avatar\n                    init={\n                      <div className=\"ciral\">\n                        <img src={imgUrl ? imgUrl : changePhoto} alt=\"\" id=\"touxiang\" />\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Change Photo</p>\n                      </div>\n                    }\n                    getinfo={(val) => {\n                      if (val) {\n                        setImageId(val);\n                      }\n\n                    }}\n                    getAllInfo={(val) => {\n                      if (val.url) {\n                        setPetUrl(val.url);\n                      }\n                    }}\n                  />\n                </div>\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n            <Col flex={1} className=\"rightColBox\">\n              <Form.Item label=\"FirstName\" name=\"firstName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"LastName\" name=\"lastName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"Phone\" name=\"phone\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item className=\"addressFormItem\" label=\"Address\">\n            <div style={{ display: 'flex' }}>\n              <Form.Item name=\"address1\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address1\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"address2\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address2\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"city\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"city\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"state\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"state\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"zipcode\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"zipcode\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"country\">\n                <Select\n                  showSearch\n                  style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\n                  bordered={false}\n                  optionFilterProp=\"children\"\n                  defaultValue=\"US\"\n                  // onChange={onChange}\n                  onSelect={(val) => { setCountry(val) }}\n                  filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                // open\n                // dropdownClassName=\"addressSelectBox\"\n                >\n                  {_.map(countryArr, (item, index) => (\n                    <Option key={index} value={item}>{item}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </div>\n          </Form.Item>\n          <Form.Item className=\"expertiseFormItem\" label=\"Areas of Expertise\" name=\"domain\">\n            <Checkbox.Group>\n              <Row>\n                <Col span={6}>\n                  <Checkbox\n                    value='0'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Dogs\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='1'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cats\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='2'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Small Pets\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='3'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Nutrition\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='4'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Surgery\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='5'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Zoo\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='6'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Wildlife\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='7'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cardiology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='8'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Neurology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='9'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Anaesthesia\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='10'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Other\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className=\"btnFormItem\">\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\" size=\"large\" style={{ width: px(260) }}>Save Changes</Button>\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n\nMyAccount.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({}),\n)(MyAccount);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editPetInfo\\index.jsx",
    [
        "726",
        "727",
        "728",
        "729",
        "730",
        "731",
        "732",
        "733",
        "734",
        "735",
        "736",
        "737",
        "738",
        "739",
        "740",
        "741"
    ],
    "import React, { Component } from 'react'\r\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\r\nimport { createFromIconfontCN, ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\nimport dog from '../../assets/images/pinkdog.png'\r\nimport cat from '../../assets/images/pinkcat.png'\r\nimport redDog from '../../assets/images/reddog.png'\r\nimport redCat from '../../assets/images/redcat.png'\r\nimport redother from '../../assets/images/redother.png'\r\nimport other from '../../assets/images/other.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport Close from '../../assets/img/close.png'\r\nimport nextImg from '../../assets/img/nextImg.png'\r\nimport dui from '../../assets/images/dui.png'\r\nimport female from '../../assets/images/female.png'\r\nimport male from '../../assets/images/male.png'\r\n\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport electronStore from '../../utils/electronStore';\r\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\r\nimport Button from '../../utils/button/Button';\r\nimport Avatar from '../../components/avatar/Avatar';\r\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { petDetailInfoFun } from '../../store/actions';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  checkPatientId,\r\n  getPetInfoByPatientIdAndPetId,\r\n  updatePetInfo,\r\n  deletePetByPetId,\r\n  updatePetInfo1\r\n} from '../../api/mellaserver/pet';\r\nimport {\r\n  listDoctorsByAdmin\r\n} from '../../api/mellaserver/organization';\r\n\r\nimport './index.less';\r\nimport _ from 'lodash';\r\nimport MinClose from '../../utils/minClose/MinClose';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nclass EditPetInfo extends Component {\r\n  state = {\r\n    dogImg: dog,\r\n    catImg: cat,\r\n    otherImg: other,\r\n    selectWZ: '',\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    api: '',\r\n    id: '',\r\n    seleceID: '',//医生id\r\n    petSpecies: 0,\r\n    unit: 1,\r\n    gender: 0,\r\n    isMix: false,\r\n    imageId: -1,\r\n    imgurl: '',\r\n    breedArr: [],\r\n    petSpeciesBreedId: '',\r\n    dogData: [],\r\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\r\n    patientId: '',\r\n    petName: '',\r\n    petId: '',\r\n    lastName: '',\r\n    firstName: '',\r\n    breedName: '',\r\n    initpetName: '',\r\n    initpetId: '',\r\n    initlastName: '',\r\n    initfirstName: '',\r\n    initbreedName: '',\r\n    spin: false,\r\n    dogBreed: [],\r\n    catBreed: [],\r\n    oldPatientId: '',\r\n    searchBreed: '',\r\n    selectBreedJson: {},\r\n    confirmSelectBreedJson: {},\r\n    selectBreed: false,\r\n    doctorArr: [],\r\n    selectUser: false,\r\n    selectUserJson: {},\r\n    selectUserId: -1,\r\n    confirmSelectUserJson: {},\r\n    petUrl: '',\r\n    deletePetModalVisible: false,\r\n    rfid: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    let { petDetailInfo } = this.props\r\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\r\n    if (!isWalkIn) {\r\n      //判断是医生诊断宠物还是用户私有宠物\r\n      if (this.props.history.location?.pet) {\r\n        this.setState({\r\n          patientId: this.props.history.location?.pet?.patientId,\r\n          petId: this.props.history.location.pet?.petId,\r\n          oldPatientId: this.props.history.location?.pet?.patientId,\r\n          breedName: this.props.history.location?.pet?.breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      } else {\r\n        if (!patientId || patientId === 'unknown') {\r\n          patientId = null\r\n        }\r\n        this.setState({\r\n          patientId,\r\n          petId,\r\n          oldPatientId: patientId,\r\n          breedName: breedName\r\n        }, () => {\r\n          this._getPetInfo();\r\n        })\r\n      }\r\n    }\r\n    let dogBreed = electronStore.get('dogBreed') || []\r\n    let catBreed = electronStore.get('catBreed') || []\r\n    this.setState({\r\n      dogBreed,\r\n      catBreed\r\n    })\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //获取工作场所\r\n    // this.getUser()\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  //获取工作场所\r\n  getUser = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n            let json = {\r\n              insertedAt: createTime,\r\n              breedName: `${lastName} ${firstName}`,\r\n              petSpeciesBreedId: userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  //获取宠物详情信息\r\n  _getPetInfo = () => {\r\n    let { patientId, petId } = this.state\r\n    let datas = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.org = storage.lastOrganization\r\n    }\r\n    if (patientId && patientId !== 'undefined') {\r\n      datas.patientId = patientId\r\n    }\r\n    if (petId) {\r\n      datas.petId = petId\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    getPetInfoByPatientIdAndPetId(datas)\r\n      .then(res => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            if (res.data[i].petId === this.state.petId) {\r\n              datas = res.data[i]\r\n              break\r\n            }\r\n          }\r\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId, rfid } = datas\r\n          if (isMix !== true) {\r\n            isMix = false\r\n          }\r\n          lastName = isNull(lastName)\r\n          firstName = isNull(firstName)\r\n          let confirmSelectBreedJson = {}\r\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\r\n            confirmSelectBreedJson = {\r\n              name: breedName,\r\n              petSpeciesBreedId\r\n            }\r\n          }\r\n          // url = isNull(url)\r\n          if (birthday != null) {\r\n            birthday = moment(birthday).format('MMMM D, YYYY')\r\n          }\r\n          else {\r\n            birthday = ''\r\n          }\r\n          if (gender === null || isNaN(gender) || `${gender}` === 'null' || `${gender}` === 'NaN') {\r\n            gender = 0\r\n          }\r\n          if (weight) {\r\n            weight = (weight * 2.2046).toFixed(1)\r\n          } else {\r\n            weight = ''\r\n          }\r\n          this.setState({\r\n            petId,\r\n            petName,\r\n            lastName,\r\n            firstName,\r\n            breedName,\r\n            isMix,\r\n            birthday,\r\n            weight,\r\n            imgurl: url,\r\n            gender,\r\n            initpetName: petName,\r\n            initlastName: lastName,\r\n            initfirstName: firstName,\r\n            confirmSelectBreedJson,\r\n            petSpeciesBreedId,\r\n            rfid\r\n          })\r\n        } else {\r\n          message.destroy()\r\n          message.error('data load failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n        message.destroy()\r\n        message.error('data load failed')\r\n      })\r\n    const isNull = (value) => {\r\n      if (value === null || isNaN(value) || `${value}` === 'null' || `${value}` === 'NaN') {\r\n        return ''\r\n      } else {\r\n        return value\r\n      }\r\n    }\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n  //选择宠物默认品种\r\n  selectWZ = (val) => {\r\n    let { catBreed, dogBreed } = this.state\r\n    if (this.state.selectWZ !== val) {\r\n      switch (val) {\r\n        case 'dog':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: redDog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(dogBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultdog\",\r\n              petSpeciesBreedId: 12001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'cat':\r\n          this.setState({\r\n            catImg: redCat,\r\n            dogImg: dog,\r\n            otherImg: other,\r\n            selectWZ: val,\r\n            breedArr: [].concat(catBreed),\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultcat\",\r\n              petSpeciesBreedId: 11001\r\n            }\r\n          })\r\n\r\n          break;\r\n\r\n        case 'other':\r\n          this.setState({\r\n            catImg: cat,\r\n            dogImg: dog,\r\n            otherImg: redother,\r\n            selectWZ: val,\r\n            breedArr: [],\r\n            confirmSelectBreedJson: {\r\n              name: \"defaultother\",\r\n              petSpeciesBreedId: 13001\r\n            }\r\n          })\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  //宠物详情第一列\r\n  _petSpecies = () => {\r\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\r\n    this.avatar = imgurl ? imgurl : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\"\r\n        style={{ marginTop: mTop(30) }}\r\n      >\r\n        <div className=\"l\">\r\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\r\n          <div className=\"selectSpecies\">\r\n            <ul>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog'\r\n\r\n                    onClick={() => { this.selectWZ('dog') }}>\r\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Dog\r\n                </div>\r\n              </li>\r\n              <li>\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Cat\r\n                </div>\r\n              </li>\r\n              <li >\r\n                <div className='speciesChild' >\r\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                  </div>\r\n                  Other\r\n                </div>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={imgurl ? imgurl : selectphoto} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                if (val.url) {\r\n                  this.setState({\r\n                    petUrl: val.url\r\n                  })\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //宠物详情第二列\r\n  _petName = () => {\r\n    let birthday = this.state.birthday\r\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Name</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.initpetName}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\r\n                  initpetName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"r\">\r\n          <p >Pet Birthday</p>\r\n          <div className=\"infoInput\" >\r\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\r\n              document.getElementById('calendar').style.display = 'block'\r\n            }}>{this.state.birthday}</p>\r\n            <div className=\"calendar\" id=\"calendar\">\r\n              <Calendar\r\n                fullscreen={false}\r\n                headerRender={({ value, type, onChange, onTypeChange }) => {\r\n                  const start = 0;\r\n                  const end = 12;\r\n                  const monthOptions = [];\r\n\r\n                  const current = value.clone();\r\n                  const localeData = value.localeData();\r\n                  const months = [];\r\n                  for (let i = 0; i < 12; i++) {\r\n                    current.month(i);\r\n                    months.push(localeData.monthsShort(current));\r\n                  }\r\n\r\n                  for (let index = start; index < end; index++) {\r\n                    monthOptions.push(\r\n                      <Select.Option className=\"month-item\" key={`${index}`}>\r\n                        {months[index]}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  const month = value.month();\r\n\r\n                  const year = value.year();\r\n                  const options = [];\r\n                  for (let i = year - 10; i < year + 10; i += 1) {\r\n                    options.push(\r\n                      <Select.Option key={i} value={i} className=\"year-item\">\r\n                        {i}\r\n                      </Select.Option>\r\n                    );\r\n                  }\r\n                  return (\r\n                    <div style={{ padding: 8 }}>\r\n                      <Row gutter={8}>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            className=\"my-year-select\"\r\n                            onChange={(newYear) => {\r\n                              const now = value.clone().year(newYear);\r\n                              onChange(now);\r\n                            }}\r\n                            value={String(year)}\r\n                          >\r\n                            {options}\r\n                          </Select>\r\n                        </Col>\r\n                        <Col>\r\n                          <Select\r\n                            size=\"small\"\r\n                            dropdownMatchSelectWidth={false}\r\n                            value={String(month)}\r\n                            onChange={(selectedMonth) => {\r\n                              const newValue = value.clone();\r\n                              newValue.month(parseInt(selectedMonth, 10));\r\n                              onChange(newValue);\r\n                            }}\r\n                          >\r\n                            {monthOptions}\r\n                          </Select>\r\n                        </Col>\r\n                        {/* <Col>\r\n                          <div className=\"btn\" onClick={() => {\r\n                            document.getElementById('calendar').style.display = 'none'\r\n                          }}>\r\n                            Choose this date\r\n                          </div>\r\n\r\n                        </Col> */}\r\n                      </Row>\r\n                    </div>\r\n                  );\r\n                }}\r\n                value={birthdayValue}\r\n                onSelect={(value) => {\r\n                  console.log(value);\r\n                  this.setState({\r\n                    birthday: moment(value).format('MMMM D, YYYY')\r\n                  })\r\n                  document.getElementById('calendar').style.display = 'none'\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //宠物详情第三列\r\n  _ownName = () => {\r\n    let { confirmSelectUserJson } = this.state\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\r\n      >\r\n        <div className=\"l\">\r\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.patientId}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\r\n                  intFlog: true\r\n                })\r\n                if (item.target.value !== errPatientId) {\r\n                  message.destroy()\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.patientId === this.state.oldPatientId) {\r\n                  return\r\n                }\r\n                if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n                  message.error('The pet ID cannot be empty');\r\n                  return\r\n                }\r\n                let params = {\r\n                  patientId: this.state.patientId ? this.state.patientId : null,\r\n                  doctorId: storage.userId\r\n                }\r\n                if (storage.lastWorkplaceId) {\r\n                  params.workplaceId = storage.lastWorkplaceId\r\n                }\r\n                if (storage.lastOrganization) {\r\n                  params.organizationId = storage.lastOrganization\r\n                }\r\n                checkPatientId(params)\r\n                  .then(res => {\r\n                    if (res.flag === false) {\r\n                      errPatientId = params.patientId\r\n                      message.error('This patient ID is already occupied, please change to a new one');\r\n                    } else {\r\n                      errPatientId = '';\r\n                      if (!this.props.history.location?.pet && this.state.patientId !== null) {\r\n                        message.success('This pet ID will work');\r\n                      }\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                  })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\r\n            onClick={() => {\r\n              this.setState({\r\n                // selectUser: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  //选择宠物详细品种\r\n  _select = (value, data) => {\r\n    console.log(value, data);  //value的值为id\r\n    this.setState({\r\n      petSpeciesBreedId: value,\r\n      breedName: data.children\r\n    })\r\n  }\r\n  //品种判断\r\n  _primaryBreed = () => {\r\n    let { breedName, confirmSelectBreedJson } = this.state;\r\n\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\r\n        <div className=\"l\">\r\n          <div className=\"infoInput flex\"\r\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\r\n            onClick={() => {\r\n              this.setState({\r\n                selectBreed: true\r\n              })\r\n            }}\r\n          >\r\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>\r\n              {\r\n                confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'\r\n              }\r\n            </div>\r\n            <div className=\"nextimg\" >\r\n              <img src={nextImg} style={{ height: px(15) }} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"r\" >\r\n          <div className=\"max\">\r\n            Mix?\r\n            <div className=\"selected\"\r\n              onClick={() => this.setState({\r\n                isMix: !this.state.isMix\r\n              })}\r\n            >\r\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\r\n            </div>\r\n          </div>\r\n        </div> */}\r\n        <div className=\"l\">\r\n          <p >RFID</p>\r\n          <div className=\"infoInput\">\r\n            <Input\r\n              bordered={false}\r\n              value={this.state.rfid}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  rfid: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //体重\r\n  _weight = () => {\r\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\r\n    switch (this.state.unit) {\r\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\r\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\r\n    }\r\n    switch (this.state.gender) {\r\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\r\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\r\n    }\r\n    return (\r\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\r\n        <div className=\"l\">\r\n          <p >Pet Weight</p>\r\n          <div className=\"infoInput\">\r\n            <Input bordered={false}\r\n              value={this.state.weight}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  weight: item.target.value\r\n                })\r\n              }}\r\n            />\r\n            <div className=\"ibKg\">\r\n              <div className=\"ibs\"\r\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\r\n                onClick={() => {\r\n                  if (this.state.unit === 2) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight * 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                }}\r\n              >Ibs</div>\r\n              <div className=\"kgs\"\r\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\r\n                onClick={() => {\r\n\r\n                  if (this.state.unit === 1) {\r\n\r\n                    this.setState({\r\n                      unit: 1,\r\n                      weight: (this.state.weight / 2.2046).toFixed(1)\r\n                    })\r\n                  }\r\n                  this.setState({ unit: 2 })\r\n                }}\r\n              >kgs</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"r\">\r\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\r\n          <div className=\"gender\">\r\n            <div className=\"selectGender\">\r\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\r\n                <div className=\"femaleCiral\"\r\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 1 })}\r\n                >\r\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\r\n                </div>\r\n                Female\r\n              </div>\r\n              <div className=\"male\" style={{ fontSize: px(18) }}>\r\n                <div className=\"maleCiral\"\r\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\r\n                  onClick={() => this.setState({ gender: 0 })}\r\n                >\r\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\r\n                </div>\r\n                Male\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  //确认删除弹窗\r\n  confirm = () => {\r\n    Modal.confirm({\r\n      title: 'Delete',\r\n      icon: <ExclamationCircleOutlined />,\r\n      content: 'Deleting this pet also deletes all health records associated with this pet. Are you sure?',\r\n      centered: 'true',\r\n      onOk: this.deletPet\r\n    });\r\n  };\r\n  //删除宠物\r\n  deletPet = () => {\r\n    let data = {\r\n      petId: this.state.petId\r\n    }\r\n    deletePetByPetId(data)\r\n      .then(ref => {\r\n        if (ref.flag === true) {\r\n          message.success('Successfully Delete');\r\n          this.props.petDetailInfoFun({});\r\n          this.props.history.goBack();\r\n        } else {\r\n          message.error('Fail to Delete!');\r\n        }\r\n      })\r\n  }\r\n  //更新宠物信息\r\n  save = () => {\r\n    let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson, rfid } = this.state\r\n    if (unit === 1) {\r\n      weight = (0.45359 * weight).toFixed(2)\r\n    }\r\n    let data = {}\r\n\r\n    if (this.state.patientId === this.state.oldPatientId) {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n      }\r\n    } else {\r\n      data = {\r\n        petName,\r\n        weight: parseFloat(weight),\r\n        gender,\r\n        firstName,\r\n        lastName,\r\n        patientId: this.state.patientId,\r\n      }\r\n    }\r\n    if (birthday) {\r\n      data.birthday = moment(birthday).format('YYYY-MM-DD')\r\n    }\r\n    if (rfid) {\r\n      data.rfid = rfid\r\n    }\r\n    if (imageId !== -1) {\r\n      data.imageId = imageId\r\n    }\r\n    if (confirmSelectBreedJson.name) {\r\n      data.breedName = confirmSelectBreedJson.name\r\n    }\r\n    if (confirmSelectUserJson.petSpeciesBreedId) {\r\n      data.userId = confirmSelectUserJson.petSpeciesBreedId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      data.organizationId = storage.lastOrganization\r\n    }\r\n    if (this.state.patientId === '' && !this.props.history.location?.pet) {\r\n      message.error('The pet ID cannot be empty');\r\n    } else {\r\n      this.setState({\r\n        spin: true\r\n      })\r\n      //判断是用户更新宠物还是医生更新宠物\r\n      if (this.props.history.location?.pet) {\r\n        updatePetInfo1(this.props.history.location.userId, petId, data)\r\n          .then((res) => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              message.success('update successfully');\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            message.error(err)\r\n          })\r\n      } else {\r\n        updatePetInfo(petId, data)\r\n          .then(res => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              try {\r\n                if (storage.identity === '3') {\r\n                  let data = JSON.parse(storage.doctorExam)\r\n                  data.petName = petName\r\n                  data.weight = weight\r\n                  data.gender = gender\r\n                  data.patientId = this.state.patientId\r\n                  if (birthday) {\r\n                    data.age = moment(new Date()).diff(moment(birthday), 'years')\r\n                  }\r\n                  if (confirmSelectBreedJson.name) {\r\n                    data.breed = confirmSelectBreedJson.name\r\n                  }\r\n                  if (this.state.petUrl) {\r\n                    data.url = this.state.petUrl\r\n                  }\r\n\r\n                  storage.doctorExam = JSON.stringify(data)\r\n                }\r\n              } catch (error) {\r\n\r\n              }\r\n              this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId, weight: weight })\r\n              this.props.history.goBack()\r\n            } else {\r\n              message.error('This patient ID is already occupied, please change to a new one')\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n          })\r\n      }\r\n    }\r\n\r\n  }\r\n  render() {\r\n    const { closeColor, closebgc, minbgc } = this.state\r\n    return (\r\n      <div id=\"editPetInfo\">\r\n        {/* 头部 */}\r\n        <div className=\"close1\">\r\n          {/* 菜单 */}\r\n          <div className=\"menu\">\r\n            {this.props.systemType === 'mac' &&\r\n              <div style={{ marginRight: '8px' }}>\r\n                <MinClose />\r\n              </div>\r\n            }\r\n            <MyIcon\r\n              type='icon-fanhui4'\r\n              className=\"icon\"\r\n              onClick={() => {\r\n                if (!_.isEmpty(this.props.history.location.userId)) {\r\n                  this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\r\n                } else {\r\n                  this.props.history.goBack()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"text\">mella</div>\r\n          {this.props.systemType !== 'mac' ?\r\n            <div className='maxmin'>\r\n              <div\r\n                className=\"min iconfont icon-64\"\r\n                onClick={this._min}\r\n                onMouseEnter={this._minMove}\r\n                onMouseLeave={this._minLeave}\r\n                style={{ backgroundColor: minbgc }}\r\n              ></div>\r\n\r\n              <div\r\n                className=\"max iconfont icon-guanbi2\"\r\n                onClick={this._close}\r\n                onMouseEnter={this._closeMove}\r\n                onMouseLeave={this._closeLeave}\r\n                style={{ backgroundColor: closebgc, color: closeColor }}\r\n              ></div>\r\n            </div> :\r\n            <div style={{ width: '60px' }}></div>\r\n          }\r\n\r\n        </div>\r\n        <div className=\"editPetInfo_top\">\r\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\r\n          {this._petSpecies()}\r\n          {this._petName()}\r\n          {this._ownName()}\r\n          {this._primaryBreed()}\r\n          {this._weight()}\r\n        </div>\r\n        <div className=\"editPetInfo_foot\">\r\n          <div className='deletePet'\r\n            onClick={this.confirm}\r\n          >\r\n            Delete Pet\r\n          </div>\r\n          <div className=\"save\"\r\n            onClick={this.save}\r\n          >Save Changes</div>\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n        {\r\n          this.state.selectBreed && (\r\n            <SelectPetBreed\r\n              visible={this.state.selectBreed}\r\n              destroyOnClose\r\n              width={400}\r\n              value={this.state.petSpeciesBreedId}\r\n              onSelect={(value) => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                  selectBreedJson: value,\r\n                  petSpeciesBreedId: value.petSpeciesBreedId,\r\n                  confirmSelectBreedJson: value,\r\n                })\r\n              }}\r\n              onCancel={() => {\r\n                this.setState({\r\n                  selectBreed: false,\r\n                })\r\n              }}\r\n            />\r\n          )\r\n        }\r\n        {\r\n          this.state.selectUser && (\r\n            <MyModal\r\n              visible={this.state.selectUser}\r\n              element={\r\n                <div className='myfindOrg' >\r\n                  <div className=\"orgHeard\">\r\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                      <div>\r\n                      </div>\r\n                      <div\r\n                        onClick={() => {\r\n                          this.setState({\r\n                            selectUser: false,\r\n                            selectUserJson: {}\r\n                          })\r\n                        }}\r\n                      >\r\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text\" >Choose Parents</div>\r\n                    <div className=\"searchBox\">\r\n                      <Input\r\n                        placeholder=\" &#xe61b; Search name\"\r\n                        bordered={false}\r\n                        allowClear={true}\r\n                        value={this.state.searchBreed}\r\n                        onChange={(item) => {\r\n\r\n                          this.setState({\r\n                            searchBreed: item.target.value\r\n                          })\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"list\" >\r\n                    <PhoneBook\r\n                      listDate={this.state.doctorArr}\r\n                      confirmSelectBreed={this.state.selectUserId}\r\n                      selectFun={(val) => {\r\n                        this.setState({\r\n                          selectUserJson: val,\r\n                          selectUserId: val.petSpeciesBreedId\r\n                        })\r\n                      }}\r\n                      searchText={this.state.searchBreed}\r\n                    />\r\n                  </div>\r\n                  <div className=\"foot\">\r\n                    <Button\r\n                      text={'Select'}\r\n                      onClick={() => {\r\n                        this.setState({\r\n                          confirmSelectUserJson: this.state.selectUserJson,\r\n                          selectUser: false\r\n                        })\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n    systemType: state.systemReduce.systemType\r\n  }),\r\n  { petDetailInfoFun }\r\n)(EditPetInfo)\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx",
    [
        "742",
        "743",
        "744",
        "745",
        "746",
        "747",
        "748",
        "749",
        "750"
    ],
    "import React, { Component } from 'react'\nimport { Menu, message, Select, Button, Spin, Avatar } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport reddog from '../../assets/images/reddog.png'\nimport redcat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport selectphoto from '../../assets/images/sel.png'\n\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport AvatarUpload from '../../components/avatar/Avatar';\nimport { petPicture } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\nimport { getUserInfoByUserId, updateUserInfo, selectPetInfoByUserId } from '../../api/mellaserver/user';\n\nimport { getPersonPetByUserId } from '../../api/mellaserver/petall';\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nclass EditParent extends Component {\n  state = {\n    lastName: '',       //宠物主人性\n    firstName: '',      //宠物主人名\n    email: '',          //邮箱号\n    phone: '',          //电话号码\n    spin: false,        //加载中\n    imageId: null,      //图片的ID值\n    petList: [],         //当前这个宠物主人下的所有宠物\n    userId: '',          //当前这个宠物主人的userId\n    userImageUrl: '',\n    loading: false,//加载\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (this.props.history.location.userId) { //接受入参\n      let userId = this.props.history.location.userId\n      this.getPersonPet(userId);\n      this._getParent(userId);\n      this.setState({\n        userId,\n      })\n    }\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    this.setState({\n    })\n  }\n  //获取用户详情信息\n  _getParent = (data) => {\n    this.setState({\n      spin: true\n    })\n    getUserInfoByUserId(data)\n      .then(res => {\n        if (res.msg === 'success') {\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\n          firstName = firstName ? firstName : ''\n          phone = phone ? phone : ''\n          email = email ? email : ''\n          lastName = lastName ? lastName : ''\n          this.setState({\n            userImageUrl,\n            firstName,\n            lastName,\n            phone,\n            email,\n            imageId,\n            spin: false\n          })\n        } else {\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  //获取用户当前组织下的所有宠物\n  getPersonPet = (userId) => {\n    this.setState({ loading: true });\n    let newData = {\n      orgId: storage.lastOrganization,\n      userId: userId,\n    }\n    getPersonPetByUserId(newData)\n      .then((res) => {\n        this.setState({ loading: false });\n        if (res.msg === 'success') {\n          this.setState({ petList: res.data })\n        } else {\n          message.error('Failed to obtain pet information');\n        }\n      })\n      .catch((err) => {\n        message.error('Failed to obtain pet information');\n      })\n  }\n  _petSpecies = () => {\n    let { userImageUrl } = this.state\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\n    let { firstName, lastName } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>First Name</p>\n            <input\n              type=\"text\"\n              value={firstName}\n              onChange={(item) => {\n                this.setState({\n                  firstName: item.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Last Name</p>\n            <input\n              type=\"text\"\n              value={lastName}\n              onChange={(item) => {\n                this.setState({\n                  lastName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <AvatarUpload\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _petName = () => {\n    let { email, phone } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物列表\n  petList = () => {\n    let { petList } = this.state\n    let options = petList.map((item, index) => {\n      let { url, breedName, birthday, gender, petName, imageId, petSpeciesBreedId } = item\n      let images = `url(${url}?download=0&width=150)`\n      let petAge = moment(new Date()).diff(moment(birthday), 'years')\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div className=\"itemL\">\n              <Avatar src={this.shoePetPicture(petSpeciesBreedId, url)} size={50} />\n              <p\n                onClick={(e) => {\n                  let location = {\n                    pet: { ...item },\n                    userId: this.props.history.location.userId\n                  }\n                  this.props.history.push({ pathname: '/page9', ...location });\n                }}\n              >\n                {petName}\n              </p>\n            </div>\n            <div className=\"itemC\">\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\n            </div>\n            <div className=\"itemR\">\n              <p>{`${breedName}`}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\n    if (petList.length > 3) {\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\n    }\n    return (\n      <ul style={liStyle}>\n        {options}\n      </ul>\n    )\n  }\n  //保存\n  save = () => {\n    message.destroy()\n    let { firstName, lastName, email, phone, imageId, userId } = this.state\n    console.log({ firstName, lastName, email, phone, imageId });\n    let parames = {\n      userId,\n      email,\n      phone,\n      firstName,\n      lastName,\n      imageId\n    }\n    this.setState({\n      spin: true\n    })\n    message.destroy()\n    updateUserInfo(parames)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          this.props.history.goBack()\n        } else {\n          message.error('fail to edit')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        message.error('fail to edit')\n        console.log(err);\n      })\n  }\n  //选择宠物头像\n  shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  render() {\n    return (\n      <div id=\"editParent\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"editPetInfo_top\" >\n          <div className=\"parentInfo\">\n            <div className=\"title\" >{`Parent Information`}</div>\n            <div className=\"info\">\n              {this._petSpecies()}\n              {this._petName()}\n            </div>\n          </div>\n          <div className=\"pets\">\n            <div className=\"petsTitle\">\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\n              {/* <Button type=\"primary\" shape=\"round\">+ Add New Pet</Button> */}\n            </div>\n            <div className=\"petList\">\n              {this.petList()}\n            </div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              message.destroy()\n              this.props.history.push('/menuOptions/petAndParents');\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              this.save();\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n      </div>\n    )\n  }\n};\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(EditParent);\n\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx",
    [
        "751",
        "752"
    ],
    "import React, { Component } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport { mTop, px, MTop, } from '../../utils/px';\nimport electronStore from '../../utils/electronStore';\n\nimport back_white from '../../assets/img/back-white.png';\nimport back_hui from '../../assets/img/back-hui.png';\nimport redclose from '../../assets/img/redclose.png';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet num07 = 0       //接收到07命令行的次数\n\n\nexport default class AddDevice extends Component {\n\n  state = {\n    noUSB: false,\n    devicesList: [],\n    selectDevice: null,\n    // selectDevice: true,\n    reName: '',\n    saveDeviceMac: []  //这是已经保存过的设备的macid\n\n  }\n\n  componentDidMount() {\n    message.destroy()\n\n    ipcRenderer.send('small')\n    // 监听分辨率是否改变\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('noUSB', this._noUSB)\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\n    if (devicesList) {\n      let saveDeviceMac = []\n      for (let i = 0; i < devicesList.length; i++) {\n        const element = devicesList[i];\n        saveDeviceMac.push(element.macId)\n      }\n      this.setState({\n        saveDeviceMac\n      })\n    }\n\n\n\n    // const timer = setTimeout(() => {\n    //   let deviceList = [\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\n    //   ]\n    //   this.setState({\n    //     devicesList: deviceList\n    //   })\n    //   clearTimeout(timer)\n    // }, 500);\n\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n\n        this.setState({\n          noUSB: true\n        })\n      }\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    // console.log(data);\n    this.command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    const instruction = [255]\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    // console.log(dataArr1);\n    const commandArr = {\n      255: () => {//蓝牙软尺广播的数据\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n              }\n              bluName = str\n              break;\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n            case 3: console.log('----尺子的,不知道什么用'); break;\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let macId = ''\n        if (bluData.length > 7) {\n          macId = this.getMac(bluName, bluData)\n        }\n\n\n        let sameFlog = this.state.devicesList.some((device, index) => {\n          return device.macId === macId\n        })\n        if (sameFlog || !macId) {   //重复直接退出\n          return\n        }\n        let deviceType = ''\n        switch (bluName) {\n          case 'Biggie':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n          case 'C19':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n\n          case 'MaeBowl':   //这是称量碗\n            deviceType = 'maeBowl'\n            break;\n\n          case 'Mella Measure': //这是蓝牙尺\n            deviceType = 'tape'\n            break;\n\n        }\n        if (macId && deviceType && bluName) {\n          let json = {\n            name: bluName,\n            deviceType,\n            macId\n          }\n          let deviceArr = [].concat(this.state.devicesList)\n          deviceArr.push(json)\n          this.setState({\n            devicesList: deviceArr\n          })\n        }\n\n\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  getMac = (bluName, bluData) => {\n    switch (bluName) {\n      case 'Biggie':\n      case 'MaeBowl':\n      case 'Mella Measure':\n      case 'C19':\n        let str = bluData[1]\n        for (let i = 2; i < 7; i++) {\n          str += `:${bluData[i]}`\n        }\n        return str\n\n\n      default:\n        break;\n    }\n\n  }\n\n\n\n  changeFenBianLv = (e) => {\n    ipcRenderer.send('small')\n    this.setState({\n    })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  body = () => {\n    let { noUSB, devicesList, selectDevice, reName } = this.state\n    if (selectDevice) {\n      return <div className=\"addDevice flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\n            this Mella device?</div>\n\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                this.setState({\n                  reName: value.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write the name\n            on the sticker provided so it is easy\n            to select your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              console.log('---', deviceList);\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              let { saveDeviceMac } = this.state\n              saveDeviceMac.push(selectDevice.macId)\n              this.setState({\n                saveDeviceMac,\n                selectDevice: null,\n                reName: ''\n              })\n\n            }}\n          >\n            <p className='btnText'>Add Another</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              this.props.history.goBack()\n\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                {'searching...'}\n              </p>\n            </div>\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n            let { saveDeviceMac } = this.state\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  this.setState({\n                    selectDevice: item\n                  })\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div id=\"addDevice\">\n        <div className=\"heaed\">\n          <div className=\"l\"\n          >\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                let { selectDevice } = this.state\n                if (selectDevice) {\n                  this.setState({\n                    selectDevice: null\n                  })\n                } else {\n                  this.props.history.goBack()\n                }\n\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n        <div className=\"body flex\">\n          {this.body()}\n        </div>\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx",
    [
        "753",
        "754",
        "755"
    ],
    "import React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, inviteUserByEmail, mellaLogin } from '../../api';\n\nexport default class Team extends Component {\n\n  state = {\n\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = temporaryStorage.logupSuccessData\n    let { organizationId } = temporaryStorage.logupOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      this._logIn()\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          this._logIn()\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let sign = storage.saveSign\n    try {\n      sign = JSON.parse(sign)\n    } catch (error) {\n\n    }\n\n    let { email, hash } = sign\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId\n                  }\n\n                  break\n                }\n              }\n\n            }\n            console.log('----------key值为：', connectionKey);\n            storage.connectionKey = connectionKey\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n\n\n\n\n\n\n\n          this.props.history.push('/menuOptions/ConnectWorkplace')\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n          <div className=\"line\"></div>\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._logIn}\n            text={'Skip'}\n          >\n            Skip\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx",
    [
        "756",
        "757",
        "758",
        "759",
        "760",
        "761",
        "762",
        "763"
    ],
    "\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport close from '../../assets/img/close.png'\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport Avatar from '../../components/avatar/Avatar'\r\nimport moment from 'moment'\r\nimport './index.less';\r\nimport { listDoctorsByAdmin } from '../../api/mellaserver/organization'\r\nimport { admin_users } from '../../api/mellaserver/new'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    listDoctorsByAdmin(storage.lastOrganization, params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    admin_users(userId, params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",
    [
        "764",
        "765",
        "766",
        "767",
        "768",
        "769",
        "770"
    ],
    "import React, { Component } from 'react';\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\n\nimport { px } from '../../utils/px';\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\n\n\n\nimport './maxminreturn.less'\nimport MinClose from '../minClose/MinClose';\nimport { connect } from 'react-redux';\n\nclass MaxMin extends Component {\n    state = {\n        closebgc: '',\n        minbgc: '',\n        closeColor: '',\n    }\n    _close = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('关闭程序');\n        ipcRenderer.send('window-close')\n    }\n    _min = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('最小化程序');\n        ipcRenderer.send('window-min')\n        this.setState({\n            minbgc: '',\n        })\n    }\n    _minMove = () => {\n\n        this.setState({\n            minbgc: 'rgb(229,229,229)'\n        })\n    }\n    _minLeave = () => {\n        this.setState({\n            minbgc: ''\n        })\n    }\n    _closeMove = () => {\n        this.setState({\n            closeColor: 'red',\n            closebgc: '#fff'\n        })\n    }\n    _closeLeave = () => {\n        this.setState({\n            closeColor: ' rgb(245, 145, 145)',\n            closebgc: ''\n        })\n    }\n    _home = () => {\n        console.log(this.props);\n        // this.props.history.push('/')\n    }\n\n    beforeDiv = () => {\n      return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n    };\n    afterDiv = () => {\n      return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n    };\n\n\n    render() {\n        const { closeColor, closebgc, minbgc } = this.state\n        return (\n            <div className=\"maxminreturn\">\n                <div className=\"heard1\">\n                    {this.props.systemType === 'mac' && <MinClose />}\n                    {/* <div\n                        className=\" iconfont icon-left heard\"\n                        onClick={this.props.onClick1}\n                    /> */}\n                    <MouseDiv\n                        className=\"mouseDiv\"\n                        beforeDiv={this.beforeDiv}\n                        afterDiv={this.afterDiv}\n                        divClick={this.props.onClick1}\n                      />\n                </div>\n                {/* <div className='headIconBox'>\n                </div> */}\n                <div className=\"close123\">\n                    {/* <div className=\"home iconfont icon-zhuye3\"\n                        onClick={this.props.onClick}\n                    /> */}\n                    {this.props.systemType !== 'mac' &&\n                        <>\n                          <div\n                            className=\"heaed\"\n                            // style={{ paddingRight: px(20) }}\n                          >\n                            <div className=\"l\">\n\n                            </div>\n                            <div className=\"r\">\n                              <MinClose />\n                            </div>\n                          </div>\n                        </>\n                    }\n\n\n                </div>\n            </div>\n        )\n    }\n}\nexport default connect(\n    (state) => ({\n        systemType: state.systemReduce.systemType\n    })\n\n)(MaxMin)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\index.jsx",
    [
        "771",
        "772",
        "773",
        "774",
        "775",
        "776"
    ],
    "import React, { Component } from \"react\";\nimport { Select, Input, message, Modal, } from \"antd\";\nimport Heart from \"../../utils/heard/Heard\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\nimport Integration from \"./components/Integration\";\nimport { CloseCircleOutlined } from \"@ant-design/icons\";\n\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { SearchOutlined } from '@ant-design/icons';\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\nimport MyModal from '../../utils/myModal/MyModal';\nimport { listAll } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { addOrganization } from '../../api';\n\nimport Draggable from \"react-draggable\";\n\nimport Button from '../../utils/button/Button'\n\n\nconst { Option } = Select;\nlet storage = window.localStorage;\nconsole.log('storage: ', storage);\n\nexport default class ConnectWorkplace extends Component {\n  state = {\n    orgArr: [],\n    workplaceJson: {},\n    connectionKey: \"\",\n    selectOrgId: -1,\n    selectRoleId: \"\",\n    switchType: 'vetspire',//选择是哪种集成\n    roleId: '',//权限id\n\n    search: '',\n    listData: [],\n    selectId: {},\n    searchData: [],\n    selectworkplace: [],\n    workplaceList: [],  // 工作场所列表\n    isOrg: false,     // 选择组织弹窗\n    isWorkplace: false,   // 选择工作场所弹窗\n    visible: false,       //model框是否显示\n    disabled: true,       //model是否可拖拽\n    loadVisible: false,\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n  };\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    ipcRenderer.send(\"big\");\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          this.setState({\n            workplaceName,\n            workplaceId: storage.lastWorkplaceId,\n          });\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n          this.setState({\n            organizationName: name,\n            organizationId: storage.lastOrganization,\n            selectOrgId: storage.lastOrganization,\n          });\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n    listAll().then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    console.log('temporaryStorage.logupSelectOrganization', temporaryStorage.logupSelectOrganization);\n    this.setState({\n      orgArr,\n      workplaceJson,\n      connectionKey: storage.connectionKey,\n      selectRoleId: storage.roleId,\n      selectId: temporaryStorage.logupSelectOrganization\n    });\n    temporaryStorage.logupSelectOrganization = {}\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n  //选择集成\n  onSwitchIntegration = (type) => {\n    this.setState({\n      switchType: type\n    });\n  }\n  clickItem = () => {\n\n  }\n\n  getAllList = () => {\n    listAll().then((res) => {\n      console.log(res);\n      if (res.msg === 'success') {\n        this.setState({\n          listData: res.data\n        })\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    })\n  }\n\n  deleteWorkPlace = (item) => {\n    console.log('@',item);\n  }\n\n  // 选择组织列表\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n      className={ this.state.selectId.organizationId === item.organizationId ? 'highlight' : null }\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n        }}\n      >\n        <div className=\"item\">{item.name}</div>\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  // 工作场所列表\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n        })\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  // 搜索组织\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  // 搜索工作场所\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  // 创建组织\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push(\"/menuOptions/NewOrg\")\n  }\n\n  // 创建组织\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    // this.props.history.push('/uesr/logUp/NewOrganization')\n    this.props.history.push(\"/menuOptions/NewOrg\")\n  }\n\n  // 跳转工作场所\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n\n  // 添加组织\n  _addworkplaced = () => {\n    let { selectworkplace } = this.state || {};\n    console.log(selectworkplace);\n    console.log(temporaryStorage.logupSelectOrganization);\n    console.log(storage.userId);\n    let params = {\n      name: temporaryStorage.logupSelectOrganization.name,\n      workplaceName: selectworkplace.workplaceName,\n      workplaceTypeId: selectworkplace.workplaceTypeId,\n      address1: selectworkplace.address1,\n      address2: selectworkplace.address2,\n      // phone: `+${code}${phone}`,\n      country: selectworkplace.country,\n      city: selectworkplace.city,\n      state: selectworkplace.state,\n      zipcode: selectworkplace.zipcode,\n      email: selectworkplace.email\n    }\n    this.setState({\n      loadVisible: true\n    })\n    addOrganization(storage.userId, params)\n      .then(res => {\n        // console.log('添加组织返回的信息', res);\n        this.setState({\n          loadVisible: false\n        })\n        if (res.flag === true) {\n          if (res.code === 11030) {\n            this.setState({ visible: true })\n          }\n          if (res.code === 20000) {\n            console.log('添加成功，跳转');\n            // temporaryStorage.logupOrganization = res.data\n            // this.props.history.push('/uesr/logUp/InviteTeam')\n            this.setState({\n              isOrg: false,\n              isWorkplace: false,\n            }, this.getAllList())\n          }\n\n        }\n      })\n      .catch(err => {\n        console.log('添加组织接口失败', err);\n        this.setState({\n          loadVisible: false\n        })\n        message.error(err.message, 3)\n      })\n  }\n\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  render() {\n    let { orgArr, selectOrgId,  bounds, visible, disabled, isOrg, isWorkplace } = this.state;\n    let option = orgArr.map((item, index) => {\n      let bac =\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\n      // console.log('---', this.state.selectRoleId);\n      return (\n        <li\n          key={`${item.organizationId}`}\n          style={{ background: bac, color: col }}\n          onClick={() => {\n            console.log(item);\n            this.setState({\n              selectOrgId: item.organizationId,\n              connectionKey: item.connectionKey,\n              selectRoleId: item.roleId,\n            });\n          }}\n        >\n          <div className=\"org\" style={{ fontSize: px(16) }}>\n            {item.organizationName}\n            <span style={{ marginRight: px(20) }} onClick={(e) => {\n              e.stopPropagation();\n              e.nativeEvent.stopImmediatePropagation();\n              this.deleteWorkPlace(item)\n              }}><CloseCircleOutlined /></span>\n          </div>\n        </li>\n      );\n    });\n    return (\n      <div id=\"connectworkplace\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"top\">\n            <div className=\"title flex\">\n              <p style={{ fontSize: px(28), fontWeight: \"700\" }}>\n                Connected Workplaces\n              </p>\n              <div\n                className=\"addbtn flex\"\n                style={{ height: px(45) }}\n                onClick={() => {\n                  this.setState({\n                    isOrg: true\n                  })\n                  console.log('搜索组织');\n                  console.log(isOrg);\n                }}\n              >\n                <p>+ Add Workplace</p>\n              </div>\n            </div>\n            <div className=\"tablebox\">\n              <div className=\"table\" style={{ height: px(220) }}>\n                <ul>{option}</ul>\n              </div>\n            </div>\n          </div>\n          {`${this.state.selectRoleId}` !== '4' && <Integration />}\n          <div className=\"footer flex\">\n            <div\n              className=\"saveBtn flex\"\n              style={{ height: px(45) }}\n              onClick={() => {\n                let {\n                  selectOrgId,\n                  selectRoleId,\n                  connectionKey,\n                  workplaceJson,\n                } = this.state;\n                storage.roleId = selectRoleId;\n                storage.lastOrganization = selectOrgId;\n                try {\n                  let key = parseInt(selectOrgId);\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n                  storage.lastWorkplaceId = lastWorkplaceId;\n                } catch (error) { }\n                storage.connectionKey = connectionKey;\n                this.props.history.goBack();\n              }}\n            >\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\n            </div>\n          </div>\n        </div>\n\n        {/* // 组织 */}\n        <MyModal\n          visible={isOrg}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div></div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n                <div className=\"text\"\n                  onMouseOver={() => {\n                    if (disabled) {\n                      this.setState({\n                        disabled: false,\n                      });\n                    }\n                  }}\n                  onMouseOut={() => {\n                    this.setState({\n                      disabled: true,\n                    });\n                  }}\n\n                >Find my organization</div>\n                <div className=\"searchBox\">\n                  <Input\n                    placeholder=\"Type Organization Name\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._search}\n                  />\n                </div>\n              </div>\n              <div className=\"list\">\n                {this._list()}\n              </div>\n              <div className=\"foot\">\n                <Button\n                  text={'Join Organization'}\n                  onClick={this._goWorkplace}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n              </div>\n            </div>\n          }\n        />\n\n        {/* // 工作场所 */}\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\"Search workplace\"\n                    prefix={<SearchOutlined />}\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\">\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n\n\n        <Modal\n          title={\n            <div\n              style={{\n                width: '100%',\n                cursor: 'move',\n                height: '20px',\n                fontWeight: '700'\n              }}\n              onMouseOver={() => {\n                if (disabled) {\n                  this.setState({\n                    disabled: false,\n                  });\n                }\n              }}\n              onMouseOut={() => {\n                this.setState({\n                  disabled: true,\n                });\n              }}\n              onClick={() => {\n                this.setState({\n                  visible: false\n                })\n              }}\n            >\n              remind\n            </div>\n          }\n          open={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          modalRender={(modal) => (\n            <Draggable\n              disabled={disabled}\n              bounds={bounds}\n              onStart={(event, uiData) => this.onStart(event, uiData)}\n            >\n              <div ref={this.draggleRef}>{modal}</div>\n            </Draggable>\n          )}\n          footer={[\n            <button\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\n              onClick={() => {\n                this.setState({\n                  visible: false,\n                  organizationName: ''\n                })\n              }}\n            >Cancel</button>,\n            <button\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\n              onClick={() => {\n                this.setState({\n                  visible: false,\n                  isOrg: false,\n                  isWorkplace: false,\n                })\n                // this.props.history.replace('/uesr/logUp/JoinOrganizationByOption')\n              }}\n            >Join</button>\n\n          ]}\n          destroyOnClose={true}\n        >\n          <div id='vetPrifileModal'>\n            <p>This organization has already been registered, do you want to join?</p>\n          </div>\n        </Modal>\n\n        <MyModal\n          visible={this.state.loadVisible}\n        />\n      </div>\n    );\n  }\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\signUpVetProfile\\index.jsx",
    [
        "777",
        "778",
        "779",
        "780",
        "781",
        "782",
        "783",
        "784"
    ],
    "import React, { Component, } from 'react'\nimport {\n  Button,\n  Modal,\n  message\n} from 'antd';\nimport { CaretDownFilled } from '@ant-design/icons';\n\nimport imgArray from '../../utils/areaCode/imgArray'\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport countryList from '../../utils/areaCode/country';\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\nimport MinClose from '../../utils/minClose/MinClose';\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\n\n\n\n\nimport { checkUser, deskRegistAWSSNS, registByAWSSES } from '../../api';\n\nimport moment from 'moment';\n\nimport './index.less';\nimport { connect } from 'react-redux';\n\nconst options = [\n  { label: 'Dogs', value: 'Dogs' },\n  { label: 'Cats', value: 'Cats' },\n  { label: 'Small Pets', value: 'Small Pets' },\n  { label: 'Nutrition', value: 'Nutrition' },\n  { label: 'Surgery', value: 'Surgery' },\n  { label: 'Zoo', value: 'Zoo' },\n  { label: 'Wildlife', value: 'Wildlife' },\n  { label: 'Cardiology', value: 'Cardiology' },\n  { label: 'Neurology', value: 'Neurology' },\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\n  { label: 'Other', value: 'Other' },\n]\nclass VetPrifile extends Component {\n\n  state = {\n    code: 1,\n    imgArrayIndex: 0,\n    otherText: '',\n    name: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    birthday: moment(),\n    password: '',\n    password1: '',\n    checboxtValue: [],\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\n\n    visible: false,       //nodel框是否显示\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    loadVisible: false\n  }\n\n  componentDidMount() {\n    console.log('_________________config', process.env, process.env.REACT_APP_MELLASERVER_BASE_URL,);\n    //发送指令让main.js创建一个big窗口\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //检测是否本地是否有注册信息，有就展示出来。\n    console.log(temporaryStorage.logupVetInfo);\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\n      console.log('进来了');\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\n      this.setState({\n        name: firstName || '',\n        lastName,\n        email,\n        password: hash,\n        password1: hash,\n        code,\n        phone: initPhone || '',\n        imgArrayIndex\n      })\n\n\n    }\n\n\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\n    if (this.props.location && this.props.location.email) {\n      this.setState({\n        email: this.props.location.email\n      })\n    }\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n  _next = () => {\n    let { name, lastName, email, code, phone, password1, password, } = this.state\n    message.destroy()\n    console.log({ name, email, code, phone, password1, password, });\n    email = email.toLocaleLowerCase()\n    if (name.length <= 0) {\n      message.error('Please enter your first name', 3)\n      return\n    }\n    if (lastName.length <= 0) {\n      message.error('Please enter your last name', 3)\n      return\n    }\n    if (!email) {\n      message.error('Please enter the mailbox number', 3)\n      return\n    } else {\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\n        message.error('E-mail format is incorrect', 3)\n        return\n      }\n    }\n    if (password.length <= 0 || password1.length <= 0) {\n      message.error('Please enter the password', 3)\n      return\n    }\n\n    if (password !== password1) {\n      message.error('The password entered twice is incorrect, please re-enter', 3)\n      return\n    }\n    this.setState({\n      loadVisible: true\n    })\n\n\n    let params = {\n      firstName: name,\n      lastName,\n      email,\n      hash: password,\n    }\n    if (phone) {\n      params.phone = `+${code}${phone}`\n    }\n\n    registByAWSSES(params)\n      .then(res => {\n        this.setState({\n          loadVisible: false\n        })\n        // console.log('注册接口返回数据：', res);\n        switch (res.code) {\n          case 11011:\n            console.log('用户已存在，应该跳出弹框')\n            this.setState({\n              visible: true\n            })\n\n            break;\n\n          case 20000:\n          case 200:\n            console.log('可以注册，跳转到下一页');\n            temporaryStorage.logupEmailCode = res.data\n            params.code = code\n            params.initPhone = phone\n            params.imgArrayIndex = this.state.imgArrayIndex\n            temporaryStorage.logupVetInfo = params\n            this.props.history.push('/uesr/logUp/VerifyEmail')\n            break;\n\n          default:\n            break;\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadVisible: false\n        })\n        message.error(`Error:${err.message}`)\n        console.log('注册接口抛出错误：', err);\n      })\n\n  }\n  _signIn = (e) => {\n    e.preventDefault();\n    this.props.history.push('/page11')\n  }\n\n  beforeDiv = () => {\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  heard = () => {\n    if (this.props.systemType === 'mac') {\n      return (\n        <div className=\"macheard\"  >\n          <div className=\"macheardson\" >\n            <MinClose />\n            <img\n              onClick={() => {\n                this.props.history.push(\"/\");\n              }}\n              src={back_hui} className={'returnImg'} />\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n      )\n    }\n\n  }\n\n\n  render() {\n\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\n    return (\n      <div id=\"vetPrifile\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          {/* <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.push('/')}\n          /> */}\n          {this.heard()}\n        </div>\n        <div className=\"body\">\n          <div className=\"text\"\n            style={{ fontSize: px(30), marginBottom: px(120) }}\n          >\n            Let’s start by creating your account\n          </div>\n          <div className=\"form\" >\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={name}\n                  placeholder=\"First Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      name: data\n                    })\n                  }}\n                />\n\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={lastName}\n                  placeholder=\"Last Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      lastName: data\n                    })\n                  }}\n                />\n\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Email\"\n                  value={email}\n                  placeholder=\"Email Address*\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      email: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\n                  {countryList.map((item, index) => {\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\n                    return (\n                      <li key={index}>\n                        <div key={index}\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                          onClick={() => {\n                            console.log(item, index);\n                            this.setState({\n                              code: item.code,\n                              imgArrayIndex: index\n                            })\n                            document.getElementById('list').style.display = \"none\"\n                          }}\n                        >\n                          <img src={url} alt=\"\" />\n                          <p >{`${item.en}   +${item.code}`}</p>\n                        </div>\n                      </li>\n                    )\n                  })}\n                </ul>\n\n\n                <div className='phone'>\n                  <div\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\n                    onClick={() => {\n                      document.getElementById('list').style.display = \"block\"\n                    }}\n                  >\n                    <img style={{ zIndex: '888' }}\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\n                    />\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\n                  </div>\n\n\n                  <input\n                    type=\"Phone\"\n                    value={phone}\n                    placeholder=\"Phone Number\"\n                    onChange={(value) => {\n                      let data = value.target.value\n                      this.setState({\n                        phone: data.replace(/[^\\-?\\d]/g, '')\n                      })\n                    }}\n                  />\n                </div>\n\n              </div>\n\n            </div>\n\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password}\n                  placeholder=\"Create Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password1}\n                  placeholder=\"Confirm Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password1: data\n                    })\n                  }}\n                />\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n\n\n\n\n        <div className=\"foot\">\n          <div className=\"footText\"\n          >Already have an account? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\n\n          {/* 按钮 */}\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._next}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n\n        <MyModal\n\n          visible={this.state.loadVisible}\n        />\n\n        <Modal\n          open={visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">Email Already Exists</div>\n\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\n\n            <div className=\"btn\">\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false,\n                    email: ''\n                  })\n                }}\n              >Try Again</button>\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false\n                  })\n                  this.props.history.replace('/page11')\n                }}\n              >Sign Up</button>\n\n            </div>\n          </div>\n\n\n        </Modal>\n      </div>\n\n\n    )\n  }\n}\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(VetPrifile)\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\subscriptions\\index.jsx",
    [
        "785",
        "786",
        "787",
        "788",
        "789",
        "790",
        "791",
        "792",
        "793",
        "794",
        "795",
        "796",
        "797",
        "798",
        "799"
    ],
    "import { message, Tag, Space, Table  } from 'antd'\nimport moment from 'moment/moment'\nimport React, { Component } from 'react'\n\nimport Icon, { DownOutlined, UpOutlined } from '@ant-design/icons';\n\nimport { px } from '../../utils/px';\n\nimport { buy, getOrderInfo, getPreOrderById, payForOrder } from '../../api'\nimport BuySub from '../../components/buySub'\nimport MyModal from '../../utils/myModal/MyModal'\nimport { win } from '../../utils/px'\nimport defaultUserIcon from './../../assets/img/defaultUserIcon.png'\n\nimport down from '../../assets/img/xia.png'\nimport expand from '../../assets/img/expand.png'\n\nimport \"./index.less\"\n\nlet storage = window.localStorage;\n\nlet num = 0\n\n\nexport default class Subscriptions extends Component {\n    state = {\n        subscriptionData: [],   // 订阅列表的数据集合\n        userUrl: '',\n        userName: '',\n        endDate: '',\n        selectListIndex: 0,\n        buyModal: false,\n        loadings: [false, false, false]\n\n    }\n    componentDidMount() {\n        let ipcRenderer = window.electron.ipcRenderer\n        ipcRenderer.send('big', win())\n        this.getOrderInfo()\n    }\n    componentWillUnmount() {\n        this.timer && clearInterval(this.timer);\n    }\n    getOrderInfo = () => {\n        getOrderInfo(storage.userId)\n            .then(res => {\n                console.log('res', res);\n                let { msg, success, code } = res\n                if (code === 0 && msg === 'success') {\n                    let { firstName, imageUrl, isExpired, lastName, preOrderId, endTime } = success[0]\n                    let tempData = success\n                    let endDate = moment(endTime).format('MMMM D, YYYY')\n                    endDate = isExpired === 0 ? endDate : ''\n                    console.log('tempData', tempData);\n                    this.setState({\n                        subscriptionData: tempData,\n                        userName: `${lastName} ${firstName}`,\n                        userUrl: imageUrl,\n                        endDate\n                    })\n                }\n            })\n            .catch(err => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 21 ~ Subscriptions ~ err\", err)\n            })\n    }\n    buyFun = (item) => {\n\n        let loadings = [].concat(this.state.loadings)\n        let params = {\n            count: 1,\n            details: '测试'\n        }\n        switch (item.type) {\n            case 'month':\n                loadings[0] = true\n                params.productId = 1\n                break;\n            case 'year':\n                loadings[1] = true\n                params.productId = 2\n\n                break;\n            case 'free':\n                params.productId = 3\n                loadings[2] = true\n                break;\n\n            default:\n                break;\n        }\n        this.setState({\n            loadings\n        })\n        console.log('params:', params);\n        console.log('storage', storage);\n        buy(storage.userId, params)\n            .then(res => {\n                console.log(res);\n                let buyItem = item.type\n                let payParams  = {\n                  organizationId: storage.lastOrganization || null,\n                  userId: storage.userId\n                }\n                if (res.code === 0 && res.msg === 'success') {\n                    let { preOrderId } = res.data\n                    let buyItem1 = buyItem\n                    payForOrder(preOrderId, payParams)\n\n                        .then(res => {\n                            let { code, message, url } = res\n                            if (code === 0) {\n                                window.open(url)\n                                this.timer = setInterval(() => {\n\n                                    num++;\n                                    this._polling(preOrderId, buyItem1);\n\n                                    if (num > 280) {\n                                        //超过280秒则去显示二维码过期，要重新获取\n\n                                        num = 0;\n                                        this.timer && clearInterval(this.timer);\n                                    }\n                                }, 1500);\n                            } else {\n                                this.changeLoadings(buyItem1)\n                                message.destroy()\n                                message.error('Bill generation failed')\n                            }\n\n                        })\n                        .catch(err => {\n                            this.changeLoadings(buyItem1)\n                            message.destroy()\n                            message.error('Bill generation failed')\n                            console.log(err);\n                        })\n                } else {\n                    this.changeLoadings(buyItem)\n                    message.destroy()\n                    message.error('Order acquisition failed')\n                }\n            })\n            .catch(err => {\n                message.destroy()\n                message.error('Order acquisition failed')\n                console.log(err);\n            })\n    }\n    changeLoadings = (buyItem) => {\n        let arr = [].concat(this.state.loadings)\n        switch (buyItem) {\n            case 'month':\n                arr[0] = false\n                break;\n            case 'year':\n                arr[1] = false\n                break;\n            case 'free':\n                arr[2] = false\n                break;\n        }\n        this.setState({\n            loadings: arr\n        })\n    }\n    _polling = (preOrderId, buyItem) => {\n        getPreOrderById(preOrderId)\n            .then(res => {\n                console.log(res);\n                let { code, data } = res\n                if (code === 0) {\n                    let { status } = data\n                    if (status && status !== 1) {\n                        let arr = [].concat(this.state.loadings)\n                        switch (buyItem) {\n                            case 'month':\n                                arr[0] = false\n                                break;\n                            case 'year':\n                                arr[1] = false\n                                break;\n                            case 'free':\n                                arr[2] = false\n                                break;\n                        }\n                        this.setState({\n                            loadings: arr\n                        })\n                    }\n                    switch (status) {\n                        case 1:\n                            //待支付\n                            break;\n                        case 2:\n                            //取消支付\n                            message.destroy()\n                            message.warn('User cancels payment')\n                            this.timer && clearInterval(this.timer);\n                            break;\n                        case 3:\n                            message.destroy()\n                            message.success('The user paid successfully')\n                            this.timer && clearInterval(this.timer);\n\n                            //支付成功\n                            break;\n                        case 6:\n                        //待退款\n                        case 7:\n                        //已退款\n                        case 8:\n                            //已过期\n                            this.timer && clearInterval(this.timer);\n                    }\n                }\n            })\n\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    typeText = (text) => {\n      switch (text) {\n        case 1:\n          return 'Premium Monthly';\n        case 2:\n          return 'Premium Yearly';\n        case 3:\n          return 'Free Trial';\n        default:\n          return '';\n      }\n    }\n\n\n\n    render() {\n        let { userUrl, userName, endDate, selectListIndex, subscriptionData } = this.state\n        let url = !userUrl ? defaultUserIcon : userUrl\n\n        let bodyHeight = '90%'\n        try {\n          bodyHeight = document.getElementById('subscriptions').clientHeight\n        } catch (error) {\n\n        }\n        const expandedRowRender = () => {\n          const columns = [\n            {\n              title: '',\n              dataIndex: 'quotaType',\n              key: 'quotaType',\n              align: \"center\",\n              render: (text, record, index) => {\n                return <p style={{ textAlign: \"center\" }}>{text}</p>;\n              },\n            },\n            {\n              title: '',\n              dataIndex: 'startTime',\n              key: 'name',\n              render: (text, record) => <p>Start Date: {moment(text).format(\"MMM D, YYYY\")}</p>,\n            },\n          ];\n          return <Table className=\"expandTable\" showHeader={false} columns={columns} dataSource={tableData} pagination={false} />;\n        };\n        const columns = [\n          {\n            title: '',\n            dataIndex: 'quotaType',\n            key: 'quotaType',\n            render: (text, record, index) => {\n              if (text === 1) {\n                return <p>Premium Monthly</p>;\n              } else if (text === 2) {\n                return <p>Premium Yearly</p>;\n              } else if (text === 3) {\n                return <p>Free Trialy</p>;\n              } else {\n                return '';\n              }\n            },\n          },\n          {\n            title: '',\n            dataIndex: 'endTime',\n            key: 'endTime',\n            align: \"left\",\n            render: (text, record) => <p>Expires {moment(text).format(\"MMM D, YYYY\")}</p>,\n          },\n          {\n            title: '',\n            dataIndex: 'isExpired',\n            width: '20%',\n            key: 'isExpired',\n            render: (text, index) => {\n              if (text === 0) {\n                return <Tag color=\"#87d068\" style={{width: px(65), height: px(22), fontSize: 18}}>Active</Tag>\n              } else {\n                return <Tag color=\"#4a4a4a\" style={{width: px(65), height: px(22), fontSize: 18}}>Expired</Tag>\n\n              }\n            }\n          },\n\n        ];\n        // const data = [];\n        // for (let i = 0; i < 3; ++i) {\n        //   data.push({\n        //     key: i.toString(),\n        //     name: 'Premium Monthly',\n        //     platform: 'Expires Jul 25, 2022',\n        //     version: 'Active',\n        //   });\n        // }\n        // let\n        let tableData = subscriptionData;\n        return (\n            <div id=\"subscriptions\">\n                <div className=\"top\">\n                  <div className=\"TitleItem flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n                    <div className=\"title\">Billing & Subscriptions</div>\n                  </div>\n\n                </div>\n\n                <div className=\"content flex\">\n                  <div className=\"TitleItem flex\" style={{ paddingLeft: px(20) }}>\n                    <div className=\"title\" style={{ fontSize: 26 }}>My Subscriptions</div>\n                    <div className=\"subTitle\">\n                      <p>View and manage</p>\n                      <p>the subscriptions you’ve purchased</p>\n                    </div>\n                  </div>\n\n                  <div className=\"walkBtn1\" style={{ marginLeft: px(50) }}>\n                    <div\n                      className=\"walkbtnBox\"\n                      style={{ height: px(40), width: px(200) }}\n                      onClick={() => this.setState({ buyModal: true })}\n                    >\n                      <div className=\"walkText\">Change Subscription</div>\n                    </div>\n                    <div className=\"sub\" style={{ marginTop: px(12) }}>Cancel Subscription</div>\n\n                  </div>\n                </div>\n\n                <div className=\"tableDiv\" style={{ height: bodyHeight - px(250) }} >\n                <Table\n                    className='mainTable'\n                    showHeader={false}\n                    columns={columns}\n                    pagination={false}\n                    rowKey={(columns) => columns.orderId}\n                    expandable={{\n                      expandedRowRender,\n                      defaultExpandedRowKeys: ['0'],\n                      expandIconColumnIndex: '4',\n                      expandIcon: ({ expanded, onExpand, record }) =>\n                                expanded ? (\n                                  <Icon component={() => (<img src={expand} />)} onClick={e => onExpand(record, e)}  />\n                                ) : (\n                                  <Icon component={() => (<img src={down} />)} onClick={e => onExpand(record, e)} />\n                                )\n                    }}\n                    dataSource={tableData}\n                    size=\"small\"\n                  />\n                </div>\n\n                <MyModal\n                    visible={this.state.buyModal}\n                    // visible={true}\n\n                    element={\n                        <div className='buyModal'>\n                            <BuySub\n                                cancleFun={() => this.setState({ buyModal: false })}\n                                buyFun={(item) => {\n                                    // window.open('https://www.baidu.com')\n                                    this.buyFun(item)\n                                }}\n                                loadings={this.state.loadings}\n                            />\n                        </div>\n                    }\n                />\n\n\n            </div>\n        )\n    }\n}\n\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx",
    [
        "800",
        "801",
        "802",
        "803",
        "804",
        "805",
        "806",
        "807",
        "808",
        "809",
        "810",
        "811",
        "812",
        "813",
        "814",
        "815",
        "816",
        "817"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",
    [
        "818",
        "819",
        "820"
    ],
    "\nimport React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\n\nimport './minClose.less'\nimport { px, mTop } from './../px'\nimport rMin_red from './../../assets/img/min-red.png'\nimport rClose_red from './../../assets/img/close-red.png'\n\nimport rMin_white from './../../assets/img/min-white.png'\nimport rClose_white from './../../assets/img/close-white.png'\nimport { connect } from 'react-redux';\n\nlet ipcRenderer = window.electron.ipcRenderer\n\n/**\n *\n * @param {string} minHeight 最小化、最大化方块的宽高\n * @param {number} imgWidth 最小化、最大化图片的高度\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\n */\nconst MinClose = ({ minHeight, imgWidth, systemType }) => {\n  const [minbgc, setMinbgc] = useState('')\n  const [rMin, setRMin] = useState(rMin_red)\n  const [closebgc, setClosebgc] = useState('')\n  const [rClose, setRClose] = useState(rClose_red)\n\n  const [closeText, setCloseText] = useState('')\n  const [minText, setMinText] = useState('')\n\n  const minMouseEnter = () => {\n    setMinbgc('rgba(70, 70, 70, 0.5)')\n    setRMin(rMin_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const minMouseLeave = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const minClock = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    ipcRenderer.send('window-min')\n\n  }\n\n\n  const closeMouseEnter = () => {\n    setClosebgc('rgba(232,17,35)')\n    setRClose(rClose_white)\n    setMinText('-')\n    setCloseText('x')\n  }\n  const closeMouseLeave = () => {\n    setClosebgc('')\n    setRClose(rClose_red)\n    setMinText('')\n    setCloseText('')\n  }\n  const closeClock = () => {\n    ipcRenderer.send('window-close')\n  }\n  // console.log('systemType', systemType);\n\n  const body = () => {\n    if (systemType === 'mac') {\n      return (\n        <>\n          <div\n            className='macStyle'\n            // style={{ marginLeft: '21px' }}\n            onClick={closeClock}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <div className='mactext'>{closeText} </div>\n          </div>\n\n          <div\n            className='macStyle'\n            onClick={minClock}\n            style={{ backgroundColor: 'rgb(254,180,41' }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <div className='mactext'>{minText} </div>\n          </div>\n        </>\n      )\n    } else {\n      return (\n        <>\n          <div\n            className='min_icon'\n            onClick={minClock}\n            style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\n            onMouseEnter={minMouseEnter}\n            onMouseLeave={minMouseLeave}\n          >\n            <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n          <div\n            className='min_icon'\n            onClick={closeClock}\n            style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\n            onMouseEnter={closeMouseEnter}\n            onMouseLeave={closeMouseLeave}\n          >\n            <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\n          </div>\n        </>\n      )\n    }\n  }\n\n  return (\n    <div id='minClose' >\n      {body()}\n    </div>\n  )\n}\n\nMinClose.propTypes = {\n  minHeight: PropTypes.string,\n  imgWidth: PropTypes.string,\n}\nMinClose.defaultProps = {\n  minHeight: '40px',\n  imgWidth: `${px(20)}px`\n\n}\n\nexport default connect(\n  (state) => ({\n    systemType: state.systemReduce.systemType\n  })\n)(MinClose)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",
    [
        "821",
        "822",
        "823",
        "824",
        "825",
        "826",
        "827",
        "828",
        "829",
        "830",
        "831",
        "832",
        "833",
        "834",
        "835",
        "836",
        "837",
        "838",
        "839",
        "840",
        "841",
        "842",
        "843",
        "844",
        "845",
        "846",
        "847",
        "848",
        "849"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\new.js",
    [
        "850",
        "851"
    ],
    "/**\r\n * @file new.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/new`\r\n\r\n\r\n/**\r\n * @dec 添加预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const petall_subscribe = (params) => {\r\n    return postJson(`${baseURL}/petall/subscribe`, params)\r\n}\r\n\r\n/**\r\n * @dec 管理员添加医生\r\n * @param {string} userId 管理员id\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const admin_users = (userId, params) => {\r\n    return patch(`${baseURL}/admin/users/${userId}`, params)\r\n}\r\n\r\n\r\n/**\r\n * @dec 获取预约宠物\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const pet_subscribe_page = (params) => {\r\n    return postJson(`${baseURL}/pet/subscribe/page`, params)\r\n}\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\organization.js",
    [
        "852"
    ],
    "/**\r\n * @file organization.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/organization 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/organization`\r\n\r\n\r\n\r\n/**\r\n * @dec  管理员获取组织下的所有医生\r\n * @param {string} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\n\r\nexport const listDoctorsByAdmin = (lastOrganization, params) => {\r\n    return get(`${baseURL}/listDoctorsByAdmin/${lastOrganization}`, params)\r\n}\r\n\r\n/**\r\n * @dec 获取所有组织\r\n * @returns\r\n *\r\n */\r\nexport const listAll = () => {\r\n    return get(`${baseURL}/listAll`, '')\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 创建一个组织\r\n * @param {str} userId 用户id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const addOrganization = (userId, params) => {\r\n    return postJson(`${baseURL}/addOrganization/${userId}`, params)\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\px.jsx",
    [
        "853",
        "854",
        "855",
        "856",
        "857"
    ],
    "/**\r\n *\r\n * 获取屏幕分辨率宽高\r\n * let width = parseInt(window.screen.width)\r\n * let height = parseInt(window.screen.height)\r\n *\r\n * 获取应用窗口大小\r\n * document.documentElement.clientHeight\r\n * document.documentElement.clientWidth\r\n */\r\n//\r\n\r\n//\r\n\r\nconst devWidth = 1920;\r\nconst devHeight = 1040;\r\n\r\nlet size = window.screen\r\n// console.log('-------------------------分辨率的大小-----------------', size);\r\nlet width = parseInt(window.screen.availWidth);\r\nlet height = parseInt(window.screen.availHeight);\r\nif (width < height) {\r\n  let a = width;\r\n  width = height;\r\n  height = a;\r\n}\r\n\r\nexport const px = (val) => {\r\n  return val\r\n};\r\n\r\nexport const mTop = (val) => {\r\n  return val\r\n};\r\n\r\nexport const fs = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n};\r\nexport const pX = (val) => {\r\n  let windowWidth = document.documentElement.clientWidth;\r\n  // console.log('px', window.screen,)\r\n  return parseInt((windowWidth / 650) * val);\r\n};\r\nexport const MTop = (val) => {\r\n  return val\r\n};\r\n\r\nlet windowssize = {\r\n  width: 0,\r\n  height: 0,\r\n};\r\n\r\nexport const win = () => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n  return {\r\n    width: 1920,\r\n    height: 1080,\r\n  };\r\n};\r\n\r\nlet timer = null;\r\nexport const timerFun = () => {\r\n\r\n};\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\systemAction.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",
    [
        "858",
        "859"
    ],
    "\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\mellarecord.js",
    [
        "860"
    ],
    "/**\r\n * @file mellarecord.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/mellarecord 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/mellarecord`\r\n\r\n\r\n/**\r\n * @dec 增加硬件记录并更新ota硬件版本\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const saveRecord = (params) => {\r\n    return postJson(`${baseURL}/saveRecord`, params)\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getInfoOfLatestDevice = (hardWareType) => {\r\n    return get(`${baseURL}/getInfoOfLatestDevice?type=${hardWareType}`)\r\n}",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\config\\config.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js",
    [
        "861",
        "862",
        "863",
        "864",
        "865",
        "866",
        "867",
        "868"
    ],
    "import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\n/**\r\n * description: 摄氏度转华氏度,根据入参来保留小数点位数\r\n * @param {Number} celsius 摄氏度\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 华氏度\r\n */\r\nfunction CtoF(celsius, decimal = 1) {\r\n  let fahrenheit = (celsius * 1.8) + 32;\r\n  return parseFloat(fahrenheit.toFixed(decimal));\r\n}\r\n/**\r\n * description: 华氏度转摄氏度,根据入参来保留小数点位数\r\n * @param {Number} fahrenheit 华氏度\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 摄氏度\r\n */\r\nfunction FtoC(fahrenheit, decimal = 1) {\r\n  let celsius = (fahrenheit - 32) / 1.8;\r\n  return parseFloat(celsius.toFixed(decimal));\r\n}\r\n/**\r\n * description: 千克转磅,根据入参来保留小数点位数\r\n * @param {Number} kg 千克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 磅\r\n */\r\nexport function KgtoLb(kg, decimal = 2) {\r\n  let pound = kg * 2.2046;\r\n  return parseFloat(pound.toFixed(decimal));\r\n}\r\n/**\r\n * description: 磅转千克,根据入参来保留小数点位数\r\n * @param {Number} lb 磅\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 千克\r\n *\r\n */\r\nexport function LbtoKg(lb, decimal = 2) {\r\n  let kilogram = lb / 2.2046;\r\n  return parseFloat(kilogram.toFixed(decimal));\r\n}\r\n/**\r\n * description: 克转毫升,根据入参来保留小数点位数\r\n * @param {Number} gram 克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 毫升\r\n */\r\nfunction GToMl(gram, decimal = 2) {\r\n  let milliliter = gram\r\n  return parseFloat(milliliter.toFixed(decimal));\r\n}\r\n/**\r\n * description: 毫升转克,根据入参来保留小数点位数\r\n * @param {Number} ml 毫升\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 克\r\n */\r\nfunction MltoG(ml, decimal = 2) {\r\n  let gram = ml;\r\n  return parseFloat(gram.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 克转盎司,根据入参来保留小数点位数\r\n * @param {Number} gram 克\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 盎司\r\n */\r\nfunction GToOz(gram, decimal = 2) {\r\n  let ounce = gram / 28.3495;\r\n  return parseFloat(ounce.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 盎司转克,根据入参来保留小数点位数\r\n * @param {Number} ounce 盎司\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 克\r\n */\r\nfunction OztoG(ounce, decimal = 2) {\r\n  let gram = ounce * 28.3495;\r\n  return parseFloat(gram.toFixed(decimal));\r\n}\r\n/**\r\n * description: 厘米转英寸,根据入参来保留小数点位数\r\n * @param {Number} cm 厘米\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 英寸\r\n */\r\nfunction CmtoIn(cm, decimal = 2) {\r\n  let inch = cm / 2.54;\r\n  return parseFloat(inch.toFixed(decimal));\r\n}\r\n/**\r\n * description: 英寸转厘米,根据入参来保留小数点位数\r\n * @param {Number} inch 英寸\r\n * @param {Number} decimal 小数点位数\r\n * @return {Number} 厘米\r\n */\r\nfunction IntoCm(inch, decimal = 2) {\r\n  let cm = inch * 2.54;\r\n  return parseFloat(cm.toFixed(decimal));\r\n}\r\n/**\r\n * @description: 计算宠物年龄\r\n * @param {string} birthday 宠物生日\r\n * @return {number | string} age | ‘unknown’\r\n */\r\nexport const calculateAge = (birthday) => {\r\n  if (_.isEmpty(birthday)) {\r\n    return \"unknown\";\r\n  } else {\r\n    return moment().diff(moment(birthday), \"years\");\r\n  }\r\n};\r\n/**\r\n * @description: 没有上传照片的宠物头像展示\r\n * @param {Number} petSpeciesBreedId 宠物品种id\r\n * @return {string} 'cat' 'dog' 'other'\r\n */\r\nexport const petPicture = (petSpeciesBreedId) => {\r\n  if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n    return 'cat';\r\n  } else if (\r\n    petSpeciesBreedId === 12001 ||\r\n    _.inRange(petSpeciesBreedId, 136, 456)\r\n  ) {\r\n    return 'dog';\r\n  } else if (petSpeciesBreedId === 13001) {\r\n    return 'other';\r\n  } else {\r\n    return 'other';\r\n  }\r\n}\r\n/**\r\n * @dec 判断版本1是否大于版本2\r\n * @param {str} version1 版本号1,格式必须为1.0.0\r\n * @param {*} version2 版本号2,格式必须为1.0.0\r\n * @returns 版本1是否大于版本2\r\n */\r\nexport const versionComarision = (version1, version2) => {\r\n  let version1Arr = version1.split('.')\r\n  let version2Arr = version2.split('.')\r\n  function num(params) {\r\n    return parseInt(params)\r\n  }\r\n  if (num(version1Arr[0]) >= num(version2Arr[0])\r\n    && num(version1Arr[1]) >= num(version2Arr[1])\r\n    && num(version1Arr[2]) > num(version2Arr[2])\r\n  ) {\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n/**\r\n *\r\n * @param {*} time\r\n * @returns\r\n */\r\nexport const transitionTime = (time) => {\r\n  let timeDifference = new Date().getTimezoneOffset();\r\n  let newTime = moment(time).subtract(timeDifference, 'm').format();\r\n  return newTime;\r\n}\r\n/**\r\n * @dec 获取瘦体重（g)\r\n * @param {*} headCircumference 头部周长（cm)\r\n * @param {*} hindlimbLength    后肢长度（cm）\r\n * @param {*} forelimbCircumference 前肢周长（cm)\r\n * @param {*} forelimbLength        前肢长度(cm)\r\n * @param {*} bodyLength            身体长度（cm)\r\n * @param {*} upperTorsoCircumference 胸部周长(cm)\r\n * @returns 返回猫的瘦体重\r\n */\r\nexport const catLeanBodyMass = (headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference) => {\r\n  console.log('headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference: ', headCircumference, hindlimbLength, forelimbCircumference, forelimbLength, bodyLength, upperTorsoCircumference);\r\n  //头部直径\r\n  let headDiameter = headCircumference / 3\r\n  let value = 30.3 * (headDiameter * hindlimbLength) + 316.9 * forelimbCircumference + 2.55 * (upperTorsoCircumference / 3) * forelimbLength + 14.4 * bodyLength - 3058.7\r\n  return value\r\n}\r\n/**\r\n* @dec 获取脂肪质量（g)\r\n* @param {*} weight            宠物体重（lb)\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @param {*} forelimbLength    前肢长度(cm)\r\n* @param {*} forelimbCircumference 前肢周长（cm)\r\n* @returns\r\n*/\r\nexport const catFatMass = (weight, headCircumference, forelimbLength, forelimbCircumference) => {\r\n  console.log('weight, headCircumference, forelimbLength, forelimbCircumference: ', weight, headCircumference, forelimbLength, forelimbCircumference);\r\n\r\n  return 436.9 * weight - 24 * (headCircumference / 3) * forelimbLength - 309.2 * forelimbCircumference + 2522.7\r\n}\r\n/**\r\n* @dec 狗的瘦体重\r\n* @param {*} weight            宠物体重（lb)\r\n* @param {*} age               年龄\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @param {*} forelimbLength    前肢长度(cm)\r\n* @param {*} hindlimbLength     后肢长度（cm）\r\n* @returns\r\n*/\r\nexport const dogLeanBodyMass = (weight, age, headCircumference, forelimbLength, hindlimbLength) => {\r\n  return 1.8 * (8.25 * weight - 9.02 * age + 8.92 * ((headCircumference / 6) ** 2) + 96.86 * forelimbLength - 111.07 * (forelimbLength - hindlimbLength) - 357.18) ** 1.333\r\n}\r\n\r\n/**\r\n*\r\n* @param {*} weight                宠物体重（lb)\r\n* @param {*} hindlimbLength  后肢长度（cm）\r\n* @param {*} upperTorsoCircumference 胸部周长(cm)\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @returns\r\n*/\r\nexport const dogFatMass = (weight, hindlimbLength, upperTorsoCircumference, headCircumference) => {\r\n  return 229.04 * weight - 416.63 * (hindlimbLength ** 1.2) + 157.78 * (upperTorsoCircumference - headCircumference) + 908.79\r\n}\r\n/**\r\n* @dec 计算狗的体脂百分比\r\n* @param {*} upperTorsoCircumference  胸部周长(cm)\r\n* @param {*} lowerTorsoCircumference   下躯干周长（cm）\r\n* @param {*} hindlimbLength 后肢长度（cm）\r\n* @param {*} headCircumference 头部周长（cm)\r\n* @returns\r\n*/\r\nexport const dogBodyFatPercentage = (upperTorsoCircumference, lowerTorsoCircumference, hindlimbLength, headCircumference) => {\r\n  return 0.71 * upperTorsoCircumference - 0.1 * ((lowerTorsoCircumference / 6) ** 2) - 5.78 * (hindlimbLength ** 0.8) + 26.56 * (lowerTorsoCircumference / headCircumference) + 2.06\r\n}\r\n/**\r\n * @dec 切换主题颜色\r\n * @param {*} selectHardwareType 选择的硬件类型\r\n * @returns 颜色\r\n */\r\nexport const changeThemeColor = (selectHardwareType) => {\r\n  switch (selectHardwareType) {\r\n    case 'mellaPro':\r\n      return '#e1206d';\r\n    case 'biggie':\r\n      return '#12ADE4';\r\n    case 'tape':\r\n      return '#D5B019';\r\n    case 'otterEQ':\r\n      return '#FFA132';\r\n    case 'mabel':\r\n      return '#F78F2F';\r\n    default:\r\n      return '#e1206d';\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dec buffer转hex文本\r\n * @param {*} buffer \r\n * @returns \r\n */\r\nexport const buf2hex = (buffer) => {\r\n\r\n  return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' +\r\n    x.toString(16)).slice(-2)).join('');\r\n\r\n}\r\n/**\r\n * @dec hex转buffer文本\r\n * @param {*} hex \r\n * @returns \r\n */\r\nexport const hex2buf = (hex) => {\r\n  return new Uint8Array(hex.match(/[\\da-f]{2}/gi).map(function (h) {\r\n    return parseInt(h, 16)\r\n  }))\r\n}\r\n/**\r\n * @dec 将hex字符串转换成十进制数字数组\r\n * @param {string} hex \r\n */\r\nexport const hex2arr = (hex) => {\r\n  let hexArr = [...hex];\r\n  let a, b;\r\n  let aIndex = 0;\r\n  let bIndex = 1;\r\n  let arr = [];\r\n\r\n  hexArr.forEach((str, index) => {\r\n    if (index % 2 === 0) {\r\n      a = str;\r\n      aIndex += 1\r\n    } else {\r\n      b = str\r\n      bIndex += 1\r\n    }\r\n    if (a && b && (bIndex - aIndex === 1)) {\r\n      arr.push(parseInt((a + b), 16))\r\n    }\r\n  });\r\n  return arr\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\api.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\systemReduce.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx",
    [
        "869",
        "870",
        "871"
    ],
    "import React, { useState, useEffect } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport biggieHome from './../../assets/img/searchType-biggieHome.png';\nimport biggiePro from './../../assets/img/searchType-biggiePro.png';\nimport mellaHome from './../../assets/img/searchType-home.png';\nimport mellaPro from './../../assets/img/searchType-mellaPro.png';\nimport maeBowl from './../../assets/img/searchType-maeBowl.png';\nimport other from './../../assets/img/searchType-other.png';\nimport possum from './../../assets/img/searchType-possum.png';\nimport rfid from './../../assets/img/searchType-rfid.png';\nimport redclose from '../../assets/img/redclose.png';\nimport tabby from '../../assets/img/searchType-tabby.png';\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, MTop } from '../../utils/px';\n\nimport { connect } from 'react-redux'\nimport {\n  setReceiveBroadcastHardwareInfoFun,\n  setHardwareList,\n  changeselectHardwareIndex,\n  setSelectHardwareType,\n  selectHardwareList\n} from '../../store/actions';\nimport PropTypes from 'prop-types';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n  //是否有底座设备\n  const [noUSB, setNoUSB] = useState(false)\n  //设备列表\n  const [devicesList, setDevicesList] = useState([])\n  //选择的设备\n  const [selectDevice, setSelectDevice] = useState(null)\n  //重命名\n  const [reName, setReName] = useState('')\n  //房间号\n  const [examRoom, setExamRoom] = useState('')\n  //已经保存过的设备的macid\n  const [saveDeviceMac, setSaveDeviceMac] = useState([])\n  //顶部文本\n  const [topText, setTopText] = useState(' Pair Device')\n\n\n\n  const addDevice = () => {\n    //从redux拿到列表中的所有硬件设备 hardwareList\n    console.log('hardwareList', hardwareList);\n    //拿到硬件的macid 类型 名称 房间号\n    console.log('selectDevice', selectDevice);\n    let sameFlog = hardwareList.some((item, index) => {\n      return item.type === selectDevice.deviceType\n    })\n    let hardwareArr = [].concat(hardwareList)\n    let { deviceType, macId, name } = selectDevice\n    let newDevice = {\n      name: reName || name,\n      mac: macId,\n      deviceType,\n      examRoom: examRoom || '',\n    }\n    console.log('newDevice', newDevice);\n    if (sameFlog) {\n      //相同就代表有这个硬件类型,可以直接去push\n\n      for (let i = 0; i < hardwareArr.length; i++) {\n        if (hardwareArr[i].type === selectDevice.deviceType) {\n          hardwareArr[i].devices.push(newDevice)\n          break\n        }\n      }\n\n    } else {\n      //没有就要新建一个硬件类型\n      let json = {\n        type: selectDevice.deviceType,\n        devices: [newDevice]\n      }\n      hardwareArr.push(json)\n    }\n    setReName('')\n    setExamRoom('')\n    setHardwareList(hardwareArr)\n\n    return newDevice\n\n\n  }\n\n  const body = () => {\n\n    if (selectDevice) {\n      return <div className=\"addDevice1 flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n            {`this ${selectDevice.name} device?`}</div>\n\n          <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n            {`SN: ${selectDevice.macId}`}</div>\n\n\n          <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                setReName(value.target.value)\n\n              }}\n              placeholder={`${selectDevice.name} Device Name`}\n            />\n          </div>\n          <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={examRoom}\n              onChange={(value) => {\n                setExamRoom(value.target.value)\n\n              }}\n              placeholder={`Exam Room Name`}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write<br /> the name\n            on the sticker provided so it is easy\n            to select<br /> your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              addDevice()\n              setSelectDevice(null)\n              setSelectHardwareType('add')\n\n            }}\n          >\n            <p className='btnText'>Add Another Device</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let newDevice = addDevice()\n              setSelectHardwareType(selectDevice.deviceType)\n\n\n              electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n              setSelectDevice(null)\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          let options = (val) => {\n            let arr = []\n            if (val === 1) {\n              arr = [mellaPro, mellaHome, biggiePro, rfid]\n            } else {\n              arr = [possum, maeBowl, tabby, other,]\n            }\n            let option = arr.map((item, index) => {\n              let imgWidth = px(100)\n              // imgWidth = index === 2 ? px(65) : imgWidth\n              return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                <div className=\"searchType-item\" key={index} >\n                  <img src={item} alt=\"\" width={imgWidth} />\n                </div>\n              </li>)\n            })\n            return (\n              <ul>\n                {option}\n              </ul>\n            )\n          }\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n            <div className=\"addDeviceContent\">\n              <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                  <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                </div>\n              </div>\n              <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n              </div>\n              <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                <div className=\"btnText\">\n                  Scan For Devices\n                </div>\n              </div>\n              <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                Or\n              </div>\n              <div className=\"select\">\n                Select device type to\n              </div>\n              <div className=\"add\">\n                add manually\n              </div>\n\n              <div className=\"item\">\n                {options(1)}\n                {options(2)}\n              </div>\n            </div>\n\n            {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n\n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  setSelectDevice(item)\n\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList ' >\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n  //初始化\n  useEffect(() => {\n    setNoUSB(false)\n    setDevicesList([])\n    setSelectDevice(null)\n    setReName('')\n    setSaveDeviceMac([])\n    setTopText(' Pair Device')\n    //组件渲染完毕后要先清空广播的硬件信息\n    setReceiveBroadcastHardwareInfoFun({\n      deviceType: '',\n      macId: '',\n      name: ''\n    })\n  }, [])\n  useEffect(() => {\n\n    if (hardwareList.length > 0) {\n      let saveDeviceMac = []\n      for (let i = 0; i < hardwareList.length; i++) {\n        const element = hardwareList[i];\n        for (let j = 0; j < element.devices.length; j++) {\n          const device = element.devices[j];\n          saveDeviceMac.push(device.mac)\n        }\n      }\n      setSaveDeviceMac(saveDeviceMac)\n\n    }\n  }, [hardwareList])\n  useEffect(() => {\n    if (!selectDevice) {\n      setTopText(' Pair Device')\n    } else {\n      setTopText('Device Connected')\n    }\n\n  }, [selectDevice])\n  useEffect(() => {\n    setNoUSB(!isHaveUsbDevice)\n  }, [isHaveUsbDevice])\n  useEffect(() => {\n    let sameFlog = devicesList.some((device, index) => {\n      return device.macId === receiveBroadcastHardwareInfo.macId\n    })\n    if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n      return\n    }\n    console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n    let deviceArr = [].concat(devicesList)\n    deviceArr.push(receiveBroadcastHardwareInfo)\n    setDevicesList(deviceArr)\n\n\n\n  }, [receiveBroadcastHardwareInfo])\n\n  return (\n    <div className='addDevice' style={{ height: bodyHeight }}>\n      <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\n        {topText}\n      </div>\n\n      {body()}\n    </div >\n  )\n}\n\n\nAddDevice.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    hardwareReducer: state.hardwareReduce,\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n    hardwareList: state.hardwareReduce.hardwareList,\n  }),\n  { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx",
    [
        "872",
        "873"
    ],
    "import React, { useState, useEffect } from 'react'\n\nimport xia from './../../assets/img/xia.png'\n\nimport { px } from '../../utils/px'\n\nimport PetsUI from './PetsUI.jsx'\nimport HardListModal from './HardListModal'\n\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport { selectHardwareModalShowFun, selectHardwareInfoFun } from './../../store/actions';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun, hardwareInfo, selectHardwareInfoFun }) => {\n  //定义选择的硬件详细信息\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\n  useEffect(() => {\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\n\n    for (let i = 0; i < hardwareList.length; i++) {\n      const element = hardwareList[i];\n\n      if (element.type === selectHardwareType) {\n        let list = element.devices || []\n\n        //获取被选中的硬件的详细信息\n        let selectHardwareInfo = hardwareInfo || {}\n        if (selectHardwareInfo.mac === null && list[0]) {\n          let selectHardwareInfo = list[0]\n          selectHardwareInfoFun(selectHardwareInfo)\n\n          setSelectHardwareDetail(selectHardwareInfo)\n        } else {\n          let sameFlag = false\n          for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\n              setSelectHardwareDetail(selectHardwareInfo)\n              sameFlag = true\n              break\n            }\n          }\n          if (!sameFlag) {\n            let selectHardwareInfo = list[0] || {}\n            setSelectHardwareDetail(selectHardwareInfo)\n          }\n        }\n        break\n      }\n    }\n  }, [selectHardwareType, hardwareList,])\n\n\n  // console.log('=====----===', selectHardwareDetail);\n\n  return (\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\n      <div className='deviceAndPets-title'\n        onClick={(e) => {\n          //react阻止冒泡\n          e.stopPropagation()\n          selectHardwareModalShowFun(!selectHardwareModalShow)\n        }}\n      >\n        <div className=\"devicesName\" style={{ fontSize: px(30) }}>\n          {selectHardwareDetail.name || \"No Equipment\"}\n        </div>\n        <div className=\"imgBox\" style={{ marginLeft: px(7)}}>\n          <img src={xia} alt=\"\" width={px(25)} />\n        </div>\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\n          setSelectHardwareDetail(item)\n        }} />}\n      </div>\n      <PetsUI\n        bodyHeight={bodyHeight}\n      />\n    </div >\n  )\n}\n\n\nHardAndPetsUI.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nHardAndPetsUI.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n\n  }),\n  {\n    selectHardwareModalShowFun,\n    selectHardwareInfoFun\n  }\n)(HardAndPetsUI)\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx",
    [
        "874",
        "875"
    ],
    "import React, { useEffect, useState } from \"react\";\r\nimport { message } from 'antd'\r\n\r\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\r\nimport moveMellaPro from \"./../../assets/img/moveMellaPro.png\";\r\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\r\nimport moveBiggie from \"./../../assets/img/moveBiggie.png\";\r\nimport tape from \"./../../assets/img/hardList-tape.png\";\r\nimport moveTape from \"./../../assets/img/moveTape.png\";\r\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\r\nimport moveOtterEQ from \"./../../assets/img/moveOtterEQ.png\";\r\nimport mabel from \"./../../assets/img/hardList-mabel.png\";\r\nimport moveMabel from \"./../../assets/img/moveMabel.png\";\r\n\r\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\r\nimport smalls from './../../assets/img/smalls.png'\r\nimport cameraIcon from './../../assets/img/cameraIcon.png'\r\nimport add from \"./../../assets/img/hardList-add.png\";\r\n\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { px } from \"../../utils/px\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport { useHover } from 'ahooks';\r\n\r\nlet storage = window.localStorage;\r\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\r\nconst HardWareTypeUI = ({\r\n  bodyHeight,\r\n  devicesTypeList,\r\n  selectHardwareInfoFun,\r\n  setSelectHardwareType,\r\n  selectHardwareType,\r\n  setMenuNum,\r\n  menuNum,\r\n}) => {\r\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\r\n  const [onMouseEnterIndex, setOnMouseEnterIndex] = useState(-1);//移入硬件图片的下标\r\n\r\n  let options = devicesTypeList.map((item, index) => {\r\n    let img = null;\r\n    switch (item.type) {\r\n      case \"mellaPro\":\r\n        img = onMouseEnterIndex === 0 ? moveMellaPro : mellaPro;\r\n        break;\r\n      case \"biggie\":\r\n        img = onMouseEnterIndex === 1 ? moveBiggie : biggie;\r\n        break;\r\n      case \"tape\":\r\n        img = onMouseEnterIndex === 2 ? moveTape : tape;\r\n        break;\r\n      case \"otterEQ\":\r\n        img = onMouseEnterIndex === 3 ? moveOtterEQ : otterEQ;\r\n        break;\r\n      case \"mabel\":\r\n        img = onMouseEnterIndex === 4 ? moveMabel : mabel;\r\n        break;\r\n      case \"rfid\":\r\n        img = rfid;\r\n        break;\r\n      case \"camera\":\r\n        img = onMouseEnterIndex === 5 ? cameraIcon : smalls\r\n        break\r\n      case \"add\":\r\n        img = add;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    let borderStyle = ``;\r\n    if (item.type === selectHardwareType && menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n      borderStyle = ` 2px solid #3B3A3A`;\r\n    }\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        style={{ margin: `${px(10)}px 0` }}\r\n        onClick={() => {\r\n          if (menuNum !== \"6\" && !electronStore.get(`${storage.userId}-isClical`)) {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType(item.type);\r\n            if (item.type === \"add\") {\r\n            } else {\r\n              let devicesInfo = {\r\n                deviceType: item.type,\r\n                examRoom: null,\r\n                mac: null,\r\n                name: null\r\n              }\r\n              if (item.devices.length > 0) {\r\n                devicesInfo = electronStore.get(\r\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\r\n                ) || {};\r\n                let isSame = item.devices.some((item) => item.mac === devicesInfo.mac)\r\n                if (!isSame) {\r\n                  devicesInfo = item.devices[0];\r\n                  electronStore.set(\r\n                    `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\r\n                    devicesInfo\r\n                  );\r\n                }\r\n              }\r\n              selectHardwareInfoFun(devicesInfo);\r\n            }\r\n          }\r\n          else {\r\n            message.destroy();\r\n            message.warning('Please exit clinical trial mode first');\r\n          }\r\n        }}\r\n        onMouseEnter={() => {\r\n          setOnMouseEnterIndex(index);\r\n        }}\r\n        onMouseLeave={() => {\r\n          setOnMouseEnterIndex(-1);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"item\"\r\n          style={{ border: borderStyle }}\r\n          id={`item${index}`}\r\n        >\r\n          <img src={img} alt=\"\" width={px(55)} />\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    let Index = null;\r\n    for (let i = 0; i < devicesTypeList.length; i++) {\r\n      const element = devicesTypeList[i];\r\n      if (element.type === selectHardwareType) {\r\n        Index = i;\r\n        break;\r\n      }\r\n    }\r\n    if (Index === null) {\r\n      return;\r\n    }\r\n\r\n    let hard = devicesTypeList[Index];\r\n    if (hard && hard.type !== \"add\") {\r\n      let devicesInfo = electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\r\n      );\r\n      if (!devicesInfo) {\r\n        if (hard.devices.length > 0) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        } else if (hard.devices.length === 0) {\r\n          devicesInfo = {\r\n            deviceType: hard.type,\r\n            examRoom: null,\r\n            mac: null,\r\n            name: null,\r\n          };\r\n        }\r\n      } else {\r\n        let sameFlag = false;\r\n        for (let i = 0; i < hard.devices.length; i++) {\r\n          const element = hard.devices[i];\r\n          if (\r\n            element.mac === devicesInfo.mac &&\r\n            element.name === devicesInfo.name\r\n          ) {\r\n            sameFlag = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!sameFlag) {\r\n          devicesInfo = hard.devices[0];\r\n          electronStore.delete(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\r\n            devicesInfo\r\n          );\r\n        }\r\n      }\r\n      selectHardwareInfoFun(devicesInfo);\r\n    }\r\n  }, [devicesTypeList]);\r\n\r\n  return (\r\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\r\n      <ul>{options}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nHardWareTypeUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array,\r\n};\r\n//默认值\r\nHardWareTypeUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: [],\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    menuNum: state.userReduce.menuNum,\r\n  }),\r\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\r\n)(HardWareTypeUI);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\qsmReduce.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx",
    [
        "876"
    ],
    "import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\n\nimport _ from 'lodash';\n\nimport './index.less';\nimport { selectBreedBySpeciesId } from '../../api';\n\nconst SelectPetBreed = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel }) => {\n\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [breedList, setBreedList] = useState([]);//所有宠物品种\n  const [searchValue, setSearchValue] = useState();//搜索框的值\n  const [selePetBreedValue, setSelePetBreedValue] = useState();//选择的宠物品种\n  const [loading, setLoading] = useState(false);//加载\n\n  //获取所有宠物品种\n  const getAllPetBreed = () => {\n    let data = {\n      speciesId: null,//null是获取所有宠物品种不分猫和狗\n    }\n    setLoading(true);\n\n    selectBreedBySpeciesId(data)\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          setBreedList(res.petlist);\n        } else {\n          message.error('Failed to obtain pet breed')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    onSelect(selePetBreedValue);\n    setIsModalVisible(visible);\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入内容\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { });\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPetBreed();\n    return (() => { });\n  }, []);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  return (\n    <>\n      <Modal\n        title=\"Choose Breed\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetBreedModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <PhoneBook\n                listDate={breedList}\n                confirmSelectBreed={value}\n                selectFun={(val) => {\n                  setSelePetBreedValue(val);\n                }}\n                searchText={searchValue}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                >\n                  Select\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPetBreed;\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",
    [
        "877",
        "878"
    ],
    "\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\current.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\workplace.js",
    [
        "879"
    ],
    "/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/workplace 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/workplace`\r\n\r\n\r\n/**\r\n * \r\n * @dec 根据组织id获取工作场所\r\n * @param {string} organizationId \r\n * @returns \r\n */\r\nexport const listAllWorkplaceByOrganizationId = (organizationId) => {\r\n    return get(`${baseURL}/listAllWorkplaceByOrganizationId/${organizationId}`, '')\r\n}\r\n\r\n\r\n/**\r\n * @dec 添加工作场所\r\n * @param {str} userId 用户id\r\n * @param {*} params \r\n * @returns \r\n */\r\n\r\nexport const addWorkplace = (userId, params) => {\r\n    return postJson(`${baseURL}/addWorkplace${userId}`, params)\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",
    [
        "880"
    ],
    "export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\index.jsx",
    [
        "881",
        "882"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MotionCamera = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  //为了清除应没有底座跳出的弹框\n  useEffect(() => {\n    message.destroy();\n  }, [])\n\n  return (\n    <Layout id=\"motionCamera\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column'}}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMotionCamera.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MotionCamera);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\enrolledPlan\\index.jsx",
    [
        "883",
        "884",
        "885",
        "886",
        "887"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Checkbox, Layout, List, Avatar, Modal, Form, Input } from \"antd\";\n\nimport catFood from '../../assets/img/catFood.png';\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\nimport electronStore from \"../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst EnrolledPlan = ({ petMessage, hardwareMessage, bodyHeight,setSelectHardwareType }) => {\n  const { Content, Header } = Layout;\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [nextType, setNextType] = useState('selectIllness');//切换当前页面的组件。selectIllness：选择疾病；createPlan:创建计划；planInfo:计划详情。\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const options = [\n    {\n      label: 'Hepatic Disease',\n      value: '1',\n    },\n    {\n      label: 'Renal Disease',\n      value: '2',\n    },\n    {\n      label: 'Osteoarthritis / Mobility / Joint',\n      value: '3',\n    },\n  ];\n  const data = [\n    {\n      title: 'Title 1',\n    },\n    {\n      title: 'Title 2',\n    },\n    {\n      title: 'Title 3',\n    },\n    {\n      title: 'Title 4',\n    },\n  ];\n  //表单提交\n  const onFinish = (values) => {\n    console.log(values);\n    setSelectHardwareType(\"mabel\");\n  };\n  //选择的疾病\n  const onChange = (checkedValues) => {\n    console.log('checked = ', checkedValues);\n  };\n  //切换头部文字\n  const topTitle = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return 'Prescription Diet Matrix';\n      case 'createPlan':\n        return 'Prescription Diet Recommendations'\n      case 'planInfo':\n        return 'Feeding Plan'\n      default:\n        break;\n    }\n  }\n  //切换中间组件\n  const middleContent = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <div className=\"selectIllness\">\n            <Checkbox.Group\n              options={options}\n              onChange={onChange}\n              className=\"checkboxGroup\"\n            />\n          </div>\n        );\n      case 'createPlan':\n        return (\n          <div className=\"recommendMessageBox\">\n            <div className=\"leftBox\">\n              <img src={catFood} alt=\"\" />\n            </div>\n            <div className=\"rightBox\">\n              <p>Hill's Science Diet Adult 11+ Chicken Recipe cat food</p>\n              <p>Fluffy's Feeding Plan:</p>\n              <div className=\"descriptionTitle\">\n                <p>\n                  Based on Fluffy's BCS of 7, age 14, and osteoarthritis, we recommend feeding her 1 1/8 cups of kibble per day.\n                </p>\n                <p>443 Calories per cup</p>\n              </div>\n            </div>\n          </div>\n        )\n      case 'planInfo':\n        return (\n          <div className=\"planList\">\n            <List\n              dataSource={data}\n              renderItem={(item) => (\n                <div className=\"listBox\">\n                  <List.Item className=\"listItem\">\n                    <div className=\"item\">\n                      <div className=\"top\">\n                        <p>{item.title}</p>\n                        <p>123</p>\n                      </div>\n                      <div className=\"bottom\">\n                        <p>Weight</p>\n                        <p>465</p>\n                      </div>\n                    </div>\n                  </List.Item>\n                </div>\n              )}\n            />\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n  //切换底部按钮\n  const bottomBtn = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              electronStore.set(`${petMessage.petId}-planType`, true);\n              setNextType('createPlan');\n            }}\n          >\n            Set Recommendations\n          </Button>\n        );\n      case 'createPlan':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => { setNextType('planInfo') }}\n          >\n            Create Feeding Plan\n          </Button>\n        );\n      case 'planInfo':\n        return (\n          <>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => { }}\n              className=\"itemBtn\"\n            >\n              Email\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { }}\n            >\n              Print\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { setIsModalVisible(true) }}\n            >\n              Send to Mabel\n            </Button>\n          </>\n        );\n      default:\n        break;\n    }\n  }\n  //展示宠物照片\n  const shoePetPicture = () => {\n    if (_.isEmpty(petMessage?.url)) {\n      switch (petPicture(petMessage?.petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return petMessage?.url\n    }\n  }\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(petMessage?.firstName) && _.isEmpty(petMessage?.lastName)) {\n      return \"unknown\";\n    } else {\n      return petMessage?.firstName + \" \" + petMessage?.lastName;\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Layout className=\"planContentBox\" style={{ height: bodyHeight }}>\n      <div className=\"heardTitleBox\">\n        <p>{topTitle()}</p>\n      </div>\n      <div className=\"petMessageBox\">\n        <div className=\"left\">\n          <Avatar src={shoePetPicture()} size={64} />\n          <div className=\"petMsg\">\n            <p>{petMessage.petName ? petMessage?.petName : 'unknown'}</p>\n            <p>{ownerName()}</p>\n          </div>\n        </div>\n        <div className=\"right\">\n          <p>{calculateAge(petMessage?.birthday) === 'unknown' ? 'unknown' : `${calculateAge(petMessage?.birthday)} Years Old`}</p>\n          <p>{petMessage?.weight} lbs</p>\n          <p>{petMessage?.gender === 0 ? 'Male' : 'Female'}</p>\n          <p>{petMessage?.breedName}</p>\n        </div>\n      </div>\n      <div className=\"middleBox\">\n        {middleContent()}\n      </div>\n      <div className=\"btnBox\">\n        {bottomBtn()}\n      </div>\n      <Modal\n        title=\"Send Feeding Plan to Mabel\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        destroyOnClose\n        width={300}\n        className=\"planModal\"\n      >\n        <div className=\"modalContentBox\">\n          <div className=\"description\">\n            <p>Enter pet parent's email associated with their Mella Health App.</p>\n          </div>\n          <div className=\"formBox\">\n            <Form form={form} onFinish={onFinish} preserve={false}>\n              <Form.Item\n                name=\"mellaId\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" shape=\"round\" block htmlType=\"submit\">\n                  Send\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </Modal>\n    </Layout>\n  );\n};\n\nEnrolledPlan.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType,\n  }\n)(EnrolledPlan);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\index.jsx",
    [
        "888",
        "889",
        "890"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport SelectPatient from '../../assets/img/SelectPatient.png'\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MabelPage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  return (\n    <Layout className=\"mabelPageBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMabelPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MabelPage);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",
    [
        "891",
        "892",
        "893",
        "894",
        "895"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Measurement from \"./components/measurement\";\nimport MeasuredData from \"./components/measuredData\";\nimport HeaderItem from \"./components/headerItem\";\n\nimport { connect } from \"react-redux\";\nimport SelectPatient from '../../assets/img/SelectPatient.png'\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport { px } from \"../../utils/px\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst TemperaturePage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  const [vibible, setVibible] = useState(false);\n\n  //测量温度中的页面变化\n  const changePage = () => {\n    // return <MeasuredData />\n    switch (mellaConnectStatus) {\n      case \"isMeasuring\":\n        return <Measurement />;\n      case \"complete\":\n        return <MeasuredData />;\n      case \"connected\":\n        return <LinkEquipment />;\n      case \"disconnected\":\n        // return <MeasuredData />;\n        return <LinkEquipment />;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Layout className=\"homeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\">\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {_.isEmpty(petMessage) ? (\n          <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100,  flexDirection: 'column'}}>\n            <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n            <p className=\"chackPatientTitle\">Select a patient</p>\n          </div>\n        ) : (\n          changePage()\n        )}\n      </Layout>\n    </>\n  );\n};\n\nTemperaturePage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(TemperaturePage);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx",
    [
        "896",
        "897",
        "898",
        "899",
        "900"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport SwabPetEar from \"./components/swabPetEar\";\nimport ExperimentalPage from \"./components/experimental\";\nimport TimerPage from \"./components/timer\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport SelectPatient from '../../assets/img/SelectPatient.png'\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setQsmConnectStatus,\n  setQsmPart\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\nimport Result from \"./components/result\";\n\n\n// const ipcRenderer = window.require(\"electron\").ipcRenderer;\nlet ipcRenderer = window.electron.ipcRenderer;\nconst SDK = require(\"qsm-otter-sdk\");\n\nconst { Content, Header } = Layout;\nconst OtterEQPage = ({ petMessage, hardwareMessage, bodyHeight, setQsmConnectStatus, setQsmPart }) => {\n  const [cutPageType, setCutPageType] = useState('linkPage');\n  const [qsmConStatus, setQsmConStatus] = useState('linkPage');\n  const [qsmPortName, setQsmPortName] = useState('')\n  const changePage = () => {\n    if (qsmConStatus === 'connected')\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        // return <Result cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n          return <SwabPetEar cutPageType={getCutPageType} />;\n        case \"experimentalPage\":\n          return <ExperimentalPage cutPageType={getCutPageType} />;\n        case \"timerPage\":\n          return <TimerPage cutPageType={getCutPageType} />;\n        case \"result\":\n          return <Result cutPageType={getCutPageType} />;\n        default:\n          break;\n      } else {\n      switch (cutPageType) {\n        case \"linkPage\":\n          return <LinkEquipment cutPageType={getCutPageType} />;\n        case \"swabPetEarPage\":\n        case \"experimentalPage\":\n        case \"timerPage\":\n          return <LinkEquipment cutPageType={getCutPageType} isNext={true} />;\n        default:\n          break;\n      }\n    }\n  };\n\n  const getCutPageType = (type) => {\n    console.log('type: ', type);\n    if (!_.isEmpty(type)) {\n      setCutPageType(type);\n    }\n  }\n\n  //查看是否有QSM设备插入\n  const readQSMConnectionStatus = async () => {\n    try {\n      const pairInstrument = await SDK.pairInstrument()\n      console.log(\"🚀 ~ file: index.jsx ~ line 69 ~ readQSMConnectionStatus ~ pairInstrument\", pairInstrument)\n      setQsmPart(pairInstrument)\n    } catch (error) {\n      console.log('error', error);\n    }\n\n    setTimeout(async () => {\n      const connectionStatus = await SDK.readConnectionStatus()\n\n      let a = typeof (connectionStatus)\n      console.log('插入情况', connectionStatus, a);\n      if (typeof (connectionStatus) === 'boolean') {\n        let status = connectionStatus ? 'connected' : 'disconnected'\n        setQsmConnectStatus(status)\n        setQsmConStatus(status)\n      }\n    }, 500);\n  }\n\n  /**\n   * @dec 从main.js传过来的usb插拔事件\n   * @param {*} e\n   * @param {*} data 值为true 代表插入设备，false为拔掉设备\n   */\n  const usbDetect = async (e, data) => {\n    // if (data) { // readQSMConnectionStatus()\n    //   readQSMConnectionStatus()\n    // } else {\n    //   const connectionStatus = await SDK.readConnectionStatus()\n\n    //   let a = typeof (connectionStatus)\n    //   console.log('插入情况', connectionStatus, a);\n    //   if (typeof (connectionStatus) === 'boolean') {\n    //     let status = connectionStatus ? 'connected' : 'disconnected'\n    //     setQsmConnectStatus(status)setQsmPart\n    //     setQsmConStatus(status)\n    //   }\n    // }\n\n  }\n  let deviceStatus = null\n  const conectstatus = async () => {\n    deviceStatus = await SDK.readConnectionStatus()\n    console.log('connect', deviceStatus)\n    if (typeof (deviceStatus) === 'boolean') {\n      let status = deviceStatus ? 'connected' : 'disconnected'\n      setQsmConnectStatus(status)\n      setQsmConStatus(status)\n    }\n  }\n  const getQsmPortName = (e, data) => {\n    setQsmPart(data)\n    setQsmPortName(data)\n  }\n\n  useEffect(() => {\n    setCutPageType('linkPage');\n    return (() => { })\n\n  }, [petMessage.petId])\n\n  useEffect(() => {\n    console.log('连接监听');\n    navigator.serial.addEventListener(\"connect\", conectstatus);\n    navigator.serial.addEventListener(\"disconnect\", conectstatus);\n    return () => {\n      navigator.serial.removeEventListener(\"connect\", conectstatus);\n      navigator.serial.removeEventListener(\"disconnect\", conectstatus);\n    }\n  }, [])\n\n  // useEffect(() => {\n  //   ipcRenderer.on('qsmPortName', getQsmPortName);\n  //   return () => { ipcRenderer.removeListener(\"qsmPortName\", getQsmPortName); };\n\n  // }, [])\n\n\n\n\n  //监听usb的插拔\n  useEffect(() => {\n    ipcRenderer.on(\"usbDetect\", usbDetect);\n    return () => {\n      ipcRenderer.removeListener(\"usbDetect\", usbDetect);\n    }\n  }, [])\n  //初始化获取设备是否插入\n  useEffect(() => {\n    readQSMConnectionStatus()\n    message.destroy();\n  }, [])\n\n\n  return (\n    <Layout className=\"ottterEQBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100, flexDirection: 'column' }}>\n          <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className=\"otterEQcontent\">\n          {changePage()}\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nOtterEQPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmConnectStatus,\n    setQsmPart\n  }\n)(OtterEQPage);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",
    [
        "901",
        "902",
        "903",
        "904",
        "905",
        "906"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Avatar,\n  Button,\n  Card,\n  Space,\n  message,\n  Input,\n  Modal,\n} from \"antd\";\nimport {\n  CheckCircleFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport {\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Meta } = Card;\nconst { confirm } = Modal;\nconst CombineScales = ({\n  petMessage,\n  hardwareMessage,\n  userMessage,\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n}) => {\n  let { hardwareList } = hardwareMessage;\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\n  const [confirmType, setConfirmType] = useState(false); //确认选择\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\n\n  //点击卡片选择效果\n  const onClick = (index, data) => {\n    console.log(data);\n    let changeClassName = document.getElementById(index).classList;\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\n    let cardClassNametype = document\n      .getElementById(index)\n      .classList.contains(\"cardBoxClick\");\n    cardClassNametype\n      ? changeClassName.remove(\"cardBoxClick\")\n      : changeClassName.add(\"cardBoxClick\");\n    cardClassNametype\n      ? (iconClassName.style.display = \"none\")\n      : (iconClassName.style.display = \"\");\n    let oldData = checkHardwareList;\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\n  };\n  //确认选择两个体重秤\n  const onChangeScales = () => {\n    if (_.size(checkHardwareList) > 1) {\n      setConfirmType(true);\n    } else {\n      message.error({\n        content: \"Please choose more than two scales\",\n        style: {\n          marginTop: \"20vh\",\n        },\n      });\n    }\n  };\n  //保存用户更改的名字\n  const saveChangeName = (e) => {\n    setSaveName(e.target.value);\n  };\n\n  //跳转准备测量\n  const startMeasuring = () => {\n    confirm({\n      title: \"Are you sure to incorporate the body fat scale?\",\n      icon: <ExclamationCircleOutlined />,\n      style: {\n        marginTop: \"20vh\",\n      },\n      width: 480,\n      onOk() {\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\n        let newData = {\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\n          mac: mac,\n          deviceType: \"biggie\",\n          examRoom: \"\",\n        };\n        let newHardwareList = hardwareList;\n        newHardwareList[1].devices.push({ ...newData });\n        selectHardwareList(newHardwareList);\n        selectHardwareInfoFun(newData);\n        setMenuNum(\"1\");\n      },\n    });\n  };\n\n  useEffect(() => {\n    let newData = [];\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\n      if (item.mac.indexOf(\"/\") === -1) {\n        newData.push(item);\n      }\n    });\n    setBiggieList(newData);\n    return () => { };\n  }, []);\n\n  return (\n    <>\n      <Layout className=\"mergePage\">\n        <Header className=\"mergeHeaderBox\">\n          <span className=\"headerTitle\">\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\n          </span>\n        </Header>\n        <Content className=\"combineContentBox\">\n          <div>\n            <div className=\"tipTitleBox\">\n              {!confirmType ? (\n                <span>\n                  Select the scales you'd\n                  <br />\n                  like to combine\n                </span>\n              ) : (\n                <span>\n                  These two scales are now combined.\n                  <br />\n                  Please give this combination a name\n                </span>\n              )}\n            </div>\n            {confirmType ? (\n              <div className=\"asOneCardBox\">\n                <Space>\n                  {_.map(checkHardwareList, (item, index) => {\n                    return (\n                      <Card className=\"asOneCard\">\n                        <Meta\n                          avatar={<Avatar src={scaleImage} size={53} />}\n                          description={\n                            <div style={{ display: \"grid\" }}>\n                              <span>Device Name:{item.name}</span>\n                              <span>\n                                {item.deviceType === \"biggie\"\n                                  ? \"Biggie Pro Scale\"\n                                  : \"Biggie Home Scale\"}\n                              </span>\n                              <span>SN:{item.mac}</span>\n                            </div>\n                          }\n                        />\n                      </Card>\n                    );\n                  })}\n                </Space>\n                <div className=\"acOneImageBox\">\n                  <img src={combinedscales} />\n                </div>\n              </div>\n            ) : (\n              <div className=\"selectScalesBox\">\n                <div>\n                  {_.map(biggieList, (item, index) => {\n                    return (\n                      <Card\n                        className=\"cardBox\"\n                        hoverable\n                        onClick={() => onClick(`${index}`, item)}\n                        id={`${index}`}\n                        key={index}\n                      >\n                        <div className=\"cardBodyBox\">\n                          <Meta\n                            avatar={<Avatar src={scaleImage} size={53} />}\n                            description={\n                              <div style={{ display: \"grid\" }}>\n                                <span>Device Name:{item.name}</span>\n                                <span>\n                                  {item.deviceType === \"biggie\"\n                                    ? \"Biggie Pro Scale\"\n                                    : \"Biggie Home Scale\"}\n                                </span>\n                                <span>SN:{item.mac}</span>\n                              </div>\n                            }\n                          />\n                          <CheckCircleFilled\n                            id={`${\"icon\" + index}`}\n                            style={{\n                              color: \"#5cbbe0\",\n                              fontSize: \"20px\",\n                              display: \"none\",\n                            }}\n                          />\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            {confirmType ? (\n              <>\n                <div className=\"inputBox\">\n                  <Input\n                    placeholder=\"Combined Scale Name\"\n                    className=\"inputName\"\n                    maxLength={25}\n                    onChange={saveChangeName}\n                  />\n                </div>\n                <div className=\"scalesBtnBox\">\n                  <Button\n                    type=\"primary\"\n                    className=\"scalesBtn\"\n                    shape=\"round\"\n                    onClick={() => startMeasuring()}\n                  >\n                    Save & Start Measuring\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <Space className=\"scalesBtnBox\">\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => setMenuNum(\"AddDevice\")}\n                >\n                  Add New Scale\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => onChangeScales()}\n                >\n                  Combine Scales\n                </Button>\n              </Space>\n            )}\n          </div>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    userMessage: state.userReduce,\n  }),\n  {\n    setMenuNum,\n    selectHardwareInfoFun,\n    selectHardwareList,\n  }\n)(CombineScales);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",
    [
        "907",
        "908",
        "909",
        "910",
        "911",
        "912"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",
    [
        "913",
        "914",
        "915",
        "916",
        "917"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx",
    [
        "918",
        "919",
        "920",
        "921"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",
    [
        "922",
        "923",
        "924",
        "925",
        "926",
        "927",
        "928",
        "929",
        "930",
        "931",
        "932",
        "933",
        "934",
        "935",
        "936",
        "937",
        "938",
        "939",
        "940",
        "941",
        "942",
        "943",
        "944",
        "945",
        "946",
        "947",
        "948",
        "949",
        "950",
        "951",
        "952",
        "953",
        "954",
        "955",
        "956",
        "957"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",
    [
        "958"
    ],
    "import React, { useState, useEffect } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/LinkEquipment\";\nimport ScanPet from \"./components/scanPet\";\nimport CalculationResult from \"./components/calculationResult\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\n\nimport \"./index.less\";\n\nconst ScanPage = ({ petMessage, hardwareMessage, bodyHeight, }) => {\n  let { petId, isWalkIn } = petMessage;\n  const [calculationResultType, setCalculationResultType] = useState(false);//切换计算结果界面\n  const [measureData, setMeasureData] = useState({});//测量的值\n\n\n  return (\n    <>\n      <Layout className=\"scanHomeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {\n          calculationResultType ?\n            (\n              <CalculationResult type={setCalculationResultType} getMeasureData={measureData} />\n            ) :\n            (\n              _.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet type={setCalculationResultType} setMeasureData={setMeasureData} />\n            )\n        }\n\n      </Layout>\n    </>\n  );\n};\n\nScanPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(ScanPage);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",
    [
        "959",
        "960",
        "961",
        "962",
        "963",
        "964",
        "965"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\qsmAction.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\connectWorkplace\\components\\Integration.jsx",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",
    [
        "966",
        "967",
        "968",
        "969",
        "970",
        "971",
        "972",
        "973",
        "974"
    ],
    "import React, { useState, useEffect } from 'react'\r\nimport {\r\n  Menu,\r\n  Popover,\r\n  Button,\r\n  Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\nimport './phoneBook.less'\r\nimport { px } from '../px';\r\n/**\r\n *\r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns\r\n */\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n  const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n  const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n  const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n  const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n  const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n  const _phoneList = () => {\r\n    let option = phoneList.map((item, index) => {\r\n      let data = item.data\r\n      let option1 = data.map((value, index1) => {\r\n        return (\r\n          <li\r\n            key={`option1${index1}`}\r\n            onClick={() => {\r\n              setSelectBreed(value.petSpeciesBreedId)\r\n              selectFun(value)\r\n            }}>\r\n            {value.name}\r\n            {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n          </li>\r\n        )\r\n      })\r\n      return (\r\n        <div className=\"phoneBody\">\r\n          <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n          <ul>\r\n            {option1}\r\n          </ul>\r\n        </div>\r\n      )\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const _letterList = () => {\r\n\r\n    let option = letterList.map((item, index) => {\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n\r\n          style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n          <a\r\n\r\n            onClick={() => {\r\n              litterClick(item)\r\n            }}\r\n          >{item}</a>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <ul className=\"letterUL\">\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n  const litterClick = (anchorName) => {\r\n    // console.log(anchorName);\r\n    if (anchorName) {\r\n      // 找到锚点\r\n      let anchorElement = document.getElementById(anchorName);\r\n      // console.log(anchorElement);\r\n      // 如果对应id的锚点存在，就跳转到锚点\r\n      if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n    }\r\n    // e.preventDefault();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (confirmSelectBreed !== -1) {\r\n      setSelectBreed(confirmSelectBreed)\r\n    }\r\n  }, [confirmSelectBreed]);\r\n\r\n  useEffect(() => {\r\n    let test = []\r\n    listDate.forEach((item, index) => {\r\n      let data = {\r\n        name: item.breedName,\r\n        hidden: false,\r\n        petSpeciesBreedId: item.petSpeciesBreedId\r\n      }\r\n      test.push(data)\r\n    })\r\n    //获取联系人列表\r\n    let list = test;\r\n    let sections = [], letterArr = [];\r\n    // 右侧字母栏数据处理\r\n    list.forEach((item, index) => {\r\n      letterArr.push(pinyin(item.name.substring(0, 1), {\r\n        style: pinyin.STYLE_FIRST_LETTER,\r\n      })[0][0].toUpperCase());\r\n\r\n      letterArr = [...new Set(letterArr)].sort();\r\n    });\r\n    // 分组数据处理\r\n    letterArr.forEach((item, index) => {\r\n      sections.push({\r\n        title: item,\r\n        data: []\r\n      })\r\n    });\r\n    list.forEach(item => {\r\n      let listItem = item;\r\n      sections.forEach(item => {\r\n        let first = listItem.name.substring(0, 1);\r\n        let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n        if (item.title == test) {\r\n          item.data.push({\r\n            firstName: first,\r\n            name: listItem.name,\r\n            hidden: listItem.hidden,\r\n            petSpeciesBreedId: listItem.petSpeciesBreedId\r\n          });\r\n        }\r\n      })\r\n    });\r\n    setPhoneList(sections)\r\n    setPhoneListCopy(sections)\r\n    setLetterList(letterArr)\r\n    setLetterListCopy(letterArr)\r\n  }, [listDate]);\r\n\r\n  useEffect(() => {\r\n    if (letterListCopy.length > 0) {\r\n      let allData = phoneListCopy\r\n      let newArr = []\r\n      let arr = []\r\n      if (searchText.length > 0) {\r\n        allData.map((item, i) => {\r\n          item.data.forEach((data, index) => {\r\n            let dataName = data.name ? data.name.toUpperCase() : ''\r\n            let keyData = searchText ? searchText.toUpperCase() : ''\r\n            if (dataName.search(keyData) !== -1) {\r\n              newArr.push(data)\r\n            }\r\n          })\r\n          if (newArr.length != 0) {\r\n            let oneGreep = {\r\n              title: item.title,\r\n              data: newArr\r\n            }\r\n            arr.push(oneGreep)\r\n          }\r\n          newArr = []\r\n        })\r\n        let letterArr = []\r\n        arr.forEach((item, index) => {\r\n          letterArr.push(item.title)\r\n        })\r\n        setPhoneList(arr)\r\n        setLetterList(letterArr)\r\n      } else {\r\n        setPhoneList(phoneListCopy)\r\n        setLetterList(letterListCopy)\r\n      }\r\n    }\r\n  }, [searchText]);\r\n\r\n  return (\r\n    <div id=\"phoneBook\">\r\n      <div className=\"phone\">\r\n        {_phoneList()}\r\n      </div>\r\n      <div className=\"litter\">\r\n        {_letterList()}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n  listDate: PropTypes.array,\r\n  selectFun: PropTypes.func,\r\n  searchText: PropTypes.string,\r\n  confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n  listDate: [],\r\n  selectFun: () => { },\r\n  searchText: '',\r\n  confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvet\\index.js",
    [
        "975",
        "976",
        "977"
    ],
    "/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nconst baseURL = 'https://api2.vetspire.com';\r\n// const baseURL = '/v1';\r\n\r\n\r\n\r\n\r\nexport const graphql = (params, token) => {\r\n    return postJson(`${baseURL}/graphql`, params, { Authorization: token })\r\n}\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\index.jsx",
    [
        "978"
    ],
    "import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Button\r\n} from \"antd\"\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { accessArr, subAdvantage } from './components/accessArr';\r\nimport close from './../../assets/img/close-white.png'\r\nimport './index.less'\r\nimport { list } from '../../api';\r\n\r\n\r\nconst BuySub = ({ cancleFun, buyFun, loadings }) => {\r\n\r\n    useEffect(() => {\r\n        list()\r\n            .then(res => {\r\n                console.log(\"🚀 ~ file: index.jsx ~ line 23 ~ useEffect ~ res\", res)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }, [])\r\n\r\n    const listUI = () => {\r\n        let options = accessArr.map((item, index) => {\r\n\r\n            return (\r\n                <li key={`1${index}`}>\r\n                    <div>\r\n                        <div className=\"title1\" style={{ backgroundColor: item.color }}>{item.title1}</div>\r\n                        <div className=\"title\">{item.title}</div>\r\n                        <div className=\"h2\">{item.h2}</div>\r\n                        <div className=\"h3\">{item.h3}</div>\r\n                        <Button type=\"primary\" shape=\"round\" className='buyBtn'\r\n                            onClick={() => {\r\n                                buyFun(item)\r\n                            }}\r\n                            loading={loadings[index]}\r\n                        >Buy Bow</Button>\r\n                    </div>\r\n                </li>\r\n            )\r\n        })\r\n        return (<ul>\r\n            {options}\r\n        </ul>)\r\n    }\r\n    const advantage = () => {\r\n        let options = subAdvantage.map((item1, index) => {\r\n            let option = item1.map((item, index1) => {\r\n                return (\r\n                    <li key={`${index}${index1}`}>\r\n                        <div className=\"itemone\">\r\n                            <div className=\"icon\">\r\n                                <img src={item.icon} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"text\">{item.text}</div>\r\n                        </div>\r\n                    </li>\r\n                )\r\n            })\r\n            return (\r\n                <ul className={`ul${index}`}>\r\n                    {option}\r\n                </ul>\r\n            )\r\n        })\r\n        return options\r\n    }\r\n\r\n    return (\r\n        <div id='buySub'>\r\n            <div className=\"cencerIcon\">\r\n                <div onClick={cancleFun}>\r\n                    <img src={close} alt=\"\" />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"buySubTitle\">Select the option that best describes your needs</div>\r\n            <div className=\"subList\">\r\n                {listUI()}\r\n            </div>\r\n            <div className=\"premium\">Premium Features</div>\r\n            <div className=\"subAdvantage\">\r\n                {advantage()}\r\n            </div>\r\n            {/* <div className=\"bottom\">\r\n                <div>\r\n\r\n                </div>\r\n                <div\r\n                    className=\"cancel\"\r\n                    onClick={cancleFun}\r\n                >cancel</div>\r\n            </div> */}\r\n\r\n        </div>\r\n    )\r\n}\r\nBuySub.propTypes = {\r\n    cancleFun: PropTypes.func,\r\n    buyFun: PropTypes.func,\r\n    loadings: PropTypes.array\r\n};\r\nBuySub.defaultProps = {\r\n    cancleFun: () => { },\r\n    buyFun: () => { },\r\n    loadings: [false, false, false]\r\n}\r\n\r\nexport default BuySub;",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\exam.js",
    [
        "979"
    ],
    "/**\n * @file exam.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/exam`\n\n\n/**\n * @dec 温度保存和体重保存\n * @param {*} params\n * @returns\n */\nexport const addClamantPetExam = (params) => {\n  return postJson(`${baseURL}/addClamantPetExam`, params)\n}\n\n/**\n * @dec 根据历史记录id获取全部的过程数据\n * @param {str} examId 历史记录id\n * @returns\n */\nexport const getClinicalDataByExamId = (examId) => {\n  return get(`${baseURL}/getClinicalDataByExamId/${examId}`, \"\")\n}\n/**\n * @dec 获取宠物上一次测量体重，体长，温度的结果和时间\n * @param {*} petId\n * @returns\n */\nexport const getRecentPetData = (petId) => {\n  return get(`${baseURL}/getRecentPetData?petId=${petId}`, \"\");\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\systemType.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\qsmType.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx",
    [
        "980",
        "981",
        "982",
        "983"
    ],
    "import React, { } from 'react'\nimport PropTypes from 'prop-types';\nimport { px, mTop } from '../../../utils/px'\nimport cir from '../../../assets/images/cir.png'\nimport xia from '../../../assets/img/xia.png'\nimport './biggie.less'\n/**\n *\n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * @returns\n */\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ fontWeight: '800' }}>{weight}</div>\n          <div className='cTTextUnit'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText'>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n      <div className='biggiefoot'>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n          </div>\n        }\n        <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10), height: '28px' }}>{(impedance && impedance > 0) ? `Impedance ${impedance} Ohms` : ''}</div>\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",
    [
        "984",
        "985",
        "986",
        "987",
        "988",
        "989",
        "990",
        "991",
        "992",
        "993",
        "994",
        "995",
        "996",
        "997"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport { Image, Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\nimport connectScale from \"../../../assets/img/connectScale.png\"\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, biggieConnectStatus, biggieBodyFat }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [saveNum, setSaveNum] = useState(0);\n  return (\n    <>\n      <div className={\"linkBox\"}>\n        <div className=\"startBox\">\n          {\n            biggieConnectStatus == 'disconnected' ? (\n              <>\n                <img className=\"scaleImg\" src={connectScale}></img>\n                <p className=\"startTitle\">Connect scale to start</p>\n              </>\n\n            ) : biggieConnectStatus == 'connected' ?  (\n              <>\n                <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p>\n              </>\n            ) : ''\n          }\n\n              {/* <img src={biggieonscale}></img>\n                <p className=\"startTitle\">Ready, place pet onto scale</p> */}\n\n\n        </div>\n      </div>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    biggieConnectStatus: state.hardwareReduce.biggieConnectStatus,\n    biggieBodyFat: state.hardwareReduce.biggieBodyFat\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",
    [
        "998",
        "999",
        "1000",
        "1001",
        "1002",
        "1003",
        "1004",
        "1005",
        "1006",
        "1007",
        "1008",
        "1009",
        "1010",
        "1011",
        "1012",
        "1013",
        "1014",
        "1015",
        "1016"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\calculationResult.jsx",
    [
        "1017",
        "1018",
        "1019",
        "1020",
        "1021",
        "1022"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Layout,\n  Modal,\n  message,\n} from \"antd\";\nimport { ExclamationCircleOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { updatePetInfo1 } from \"../../../api\";\nimport { petPicture, calculateAge, catLeanBodyMass, catFatMass, dogLeanBodyMass, dogFatMass, dogBodyFatPercentage } from '../../../utils/commonFun';\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n} from \"../../../store/actions\";\nimport { useUpdateEffect } from 'ahooks';\nimport _ from \"lodash\";\n\nimport \"./calculationResult.less\";\n\nconst { Content } = Layout;\nconst CalculationResult = ({\n  type,\n  petMessage,\n  petDetailInfoFun,\n  ruleMessage,\n  getMeasureData,\n  setRulerUnitFun\n}) => {\n  let { petId, petSpeciesBreedId, weight, birthday } = petMessage;\n  let { rulerUnit } = ruleMessage;\n  let {\n    headValue,\n    neckValue,\n    upperValue,\n    lowerValue,\n    torsoValue,\n    bodyValue,\n    hindlimbValue,\n    forelimbLengthValue,\n    forelimbCircumferenceValue,\n  } = getMeasureData;\n  let storage = window.localStorage;\n  //重新测量\n  const onAgainMeasure = () => {\n    type(false);\n  }\n  //用户点击保存\n  const onSave = () => {\n    // Modal.confirm({\n    //   title: \"Confirm\",\n    //   icon: <ExclamationCircleOutlined />,\n    //   content: \"Whether To Save Data\",\n    //   top: \"40vh\",\n    //   onOk: saveData,\n    // });\n    saveData()\n  }\n  //in-cm转换\n  const in_cm = (val) => {\n    if (val) {\n      if (rulerUnit === \"in\") {\n        return parseFloat((parseFloat(val) * 2.54).toFixed(1));\n      } else {\n        return parseFloat(val);\n      }\n    } else {\n      return 0;\n    }\n  }\n  //保存数据\n  const saveData = () => {\n    let prams = {\n      l2rarmDistance: in_cm(getMeasureData.bodyValue) || null,\n      lowerTorsoCircumference: in_cm(getMeasureData.lowerValue) || null,\n      upperTorsoCircumference: in_cm(getMeasureData.upperValue) || null,\n      neckCircumference: in_cm(getMeasureData.neckValue) || null,\n      h2tLength: in_cm(getMeasureData.headValue) || null,\n      torsoLength: in_cm(getMeasureData.torsoValue) || null,\n      hindLimbLength: in_cm(getMeasureData.hindlimbValue) || null,\n      foreLimbLength: in_cm(getMeasureData.forelimbLengthValue) || null,\n      foreLimbCircumference: in_cm(getMeasureData.forelimbCircumferenceValue) || null,\n    };\n    updatePetInfo1(storage.userId, petId, prams)\n      .then((res) => {\n        if (res.flag) {\n          petDetailInfoFun({\n            ...petMessage,\n            ...prams,\n          });\n          message.success(\"Uploaded successfully\");\n          type(false);\n        } else {\n          message.error(\"upload failed\");\n        }\n      })\n      .catch((err) => {\n        message.error(\"update failed\");\n      });\n  };\n  //获取LeanBodyMass\n  const getLeanBodyMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catLeanBodyMass(headValue, in_cm(hindlimbValue), in_cm(forelimbCircumferenceValue), in_cm(forelimbLengthValue), in_cm(bodyValue), in_cm(upperValue)), 2);\n      case 'dog':\n        return _.round(dogLeanBodyMass(weight * 2.2046, calculateAge(birthday), in_cm(headValue), in_cm(forelimbLengthValue), in_cm(hindlimbValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取FatMass\n  const getFatMass = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return _.round(catFatMass(weight * 2.2046, in_cm(headValue), in_cm(forelimbLengthValue), in_cm(forelimbCircumferenceValue)), 2);\n      case 'dog':\n        return _.round(dogFatMass(weight * 2.2046, in_cm(hindlimbValue), in_cm(upperValue), in_cm(headValue)), 2);\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n  //获取BodyFatPercent\n  const getBodyFatPercent = () => {\n    switch (petPicture(petSpeciesBreedId)) {\n      case 'cat':\n        return;\n      case 'dog':\n        return _.round(dogBodyFatPercentage(in_cm(upperValue), in_cm(lowerValue), in_cm(hindlimbValue), in_cm(headValue)), 2);\n\n      default:\n        // message.warning('The pet is of unknown breed');\n        return;\n    }\n  }\n\n  useUpdateEffect(() => {\n    type(false);\n    return () => { };\n  }, [petId]);\n\n  return (\n    <Content className=\"calculationResultContentBox\">\n      <div className=\"localityGroup\">\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getLeanBodyMass() > 0 ? `${getLeanBodyMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lean Body Mass</p>\n          </div>\n          <DownOutlined />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getBodyFatPercent() > 0 ? `${getBodyFatPercent()}%` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Body Fat Percent</p>\n          </div>\n          <DownOutlined />\n        </div>\n        <div className=\"localityBox\">\n          <div className=\"circleBox\">\n            <div className=\"dataBox\">\n              <p>{getFatMass() > 0 ? `${getFatMass()}g` : '—'}</p>\n            </div>\n          </div>\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Fat Mass</p>\n          </div>\n          <DownOutlined />\n        </div>\n      </div>\n      <div className=\"calculateBtnBox\">\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onAgainMeasure()}\n        >\n          Measure Again\n        </Button>\n        <Button\n          type=\"primary\"\n          shape=\"round\"\n          size=\"large\"\n          className=\"calculateBtn\"\n          onClick={() => onSave()}\n        >\n          Save\n        </Button>\n      </div>\n    </Content>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n  }\n)(CalculationResult);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",
    [
        "1023",
        "1024",
        "1025",
        "1026",
        "1027",
        "1028"
    ],
    "import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport { Image, Layout } from 'antd';\nimport { connect } from 'react-redux';\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun\n} from '../../../store/actions';\nimport SelectPatient from '../../../assets/img/SelectPatient.png'\nimport _ from 'lodash';\nimport './LinkEquipment.less';\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n    let { mellaConnectStatus } = hardwareMessage;\n    return (\n\n        <Content className={\"contentBox\"}>\n            <div className='chackPatientBox' style={{ flexDirection: 'column' }}>\n                <img style={{ width: '500px' }} src={SelectPatient} alt=\"\" />\n                <p className='chackPatientTitle'>Select a patient</p>\n            </div>\n        </Content>\n\n    );\n}\nexport default connect(\n    state => ({\n        petMessage: state.petReduce.petDetailInfo,\n        hardwareMessage: state.hardwareReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setMellaConnectStatusFun,\n        setMellaMeasureValueFun,\n        setMellaPredictValueFun,\n        setMellaMeasurePartFun\n    }\n)(LinkEquipment);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",
    [
        "1029",
        "1030",
        "1031",
        "1032",
        "1033",
        "1034",
        "1035",
        "1036",
        "1037",
        "1038",
        "1039",
        "1040",
        "1041",
        "1042",
        "1043",
        "1044",
        "1045",
        "1046",
        "1047",
        "1048",
        "1049",
        "1050",
        "1051",
        "1052",
        "1053",
        "1054",
        "1055",
        "1056",
        "1057",
        "1058",
        "1059",
        "1060",
        "1061",
        "1062",
        "1063",
        "1064",
        "1065",
        "1066",
        "1067",
        "1068",
        "1069",
        "1070",
        "1071",
        "1072",
        "1073",
        "1074",
        "1075",
        "1076",
        "1077",
        "1078",
        "1079",
        "1080",
        "1081",
        "1082",
        "1083",
        "1084"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport {\n  Layout,\n  Radio,\n  Input,\n  Space,\n  Button,\n  message,\n  Modal,\n  Spin,\n} from \"antd\";\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons';\n\n\nimport dogHead from \"./../../../assets/img/dogHead.png\";\nimport dogNeck from \"./../../../assets/img/dogNeck.png\";\nimport dogUpper from \"./../../../assets/img/dogUpper.png\";\nimport dogLower from \"./../../../assets/img/dogLower.png\";\nimport dogTorso from \"./../../../assets/img/dogTorso.png\";\nimport dogBody from \"./../../../assets/img/dogBody.png\";\nimport dogHindlimb from \"./../../../assets/img/dogHindlimb.png\";\nimport dogForelimbLength from \"./../../../assets/img/dogForelimbLength.png\";\nimport dogForelimbCircumference from \"./../../../assets/img/dogForelimbCircumference.png\";\n\nimport dogHead_D from \"./../../../assets/img/dogHead_D.png\";\nimport dogNeck_D from \"./../../../assets/img/dogNeck_D.png\";\nimport dogUpper_D from \"./../../../assets/img/dogUpper_D.png\";\nimport dogLower_D from \"./../../../assets/img/dogLower_D.png\";\nimport dogTorso_D from \"./../../../assets/img/dogTorso_D.png\";\nimport dogBody_D from \"./../../../assets/img/dogBody_D.png\";\nimport dogHindlimb_D from \"./../../../assets/img/dogHindlimb_D.png\";\nimport dogForelimbLength_D from \"./../../../assets/img/dogForelimbLength_D.png\";\nimport dogForelimbCircumference_D from \"./../../../assets/img/dogForelimbCircumference_D.png\";\n\nimport catHead from \"./../../../assets/img/catHead.png\";\nimport catNeck from \"./../../../assets/img/catNeck.png\";\nimport catUpper from \"./../../../assets/img/catUpper.png\";\nimport catLower from \"./../../../assets/img/catLower.png\";\nimport catTorso from \"./../../../assets/img/catTorso.png\";\nimport catBody from \"./../../../assets/img/catBody.png\";\nimport catHindlimb from \"./../../../assets/img/catHindlimb.png\";\nimport catForelimbLength from \"./../../../assets/img/catForelimbLength.png\";\nimport catForelimbCircumference from \"./../../../assets/img/catForelimbCircumference.png\";\n\nimport catHead_D from \"./../../../assets/img/catHead_D.png\";\nimport catNeck_D from \"./../../../assets/img/catNeck_D.png\";\nimport catUpper_D from \"./../../../assets/img/catUpper_D.png\";\nimport catLower_D from \"./../../../assets/img/catLower_D.png\";\nimport catTorso_D from \"./../../../assets/img/catTorso_D.png\";\nimport catBody_D from \"./../../../assets/img/catBody_D.png\";\nimport catHindlimb_D from \"./../../../assets/img/catHindlimb_D.png\";\nimport catForelimbLength_D from \"./../../../assets/img/catForelimbLength_D.png\";\nimport catForelimbCircumference_D from \"./../../../assets/img/catForelimbCircumference_D.png\";\n\nimport amplification from './../../../assets/img/amplification.png';\nimport shrink from './../../../assets/img/shrink.png';\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n  setSelectHardwareType\n} from \"../../../store/actions\";\n\nimport { KgtoLb } from '../../../utils/commonFun';\nimport { px } from \"../../../utils/px\";\nimport NumericInput from \"./numericInput\";\nimport {\n  getRecentPetData\n} from \"./../../../api\";\n\nimport _ from \"lodash\";\nimport moment from \"moment/moment\";\nimport { useGetState } from 'ahooks';\n\nimport \"./scanPet.less\";\n\nconst { Content } = Layout;\nconst ScanPet = ({\n  petMessage,\n  ruleMessage,\n  setRulerUnitFun,\n  type,\n  setMeasureData,\n  setSelectHardwareType,\n}) => {\n  let history = useHistory();\n  let {\n    petSpeciesBreedId,\n    petId,\n    weight,\n    torsoLength,\n    l2rarmDistance,\n    upperTorsoCircumference,\n    lowerTorsoCircumference,\n    h2tLength,\n    neckCircumference,\n    hindLimbLength,\n    foreLimbLength,\n    foreLimbCircumference\n  } = petMessage;\n  let {\n    rulerMeasureValue,\n    rulerConfirmCount,\n    rulerUnit,\n    rulerConnectStatus,\n    selectHardwareInfo,\n    receiveBroadcastHardwareInfo,\n    biggieUnit\n  } = ruleMessage;\n  const [radioValue, setRadioValue] = useState(\"in\");//单位\n  const [inputIndex, setInputIndex] = useState(-1);//输入框下标\n  const [missInputIndex, setMissInputIndex] = useState(0);//输入框下标\n  const [carouselIndex, setCarouselIndex] = useState(1);//小小圆点下标\n\n  const [headValue, setHeadValue] = useState(\"\"); //接收输入框的值\n  const [neckValue, setNeckValue] = useState(\"\"); //接收输入框的值\n  const [upperValue, setUpperValue] = useState(\"\"); //接收输入框的值\n  const [lowerValue, setLowerValue] = useState(\"\"); //接收输入框的值\n  const [torsoValue, setTorsoValue] = useState(\"\"); //接收输入框的值\n  const [bodyValue, setBodyValue] = useState(\"\"); //接收输入框的值\n  const [hindlimbValue, setHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [forelimbLengthValue, setForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [forelimbCircumferenceValue, setForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [missHeadValue, setMissHeadValue] = useState(\"\"); //接收输入框的值\n  const [missNeckValue, setMissNeckValue] = useState(\"\"); //接收输入框的值\n  const [missUpperValue, setMissUpperValue] = useState(\"\"); //接收输入框的值\n  const [missLowerValue, setMissLowerValue] = useState(\"\"); //接收输入框的值\n  const [missTorsoValue, setMissTorsoValue] = useState(\"\"); //接收输入框的值\n  const [missBodyValue, setMissBodyValue] = useState(\"\"); //接收输入框的值\n  const [missHindlimbValue, setMissHindlimbValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbLengthValue, setMissForelimbLengthValue] = useState(\"\"); //接收输入框的值\n  const [missForelimbCircumferenceValue, setMissForelimbCircumferenceValue] = useState(\"\"); //接收输入框的值\n\n  const [lastHeadValue, setLastHeadValue] = useState(\"\"); //上一次测量的值\n  const [lastNeckValue, setLastNeckValue] = useState(\"\"); //上一次测量的值\n  const [lastUpperValue, setLastUpperValue] = useState(\"\"); //上一次测量的值\n  const [lastLowerValue, setLastLowerValue] = useState(\"\"); //上一次测量的值\n  const [lastTorsoValue, setLastTorsoValue] = useState(\"\"); //上一次测量的值\n  const [lastBodyValue, setLastBodyValue] = useState(\"\"); //上一次测量的值\n  const [lastHindlimbValue, setLastHindlimbValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbLengthValue, setLastForelimbLengthValue] = useState(\"\"); //上一次测量的值\n  const [lastForelimbCircumferenceValue, setLastForelimbCircumferenceValue] = useState(\"\"); //上一次测量的值\n\n  const [loding, setLoding] = useState(false);//界面加载\n  const [lookType, setLookType] = useState(false);//用户查看局部放大图片\n  const [weightTipVisible, setWeightTipVisible] = useState(false);//体重是否为空的弹窗\n  const [missMeasureVisible, setMissMeasureVisible] = useState(false);//是否有遗漏测量的弹窗\n  const [lastWeightValue, setLastWeightValue] = useState('');//最近一次的体重值\n  const [lastWeightTimeValue, setLastWeightTimeValue] = useState('');//最近一次的体重测量时间\n  const [lastRuleTimeValue, setLastRuleTimeValue] = useState('');//最近一次的尺子测量时间\n\n  let newData = [];\n  let missNewData = [];\n\n  //保存input组，为了选中\n  const inputEl = (data) => {\n    newData.push(data);\n  };\n  //保存遗漏的input组，为了选中\n  const missInputEl = (data) => {\n    missNewData.push(data);\n  }\n  //切换聚焦事件\n  const switchFocus = () => {\n    let num = inputIndex;\n    if (num === 3) {\n      setCarouselIndex(2);\n    }\n    if (num === 7) {\n      setCarouselIndex(3);\n    }\n    if (num < 8) {\n      setInputIndex(num + 1);\n    }\n  };\n  //切换到计算界面，判断测量结果是否有遗漏\n  const finishScan = () => {\n    if (headValue && neckValue && upperValue && lowerValue && torsoValue && bodyValue && hindlimbValue && forelimbLengthValue && forelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue,\n        neckValue: neckValue,\n        upperValue: upperValue,\n        lowerValue: lowerValue,\n        torsoValue: torsoValue,\n        bodyValue: bodyValue,\n        hindlimbValue: hindlimbValue,\n        forelimbLengthValue: forelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue,\n      });\n    } else {\n      setMissHeadValue(headValue);\n      setMissNeckValue(neckValue);\n      setMissUpperValue(upperValue);\n      setMissLowerValue(lowerValue);\n      setMissTorsoValue(torsoValue);\n      setMissBodyValue(bodyValue);\n      setMissHindlimbValue(hindlimbValue);\n      setMissForelimbLengthValue(forelimbLengthValue);\n      setMissForelimbCircumferenceValue(forelimbCircumferenceValue);\n      setMissMeasureVisible(true);\n    }\n  };\n  //判断是猫还是狗还是其他\n  const checkPetType = () => {\n    //0是猫，1是狗，或者petSpeciesBreedId为空判断图片为狗\n    if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n      return 0;\n    } else if (\n      petSpeciesBreedId === 12001 ||\n      _.inRange(petSpeciesBreedId, 136, 456)\n    ) {\n      return 1;\n    } else {\n      return 1;\n    }\n  };\n  //用户点击放大按钮查看局部详情\n  const onLookImage = (type) => {\n    setLookType(type);\n  }\n  //切换整体图片\n  const changeImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return checkPetType() === 1 ? (\n          <img src={dogHead} width='320px' />\n        ) : (\n          <img src={catHead} width='320px' />\n        );\n      case 1:\n        return checkPetType() === 1 ? (\n          <img src={dogNeck} width='320px' />\n        ) : (\n          <img src={catNeck} width='320px' />\n        );\n      case 2:\n        return checkPetType() === 1 ? (\n          <img src={dogUpper} width='320px' />\n        ) : (\n          <img src={catUpper} width='320px' />\n        );\n      case 3:\n        return checkPetType() === 1 ? (\n          <img src={dogLower} width='320px' />\n        ) : (\n          <img src={catLower} width='320px' />\n        );\n      case 4:\n        return checkPetType() === 1 ? (\n          <img src={dogTorso} width='320px' />\n        ) : (\n          <img src={catTorso} width='320px' />\n        );\n      case 5:\n        return checkPetType() === 1 ? (\n          <img src={dogBody} width='320px' />\n        ) : (\n          <img src={catBody} width='320px' />\n        );\n      case 6:\n        return checkPetType() === 1 ? (\n          <img src={dogHindlimb} width='320px' />\n        ) : (\n          <img src={catHindlimb} width='320px' />\n        );\n      case 7:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbLength} width='320px' />\n        ) : (\n          <img src={catForelimbLength} width='320px' />\n        );\n      case 8:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n      default:\n        return checkPetType() === 1 ? (\n          <img src={dogForelimbCircumference} width='320px' />\n        ) : (\n          <img src={catForelimbCircumference} width='320px' />\n        );\n    }\n  };\n  //切换局部放大图片\n  const changeLookImage = () => {\n    switch (inputIndex) {\n      case 0:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Head<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHead_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHead_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 1:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Neck<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogNeck_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catNeck_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 2:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Upper Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogUpper_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catUpper_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 3:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Lower Torso<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogLower_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catLower_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 4:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Torso<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogTorso_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catTorso_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 5:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Full Body<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogBody_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catBody_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 6:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Hindlimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogHindlimb_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catHindlimb_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 7:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Length</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbLength_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbLength_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      case 8:\n        return <div className=\"localityBox\">\n          <div className=\"localityTitleBox\">\n            <p className=\"localityTitle\">Forelimb<br />Circumference</p>\n          </div>\n          {\n            checkPetType() === 1 ?\n              (\n                <img src={dogForelimbCircumference_D} className=\"localityImage\" />\n              ) :\n              (\n                <img src={catForelimbCircumference_D} className=\"localityImage\" />\n              )\n          }\n        </div>;\n      default:\n        return;\n    }\n  }\n  //点击输入框事件\n  const clickInput = (index) => {\n    setInputIndex(index);\n  };\n  //点击遗漏输入框事件\n  const missClickInput = (index) => {\n    setMissInputIndex(index);\n  }\n  //单位转化\n  const changeUnit = (value) => {\n    if (rulerUnit === \"cm\") {\n      return _.round(value * 2.54, 1);\n    } else if (rulerUnit === \"in\") {\n      return _.floor(_.divide(value, 2.54), 2);\n    }\n  };\n  //单选框改变事件\n  const changeRadio = (e) => {\n    setRadioValue(e.target.value);\n    setRulerUnitFun(e.target.value);\n  };\n  //左箭头点击事件\n  const letfClick = () => {\n    if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(1);\n    } else if (inputIndex === 8) {\n      setCarouselIndex(2);\n    }\n\n  }\n  //右箭头点击事件\n  const rightClick = () => {\n    if (_.inRange(inputIndex, 0, 4)) {\n      setCarouselIndex(2);\n    } else if (_.inRange(inputIndex, 4, 8)) {\n      setCarouselIndex(3);\n    }\n  }\n  //切换宠物获取到长度信息,对数据根据界面单位进行换算\n  const petLengthDataConvert = (val) => {\n    if (!val) {\n      return \"\";\n    } else {\n      if (rulerUnit === \"cm\") {\n        return val.toFixed(1);\n      } else {\n        return _.floor(_.divide(val, 2.54), 2);\n      }\n    }\n  };\n  //放大输入框的值\n  const onValue = () => {\n    switch (inputIndex) {\n      case 0:\n        return headValue;\n      case 1:\n        return neckValue;\n      case 2:\n        return upperValue;\n      case 3:\n        return lowerValue;\n      case 4:\n        return torsoValue;\n      case 5:\n        return bodyValue;\n      case 6:\n        return hindlimbValue;\n      case 7:\n        return forelimbLengthValue;\n      case 8:\n        return forelimbCircumferenceValue;\n      default:\n        return headValue;\n    }\n  }\n  //放大输入框的输入事件\n  const onOnChange = () => {\n    switch (inputIndex) {\n      case 0:\n        return setHeadValue;\n      case 1:\n        return setNeckValue;\n      case 2:\n        return setUpperValue;\n      case 3:\n        return setLowerValue;\n      case 4:\n        return setTorsoValue;\n      case 5:\n        return setBodyValue;\n      case 6:\n        return setHindlimbValue;\n      case 7:\n        return setForelimbLengthValue;\n      case 8:\n        return setForelimbCircumferenceValue;\n      default:\n        return setHeadValue;\n    }\n  }\n  //上一次历史数据展示\n  const historyData = () => {\n    switch (carouselIndex) {\n      case 1:\n        return (\n          <Space className=\"historyData\">\n            <p>{lastHeadValue}</p>\n            <p>{lastNeckValue}</p>\n            <p>{lastUpperValue}</p>\n            <p>{lastLowerValue}</p>\n          </Space>\n        );\n      case 2:\n        return <Space className=\"historyData\">\n          <p>{lastTorsoValue}</p>\n          <p>{lastBodyValue}</p>\n          <p>{lastHindlimbValue}</p>\n          <p>{lastForelimbLengthValue}</p>\n        </Space>;\n      case 3:\n        return <Space className=\"historyData\">\n          <p>{lastForelimbCircumferenceValue}</p>\n        </Space>;\n      default:\n        return <Space className=\"historyData\">\n          <p>{lastHeadValue}</p>\n          <p>{lastNeckValue}</p>\n          <p>{lastUpperValue}</p>\n          <p>{lastLowerValue}</p>\n        </Space>;\n    }\n  }\n  //用户忽视体重为空\n  const onCancel = () => {\n    setWeightTipVisible(false);\n  }\n  //用户更新宠物体重信息\n  const updatePetMessage = () => {\n    //跳转到编辑宠物信息页面\n    history.push(\"/page9\");\n  }\n  //用户前往体脂秤界面进行测量体重\n  const goToBiggieScale = () => {\n    setSelectHardwareType('biggie');\n    //跳转到mainBody界面\n    history.push(\"/MainBody\");\n  }\n  //用户完成遗漏的数值填写\n  const saveMiss = () => {\n    if (missHeadValue && missNeckValue && missUpperValue && missLowerValue && missTorsoValue && missBodyValue && missHindlimbValue && missForelimbLengthValue && missForelimbCircumferenceValue) {\n      type(true);\n      setMeasureData({\n        headValue: headValue || missHeadValue,\n        neckValue: neckValue || missNeckValue,\n        upperValue: upperValue || missUpperValue,\n        lowerValue: lowerValue || missLowerValue,\n        torsoValue: torsoValue || missTorsoValue,\n        bodyValue: bodyValue || missBodyValue,\n        hindlimbValue: hindlimbValue || missHindlimbValue,\n        forelimbLengthValue: forelimbLengthValue || missForelimbLengthValue,\n        forelimbCircumferenceValue: forelimbCircumferenceValue || missForelimbCircumferenceValue,\n      });\n    } else {\n      message.warning('Please complete the missing values');\n    }\n\n  }\n  //获取上一次测量的体重和上一次的尺子测量值\n  const getRecentPet = () => {\n    setLoding(true);\n    getRecentPetData(petId)\n      .then((res) => {\n        setLoding(false);\n        if (res.msg === 'success') {\n          if (res.ruler.updateTime) {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLastLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setLastUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setLastNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setLastHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setLastTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setLastHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setLastForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(res.ruler.updateTime);\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(res.ruler.l2rarmDistance));\n            setLowerValue(petLengthDataConvert(res.ruler.lowerTorsoCircumference));\n            setUpperValue(petLengthDataConvert(res.ruler.upperTorsoCircumference));\n            setNeckValue(petLengthDataConvert(res.ruler.neckCircumference));\n            setHeadValue(petLengthDataConvert(res.ruler.h2tLength));\n            setTorsoValue(petLengthDataConvert(res.ruler.torsoLength));\n            setHindlimbValue(petLengthDataConvert(res.ruler.hindLimbLength));\n            setForelimbLengthValue(petLengthDataConvert(res.ruler.foreLimbLength));\n            setForelimbCircumferenceValue(petLengthDataConvert(res.ruler.foreLimbCircumference));\n          } else {\n            //上一次测量尺子历史记录\n            setLastBodyValue(petLengthDataConvert(\"\"));\n            setLastLowerValue(petLengthDataConvert(\"\"));\n            setLastUpperValue(petLengthDataConvert(\"\"));\n            setLastNeckValue(petLengthDataConvert(\"\"));\n            setLastHeadValue(petLengthDataConvert(\"\"));\n            setLastTorsoValue(petLengthDataConvert(\"\"));\n            setLastHindlimbValue(petLengthDataConvert(\"\"));\n            setLastForelimbLengthValue(petLengthDataConvert(\"\"));\n            setLastForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n            //上一次测量尺子的时间\n            setLastRuleTimeValue(\"\");\n            //上一次测量尺子回显到输入框\n            setBodyValue(petLengthDataConvert(\"\"));\n            setLowerValue(petLengthDataConvert(\"\"));\n            setUpperValue(petLengthDataConvert(\"\"));\n            setNeckValue(petLengthDataConvert(\"\"));\n            setHeadValue(petLengthDataConvert(\"\"));\n            setTorsoValue(petLengthDataConvert(\"\"));\n            setHindlimbValue(petLengthDataConvert(\"\"));\n            setForelimbLengthValue(petLengthDataConvert(\"\"));\n            setForelimbCircumferenceValue(petLengthDataConvert(\"\"));\n          }\n          if (res.weight) {\n            setLastWeightValue(biggieUnit === 'kg' ? res.weight.weight : KgtoLb(res.weight.weight));\n            setLastWeightTimeValue(res.weight.createTime);\n          } else {\n            setLastWeightValue('');\n            setLastWeightTimeValue('');\n          }\n        } else {\n          message.error('The latest data cannot be obtained');\n        }\n      })\n      .catch((err) => {\n        setLoding(false);\n        message.error('The latest data cannot be obtained');\n      })\n  }\n  //判断上一次测量的体重是否超过一个月\n  const judgeWightTime = () => {\n    let newTime = moment();\n    let diffTime = newTime.diff(moment(lastWeightTimeValue), 'month');\n    if (diffTime >= 1 && lastWeightValue) {\n      return (\n        <p className=\"historyWeightWarningTitle\">Last date Weighed was {moment(lastWeightTimeValue).format(\"LL\")}.Please\n          <a onClick={() => updatePetMessage()}>update the pet's weight</a>.\n        </p>\n      );\n    } else if (diffTime === 0 && lastWeightValue) {\n      return <p className=\"historyWeightTitle\">Last Weighed {moment(lastWeightTimeValue).format(\"LL\")}: {lastWeightValue} {biggieUnit === 'kg' ? 'kg' : 'lbs'}</p>\n    } else {\n      return null\n    }\n  }\n\n  //监听切换了宠物\n  useEffect(() => {\n    setInputIndex(0);\n    setCarouselIndex(1);\n    //获取上一次测量的体重\n    getRecentPet();\n    //检测宠物体重是否为空\n    if (!weight) {\n      setWeightTipVisible(true)\n    }\n    return () => { };\n  }, [petId]);\n  //监听点击界面中下一步按钮\n  useEffect(() => {\n    console.log(\"inputIndex\", inputIndex);\n\n    if (inputIndex < 9 && inputIndex !== -1) {\n      newData[inputIndex].focus();\n    }\n    if (inputIndex === 9) {\n      finishScan();\n    }\n    return () => { };\n  }, [inputIndex]);\n  //监听切换\n  useEffect(() => {\n    switch (carouselIndex) {\n      case 1:\n        setInputIndex(0);\n        break;\n      case 2:\n        setInputIndex(4);\n        break;\n      case 3:\n        setInputIndex(8);\n        break;\n      default:\n        setInputIndex(0);\n        break;\n    }\n    return () => { };\n  }, [carouselIndex]);\n  //监听用户点击了硬件中的下一步按钮\n  useEffect(() => {\n    if (inputIndex === -1) {\n      setInputIndex(0);\n    } else if (inputIndex < 9) {\n      setInputIndex(inputIndex + 1);\n    }\n    if (inputIndex === 3) {\n      setCarouselIndex(2);\n    }\n    if (inputIndex === 7) {\n      setCarouselIndex(3);\n    }\n    return () => { };\n  }, [rulerConfirmCount]);\n  //监听用户点击了硬件中的下一步按钮和拉动皮尺\n  useEffect(() => {\n    if (inputIndex < 9) {\n      let { deviceType, mac } = selectHardwareInfo;\n      if (deviceType === 'tape') {\n        if (mac === null || (mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac)) {\n          switch (inputIndex) {\n            case 0:\n              setHeadValue(rulerMeasureValue);\n              break;\n            case 1:\n              setNeckValue(rulerMeasureValue);\n              break;\n            case 2:\n              setUpperValue(rulerMeasureValue);\n              break;\n            case 3:\n              setLowerValue(rulerMeasureValue);\n              break;\n            case 4:\n              setTorsoValue(rulerMeasureValue);\n              break;\n            case 5:\n              setBodyValue(rulerMeasureValue);\n              break;\n            case 6:\n              setHindlimbValue(rulerMeasureValue);\n              break;\n            case 7:\n              setForelimbLengthValue(rulerMeasureValue);\n              break;\n            case 8:\n              setForelimbCircumferenceValue(rulerMeasureValue);\n              break;\n            default:\n              break;\n          }\n          if (rulerUnit !== radioValue) {\n            setRadioValue(rulerUnit);\n            setHeadValue(headValue && changeUnit(headValue));\n            setNeckValue(neckValue && changeUnit(neckValue));\n            setUpperValue(upperValue && changeUnit(upperValue));\n            setLowerValue(lowerValue && changeUnit(lowerValue));\n            setTorsoValue(torsoValue && changeUnit(torsoValue));\n            setBodyValue(bodyValue && changeUnit(bodyValue));\n            setHindlimbValue(hindlimbValue && changeUnit(hindlimbValue));\n            setForelimbLengthValue(forelimbLengthValue && changeUnit(forelimbLengthValue));\n            setForelimbCircumferenceValue(forelimbCircumferenceValue && changeUnit(forelimbCircumferenceValue));\n          }\n        }\n      }\n    }\n  }, [rulerConfirmCount, rulerMeasureValue]);\n\n  return (\n    <>\n      <Content className=\"scanContentBox\">\n        <Spin spinning={loding} size=\"large\" wrapperClassName=\"scanPageLoding\">\n          <div className=\"historyWeightBox\">\n            {\n              judgeWightTime()\n            }\n          </div>\n          {\n            lookType ?\n              (\n                <>\n                  <div className=\"lookImageBox\">\n                    {changeLookImage()}\n                    < img src={shrink} className=\"checkImage\" onClick={() => onLookImage(false)} />\n                  </div>\n                  <div className=\"lookInputBox\">\n                    <NumericInput\n                      value={onValue()}\n                      onChange={onOnChange()}\n                      onClick={() => clickInput(inputIndex)}\n                      index={inputIndex}\n                      indexkey={inputIndex}\n                      changesize={'32px'}\n                    />\n                  </div>\n                </>\n              ) :\n              (\n                <div className=\"scanImageBox\">\n                  {changeImage()}\n                  < img src={amplification} className=\"checkImage\" onClick={() => onLookImage(true)} />\n                </div>\n              )\n          }\n          {/*选择单位框*/}\n          <Radio.Group\n            value={radioValue}\n            onChange={changeRadio}\n            buttonStyle=\"solid\"\n            className=\"selectLengthUnit\"\n          >\n            <Radio.Button\n              value=\"in\"\n              className=\"inButton\"\n              style={{\n                background: radioValue === \"in\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"in\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopRightRadius: \"0px\",\n                borderBottomRightRadius: \"0px\",\n              }}\n            >\n              in\n            </Radio.Button>\n            <Radio.Button\n              value=\"cm\"\n              className=\"cmButton\"\n              style={{\n                background: radioValue === \"cm\" ? \"#D5B019\" : \"#FFFFFF\",\n                borderColor: radioValue === \"cm\" ? \"#D5B019\" : \"#B3B3B3\",\n                borderRadius: \"20px\",\n                borderTopLeftRadius: \"0px\",\n                borderBottomLeftRadius: \"0px\",\n              }}\n            >\n              cm\n            </Radio.Button>\n          </Radio.Group>\n          {/**输入框 */}\n          <div className=\"slideshowBox\" style={{ height: px(100) }}>\n            <div className=\"leftImageBox\" onClick={() => letfClick()}>\n              <LeftOutlined style={{ fontSize: '24px', visibility: carouselIndex === 1 ? 'hidden' : 'visible' }} />\n            </div>\n            <div className=\"scollInputGroup\">\n              {/*第一列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 1 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Head Circumference</p>\n                    <NumericInput\n                      value={headValue}\n                      onChange={setHeadValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(0)}\n                      index={inputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={neckValue}\n                      onChange={setNeckValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(1)}\n                      index={inputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={upperValue}\n                      onChange={setUpperValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(2)}\n                      index={inputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={lowerValue}\n                      onChange={setLowerValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(3)}\n                      index={inputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第二列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 2 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={torsoValue}\n                      onChange={setTorsoValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(4)}\n                      index={inputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={bodyValue}\n                      onChange={setBodyValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(5)}\n                      index={inputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={hindlimbValue}\n                      onChange={setHindlimbValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(6)}\n                      index={inputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={forelimbLengthValue}\n                      onChange={setForelimbLengthValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(7)}\n                      index={inputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n              {/*第三列输入框*/}\n              <Input.Group\n                className=\"inputGroupItem\"\n                style={{ display: carouselIndex === 3 ? \"\" : \"none\" }}\n              >\n                <Space className=\"inputItemBox\">\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={forelimbCircumferenceValue}\n                      onChange={setForelimbCircumferenceValue}\n                      onInput={inputEl}\n                      onClick={() => clickInput(8)}\n                      index={inputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                </Space>\n              </Input.Group>\n            </div>\n            <div className=\"rightImageBox\" onClick={() => rightClick()}>\n              <RightOutlined style={{ fontSize: '24px', visibility: carouselIndex === 3 ? 'hidden' : 'visible' }} />\n            </div>\n          </div>\n          {/*历史测量数据展示*/}\n          <div className=\"historyBox\">\n            <div className=\"historyTimeBox\">\n              {\n                lastRuleTimeValue && (\n                  <p>{`Previously Measured on ${moment(lastRuleTimeValue).format('L')}`}</p>\n                )\n              }\n            </div>\n            <div className=\"historyDataBox\">\n              {historyData()}\n            </div>\n\n          </div>\n          {/*下一步 */}\n          <div className=\"nextBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size=\"large\"\n              className=\"nextBtn\"\n              onClick={inputIndex > 7 ? finishScan : switchFocus}\n            >\n              {inputIndex > 7 ? \"Calculate\" : \"Next\"}\n            </Button>\n          </div>\n        </Spin>\n      </Content>\n      <Modal\n        open={weightTipVisible}\n        width={320}\n        className='weightTipModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">Weight Required</p>\n          <div className=\"tipTitleBox\">\n            <p className=\"tipTitle\">\n              This pet's weight has not been\n            </p>\n            <p className=\"tipTitle\">\n              entered into their profile. Update\n            </p>\n            <p className=\"tipTitle\">\n              their pet profile with the weight or\n            </p>\n            <div className=\"tipTitle\">\n              use the\n              <p onClick={() => goToBiggieScale()}>Biggie Scale</p>\n              .\n            </div>\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => onCancel()}\n              className=\"modalBtn\"\n            >\n              Skip\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => updatePetMessage()}\n              className=\"modalBtn\"\n            >\n              Update Profile\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      <Modal\n        open={missMeasureVisible}\n        width={432}\n        className='missMeasureModal'\n        centered\n        keyboard={false}\n        closable={false}\n        footer={null}\n      >\n        <div className=\"modalContentBox\">\n          <p className=\"title\">You've missed these measurements</p>\n          <p className=\"title\">Enter these missing readings</p>\n          <div className=\"inputBox\">\n            {\n              headValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missHeadValue}\n                      onChange={setMissHeadValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(0)}\n                      index={missInputIndex}\n                      indexkey={0}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              neckValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Neck Circumference</p>\n                    <NumericInput\n                      value={missNeckValue}\n                      onChange={setMissNeckValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(1)}\n                      index={missInputIndex}\n                      indexkey={1}\n                    />\n                  </div>\n\n                )\n            }\n            {\n              upperValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Upper Torso Circumference</p>\n                    <NumericInput\n                      value={missUpperValue}\n                      onChange={setMissUpperValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(2)}\n                      index={missInputIndex}\n                      indexkey={2}\n                    />\n                  </div>\n                )\n            }\n            {\n              lowerValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Lower Torso Circumference</p>\n                    <NumericInput\n                      value={missLowerValue}\n                      onChange={setMissLowerValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(3)}\n                      index={missInputIndex}\n                      indexkey={3}\n                    />\n                  </div>\n                )\n            }\n            {\n              torsoValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Torso Length</p>\n                    <NumericInput\n                      value={missTorsoValue}\n                      onChange={setMissTorsoValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(4)}\n                      index={missInputIndex}\n                      indexkey={4}\n                    />\n                  </div>\n                )\n            }\n            {\n              bodyValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Full Body Length</p>\n                    <NumericInput\n                      value={missBodyValue}\n                      onChange={setMissBodyValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(5)}\n                      index={missInputIndex}\n                      indexkey={5}\n                    />\n                  </div>\n                )\n            }\n            {\n              hindlimbValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Hindlimb Length</p>\n                    <NumericInput\n                      value={missHindlimbValue}\n                      onChange={setMissHindlimbValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(6)}\n                      index={missInputIndex}\n                      indexkey={6}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbLengthValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Length</p>\n                    <NumericInput\n                      value={missForelimbLengthValue}\n                      onChange={setMissForelimbLengthValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(7)}\n                      index={missInputIndex}\n                      indexkey={7}\n                    />\n                  </div>\n                )\n            }\n            {\n              forelimbCircumferenceValue ? (null) :\n                (\n                  <div className=\"inputItem\">\n                    <p className=\"inputTitle\">Forelimb Circumference</p>\n                    <NumericInput\n                      value={missForelimbCircumferenceValue}\n                      onChange={setMissForelimbCircumferenceValue}\n                      onInput={missInputEl}\n                      onClick={() => missClickInput(8)}\n                      index={missInputIndex}\n                      indexkey={8}\n                    />\n                  </div>\n                )\n            }\n\n          </div>\n          <div className=\"modalBtnBox\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => setMissMeasureVisible(false)}\n              className=\"modalBtn\"\n            >\n              cancel\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='middle'\n              onClick={() => saveMiss()}\n              className=\"modalBtn\"\n            >\n              Save and Calculate\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    ruleMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n    setSelectHardwareType,\n  }\n)(ScanPet);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\user.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\product.js",
    [
        "1085",
        "1086"
    ],
    "/**\r\n * @file product.js\r\n * @authoe 胡邵杰\r\n * @dec https://www.mellaserver.com/api/mellaserver/product 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20221121\r\n *\r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/product`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据组织获取所有宠物\r\n * @param {str} lastOrganization 组织id\r\n * @param {*} params\r\n * @returns\r\n */\r\nexport const list = () => {\r\n    return get(`${baseURL}/list`, '')\r\n}",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\EzyVet.js",
    [
        "1087"
    ],
    "/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/EzyVet`\r\n\r\n\r\n/**\r\n * @dec 重新获取令牌\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const ezyvetauth = (parames) => {\r\n    return get(`${baseURL}/ezyvetauth`, parames)\r\n}\r\n\r\n\r\nexport const checkAndSaveAnimalList = (parames) => {\r\n    return postJson(`${baseURL}/checkAndSaveAnimalList`, parames)\r\n}\r\n\r\nexport const healthstatus = (paramId, petVitalId, parames) => {\r\n    return patch(`${baseURL}/healthstatus/${paramId}/${petVitalId}`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\ezyvetApi.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\VetSpire.js",
    [
        "1088",
        "1089",
        "1090"
    ],
    "/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const vetspireGetPetLatestExam = (params) => {\r\n    return postJson(`${baseURL}/vetspireGetPetLatestExam`, params)\r\n}\r\n\r\n\r\n\r\n\r\nexport const vetspireUpdateWeight = (params) => {\r\n    return postJson(`${baseURL}/vetspireUpdateWeight`, params)\r\n}\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\user.js",
    [
        "1091",
        "1092",
        "1093"
    ],
    "/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/user`\r\n\r\n\r\nexport const changeLatestWorkplace = (userId, workplaceId, roleId = 2) => {\r\n    return get(`${baseURL}/changeLatestWorkplace/${userId}/${roleId}/${workplaceId}`,\r\n        '')\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\pet.js",
    [
        "1094",
        "1095",
        "1096"
    ],
    "/**\r\n * @file pet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/pet`\r\n\r\n\r\n\r\n\r\n\r\nexport const getPetInfoByRFID = (heardSearchText, lastOrganization) => {\r\n    return get(`${baseURL}/getPetInfoByRFID/${heardSearchText}/${lastOrganization}`, '')\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellabiggie\\EzyVet.js",
    [
        "1097",
        "1098"
    ],
    "/**\r\n * @file EzyVet.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { biggieBaseUrl } from '../../config/config'\r\nconst baseURL = `${biggieBaseUrl}/EzyVet`\r\n\r\n\r\n\r\n\r\nexport const ezyvetGetPetLatestExam = (params) => {\r\n    return get(`${baseURL}/ezyvetGetPetLatestExam`, params)\r\n}\r\n\r\n\r\nexport const ezyvetUpdateWeight = (paramId, params) => {\r\n    return patch(`${baseURL}/ezyvetUpdateWeight/${paramId}`, params)\r\n}\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\user.js",
    [
        "1099",
        "1100"
    ],
    "/**\r\n * @file user.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/user`\r\n\r\n\r\n/**\r\n * @dec 邀请别人加入组织\r\n * @param {*} userId 用户id\r\n * @param {*} organizationId 组织id\r\n * @param {*} parames \r\n * @returns \r\n */\r\nexport const inviteUserByEmail = (userId, organizationId, parames) => {\r\n    return postJson(`${baseURL}/inviteUserByEmail/${userId}/${organizationId}`, parames)\r\n}\r\n\r\nexport const updateUserInfo = (parames) => {\r\n    return postJson(`${baseURL}/updateUserInfo`, parames)\r\n}\r\n\r\n\r\n\r\n\r\nexport const loginWithQRcode = (QRToken) => {\r\n    return get(`${baseURL}/loginWithQRcode/${QRToken}`, '')\r\n}\r\n\r\n\r\nexport const getLoginQRcode = () => {\r\n    return get(`${baseURL}/getLoginQRcode`, '')\r\n}\r\n\r\n\r\n\r\nexport const resendDeskRegistEmail = (logupEmailCode, params) => {\r\n    return get(`${baseURL}/resendDeskRegistEmail/${logupEmailCode}`, params)\r\n}\r\n\r\n\r\nexport const deskRegistAWSSNS = (params) => {\r\n    return postJson(`${baseURL}/deskRegistAWSSNS`, params)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\melladesk\\VetSpire.js",
    [
        "1101",
        "1102",
        "1103"
    ],
    "/**\r\n * @file VetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del, patch } from '../ezyvetApi'\r\nimport { melladeskBaseUrl } from '../../config/config'\r\nconst baseURL = `${melladeskBaseUrl}/VetSpire`\r\n\r\n\r\n\r\nexport const selectExamByPatientId = (parames) => {\r\n    return postJson(`${baseURL}/selectExamByPatientId`, parames)\r\n}\r\n\r\n\r\nexport const updateVitalsTemperatureByVitalId = (parames) => {\r\n    return postJson(`${baseURL}/updateVitalsTemperatureByVitalId`, parames)\r\n}\r\n\r\n\r\nexport const selectLocations = (parames) => {\r\n    return postJson(`${baseURL}/selectLocations`, parames)\r\n}\r\n\r\n\r\nexport const selectProvidersByLocationId = (parames) => {\r\n    return postJson(`${baseURL}/selectProvidersByLocationId`, parames)\r\n}\r\n\r\n\r\n\r\n\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\preOrder.js",
    [
        "1104",
        "1105",
        "1106"
    ],
    "/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/preOrder 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20221121\n *\n */\nimport { get, postJson, postFormData, postFormData2, del, put } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/preOrder`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\n\n//用户获取订阅信息\nexport const getOrderInfo = (userId) => {\n    return get(`${baseURL}/getOrderInfo/${userId}`, '')\n}\n//生成订单\nexport const buy = (userId, params) => {\n    return postJson(`${baseURL}/${userId}`, params)\n}\n//对订单进行付款\nexport const payForOrder = (preOrderId, params) => {\n    return postFormData2(`${baseURL}/payForOrder/${preOrderId}`, params)\n}\n// 更新\n\n/**\n * 根据订单号获取订单是否支付、过期等\n * @param {string} preOrderId\n * @returns\n */\nexport const getPreOrderById = (preOrderId,) => {\n    return get(`${baseURL}/getPreOrderById/${preOrderId}`, '')\n}\n\n\n\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\buySub\\components\\accessArr.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",
    [
        "1107",
        "1108",
        "1109",
        "1110",
        "1111",
        "1112",
        "1113",
        "1114",
        "1115",
        "1116",
        "1117",
        "1118",
        "1119",
        "1120",
        "1121",
        "1122",
        "1123"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\n\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\nimport Delete from \"./../../assets/img/Delete.png\";\n\nimport { mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport { deletePetExamByExamId, getPetExamByPetId, updatePetExam } from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { useThrottleFn, useDebounceFn, useDebounceEffect } from 'ahooks';\n\nimport \"./index.less\";\n\nconst HistoryTable = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n  saveNum = 0,\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\n}) => {\n  let { petId } = petMessage;\n  let storage = window.localStorage;\n  let draggleRef = React.createRef();\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [reRender, setReRender] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const [loading, setLoading] = useState(false);//加载\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n  const [isMore, setIsMore] = useState(true); // 是否还有数据 false-已经到底\n  //体重表格渲染\n  const weightColumns = [\n    {\n      title: \"Data\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: \"Weight\",\n      dataIndex: \"weight\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\n      ),\n    },\n\n    {\n      // title: \"BF%\",\n      // dataIndex: \"fat\",\n      title: \"Impedance\",\n      dataIndex: \"impedance\",\n\n\n\n      key: \"fat\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"BCS\",\n      dataIndex: \"bodyConditionScore\",\n      key: \"bodyConditionScore\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"Note\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //温度表格渲染\n  const TemperatureColumns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            style={{ cursor: \"pointer\" }}\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //选择表格colum渲染\n  const columType = () => {\n    switch (tableColumnType) {\n      case \"temperature\":\n        return TemperatureColumns;\n      case \"weight\":\n        return weightColumns;\n      default:\n        break;\n    }\n  };\n  //判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //获取历史宠物数据\n  const { run: getPetTemperatureData } = useDebounceFn((currPage) => {\n    setLoading(true);\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: tableColumnType === \"temperature\" ? 0 : 1,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        setLoading(false);\n        setTotal(res.data.totalCount);\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, { wait: 0 });\n\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史记录\n  const deletePetMessage = (examId) => {\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useDebounceEffect(() => {\n    setCurrPage(1);\n    setPetData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n  }, [petId], { wait: 0 });\n\n  useEffect(() => {\n    if (reRender !== saveNum) {\n      setCurrPage(1);\n      setPetData([]);\n      setTotal(0);\n      setReRender(saveNum);\n      getPetTemperatureData(1);\n    }\n    return () => { };\n  }, [saveNum]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n    return (() => { });\n  }, []);\n\n  return (\n    <div className=\"tableContainer\" onScrollCapture={onScrollCapture}>\n      <Table\n        rowKey={\"examId\"}\n        columns={columType()}\n        dataSource={petData}\n        pagination={false}\n        loading={loading}\n        scroll={{\n          y: '80%'\n        }}\n        className=\"historyTableStyle\"\n      />\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        open={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(HistoryTable);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx",
    [
        "1124"
    ],
    "import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Select,\n} from \"antd\";\n\nimport UploadImg from \"../../utils/uploadImg/UploadImg\";\n\nimport {\n  checkPatientId,\n  selectBreedBySpeciesId,\n} from '../../api';\n\nimport _ from 'lodash';\n\nimport './index.less';\n\nconst AddPetModal = ({ visible, width, title, destroyOnClose, value, onConfirm, onCancel, onLoading }) => {\n  const { Option } = Select;\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [loading, setLoading] = useState(false);//加载\n  const [breedList,  setBreedList] = useState([]);//\n  const [imageId, setImageId] = useState('');//上传后图片id\n  const [patientId, setPatientId] = useState('');//用户输入的病人id\n  const [petName, setPetName] = useState('');//用户输入的宠物名字\n  const [ownerName, setOwnerName] = useState('');//用户输入的主人名字\n  const [breedId, setBreedId] = useState('');//用户选择的宠物品种id\n  const [petAge, setPetAge] = useState('');//用户输入的宠物年龄\n  const [petWeight, setPetWeight] = useState('');//用户输入的宠物体重\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n\n  //确认选择\n  const handleOk = () => {\n    if (patientId === '') {\n      message.error('Please enter the patientId!');\n    } else {\n      setIsModalVisible(visible);\n      onConfirm({\n        imageId: imageId,\n        patientId: patientId,\n        petName: petName,\n        petSpeciesBreedId: breedId,\n        age: petAge,\n        weight: petWeight,\n        owner: ownerName,\n      })\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //判断用户输入的patientId是否存在\n  const getPetInfoByPatientId = () => {\n    setLoading(true);\n    let datas = {\n      patientId: patientId,\n      doctorId: storage.userId\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.organizationId = storage.lastOrganization\n    }\n    checkPatientId(datas)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === false) {\n          message.error('The patient ID already exists, please replace it !');\n        } else {\n          message.success('The patientId can be used ~')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        message.error('Abnormal interface');\n      })\n\n  }\n  //获取宠物品种\n  const selectBreed = () => {\n    setLoading(true);\n    selectBreedBySpeciesId({ speciesId: null })\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          let arr = [];\n          _.map(res.petlist, (item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n            };\n            arr.push(data);\n          });\n          setBreedList(arr);\n        } else {\n          message.error('Failed to obtain pet breed information!');\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    selectBreed();\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  return (\n    <>\n      <Modal\n        title=\"Add a Pet\"\n        open={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"addPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className='petMsgBox'>\n              <div className='addPhoto'>\n                <UploadImg\n                  getImg={(val) => {\n                    setImageId(val.imageId);\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Patient ID:</p>\n                <Input\n                  value={patientId}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPatientId(e.target.value)\n                  }}\n                  onBlur={() => {\n                    if (patientId.length > 0) {\n                      getPetInfoByPatientId();\n                    }\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Name:</p>\n                <Input\n                  value={petName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetName(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Owner Name:</p>\n                <Input\n                  value={ownerName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setOwnerName(e.target.value)\n                  }}\n                />\n              </div>\n\n              <div className=\"item\">\n                <p>Breed:</p>\n                <div className='selectBox'>\n                  <Select\n                    showSearch\n                    style={{ width: \"100%\" }}\n                    bordered={false}\n                    value={breedId}\n                    placeholder=\"Search to Select\"\n                    optionFilterProp=\"children\"\n                    listHeight={256}\n                    onSelect={(value, data) => setBreedId(value)}\n                    filterOption={(input, option) =>\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                      0\n                    }\n                    filterSort={(optionA, optionB) =>\n                      optionA.children\n                        .toLowerCase()\n                        .localeCompare(optionB.children.toLowerCase())\n                    }\n                  >\n                    {\n                      _.map(breedList, (item, index) => (\n                        <Option key={item.petSpeciesBreedId}>{item.breedName}</Option>\n                      ))\n                    }\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p>Pet Age:</p>\n                <Input\n                  value={petAge}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetAge(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Weight:</p>\n                <Input\n                  value={petWeight}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetWeight(e.target.value)\n                  }}\n                />\n                <div className=\"unit\">{`kg`}</div>\n              </div>\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n\n};\n\nexport default AddPetModal;\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx",
    [
        "1125",
        "1126",
        "1127",
        "1128"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",
    [
        "1129",
        "1130"
    ],
    "import { useEffect } from 'react';\nimport { Input } from 'antd';\nimport _ from 'lodash';\nimport './numericInput.less'\n\n\nconst NumericInput = (props) => {\n  const { value, onChange, onInput, onClick, indexkey, index, changesize = '' } = props;\n  //输入框输入\n  const handleChange = (e) => {\n    const { value: inputValue } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n\n    if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\n      onChange(inputValue);\n    }\n  }\n  //失去焦点\n  const handleBlur = () => {\n    let valueTemp = value;\n    if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\n  };\n  //输入框点击事件\n  const handleClick = () => {\n    onClick();\n  }\n  //修改样式\n  let bordercolor = indexkey === index ? '#D5B019' : '#d9d9d9';\n\n\n  return (\n    <Input\n      {...props}\n      className='inputNum'\n      onChange={handleChange}\n      onBlur={handleBlur}\n      maxLength={10}\n      ref={onInput}\n      onClick={handleClick}\n      style={{ borderColor: bordercolor, textAlign: \"center\", fontSize: changesize }}\n    />\n  );\n\n};\n\nexport default NumericInput;\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",
    [
        "1131"
    ],
    "\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\backend.js",
    [
        "1132",
        "1133"
    ],
    "/**\r\n * @file backend.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/backend 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/backend`\r\n\r\n\r\n/**\r\n * @dec 获取硬件的最新版本信息\r\n * @param {str} hardWareType 硬件类型 <br/>\r\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\r\n * @returns \r\n */\r\nexport const getOta = (hardWareType) => {\r\n    return get(`${baseURL}/getOta?type=${hardWareType}`)\r\n}",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\petall.js",
    [
        "1134"
    ],
    "/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/petall 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/petall`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\nexport const pet_petall = (lastOrganization, params) => {\n  return postJson(`${baseURL}/pet/${lastOrganization}/petall`, params)\n}\n/**\n * @dec 根据用户id查询当前组织下的所有宠物\n * @param {*} params\n * @returns\n */\nexport const getPersonPetByUserId = (params) => {\n  return get(`${baseURL}/getPersonPetByUserId?userId=${params.userId}&orgId=${params.orgId}`);\n}\n\n\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\userfeedback.js",
    [
        "1135",
        "1136"
    ],
    "/**\r\n * @file userfeedback.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/userfeedback 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/userfeedback`\r\n\r\n\r\n/**\r\n * @dec bug提交\r\n * @param {*} params \r\n * @returns \r\n */\r\nexport const savefeedback = (params) => {\r\n    return postJson(`${baseURL}/savefeedback`, params)\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\vetSpire.js",
    [
        "1137",
        "1138"
    ],
    "/**\r\n * @file vetSpire.js\r\n * @authoe 胡邵杰 \r\n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\r\n *      封装,封装函数名称和接口地址保持一致\r\n * @createDate 20220824\r\n * \r\n */\r\nimport { get, postJson, del } from '../api'\r\nimport { mellaserverBaseUrl } from '../../config/config'\r\nconst baseURL = `${mellaserverBaseUrl}/VetSpire`\r\n\r\n\r\n\r\n/**\r\n * @dec 根据vetspire中的api验证\r\n * @param params \r\n */\r\n\r\nexport const selectLocationsByOrganization = (params) => {\r\n    return postJson(`${baseURL}/selectLocationsByOrganization`, params)\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\clinical.js",
    [
        "1139",
        "1140"
    ],
    "/**\n * @file clinical.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/clinical 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/clinical`\n\n\n/**\n * @dec 临床测试数据保存\n * @param {*} params\n * @returns\n */\nexport const addAllClinical = (params) => {\n    return postJson(`${baseURL}/addAllClinical`, params)\n}\n\n/**\n * @dec 1.2版本的猫预测\n * @param {*} params\n * @returns\n */\nexport const catv12Predict = (params) => {\n    return postJson(`${baseURL}/catv12Predict`, params)\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\api\\mellaserver\\pet.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\FetchEzyvet.js",
    [
        "1141",
        "1142"
    ],
    "\r\n\r\n// let COMMON_URL = '';\r\n// let COMMON_URL = 'https://api.trial.ezyvet.com/v1';\r\nlet COMMON_URL = process.env.REACT_APP_EZYVET_BASE_URL\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function FetchEzyVet(url, method, params = '', token = '') {\r\n\r\n    if (method === 'GET' || method === 'DELETE') {\r\n        let headers = null\r\n        if (token !== '') {\r\n            headers = {\r\n                'authorization': token,\r\n            };\r\n        }\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            // 定一个空数组\r\n            let paramsArray = [];\r\n            //  拆分对象\r\n            Object.keys(params).forEach(key =>\r\n                paramsArray.push(key + \"=\" + params[key])\r\n            );\r\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n            if (url.search(/\\?/) === -1) {\r\n                url = url + \"?\" + paramsArray.join(\"&\");\r\n            } else {\r\n                url = url + \"&\" + paramsArray.join(\"&\");\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": 'text/plain'\r\n                    }\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else if (method === 'POST') {\r\n        let header = {\r\n            \"Content-type\": \"application/json\"\r\n        };\r\n        if (params === '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    // mode: 'cors',\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else {\r\n        let header = {\r\n            \"Content-type\": \"application/merge-patch+json\",\r\n            authorization: token\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx",
    [
        "1143",
        "1144",
        "1145",
        "1146",
        "1147",
        "1148",
        "1149",
        "1150",
        "1151",
        "1152"
    ],
    "import React, { Component } from 'react'\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\nimport './unassignModal.less'\nimport Draggable from \"react-draggable\";\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport {\n  getPetExamByDoctorId,\n  selectBreedBySpeciesId,\n  checkPatientId,\n  addDeskPet,\n  addAndSavePetExam,\n  deletePetExamByExamId,\n  listAllPetInfo\n} from './../../api';\n\nimport Close from \"./../../assets/img/close.png\";\n\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { mTop, px, MTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport MyModal from \"../../utils/myModal/MyModal\";\nimport Button from \"./../../utils/button/Button\";\n\nimport moment from \"moment\";\n\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\n\n\n\nexport default class UnassignModal extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    workplaceId: storage.lastWorkplaceId,\n    loadingPets: false,\n  };\n\n  componentDidMount() {\n\n    if (this.props.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n\n\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('prevProps', prevProps, prevState);\n    if (this.props.assignVisible !== this.state.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n    if (this.props.lastWorkplaceId !== this.state.workplaceId) {\n      this.setState({\n        petListData: [],\n        workplaceId: this.props.lastWorkplaceId\n      })\n\n      this.gerAllPetMsg();\n\n    }\n    if (this.props.seleceEmergencies !== this.state.seleceEmergencies) {\n      this.setState({\n        seleceEmergencies: this.props.seleceEmergencies\n      })\n    }\n\n  }\n\n\n\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n\n    getPetExamByDoctorId(storage.userId)\n      .then((res) => {\n        console.log(\"---res\", res);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let day = moment().diff(moment(createTime), \"day\");\n              // console.log(day);\n              if (day > 3) {\n                continue;\n              }\n\n              let Tem = temperature;\n              try {\n                if (clinicalDataEntity) {\n                  Tem = temperature || clinicalDataEntity.data0;\n                }\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n                day,\n              };\n\n              historys.push(str);\n            }\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          this.setState({\n            historyData,\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    selectBreedBySpeciesId({ speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n          selectBreedBySpeciesId({ speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('获取列表');\n    this.setState({\n      loadingPets: true,\n    })\n    listAllPetInfo(params)\n      .then((res) => {\n        console.log('res33: ', res);\n        this.setState({\n          loadingPets: false,\n        })\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadingPets: false,\n        })\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n          checkPatientId(datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n\n      addDeskPet(this.state.assignPatientId, petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  this.props.success(true)\n\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        open={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      deletePetExamByExamId(key, '')\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              console.log(\"删除成功\");\n              const historyData = [...this.state.historyData];\n              console.log(historyData);\n              this.setState({\n                historyData: historyData.filter((item) => item.historyId !== key),\n              });\n            } else {\n              console.log(\"删除失败\");\n            }\n          }\n        );\n    };\n\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n\n    return (\n      <div id='unassignedModal111'>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                          this.props.onChangeVisible(false)\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this.state.loadingPets ?\n                    <div style={{ display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                      <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                        <LoadingOutlined style={{ fontSize: 30, color: '#000', marginTop: mTop(-30), }} />\n                      </div>\n                      <p style={{ color: '#000' }}>\n                        {'loading...'}\n                      </p>\n                    </div> :\n                    this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                        this.props.onChangeVisible(false)\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                this.props.success(true)\n\n                                this.setState({\n                                  assignVisible: false,\n                                });\n                                this.props.onChangeVisible(false)\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n        {this._modal()}\n      </div>\n\n    )\n  }\n}\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",
    [
        "1153",
        "1154",
        "1155",
        "1156",
        "1157",
        "1158",
        "1159",
        "1160",
        "1161",
        "1162",
        "1163",
        "1164"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Progress, Layout, Carousel } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\n\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport { px } from \"../../../utils/px\";\nimport electronStore from \"../../../utils/electronStore\";\nimport _ from \"lodash\";\n\nimport \"./measurement.less\";\n\nlet storage = window.localStorage;\nconst { Content, Header } = Layout;\n\nconst Measurement = ({ petMessage, hardwareMessage }) => {\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\n  const [percent, setPercent] = useState(0);\n  const [value, setValue] = useState(0);\n  const [timers, setTimers] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    const random = 1;\n    setValue(value + random);\n    setTimers(timers + random);\n  };\n\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    let num = parseFloat(percent);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    }\n    return (\n      <>\n        {mellaMeasurePart !== \"耳温\" ? (\n          <p className=\"ProgressTitle\">\n            {num}\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\n          </p>\n        ) : (\n          <></>\n        )}\n        <p className=\"ProgressTitle\">Measuring</p>\n      </>\n    );\n  };\n  //图片切换\n  const checkImage = () => {\n    switch (timers) {\n      case 0:\n        return <img src={Animation_1} />;\n      case 1:\n        return <img src={Animation_2} />;\n      case 2:\n        return <img src={Animation_3} />;\n      case 3:\n        return <img src={Animation_3} />;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (timers > 2) {\n      setTimers(0);\n    }\n    return () => { };\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    const timer = setInterval(tick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* <HeaderItem /> */}\n      <Content className={\"measureContentBox\"}>\n        <div style={{height: '100%', display: 'flex', flexDirection: 'column', alignItems:'center', justifyContent:'center'}}>\n          <div style={{ marginTop: 16 }}>\n            <Progress\n              type=\"dashboard\"\n              percent={_.round(mellaMeasureValue, 1)}\n              gapDegree={30}\n              // width={px(260)}\n              strokeWidth={\"8\"}\n              format={(percent) => ProgressTitle(percent)}\n              strokeColor={'#4C595E'}\n              className='measuringProgress'\n            />\n          </div>\n          {checkImage()}\n        </div>\n      </Content>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(Measurement);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",
    [
        "1165",
        "1166",
        "1167",
        "1168",
        "1169",
        "1170",
        "1171",
        "1172",
        "1173",
        "1174",
        "1175",
        "1176",
        "1177",
        "1178",
        "1179",
        "1180"
    ],
    "import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Progress,\n  Space,\n  Table,\n  Tag,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n  Layout,\n} from \"antd\";\nimport xia_hui from \"./../../../assets/img/xia_hui.png\";\nimport exportHis from \"./../../../assets/img/exportHis.png\"\nimport measuredTable_1 from \"./../../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../../assets/img/EditCircle.png\";\nimport Delete from \"./../../../assets/img/Delete.png\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport { px, mTop } from \"../../../utils/px\";\nimport moment from \"moment\";\nimport electronStore from \"../../../utils/electronStore\";\nimport \"./measuredData.less\";\nimport {\n  deletePetExamByExamId,\n  ezyvetGetPetLatestExam,\n  getPetExamByPetId,\n  healthstatus,\n  updatePetExam,\n  updateVitalsTemperatureByVitalId,\n  vetspireGetPetLatestExam\n} from \"./../../../api\";\nimport { addClamantPetExam } from './../../../api/mellaserver/exam'\n\nconst { Content } = Layout;\nconst MeasuredData = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n}) => {\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\n    hardwareMessage;\n  let draggleRef = React.createRef();\n  let { petId, memo, patientId } = petMessage;\n  let storage = window.localStorage;\n  let hisHe = mTop(200);\n  try {\n    let historyElement = document.querySelectorAll(\".measurementBox .table\");\n    hisHe = historyElement[0].clientHeight - mTop(60);\n  } catch (error) { }\n\n  const [petTemperatureData, setPetTemperatureData] = useState([]); //存储宠物历史温度数据\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [isHua, setIsHua] = useState(true);\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  let btnList = [\n    {\n      name: 'Date',\n      data: 'Nov 26'\n    },\n    {\n      name: 'Time',\n      data: '09:05 AM'\n    },\n    {\n      name: 'Temperature',\n      data: '101.2 ',\n      unit: '%F'\n    },\n    {\n      name: 'Placement',\n      data: 'dog'\n    }\n  ]\n\n  //表格渲染\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n        if (isHua) {\n          num = _.round((num * 1.8 + 32), 1);\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      key: \"Action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            // className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n            style={{ cursor: \"pointer\" }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} style={{ cursor: \"pointer\" }} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //根据温度判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#98da86\";\n    } else {\n      return \"#58bde6\";\n    }\n  };\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    //根据温度判断指示文字\n    const title = () => {\n      if (mellaMeasureValue > 40) {\n        return \"Danger\";\n      } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\n        return \"Normal\";\n      } else {\n        return \"Low\";\n      }\n    };\n    return (\n      <>\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\n          {getTemp(percent)}\n          <span style={{ color: color(mellaMeasureValue) }} className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"\n            }`}</span>\n        </p>\n        <p style={{ color: color(mellaMeasureValue) }} className=\"ProgressTitle\">\n          {title()}\n        </p>\n      </>\n    );\n  };\n  //获取历史宠物温度数据\n  const getPetTemperatureData = (currPage) => {\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: 0,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petTemperatureData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetTemperatureData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //返回准备测量界面\n  const backConnectedPage = () => {\n    if (mellaConnectStatus != \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    } else {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n  };\n  //保存数据\n  const saveData = () => {\n    let petVitalId = null;\n    switch (mellaMeasurePart) {\n      case \"腋温\":\n        petVitalId = 1;\n        break;\n      case \"肛温\":\n        petVitalId = 3;\n        break;\n      case \"耳温\":\n        petVitalId = 4;\n        break;\n      default:\n        petVitalId = 1;\n        break;\n    }\n    let params = {\n      petId: petId,\n      doctorId: storage.userId,\n      temperature: mellaMeasureValue,\n      petVitalTypeId: petVitalId,\n      memo: \"\",\n    };\n    addClamantPetExam(params)\n      .then((res) => {\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataVetspire(mellaMeasureValue)\n              break;\n            case '4'://ezyVet\n              updataEzyvet(mellaMeasureValue, petVitalId)\n              break;\n            default: message.success('Data successfully saved in Mella')\n              break;\n          }\n        }\n        setSaveType(true);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史温度记录\n  const deletePetMessage = (examId) => {\n\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  const getTemp = (percent) => {\n\n    let num = mellaMeasureValue;\n    if (isHua) {\n      num = _.round((num * 1.8 + 32), 1);\n    } else {\n      num = parseFloat(num.toFixed(1));\n    }\n    return num;\n  };\n  const updataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reupdataEzyvet(Temp, petVitalId)\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reupdataEzyvet(Temp, petVitalId)\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const reupdataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const updataVetspire = (Temp) => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: patientId\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            temp: temperature\n          }\n\n          updateVitalsTemperatureByVitalId(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.measuredTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petTemperatureData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useEffect(() => {\n    setCurrPage(1);\n    setPetTemperatureData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n    return (() => { })\n  }, [petId]);\n\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      <Content className=\"measurementBox\">\n        <div className=\"container\">\n          {/* <div className=\"progress\">\n            <Progress\n              type=\"dashboard\"\n              percent={_.round(mellaMeasureValue, 1)}\n              gapDegree={30}\n              // width={px(260)}\n              strokeWidth={\"8\"}\n              format={(percent) => ProgressTitle(percent)}\n              strokeColor={{\n                \"0%\": \"#7bd163\",\n                \"100%\": \"#19ade4\",\n              }}\n              className=\"measurementProgress\"\n            />\n\n\n          </div> */}\n          <div className=\"bottomContent\">\n            <div className=\"measureContent\">\n              {btnList.map((item, index) => (\n                  // <li key={index}>\n                  //   <>\n                  //     <img src={data.img} alt=\"\" />\n                  //     <p>{data.title}</p>\n                  //   </>\n                  // </li>\n                <div key={index} className=\"item\">\n                    <>\n                    <p className=\"pSt1\">{item.name}</p>\n                    <p className=\"pSt2\">{item.data}</p>\n                    </>\n                </div>\n              ))}\n            </div>\n            <div className=\"buttonBox\">\n              {!saveType && (\n                <>\n                  <Button\n                    style={{ backgroundColor: \"#e1206d\" }}\n                    className=\"btn\"\n                    type=\"danger\"\n                    shape=\"round\"\n                    onClick={() => backConnectedPage()}\n                  >\n                    Measure Again\n                  </Button>\n                  <Button\n                    style={{ backgroundColor: \"#e1206d\"}}\n                    className=\"btn\"\n                    type=\"danger\"\n                    shape=\"round\"\n                    color=\"#e1206d\"\n                    onClick={() => saveData()}\n                  >\n                    Save\n                  </Button>\n                </>\n              )}\n            </div>\n            <div className=\"scrollHistory\">\n              <span className=\"his\">Hisory</span>\n              <img src={xia_hui} style={{width: px(20)}} alt=\"\" />\n            </div>\n          </div>\n          <div className=\"hisTable\">\n            <div className=\"listTitleBox1\">\n              <p className=\"listTitle\">Temperature History</p>\n            </div>\n            <div className=\"table\" onScrollCapture={onScrollCapture}>\n              <Table\n                rowKey={\"examId\"}\n                columns={columns}\n                dataSource={petTemperatureData}\n                className=\"measuredTable\"\n                pagination={false}\n                scroll={{\n                  y: '80%'\n                }}\n              />\n            </div>\n            <Button className=\"exportBtn\">\n              <img src={exportHis} alt=\"\" style={{width: '30px', marginRight: '10px'}} />\n              Export History\n            </Button>\n          </div>\n        </div>\n      </Content>\n      {/*修改note弹窗 */}\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        open={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(MeasuredData);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",
    [
        "1181",
        "1182",
        "1183",
        "1184",
        "1185",
        "1186",
        "1187",
        "1188",
        "1189"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",
    [
        "1190",
        "1191",
        "1192",
        "1193",
        "1194",
        "1195"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\result\\index.jsx",
    [
        "1196",
        "1197",
        "1198",
        "1199",
        "1200",
        "1201",
        "1202",
        "1203",
        "1204",
        "1205",
        "1206",
        "1207",
        "1208"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio, message } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setQsmTimeType\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\nimport overnight from \"../../../../assets/img/overnight.png\";\nimport rapid from \"../../../../assets/img/rapid.png\";\nimport addSwab from \"../../../../assets/images/addSwab.png\";\nimport test1 from \"../../../../assets/images/test1.png\";\nimport success from \"../../../../assets/images/success.png\";\n\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\n\nlet storage = window.localStorage;\n\nconst Result = ({ petMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\n    const [value, setValue] = useState(1);\n    const [visible, setVisible] = useState(false)\n\n    const cutTitle = () => {\n        switch (value) {\n            case 1:\n                return (<>{`${'Insert new swab and '}`}<br />{`${'collect sample'}`}</>);\n            case 2:\n                return (<>{`${'Put new swab sample'}`}<br />{`${'to sensor'}`} </>);\n            case 3:\n                return (<>{`${'Test complete!'}`} </>);\n            default:\n                break;\n        }\n    }\n\n\n    const cutImage = () => {\n        switch (value) {\n            case 1:\n                return <img src={addSwab} alt=\"\" style={{ width: px(287 / 420 * 514), height: px(287) }} />;\n            case 2:\n                return <img src={test1} alt=\"\" style={{ width: px(287 / 566 * 682), height: px(287) }} />;\n            case 3:\n                return <img src={success} alt=\"\" style={{ width: px(287), height: px(287) }} />;\n            default:\n                break;\n        }\n    }\n\n    const onClick = () => {\n\n        switch (value) {\n            case 1: setValue(value + 1); break;\n\n            case 2:\n                let { petId, petName, birthday, speciesId, userId, firstName, lastName, phone } = petMessage\n                let species = 0\n                switch (speciesId) {\n                    case 1:\n                    case 11001:\n                        species = 1; break;\n                    default:\n                        break;\n                }\n                let pet = {\n                    id: petId,\n                    species,\n                }\n                if (petName) {\n                    pet.name = petName;\n                }\n                if (birthday) {\n                    pet.dob = birthday;\n                }\n\n\n                let pet_owner = {\n                    id: userId || storage.userId,\n                }\n                if (firstName) {\n                    pet_owner.name = firstName\n                }\n                if (lastName) {\n                    pet_owner.family_name = lastName\n                }\n                if (phone) {\n                    pet_owner.phone = phone\n                }\n\n\n                let { qsmEarPart, qsmTimeType } = qsmMessage\n                let kind = qsmEarPart === 1 ? 1 : 0\n                let sample_area = qsmTimeType\n                let test = {\n                    kind,\n                    sample_area\n                }\n                RunMeasurement(pet, pet_owner, test)\n\n                break;\n            case 3: cutPageType('linkPage'); break;\n            default:\n                break;\n        }\n\n    }\n    const RunMeasurement = async (pet, pet_owner, test) => {\n        let { qsmPart } = qsmMessage\n        let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\n        let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\n        let user_id = storage.userId;\n        console.log(\"🚀 ~ file: index.jsx ~ line 115 ~ RunMeasurement ~ storage.userId\", storage.userId)\n        let practice_id = storage.lastOrganization;\n        const SDK = require(\"qsm-otter-sdk\");\n\n        let num = 0\n\n        async function runMeasurement() {\n            try {\n                console.log('入参：', { qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test, num });\n                setVisible(true)\n                const res = await SDK.runMeasurement(qsmPart, API_KEY, ACCESS_TOKEN, user_id, practice_id, pet_owner, pet, test)\n                // let res = { status: 200 }\n                setVisible(false)\n\n\n                console.log(\"🚀 ~ file: index.jsx ~ line 112 ~ RunMeasurement ~ res\", res)\n                if (res.status === 200) {\n                    message.success(res.data.message)\n                    // qsmPart.close()\n                    console.log('关闭弹窗并调到下一页');\n                    setValue(3)\n                } else {\n                    message.error(res.statusText)\n                }\n\n\n\n            } catch (error) {\n                if (`${error}`.indexOf(`Failed to execute 'open' on 'SerialPort': The port is already open.`) !== -1) {\n                    if (num < 3) {\n                        num++\n                        try {\n                            qsmPart.close()\n                        } catch (error) {\n\n                        }\n\n                        setTimeout(() => {\n                            runMeasurement()\n                        }, 2000);\n\n                    }\n                } else {\n                    setVisible(false)\n                }\n                console.error('error', error)\n            }\n        }\n        runMeasurement()\n\n\n    }\n    const btnText = () => {\n        switch (value) {\n            case 1:\n                return 'Next'\n            case 2:\n                return 'Run Measurement'\n            case 3:\n                return 'Run New Test'\n            default:\n                break;\n        }\n    }\n    return (\n        <div className=\"qsmResult\">\n            <div className=\"topBox\">\n                <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n                    {cutTitle()}\n                </p>\n            </div>\n            <div className=\"imageBox\">\n                {cutImage()}\n            </div>\n            <div className=\"bottomBox\">\n                <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{btnText()}</Button>\n            </div>\n            <MyModal visible={visible} />\n        </div>\n    );\n\n};\n\nexport default connect(\n    (state) => ({\n        petMessage: state.petReduce.petDetailInfo,\n        qsmMessage: state.qsmReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setQsmTimeType\n    }\n)(Result);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx",
    [
        "1209",
        "1210",
        "1211",
        "1212"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Progress } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\nlet timer = null\r\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\r\n  const [time, setTime] = useState(60)\r\n  const timeLengthTo2 = (value) => {\r\n    if (`${value}`.length === 1) {\r\n      return `0${value}`\r\n    }\r\n    return `${value}`\r\n\r\n  }\r\n  const onClick = () => {\r\n    timer && clearInterval(timer)\r\n    cutPageType('result');\r\n  }\r\n  useEffect(() => {\r\n    timer && clearInterval(timer)\r\n    timer = setInterval(() => {\r\n      setTime(v => {\r\n        if (v === 0) {\r\n          timer && clearInterval(timer)\r\n          onClick()\r\n          return v\r\n        }\r\n        return v - 1\r\n      })\r\n\r\n    }, 1000)\r\n    return () => timer && clearInterval(timer)\r\n  }, [])\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Results Processing\r\n        </p>\r\n      </div>\r\n      <div className=\"middleBox\" style={{ margin: px(-100) }}>\r\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\r\n          Please wait for\r\n          <br />\r\n          accurate results\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <Progress\r\n          type=\"circle\"\r\n          percent={time / 60 * 100}\r\n          format={() => <div style={{ fontSize: '32px' }}>{`00:00:${timeLengthTo2(time)}`}</div>}\r\n          width={270}\r\n          strokeWidth={12}\r\n          strokeColor={'#FFA132'}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40), fontSize: '20px' }} onClick={onClick}>{`skip timer & procees`}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(TimerPage);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx",
    [
        "1213",
        "1214",
        "1215",
        "1216",
        "1217"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmEarPart\r\n} from \"../../../../store/actions\";\r\n\r\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\r\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\r\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\r\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\n\r\nconst SwabPetEar = ({ petMessage, hardwareMessage, cutPageType, setQsmEarPart, qsmMessage }) => {\r\n  let {\r\n    petSpeciesBreedId,\r\n  } = petMessage;\r\n  const [value, setValue] = useState(1);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const imagetypeEvent = () => {\r\n    if (value === 1) {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatRightEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogRightEar} alt=\"\" />;\r\n      }\r\n    } else {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <img src={CatLeftEar} alt=\"\" />;\r\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      } else {\r\n        return <img src={DogLeftEar} alt=\"\" />;\r\n      }\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    //这里需要将qsm的耳朵记录下来\r\n    setQsmEarPart(value)\r\n    cutPageType('experimentalPage');\r\n    // if (value === 1) {\r\n    //   setValue(2);\r\n    // } else {\r\n    //   cutPageType('experimentalPage');\r\n    // }\r\n\r\n  }\r\n  useEffect(() => {\r\n    setValue(qsmMessage.qsmEarPart)\r\n  }, [])\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          Swab Pet's Ear\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {imagetypeEvent()}\r\n      </div>\r\n      <div className=\"radioBox\">\r\n        <Radio.Group onChange={onChange} value={value}>\r\n          <Radio value={1}>Right Ear</Radio>\r\n          <Radio value={2}>Left Ear</Radio>\r\n        </Radio.Group>\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce\r\n\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmEarPart\r\n  }\r\n)(SwabPetEar);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx",
    [
        "1218",
        "1219",
        "1220",
        "1221",
        "1222",
        "1223",
        "1224"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, message } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n} from \"../../../../store/actions\";\r\n\r\nimport PlugInOtter from \"../../../../assets/img/PlugInOtter.png\";\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage, cutPageType, qsmConnectStatus, isNext = false }) => {\r\n  const [nextType, setNextType] = useState(false);\r\n  const [serialNumber, setSerialNumber] = useState('')\r\n\r\n\r\n  const onClick = async () => {\r\n\r\n    await register()\r\n    await verify()\r\n    setNextType(true);\r\n  }\r\n  const register = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let userId = storage.userId, userName = storage.userName, email = storage.userEmail, orgId = storage.lastOrganization, orgName = storage.orgName\r\n\r\n    console.log('register入参：', { userId, userName, email, orgId, orgName });\r\n    const response = await SDK.registerUserAndPractice(\"EX1QrGQTwPAjkJ0p7EEG7A\", \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\", userId, userName, email, orgId, orgName)\r\n    console.log('register入参：', response, response.status)\r\n    let res = response\r\n    if (res.status === 200) {\r\n      message.success(res.data.message)\r\n    } else {\r\n      let zhenshu = parseInt(res.status / 100)\r\n      switch (zhenshu) {\r\n        case 2:\r\n          message.success(res.data.message || res.data.error)\r\n          break;\r\n        case 4: message.warn(res.data.message || res.data.error)\r\n          break;\r\n        case 5:\r\n          message.warn(res.data.message || res.data.error)\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  const verify = async () => {\r\n    let storage = window.localStorage;\r\n    const SDK = require(\"qsm-otter-sdk\");\r\n    let user_id = storage.userId;\r\n    let practice_id = storage.lastOrganization;\r\n    let serial_number = serialNumber;\r\n    let API_KEY = \"EX1QrGQTwPAjkJ0p7EEG7A\"\r\n    let ACCESS_TOKEN = \"ZQh5q7Uv1UPsC8RY0eDoSf3eYrMzDHxYkJExG13k\"\r\n\r\n    await SDK.verifyInstrument(API_KEY, ACCESS_TOKEN, user_id, practice_id, serial_number)\r\n      .then(res => {\r\n        console.log('verify', res)\r\n        if (res.status === 200) {\r\n          message.success(res.data.message)\r\n        } else {\r\n          let zhenshu = parseInt(res.status / 100)\r\n          switch (zhenshu) {\r\n            case 2:\r\n              message.success(res.data.message || res.data.error)\r\n              break;\r\n            case 4: message.warn(res.data.message || res.data.error)\r\n              break;\r\n            case 5:\r\n              message.warn(res.data.message || res.data.error)\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setNextType(false);\r\n    return (() => { })\r\n\r\n  }, [petMessage.petId])\r\n  useEffect(() => {\r\n\r\n    if (isNext) {\r\n      setNextType(true)\r\n    }\r\n  }, [])\r\n\r\n\r\n  const body = () => {\r\n    if (!nextType) {\r\n      return (\r\n        <>\r\n          <div className=\"middleBox\">\r\n            <Input placeholder=\"Please enter your serial number\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\r\n              value={serialNumber}\r\n              onChange={(val) => setSerialNumber(val.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"bottomBox\">\r\n            <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick} >Next</Button>\r\n          </div>\r\n        </>\r\n      )\r\n    } else {\r\n      if (qsmConnectStatus === 'disconnected') {\r\n        return (\r\n          <div className=\"imageBox\">\r\n            <img src={PlugInOtter} alt=\"\" style={{ height: px(360) }} />\r\n          </div>\r\n        )\r\n      } else {\r\n        cutPageType('swabPetEarPage')\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {!nextType ? 'Register OtterEQ' : 'Plug in OtterEQ'}\r\n        </p>\r\n      </div>\r\n      {\r\n        body()\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmConnectStatus: state.qsmReduce.qsmConnectStatus,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n  }\r\n)(LinkEquipment);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx",
    [
        "1225",
        "1226",
        "1227",
        "1228",
        "1229",
        "1230",
        "1231",
        "1232"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Layout, Button, Input, Radio } from \"antd\";\r\nimport { px } from \"../../../../utils/px\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setQsmTimeType\r\n} from \"../../../../store/actions\";\r\n\r\nimport swirl from \"../../../../assets/img/swirl.png\";\r\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\r\nimport label from \"../../../../assets/img/label.png\";\r\nimport Incubator from \"../../../../assets/img/Incubator.png\";\r\n\r\nimport overnight from \"../../../../assets/img/overnight.png\";\r\nimport rapid from \"../../../../assets/img/rapid.png\";\r\nimport dui from \"../../../../assets/img/dui1.png\";\r\n\r\n\r\nimport moment from \"moment\";\r\nimport _ from \"lodash\";\r\nimport \"./index.less\";\r\n\r\nconst lists = [\r\n  {\r\n\r\n    title: 'Rapid Test Prep',\r\n    text: 'Mix sample swab in elution buffer for 60 seconds.',\r\n    img: rapid\r\n  },\r\n  {\r\n    title: 'Overnight test prep',\r\n    text: 'Swirl a fresh sterile swab on the surface of the culture medium.',\r\n    img: overnight\r\n  }\r\n]\r\n\r\nconst ExperimentalPage = ({ petMessage, hardwareMessage, cutPageType, setQsmTimeType, qsmMessage }) => {\r\n  const [value, setValue] = useState(1);\r\n  // const [value, setValue] = useState(3);\r\n  const [type, setType] = useState(0)\r\n\r\n  const cutTitle = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\r\n      case 2:\r\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\r\n      case 3:\r\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\r\n      case 4:\r\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\r\n      case 5:\r\n        return (<>{`${'Select Test Type'}`} </>);\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n  const itemList = () => {\r\n    let options = lists.map((item, index) => {\r\n      return (\r\n        <li key={index.toString()}>\r\n          <div className=\"liItem\" onClick={() => {\r\n            setType(index)\r\n            setQsmTimeType(index)\r\n          }}>\r\n            <div className=\"img\">\r\n              <img src={item.img} />\r\n            </div>\r\n            <div className=\"textbox\">\r\n              <h5 className=\"title\">{item.title}</h5>\r\n              <div className=\"text\">{item.text}</div>\r\n            </div>\r\n            <div className=\"select\">\r\n              {type === index ?\r\n                <img src={dui} alt=\"\" /> :\r\n                <div style={{ width: '30px' }} />\r\n              }\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        </li>\r\n      )\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  const cutImage = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 2:\r\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 3:\r\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 4:\r\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\r\n      case 5:\r\n        return <div className=\"qsmSelectTime\">\r\n          {itemList()}\r\n        </div>\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (value !== 5) {\r\n      setValue(value + 1)\r\n    } else {\r\n      if (type === 0) {\r\n        cutPageType('timerPage');\r\n      } else {\r\n        cutPageType('result');\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setType(qsmMessage.qsmTimeType)\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"topBox\">\r\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\r\n          {cutTitle()}\r\n        </p>\r\n      </div>\r\n      <div className=\"imageBox\">\r\n        {cutImage()}\r\n      </div>\r\n      <div className=\"bottomBox\">\r\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    qsmMessage: state.qsmReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setQsmTimeType\r\n  }\r\n)(ExperimentalPage);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mabelPage\\components\\linkEquipment\\index.jsx",
    [
        "1233",
        "1234",
        "1235",
        "1236",
        "1237",
        "1238"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Input, Card, List } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport scale from \"../../../../assets/img/scale.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, setSelectHardwareType }) => {\n  let history = useHistory();\n  const data = [\n    {\n      title: 'Last 24 hrs',\n      number: '1'\n    },\n    {\n      title: 'Last 7 days',\n      number: '3'\n    },\n    {\n      title: 'Days to goal',\n      number: '33'\n    },\n    {\n      title: 'Ideal Weight',\n      number: '42'\n    },\n  ];\n  const [planType, setPlanType] = useState(false);\n\n  useEffect(() => {\n    console.log('electronStore.get(`${petMessage.petId}-planType`): ', electronStore.get(`${petMessage.petId}-planType`));\n    setPlanType(electronStore.get(`${petMessage.petId}-planType`) ? true : false);\n  }, [petMessage.petId]);\n\n\n\n  return (\n    <div className=\"contentBox\">\n      {\n        planType ?\n          (\n            <>\n              <div className=\"topBox annulusBox\">\n                <div className=\"excircle\">\n                  <div className=\"circleContentBox\">\n                    <img src={scale} alt=\"\" />\n                    <div className=\"floatBox\">\n                      <div className=\"weightTitle\">\n                        <p>70</p>\n                        <p>lbs</p>\n                      </div>\n                      <div className=\"identification\">\n                        <p>Current Weight</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"middleBox\">\n                <div className=\"bodyState\">\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Fat Percent: 88%</p>\n                  </div>\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Condition Score: 9</p>\n                  </div>\n                </div>\n                <p className=\"hintTitle\">23 lbs over ideal weight</p>\n              </div>\n              <div className=\"bottomBox\">\n                <List\n                  dataSource={data}\n                  renderItem={(item) => (\n                    <div className=\"listBox\">\n                      <List.Item>\n                        <div className=\"item\">\n                          <div className=\"top\">\n                            <p>{item.title}</p>\n                          </div>\n                          <div className=\"bottom\">\n                            <p>{item.number}</p>\n                          </div>\n                        </div>\n                      </List.Item>\n                    </div>\n                  )}\n                />\n              </div>\n            </>\n          )\n          :\n          (\n            <div className=\"planBox\">\n              <p className=\"title\">\n                {`${petMessage.petName}`} is not enrolled<br />in a feeding plan\n              </p>\n              <p className=\"recommendedTitle\">A Mabel smart bowl scale is recommended.</p>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  block\n                  onClick={() => {\n                    setSelectHardwareType('prescribePlan');\n                  }}\n                >\n                  Prescribe Feeding Plan\n                </Button>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\motionCamera\\components\\linkEquipment\\index.jsx",
    [
        "1239",
        "1240",
        "1241",
        "1242",
        "1243",
        "1244",
        "1245",
        "1246",
        "1247",
        "1248",
        "1249"
    ],
    "import React, { useEffect, useState, useRef } from \"react\";\n// import html2canvas from 'html2canvas';\nimport { Button, Input, Card, List, Image, } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport takePhto from \"../../../../assets/img/takePhto.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { px } from \"../../../../utils/px\";\nimport MyModal from \"../../../../utils/myModal/MyModal\";\n\nlet loadVidio = false\nlet timer = null\nconst LinkEquipment = ({ petMessage, }) => {\n  let history = useHistory();\n  const [ip, setIp] = useState('');\n  const [showIp, setShowIp] = useState('')\n  const [loading, setLoading] = useState(false)\n  const next = () => {\n    setLoading(true)\n    setIp(showIp)\n    loadVidio = false\n    timer && clearTimeout(timer)\n    timer = setTimeout(() => {\n      if (!loadVidio) {\n        console.log('视频加载失败，前往重新获取');\n        setLoading(false)\n      }\n    }, 5000);\n  }\n\n  const inputIp = () => {\n    return (\n      <div className=\"inputIp\">\n        <div className=\"title\">Please enter the IP<br />address</div>\n\n        <div className=\"middleBox\">\n          <Input placeholder=\"192.168.0.204\" className=\"middleInput\" style={{ width: px(300), height: px(50) }}\n            value={showIp}\n            onChange={(val) => setShowIp(val.target.value)}\n          />\n        </div>\n        <div className=\"bottomBox\">\n          <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={next} >Next</Button>\n        </div>\n      </div>\n    )\n  }\n  const takePhoto = async () => {\n\n    // // let res = await html2canvas(document.getElementById('aphoto'), { useCORS: true })\n    // // console.log(\"🚀 ~ file: index.jsx ~ line 65 ~ takePhoto ~ res\", res)\n    // console.log('电控');\n    // html2canvas(document.getElementById('aphoto'), {\n    //   allowTaint: false,\n    //   useCORS: true,\n    //   proxy: 'http://192.168.0.203:81'\n    // }).then(function (canvas) {\n    //   console.log(canvas);\n    //   // toImage\n    //   const dataImg = new Image()\n    //   dataImg.src = canvas.toDataURL('image/png')\n    //   const alink = document.createElement(\"a\");\n    //   alink.href = dataImg.src;\n    //   alink.download = \"testImg.jpg\";\n    //   alink.click();\n    // });\n\n\n  }\n  const urlErrModal = () => {\n    return (\n      <div className=\"urlErrModal\">\n        <div className=\"close\">\n\n        </div>\n\n      </div>\n    )\n  }\n\n  const vidio = () => {\n    return (\n      <div className=\"vidio\">\n        <div className=\"vidioFa\">\n          <div id=\"aphoto\">\n            <img\n              onError={(err) => {\n                console.log(\"🚀 ~ file: index.jsx ~ line 59 ~ vidio ~ err\", err)\n                timer && clearTimeout(timer)\n                setLoading(false)\n              }}\n              onLoad={e => {\n                console.log('e', e);\n                setLoading(false)\n                loadVidio = true\n                timer && clearTimeout(timer)\n              }}\n\n              src={`http://${ip}:81`} />\n          </div>\n\n\n\n\n        </div>\n        <div\n          className=\"btn\"\n          onClick={takePhoto}\n        >\n          <img src={takePhto} alt=\"\" />\n        </div>\n\n        <MyModal\n          visible={loading}\n        // element={urlErrModal()}\n        />\n\n\n\n\n      </div>\n\n    )\n\n\n  }\n\n  // useEffect(() => {\n  //   setIp('')\n  // }, [])\n\n\n\n\n\n  return (\n    <div id=\"motionCameraBody\">\n      {ip ? vidio() : inputIp()}\n      {/* {inputIp()} */}\n      {/* {vidio()} */}\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx",
    [
        "1250",
        "1251",
        "1252",
        "1253",
        "1254",
        "1255",
        "1256",
        "1257",
        "1258"
    ],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx",
    [
        "1259"
    ],
    "import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n  setSelectHardwareType\r\n} from \"./../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n  setSelectHardwareType\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n          onClick={() => {\r\n            setMenuNum(\"1\");\r\n            setSelectHardwareType('add');\r\n          }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25), }}\r\n\r\n\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => { },\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum, setSelectHardwareType }\r\n)(HardAndPetsUI);\r\n",
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",
    [],
    "C:\\Users\\nonagon\\Desktop\\desktop\\Mella_Desktop_Super_USB\\src\\components\\baseNotDetectedModal\\index.jsx",
    [
        "1260",
        "1261",
        "1262"
    ],
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1264",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 24
    },
    {
        "ruleId": "1267",
        "replacedBy": "1268"
    },
    {
        "ruleId": "1269",
        "replacedBy": "1270"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1271",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1272",
        "line": 4,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1273",
        "line": 18,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 18,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 29,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 29,
        "endColumn": 15
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 99,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 105,
        "endColumn": 6
    },
    {
        "ruleId": "1279",
        "severity": 1,
        "message": "1280",
        "line": 112,
        "column": 41,
        "nodeType": "1281",
        "messageId": "1282",
        "endLine": 112,
        "endColumn": 43
    },
    {
        "ruleId": "1279",
        "severity": 1,
        "message": "1280",
        "line": 150,
        "column": 41,
        "nodeType": "1281",
        "messageId": "1282",
        "endLine": 150,
        "endColumn": 43
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1283",
        "line": 257,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 257,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1284",
        "line": 257,
        "column": 49,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 257,
        "endColumn": 55
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 507,
        "column": 15,
        "nodeType": "1287",
        "endLine": 507,
        "endColumn": 63
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 537,
        "column": 15,
        "nodeType": "1287",
        "endLine": 537,
        "endColumn": 63
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 558,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 561,
        "endColumn": 6
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 562,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 565,
        "endColumn": 6
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1288",
        "line": 679,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 679,
        "endColumn": 20
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1289",
        "line": 682,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 682,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1283",
        "line": 805,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 805,
        "endColumn": 39
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1290",
        "line": 805,
        "column": 79,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 805,
        "endColumn": 84
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1291",
        "line": 805,
        "column": 117,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 805,
        "endColumn": 139
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1292",
        "line": 19,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 19,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1293",
        "line": 26,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1294",
        "line": 352,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 352,
        "endColumn": 17
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 425,
        "column": 13,
        "nodeType": "1287",
        "endLine": 429,
        "endColumn": 56
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1295",
        "line": 459,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 459,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1296",
        "line": 460,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 460,
        "endColumn": 13
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 603,
        "column": 15,
        "nodeType": "1287",
        "endLine": 603,
        "endColumn": 50
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 77,
        "column": 11,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 98,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1299",
        "line": 30,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1300",
        "line": 4,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1301",
        "line": 6,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 6,
        "endColumn": 7
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1302",
        "line": 390,
        "column": 21,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 390,
        "endColumn": 27
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 533,
        "column": 17,
        "nodeType": "1287",
        "endLine": 533,
        "endColumn": 54
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 585,
        "column": 17,
        "nodeType": "1287",
        "endLine": 585,
        "endColumn": 60
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1303",
        "line": 15,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 15,
        "endColumn": 14
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 70,
        "column": 13,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 99,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1304",
        "line": 298,
        "column": 45,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 298,
        "endColumn": 59
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1305",
        "line": 298,
        "column": 61,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 298,
        "endColumn": 75
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1300",
        "line": 2,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 34
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1301",
        "line": 2,
        "column": 60,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 64
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1273",
        "line": 4,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1306",
        "line": 6,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 6,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1307",
        "line": 7,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 7,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1308",
        "line": 8,
        "column": 14,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 8,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1309",
        "line": 10,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 10,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1310",
        "line": 15,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 15,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1311",
        "line": 20,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1312",
        "line": 21,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 21,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1313",
        "line": 22,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 29,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 29,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1314",
        "line": 96,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 96,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1315",
        "line": 331,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 331,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1273",
        "line": 11,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 11,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 22,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1314",
        "line": 66,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 66,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1316",
        "line": 338,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 338,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1317",
        "line": 359,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 359,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1318",
        "line": 16,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 27,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 27,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1319",
        "line": 43,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 43,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1320",
        "line": 43,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 43,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1314",
        "line": 58,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 58,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1288",
        "line": 163,
        "column": 43,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 163,
        "endColumn": 52
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1321",
        "line": 163,
        "column": 54,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 163,
        "endColumn": 59
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1322",
        "line": 8,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 8,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1323",
        "line": 50,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 50,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1324",
        "line": 51,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 51,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1325",
        "line": 54,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 54,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1326",
        "line": 54,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 54,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1327",
        "line": 121,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 121,
        "endColumn": 18
    },
    {
        "ruleId": "1328",
        "severity": 1,
        "message": "1329",
        "line": 291,
        "column": 59,
        "nodeType": "1330",
        "messageId": "1331",
        "endLine": 291,
        "endColumn": 60
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1332",
        "line": 9,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1333",
        "line": 34,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 34,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1334",
        "line": 36,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 36,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1335",
        "line": 38,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 38,
        "endColumn": 18
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1337",
        "line": 92,
        "column": 6,
        "nodeType": "1338",
        "endLine": 92,
        "endColumn": 8,
        "suggestions": "1339"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1340",
        "line": 2,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1301",
        "line": 2,
        "column": 60,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 64
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1341",
        "line": 14,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 14,
        "endColumn": 11
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1342",
        "line": 105,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 105,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1343",
        "line": 105,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 105,
        "endColumn": 46
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1344",
        "line": 105,
        "column": 48,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 105,
        "endColumn": 57
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1345",
        "line": 232,
        "column": 103,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 232,
        "endColumn": 112
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1283",
        "line": 392,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 392,
        "endColumn": 21
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 651,
        "column": 15,
        "nodeType": "1287",
        "endLine": 651,
        "endColumn": 63
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1346",
        "line": 668,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 668,
        "endColumn": 20
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 687,
        "column": 15,
        "nodeType": "1287",
        "endLine": 687,
        "endColumn": 63
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 724,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 727,
        "endColumn": 6
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 728,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 731,
        "endColumn": 6
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1347",
        "line": 833,
        "column": 51,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 833,
        "endColumn": 68
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1290",
        "line": 833,
        "column": 70,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 833,
        "endColumn": 75
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1346",
        "line": 833,
        "column": 108,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 833,
        "endColumn": 117
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1340",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1348",
        "line": 2,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1301",
        "line": 2,
        "column": 41,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 45
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1349",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 30
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1350",
        "line": 18,
        "column": 47,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 18,
        "endColumn": 68
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1351",
        "line": 74,
        "column": 61,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 74,
        "endColumn": 64
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1352",
        "line": 74,
        "column": 66,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 74,
        "endColumn": 75
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1353",
        "line": 216,
        "column": 56,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 216,
        "endColumn": 63
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1354",
        "line": 217,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 217,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1355",
        "line": 19,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 19,
        "endColumn": 10
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 165,
        "column": 9,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 183,
        "endColumn": 10
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 81,
        "column": 13,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 110,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1304",
        "line": 286,
        "column": 45,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 286,
        "endColumn": 59
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1305",
        "line": 286,
        "column": 61,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 286,
        "endColumn": 75
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 22,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1319",
        "line": 45,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 45,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1320",
        "line": 45,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 45,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1314",
        "line": 61,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 61,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1344",
        "line": 144,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 144,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1343",
        "line": 144,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 144,
        "endColumn": 37
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 544,
        "column": 19,
        "nodeType": "1287",
        "endLine": 551,
        "endColumn": 61
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 559,
        "column": 19,
        "nodeType": "1287",
        "endLine": 567,
        "endColumn": 30
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1356",
        "line": 2,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1357",
        "line": 3,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1358",
        "line": 4,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1359",
        "line": 5,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 20
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1360",
        "line": 74,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 74,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1361",
        "line": 74,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 74,
        "endColumn": 37
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1362",
        "line": 74,
        "column": 39,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 74,
        "endColumn": 45
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1274",
        "line": 23,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1319",
        "line": 52,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 52,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1320",
        "line": 52,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 52,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1314",
        "line": 149,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 149,
        "endColumn": 22
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 519,
        "column": 17,
        "nodeType": "1287",
        "endLine": 519,
        "endColumn": 54
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 572,
        "column": 17,
        "nodeType": "1287",
        "endLine": 572,
        "endColumn": 60
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1303",
        "line": 10,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 10,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1363",
        "line": 23,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1364",
        "line": 23,
        "column": 21,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 37
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1365",
        "line": 30,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 14
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 218,
        "column": 13,
        "nodeType": "1287",
        "endLine": 222,
        "endColumn": 56
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1315",
        "line": 254,
        "column": 21,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 254,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1302",
        "line": 254,
        "column": 31,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 254,
        "endColumn": 37
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 415,
        "column": 37,
        "nodeType": "1287",
        "endLine": 415,
        "endColumn": 72
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1366",
        "line": 1,
        "column": 24,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1367",
        "line": 5,
        "column": 16,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1368",
        "line": 5,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 40
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1369",
        "line": 50,
        "column": 69,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 50,
        "endColumn": 79
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 153,
        "column": 9,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 163,
        "endColumn": 10
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 177,
        "column": 25,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 187,
        "endColumn": 26
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 192,
        "column": 21,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 216,
        "endColumn": 22
    },
    {
        "ruleId": "1370",
        "severity": 1,
        "message": "1371",
        "line": 211,
        "column": 25,
        "nodeType": "1372",
        "messageId": "1373",
        "endLine": 211,
        "endColumn": 32
    },
    {
        "ruleId": "1370",
        "severity": 1,
        "message": "1371",
        "line": 213,
        "column": 25,
        "nodeType": "1372",
        "messageId": "1373",
        "endLine": 215,
        "endColumn": 69
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1374",
        "line": 241,
        "column": 24,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 241,
        "endColumn": 32
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1375",
        "line": 241,
        "column": 34,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 241,
        "endColumn": 41
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1376",
        "line": 241,
        "column": 43,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 241,
        "endColumn": 58
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1351",
        "line": 242,
        "column": 13,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 242,
        "endColumn": 16
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 365,
        "column": 59,
        "nodeType": "1287",
        "endLine": 365,
        "endColumn": 79
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 367,
        "column": 59,
        "nodeType": "1287",
        "endLine": 367,
        "endColumn": 77
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 2,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 32
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1378",
        "line": 73,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 73,
        "endColumn": 14
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 496,
        "column": 9,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 503,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1379",
        "line": 534,
        "column": 22,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 534,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1380",
        "line": 534,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 534,
        "endColumn": 40
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1381",
        "line": 688,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 688,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1382",
        "line": 732,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 732,
        "endColumn": 26
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 796,
        "column": 29,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 796,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1386",
        "line": 886,
        "column": 13,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 886,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1387",
        "line": 889,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 889,
        "endColumn": 30
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1388",
        "line": 891,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 891,
        "endColumn": 30
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1389",
        "line": 893,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 893,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1390",
        "line": 895,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 895,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1391",
        "line": 900,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 900,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1392",
        "line": 920,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 920,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1382",
        "line": 947,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 947,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1393",
        "line": 1068,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1068,
        "endColumn": 22
    },
    {
        "ruleId": "1370",
        "severity": 1,
        "message": "1394",
        "line": 1287,
        "column": 13,
        "nodeType": "1372",
        "messageId": "1395",
        "endLine": 1288,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 2,
        "column": 27,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1397",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 20
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1398",
        "line": 8,
        "column": 14,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 8,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1340",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1399",
        "line": 2,
        "column": 16,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 2,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1300",
        "line": 2,
        "column": 33,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 38
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1349",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 30
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1400",
        "line": 36,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 36,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1401",
        "line": 67,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 67,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1402",
        "line": 67,
        "column": 24,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 67,
        "endColumn": 38
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1403",
        "line": 95,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 95,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1404",
        "line": 95,
        "column": 21,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 95,
        "endColumn": 33
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1405",
        "line": 128,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 128,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1406",
        "line": 210,
        "column": 13,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 210,
        "endColumn": 20
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 784,
        "column": 17,
        "nodeType": "1287",
        "endLine": 784,
        "endColumn": 62
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 789,
        "column": 17,
        "nodeType": "1287",
        "endLine": 789,
        "endColumn": 65
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 844,
        "column": 15,
        "nodeType": "1287",
        "endLine": 850,
        "endColumn": 16
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 853,
        "column": 15,
        "nodeType": "1287",
        "endLine": 859,
        "endColumn": 16
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 940,
        "column": 17,
        "nodeType": "1287",
        "endLine": 940,
        "endColumn": 62
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 944,
        "column": 15,
        "nodeType": "1287",
        "endLine": 944,
        "endColumn": 64
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 1061,
        "column": 13,
        "nodeType": "1287",
        "endLine": 1065,
        "endColumn": 14
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 1142,
        "column": 15,
        "nodeType": "1287",
        "endLine": 1150,
        "endColumn": 16
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 1165,
        "column": 13,
        "nodeType": "1287",
        "endLine": 1165,
        "endColumn": 76
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 1236,
        "column": 15,
        "nodeType": "1287",
        "endLine": 1244,
        "endColumn": 16
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 1268,
        "column": 15,
        "nodeType": "1287",
        "endLine": 1272,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1407",
        "line": 1378,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1378,
        "endColumn": 16
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1408",
        "line": 1406,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1406,
        "endColumn": 8,
        "suggestions": "1409"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1410",
        "line": 1410,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1410,
        "endColumn": 32,
        "suggestions": "1411"
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 1464,
        "column": 15,
        "nodeType": "1287",
        "endLine": 1464,
        "endColumn": 59
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 1649,
        "column": 19,
        "nodeType": "1287",
        "endLine": 1649,
        "endColumn": 54
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 1651,
        "column": 19,
        "nodeType": "1287",
        "endLine": 1651,
        "endColumn": 53
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1414",
        "line": 15,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 15,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1415",
        "line": 16,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1416",
        "line": 18,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 18,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1417",
        "line": 54,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 54,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1418",
        "line": 73,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 73,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 2,
        "column": 27,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1398",
        "line": 7,
        "column": 14,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 7,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1419",
        "line": 10,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 10,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1420",
        "line": 20,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1421",
        "line": 51,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 51,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1422",
        "line": 61,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 61,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1423",
        "line": 71,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 71,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1424",
        "line": 81,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 81,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1425",
        "line": 91,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 91,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1426",
        "line": 101,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 101,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1427",
        "line": 5,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 18
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1428",
        "line": 283,
        "column": 6,
        "nodeType": "1338",
        "endLine": 283,
        "endColumn": 8,
        "suggestions": "1429"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1430",
        "line": 324,
        "column": 6,
        "nodeType": "1338",
        "endLine": 324,
        "endColumn": 36,
        "suggestions": "1431"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1432",
        "line": 16,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 12
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1433",
        "line": 54,
        "column": 6,
        "nodeType": "1338",
        "endLine": 54,
        "endColumn": 41,
        "suggestions": "1434"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1435",
        "line": 30,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 18
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1436",
        "line": 194,
        "column": 6,
        "nodeType": "1338",
        "endLine": 194,
        "endColumn": 23,
        "suggestions": "1437"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1438",
        "line": 85,
        "column": 6,
        "nodeType": "1338",
        "endLine": 85,
        "endColumn": 8,
        "suggestions": "1439"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 13,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 13,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1441",
        "line": 13,
        "column": 14,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 13,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1442",
        "severity": 1,
        "message": "1443",
        "line": 1,
        "column": 1,
        "nodeType": "1444",
        "endLine": 256,
        "endColumn": 3
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 1,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 19,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 19,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1448",
        "line": 26,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 26,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1324",
        "line": 27,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 27,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 1,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 19,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 19,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 20,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1449",
        "line": 27,
        "column": 29,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 27,
        "endColumn": 45
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1450",
        "line": 28,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 28,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1451",
        "line": 28,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 28,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 30,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1452",
        "line": 34,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 34,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1453",
        "line": 126,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 126,
        "endColumn": 23
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1454",
        "line": 145,
        "column": 6,
        "nodeType": "1338",
        "endLine": 145,
        "endColumn": 8,
        "suggestions": "1455"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1456",
        "line": 167,
        "column": 6,
        "nodeType": "1338",
        "endLine": 167,
        "endColumn": 8,
        "suggestions": "1457"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1458",
        "line": 23,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 26,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1459",
        "line": 29,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 29,
        "endColumn": 32
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1460",
        "line": 29,
        "column": 34,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 29,
        "endColumn": 39
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1461",
        "line": 116,
        "column": 6,
        "nodeType": "1338",
        "endLine": 116,
        "endColumn": 8,
        "suggestions": "1462"
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 168,
        "column": 19,
        "nodeType": "1287",
        "endLine": 168,
        "endColumn": 47
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1463",
        "line": 12,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 12,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1309",
        "line": 15,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 15,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1464",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1465",
        "line": 39,
        "column": 12,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 39,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1466",
        "line": 40,
        "column": 12,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 40,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1467",
        "line": 40,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 40,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1468",
        "line": 12,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 12,
        "endColumn": 52
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1469",
        "line": 22,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1470",
        "line": 24,
        "column": 33,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 44
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1471",
        "line": 156,
        "column": 6,
        "nodeType": "1338",
        "endLine": 156,
        "endColumn": 8,
        "suggestions": "1472"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1272",
        "line": 5,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1301",
        "line": 6,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 6,
        "endColumn": 7
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1332",
        "line": 9,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1348",
        "line": 13,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 13,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1473",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1474",
        "line": 83,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 83,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1475",
        "line": 94,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 94,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1476",
        "line": 98,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 98,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1477",
        "line": 101,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 101,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1478",
        "line": 113,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 113,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1469",
        "line": 119,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 119,
        "endColumn": 31
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1479",
        "line": 131,
        "column": 6,
        "nodeType": "1338",
        "endLine": 131,
        "endColumn": 32,
        "suggestions": "1480"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1481",
        "line": 141,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 141,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1482",
        "line": 453,
        "column": 24,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 453,
        "endColumn": 28
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 468,
        "column": 49,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 468,
        "endColumn": 51
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1483",
        "line": 603,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 603,
        "endColumn": 15
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 730,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 730,
        "endColumn": 35,
        "suggestions": "1488"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 735,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 735,
        "endColumn": 32,
        "suggestions": "1490"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 752,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 752,
        "endColumn": 35,
        "suggestions": "1491"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 757,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 757,
        "endColumn": 32,
        "suggestions": "1492"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 777,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 777,
        "endColumn": 35,
        "suggestions": "1493"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 782,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 782,
        "endColumn": 32,
        "suggestions": "1494"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 815,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 815,
        "endColumn": 35,
        "suggestions": "1495"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 820,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 820,
        "endColumn": 32,
        "suggestions": "1496"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 838,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 838,
        "endColumn": 35,
        "suggestions": "1497"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 843,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 843,
        "endColumn": 32,
        "suggestions": "1498"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 863,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 863,
        "endColumn": 35,
        "suggestions": "1499"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 868,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 868,
        "endColumn": 32,
        "suggestions": "1500"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 884,
        "column": 59,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 884,
        "endColumn": 60,
        "suggestions": "1501"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 884,
        "column": 165,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 884,
        "endColumn": 166,
        "suggestions": "1502"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1503",
        "line": 1281,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1281,
        "endColumn": 12
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 1437,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 1437,
        "endColumn": 35,
        "suggestions": "1504"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 1442,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 1442,
        "endColumn": 32,
        "suggestions": "1505"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1485",
        "line": 1458,
        "column": 34,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 1458,
        "endColumn": 35,
        "suggestions": "1506"
    },
    {
        "ruleId": "1484",
        "severity": 1,
        "message": "1489",
        "line": 1463,
        "column": 31,
        "nodeType": "1486",
        "messageId": "1487",
        "endLine": 1463,
        "endColumn": 32,
        "suggestions": "1507"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1508",
        "line": 1714,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1714,
        "endColumn": 21,
        "suggestions": "1509"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1510",
        "line": 1735,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1735,
        "endColumn": 8,
        "suggestions": "1511"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1512",
        "line": 1782,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1782,
        "endColumn": 23,
        "suggestions": "1513"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1514",
        "line": 1806,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1806,
        "endColumn": 26,
        "suggestions": "1515"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1516",
        "line": 1857,
        "column": 6,
        "nodeType": "1338",
        "endLine": 1857,
        "endColumn": 24,
        "suggestions": "1517"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 27,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 12,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 12,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 24,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1459",
        "line": 24,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 32
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1460",
        "line": 24,
        "column": 34,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 39
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1518",
        "line": 234,
        "column": 6,
        "nodeType": "1338",
        "endLine": 234,
        "endColumn": 22,
        "suggestions": "1519"
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1520",
        "line": 245,
        "column": 28,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 245,
        "endColumn": 30
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1521",
        "line": 248,
        "column": 6,
        "nodeType": "1338",
        "endLine": 248,
        "endColumn": 21,
        "suggestions": "1522"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1340",
        "line": 3,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 7
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1399",
        "line": 4,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 5,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1300",
        "line": 6,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 6,
        "endColumn": 8
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1523",
        "line": 67,
        "column": 11,
        "nodeType": "1287",
        "endLine": 72,
        "endColumn": 12
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 135,
        "column": 24,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 135,
        "endColumn": 26
    },
    {
        "ruleId": "1279",
        "severity": 1,
        "message": "1280",
        "line": 157,
        "column": 31,
        "nodeType": "1281",
        "messageId": "1282",
        "endLine": 157,
        "endColumn": 33
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1520",
        "line": 165,
        "column": 29,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 165,
        "endColumn": 31
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1524",
        "line": 185,
        "column": 6,
        "nodeType": "1338",
        "endLine": 185,
        "endColumn": 18,
        "suggestions": "1525"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 1,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 34,
        "column": 11,
        "nodeType": "1287",
        "endLine": 37,
        "endColumn": 13
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 41,
        "column": 13,
        "nodeType": "1287",
        "endLine": 44,
        "endColumn": 15
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 49,
        "column": 11,
        "nodeType": "1287",
        "endLine": 52,
        "endColumn": 13
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 59,
        "column": 11,
        "nodeType": "1287",
        "endLine": 62,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1527",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1528",
        "line": 4,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 16,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1530",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 20
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1448",
        "line": 20,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 20,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1531",
        "line": 23,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1532",
        "line": 24,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1533",
        "line": 24,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 24,
        "endColumn": 29
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 30,
        "column": 33,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 30,
        "endColumn": 35
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 32,
        "column": 17,
        "nodeType": "1287",
        "endLine": 32,
        "endColumn": 62
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 36,
        "column": 37,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 36,
        "endColumn": 39
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 38,
        "column": 17,
        "nodeType": "1287",
        "endLine": 38,
        "endColumn": 42
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1527",
        "line": 3,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1366",
        "line": 9,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1534",
        "line": 10,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 10,
        "endColumn": 7
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1535",
        "line": 46,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 46,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1536",
        "line": 58,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 58,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1355",
        "line": 59,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 59,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1537",
        "line": 62,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 62,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1538",
        "line": 63,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 63,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1539",
        "line": 114,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 114,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1540",
        "line": 118,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 118,
        "endColumn": 23
    },
    {
        "ruleId": "1328",
        "severity": 1,
        "message": "1329",
        "line": 177,
        "column": 61,
        "nodeType": "1330",
        "messageId": "1331",
        "endLine": 177,
        "endColumn": 62
    },
    {
        "ruleId": "1328",
        "severity": 1,
        "message": "1329",
        "line": 185,
        "column": 45,
        "nodeType": "1330",
        "messageId": "1331",
        "endLine": 185,
        "endColumn": 46
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1351",
        "line": 237,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 237,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1541",
        "line": 344,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 344,
        "endColumn": 21
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 623,
        "column": 9,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 630,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1379",
        "line": 678,
        "column": 22,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 678,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1380",
        "line": 678,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 678,
        "endColumn": 40
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1542",
        "line": 805,
        "column": 6,
        "nodeType": "1338",
        "endLine": 805,
        "endColumn": 13,
        "suggestions": "1543"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1544",
        "line": 827,
        "column": 6,
        "nodeType": "1338",
        "endLine": 827,
        "endColumn": 26,
        "suggestions": "1545"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 1,
        "column": 28,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1300",
        "line": 5,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1546",
        "line": 8,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 8,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1547",
        "line": 40,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 40,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1548",
        "line": 43,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 43,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 2,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 3,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1527",
        "line": 5,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 20,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 20,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1531",
        "line": 23,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1549",
        "line": 80,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 80,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1550",
        "line": 98,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 98,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1551",
        "line": 99,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 99,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1552",
        "line": 100,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 100,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1553",
        "line": 101,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 101,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1554",
        "line": 102,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 102,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1555",
        "line": 103,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 103,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1556",
        "line": 104,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 104,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1557",
        "line": 105,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 105,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1558",
        "line": 106,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 106,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1559",
        "line": 112,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 112,
        "endColumn": 23
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 235,
        "column": 11,
        "nodeType": "1287",
        "endLine": 235,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 237,
        "column": 11,
        "nodeType": "1287",
        "endLine": 237,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 241,
        "column": 11,
        "nodeType": "1287",
        "endLine": 241,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 243,
        "column": 11,
        "nodeType": "1287",
        "endLine": 243,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 247,
        "column": 11,
        "nodeType": "1287",
        "endLine": 247,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 249,
        "column": 11,
        "nodeType": "1287",
        "endLine": 249,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 253,
        "column": 11,
        "nodeType": "1287",
        "endLine": 253,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 255,
        "column": 11,
        "nodeType": "1287",
        "endLine": 255,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 259,
        "column": 11,
        "nodeType": "1287",
        "endLine": 259,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 261,
        "column": 11,
        "nodeType": "1287",
        "endLine": 261,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 265,
        "column": 11,
        "nodeType": "1287",
        "endLine": 265,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 267,
        "column": 11,
        "nodeType": "1287",
        "endLine": 267,
        "endColumn": 46
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 271,
        "column": 11,
        "nodeType": "1287",
        "endLine": 271,
        "endColumn": 50
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 273,
        "column": 11,
        "nodeType": "1287",
        "endLine": 273,
        "endColumn": 50
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 277,
        "column": 11,
        "nodeType": "1287",
        "endLine": 277,
        "endColumn": 56
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 279,
        "column": 11,
        "nodeType": "1287",
        "endLine": 279,
        "endColumn": 56
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 283,
        "column": 11,
        "nodeType": "1287",
        "endLine": 283,
        "endColumn": 63
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 285,
        "column": 11,
        "nodeType": "1287",
        "endLine": 285,
        "endColumn": 63
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 289,
        "column": 11,
        "nodeType": "1287",
        "endLine": 289,
        "endColumn": 63
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 291,
        "column": 11,
        "nodeType": "1287",
        "endLine": 291,
        "endColumn": 63
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 306,
        "column": 17,
        "nodeType": "1287",
        "endLine": 306,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 309,
        "column": 17,
        "nodeType": "1287",
        "endLine": 309,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 321,
        "column": 17,
        "nodeType": "1287",
        "endLine": 321,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 324,
        "column": 17,
        "nodeType": "1287",
        "endLine": 324,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 336,
        "column": 17,
        "nodeType": "1287",
        "endLine": 336,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 339,
        "column": 17,
        "nodeType": "1287",
        "endLine": 339,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 351,
        "column": 17,
        "nodeType": "1287",
        "endLine": 351,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 354,
        "column": 17,
        "nodeType": "1287",
        "endLine": 354,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 366,
        "column": 17,
        "nodeType": "1287",
        "endLine": 366,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 369,
        "column": 17,
        "nodeType": "1287",
        "endLine": 369,
        "endColumn": 67
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 381,
        "column": 17,
        "nodeType": "1287",
        "endLine": 381,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 384,
        "column": 17,
        "nodeType": "1287",
        "endLine": 384,
        "endColumn": 66
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 396,
        "column": 17,
        "nodeType": "1287",
        "endLine": 396,
        "endColumn": 70
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 399,
        "column": 17,
        "nodeType": "1287",
        "endLine": 399,
        "endColumn": 70
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 411,
        "column": 17,
        "nodeType": "1287",
        "endLine": 411,
        "endColumn": 76
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 414,
        "column": 17,
        "nodeType": "1287",
        "endLine": 414,
        "endColumn": 76
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 426,
        "column": 17,
        "nodeType": "1287",
        "endLine": 426,
        "endColumn": 83
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 429,
        "column": 17,
        "nodeType": "1287",
        "endLine": 429,
        "endColumn": 83
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1523",
        "line": 681,
        "column": 11,
        "nodeType": "1287",
        "endLine": 681,
        "endColumn": 49
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1560",
        "line": 702,
        "column": 6,
        "nodeType": "1338",
        "endLine": 702,
        "endColumn": 13,
        "suggestions": "1561"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1562",
        "line": 714,
        "column": 6,
        "nodeType": "1338",
        "endLine": 714,
        "endColumn": 18,
        "suggestions": "1563"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1564",
        "line": 747,
        "column": 6,
        "nodeType": "1338",
        "endLine": 747,
        "endColumn": 25,
        "suggestions": "1565"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1566",
        "line": 800,
        "column": 6,
        "nodeType": "1338",
        "endLine": 800,
        "endColumn": 44,
        "suggestions": "1567"
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 817,
        "column": 21,
        "nodeType": "1287",
        "endLine": 817,
        "endColumn": 100
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 834,
        "column": 19,
        "nodeType": "1287",
        "endLine": 834,
        "endColumn": 104
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1568",
        "line": 9,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1568",
        "line": 9,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1568",
        "line": 9,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1568",
        "line": 9,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1526",
        "line": 9,
        "column": 30,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1569",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 37
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 54,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 57
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1570",
        "line": 9,
        "column": 59,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 62
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1398",
        "line": 16,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1571",
        "line": 33,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 33,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1572",
        "line": 51,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 51,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1573",
        "line": 51,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 51,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1469",
        "line": 62,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 62,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1574",
        "line": 65,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 65,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1575",
        "line": 65,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 65,
        "endColumn": 27
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 138,
        "column": 11,
        "nodeType": "1287",
        "endLine": 145,
        "endColumn": 13
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 150,
        "column": 13,
        "nodeType": "1287",
        "endLine": 150,
        "endColumn": 33
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 196,
        "column": 18,
        "nodeType": "1287",
        "endLine": 196,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 198,
        "column": 18,
        "nodeType": "1287",
        "endLine": 198,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 200,
        "column": 18,
        "nodeType": "1287",
        "endLine": 200,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 202,
        "column": 18,
        "nodeType": "1287",
        "endLine": 202,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 226,
        "column": 11,
        "nodeType": "1287",
        "endLine": 233,
        "endColumn": 13
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 238,
        "column": 13,
        "nodeType": "1287",
        "endLine": 238,
        "endColumn": 63
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1576",
        "line": 369,
        "column": 6,
        "nodeType": "1338",
        "endLine": 369,
        "endColumn": 15,
        "suggestions": "1577"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1578",
        "line": 378,
        "column": 6,
        "nodeType": "1338",
        "endLine": 378,
        "endColumn": 8,
        "suggestions": "1579"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1438",
        "line": 133,
        "column": 6,
        "nodeType": "1338",
        "endLine": 133,
        "endColumn": 8,
        "suggestions": "1580"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 21,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 21,
        "endColumn": 14
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1582",
        "line": 153,
        "column": 6,
        "nodeType": "1338",
        "endLine": 153,
        "endColumn": 8,
        "suggestions": "1583"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1584",
        "line": 160,
        "column": 6,
        "nodeType": "1338",
        "endLine": 160,
        "endColumn": 19,
        "suggestions": "1585"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1438",
        "line": 170,
        "column": 6,
        "nodeType": "1338",
        "endLine": 170,
        "endColumn": 8,
        "suggestions": "1586"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 19
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 3,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1445",
        "line": 2,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 25
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1568",
        "line": 9,
        "column": 15,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1412",
        "line": 9,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1413",
        "line": 9,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 9,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1587",
        "line": 6,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 6,
        "endColumn": 10
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1384",
        "line": 97,
        "column": 20,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 97,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1588",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1589",
        "line": 2,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 23,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 14
    },
    {
        "ruleId": "1279",
        "severity": 1,
        "message": "1280",
        "line": 225,
        "column": 41,
        "nodeType": "1281",
        "messageId": "1282",
        "endLine": 225,
        "endColumn": 43
    },
    {
        "ruleId": "1279",
        "severity": 1,
        "message": "1280",
        "line": 237,
        "column": 47,
        "nodeType": "1281",
        "messageId": "1282",
        "endLine": 237,
        "endColumn": 49
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1321",
        "line": 451,
        "column": 23,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 451,
        "endColumn": 28
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1465",
        "line": 830,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 830,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1590",
        "line": 832,
        "column": 11,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 832,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1591",
        "line": 850,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 850,
        "endColumn": 18
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1592",
        "line": 938,
        "column": 65,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 938,
        "endColumn": 76
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1593",
        "line": 2,
        "column": 36,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1594",
        "line": 3,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 19,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 19,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 26,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1595",
        "line": 30,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1596",
        "line": 30,
        "column": 19,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 30,
        "endColumn": 29
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 65,
        "column": 16,
        "nodeType": "1287",
        "endLine": 65,
        "endColumn": 41
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 67,
        "column": 16,
        "nodeType": "1287",
        "endLine": 67,
        "endColumn": 41
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 69,
        "column": 16,
        "nodeType": "1287",
        "endLine": 69,
        "endColumn": 41
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 71,
        "column": 16,
        "nodeType": "1287",
        "endLine": 71,
        "endColumn": 41
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1597",
        "line": 77,
        "column": 3,
        "nodeType": "1265",
        "endLine": 77,
        "endColumn": 12,
        "suggestions": "1598"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1599",
        "line": 4,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 11
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1366",
        "line": 5,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 5,
        "endColumn": 8
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1600",
        "line": 7,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 7,
        "endColumn": 6
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1601",
        "line": 57,
        "column": 16,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 57,
        "endColumn": 20
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1503",
        "line": 62,
        "column": 5,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 62,
        "endColumn": 10
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1469",
        "line": 78,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 78,
        "endColumn": 31
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 141,
        "column": 18,
        "nodeType": "1287",
        "endLine": 141,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 143,
        "column": 18,
        "nodeType": "1287",
        "endLine": 143,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 145,
        "column": 18,
        "nodeType": "1287",
        "endLine": 145,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 147,
        "column": 18,
        "nodeType": "1287",
        "endLine": 147,
        "endColumn": 47
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 170,
        "column": 11,
        "nodeType": "1287",
        "endLine": 178,
        "endColumn": 13
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 183,
        "column": 13,
        "nodeType": "1287",
        "endLine": 183,
        "endColumn": 63
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1602",
        "line": 200,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 200,
        "endColumn": 22
    },
    {
        "ruleId": "1383",
        "severity": 1,
        "message": "1520",
        "line": 251,
        "column": 28,
        "nodeType": "1330",
        "messageId": "1385",
        "endLine": 251,
        "endColumn": 30
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1603",
        "line": 504,
        "column": 6,
        "nodeType": "1338",
        "endLine": 504,
        "endColumn": 13,
        "suggestions": "1604"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1578",
        "line": 513,
        "column": 6,
        "nodeType": "1338",
        "endLine": 513,
        "endColumn": 8,
        "suggestions": "1605"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1527",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 15
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1440",
        "line": 16,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 16,
        "endColumn": 12
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 29,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 29,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1446",
        "line": 32,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 32,
        "endColumn": 24
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 55,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 63,
        "endColumn": 6
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1606",
        "line": 80,
        "column": 6,
        "nodeType": "1338",
        "endLine": 80,
        "endColumn": 21,
        "suggestions": "1607"
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 127,
        "column": 17,
        "nodeType": "1287",
        "endLine": 127,
        "endColumn": 74
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 148,
        "column": 21,
        "nodeType": "1287",
        "endLine": 148,
        "endColumn": 69
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 168,
        "column": 25,
        "nodeType": "1287",
        "endLine": 175,
        "endColumn": 27
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 27,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 36
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1398",
        "line": 4,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1308",
        "line": 4,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 24
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1441",
        "line": 4,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 28
    },
    {
        "ruleId": "1297",
        "severity": 1,
        "message": "1298",
        "line": 252,
        "column": 9,
        "nodeType": "1287",
        "endLine": 267,
        "endColumn": 10
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 283,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 302,
        "endColumn": 6
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1608",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1609",
        "line": 2,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1332",
        "line": 2,
        "column": 33,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 38
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1610",
        "line": 12,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 12,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1611",
        "line": 13,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 13,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1612",
        "line": 14,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 14,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1613",
        "line": 15,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 15,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1614",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 17
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1615",
        "line": 18,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 18,
        "endColumn": 13
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 25,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 25,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 26,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 11,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 11,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 12,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 12,
        "endColumn": 9
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1616",
        "line": 42,
        "column": 6,
        "nodeType": "1338",
        "endLine": 42,
        "endColumn": 8,
        "suggestions": "1617"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1608",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1609",
        "line": 2,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 21,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 21,
        "endColumn": 14
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1618",
        "line": 70,
        "column": 6,
        "nodeType": "1338",
        "endLine": 70,
        "endColumn": 8,
        "suggestions": "1619"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1608",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 13,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 13,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 14,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 14,
        "endColumn": 9
    },
    {
        "ruleId": "1370",
        "severity": 1,
        "message": "1394",
        "line": 51,
        "column": 9,
        "nodeType": "1372",
        "messageId": "1395",
        "endLine": 52,
        "endColumn": 17
    },
    {
        "ruleId": "1370",
        "severity": 1,
        "message": "1394",
        "line": 82,
        "column": 13,
        "nodeType": "1372",
        "messageId": "1395",
        "endLine": 83,
        "endColumn": 21
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1620",
        "line": 102,
        "column": 6,
        "nodeType": "1338",
        "endLine": 102,
        "endColumn": 8,
        "suggestions": "1621"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1608",
        "line": 2,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 16
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1609",
        "line": 2,
        "column": 26,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 31
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1332",
        "line": 2,
        "column": 33,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 38
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 22,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 23,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 23,
        "endColumn": 9
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 70,
        "column": 15,
        "nodeType": "1287",
        "endLine": 70,
        "endColumn": 37
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1622",
        "line": 129,
        "column": 6,
        "nodeType": "1338",
        "endLine": 129,
        "endColumn": 8,
        "suggestions": "1623"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1609",
        "line": 2,
        "column": 18,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1534",
        "line": 2,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 2,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 17,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 17,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1324",
        "line": 22,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 22,
        "endColumn": 14
    },
    {
        "ruleId": "1624",
        "severity": 1,
        "message": "1625",
        "line": 44,
        "column": 17,
        "nodeType": "1486",
        "messageId": "1626",
        "endLine": 44,
        "endColumn": 70
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1396",
        "line": 1,
        "column": 17,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1447",
        "line": 1,
        "column": 38,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 1,
        "endColumn": 44
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1534",
        "line": 3,
        "column": 25,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 29
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1627",
        "line": 3,
        "column": 31,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 35
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1527",
        "line": 3,
        "column": 37,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 3,
        "endColumn": 42
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1628",
        "line": 4,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 26
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1629",
        "line": 8,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 8,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1529",
        "line": 18,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 18,
        "endColumn": 9
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1324",
        "line": 27,
        "column": 7,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 27,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1630",
        "line": 83,
        "column": 9,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 83,
        "endColumn": 20
    },
    {
        "ruleId": "1285",
        "severity": 1,
        "message": "1286",
        "line": 99,
        "column": 13,
        "nodeType": "1287",
        "endLine": 112,
        "endColumn": 41
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1581",
        "line": 26,
        "column": 8,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 26,
        "endColumn": 14
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1631",
        "line": 62,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 62,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1632",
        "line": 64,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 64,
        "endColumn": 22
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1633",
        "line": 65,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 65,
        "endColumn": 23
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1634",
        "line": 66,
        "column": 10,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 66,
        "endColumn": 21
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1469",
        "line": 69,
        "column": 20,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 69,
        "endColumn": 31
    },
    {
        "ruleId": "1275",
        "severity": 1,
        "message": "1276",
        "line": 193,
        "column": 5,
        "nodeType": "1277",
        "messageId": "1278",
        "endLine": 214,
        "endColumn": 6
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1635",
        "line": 268,
        "column": 21,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 268,
        "endColumn": 31
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1471",
        "line": 373,
        "column": 6,
        "nodeType": "1338",
        "endLine": 373,
        "endColumn": 8,
        "suggestions": "1636"
    },
    {
        "ruleId": "1336",
        "severity": 1,
        "message": "1637",
        "line": 243,
        "column": 6,
        "nodeType": "1338",
        "endLine": 243,
        "endColumn": 26,
        "suggestions": "1638"
    },
    {
        "ruleId": "1263",
        "severity": 1,
        "message": "1377",
        "line": 4,
        "column": 3,
        "nodeType": "1265",
        "messageId": "1266",
        "endLine": 4,
        "endColumn": 9
    },
    {
        "ruleId": "1639",
        "severity": 2,
        "message": "1640",
        "line": 11,
        "column": 49,
        "nodeType": "1265",
        "endLine": 11,
        "endColumn": 57
    },
    {
        "ruleId": "1639",
        "severity": 2,
        "message": "1641",
        "line": 13,
        "column": 5,
        "nodeType": "1265",
        "endLine": 13,
        "endColumn": 14
    },
    "no-unused-vars",
    "'ConfigProvider' is defined but never used.",
    "Identifier",
    "unusedVar",
    "no-native-reassign",
    [
        "1642"
    ],
    "no-negated-in-lhs",
    [
        "1643"
    ],
    "'BrowserRouter' is defined but never used.",
    "'message' is defined but never used.",
    "'Heard' is defined but never used.",
    "'Option' is assigned a value but never used.",
    "default-case",
    "Expected a default case.",
    "SwitchStatement",
    "missingDefaultCase",
    "array-callback-return",
    "Array.prototype.map() expects a return value from arrow function.",
    "ArrowFunctionExpression",
    "expectedInside",
    "'petSpecies' is assigned a value but never used.",
    "'imgurl' is assigned a value but never used.",
    "jsx-a11y/alt-text",
    "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
    "JSXOpeningElement",
    "'patientId' is assigned a value but never used.",
    "'age' is assigned a value but never used.",
    "'isMix' is assigned a value but never used.",
    "'confirmSelectBreedJson' is assigned a value but never used.",
    "'addLogin' is defined but never used.",
    "'MyIcon' is assigned a value but never used.",
    "'isCode' is assigned a value but never used.",
    "'baseUrl' is assigned a value but never used.",
    "'code' is assigned a value but never used.",
    "jsx-a11y/anchor-is-valid",
    "The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
    "'_resend' is assigned a value but never used.",
    "'Modal' is defined but never used.",
    "'Spin' is defined but never used.",
    "'bounds' is assigned a value but never used.",
    "'MaxMin' is defined but never used.",
    "'editInputIndex' is assigned a value but never used.",
    "'editInputValue' is assigned a value but never used.",
    "'Close' is defined but never used.",
    "'UploadImg' is defined but never used.",
    "'MTop' is defined but never used.",
    "'MyModal' is defined but never used.",
    "'Draggable' is defined but never used.",
    "'selectBreedBySpeciesId' is defined but never used.",
    "'listAllPetInfo' is defined but never used.",
    "'checkPatientId' is defined but never used.",
    "'windowsHeight' is assigned a value but never used.",
    "'disabled' is assigned a value but never used.",
    "'selectDeviceName' is assigned a value but never used.",
    "'bodyHeight' is assigned a value but never used.",
    "'Heart' is defined but never used.",
    "'height' is assigned a value but never used.",
    "'width' is assigned a value but never used.",
    "'petId' is assigned a value but never used.",
    "'getOta' is defined but never used.",
    "'mar' is assigned a value but never used.",
    "'history' is assigned a value but never used.",
    "'imageUrl' is assigned a value but never used.",
    "'setImageUrl' is assigned a value but never used.",
    "'getBase64' is assigned a value but never used.",
    "no-useless-concat",
    "Unexpected string concatenation of literals.",
    "BinaryExpression",
    "unexpectedConcat",
    "'Radio' is defined but never used.",
    "'petUrl' is assigned a value but never used.",
    "'country' is assigned a value but never used.",
    "'infoData' is assigned a value but never used.",
    "react-hooks/exhaustive-deps",
    "React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.",
    "ArrayExpression",
    [
        "1644"
    ],
    "'Menu' is defined but never used.",
    "'dui' is defined but never used.",
    "'petName' is assigned a value but never used.",
    "'lastName' is assigned a value but never used.",
    "'firstName' is assigned a value but never used.",
    "'speciesId' is assigned a value but never used.",
    "'breedName' is assigned a value but never used.",
    "'petSpeciesBreedId' is assigned a value but never used.",
    "'Select' is defined but never used.",
    "'createFromIconfontCN' is defined but never used.",
    "'selectPetInfoByUserId' is defined but never used.",
    "'url' is assigned a value but never used.",
    "'userImage' is assigned a value but never used.",
    "'imageId' is assigned a value but never used.",
    "'images' is assigned a value but never used.",
    "'num07' is assigned a value but never used.",
    "'rMin_red' is defined but never used.",
    "'rClose_red' is defined but never used.",
    "'rMin_white' is defined but never used.",
    "'rClose_white' is defined but never used.",
    "'closeColor' is assigned a value but never used.",
    "'closebgc' is assigned a value but never used.",
    "'minbgc' is assigned a value but never used.",
    "'checkUser' is defined but never used.",
    "'deskRegistAWSSNS' is defined but never used.",
    "'options' is assigned a value but never used.",
    "'Space' is defined but never used.",
    "'DownOutlined' is defined but never used.",
    "'UpOutlined' is defined but never used.",
    "'preOrderId' is assigned a value but never used.",
    "no-fallthrough",
    "Expected a 'break' statement before 'case'.",
    "SwitchCase",
    "case",
    "'userName' is assigned a value but never used.",
    "'endDate' is assigned a value but never used.",
    "'selectListIndex' is assigned a value but never used.",
    "'Button' is defined but never used.",
    "'isMeasure' is assigned a value but never used.",
    "'is15' is assigned a value but never used.",
    "'self_tarting' is assigned a value but never used.",
    "'sendWeight' is assigned a value but never used.",
    "'ITEMINDEX' is assigned a value but never used.",
    "eqeqeq",
    "Expected '===' and instead saw '=='.",
    "unexpected",
    "'mac' is assigned a value but never used.",
    "'hardwareVersion' is assigned a value but never used.",
    "'softwareVersion' is assigned a value but never used.",
    "'wifiFlag' is assigned a value but never used.",
    "'control' is assigned a value but never used.",
    "'weight' is assigned a value but never used.",
    "'weightUnits' is assigned a value but never used.",
    "'offsetWidth' is assigned a value but never used.",
    "Expected a 'break' statement before 'default'.",
    "default",
    "'useEffect' is defined but never used.",
    "'useHistory' is defined but never used.",
    "'mTop' is defined but never used.",
    "'Popover' is defined but never used.",
    "'getPetInfoByRFID' is defined but never used.",
    "'placeContent' is assigned a value but never used.",
    "'setPlaceholder' is assigned a value but never used.",
    "'clickType' is assigned a value but never used.",
    "'setClickType' is assigned a value but never used.",
    "'headerRef' is assigned a value but never used.",
    "'bluData' is assigned a value but never used.",
    "'jiantou' is assigned a value but never used.",
    "React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",
    [
        "1645"
    ],
    "React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",
    [
        "1646"
    ],
    "'get' is defined but never used.",
    "'del' is defined but never used.",
    "'devWidth' is assigned a value but never used.",
    "'devHeight' is assigned a value but never used.",
    "'size' is assigned a value but never used.",
    "'windowssize' is assigned a value but never used.",
    "'timer' is assigned a value but never used.",
    "'CtoF' is defined but never used.",
    "'FtoC' is defined but never used.",
    "'GToMl' is defined but never used.",
    "'MltoG' is defined but never used.",
    "'GToOz' is defined but never used.",
    "'OztoG' is defined but never used.",
    "'CmtoIn' is defined but never used.",
    "'IntoCm' is defined but never used.",
    "'biggieHome' is defined but never used.",
    "React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
    [
        "1647"
    ],
    "React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",
    [
        "1648"
    ],
    "'storage' is assigned a value but never used.",
    "React Hook useEffect has missing dependencies: 'hardwareInfo' and 'selectHardwareInfoFun'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
    [
        "1649"
    ],
    "'useHover' is defined but never used.",
    "React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
    [
        "1650"
    ],
    "React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",
    [
        "1651"
    ],
    "'px' is defined but never used.",
    "'pX' is defined but never used.",
    "import/no-anonymous-default-export",
    "Assign object to a variable before exporting as module default",
    "ExportDefaultDeclaration",
    "'useState' is defined but never used.",
    "'Header' is assigned a value but never used.",
    "'useRef' is defined but never used.",
    "'Content' is assigned a value but never used.",
    "'mellaMeasurePart' is assigned a value but never used.",
    "'vibible' is assigned a value but never used.",
    "'setVibible' is assigned a value but never used.",
    "'qsmPortName' is assigned a value but never used.",
    "'getQsmPortName' is assigned a value but never used.",
    "React Hook useEffect has a missing dependency: 'conectstatus'. Either include it or remove the dependency array.",
    [
        "1652"
    ],
    "React Hook useEffect has a missing dependency: 'readQSMConnectionStatus'. Either include it or remove the dependency array.",
    [
        "1653"
    ],
    "'devicesTitleHeight' is defined but never used.",
    "'Footer' is assigned a value but never used.",
    "'Sider' is assigned a value but never used.",
    "React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",
    [
        "1654"
    ],
    "'redJinggao' is defined but never used.",
    "'MYButton' is defined but never used.",
    "'loading' is assigned a value but never used.",
    "'isSave' is assigned a value but never used.",
    "'setIsSave' is assigned a value but never used.",
    "'getPetByPetNameOrPatientId' is defined but never used.",
    "'setPageSize' is assigned a value but never used.",
    "'getCurrPage' is assigned a value but never used.",
    "React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",
    [
        "1655"
    ],
    "'UnassignModal' is defined but never used.",
    "'setNotes' is assigned a value but never used.",
    "'editMemo' is assigned a value but never used.",
    "'tip' is assigned a value but never used.",
    "'setBounds' is assigned a value but never used.",
    "'lastWorkplaceId' is assigned a value but never used.",
    "React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",
    [
        "1656"
    ],
    "'Eci' is assigned a value but never used.",
    "'wen1' is assigned a value but never used.",
    "'text' is assigned a value but never used.",
    "no-useless-escape",
    "Unnecessary escape character: \\..",
    "Literal",
    "unnecessaryEscape",
    [
        "1657",
        "1658"
    ],
    "Unnecessary escape character: \\-.",
    [
        "1659",
        "1660"
    ],
    [
        "1661",
        "1662"
    ],
    [
        "1663",
        "1664"
    ],
    [
        "1665",
        "1666"
    ],
    [
        "1667",
        "1668"
    ],
    [
        "1669",
        "1670"
    ],
    [
        "1671",
        "1672"
    ],
    [
        "1673",
        "1674"
    ],
    [
        "1675",
        "1676"
    ],
    [
        "1677",
        "1678"
    ],
    [
        "1679",
        "1680"
    ],
    [
        "1681",
        "1682"
    ],
    [
        "1683",
        "1684"
    ],
    "'hisHe' is assigned a value but never used.",
    [
        "1685",
        "1686"
    ],
    [
        "1687",
        "1688"
    ],
    [
        "1689",
        "1690"
    ],
    [
        "1691",
        "1692"
    ],
    "React Hook useEffect has a missing dependency: '_getEmergencyHistory'. Either include it or remove the dependency array.",
    [
        "1693"
    ],
    "React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",
    [
        "1694"
    ],
    "React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",
    [
        "1695"
    ],
    "React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",
    [
        "1696"
    ],
    "React Hook useEffect has a missing dependency: 'units'. Either include it or remove the dependency array.",
    [
        "1697"
    ],
    "React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",
    [
        "1698"
    ],
    "Expected '!==' and instead saw '!='.",
    "React Hook useEffect has missing dependencies: 'hardwareReduce' and 'setBiggieConnectStatusFun'. Either include them or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
    [
        "1699"
    ],
    "The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",
    "React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",
    [
        "1700"
    ],
    "'patch' is defined but never used.",
    "'Image' is defined but never used.",
    "'PressButton_Pro' is defined but never used.",
    "'_' is defined but never used.",
    "'HistoryTable' is defined but never used.",
    "'mellaConnectStatus' is assigned a value but never used.",
    "'saveNum' is assigned a value but never used.",
    "'setSaveNum' is assigned a value but never used.",
    "'Card' is defined but never used.",
    "'mellaPredictReturnValue' is defined but never used.",
    "'initTime' is assigned a value but never used.",
    "'exchangeNum' is assigned a value but never used.",
    "'time194' is assigned a value but never used.",
    "'mellaMeasureValue' is assigned a value but never used.",
    "'selectHardwareInfo' is assigned a value but never used.",
    "'radioService' is assigned a value but never used.",
    "React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",
    [
        "1701"
    ],
    "React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",
    [
        "1702"
    ],
    "'ExclamationCircleOutlined' is defined but never used.",
    "'neckValue' is assigned a value but never used.",
    "'torsoValue' is assigned a value but never used.",
    "'useGetState' is defined but never used.",
    "'torsoLength' is assigned a value but never used.",
    "'l2rarmDistance' is assigned a value but never used.",
    "'upperTorsoCircumference' is assigned a value but never used.",
    "'lowerTorsoCircumference' is assigned a value but never used.",
    "'h2tLength' is assigned a value but never used.",
    "'neckCircumference' is assigned a value but never used.",
    "'hindLimbLength' is assigned a value but never used.",
    "'foreLimbLength' is assigned a value but never used.",
    "'foreLimbCircumference' is assigned a value but never used.",
    "'rulerConnectStatus' is assigned a value but never used.",
    "React Hook useEffect has missing dependencies: 'getRecentPet' and 'weight'. Either include them or remove the dependency array.",
    [
        "1703"
    ],
    "React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",
    [
        "1704"
    ],
    "React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",
    [
        "1705"
    ],
    "React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'forelimbCircumferenceValue', 'forelimbLengthValue', 'headValue', 'hindlimbValue', 'inputIndex', 'lowerValue', 'neckValue', 'radioValue', 'receiveBroadcastHardwareInfo.deviceType', 'receiveBroadcastHardwareInfo.macId', 'rulerUnit', 'selectHardwareInfo', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",
    [
        "1706"
    ],
    "'postJson' is defined but never used.",
    "'postFormData' is defined but never used.",
    "'put' is defined but never used.",
    "'useThrottleFn' is defined but never used.",
    "'saveType' is assigned a value but never used.",
    "'setSaveType' is assigned a value but never used.",
    "'isMore' is assigned a value but never used.",
    "'setIsMore' is assigned a value but never used.",
    "React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",
    [
        "1707"
    ],
    "React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",
    [
        "1708"
    ],
    [
        "1709"
    ],
    "'moment' is defined but never used.",
    "React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",
    [
        "1710"
    ],
    "React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",
    [
        "1711"
    ],
    [
        "1712"
    ],
    "'token' is assigned a value but never used.",
    "'Table' is defined but never used.",
    "'Popconfirm' is defined but never used.",
    "'_del' is assigned a value but never used.",
    "'tableData' is assigned a value but never used.",
    "'historyData' is assigned a value but never used.",
    "'Carousel' is defined but never used.",
    "'PlusOutlined' is defined but never used.",
    "'percent' is assigned a value but never used.",
    "'setPercent' is assigned a value but never used.",
    "React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",
    [
        "1713"
    ],
    "'Progress' is defined but never used.",
    "'Tag' is defined but never used.",
    "'memo' is assigned a value but never used.",
    "'ProgressTitle' is assigned a value but never used.",
    "React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",
    [
        "1714"
    ],
    [
        "1715"
    ],
    "React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",
    [
        "1716"
    ],
    "'Layout' is defined but never used.",
    "'Input' is defined but never used.",
    "'swirl' is defined but never used.",
    "'BreakSeal' is defined but never used.",
    "'label' is defined but never used.",
    "'Incubator' is defined but never used.",
    "'overnight' is defined but never used.",
    "'rapid' is defined but never used.",
    "React Hook useEffect has a missing dependency: 'onClick'. Either include it or remove the dependency array.",
    [
        "1717"
    ],
    "React Hook useEffect has a missing dependency: 'qsmMessage.qsmEarPart'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'qsmMessage.qsmEarPart', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmEarPart' in the reducer.",
    [
        "1718"
    ],
    "React Hook useEffect has a missing dependency: 'isNext'. Either include it or remove the dependency array.",
    [
        "1719"
    ],
    "React Hook useEffect has a missing dependency: 'qsmMessage.qsmTimeType'. Either include it or remove the dependency array. If 'setType' needs the current value of 'qsmMessage.qsmTimeType', you can also switch to useReducer instead of useState and read 'qsmMessage.qsmTimeType' in the reducer.",
    [
        "1720"
    ],
    "no-template-curly-in-string",
    "Unexpected template string expression.",
    "unexpectedTemplateExpression",
    "'List' is defined but never used.",
    "'InfoCircleFilled' is defined but never used.",
    "'electronStore' is defined but never used.",
    "'urlErrModal' is assigned a value but never used.",
    "'connectionKey' is assigned a value but never used.",
    "'selectRoleId' is assigned a value but never used.",
    "'workplaceName' is assigned a value but never used.",
    "'workplaceId' is assigned a value but never used.",
    "'deviceType' is assigned a value but never used.",
    [
        "1721"
    ],
    "React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",
    [
        "1722"
    ],
    "react-hooks/rules-of-hooks",
    "React Hook \"useState\" is called in function \"baseNotDetectedModal\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
    "React Hook \"useEffect\" is called in function \"baseNotDetectedModal\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
    "no-global-assign",
    "no-unsafe-negation",
    {
        "desc": "1723",
        "fix": "1724"
    },
    {
        "desc": "1725",
        "fix": "1726"
    },
    {
        "desc": "1727",
        "fix": "1728"
    },
    {
        "desc": "1729",
        "fix": "1730"
    },
    {
        "desc": "1731",
        "fix": "1732"
    },
    {
        "desc": "1733",
        "fix": "1734"
    },
    {
        "desc": "1735",
        "fix": "1736"
    },
    {
        "desc": "1737",
        "fix": "1738"
    },
    {
        "desc": "1739",
        "fix": "1740"
    },
    {
        "desc": "1741",
        "fix": "1742"
    },
    {
        "desc": "1743",
        "fix": "1744"
    },
    {
        "desc": "1745",
        "fix": "1746"
    },
    {
        "desc": "1727",
        "fix": "1747"
    },
    {
        "messageId": "1748",
        "fix": "1749",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1752",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1754",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1755",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1756",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1757",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1758",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1759",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1760",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1761",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1762",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1763",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1764",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1765",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1766",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1767",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1768",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1769",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1770",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1771",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1772",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1773",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1774",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1775",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1776",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1777",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1778",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1779",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1780",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1781",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1782",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1783",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1784",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1785",
        "desc": "1753"
    },
    {
        "messageId": "1748",
        "fix": "1786",
        "desc": "1750"
    },
    {
        "messageId": "1751",
        "fix": "1787",
        "desc": "1753"
    },
    {
        "desc": "1788",
        "fix": "1789"
    },
    {
        "desc": "1790",
        "fix": "1791"
    },
    {
        "desc": "1792",
        "fix": "1793"
    },
    {
        "desc": "1794",
        "fix": "1795"
    },
    {
        "desc": "1796",
        "fix": "1797"
    },
    {
        "desc": "1798",
        "fix": "1799"
    },
    {
        "desc": "1800",
        "fix": "1801"
    },
    {
        "desc": "1802",
        "fix": "1803"
    },
    {
        "desc": "1804",
        "fix": "1805"
    },
    {
        "desc": "1806",
        "fix": "1807"
    },
    {
        "desc": "1808",
        "fix": "1809"
    },
    {
        "desc": "1810",
        "fix": "1811"
    },
    {
        "desc": "1812",
        "fix": "1813"
    },
    {
        "desc": "1814",
        "fix": "1815"
    },
    {
        "desc": "1816",
        "fix": "1817"
    },
    {
        "desc": "1818",
        "fix": "1819"
    },
    {
        "desc": "1737",
        "fix": "1820"
    },
    {
        "desc": "1821",
        "fix": "1822"
    },
    {
        "desc": "1823",
        "fix": "1824"
    },
    {
        "desc": "1737",
        "fix": "1825"
    },
    {
        "desc": "1826",
        "fix": "1827"
    },
    {
        "desc": "1828",
        "fix": "1829"
    },
    {
        "desc": "1818",
        "fix": "1830"
    },
    {
        "desc": "1831",
        "fix": "1832"
    },
    {
        "desc": "1833",
        "fix": "1834"
    },
    {
        "desc": "1835",
        "fix": "1836"
    },
    {
        "desc": "1837",
        "fix": "1838"
    },
    {
        "desc": "1839",
        "fix": "1840"
    },
    {
        "desc": "1745",
        "fix": "1841"
    },
    {
        "desc": "1842",
        "fix": "1843"
    },
    "Update the dependencies array to be: [form, storage.userId]",
    {
        "range": "1844",
        "text": "1845"
    },
    "Update the dependencies array to be: [_noUSB, _send, blueSearch]",
    {
        "range": "1846",
        "text": "1847"
    },
    "Update the dependencies array to be: []",
    {
        "range": "1848",
        "text": "1849"
    },
    "Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",
    {
        "range": "1850",
        "text": "1851"
    },
    "Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",
    {
        "range": "1852",
        "text": "1853"
    },
    "Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",
    {
        "range": "1854",
        "text": "1855"
    },
    "Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",
    {
        "range": "1856",
        "text": "1857"
    },
    "Update the dependencies array to be: [destroyOnClose, width]",
    {
        "range": "1858",
        "text": "1859"
    },
    "Update the dependencies array to be: [conectstatus]",
    {
        "range": "1860",
        "text": "1861"
    },
    "Update the dependencies array to be: [readQSMConnectionStatus]",
    {
        "range": "1862",
        "text": "1863"
    },
    "Update the dependencies array to be: [hardwareList]",
    {
        "range": "1864",
        "text": "1865"
    },
    "Update the dependencies array to be: [_getExam]",
    {
        "range": "1866",
        "text": "1867"
    },
    {
        "range": "1868",
        "text": "1849"
    },
    "removeEscape",
    {
        "range": "1869",
        "text": "1870"
    },
    "Remove the `\\`. This maintains the current functionality.",
    "escapeBackslash",
    {
        "range": "1871",
        "text": "1872"
    },
    "Replace the `\\` with `\\\\` to include the actual backslash character.",
    {
        "range": "1873",
        "text": "1870"
    },
    {
        "range": "1874",
        "text": "1872"
    },
    {
        "range": "1875",
        "text": "1870"
    },
    {
        "range": "1876",
        "text": "1872"
    },
    {
        "range": "1877",
        "text": "1870"
    },
    {
        "range": "1878",
        "text": "1872"
    },
    {
        "range": "1879",
        "text": "1870"
    },
    {
        "range": "1880",
        "text": "1872"
    },
    {
        "range": "1881",
        "text": "1870"
    },
    {
        "range": "1882",
        "text": "1872"
    },
    {
        "range": "1883",
        "text": "1870"
    },
    {
        "range": "1884",
        "text": "1872"
    },
    {
        "range": "1885",
        "text": "1870"
    },
    {
        "range": "1886",
        "text": "1872"
    },
    {
        "range": "1887",
        "text": "1870"
    },
    {
        "range": "1888",
        "text": "1872"
    },
    {
        "range": "1889",
        "text": "1870"
    },
    {
        "range": "1890",
        "text": "1872"
    },
    {
        "range": "1891",
        "text": "1870"
    },
    {
        "range": "1892",
        "text": "1872"
    },
    {
        "range": "1893",
        "text": "1870"
    },
    {
        "range": "1894",
        "text": "1872"
    },
    {
        "range": "1895",
        "text": "1870"
    },
    {
        "range": "1896",
        "text": "1872"
    },
    {
        "range": "1897",
        "text": "1870"
    },
    {
        "range": "1898",
        "text": "1872"
    },
    {
        "range": "1899",
        "text": "1870"
    },
    {
        "range": "1900",
        "text": "1872"
    },
    {
        "range": "1901",
        "text": "1870"
    },
    {
        "range": "1902",
        "text": "1872"
    },
    {
        "range": "1903",
        "text": "1870"
    },
    {
        "range": "1904",
        "text": "1872"
    },
    {
        "range": "1905",
        "text": "1870"
    },
    {
        "range": "1906",
        "text": "1872"
    },
    "Update the dependencies array to be: [_getEmergencyHistory, petDetailInfo]",
    {
        "range": "1907",
        "text": "1908"
    },
    "Update the dependencies array to be: [mellaMeasureNum]",
    {
        "range": "1909",
        "text": "1910"
    },
    "Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",
    {
        "range": "1911",
        "text": "1912"
    },
    "Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",
    {
        "range": "1913",
        "text": "1914"
    },
    "Update the dependencies array to be: [biggieBodyWeight, units]",
    {
        "range": "1915",
        "text": "1916"
    },
    "Update the dependencies array to be: [hardwareReduce, weight]",
    {
        "range": "1917",
        "text": "1918"
    },
    "Update the dependencies array to be: [hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",
    {
        "range": "1919",
        "text": "1920"
    },
    "Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",
    {
        "range": "1921",
        "text": "1922"
    },
    "Update the dependencies array to be: [callBack, prediction, timeNum, value]",
    {
        "range": "1923",
        "text": "1924"
    },
    "Update the dependencies array to be: [mellaConnectStatus, value]",
    {
        "range": "1925",
        "text": "1926"
    },
    "Update the dependencies array to be: [getRecentPet, petId, weight]",
    {
        "range": "1927",
        "text": "1928"
    },
    "Update the dependencies array to be: [finishScan, inputIndex, newData]",
    {
        "range": "1929",
        "text": "1930"
    },
    "Update the dependencies array to be: [inputIndex, rulerConfirmCount]",
    {
        "range": "1931",
        "text": "1932"
    },
    "Update the dependencies array to be: [bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",
    {
        "range": "1933",
        "text": "1934"
    },
    "Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",
    {
        "range": "1935",
        "text": "1936"
    },
    "Update the dependencies array to be: [storage.userId]",
    {
        "range": "1937",
        "text": "1938"
    },
    {
        "range": "1939",
        "text": "1859"
    },
    "Update the dependencies array to be: [getAllPet]",
    {
        "range": "1940",
        "text": "1941"
    },
    "Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",
    {
        "range": "1942",
        "text": "1943"
    },
    {
        "range": "1944",
        "text": "1859"
    },
    "Add dependencies array: [callBack, timers]",
    {
        "range": "1945",
        "text": "1946"
    },
    "Update the dependencies array to be: [getPetTemperatureData, petId]",
    {
        "range": "1947",
        "text": "1948"
    },
    {
        "range": "1949",
        "text": "1938"
    },
    "Update the dependencies array to be: [callBack, carouselIndex]",
    {
        "range": "1950",
        "text": "1951"
    },
    "Update the dependencies array to be: [onClick]",
    {
        "range": "1952",
        "text": "1953"
    },
    "Update the dependencies array to be: [qsmMessage.qsmEarPart]",
    {
        "range": "1954",
        "text": "1955"
    },
    "Update the dependencies array to be: [isNext]",
    {
        "range": "1956",
        "text": "1957"
    },
    "Update the dependencies array to be: [qsmMessage.qsmTimeType]",
    {
        "range": "1958",
        "text": "1959"
    },
    {
        "range": "1960",
        "text": "1867"
    },
    "Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",
    {
        "range": "1961",
        "text": "1962"
    },
    [
        2508,
        2510
    ],
    "[form, storage.userId]",
    [
        43085,
        43087
    ],
    "[_noUSB, _send, blueSearch]",
    [
        43159,
        43185
    ],
    "[]",
    [
        9394,
        9396
    ],
    "[setReceiveBroadcastHardwareInfoFun]",
    [
        10498,
        10528
    ],
    "[devicesList, receiveBroadcastHardwareInfo]",
    [
        1775,
        1810
    ],
    "[selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",
    [
        6232,
        6249
    ],
    "[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",
    [
        2079,
        2081
    ],
    "[destroyOnClose, width]",
    [
        4609,
        4611
    ],
    "[conectstatus]",
    [
        5055,
        5057
    ],
    "[readQSMConnectionStatus]",
    [
        3213,
        3215
    ],
    "[hardwareList]",
    [
        4580,
        4582
    ],
    "[_getExam]",
    [
        5248,
        5274
    ],
    [
        22522,
        22523
    ],
    "",
    [
        22522,
        22522
    ],
    "\\",
    [
        22723,
        22724
    ],
    [
        22723,
        22723
    ],
    [
        23306,
        23307
    ],
    [
        23306,
        23306
    ],
    [
        23507,
        23508
    ],
    [
        23507,
        23507
    ],
    [
        24187,
        24188
    ],
    [
        24187,
        24187
    ],
    [
        24388,
        24389
    ],
    [
        24388,
        24388
    ],
    [
        25530,
        25531
    ],
    [
        25530,
        25530
    ],
    [
        25731,
        25732
    ],
    [
        25731,
        25731
    ],
    [
        26338,
        26339
    ],
    [
        26338,
        26338
    ],
    [
        26539,
        26540
    ],
    [
        26539,
        26539
    ],
    [
        27205,
        27206
    ],
    [
        27205,
        27205
    ],
    [
        27406,
        27407
    ],
    [
        27406,
        27406
    ],
    [
        27977,
        27978
    ],
    [
        27977,
        27977
    ],
    [
        28083,
        28084
    ],
    [
        28083,
        28083
    ],
    [
        43726,
        43727
    ],
    [
        43726,
        43726
    ],
    [
        43927,
        43928
    ],
    [
        43927,
        43927
    ],
    [
        44457,
        44458
    ],
    [
        44457,
        44457
    ],
    [
        44658,
        44659
    ],
    [
        44658,
        44658
    ],
    [
        51734,
        51749
    ],
    "[_getEmergencyHistory, petDetailInfo]",
    [
        52166,
        52168
    ],
    "[mellaMeasureNum]",
    [
        53409,
        53426
    ],
    "[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",
    [
        53967,
        53987
    ],
    "[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",
    [
        55851,
        55869
    ],
    "[biggieBodyWeight, units]",
    [
        7234,
        7250
    ],
    "[hardwareReduce, weight]",
    [
        7552,
        7567
    ],
    "[hardwareReduce, petDetailInfo, setBiggieConnectStatusFun]",
    [
        5018,
        5030
    ],
    "[letterListCopy, phoneListCopy, searchText]",
    [
        22027,
        22034
    ],
    "[callBack, prediction, timeNum, value]",
    [
        22656,
        22676
    ],
    "[mellaConnectStatus, value]",
    [
        23660,
        23667
    ],
    "[getRecentPet, petId, weight]",
    [
        23920,
        23932
    ],
    "[finishScan, inputIndex, newData]",
    [
        24584,
        24603
    ],
    "[inputIndex, rulerConfirmCount]",
    [
        26595,
        26633
    ],
    "[bodyValue, changeUnit, forelimbCircumferenceValue, forelimbLengthValue, headValue, hindlimbValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo.deviceType, receiveBroadcastHardwareInfo.macId, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",
    [
        9688,
        9697
    ],
    "[getPetTemperatureData, reRender, saveNum]",
    [
        9909,
        9911
    ],
    "[storage.userId]",
    [
        3573,
        3575
    ],
    [
        4188,
        4190
    ],
    "[getAllPet]",
    [
        4321,
        4334
    ],
    "[searchPetByPetNameOrPatientId, searchValue]",
    [
        4529,
        4531
    ],
    [
        2218,
        2218
    ],
    ", [callBack, timers]",
    [
        14008,
        14015
    ],
    "[getPetTemperatureData, petId]",
    [
        14204,
        14206
    ],
    [
        2438,
        2453
    ],
    "[callBack, carouselIndex]",
    [
        1076,
        1078
    ],
    "[onClick]",
    [
        2041,
        2043
    ],
    "[qsmMessage.qsmEarPart]",
    [
        3115,
        3117
    ],
    "[isNext]",
    [
        3643,
        3645
    ],
    "[qsmMessage.qsmTimeType]",
    [
        10673,
        10675
    ],
    [
        7403,
        7423
    ],
    "[hardwareList, selectHardwareInfo, selectHardwareType]"
]