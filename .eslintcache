[{"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/home/index.jsx":"1","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/index.jsx":"2","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/index.js":"3","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/App.js":"4","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/index.js":"5","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signUpVerifyEmail/index.jsx":"6","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/resetPassword/index.jsx":"7","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanCodeLogin/index.jsx":"8","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/forgotPassword/index.jsx":"9","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/newOrganization/index.jsx":"10","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/inviteTeam/index.jsx":"11","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/joinOrganizationByOption/index.jsx":"12","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/unassigned/index.jsx":"13","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/help/index.jsx":"14","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/petAndParents/index.jsx":"15","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/editParent/index.jsx":"16","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/advancedSettings/index.jsx":"17","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/settings/index.jsx":"18","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/myAccount/index.jsx":"19","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/admin_VetProfile/index.jsx":"20","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/addDevice/index.jsx":"21","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/team/index.jsx":"22","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/newOrg/index.jsx":"23","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/doctorAddPet/index.jsx":"24","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/editPetInfo/index.jsx":"25","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signIn/index.jsx":"26","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/maxminreturn/MaxMinReturn.jsx":"27","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/connectWorkplace/index.jsx":"28","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signUpVetProfile/index.jsx":"29","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/temporaryStorage.js":"30","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/appversion.js":"31","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/electronStore.js":"32","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/minClose/MinClose.js":"33","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/mouseDiv/MouseDiv.js":"34","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/button/Button.js":"35","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/user.js":"36","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/pet.js":"37","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/organization.js":"38","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/index.js":"39","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/px.jsx":"40","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/myModal/MyModal.jsx":"41","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/phoneBook/PhoneBook.jsx":"42","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/avatar/Avatar.jsx":"43","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/index.js":"44","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/index.js":"45","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/axios/index.js":"46","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/api.js":"47","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/ezyvetApi.js":"48","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/selectPetBreedModal/index.jsx":"49","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/config/config.js":"50","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/hardwareReduce.js":"51","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/userReduce.js":"52","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/petReduce.js":"53","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/current.js":"54","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/heard/Heard.js":"55","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/areaCode/imgArray.js":"56","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/areaCode/country.js":"57","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/axios/http.js":"58","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/AddDevice.jsx":"59","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/hardWareTypeUI.jsx":"60","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/HardAndPetsUI.jsx":"61","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/enrolledPlan/index.jsx":"62","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/userAction.js":"63","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/petAction.js":"64","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/index.jsx":"65","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/hardwareAction.js":"66","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mabelPage/index.jsx":"67","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/index.jsx":"68","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/combineScales/index.jsx":"69","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/clinicalStudyPage/index.jsx":"70","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/PetsUI.jsx":"71","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/hardwareType.js":"72","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scheduledPetsPage/index.jsx":"73","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/addScheduledPet/index.jsx":"74","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/allPetsPage/index.jsx":"75","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/index.jsx":"76","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/index.jsx":"77","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/index.js":"78","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/index.js":"79","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/index.js":"80","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/HardListModal.jsx":"81","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/InitDate.js":"82","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/index.js":"83","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/headerItem.jsx":"84","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/exam.js":"85","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/user.js":"86","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/backend.js":"87","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/petall.js":"88","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/EzyVet.js":"89","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/VetSpire.js":"90","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/new.js":"91","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/vetSpire.js":"92","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/userfeedback.js":"93","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/clinical.js":"94","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/user.js":"95","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/pet.js":"96","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/UnassignModal/UnassignModal.jsx":"97","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/VetSpire.js":"98","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/EzyVet.js":"99","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/components/Biggie.jsx":"100","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/components/linkEquipment.jsx":"101","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/userType.js":"102","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/petType.js":"103","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/timer/index.jsx":"104","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/swabPetEar/index.jsx":"105","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/linkEquipment/index.jsx":"106","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/experimental/index.jsx":"107","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mabelPage/components/linkEquipment/index.jsx":"108","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/selectPetModal/index.jsx":"109","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/addPetModal/index.jsx":"110","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/historyTable/index.jsx":"111","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/uploadImg/UploadImg.js":"112","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/commonFun.js":"113","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/scanPet.jsx":"114","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/LinkEquipment.jsx":"115","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/measuredData.jsx":"116","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/measurement.jsx":"117","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/linkEquipment.jsx":"118","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/petTable/index.jsx":"119","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/numericInput.jsx":"120","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/mellarecord.js":"121","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/workplace.js":"122","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/slider/Slider.js":"123","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/selectionBox/SelectionBox.jsx":"124","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/qsmType.js":"125","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/qsmAction.js":"126","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/qsmReduce.js":"127"},{"size":2715,"mtime":1663912408972,"results":"128","hashOfConfig":"129"},{"size":40855,"mtime":1663924764728,"results":"130","hashOfConfig":"129"},{"size":349,"mtime":1663296772602,"results":"131","hashOfConfig":"129"},{"size":3706,"mtime":1663296772586,"results":"132","hashOfConfig":"129"},{"size":577,"mtime":1663296465410,"results":"133","hashOfConfig":"129"},{"size":4324,"mtime":1663296772626,"results":"134","hashOfConfig":"129"},{"size":7255,"mtime":1663296772623,"results":"135","hashOfConfig":"129"},{"size":5030,"mtime":1663296772623,"results":"136","hashOfConfig":"129"},{"size":11842,"mtime":1663296772611,"results":"137","hashOfConfig":"129"},{"size":15166,"mtime":1663296772619,"results":"138","hashOfConfig":"129"},{"size":10851,"mtime":1663296772613,"results":"139","hashOfConfig":"129"},{"size":17567,"mtime":1663296772614,"results":"140","hashOfConfig":"129"},{"size":35440,"mtime":1663296772629,"results":"141","hashOfConfig":"129"},{"size":9200,"mtime":1663296772612,"results":"142","hashOfConfig":"129"},{"size":9726,"mtime":1663296772622,"results":"143","hashOfConfig":"129"},{"size":10447,"mtime":1663296772609,"results":"144","hashOfConfig":"129"},{"size":13073,"mtime":1663296772605,"results":"145","hashOfConfig":"129"},{"size":19092,"mtime":1663917864986,"results":"146","hashOfConfig":"129"},{"size":10678,"mtime":1663296772618,"results":"147","hashOfConfig":"129"},{"size":14807,"mtime":1663296772604,"results":"148","hashOfConfig":"129"},{"size":13078,"mtime":1663296772603,"results":"149","hashOfConfig":"129"},{"size":9864,"mtime":1663296772627,"results":"150","hashOfConfig":"129"},{"size":15554,"mtime":1663296772619,"results":"151","hashOfConfig":"129"},{"size":28728,"mtime":1663296772609,"results":"152","hashOfConfig":"129"},{"size":34426,"mtime":1663296772610,"results":"153","hashOfConfig":"129"},{"size":17546,"mtime":1663296772626,"results":"154","hashOfConfig":"129"},{"size":2729,"mtime":1663296772630,"results":"155","hashOfConfig":"129"},{"size":6365,"mtime":1663296772608,"results":"156","hashOfConfig":"129"},{"size":12769,"mtime":1663296772627,"results":"157","hashOfConfig":"129"},{"size":1251,"mtime":1663296465444,"results":"158","hashOfConfig":"129"},{"size":70,"mtime":1663912560781,"results":"159","hashOfConfig":"129"},{"size":326,"mtime":1663296465441,"results":"160","hashOfConfig":"129"},{"size":2352,"mtime":1663296465442,"results":"161","hashOfConfig":"129"},{"size":1383,"mtime":1663296465443,"results":"162","hashOfConfig":"129"},{"size":997,"mtime":1663296465437,"results":"163","hashOfConfig":"129"},{"size":1267,"mtime":1663296772588,"results":"164","hashOfConfig":"129"},{"size":3747,"mtime":1663296772589,"results":"165","hashOfConfig":"129"},{"size":1032,"mtime":1663296772589,"results":"166","hashOfConfig":"129"},{"size":289,"mtime":1663903187275,"results":"167","hashOfConfig":"129"},{"size":2934,"mtime":1663296772631,"results":"168","hashOfConfig":"129"},{"size":1357,"mtime":1663296465443,"results":"169","hashOfConfig":"129"},{"size":5553,"mtime":1663296772631,"results":"170","hashOfConfig":"129"},{"size":2811,"mtime":1663296465368,"results":"171","hashOfConfig":"129"},{"size":87,"mtime":1663296772587,"results":"172","hashOfConfig":"129"},{"size":117,"mtime":1663902724317,"results":"173","hashOfConfig":"129"},{"size":421,"mtime":1663296465437,"results":"174","hashOfConfig":"129"},{"size":2095,"mtime":1663296772587,"results":"175","hashOfConfig":"129"},{"size":2130,"mtime":1663296772587,"results":"176","hashOfConfig":"129"},{"size":3695,"mtime":1663296772601,"results":"177","hashOfConfig":"129"},{"size":652,"mtime":1663570619877,"results":"178","hashOfConfig":"129"},{"size":4481,"mtime":1663296465410,"results":"179","hashOfConfig":"129"},{"size":443,"mtime":1663296465410,"results":"180","hashOfConfig":"129"},{"size":668,"mtime":1663296465410,"results":"181","hashOfConfig":"129"},{"size":1105,"mtime":1663296465437,"results":"182","hashOfConfig":"129"},{"size":51847,"mtime":1663296772630,"results":"183","hashOfConfig":"129"},{"size":11196,"mtime":1663296465437,"results":"184","hashOfConfig":"129"},{"size":17788,"mtime":1663296465412,"results":"185","hashOfConfig":"129"},{"size":803,"mtime":1663296465437,"results":"186","hashOfConfig":"129"},{"size":11526,"mtime":1663296772615,"results":"187","hashOfConfig":"129"},{"size":5679,"mtime":1663924592124,"results":"188","hashOfConfig":"129"},{"size":3379,"mtime":1663925929835,"results":"189","hashOfConfig":"129"},{"size":8498,"mtime":1663296772611,"results":"190","hashOfConfig":"129"},{"size":355,"mtime":1663296465410,"results":"191","hashOfConfig":"129"},{"size":513,"mtime":1663296465410,"results":"192","hashOfConfig":"129"},{"size":2212,"mtime":1663570619879,"results":"193","hashOfConfig":"129"},{"size":3753,"mtime":1663296465409,"results":"194","hashOfConfig":"129"},{"size":1475,"mtime":1663570619878,"results":"195","hashOfConfig":"129"},{"size":3446,"mtime":1663909492755,"results":"196","hashOfConfig":"129"},{"size":8628,"mtime":1663296465403,"results":"197","hashOfConfig":"129"},{"size":59302,"mtime":1663296772608,"results":"198","hashOfConfig":"129"},{"size":14247,"mtime":1663296772616,"results":"199","hashOfConfig":"129"},{"size":2045,"mtime":1663296465409,"results":"200","hashOfConfig":"129"},{"size":6676,"mtime":1663296772625,"results":"201","hashOfConfig":"129"},{"size":12370,"mtime":1663296772603,"results":"202","hashOfConfig":"129"},{"size":5624,"mtime":1663583560323,"results":"203","hashOfConfig":"129"},{"size":1514,"mtime":1663296772624,"results":"204","hashOfConfig":"129"},{"size":9262,"mtime":1663296772607,"results":"205","hashOfConfig":"129"},{"size":257,"mtime":1663296772589,"results":"206","hashOfConfig":"129"},{"size":74,"mtime":1663296772588,"results":"207","hashOfConfig":"129"},{"size":96,"mtime":1663296772587,"results":"208","hashOfConfig":"129"},{"size":8079,"mtime":1663296772616,"results":"209","hashOfConfig":"129"},{"size":69,"mtime":1663296465411,"results":"210","hashOfConfig":"129"},{"size":111,"mtime":1663902622065,"results":"211","hashOfConfig":"129"},{"size":11186,"mtime":1663296772628,"results":"212","hashOfConfig":"129"},{"size":788,"mtime":1663296772588,"results":"213","hashOfConfig":"129"},{"size":2855,"mtime":1663296772589,"results":"214","hashOfConfig":"129"},{"size":685,"mtime":1663296772588,"results":"215","hashOfConfig":"129"},{"size":885,"mtime":1663296772589,"results":"216","hashOfConfig":"129"},{"size":830,"mtime":1663296772588,"results":"217","hashOfConfig":"129"},{"size":908,"mtime":1663296772588,"results":"218","hashOfConfig":"129"},{"size":968,"mtime":1663296772589,"results":"219","hashOfConfig":"129"},{"size":589,"mtime":1663296772590,"results":"220","hashOfConfig":"129"},{"size":562,"mtime":1663296772590,"results":"221","hashOfConfig":"129"},{"size":731,"mtime":1663296772588,"results":"222","hashOfConfig":"129"},{"size":557,"mtime":1663296772588,"results":"223","hashOfConfig":"129"},{"size":550,"mtime":1663296772587,"results":"224","hashOfConfig":"129"},{"size":30741,"mtime":1663296772598,"results":"225","hashOfConfig":"129"},{"size":638,"mtime":1663296772587,"results":"226","hashOfConfig":"129"},{"size":637,"mtime":1663296772587,"results":"227","hashOfConfig":"129"},{"size":3907,"mtime":1663296772606,"results":"228","hashOfConfig":"129"},{"size":1390,"mtime":1663296772606,"results":"229","hashOfConfig":"129"},{"size":85,"mtime":1663296465409,"results":"230","hashOfConfig":"129"},{"size":215,"mtime":1663296465409,"results":"231","hashOfConfig":"129"},{"size":1201,"mtime":1663296465405,"results":"232","hashOfConfig":"129"},{"size":2695,"mtime":1663296465405,"results":"233","hashOfConfig":"129"},{"size":2168,"mtime":1663910894239,"results":"234","hashOfConfig":"129"},{"size":2508,"mtime":1663296465404,"results":"235","hashOfConfig":"129"},{"size":4215,"mtime":1663296772614,"results":"236","hashOfConfig":"129"},{"size":7942,"mtime":1663296772602,"results":"237","hashOfConfig":"129"},{"size":8420,"mtime":1663296772598,"results":"238","hashOfConfig":"129"},{"size":12412,"mtime":1663583560322,"results":"239","hashOfConfig":"129"},{"size":2947,"mtime":1663296465444,"results":"240","hashOfConfig":"129"},{"size":4618,"mtime":1663296772630,"results":"241","hashOfConfig":"129"},{"size":16715,"mtime":1663925210993,"results":"242","hashOfConfig":"129"},{"size":1186,"mtime":1663296465406,"results":"243","hashOfConfig":"129"},{"size":17744,"mtime":1663296772628,"results":"244","hashOfConfig":"129"},{"size":3569,"mtime":1663296465408,"results":"245","hashOfConfig":"129"},{"size":6751,"mtime":1663296465407,"results":"246","hashOfConfig":"129"},{"size":9628,"mtime":1663583560322,"results":"247","hashOfConfig":"129"},{"size":1314,"mtime":1663296465406,"results":"248","hashOfConfig":"129"},{"size":919,"mtime":1663296772589,"results":"249","hashOfConfig":"129"},{"size":865,"mtime":1663296772590,"results":"250","hashOfConfig":"129"},{"size":4251,"mtime":1663296772631,"results":"251","hashOfConfig":"129"},{"size":2678,"mtime":1663583560326,"results":"252","hashOfConfig":"129"},{"size":68,"mtime":1663902596452,"results":"253","hashOfConfig":"129"},{"size":312,"mtime":1663902709673,"results":"254","hashOfConfig":"129"},{"size":407,"mtime":1663912179058,"results":"255","hashOfConfig":"129"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1hzt645",{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"263"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"263"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"263"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"263"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"263"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"263"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"263"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"263"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"263"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"263"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"263"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"263"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"263"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"263"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"263"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"263"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"263"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"263"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"263"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"263"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"263"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"263"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"263"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"263"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"263"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"263"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"263"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"263"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"263"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"263"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"263"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"263"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"263"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"263"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"263"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"263"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"263"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"263"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"263"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"263"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"263"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"263"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"263"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"263"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"263"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"263"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"263"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"263"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"263"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"263"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"263"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"263"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"263"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"263"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"263"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"263"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"263"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"263"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"263"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"263"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"263"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"263"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"263"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"263"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"263"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"263"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554","usedDeprecatedRules":"263"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"263"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"263"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"263"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"263"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"263"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"263"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"263"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"263"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/home/index.jsx",["587"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/index.jsx",["588","589","590","591","592","593","594","595","596","597","598"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/index.js",["599"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n",["600","601"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/App.js",["602"],"import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\nimport Home from './pages/home/index'\n\nimport MaxMinReturn from './utils/maxminreturn/MaxMinReturn'\n\nimport EditPetInfo from './pages/editPetInfo/index'\nimport DoctorAddPet from './pages/doctorAddPet/index'\n//登录部分\nimport SignIn from './pages/signIn/index'\nimport ForgotPassword from './pages/forgotPassword/index'\nimport ResetPassword from './pages//resetPassword/index'\nimport ScanCodeLogin from './pages/scanCodeLogin/index'\n//邮箱注册的整体部分\nimport VetPrifile from './pages/signUpVetProfile'\nimport JoinOrganizationByOption from './pages/joinOrganizationByOption/index'\nimport VerifyEmail from './pages/signUpVerifyEmail/index'\nimport NewOrganization from './pages/newOrganization/index'\nimport InviteTeam from './pages/inviteTeam/index'\n//options\nimport Help from './pages/help/index'\nimport Unassigned from './pages/unassigned/index'\nimport Settings from './pages/settings/index'\nimport AdvancedSettings from './pages/advancedSettings/index'\nimport PetAndParents from './pages/petAndParents/index'\nimport EditParent from './pages/editParent/index'\nimport MyAccount from './pages/myAccount/index'\nimport Veterinarians from './pages/admin_VetProfile/index'\nimport AddDevice from './pages/addDevice/index'\nimport ConnectWorkplace from './pages/connectWorkplace'\nimport NewOrg from './pages/newOrg/index'\nimport Team from './pages/team/index'\nimport MainBody from './pages/mainbody'\nclass App extends Component {\n\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n\n\n          <Route exact path=\"/page7\" component={MaxMinReturn} />\n          <Route exact path=\"/page9\" component={EditPetInfo} />\n          <Route exact path=\"/MainBody\" component={MainBody} />\n          <Route exact path=\"/page11\" component={SignIn} />\n          <Route exact path=\"/user/login/forgotPassword\" component={ForgotPassword} />\n          <Route exact path=\"/user/login/resetPassword\" component={ResetPassword} />\n          <Route exact path=\"/user/login/scanCodeLogin\" component={ScanCodeLogin} />\n\n          <Route exact path=\"/uesr/logUp/VetPrifile\" component={VetPrifile} />\n          <Route exact path=\"/uesr/logUp/JoinOrganizationByOption\" component={JoinOrganizationByOption} />\n          <Route exact path=\"/uesr/logUp/VerifyEmail\" component={VerifyEmail} />\n          <Route exact path=\"/uesr/logUp/NewOrganization\" component={NewOrganization} />\n          <Route exact path=\"/uesr/logUp/InviteTeam\" component={InviteTeam} />\n\n\n          <Route exact path=\"/pet/doctorAddPet\" component={DoctorAddPet} />\n          <Route exact path=\"/menuOptions/help\" component={Help} />\n          <Route exact path=\"/menuOptions/unassigned\" component={Unassigned} />\n          <Route exact path=\"/menuOptions/settings\" component={Settings} />\n          <Route exact path=\"/menuOptions/advancedsettings\" component={AdvancedSettings} />\n          <Route exact path=\"/menuOptions/petAndParents\" component={PetAndParents} />\n          <Route exact path=\"/menuOptions/editParent\" component={EditParent} />\n          <Route exact path=\"/MyAccount\" component={MyAccount} />\n          <Route exact path=\"/menuOptions/veterinarians\" component={Veterinarians} />\n          <Route exact path=\"/menuOptions/AddDevice\" component={AddDevice} />\n          <Route exact path=\"/menuOptions/ConnectWorkplace\" component={ConnectWorkplace} />\n          <Route exact path=\"/menuOptions/NewOrg\" component={NewOrg} />\n          <Route exact path=\"/menuOptions/Team\" component={Team} />\n\n        </Switch>\n      </HashRouter>\n    )\n  }\n}\nexport default App\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signUpVerifyEmail/index.jsx",["603"],"import React, { useState, useEffect } from 'react'\nimport { message, Button } from 'antd'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport { useHistory } from 'react-router-dom'\n\nimport './index.less';\nimport { activateUserByEmailCode, resendDeskRegistEmail } from '../../api';\n\nconst VerifyEmail = () => {\n  let history = useHistory()\n  const [code, setCode] = useState('')\n  const [resend, setResend] = useState(60)\n  const [visible, setVisible] = useState(false)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (resend > 0) {\n        setResend(resend - 1)\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer)\n    }\n  })\n\n  const _resend = (e) => {\n\n    if (resend <= 0) {\n\n      //下面写逻辑代码\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\n      let params = {\n        firstName,\n        lastName,\n        domain, email, hash, phone,\n      }\n      if (birthday) {\n        params.birthday = birthday\n      }\n      console.log('重新获取验证码入参', params);\n\n      resendDeskRegistEmail(temporaryStorage.logupEmailCode, params)\n        .then(res => {\n          console.log('重新获取验证码', res);\n          if (res.msg === 'success') {\n            message.success('The email has been resent, please check', 3)\n            temporaryStorage.logupEmailCode = res.data\n            setResend(60)\n          } else {\n            message.error('Failed to send mail', 3)\n\n          }\n        })\n        .catch(err => {\n          console.log('重新获取验证码失败');\n        })\n\n    }\n\n    //阻止a链接跳转\n    if (e && e.preventDefault)\n      e.preventDefault();\n    else\n      window.event.returnValue = false;\n  }\n  const _next = () => {\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\n    message.destroy()\n    if (code !== temporaryStorage.logupEmailCode) {\n      message.error('Verification code input is incorrect', 3)\n      return\n    }\n    else {\n      setVisible(true)\n      activateUserByEmailCode(code)\n        .then(res => {\n          setVisible(false)\n          console.log('验证码验证返回信息：', res);\n          if (res.flag === true) {\n            console.log('验证成功');\n            temporaryStorage.logupSuccessData = res.data\n            temporaryStorage.logupEmailCode = ''\n            history.push('/uesr/logUp/JoinOrganizationByOption')\n          } else {\n            message.error('Verification code verification failed', 3)\n          }\n\n        })\n        .catch(err => {\n          setVisible(false)\n          console.log('验证码验证错误：', err);\n        })\n    }\n\n  }\n\n\n  return (\n    <div id=\"verifyEmail\">\n      <div className=\"heard\">\n        <MaxMin\n          onClick={() => { history.push('/') }}\n          onClick1={() => history.goBack()}\n        />\n      </div>\n      <div className=\"body\">\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\n        <div className=\"text\">Please enter it below to confirm your address.</div>\n        <div className=\"inpF\">\n          <input\n            className=\"inp\"\n            type=\"text\"\n            value={code}\n            placeholder=\"Code\"\n            onChange={(val) => { setCode(val.target.value) }}\n            maxLength={6}\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\n          />\n        </div>\n\n        {/* <div className=\"resend\">\n          <a href=\"#\" onClick={_resend}>Resend</a>\n          {resend > 0 && `(${resend})`}\n        </div> */}\n      </div>\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\n        <div className=\"btnF\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={_next}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      <MyModal\n        visible={visible}\n      />\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default VerifyEmail\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/resetPassword/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanCodeLogin/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/forgotPassword/index.jsx",["604"],"import React, { Component } from 'react'\nimport {\n  Input,\n  Button,\n  message,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport back_white from '../../assets/img/back-white.png'\nimport back_hui from '../../assets/img/back-hui.png'\nimport mellaLogo from '../../assets/images/mellaLogo.png'\nimport errorIcon from '../../assets/images/errorIcon.png'\n\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px, mTop, pX, MTop } from '../../utils/px';\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport MinClose from '../../utils/minClose/MinClose'\n\n\nimport './index.less';\nimport { checkForgetPassword, checkUser, forgetPwd, sendActivateEmail } from '../../api';\n\n//num做超时处理\nlet num = 0\nexport default class ForgotPassword extends Component {\n\n  state = {\n    email: '',\n    success1: false,\n    spin: false,        //调用接口加载中\n    noRegistered: false, //邮箱没被注册跳出的弹窗\n    isLimit: false,      //账号被限制、注册未激活状态\n\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('small')\n    if (temporaryStorage.forgotPassword_email) {\n      this.setState({\n        email: temporaryStorage.forgotPassword_email\n      })\n    }\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n  }\n  componentWillUnmount() {\n    this.timer && clearInterval(this.timer)\n    message.destroy()\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('small')\n    this.setState({\n\n    })\n  }\n\n  _continue = () => {\n    let { email } = this.state\n    message.destroy()\n    console.log('点击了发送按钮', email)\n    if (email.length < 2 || email.indexOf('@') === -1) {\n      message.error('Email number format is incorrect')\n      return\n    }\n    this.setState({\n      spin: true\n    })\n    console.log('开始去检测邮箱');\n    checkUser(email)\n      .then(res => {\n        console.log('检测邮箱存不存在', res);\n        if (res.code) {\n          switch (res.code) {\n\n            case 11011:\n              console.log('邮箱存在，发送邮件');\n              this._sendEmail()\n              break;\n            case 11012:\n              console.log('账号被限制、注册未激活状态');\n              this.setState({\n                isLimit: true\n              })\n              break;\n            // case 11013:\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n            case 11014:\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n              this.setState({\n                noRegistered: true,\n                spin: false\n              })\n              return\n          }\n        } else {\n          console.log('系统错误', res);\n          message.error('system error')\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log('err', err);\n        this.setState({\n          spin: false\n        })\n        message.error('system error')\n\n      })\n\n\n\n  }\n  _sendEmail = () => {\n    forgetPwd(this.state.email)\n      .then(res => {\n        console.log('调用验证邮箱返回的数据', res);\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          console.log('邮件发送成功,请注意查收')\n          this.timer && clearInterval(this.timer)\n          this.timer = setInterval(() => {\n            num++\n            if (num > 300) {\n              message.error('The email is invalid, please click send again', 10)\n              num = 0\n              this.timer && clearInterval(this.timer)\n            }\n            this._validation()\n\n          }, 1000);\n          message.success('The email was sent successfully, please check it', 10)\n        } else {\n          console.log('邮件发送失败');\n          message.error('The account does not exist', 10)\n        }\n      })\n      .catch(err => {\n        console.log('err', err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  _validation = () => {\n\n\n    checkForgetPassword(this.state.email)\n      .then(res => {\n        console.log('验证结果', res);\n        if (res.flag === true) {\n          temporaryStorage.forgotUserId = res.data.userId\n\n          this.timer && clearInterval(this.timer)\n          if (this.state.success1 === false) {\n            this.setState({\n              success1: true\n            }, () => {\n              console.log('跳转');\n              this.props.history.push('/user/login/resetPassword')\n            })\n          }\n          console.log('成功了');\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  render() {\n    return (\n      <div id=\"forgotPassword\">\n\n        <div className=\"heaed\"  >\n          <div className=\"l\"\n          >\n\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.goBack()\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n\n\n\n\n        <div className=\"body\" style={{ height: MTop(280), }}>\n          <div className=\"logo\"\n            style={{ paddingTop: mTop(10) }}\n          >\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\n          </div>\n          <div className=\"text\"\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\n          >\n            Forgot Your Password?\n          </div>\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\n            Please enter email and we<br />\n            will send you a link if there is an<br />\n            account associated with that address.<br />\n          </p>\n          {/* <div className=\"text1\">Please enter email and we</div>\n          <div className=\"text1\">will send you a link if there is an</div>\n          <div className=\"text1\">account associated with that address.</div> */}\n          <div className=\"inpF\">\n\n            <Input className='inp'\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\n              value={this.state.email}\n              placeholder='rachel@friends.com'\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                this.setState({\n                  email: str\n                })\n              }}\n            />\n\n          </div>\n        </div>\n\n\n\n        <div className=\"button1\" >\n          <Button\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\n\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            onClick={this._continue}\n          >\n            SEND LINK\n          </Button>\n        </div>\n\n        {\n          this.state.spin &&\n          <div className=\"modal\">\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\n\n\n            </div>\n            <p>\n              loading...\n            </p>\n          </div>\n        }\n\n\n        {\n          this.state.noRegistered &&\n          <div className=\"modal\">\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\n              <p style={{ fontSize: px(17) }}>\n                This account is not registered. Do you want to go to register?\n              </p>\n\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\n                <Button\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\n\n                  type=\"primary\"\n                  shape=\"round\"\n                  size='large'\n                  onClick={() => {\n                    this.setState({\n                      noRegistered: false\n                    })\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\n\n                  type=\"primary\"\n                  shape=\"round\"\n                  size='large'\n                  onClick={() => {\n                    this.setState({\n                      noRegistered: false\n                    })\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\n\n                  }}\n                >\n                  Jump\n                </Button>\n              </div>\n            </div>\n\n\n\n          </div>\n        }\n\n\n        {\n          this.state.isLimit &&\n          <div className=\"modal\">\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\n              <p style={{ fontSize: px(17) }}>\n                Your email is not verified - please verify\n              </p>\n\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\n                <Button\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\n\n                  type=\"primary\"\n                  shape=\"round\"\n                  size='large'\n                  onClick={() => {\n                    this.setState({\n                      isLimit: false\n                    })\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\n\n                  type=\"primary\"\n                  shape=\"round\"\n                  size='large'\n                  onClick={() => {\n                    this.setState({\n                      isLimit: false,\n                      spin: true\n                    })\n\n                    sendActivateEmail(this.state.email)\n                      .then(res => {\n                        console.log(res);\n                        this.setState({\n                          spin: false,\n                        })\n                        if (res.flag === true) {\n                          console.log('发送成功');\n                          const time = setTimeout(() => {\n                            message.success('The email has been sent, please follow the prompts')\n                            clearTimeout(time)\n                          }, 5);\n\n                        } else {\n                          console.log('发送失败');\n                          const time = setTimeout(() => {\n                            message.error('Failed to send mail')\n                            clearTimeout(time)\n                          }, 5);\n\n                        }\n                      })\n                      .catch(err => {\n                        console.log(err);\n                        this.setState({\n                          spin: false,\n                        })\n                      })\n                  }}\n                >\n                  Jump\n                </Button>\n              </div>\n            </div>\n\n\n\n          </div>\n        }\n\n\n\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/newOrganization/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/inviteTeam/index.jsx",["605","606","607"],"\n/**\n *\n * this.props.location.isAddDoctor是上个组件传过来的标志,为true代表从设置里面的邀请跳转过来的\n */\nimport React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, mellaLogin } from '../../api';\nimport { inviteUserByEmail } from '../../api/melladesk/user';\nlet storage = window.localStorage;\nexport default class InviteTeam extends Component {\n  state = {\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n  }\n\n\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    let { isAddDoctor } = this.props.location\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = !isAddDoctor ? temporaryStorage.logupSuccessData : storage\n    let organizationId = !isAddDoctor ? temporaryStorage.logupOrganization.organizationId : storage.lastOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      message.error('Please enter the invitation email')\n      return\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          if (!isAddDoctor) {\n            this._logIn()\n          } else {\n            this.setState({\n              visible: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n  _food = () => {\n    if (!this.props.location.isAddDoctor) {\n\n    }\n  }\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          {\n            !this.props.location.isAddDoctor && <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._logIn}\n              text={'Skip'}\n            >\n              Skip\n            </Button>\n          }\n\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/joinOrganizationByOption/index.jsx",["608","609","610","611","612"],"import React, { Component } from 'react'\nimport {\n  message,\n  Modal,\n  Input,\n  Spin\n} from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport Close from '../../assets/img/close.png'\nimport left1 from '../../assets/img/left1.png'\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport Button from '../../utils/button/Button'\nimport temporaryStorage from '../../utils/temporaryStorage';\nimport { px } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { listAll, mellaLogin, } from '../../api';\nimport { listAllWorkplaceByOrganizationId } from '../../api/mellaserver/workplace';\nimport { updateUserInfo } from '../../api/mellaserver'\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nexport default class FindWorkplace extends Component {\n\n  state = {\n    search: '',\n    listData: [],\n    searchData: [],\n    selectId: {},\n    isOrg: false,       //nodel框是否显示\n    isWorkplace: false,\n    workplaceList: [],\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    selectworkplace: {}\n  }\n  componentDidMount() {\n\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    listAll()\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            listData: res.data\n          })\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n    this.setState({\n      selectId: temporaryStorage.logupSelectOrganization\n    })\n    temporaryStorage.logupSelectOrganization = {}\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\n      }\n    });\n  };\n\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let { email, hash } = temporaryStorage.logupVetInfo\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('---登录入参', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          isLoading: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.status && res.status === 500) {\n          message.error('Internal Server Error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n        if (res.code === 10000 && res.msg === '系统内部错误') {\n          message.error('system error')\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          this.setState({\n            isOrg: false,\n            isWorkplace: false\n          })\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n          this.props.history.push(\"/MainBody\");\n        }\n\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isLoading: false\n        })\n        message.error('Login failed')\n      })\n  }\n  _search = (val) => {\n    let search = val.target.value\n    let { listData } = this.state\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n  _searchworkPlace = (val) => {\n    let search = val.target.value\n    let listData = this.state.workplaceList\n    console.log('----------------', listData);\n    let searchData = []\n    for (let i = 0; i < listData.length; i++) {\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\n        searchData.push(listData[i])\n      }\n    }\n    this.setState({\n      search,\n      searchData\n    })\n\n  }\n\n  _list = () => {\n    const { search, listData, searchData } = this.state\n    let data = (search.length > 0) ? searchData : listData\n    let option = data.map((item, index) => {\n      return <li key={item.organizationId}\n        onClick={() => {\n          this.setState({\n            selectId: item\n          })\n          console.log(item);\n          temporaryStorage.logupSelectOrganization = item\n\n\n        }}\n\n      >\n        <div className=\"item\"> {item.name}</div>\n\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  _updateUserInfo = (params) => {\n    updateUserInfo(params)\n      .then(res => {\n        console.log(res);\n\n        if (res.flag === true) {\n          message.success('Join successfully', 3)\n\n          console.log('成功',);\n          if (!this.props.location.isSettingIn) {\n            this._logIn()\n          } else {\n            this.setState({\n              isLoading: false\n            })\n            this.props.history.goBack()\n          }\n\n        } else {\n          this.setState({\n            isLoading: false\n          })\n          message.error('Identity update failed', 3)\n        }\n      })\n      .catch(err => {\n        this.setState({\n          isLoading: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n\n  _list1 = () => {\n    const { search, workplaceList, searchData } = this.state\n    let data = (search.length > 0) ? searchData : workplaceList\n    let option = data.map((item, index) => {\n      return <li key={item.workplaceId}\n        onClick={() => {\n          this.setState({\n            selectworkplace: item\n          })\n          console.log(item);\n\n        }}\n\n      >\n\n        {item.workplaceName}\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\n      </li>\n\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n\n  _goNewOrg = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goNewWorkplace = (e) => {\n    e.preventDefault();\n    this.setState({\n      isOrg: false,\n      isWorkplace: false\n    })\n    this.props.history.push('/uesr/logUp/NewOrganization')\n  }\n  _goWorkplace = () => {\n    listAllWorkplaceByOrganizationId(temporaryStorage.logupSelectOrganization.organizationId)\n\n      .then((res) => {\n        console.log(res);\n        if (res.msg === 'success') {\n          this.setState({\n            workplaceList: res.data,\n            isOrg: false,\n\n          }, () => {\n            this.setState({\n              isWorkplace: true\n            })\n          })\n        } else {\n          console.log('请求错误');\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      })\n  }\n  _addworkplaced = () => {\n    let userId = this.props.location.isSettingIn ? storage.userId : temporaryStorage.logupSuccessData.userId\n    let params = {\n      userId,\n      roleId: 2,\n      workplaceId: this.state.selectworkplace.workplaceId,\n      organizationId: this.state.selectworkplace.organizationId\n    }\n    console.log('入参：', params);\n    this.setState({\n      isLoading: true,\n      isWorkplace: false,\n      isOrg: false\n    })\n    this._updateUserInfo(params)\n\n\n  }\n\n  render() {\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\n    return (\n      <div id=\"joinOrganizationByOption\">\n        <div className=\"heard\">\n          {/* 关闭缩小 */}\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            // onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\n            onClick1={() => this.props.history.goBack()}\n\n          />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"text\">Join an Organization</div>\n\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n\n                this.setState({\n                  isOrg: true\n                })\n                console.log('搜索名称加入');\n              }}\n            >\n              <div className=\"iconBox\">\n                <MyIcon type='icon-search' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n\n                <div className=\"title\">Search organization</div>\n\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                console.log('创建');\n                this.props.history.push('/uesr/logUp/NewOrganization')\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Create an organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ paddingTop: px(60) }}\n              onClick={() => {\n                if (this.props.location.isSettingIn) {\n                  this.props.history.goBack()\n                } else {\n                  let params = {\n                    userId: temporaryStorage.logupSuccessData.userId,\n                    roleId: 2,\n                  }\n                  message.destroy()\n                  this.setState({\n                    isLoading: true\n                  })\n                  console.log('搜索id加入', params);\n                  this._updateUserInfo(params)\n                }\n\n\n\n\n              }}>\n              <div className=\"iconBox\">\n                <MyIcon type='icon-guanbi2' className=\"icon\" />\n              </div>\n              <div className=\"r\">\n                <div className=\"listtext\">\n                  <div className=\"title\">Continue without organization</div>\n                </div>\n                <div className=\"arrow\">\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={isOrg}\n          element={\n              <div className='myfindOrg' >\n                <div className=\"orgHeard\">\n                  <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                    <div></div>\n                    <div\n                      onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                    >\n                      <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                    </div>\n                  </div>\n                  <div className=\"text\"\n                    onMouseOver={() => {\n                      if (disabled) {\n                        this.setState({\n                          disabled: false,\n                        });\n                      }\n                    }}\n                    onMouseOut={() => {\n                      this.setState({\n                        disabled: true,\n                      });\n                    }}\n\n                  >Find my organization</div>\n                  <div className=\"searchBox\">\n                    <Input\n                      placeholder=\" &#xe61b; Search organization\"\n                      bordered={false}\n                      allowClear={true}\n                      value={this.state.search}\n                      onChange={this._search}\n                    />\n                  </div>\n                </div>\n                <div className=\"list\">\n                  {this._list()}\n                </div>\n                <div className=\"foot\">\n                  <Button\n                    text={'Join Organization'}\n                    onClick={this._goWorkplace}\n                  />\n                  <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\n                  <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\n                </div>\n              </div>\n          }\n        />\n        <MyModal\n          visible={isWorkplace}\n          element={\n            <div className='myfindOrg' >\n              <div className=\"orgHeard\">\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                  <div\n                    // className=\" iconfont icon-left return\"\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\n                  >\n                    <img src={left1} alt=\"\" style={{ height: px(16) }} />\n                  </div>\n                  <div\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\n                  >\n                    <img src={Close} alt=\"\" style={{ width: px(16) }} />\n                  </div>\n                </div>\n\n\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\n\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\n                  <Input\n                    placeholder=\" &#xe61b; Search workplace\"\n                    bordered={false}\n                    allowClear={true}\n                    value={this.state.search}\n                    onChange={this._searchworkPlace}\n                  />\n\n                </div>\n              </div>\n\n\n              <div className=\"list\"\n\n              >\n                {this._list1()}\n              </div>\n\n              <div className=\"foot\">\n                <Button\n                  text={'Join Workplace'}\n                  onClick={this._addworkplaced}\n                />\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\n              </div>\n\n            </div>\n          }\n        />\n        <MyModal\n          visible={this.state.isLoading}\n        />\n\n      </div>\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/unassigned/index.jsx",["613","614","615","616","617","618"],"import React, { Component } from \"react\";\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\n\nimport Heard from \"./../../utils/heard/Heard\";\nimport del from \"./../../assets/images/del.png\";\nimport Close from \"./../../assets/img/close.png\";\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { px, MTop } from \"./../../utils/px\";\nimport electronStore from \"./../../utils/electronStore\";\nimport MyModal from \"./../../utils/myModal/MyModal\";\n\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\n\nimport \"./index.less\";\nimport {\n  getPetExamByDoctorId, selectBreedBySpeciesId, listAllPetInfo, checkPatientId, addDeskPet, addAndSavePetExam, deletePetExamByExamId\n} from './../../api'\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\nexport default class Unassigned extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    pageSize: 10,//数量\n    currPage: 1,//页码\n    total: 0,//总数\n  };\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"big\");\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    this._getEmergencyHistory(1);\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n    // let list = electronStore.get(\"doctorExam\");\n    // this.setState({\n    //   petListData: list || [],\n    // });\n  }\n  componentWillUnmount() {\n    message.destroy();\n    let ipcRenderer = window.electron.ipcRenderer;\n\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = (currPage) => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n    let data = {\n      pageSize: this.state.pageSize,\n      currPage: currPage,\n    }\n    getPetExamByDoctorId(storage.userId, data)\n      .then((res) => {\n        if (res.flag === true) {\n          let datas = res.data.list;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let {\n              petId,\n              examId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              clinicalDatagroupId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n            } = datas[i];\n            let day = moment().diff(moment(createTime), \"day\");\n            let Tem = temperature;\n            try {\n              if (clinicalDataEntity) {\n                Tem = temperature || clinicalDataEntity.data0;\n              }\n            } catch (error) {\n              console.log(\"抛出的异常\", error);\n            }\n            let str = {\n              clinicalDatagroupId,\n              createTime,\n              date: moment(createTime).format(\"MMM DD\"),\n              time: moment(createTime).format(\"hh:mm A\"),\n              temp: parseInt(Tem * 10) / 10,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              day,\n            };\n            historys.push(str);\n          }\n          let newArr = [];\n          if (this.state.currPage === 1) {\n            newArr = historys\n          } else {\n            let oldArr = this.state.historyData;\n            let arr = historys;\n            newArr = [...oldArr, ...arr];\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(newArr, \"createTime\");\n          this.setState({\n            historyData,\n            loading: false,\n            total: res.data.totalCount\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    selectBreedBySpeciesId({ speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n\n          selectBreedBySpeciesId({ speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        console.log('res: ', res);\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  //搜索宠物\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n\n          checkPatientId(datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n      addDeskPet(this.state.assignPatientId, petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  that._getEmergencyHistory(1);\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web1\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        visible={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n  //表格滚动\n  onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.tableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (this.state.total === this.state.historyData.length) {\n        return false;\n      }\n      this.setState({\n        currPage: this.state.currPage + 1,\n      })\n      this._getEmergencyHistory(this.state.currPage + 1);\n    }\n  }\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      deletePetExamByExamId(key, '')\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              console.log(\"删除成功\");\n              const historyData = [...this.state.historyData];\n              console.log(historyData);\n              this.setState({\n                historyData: historyData.filter((item) => item.historyId !== key),\n              });\n            } else {\n              console.log(\"删除失败\");\n            }\n          }\n        );\n    };\n\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: `${px(8)}px 0`,\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" width={25} style={{ marginRight: \"8px\" }} />\n              </Popconfirm>\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \" Pet Description\",\n        dataIndex: \"description\",\n        key: \"description\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Species\",\n        dataIndex: \"species\",\n        key: \"species\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n\n      {\n        title: \"\",\n        dataIndex: \"assign\",\n        key: \"assign\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"assign\"\n              style={{\n                fontSize: px(16),\n                paddingTop: px(5),\n                paddingBottom: px(5),\n              }}\n              onClick={() => {\n                this.setState({\n                  assignVisible: true,\n                  seleceEmergencies: record,\n                });\n              }}\n            >\n              Assign\n            </div>\n          );\n        },\n      },\n    ];\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n    return (\n      <div id=\"unassigned\">\n        <Heard />\n        <div className=\"body\">\n          <div\n            className=\"title\"\n            style={{\n              marginTop: px(30),\n              fontSize: px(30),\n              marginBottom: px(40),\n            }}\n          >\n            Unassigned Measurements\n          </div>\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\n            <input\n              type=\"text\"\n              placeholder=\"&#xe628; Search Pet Name or Description\"\n              value={this.state.searchText}\n              onChange={(e) => {\n                this.setState({\n                  searchText: e.target.value,\n                });\n                this._search(e.target.value);\n              }}\n              onKeyUp={(e) => {\n                if (e.keyCode === 13) {\n                  this._search();\n                }\n                if (e.keyCode === 27) {\n                  this.setState({\n                    searchText: \"\",\n                  });\n                }\n              }}\n            />\n            <div\n              className=\"searchBtn\"\n              style={{ height: px(35), fontSize: px(18) }}\n              onClick={this._search}\n            >\n              <p>Search</p>\n            </div>\n          </div>\n          <div className=\"tableBox\" onScrollCapture={() => this.onScrollCapture()}>\n            <Table\n              style={{\n                width: \"95%\",\n              }}\n              loading={loading}\n              columns={columns}\n              dataSource={tableData}\n              rowKey={(columns) => columns.historyId}\n              pagination={false}\n              scroll={{\n                // y: MTop(500),\n                y: 500\n              }}\n              className=\"tableStyle\"\n            />\n          </div>\n          {this._modal()}\n        </div>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                let arr = [];\n                                for (let i = 0; i < historyData.length; i++) {\n                                  const element = historyData[i];\n                                  if (\n                                    seleceEmergencies.clinicalDatagroupId !==\n                                    element.clinicalDatagroupId\n                                  ) {\n                                    arr.push(element);\n                                  }\n                                }\n\n                                this.setState({\n                                  assignVisible: false,\n                                  historyData: arr,\n                                });\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/help/index.jsx",["619","620","621","622","623","624"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Form,\n  Input,\n  message,\n  Button,\n  Upload,\n} from \"antd\";\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport { px } from '../../utils/px';\nimport Heard from '../../utils/heard/Heard'\n\nimport using from '../../assets/images/using.png'\nimport measuring from '../../assets/images/measuring.png'\nimport unassigned from '../../assets/images/unassigned.png'\nimport adding from '../../assets/images/adding.png'\nimport email from '../../assets/images/email.png'\nimport phone from '../../assets/images/phone.png'\nimport complaint from '../../assets/images/complaint.png'\n\nimport { useHistory } from 'react-router-dom';\nimport _ from 'lodash';\n\nimport './index.less';\nimport { savefeedback } from '../../api';\n\nlet storage = window.localStorage;\nconst Help = () => {\n  const [form] = Form.useForm();\n  const { TextArea } = Input;\n  let list = [\n    {\n      img: using,\n      title: 'Using the app'\n    }, {\n      img: measuring,\n      title: 'Measuring with Mella'\n    }, {\n      img: unassigned,\n      title: 'Unassigned Readings'\n    },\n    {\n      img: adding,\n      title: 'Adding New Users'\n    },\n  ];\n  let num = 150 / list.length;\n  let mar = num + 'px';\n  let history = useHistory();\n  const [opinionsVisible, setOpinionsVisible] = useState(false);//弹窗显隐\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState();\n  const [fileList, setFileList] = useState([]);//图片组\n\n  const changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big');\n  }\n  //关闭弹窗\n  const handleCancel = () => {\n    setOpinionsVisible(false);\n    setFileList([]);\n  };\n  //提交bug优化信息\n  const onFinish = (e) => {\n    setLoading(true);\n    let imageIds = []\n    _.map(fileList, (item) => {\n      imageIds.push(item.response.data.imageId)\n    })\n    let data = {\n      ...e,\n      imageIds: _.toString(imageIds),\n      userId: storage.userId\n    };\n    savefeedback(data)\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          setOpinionsVisible(false);\n          message.success('Submit Successfully~');\n        } else {\n          message.success('submit Failure!');\n        }\n      })\n      .catch((err) => {\n        message.success('submit Failure!');\n      })\n\n\n  };\n  //提交异常\n  const onFinishFailed = (e) => {\n    message.error('Please fill in the correct information!');\n  };\n  /**\n * 上传文件前校验\n */\n  const beforeNormFile = (e) => {\n    // 检查图片类型\n    const isJPG = e.type === 'image/jpeg';\n    const isPNG = e.type === 'image/png';\n    const isBMP = e.type === 'image/bmp';\n    const isGIF = e.type === 'image/gif';\n    const isWEBP = e.type === 'image/webp';\n    const isPic = isJPG || isPNG || isBMP || isGIF || isWEBP;\n    //文件大小校验\n    const isLt2M = e.size / 1024 / 1024 < 4;\n    if (!isPic) {\n      message.error(`${e.name} not a picture file`);\n    } else if (!isLt2M && isPic) {\n      message.error(`${e.name}Upload is not allowed if the limit exceeds 4M~`);\n    }\n    return isPic && isLt2M ? true : Upload.LIST_IGNORE;\n  };\n  /**\n   * Base64\n   */\n  const getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  };\n  /**\n * 文件上传后处理\n */\n  const handleChange = async (info) => {\n    console.log('info: ', info);\n    if (info.file.status === 'done') {\n      setFileList(info.fileList);\n    }\n    if (info.file.status === 'removed') {\n      setFileList(info.fileList);\n    }\n\n    // getBase64(info.file.originFileObj, (imageUrl) => {\n    //   setLoading(false);\n    //   setImageUrl(imageUrl);\n    // });\n  };\n  //添加图片按钮\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div\n        style={{\n          marginTop: 8,\n        }}\n      >\n        Upload\n      </div>\n    </div>\n  );\n\n  useEffect(() => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', changeFenBianLv)\n    return (() => {\n      let ipcRenderer = window.electron.ipcRenderer\n      ipcRenderer.removeListener('changeFenBianLv', changeFenBianLv)\n    })\n  }, [])\n\n  useEffect(() => {\n    console.log('fileList', fileList);\n  }, [fileList])\n\n  return (\n    <>\n      <div id=\"help\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"body\">\n          <div className=\"title\">How can we help you?</div>\n          <div className=\"input\">\n            <input\n              type=\"text\"\n              placeholder=\"Describe you issue     &#xe63f;\"\n            />\n          </div>\n          <div className=\"list\">\n            <ul>\n              {list.map((data, index) => (\n                <li key={index}>\n                  <>\n                    <img src={data.img} alt=\"\" />\n                    <p>{data.title}</p>\n                  </>\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"popularArticles\">\n            <div className=\"text\">Popular Articles</div>\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\n          </div>\n          <div className=\"popularArticles tutorials\">\n            <div className=\"text\">Tutorials</div>\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\n          </div>\n          <div className=\"time\">\n            <p style={{ fontSize: px(24) }}>Still need help?</p>\n            <div className=\"line\" style={{ height: px(6) }}></div>\n            <p style={{ fontSize: px(24) }}>Monday - Friday: 9am - 5pm (ET)</p>\n          </div>\n        </div>\n        <div className=\"foot\">\n          <div className=\"l\">\n            <img src={complaint} alt=\"\" />\n            <div className=\"text\">Make a Suggestion</div>\n            <p\n              onClick={() => { setOpinionsVisible(true) }}\n            >\n              Submit Opinions\n            </p>\n          </div>\n          <div className=\"l\">\n            <img src={email} alt=\"\" />\n            <div className=\"text\">Drop us a line</div>\n            <a href=\"mailto:support@mella.ai\"\n              onClick={(e) => { }}\n            >support@mella.ai</a>\n          </div>\n          <div className=\"l r\">\n            <img src={phone} alt=\"\" />\n            <div className=\"text\">Bark at Us!</div>\n            <div className=\"text\">201.977.6411</div>\n          </div>\n        </div>\n        <Modal\n          visible={opinionsVisible}\n          destroyOnClose={true}\n          centered\n          maskClosable={false}\n          width={700}\n          onCancel={handleCancel}\n          className=\"opinionsModal\"\n          footer={[]}\n        >\n          <Form\n            form={form}\n            layout=\"vertical\"\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            autoComplete=\"off\"\n          >\n            <Form.Item\n              name=\"title\"\n              label=\"Title\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input title!',\n                },\n              ]}\n            >\n              <Input placeholder=\"Clear titles can be verified more quickly\" />\n            </Form.Item>\n            <Form.Item\n              name=\"description\"\n              label=\"Description\"\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input description!',\n\n                },\n                {\n                  min: 15,\n                  message: 'No less than 15 words'\n                }\n              ]}\n            >\n              <TextArea\n                showCount\n                maxLength={500}\n                autoSize={{\n                  minRows: 3,\n                  maxRows: 5,\n                }}\n                placeholder=\"Please describe your proposed use scenario and your optimization/improvement plan in detail (no less than 15 words)\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"imageIds\"\n              label={`${'Related pictures or screenshots' + '(' + fileList.length + '/' + 5 + ')'}`}\n            // valuePropName=\"fileList\"\n            >\n              <Upload\n                accept=\"image/*\"\n                name=\"img\"\n                action=\"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/image/uploadImage\"\n                beforeUpload={beforeNormFile}\n                onChange={handleChange}\n                withCredentials={true}\n                listType=\"picture-card\"\n              >\n                {fileList.length >= 5 ? null : uploadButton}\n              </Upload>\n            </Form.Item>\n            <Form.Item>\n              <div className='bugSubmitBox'>\n                <Button type=\"primary\" htmlType=\"submit\" size='large' loading={loading} block>\n                  Submit\n                </Button>\n              </div>\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div>\n    </>\n  );\n\n};\n\nexport default Help;\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/petAndParents/index.jsx",["625","626","627","628","629","630"],"\nimport React, { Component } from 'react'\nimport {\n  Select,\n  Button,\n} from 'antd'\n\nimport parent from '../../assets/img/parent.png'\nimport dog from '../../assets/images/reddog.png'\nimport cat from '../../assets/images/redcat.png'\nimport other from '../../assets/images/redother.png'\n\nimport Heart from '../../utils/heard/Heard'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\n\nimport './index.less';\nimport { pet_petall } from '../../api'\n\nconst { Option } = Select;\nlet storage = window.localStorage;\n\nclass PetAndParents extends Component {\n\n  state = {\n    parentList: [],       //宠物主人列表\n    petList: [],          //宠物列表\n    loading: false,       //加载中\n    parentSearchArr: [],  //搜索后的宠物主人列表\n    petSearchArr: [],     //搜索后的宠物列表\n    searchText: '',        //搜索文本\n    parentAndPetList: [],  //宠物主人下的所有宠物,\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    this._getExam()\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    ipcRenderer.send('Lowbig')\n  }\n  _getExam = async () => {\n    this.setState({\n      loading: true,\n      spin: false\n    })\n    let params = {\n      offset: 0,\n      size: 500,\n    }\n    pet_petall(storage.lastOrganization, params)\n      .then(res => {\n        this.setState({\n          loading: false\n        })\n        if (res.flag === true) {\n          let data = []\n          let list = res.data.list\n          let owerList = []\n          let parentAndPetList = []\n          for (let i = 0; i < list.length; i++) {\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\n            let json = {\n              insertedAt: createTime,\n              name: petName,\n              petId,\n              rfid,\n              url,\n              speciesId,\n              type: 'pet',\n              patientId,\n              petBirthday: birthday,\n              breedName,\n              gender\n            }\n            data.push(json)\n            if (userId) {\n              let flogNum = -1\n\n              for (let i = 0; i < owerList.length; i++) {\n                let ower = owerList[i]\n                if (ower.userId === userId) {\n                  flogNum = i\n                  break;\n                }\n\n              }\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\n                let owerJson = {\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\n                }\n                owerList.push(owerJson)\n                let parentAndPetJson = {\n                  parent: owerJson,\n                  pets: [json]\n                }\n                console.log('parentAndPetJson: ', parentAndPetJson);\n\n                parentAndPetList.push(parentAndPetJson)\n              } else {\n                parentAndPetList[flogNum].pets.push(json)\n              }\n            }\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            petList: data,\n            parentList: owerList,\n            parentAndPetList\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        })\n      })\n\n\n\n  }\n  list = (value) => {\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\n    let data = []\n    if (value === 'parent') {\n      if (searchText.length > 0) {\n        data = parentSearchArr\n      } else {\n        data = parentList\n      }\n    } else {\n      if (searchText.length > 0) {\n        data = petSearchArr\n      } else {\n        data = petList\n      }\n    }\n    let options = data.map((item, index) => {\n      let { speciesId, url, userImageUrl, patientId, petId, name,userId } = item\n      let images = null\n      if (value === 'parent') {\n        images = `url(${userImageUrl}?download=0&width=150)`\n        if (!userImageUrl) {\n          images = `url(${parent})`\n        }\n      } else {\n        images = `url(${url}?download=0&width=150)`\n        if (!url) {\n          switch (speciesId) {\n            case 1: images = `url(${cat})`\n              break;\n            case 2: images = `url(${dog})`\n              break\n            default: images = `url(${other})`\n              break;\n          }\n        }\n      }\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `0 8px ${px(15)}px 0`, borderRadius: px(20) }}\n          onClick={() => {\n            let params = []\n            if (item.type !== 'pet') {\n              for (let i = 0; i < parentAndPetList.length; i++) {\n                if (item.userId === parentAndPetList[i].parent.userId) {\n                  params = parentAndPetList[i]\n                  break\n                }\n              }\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: userId })\n            } else {\n              this.props.petDetailInfoFun(item);\n              this.props.history.push({ pathname: '/page9', parent: params })\n            }\n          }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div\n              className='img'\n              style={{\n                width: px(50),\n                height: px(50),\n                marginRight: px(20),\n                borderRadius: px(60),\n                backgroundImage: images,\n              }}>\n            </div>\n\n            <div className='petInfo' >\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n\n    let liStyle = { backgroundColor: '#fff', }\n    if (this.state.petList.length > 6) {\n      liStyle = { height: px(560), overflowY: 'auto' }\n    }\n    return (\n      <div className='petList'>\n        <ul style={liStyle}>\n          {options}\n        </ul>\n      </div>\n    )\n\n  }\n  inputChange = (text) => {\n    let search = text.target.value\n    this.setState({\n      searchText: search\n    })\n\n    let { parentList, petList } = this.state\n    console.log(parentList, petList);\n    let keyWord = search\n\n    let parentSearchData = []\n    for (let i = 0; i < parentList.length; i++) {\n      let petName = parentList[i].name.toLowerCase() || ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        parentSearchData.push(parentList[i])\n      }\n    }\n\n    let petSearchData = []\n    for (let i = 0; i < petList.length; i++) {\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${rfid}`.indexOf(keyWord) !== -1\n      ) {\n        petSearchData.push(petList[i])\n      }\n    }\n    this.setState({\n      petSearchArr: petSearchData,\n      parentSearchArr: parentSearchData\n    })\n\n\n  }\n\n  render() {\n    return (\n      <div id=\"PetAndParents\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n        <div className=\"body\">\n          <div className='titleBox'>\n            <h1 style={{ fontSize: px(20) }}>{`Pet & Parents Profile Management`}</h1>\n          </div>\n          <div className=\"search\">\n            <div className=\"searchL\">\n              <input\n                type=\"text\"\n                style={{ paddingLeft: px(25), height: px(34) }}\n                placeholder=\"&#xe62c; Search \"\n                value={this.state.searchText}\n                onChange={(text) => {\n                  this.inputChange(text)\n                }}\n              />\n            </div>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              Search\n            </Button>\n          </div>\n          <div className=\"btns\">\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n            >\n              + New Parent\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => {\n                this.props.history.push('/pet/doctorAddPet')\n              }}\n            >\n              + New Pet\n            </Button>\n          </div>\n          <div className=\"lists\">\n            <div className=\"listsL\">\n              {this.list('parent')}\n            </div>\n            <div className=\"listsL\">\n              {this.list('pet')}\n            </div>\n          </div>\n        </div>\n        <MyModal visible={this.state.loading} />\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(PetAndParents);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/editParent/index.jsx",["631","632","633","634","635","636","637","638","639"],"import React, { Component } from 'react'\nimport { Menu, message, Select, Button, Spin, Avatar } from 'antd';\nimport { createFromIconfontCN } from '@ant-design/icons';\n\nimport reddog from '../../assets/images/reddog.png'\nimport redcat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport selectphoto from '../../assets/images/sel.png'\n\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport Heard from '../../utils/heard/Heard';\nimport AvatarUpload from '../../components/avatar/Avatar';\nimport { petPicture } from '../../utils/commonFun';\n\nimport { connect } from 'react-redux'\nimport { petDetailInfoFun } from '../../store/actions';\nimport { getUserInfoByUserId, updateUserInfo, selectPetInfoByUserId } from '../../api/mellaserver/user';\n\nimport { getPersonPetByUserId } from '../../api/mellaserver/petall';\n\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nclass EditParent extends Component {\n  state = {\n    lastName: '',       //宠物主人性\n    firstName: '',      //宠物主人名\n    email: '',          //邮箱号\n    phone: '',          //电话号码\n    spin: false,        //加载中\n    imageId: null,      //图片的ID值\n    petList: [],         //当前这个宠物主人下的所有宠物\n    userId: '',          //当前这个宠物主人的userId\n    userImageUrl: '',\n    loading: false,//加载\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n    if (this.props.history.location.userId) { //接受入参\n      let userId = this.props.history.location.userId\n      this.getPersonPet(userId);\n      this._getParent(userId);\n      this.setState({\n        userId,\n      })\n    }\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('Lowbig')\n    this.setState({\n    })\n  }\n  //获取用户详情信息\n  _getParent = (data) => {\n    this.setState({\n      spin: true\n    })\n    getUserInfoByUserId(data)\n      .then(res => {\n        if (res.msg === 'success') {\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\n          firstName = firstName ? firstName : ''\n          phone = phone ? phone : ''\n          email = email ? email : ''\n          lastName = lastName ? lastName : ''\n          this.setState({\n            userImageUrl,\n            firstName,\n            lastName,\n            phone,\n            email,\n            imageId,\n            spin: false\n          })\n        } else {\n          this.setState({\n            spin: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          spin: false\n        })\n      })\n  }\n  //获取用户当前组织下的所有宠物\n  getPersonPet = (userId) => {\n    this.setState({ loading: true });\n    let newData = {\n      orgId: storage.lastOrganization,\n      userId: userId,\n    }\n    getPersonPetByUserId(newData)\n      .then((res) => {\n        this.setState({ loading: false });\n        if (res.msg === 'success') {\n          this.setState({ petList: res.data })\n        } else {\n          message.error('Failed to obtain pet information');\n        }\n      })\n      .catch((err) => {\n        message.error('Failed to obtain pet information');\n      })\n  }\n  _petSpecies = () => {\n    let { userImageUrl } = this.state\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\n    let { firstName, lastName } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>First Name</p>\n            <input\n              type=\"text\"\n              value={firstName}\n              onChange={(item) => {\n                this.setState({\n                  firstName: item.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Last Name</p>\n            <input\n              type=\"text\"\n              value={lastName}\n              onChange={(item) => {\n                this.setState({\n                  lastName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <AvatarUpload\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _petName = () => {\n    let { email, phone } = this.state\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物列表\n  petList = () => {\n    let { petList } = this.state\n    let options = petList.map((item, index) => {\n      let { url, breedName, birthday, gender, petName, imageId, petSpeciesBreedId } = item\n      let images = `url(${url}?download=0&width=150)`\n      let petAge = moment(new Date()).diff(moment(birthday), 'years')\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div className=\"itemL\">\n              <Avatar src={this.shoePetPicture(petSpeciesBreedId, url)} size={50} />\n              <p\n                onClick={(e) => {\n                  let location = {\n                    pet: { ...item },\n                    userId: this.props.history.location.userId\n                  }\n                  this.props.history.push({ pathname: '/page9', ...location });\n                }}\n              >\n                {petName}\n              </p>\n            </div>\n            <div className=\"itemC\">\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\n            </div>\n            <div className=\"itemR\">\n              <p>{`${breedName}`}</p>\n            </div>\n          </div>\n        </li >\n      )\n    })\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\n    if (petList.length > 3) {\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\n    }\n    return (\n      <ul style={liStyle}>\n        {options}\n      </ul>\n    )\n  }\n  //保存\n  save = () => {\n    message.destroy()\n    let { firstName, lastName, email, phone, imageId, userId } = this.state\n    console.log({ firstName, lastName, email, phone, imageId });\n    let parames = {\n      userId,\n      email,\n      phone,\n      firstName,\n      lastName,\n      imageId\n    }\n    this.setState({\n      spin: true\n    })\n    message.destroy()\n    updateUserInfo(parames)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          this.props.history.goBack()\n        } else {\n          message.error('fail to edit')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        message.error('fail to edit')\n        console.log(err);\n      })\n  }\n  //选择宠物头像\n  shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  render() {\n    return (\n      <div id=\"editParent\">\n        <div className=\"heard\">\n          <Heard />\n        </div>\n        <div className=\"editPetInfo_top\" >\n          <div className=\"parentInfo\">\n            <div className=\"title\" >{`Parent Information`}</div>\n            <div className=\"info\">\n              {this._petSpecies()}\n              {this._petName()}\n            </div>\n          </div>\n          <div className=\"pets\">\n            <div className=\"petsTitle\">\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\n              {/* <Button type=\"primary\" shape=\"round\">+ Add New Pet</Button> */}\n            </div>\n            <div className=\"petList\">\n              {this.petList()}\n            </div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              message.destroy()\n              this.props.history.push('/menuOptions/petAndParents');\n            }}\n          >\n            cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              this.save();\n            }}\n          >\n            Save Changes\n          </Button>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n      </div>\n    )\n  }\n};\n\nexport default connect(\n  (state) => ({\n\n  }),\n  {\n    petDetailInfoFun\n  }\n)(EditParent);\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/advancedSettings/index.jsx",["640","641"],"\nimport React, { Component } from 'react'\nimport { message } from 'antd';\nimport Heart from '../../utils/heard/Heard'\nimport { px, win } from '../../utils/px'\nimport MyModal from '../../utils/myModal/MyModal.jsx'\nimport './index.less';\nimport { getOta } from '../../api/mellaserver/backend';\nimport { versionComarision } from '../../utils/commonFun';\nimport { getInfoOfLatestDevice } from '../../api/mellaserver/mellarecord';\n\nlet ipcRenderer = window.electron.ipcRenderer\nlet storage = window.localStorage;\nlet uploadType = ''\nexport default class AdvancedSettings extends Component {\n\n  state = {\n    isHaveBase: true,\n    uploadText: '',\n    isUpload: false,\n    updateModal: false,\n    progress: 0,\n\n\n    localVersion: '',\n    cloudVersion: '',\n    filePath: ''\n  }\n\n  componentDidMount() {\n    ipcRenderer.send(\"big\", win());\n    //检测是否有usb设备\n    ipcRenderer.on('noUSB', this._noUSB)\n    //升级过程中发送的过程信息\n    ipcRenderer.on('uploadBaseInfo', this._uploadBaseInfo)\n    //底座发过来的指令信息\n    ipcRenderer.on('sned', this._send)\n    //发送结束升级指令,相当于初始化\n    ipcRenderer.send('reUpload', {})\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('uploadBaseInfo', this._uploadBaseInfo)\n    ipcRenderer.removeListener('sned', this._send)\n\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    console.log(data);\n    let { isUpload } = this.state\n\n    if (data[2] === 54) {\n      if (isUpload) {\n        if (data[3] === 0) {\n          console.log('这是已经在升级状态下的, 要他重新插拔底座然后再去发送指令');\n          this.setState({\n            uploadText: 'Start the upgrade after re-plugging the base'\n          })\n          ipcRenderer.send('startUpload', {})\n        }\n      }\n\n    } else if (data[2] === 182) {\n      //为0代表底座通讯关闭成功了\n      if (data[3] === 0) {\n        if (isUpload) {\n          console.log('发送指令让底座进入升级状态');\n          ipcRenderer.send('enterUpgrade', { command: '38', arr: ['5A'] })\n        }\n\n      }\n    } else if (data[2] === 136) {\n      //获取到了版本信息,把定时器关闭,此底座不是很老版本\n      console.log('版本信息:', data);\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\n      let localVersion = `${data[6]}.${data[7]}.${data[8]}`\n      this.setState({\n        localVersion,\n        uploadText: `The current version number is v${localVersion}, getting the latest version`\n      }, () => {\n        this.cloudVersion()\n      })\n    }\n\n  }\n\n  //是否插上底座设备，为true则代表插上了底座设备，反之为拔掉了底座设备\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    let { isUpload, progress } = this.state\n    if (data === false) {\n\n      this.setState({\n        isHaveBase: true\n      })\n      if (isUpload) {\n        if (progress === 0) {\n          console.log('正在升级过程中检测到了拔插 前去发送升级文件', uploadType);\n          if (uploadType === 'base') {\n            console.log('底座升级');\n            ipcRenderer.send('updateBase', { state: 'base', url: this.state.filePath, fileName: `mellabase${this.state.cloudVersion}` })\n          } else if (uploadType === 'reset') {\n            console.log('底座出厂设置');\n            ipcRenderer.send('updateBase', { state: 'reset', })\n          }\n        } else if (progress === 100) {\n          this.failTimer && clearTimeout(this.failTimer)\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.success('Update Successful');\n          ipcRenderer.send('reUpload', {})\n        } else {\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.error('Upgrade failed')\n          ipcRenderer.send('reUpload', {})\n        }\n\n\n      }\n\n    } else {\n      if (this.state.isHaveBase) {\n        this.setState({\n          isHaveBase: false\n        })\n      }\n      if (isUpload) {\n        if (progress > 0 && progress < 100) {\n          this.setState({\n            isUpload: false,\n            updateModal: false,\n            progress: 0,\n            localVersion: '',\n            cloudVersion: '',\n          })\n          message.destroy()\n          message.error('Upgrade failed')\n          ipcRenderer.send('reUpload', {})\n        }\n      }\n\n\n    }\n  }\n  _uploadBaseInfo = (e, data) => {\n    console.log('升级过程中的信息：', data);\n    switch (data.status) {\n      case 'error':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n          progress: 0,\n          localVersion: '',\n          cloudVersion: '',\n        })\n        message.destroy()\n        message.error(data.data)\n        ipcRenderer.send('reUpload', {})\n        break;\n      case 'error1':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n          progress: 0,\n          localVersion: '',\n          cloudVersion: '',\n        })\n        message.destroy()\n        message.error('Upgrade failed, please try again')\n        ipcRenderer.send('reUpload', {})\n        break;\n\n\n      case 'normal':\n        this.setState({\n          uploadText: data.data,\n          progress: data.progress\n        })\n        if (data.progress === 100) {\n          console.log('进度到达100了');\n          this.failTimer && clearTimeout(this.failTimer)\n          this.failTimer = setTimeout(() => {\n\n            this.setState({\n              isUpload: false,\n              updateModal: false,\n              progress: 0,\n              localVersion: '',\n              cloudVersion: '',\n            })\n            message.destroy()\n            message.error('Upgrade failed')\n            ipcRenderer.send('reUpload', {})\n          }, 5000);\n        }\n        break;\n\n      case 'success':\n        this.setState({\n          isUpload: false,\n          updateModal: false,\n        })\n        message.destroy()\n        message.success(data.data)\n        ipcRenderer.send('reUpload', {})\n\n        break;\n\n      default:\n        break;\n    }\n\n\n\n  }\n  _upload = (val) => {\n\n    let { isHaveBase } = this.state\n    if (!isHaveBase) {\n      this.setState({\n        isUpload: false,\n        updateModal: false,\n      })\n      message.destroy()\n      message.error('No base device found, please plug it in and try again')\n    } else {\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\n      this.setState({\n        uploadText: 'Detect upgrade environment',\n        isUpload: true,\n        updateModal: true,\n        progress: 0\n      })\n      uploadType = val\n      //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\n      const timer = setTimeout(() => {\n        console.log('发送指令查看底座是否已经在升级状态');\n        ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\n        clearTimeout(timer)\n      }, 100);\n\n      //2.如果能收到关闭指令，则发送开始升级指令\n\n      //3.如果如果测试检测到usb插拔，则去发送文件\n\n\n\n    }\n  }\n\n  _upload1 = (val) => {\n\n    let { isHaveBase } = this.state\n    message.destroy()\n    if (!isHaveBase) {\n      this.setState({\n        isUpload: false,\n        updateModal: false,\n        localVersion: '',\n        cloudVersion: '',\n      })\n\n      message.error('No base device found, please plug it in and try again')\n    } else {\n      console.log('---我插入底座了，准备去升级, 这里就可以打开modal框了');\n      this.setState({\n        uploadText: 'Detect upgrade environment',\n        updateModal: true,\n        progress: 0,\n        localVersion: '',\n        cloudVersion: '',\n      }, () => {\n        this.localVersion()\n      })\n      uploadType = val\n      //第一步,查询本地版本号\n\n\n\n      //2.如果能收到关闭指令，则发送开始升级指令\n\n      //3.如果如果测试检测到usb插拔，则去发送文件\n\n\n\n    }\n  }\n  //询问本地的版本号\n  localVersion = () => {\n    this.setState({\n      uploadText: 'Query the local version number',\n    })\n    ipcRenderer.send('usbdata', { command: '08', arr: [''] })\n    this.localVersionTimer && clearTimeout(this.localVersionTimer)\n    this.localVersionTimer = setTimeout(() => {\n      //如果3秒后还没有收到桌面返回的版本号,则代表这是很老的底座程序,直接去下载文件升级\n      this.cloudVersion()\n      this.localVersionTimer && clearTimeout(this.localVersionTimer)\n    }, 3000);\n  }\n  //询问网端最新的版本号\n  cloudVersion = () => {\n    console.log('-----进入获取网端版本时间了');\n    getInfoOfLatestDevice('mellabase')\n      .then(res => {\n        console.log('获取到了网端的版本号', res);\n        if (res.flag) {\n          let { firmwareVersion, updateUrl } = res.data\n          let cloudBigtolocal = versionComarision(firmwareVersion, this.state.localVersion)\n          console.log('比较信息:', firmwareVersion, this.state.localVersion, cloudBigtolocal);\n          if (cloudBigtolocal || !this.state.localVersion) {\n            this.setState({\n              cloudVersion: firmwareVersion,\n              filePath: updateUrl,\n              isUpload: true,\n              uploadText: 'Start getting upgrade files'\n\n            })\n\n            //第一步，发送一个关闭通信的指令，看是否能够收到，如果收不到则判定底座已经在升级状态下，直接去发送文件\n            const timer = setTimeout(() => {\n              console.log('发送指令查看底座是否已经在升级状态');\n              ipcRenderer.send('usbdata', { command: '36', arr: ['00'] })\n              clearTimeout(timer)\n            }, 100);\n          } else {\n            this.setState({\n              updateModal: false\n            })\n            message.success(`The hardware version is v${firmwareVersion}, which is the latest version`)\n          }\n\n\n\n        } else {\n          console.log('没有获取到版本的文件');\n          message.error('Failed to get the latest version')\n          this.setState({\n            updateModal: false\n          })\n        }\n      })\n      .catch(err => {\n        console.log('获取版本失败,停止升级', err);\n        message.error('Failed to get the latest version')\n        this.setState({\n          updateModal: false\n        })\n\n      })\n  }\n\n  render() {\n\n    return (\n      <div id='advancedsettings'>\n        <div className=\"heard\">\n          <Heart />\n          <div className=\"title\">\n            <h2>Advanced Settings</h2>\n          </div>\n\n        </div>\n\n        <div className=\"body\">\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                Factory Reset<br /><br />\n\n                This will erase all data from your Mella<br /> device, including:<br />\n                - All installed updates<br />\n                - User preferences and Settings<br />\n              </p>\n            </div>\n            <div className=\"rbtn\"\n              // onClick={this._reset}\n              onClick={() => this._upload('reset')}\n            >\n              <div className=\"btn\">Erase all data and reset device</div>\n            </div>\n          </div>\n\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                Mella Base\n              </p>\n            </div>\n            <div className=\"rbtn\"\n\n              onClick={() => this._upload1('base')}\n            >\n              <div className=\"btn\">Update Mella Charging Base</div>\n            </div>\n          </div>\n\n          <div className=\"item\">\n            <div className=\"ltext\">\n              <p style={{ fontSize: px(18) }}>\n                MellaPro Thermometer\n              </p>\n            </div>\n            <div className=\"rbtn\"\n              onClick={() => {\n                // ipcRenderer.send('usbdata', { command: '01', arr: ['11'] })\n              }}\n            >\n              <div className=\"btn\">Connect Bluetooth and Update</div>\n            </div>\n          </div>\n        </div>\n\n        <MyModal\n          visible={this.state.updateModal}\n          // visible={true}\n          element={\n            <div style={{ height: px(200), borderRadius: px(20) }} className=\"upload\">\n\n              {/* <p>{this.state.uploadText} </p> */}\n              <p style={{ color: '#000', padding: 0, margin: 0 }}>{this.state.uploadText}</p>\n            </div>\n          }\n        />\n      </div>\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/settings/index.jsx",["642","643","644","645"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/myAccount/index.jsx",["646","647","648","649","650"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { } from \"../../store/actions\";\nimport {\n  Layout,\n  Button,\n  Form,\n  Input,\n  Radio,\n  Col,\n  Row,\n  Checkbox,\n  Select,\n  message,\n} from \"antd\";\n\nimport changePhoto from '../../assets/images/changePhoto.png';\n\nimport { px, mTop } from \"../../utils/px\";\nimport countryList from '../../utils/areaCode/country';\nimport Avatar from '../../components/avatar/Avatar'\nimport { getUserInfoByUserId, update } from '../../api'\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst MyAccount = ({ bodyHeight }) => {\n  let storage = window.localStorage;\n  const [form] = Form.useForm();\n  const { Option } = Select;\n  const [imageId, setImageId] = useState();\n  const [petUrl, setPetUrl] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [country, setCountry] = useState('US');\n  const [countryArr, setCountryArr] = useState();\n  const [infoData, setInfoDate] = useState();\n\n  const onFinish = (values) => {\n    let array = ['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'];\n    for (let index = 0; index < _.size(values.domain); index++) {\n      array[_.toNumber(values.domain[index])] = '1';\n    }\n    let reg = new RegExp(',', \"g\");\n    let res = _.toString(array).replace(reg, '');\n    let data = {\n      ...values,\n      imageId: imageId,\n      domain: res,\n      userId: storage.userId\n    };\n    update(data)\n      .then((res) => {\n        if (res.msg === 'success') {\n          message.success('The user information is updated successfully');\n        } else {\n          message.error('Description Failed to update user information');\n        }\n      })\n  };\n\n  useEffect(() => {\n    let arr = countryList.map(item => item.locale)\n    arr.sort(function (a, b) {\n      return a.localeCompare(b)\n    })\n    setCountryArr(arr);\n  }, []);\n\n  useEffect(() => {\n    getUserInfoByUserId(storage.userId)\n      .then((res) => {\n        if (res.flag === true) {\n          let newData = {\n            ...res.data,\n            domain: _.toArray(res.data.domain)\n\n          }\n          let arr = [];\n          for (let index = 0; index < _.size(newData.domain); index++) {\n            if (newData.domain[index] === '1') {\n              arr.push(_.toString(index));\n            }\n          }\n          newData.domain = arr;\n          form.setFieldsValue(newData);\n          setInfoDate(newData);\n          setImgUrl(res.data?.userImage?.url);\n        }\n      })\n  }, [])\n\n  return (\n    <Layout className=\"myAccountBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{\n          height: '100%',\n          backgroundColor: '#FFFFFF',\n          borderBottom: '2px solid #979797',\n          display: 'flex'\n        }}>\n          <span className=\"headerTitle\">My Account</span>\n        </div>\n      </div>\n      <div>\n        <Form\n          form={form}\n          layout=\"vertical\"\n          onFinish={onFinish}\n          className=\"accountForm\"\n        >\n          <Row>\n            <Col flex={1} className=\"leftColBox\">\n              <Form.Item valuePropName=\"fileList\" name=\"imageId\" className=\"imageFormItem\">\n                <div style={{ display: 'grid', justifyItems: 'center', alignItems: 'center' }}>\n                  <Avatar\n                    init={\n                      <div className=\"ciral\">\n                        <img src={imgUrl ? imgUrl : changePhoto} alt=\"\" id=\"touxiang\" height=\"300px\" />\n                        <p style={{ fontSize: px(14), height: mTop(35) }}>Change Photo</p>\n                      </div>\n                    }\n                    getinfo={(val) => {\n                      if (val) {\n                        setImageId(val);\n                      }\n\n                    }}\n                    getAllInfo={(val) => {\n                      if (val.url) {\n                        setPetUrl(val.url);\n                      }\n                    }}\n                  />\n                </div>\n              </Form.Item>\n              <Form.Item label=\"Email\" name=\"email\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n            <Col flex={1} className=\"rightColBox\">\n              <Form.Item label=\"FirstName\" name=\"firstName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"LastName\" name=\"lastName\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item label=\"Phone\" name=\"phone\">\n                <Input placeholder=\"input placeholder\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n            </Col>\n          </Row>\n          <Form.Item className=\"addressFormItem\" label=\"Address\">\n            <div style={{ display: 'flex' }}>\n              <Form.Item name=\"address1\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address1\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"address2\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"address2\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"city\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"city\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"state\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"state\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"zipcode\" style={{ marginRight: px(16) }}>\n                <Input placeholder=\"zipcode\" bordered={false} className=\"accountInput\" />\n              </Form.Item>\n              <Form.Item name=\"country\">\n                <Select\n                  showSearch\n                  style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\n                  bordered={false}\n                  optionFilterProp=\"children\"\n                  defaultValue=\"US\"\n                  // onChange={onChange}\n                  onSelect={(val) => { setCountry(val) }}\n                  filterOption={(input, option) => option.children.toLowerCase().includes(input.toLowerCase())}\n                // open\n                // dropdownClassName=\"addressSelectBox\"\n                >\n                  {_.map(countryArr, (item, index) => (\n                    <Option key={index} value={item}>{item}</Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </div>\n          </Form.Item>\n          <Form.Item className=\"expertiseFormItem\" label=\"Areas of Expertise\" name=\"domain\">\n            <Checkbox.Group>\n              <Row>\n                <Col span={6}>\n                  <Checkbox\n                    value='0'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Dogs\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='1'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cats\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='2'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Small Pets\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='3'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Nutrition\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='4'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Surgery\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='5'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Zoo\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='6'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Wildlife\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='7'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Cardiology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='8'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Neurology\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='9'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Anaesthesia\n                  </Checkbox>\n                </Col>\n                <Col span={6}>\n                  <Checkbox\n                    value='10'\n                    style={{\n                      lineHeight: '32px',\n                    }}\n                  >\n                    Other\n                  </Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>\n          </Form.Item>\n          <Form.Item className=\"btnFormItem\">\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Button type=\"primary\" htmlType=\"submit\" shape=\"round\" size=\"large\" style={{ width: px(260) }}>Save Changes</Button>\n            </div>\n          </Form.Item>\n        </Form>\n      </div>\n    </Layout>\n  );\n}\n\nMyAccount.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({}),\n)(MyAccount);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/admin_VetProfile/index.jsx",["651","652","653","654","655","656","657","658"],"\nimport React, { Component } from 'react'\nimport {\n  Select,\n  message\n} from 'antd'\n\nimport parent from '../../assets/img/parent.png'\nimport selectphoto from '../../assets/images/sel.png'\nimport close from '../../assets/img/close.png'\nimport dui from '../../assets/images/dui.png'\n\nimport Heart from '../../utils/heard/Heard'\nimport { mTop, px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\nimport Avatar from '../../components/avatar/Avatar'\nimport moment from 'moment'\nimport './index.less';\nimport { listDoctorsByAdmin } from '../../api/mellaserver/organization'\nimport { admin_users } from '../../api/mellaserver/new'\n\nconst { Option } = Select;\nlet storage = window.localStorage;\n\nexport default class Veterinarians extends Component {\n\n  state = {\n    parentList: [],\n    petList: [],\n    loading: false,\n    parentSearchArr: [],\n    petSearchArr: [],\n    searchText: '',\n    clickVet: false,\n    userList: [],\n    clickUserItem: {},\n    isAdmin: false,\n    imageId: null,\n    imgUrl: '',\n    doctorArr: [],\n    dockerSearchArr: []\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    ipcRenderer.send('Lowbig')\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n    this._getExam()\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    let { height, width } = window.screen\n    let windowsHeight = height > width ? width : height\n    ipcRenderer.send('Lowbig')\n    this.setState({\n\n    })\n  }\n\n  _getExam = async () => {\n    console.log('进来了');\n    this.setState({\n      loading: true,\n      spin: false\n    })\n    let params = {\n      doctorId: storage.userId,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n\n    console.log('查询宠物的入参', params);\n\n\n    listDoctorsByAdmin(storage.lastOrganization, params)\n      .then(res => {\n        console.log('人员列表', res);\n        this.setState({\n          loading: false\n        })\n        if (res.flag === true && res.code === 20000) {\n          let data = []\n          for (let i = 0; i < res.data.length; i++) {\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\n\n            let json = {\n              insertedAt: createTime,\n              name: `${lastName} ${firstName}`,\n              userId,\n              email,\n              birthday,\n              isLimit,\n              isDeleted,\n              phone,\n              url,\n              firstName, lastName, roleId\n            }\n            data.push(json)\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            doctorArr: data,\n            // parentList: data //这里只是测试，后期删除\n\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false\n        })\n      })\n\n\n\n  }\n\n\n\n  list = () => {\n    let { doctorArr, dockerSearchArr, searchText } = this.state\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\n\n\n\n\n    let options = data.map((item, index) => {\n      let { url, firstName, lastName } = item\n      let images = `url(${url}?download=0&width=150)`\n      if (!url) {\n        images = `url(${parent})`\n      }\n\n\n      return (\n        <li\n          key={`${index}`}\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\n          onClick={() => {\n            console.log(item);\n            let { name, email, phone, roleId } = item\n            let isAdmin = roleId === '3' ? true : false\n\n            this.setState({\n              clickVet: true,\n              clickUserItem: item,\n              name,\n              email,\n              phone,\n              isAdmin,\n              imgUrl: ''\n            })\n\n          }}\n        >\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\n            <div\n              className='img'\n              style={{\n                width: px(50),\n                height: px(50),\n                marginRight: px(20),\n                borderRadius: px(60),\n                backgroundImage: images,\n              }}>\n\n              <div\n                className=\"green\"\n                style={{\n                  width: px(8),\n                  height: px(8),\n                  borderRadius: px(8),\n                  backgroundColor: '#7ED266',\n                  right: px(-5),\n                  top: px(-3)\n\n                }}\n\n              />\n\n            </div>\n\n            <div className='petInfo' >\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\n            </div>\n          </div>\n        </li >\n      )\n\n    })\n\n    let liStyle = { backgroundColor: '#fff', }\n    if (this.state.petList.length > 16) {\n      liStyle = { height: px(750), overflowY: 'auto', }\n    }\n\n\n    return (\n      <div className='petList'>\n        <ul style={liStyle}>\n          {options}\n        </ul>\n      </div>\n    )\n\n  }\n  inputChange = (text) => {\n    let search = text.target.value\n    this.setState({\n      searchText: search\n    })\n\n    let { doctorArr } = this.state\n\n    let keyWord = search\n\n    let parentSearchData = []\n\n    for (let i = 0; i < doctorArr.length; i++) {\n      let { email, phone, name, } = doctorArr[i]\n      email = email ? email.toLowerCase() : ''\n      phone = phone ? phone.toLowerCase() : ''\n      name = name ? name.toLowerCase() : ''\n      let keyLower = keyWord.toLowerCase()\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\n        parentSearchData.push(doctorArr[i])\n      }\n    }\n\n\n    this.setState({\n\n      dockerSearchArr: parentSearchData\n    })\n\n\n  }\n  _petSpecies = () => {\n\n\n    let { clickUserItem, isAdmin } = this.state\n    let { url } = clickUserItem\n    this.avatar = url ? url : selectphoto\n    return (\n      <div className=\"petSpecies\">\n\n        <div className=\"r\">\n\n          <div className=\"img\">\n            <Avatar\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                console.log('我是父组件，从子组件获取到的数据位：', val);\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n\n              }}\n              getAllInfo={(val) => {\n                console.log('图片信息', val);\n                this.setState({\n                  imgUrl: val.url\n                })\n              }}\n            />\n          </div>\n\n        </div>\n\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Set Role:</p>\n\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\n              {/* <div className=\"one\">\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\n                  <img src={dui} alt=\"\" />\n                </div>\n                <p>User</p>\n              </div> */}\n              <div className=\"one\"\n                onClick={() => {\n                  this.setState({\n                    isAdmin: !this.state.isAdmin\n                  })\n                }}\n              >\n                <div\n                  className=\"chect\"\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\n\n                >\n                  {isAdmin && <img src={dui} alt=\"\" />}\n\n                </div>\n                <p>Admin</p>\n              </div>\n\n              {/* <div className=\"one\">\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\n                  <img src={dui} alt=\"\" />\n                </div>\n                <p>Owner</p>\n              </div> */}\n            </div>\n\n\n\n          </div>\n\n\n\n\n        </div>\n\n      </div>\n\n    )\n  }\n\n  _petName = () => {\n    let { name, email } = this.state\n\n    return (\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\n            <p>Name</p>\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(item) => {\n\n                this.setState({\n                  name: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\n            <p>Email</p>\n            <input\n              type=\"text\"\n              value={email}\n              disabled={true}\n              onChange={(item) => {\n\n                this.setState({\n                  email: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  _phone = () => {\n    let { areas, phone } = this.state\n\n    return (\n      <div className=\"petSpecies\">\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Phone</p>\n            <input\n              type=\"text\"\n              value={phone}\n              onChange={(item) => {\n\n                this.setState({\n                  phone: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"l\">\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\n            <p>Areas of Expertise</p>\n            <input\n              type=\"text\"\n              value={areas}\n              onChange={(item) => {\n\n                this.setState({\n                  areas: item.target.value\n                })\n              }}\n\n            />\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n\n  changeUserInfo = () => {\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\n    let { userId } = clickUserItem\n    let roleId = isAdmin ? '3' : '2'\n    let params = {\n      firstName: '',\n      lastName: name,\n      email,\n      phone,\n\n      roleId\n    }\n    if (imageId) {\n      params.imageId = imageId\n    }\n    message.destroy()\n    this.setState({\n      clickVet: false,\n      loading: true\n    })\n    console.log('入参', params);\n    admin_users(userId, params)\n      .then(res => {\n        console.log(res);\n        if (res.flag && res.code === 20000) {\n          for (let i = 0; i < petList.length; i++) {\n            const element = petList[i];\n            if (clickUserItem.userId === element.userId) {\n              element.name = name\n              element.email = email\n              element.phone = phone\n              if (imageId) {\n                element.url = imgUrl\n              }\n\n              break\n            }\n\n          }\n          this.setState({\n            loading: false,\n            petList\n          })\n          message.success('User information changed successfully')\n        } else {\n          this.setState({\n            loading: false\n          })\n          message.error('User information change failed')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loading: false\n        })\n        message.error('User information change failed')\n        console.log(err);\n      })\n  }\n\n  render() {\n    let bodyHeight = '92%'\n    try {\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\n    } catch (error) {\n\n    }\n    return (\n      <div id=\"veterinarians\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n\n\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\n          <div className=\"title\">\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\n          </div>\n\n          <div className=\"search\">\n            <div className=\"searchL\">\n              <input\n                type=\"text\"\n                style={{ paddingLeft: px(25), height: px(34) }}\n                placeholder=\"&#xe62c; Search \"\n                value={this.state.searchText}\n                onChange={(text) => {\n                  this.inputChange(text)\n                }}\n              />\n            </div>\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\n              Search\n            </div>\n          </div>\n\n\n          <div className=\"lists\">\n            {/* <div className=\"listsL\"> */}\n            {this.list()}\n            {/* </div> */}\n\n\n          </div>\n        </div>\n\n\n        <MyModal visible={this.state.loading} />\n\n        <MyModal\n          visible={this.state.clickVet}\n          element={\n            <div className='vetInfo'>\n\n              <div className=\"info\" >\n                <div className=\"close\" style={{ height: px(50) }}>\n                  <img\n                    onClick={() => {\n                      this.setState({\n                        clickVet: false\n                      })\n                    }}\n\n                    src={close} style={{ width: px(20) }} />\n                </div>\n                {this._petSpecies()}\n                {this._petName()}\n                {this._phone()}\n              </div>\n              <div className=\"fotBtn\">\n                <div className=\"text\">\n                  <a\n                    onClick={(e) => {\n                      e.preventDefault();\n                      this.setState({\n                        clickVet: false\n                      })\n                    }}\n\n                    href=\"#\">Delete </a>\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\n                </div>\n                <div className=\"btn\"\n                  style={{ marginTop: px(10) }}\n                  onClick={this.changeUserInfo}\n\n                >Save </div>\n\n              </div>\n            </div>\n          }\n        />\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/addDevice/index.jsx",["659","660"],"import React, { Component } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport MinClose from '../../utils/minClose/MinClose'\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\nimport { mTop, px, MTop, } from '../../utils/px';\nimport electronStore from '../../utils/electronStore';\n\nimport back_white from '../../assets/img/back-white.png';\nimport back_hui from '../../assets/img/back-hui.png';\nimport redclose from '../../assets/img/redclose.png';\n\nimport './index.less';\n\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer\n\nlet num07 = 0       //接收到07命令行的次数\n\n\nexport default class AddDevice extends Component {\n\n  state = {\n    noUSB: false,\n    devicesList: [],\n    selectDevice: null,\n    // selectDevice: true,\n    reName: '',\n    saveDeviceMac: []  //这是已经保存过的设备的macid\n\n  }\n\n  componentDidMount() {\n    message.destroy()\n\n    ipcRenderer.send('small')\n    // 监听分辨率是否改变\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\n    ipcRenderer.on('sned', this._send)\n    ipcRenderer.on('noUSB', this._noUSB)\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\n    if (devicesList) {\n      let saveDeviceMac = []\n      for (let i = 0; i < devicesList.length; i++) {\n        const element = devicesList[i];\n        saveDeviceMac.push(element.macId)\n      }\n      this.setState({\n        saveDeviceMac\n      })\n    }\n\n\n\n    // const timer = setTimeout(() => {\n    //   let deviceList = [\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\n    //   ]\n    //   this.setState({\n    //     devicesList: deviceList\n    //   })\n    //   clearTimeout(timer)\n    // }, 500);\n\n  }\n  componentWillUnmount() {\n    ipcRenderer.removeListener('sned', this._send)\n    ipcRenderer.removeListener('noUSB', this._noUSB)\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  _noUSB = (e, data) => {\n    console.log('没有USB设备：', data);\n    if (data === false) {\n      message.destroy()\n      this.setState({\n        noUSB: false\n      })\n    } else {\n      if (!this.state.noUSB) {\n        // message.error('The base is not detected. Please insert the base', 0)\n        this.setState({\n          noUSB: true\n        })\n      }\n    }\n  }\n\n  _send = (event, data) => {\n    //data就是测量的数据，是十进制的数字\n    // console.log(data);\n    this.command(data)()\n  }\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    const instruction = [255]\n    let dataArr1 = newArr.map(item => {\n      if (item.toString(16).length < 2) {\n        return '0' + item.toString(16)\n      } else {\n        return item.toString(16)\n      }\n    })\n    // console.log(dataArr1);\n    const commandArr = {\n      255: () => {//蓝牙软尺广播的数据\n        let length = newArr.length\n        let frameLength = newArr[1]   //帧长\n        let itemLength = newArr[3] + 1  //数据位的长度   13\n        let dataIndex = 0\n\n        let bluName = ''\n        let bluData = []\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\n          let itemData = []\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5])\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = ''\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16)\n                str += String.fromCharCode(item)\n              }\n              bluName = str\n              break;\n            case 255:\n              bluData = itemData\n              break;\n            case 7: console.log('---UUID'); break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n            case 3: console.log('----尺子的,不知道什么用'); break;\n            default: console.log('直接跳出循环'); return;\n          }\n          dataIndex = itemLength\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\n        }\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let macId = ''\n        if (bluData.length > 7) {\n          macId = this.getMac(bluName, bluData)\n        }\n\n\n        let sameFlog = this.state.devicesList.some((device, index) => {\n          return device.macId === macId\n        })\n        if (sameFlog || !macId) {   //重复直接退出\n          return\n        }\n        let deviceType = ''\n        switch (bluName) {\n          case 'Biggie':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n          case 'C19':        //这是体脂称\n            deviceType = 'biggie'\n\n            break;\n\n          case 'MaeBowl':   //这是称量碗\n            deviceType = 'maeBowl'\n            break;\n\n          case 'Mella Measure': //这是蓝牙尺\n            deviceType = 'tape'\n            break;\n\n        }\n        if (macId && deviceType && bluName) {\n          let json = {\n            name: bluName,\n            deviceType,\n            macId\n          }\n          let deviceArr = [].concat(this.state.devicesList)\n          deviceArr.push(json)\n          this.setState({\n            devicesList: deviceArr\n          })\n        }\n\n\n      }\n\n\n\n\n    }\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]]\n    } else {\n      return () => {\n        console.log('没有控制命令', commandArr);\n      }\n    }\n  }\n  getMac = (bluName, bluData) => {\n    switch (bluName) {\n      case 'Biggie':\n      case 'MaeBowl':\n      case 'Mella Measure':\n      case 'C19':\n        let str = bluData[1]\n        for (let i = 2; i < 7; i++) {\n          str += `:${bluData[i]}`\n        }\n        return str\n\n\n      default:\n        break;\n    }\n\n  }\n\n\n\n  changeFenBianLv = (e) => {\n    ipcRenderer.send('small')\n    this.setState({\n    })\n  }\n  beforeDiv = () => {\n    return (\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\n    )\n  }\n  afterDiv = () => {\n    return (\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\n    )\n\n  }\n\n  body = () => {\n    let { noUSB, devicesList, selectDevice, reName } = this.state\n    if (selectDevice) {\n      return <div className=\"addDevice flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\n            this Mella device?</div>\n\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                this.setState({\n                  reName: value.target.value\n                })\n              }}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write the name\n            on the sticker provided so it is easy\n            to select your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              console.log('---', deviceList);\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              let { saveDeviceMac } = this.state\n              saveDeviceMac.push(selectDevice.macId)\n              this.setState({\n                saveDeviceMac,\n                selectDevice: null,\n                reName: ''\n              })\n\n            }}\n          >\n            <p className='btnText'>Add Another</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let { reName, selectDevice } = this.state\n              console.log(reName, selectDevice);\n              if (reName) {\n                selectDevice.name = reName\n              }\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\n              deviceList.push(selectDevice)\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\n              this.props.history.goBack()\n\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n            {/* < MyModal\n              visible={true}\n              element={\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                  <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                    <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\n                  </div>\n                  <p>\n                    {'searching...'}\n                  </p>\n                </div>\n              }\n            /> */}\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n              </div>\n              <p>\n                {'searching...'}\n              </p>\n            </div>\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n            let { saveDeviceMac } = this.state\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  this.setState({\n                    selectDevice: item\n                  })\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList'>\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n\n\n\n\n  render() {\n    return (\n      <div id=\"addDevice\">\n        <div className=\"heaed\">\n          <div className=\"l\"\n          >\n            <MouseDiv\n              className='mouseDiv'\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                let { selectDevice } = this.state\n                if (selectDevice) {\n                  this.setState({\n                    selectDevice: null\n                  })\n                } else {\n                  this.props.history.goBack()\n                }\n\n              }}\n            />\n          </div>\n          <div className=\"r\">\n\n            < MinClose\n\n            />\n          </div>\n        </div>\n\n        <div className=\"body flex\">\n          {this.body()}\n        </div>\n\n\n\n\n\n\n      </div>\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/team/index.jsx",["661","662","663"],"import React, { Component, } from 'react'\nimport {\n  Tag,\n  Input,\n  Tooltip,\n  message,\n} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\n\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport Button from '../../utils/button/Button';\nimport MyModal from '../../utils/myModal/MyModal';\n\nimport './index.less';\nimport { checkUser, inviteUserByEmail, mellaLogin } from '../../api';\n\nexport default class Team extends Component {\n\n  state = {\n\n    tags: [],\n    inputVisible: false,\n    inputValue: '',\n    editInputIndex: -1,\n    editInputValue: '',\n    visible: false\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      console.log('输入的内容为：', inputValue);\n      message.destroy()\n      checkUser(inputValue)\n        .then(res => {\n\n\n          console.log('检测邮箱存不存在', res);\n\n          if (res.code) {\n            switch (res.code) {\n\n              case 11011:\n                console.log('邮箱存在，发送邮件');\n                tags = [...tags, inputValue];\n                console.log(tags);\n\n                this.setState({\n                  tags,\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n              // case 11012:\n              //     console.log('账号被限制、注册未激活状态');\n\n\n\n              // case 11013:\n              //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\n              case 11014:\n                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\n                message.error('This mailbox was not found!', 3)\n                this.setState({\n                  inputVisible: false,\n                  inputValue: '',\n                });\n                break;\n\n            }\n          } else {\n            console.log('系统错误', res);\n            message.error('system error')\n            this.setState({\n              spin: false\n            })\n          }\n\n\n        })\n        .catch(err => {\n          message.error(`Error:${err.message}`)\n          console.log('检测邮箱号的接口出错了', err);\n        })\n\n\n    }\n\n  };\n\n\n  saveInputRef = input => {\n    this.input = input;\n  };\n\n  saveEditInputRef = input => {\n    this.editInput = input;\n  };\n\n  _next = () => {\n    message.destroy()\n    let { tags } = this.state\n    let { userId } = temporaryStorage.logupSuccessData\n    let { organizationId } = temporaryStorage.logupOrganization\n    console.log({ tags, userId, organizationId });\n    if (tags.length === 0) {\n      this._logIn()\n    }\n    this.setState({\n      visible: true\n    })\n    console.log('入参:', tags);\n    inviteUserByEmail(userId, organizationId, tags)\n      .then(res => {\n        console.log(res);\n        if (res.flag === true) {\n          console.log('成功，跳转');\n          message.success('Invitation successful', 3)\n          this._logIn()\n        } else {\n          this.setState({\n            visible: false\n          })\n        }\n\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n        message.error(err.message, 3)\n      })\n  }\n  _logIn = () => {\n\n    let storage = window.localStorage;\n    let sign = storage.saveSign\n    try {\n      sign = JSON.parse(sign)\n    } catch (error) {\n\n    }\n\n    let { email, hash } = sign\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: '1'\n    }\n    console.log('登录入参:', params);\n    mellaLogin(params)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          visible: false\n        })\n        if (res.status && res.status === 404) {\n          message.error('system error');\n          return\n        }\n        if (res.code === 10001 && res.msg === '账号错误') {\n          message.error('Account error');\n          return\n        }\n        if (res.code === 10002 && res.msg === '密码错误') {\n          message.error('wrong password')\n          return;\n        }\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\n          return\n        }\n\n        if (res.code === 0 && res.msg === 'success') {\n          console.log('账号密码正确，登录进去了');\n          let { userWorkplace, lastOrganization, token } = res.success\n          storage.token = token\n          storage.userId = ''\n\n          storage.userId = res.success.userId\n          storage.roleId = res.success.roleId\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = ''\n          storage.defaultCurrent = ''\n\n\n\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace)\n            let connectionKey = ''\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (element.organizationEntity.organizationId === lastOrganization) {\n\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId\n                  }\n\n                  break\n                }\n              }\n\n            }\n            console.log('----------key值为：', connectionKey);\n            storage.connectionKey = connectionKey\n\n          } else {\n            storage.userWorkplace = ''\n            storage.connectionKey = ''\n\n          }\n\n\n\n\n\n\n\n          this.props.history.push('/menuOptions/ConnectWorkplace')\n\n\n        }\n      })\n      .catch(err => {\n        this.setState({\n          visible: false\n        })\n        console.log(err);\n      })\n  }\n\n\n\n\n\n\n  render() {\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\n    // console.log('---', editInputIndex);\n    return (\n      <div id=\"inviteTeam\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.goBack()}\n          />\n          <div className=\"text\">Invite your Team</div>\n\n          <div className=\"addF\">\n            <p>To:</p>\n            <div className=\"add\">\n\n              <>\n                {tags.map((tag, index) => {\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\n\n                  const tagElem = (\n                    <Tag\n                      className=\"edit-tag\"\n                      key={tag}\n                      closable={true}\n                      onClose={() => this.handleClose(tag)}\n                    >\n                      <span>\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\n                      </span>\n                    </Tag>\n                  );\n                  return isLongTag ? (\n                    <Tooltip title={tag} key={tag}>\n                      {tagElem}\n                    </Tooltip>\n                  ) : (\n                    tagElem\n                  );\n                })}\n                {inputVisible && (\n                  <Input\n                    ref={this.saveInputRef}\n                    type=\"text\"\n                    size=\"small\"\n                    className=\"tag-input\"\n                    value={inputValue}\n                    onChange={this.handleInputChange}\n                    onBlur={this.handleInputConfirm}\n                    onPressEnter={this.handleInputConfirm}\n                  />\n                )}\n                {!inputVisible && (\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\n                    <PlusOutlined />Press Enter to add mailbox\n                  </Tag>\n                )}\n              </>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"btn\"\n          style={{ padding: `${px(40)}px 0` }}\n        >\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._logIn}\n            text={'Skip'}\n          >\n            Skip\n          </Button>\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={this._next}\n            text={'Send'}\n          >\n\n          </Button>\n        </div>\n        <MyModal visible={this.state.visible} />\n\n      </div>\n\n\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/newOrg/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/doctorAddPet/index.jsx",["664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683"],"import React, { Component } from 'react'\nimport { Input, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport nextImg from '../../assets/img/nextImg.png'\nimport selectphoto from '../../assets/images/sel.png'\nimport dui from '../../assets/images/dui.png'\nimport female from '../../assets/images/female.png'\nimport male from '../../assets/images/male.png'\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, win } from '../../utils/px';\nimport Heard from '../../utils/heard/Heard';\nimport Avatar from '../../components/avatar/Avatar';\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\n\nimport { connect } from 'react-redux';\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport moment from 'moment';\n\nimport './index.less';\nimport { addDeskPet, checkPatientId, getPetInfoByPatientIdAndPetId, selectBreedBySpeciesId } from '../../api';\n\nconst { Option } = Select;\nlet storage = window.localStorage;\nlet errPatientId = ''\nclass DoctorAddPet extends Component {\n  state = {\n    dogImg: dog,\n    catImg: cat,\n    otherImg: other,\n    selectWZ: '',\n    closebgc: '',\n    minbgc: '',\n    closeColor: '',\n    api: '',\n    id: '',\n    seleceID: '',//医生id\n    petSpecies: 0,\n    unit: 1,\n    gender: 0,\n    isMix: false,\n    imageId: -1,\n    imgurl: '',\n    catData: [],\n    petSpeciesBreedId: '',\n    dogData: [],\n    breedArr: [],\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\n    patientId: '',\n    petName: '',\n    petId: '',\n    lastName: '',\n    firstName: '',\n    breedName: '',\n    owner: '',\n    intFlog: false,\n    spin: false,\n    visible: false,\n    dogBreed: [],\n    catBreed: [],\n    searchBreed: '',\n    selectBreedJson: {},\n    confirmSelectBreedJson: {},\n    selectBreed: false,\n    isModalVisible: false,\n    confirmLoading: false,\n    selectBreedVisible: false,\n  }\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    let dogBreed = electronStore.get('dogBreed') || []\n    let catBreed = electronStore.get('catBreed') || []\n    this.setState({\n      dogBreed,\n      catBreed\n    })\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    this.setState({\n\n    })\n  }\n  getBreed = (val) => {\n    let data = {}\n    switch (val) {\n      case 'dog':\n        data.speciesId = 2; break;\n\n      case 'cat':\n        data.speciesId = 1; break;\n    }\n\n    selectBreedBySpeciesId(data)\n      .then(res => {\n        console.log('---', res);\n        if (res.code === 0) {\n          let arr = []\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName\n            }\n            arr.push(data)\n          })\n          if (val === 'dog') {\n            this.setState({\n              dogBreed: arr\n            })\n            electronStore.set('dogBreed', arr)\n          } else if (val === 'cat') {\n            this.setState({\n              catBreed: arr\n            })\n            electronStore.set('catBreed', arr)\n          }\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  _getData = (val) => {\n    this.setState({\n      petSpecies: val,\n      breedName: ''\n    })\n    let data = {\n      speciesId: val\n    }\n    selectBreedBySpeciesId(data)\n      .then(res => {\n        console.log('--获取品种返回的数据-', res);\n        if (res.code === 0) {\n          let arr = []\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName\n            }\n            arr.push(data)\n          })\n          console.log(arr);\n          this.setState({\n            breedArr: arr\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n\n  }\n  /**------------------顶部start------------------------ */\n  _close = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('关闭程序');\n    ipcRenderer.send('window-close')\n  }\n  _min = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('最小化程序');\n    ipcRenderer.send('window-min')\n    this.setState({\n      minbgc: '',\n    })\n  }\n  _minMove = () => {\n\n    this.setState({\n      minbgc: 'rgb(211, 205, 205)'\n    })\n  }\n  _minLeave = () => {\n    this.setState({\n      minbgc: ''\n    })\n  }\n  _closeMove = () => {\n    this.setState({\n      closeColor: 'red',\n      closebgc: '#fff'\n    })\n  }\n  _closeLeave = () => {\n    this.setState({\n      closeColor: '#fff',\n      closebgc: ''\n    })\n  }\n  handleClick = e => {\n    console.log('click ', e);\n    const { api, id, seleceID } = this.state\n    if (e.key === '1') {\n      this.props.history.push({ pathname: '/page6', query: { api, id, seleceID } })\n    }\n    if (e.key === '2') {\n      this.props.history.push('/')\n    }\n\n  };\n  /**------------------顶部end------------------------ */\n  selectWZ = (val) => {\n    let { catBreed, dogBreed } = this.state\n    switch (val) {\n      case 'dog':\n        this.setState({\n          catImg: cat,\n          dogImg: redDog,\n          otherImg: other,\n          selectWZ: val,\n          breedArr: [].concat(dogBreed)\n        })\n\n        break;\n\n      case 'cat':\n        this.setState({\n          catImg: redCat,\n          dogImg: dog,\n          otherImg: other,\n          selectWZ: val,\n          breedArr: [].concat(catBreed)\n        })\n\n        break;\n\n      case 'other':\n        this.setState({\n          catImg: cat,\n          dogImg: dog,\n          otherImg: redother,\n          selectWZ: val,\n          breedArr: []\n        })\n        break;\n\n      default:\n        break;\n    }\n  }\n  _petSpecies = () => {\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\n    this.avatar = selectphoto\n    return (\n      <div className=\"petSpecies\"\n        style={{ height: mTop(80), }}\n      >\n        <div className=\"l\">\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\n          <div className=\"selectSpecies\">\n            <ul>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog'\n                    onClick={() => { this.selectWZ('dog') }}>\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Dog\n                </div>\n              </li>\n              <li>\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Cat\n                </div>\n              </li>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Other\n                </div>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <Avatar\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                console.log('我是父组件，从子组件获取到的数据位：', val);\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n              }}\n            />\n          </div>\n\n        </div>\n\n      </div>\n\n    )\n  }\n  _petName = () => {\n    let birthday = this.state.birthday\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\n    return (\n      <div className=\"petName\"\n        style={{ marginTop: mTop(18) }}\n      >\n        <div className=\"r\">\n          <p >Pet Name</p>\n          <div className=\"infoInput\">\n            <Input\n              bordered={false}\n              value={this.state.petName}\n              onChange={(item) => {\n\n                this.setState({\n                  petName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <p >Pet Birthday</p>\n          <div className=\"infoInput\" >\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\n              document.getElementById('calendar').style.display = 'block'\n            }}>{this.state.birthday}</p>\n            <div className=\"calendar\" id=\"calendar\" style={{ left: px(-50), top: px(-50) }}>\n              <Calendar\n                fullscreen={false}\n                headerRender={({ value, type, onChange, onTypeChange }) => {\n                  const start = 0;\n                  const end = 12;\n                  const monthOptions = [];\n                  const current = value.clone();\n                  const localeData = value.localeData();\n                  const months = [];\n                  for (let i = 0; i < 12; i++) {\n                    current.month(i);\n                    months.push(localeData.monthsShort(current));\n                  }\n                  for (let index = start; index < end; index++) {\n                    monthOptions.push(\n                      <Select.Option className=\"month-item\" key={`${index}`}>\n                        {months[index]}\n                      </Select.Option>\n                    );\n                  }\n                  const month = value.month();\n                  const year = value.year();\n                  const options = [];\n                  for (let i = moment(new Date()).year(); i > moment(new Date()).year() - 40; i -= 1) {\n                    options.push(\n                      <Select.Option key={i} value={i} className=\"year-item\">\n                        {i}\n                      </Select.Option>\n                    );\n                  }\n                  return (\n                    <div style={{ padding: 8 }}>\n                      <Row gutter={8}>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            className=\"my-year-select\"\n                            onChange={(newYear) => {\n                              const now = value.clone().year(newYear);\n                              onChange(now);\n                            }}\n                            value={String(year)}\n                          >\n                            {options}\n                          </Select>\n                        </Col>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            value={String(month)}\n                            onChange={(selectedMonth) => {\n                              const newValue = value.clone();\n                              newValue.month(parseInt(selectedMonth, 10));\n                              onChange(newValue);\n                            }}\n                          >\n                            {monthOptions}\n                          </Select>\n                        </Col>\n                      </Row>\n                    </div>\n                  );\n                }}\n                value={birthdayValue}\n                onSelect={(value) => {\n                  console.log(value);\n                  this.setState({\n                    birthday: moment(value).format('MMMM D, YYYY')\n\n                  })\n                  document.getElementById('calendar').style.display = 'none'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n\n      </div>\n\n    )\n  }\n  _ownName = () => {\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}\n      >\n        <div className=\"l\">\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.patientId}\n              onChange={(item) => {\n                this.setState({\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\n                  intFlog: true\n                })\n                if (item.target.value !== errPatientId) {\n                  message.destroy()\n                }\n              }}\n              onBlur={() => {\n                if (this.state.patientId === '') {\n                  message.error('The pet ID cannot be empty');\n                  return\n                }\n                this.setState({\n                  spin: true\n                });\n                let params = {\n                  patientId: this.state.patientId,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n                checkPatientId(params)\n                  .then(res => {\n                    if (res.flag === false) {\n                      errPatientId = params.patientId;\n                      this.setState({\n                        isModalVisible: true,\n                        spin: false,\n                      })\n                    } else {\n                      errPatientId = '';\n                      message.success('This pet ID will work');\n                      this.setState({\n                        spin: false,\n                      })\n                    }\n                  })\n                  .catch(err => {\n                    this.setState({\n                      spin: false\n                    });\n                  })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              // this.setState({\n              //     selectBreed: true\n              // })\n            }}\n          >\n\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{'My Parents'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _select = (value, data) => {\n    console.log(value, data);  //value的值为id\n    this.setState({\n      petSpeciesBreedId: value,\n      breedName: data.children\n    })\n  }\n  //选择宠物品种\n  _primaryBreed = () => {\n    let { confirmSelectBreedJson } = this.state\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\n        <div className=\"l\" >\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              this.setState({\n                selectBreedVisible: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n        <div className=\"r\" style={{ paddingTop: mTop(40) }}>\n          <div className=\"max\">\n            Mix?\n            <div className=\"selected\"\n              onClick={() => this.setState({\n                isMix: !this.state.isMix\n              })}\n            >\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  _weight = () => {\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\n    switch (this.state.unit) {\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\n    }\n    switch (this.state.gender) {\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\n    }\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18) }}>\n        <div className=\"l\">\n          <p >Pet Weight</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.weight}\n              onChange={(item) => {\n\n                this.setState({\n                  weight: item.target.value\n                })\n              }}\n\n            />\n            <div className=\"ibKg\">\n              <div className=\"ibs\"\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\n                onClick={() => {\n                  if (this.state.unit === 2) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight * 2.2046).toFixed(1)\n                    })\n                  }\n                }}\n              >Ibs</div>\n              <div className=\"kgs\"\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\n                onClick={() => {\n\n                  if (this.state.unit === 1) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight / 2.2046).toFixed(1)\n                    })\n                  }\n                  this.setState({ unit: 2 })\n                }}\n              >kgs</div>\n\n            </div>\n\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\n          <div className=\"gender\">\n            <div className=\"selectGender\">\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\n                <div className=\"femaleCiral\"\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 1 })}\n                >\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\n                </div>\n                Female\n              </div>\n              <div className=\"male\" style={{ fontSize: px(18) }}>\n                <div className=\"maleCiral\"\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 0 })}\n                >\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\n                </div>\n                Male\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  handleOk = () => {\n    let params = {\n      patientId: this.state.patientId,\n      doctorId: storage.userId\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.org = storage.lastOrganization\n    }\n    this.setState({\n      confirmLoading: true\n    });\n    getPetInfoByPatientIdAndPetId(params)\n      .then((res) => {\n        this.setState({\n          confirmLoading: false,\n          isModalVisible: false\n        });\n        if (res.flag === true) {\n          let oldList = res.data[0];\n          let {\n            age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender,\n            petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n            h2tLength, torsoLength\n          } = oldList;\n          const isUnKnow = (val) => {\n            if (val) {\n              return val\n            } else {\n              return 'unknown'\n            }\n          }\n          let owner = ''\n          patientId = isUnKnow(patientId)\n          petName = isUnKnow(petName)\n          breedName = isUnKnow(breedName)\n          age = isUnKnow(age)\n          weight = isUnKnow(weight)\n          if (!firstName) {\n            firstName = ''\n          }\n          if (!lastName) {\n            lastName = ''\n          }\n          if (lastName === '' && firstName === '') {\n            owner = 'unknown'\n          } else {\n            owner = `${lastName} ${firstName}`\n          }\n          createTime = moment(createTime).format('X')\n          let petGender = ''\n          switch (`${gender}`) {\n            case '1': petGender = 'F'\n              break;\n            case '0': petGender = \"M\"\n              break;\n            default: petGender = 'unknown'\n              break;\n          }\n          let petAge = 'unknown'\n          if (birthday) {\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\n          }\n\n          let json = {\n            insertedAt: createTime,\n            patientId: this.state.patientId,\n            petName,\n            owner,\n            breed: breedName,\n            gender: petGender,\n            age: petAge,\n            petId,\n            weight,\n            rfid,\n            url,\n            speciesId,\n            l2rarmDistance,\n            neckCircumference,\n            upperTorsoCircumference,\n            lowerTorsoCircumference,\n            h2tLength,\n            torsoLength,\n            pethubId,\n            macId,\n          }\n          this.props.setMenuNum('1');\n          this.props.petDetailInfoFun(json);\n          this.props.history.push(\"/MainBody\");\n        } else {\n          message.error(res.msg);\n        }\n      })\n      .catch(err => {\n        message.error('Jump Failure');\n      })\n  };\n  handleCancel = () => {\n    this.setState({\n      isModalVisible: false\n    })\n  };\n\n  render() {\n    const { closeColor, closebgc, minbgc, disabled, petSpeciesBreedId, isModalVisible, confirmLoading } = this.state\n    return (\n      <Spin spinning={this.state.spin} size=\"large\">\n        <div id=\"doctorAddPet\">\n          <div className=\"heard\">\n            <Heard />\n          </div>\n          <div className=\"editPetInfo_top\" >\n            <div className=\"title\" style={{ marginBottom: px(20), marginTop: px(20) }}>{`New Pet`}</div>\n            {this._petSpecies()}\n            {this._petName()}\n            {this._ownName()}\n            {this._primaryBreed()}\n            {this._weight()}\n          </div>\n          <div className=\"editPetInfo_foot\"  >\n            <div className=\"save\"\n              onClick={() => {\n                if (!this.state.patientId) {\n                  message.error('Please enter patient ID')\n                  return\n                }\n                let params = {\n                  patientId: this.state.patientId,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n\n                this.setState({\n                  spin: true\n                })\n                checkPatientId(params)\n                  .then(res => {\n                    console.log(res);\n                    if (res.flag === false) {\n                      this.setState({\n                        spin: false\n                      }, () => {\n                        errPatientId = params.patientId\n                        message.error('This patient ID is already occupied, please change to a new one')\n                      })\n                    } else {\n                      let { petSpecies, petName, birthday, petSpeciesBreedId, isMix, weight, gender, unit, imageId, confirmSelectBreedJson, owner, patientId, selectWZ } = this.state\n                      let species = null\n                      if (petSpeciesBreedId) {\n                        species = petSpeciesBreedId\n                      } else {\n                        // 11001 是cat 12001是dog 13001是other\n                        switch (selectWZ) {\n                          case 'cat': species = 11001; break;\n                          case 'dog': species = 12001; break;\n                          default: species = 13001;\n                            break;\n                        }\n                      }\n                      let data = {\n                        petName,\n                        birthday: moment(birthday).format('YYYY-MM-DD'),\n                        gender,\n                        owner,\n                        petSpeciesBreedId: species,\n                        doctorId: storage.userId\n                      }\n                      if (weight) {\n                        if (unit === 1) {\n                          weight = (0.45359 * weight).toFixed(2)\n                        }\n                        data.weight = parseFloat(weight)\n                      }\n                      if (imageId !== -1 && imageId) {\n                        data.imageId = imageId\n                      }\n                      if (storage.lastWorkplaceId) {\n                        data.workplaceId = storage.lastWorkplaceId\n                      }\n                      if (storage.lastOrganization) {\n                        data.organizationId = storage.lastOrganization\n                      }\n                      addDeskPet(patientId, data)\n                        .then(res => {\n                          this.setState({\n                            spin: false\n                          })\n                          console.log(res);\n                          if (res.flag === true) {\n                            message.success('Added successfully')\n                            this.handleOk();\n                            // this.props.history.goBack()\n                          }\n                          else {\n                            message.error('add failed')\n                          }\n                        })\n                        .catch(err => {\n                          this.setState({\n                            spin: false\n                          })\n                          message.error('add failed')\n                          console.log(err);\n                        })\n                    }\n                  })\n                  .catch(err => {\n                    this.setState({\n                      spin: false\n                    })\n                    console.log(err);\n                  })\n              }}\n            >Save</div>\n          </div>\n          <Modal\n            title=\"\"\n            visible={isModalVisible}\n            onOk={this.handleOk}\n            onCancel={this.handleCancel}\n            centered\n            destroyOnClose\n            maskClosable={false}\n            confirmLoading={confirmLoading}\n          >\n            <div style={{ padding: px(24), fontSize: px(16) }}>\n              This patient ID is already occupied ! <br />Whether to switch to the pet measurement screen ?\n            </div>\n          </Modal>\n          <SelectPetBreed\n            visible={this.state.selectBreedVisible}\n            destroyOnClose\n            width={400}\n            value={this.state.petSpeciesBreedId}\n            onSelect={(value) => {\n              this.setState({\n                selectBreedVisible: false,\n                selectBreedJson: value,\n                petSpeciesBreedId: value.petSpeciesBreedId,\n                confirmSelectBreedJson: value,\n              })\n            }}\n            onCancel={() => {\n              this.setState({\n                selectBreedVisible: false,\n              })\n            }}\n          />\n        </div>\n      </Spin>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, }\n)(DoctorAddPet)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/editPetInfo/index.jsx",["684","685","686","687","688","689","690","691","692","693","694","695","696","697","698"],"import React, { Component } from 'react'\nimport { Input, Menu, message, Select, Calendar, Col, Row, Spin, Modal } from 'antd';\nimport { createFromIconfontCN, ExclamationCircleOutlined } from '@ant-design/icons';\n\nimport dog from '../../assets/images/pinkdog.png'\nimport cat from '../../assets/images/pinkcat.png'\nimport redDog from '../../assets/images/reddog.png'\nimport redCat from '../../assets/images/redcat.png'\nimport redother from '../../assets/images/redother.png'\nimport other from '../../assets/images/other.png'\nimport selectphoto from '../../assets/images/sel.png'\nimport Close from '../../assets/img/close.png'\nimport nextImg from '../../assets/img/nextImg.png'\nimport dui from '../../assets/images/dui.png'\nimport female from '../../assets/images/female.png'\nimport male from '../../assets/images/male.png'\n\nimport { mTop, px, win } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal';\nimport electronStore from '../../utils/electronStore';\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\nimport Button from '../../utils/button/Button';\nimport Avatar from '../../components/avatar/Avatar';\nimport SelectPetBreed from \"../../components/selectPetBreedModal\";\n\nimport { connect } from 'react-redux';\nimport { petDetailInfoFun } from '../../store/actions';\nimport moment from 'moment';\n\nimport {\n  checkPatientId,\n  getPetInfoByPatientIdAndPetId,\n  updatePetInfo,\n  deletePetByPetId,\n  updatePetInfo1\n} from '../../api/mellaserver/pet';\nimport {\n  listDoctorsByAdmin\n} from '../../api/mellaserver/organization';\n\nimport './index.less';\nimport _ from 'lodash';\n\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\n})\nlet storage = window.localStorage;\nlet errPatientId = ''\nclass EditPetInfo extends Component {\n  state = {\n    dogImg: dog,\n    catImg: cat,\n    otherImg: other,\n    selectWZ: '',\n    closebgc: '',\n    minbgc: '',\n    closeColor: '',\n    api: '',\n    id: '',\n    seleceID: '',//医生id\n    petSpecies: 0,\n    unit: 1,\n    gender: 0,\n    isMix: false,\n    imageId: -1,\n    imgurl: '',\n    breedArr: [],\n    petSpeciesBreedId: '',\n    dogData: [],\n    birthday: moment(new Date()).format('MMMM D, YYYY'),\n    patientId: '',\n    petName: '',\n    petId: '',\n    lastName: '',\n    firstName: '',\n    breedName: '',\n    initpetName: '',\n    initpetId: '',\n    initlastName: '',\n    initfirstName: '',\n    initbreedName: '',\n    spin: false,\n    dogBreed: [],\n    catBreed: [],\n    oldPatientId: '',\n    searchBreed: '',\n    selectBreedJson: {},\n    confirmSelectBreedJson: {},\n    selectBreed: false,\n    doctorArr: [],\n    selectUser: false,\n    selectUserJson: {},\n    selectUserId: -1,\n    confirmSelectUserJson: {},\n    petUrl: '',\n    deletePetModalVisible: false,\n  }\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    let { petDetailInfo } = this.props\n    let { petId, patientId, petName, lastName, firstName, breedName, isWalkIn } = petDetailInfo\n    if (!isWalkIn) {\n      //判断是医生诊断宠物还是用户私有宠物\n      if (this.props.history.location?.pet) {\n        this.setState({\n          patientId: this.props.history.location?.pet?.patientId,\n          petId: this.props.history.location.pet?.petId,\n          oldPatientId: this.props.history.location?.pet?.patientId,\n          breedName: this.props.history.location?.pet?.breedName\n        }, () => {\n          this._getPetInfo();\n        })\n      } else {\n        if (!patientId || patientId === 'unknown') {\n          patientId = null\n        }\n        this.setState({\n          patientId,\n          petId,\n          oldPatientId: patientId,\n          breedName: breedName\n        }, () => {\n          this._getPetInfo();\n        })\n      }\n    }\n    let dogBreed = electronStore.get('dogBreed') || []\n    let catBreed = electronStore.get('catBreed') || []\n    this.setState({\n      dogBreed,\n      catBreed\n    })\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n    //获取工作场所\n    // this.getUser()\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big', win())\n    this.setState({\n\n    })\n  }\n  //获取工作场所\n  getUser = () => {\n    let params = {\n      doctorId: storage.userId,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listDoctorsByAdmin(storage.lastOrganization, params)\n      .then(res => {\n        if (res.flag === true && res.code === 20000) {\n          let data = []\n          for (let i = 0; i < res.data.length; i++) {\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\n            let json = {\n              insertedAt: createTime,\n              breedName: `${lastName} ${firstName}`,\n              petSpeciesBreedId: userId,\n              email,\n              birthday,\n              isLimit,\n              isDeleted,\n              phone,\n              url,\n              firstName, lastName, roleId\n            }\n            data.push(json)\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          this.setState({\n            doctorArr: data,\n          })\n\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  //获取宠物详情信息\n  _getPetInfo = () => {\n    let { patientId, petId } = this.state\n    let datas = {\n      doctorId: storage.userId,\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.org = storage.lastOrganization\n    }\n    if (patientId && patientId !== 'undefined') {\n      datas.patientId = patientId\n    }\n    if (petId) {\n      datas.petId = petId\n    }\n    this.setState({\n      spin: true\n    })\n    getPetInfoByPatientIdAndPetId(datas)\n      .then(res => {\n        this.setState({\n          spin: false\n        })\n        if (res.flag === true) {\n          let datas = []\n          for (let i = 0; i < res.data.length; i++) {\n            if (res.data[i].petId === this.state.petId) {\n              datas = res.data[i]\n              break\n            }\n          }\n          let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url, gender, speciesId, petSpeciesBreedId } = datas\n          if (isMix !== true) {\n            isMix = false\n          }\n          lastName = isNull(lastName)\n          firstName = isNull(firstName)\n          let confirmSelectBreedJson = {}\n          if (petSpeciesBreedId || petSpeciesBreedId === 0) {\n            confirmSelectBreedJson = {\n              name: breedName,\n              petSpeciesBreedId\n            }\n          }\n          url = isNull(url)\n          if (birthday != null) {\n            birthday = moment(birthday).format('MMMM D, YYYY')\n          }\n          else {\n            birthday = ''\n          }\n          if (gender === null || isNaN(gender) || `${gender}` === 'null' || `${gender}` === 'NaN') {\n            gender = 0\n          }\n          if (weight) {\n            weight = (weight * 2.2046).toFixed(1)\n          } else {\n            weight = ''\n          }\n          this.setState({\n            petId,\n            petName,\n            lastName,\n            firstName,\n            breedName,\n            isMix,\n            birthday,\n            weight,\n            imgurl: url,\n            gender,\n            initpetName: petName,\n            initlastName: lastName,\n            initfirstName: firstName,\n            confirmSelectBreedJson,\n            petSpeciesBreedId\n          })\n          // switch (petSpeciesBreedId) {\n          //   case 1: this.selectWZ('cat'); break;\n          //   case 2: this.selectWZ('dog'); break;\n\n          //   default: this.selectWZ('other'); break;\n          // }\n\n        } else {\n          message.destroy()\n          message.error('data load failed')\n        }\n      })\n      .catch(err => {\n        this.setState({\n          spin: false\n        })\n        console.log(err);\n        message.destroy()\n        message.error('data load failed')\n      })\n    const isNull = (value) => {\n      if (value === null || isNaN(value) || `${value}` === 'null' || `${value}` === 'NaN') {\n        return ''\n      } else {\n        return value\n      }\n    }\n  }\n  /**------------------顶部start------------------------ */\n  _close = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('关闭程序');\n    ipcRenderer.send('window-close')\n  }\n  _min = () => {\n    let ipcRenderer = window.electron.ipcRenderer\n    console.log('最小化程序');\n    ipcRenderer.send('window-min')\n    this.setState({\n      minbgc: '',\n    })\n  }\n  _minMove = () => {\n\n    this.setState({\n      minbgc: 'rgb(211, 205, 205)'\n    })\n  }\n  _minLeave = () => {\n    this.setState({\n      minbgc: ''\n    })\n  }\n  _closeMove = () => {\n    this.setState({\n      closeColor: 'red',\n      closebgc: '#fff'\n    })\n  }\n  _closeLeave = () => {\n    this.setState({\n      closeColor: '#fff',\n      closebgc: ''\n    })\n  }\n  //选择宠物默认品种\n  selectWZ = (val) => {\n    let { catBreed, dogBreed } = this.state\n    if (this.state.selectWZ !== val) {\n      switch (val) {\n        case 'dog':\n          this.setState({\n            catImg: cat,\n            dogImg: redDog,\n            otherImg: other,\n            selectWZ: val,\n            breedArr: [].concat(dogBreed),\n            confirmSelectBreedJson: {\n              name: \"defaultdog\",\n              petSpeciesBreedId: 12001\n            }\n          })\n\n          break;\n\n        case 'cat':\n          this.setState({\n            catImg: redCat,\n            dogImg: dog,\n            otherImg: other,\n            selectWZ: val,\n            breedArr: [].concat(catBreed),\n            confirmSelectBreedJson: {\n              name: \"defaultcat\",\n              petSpeciesBreedId: 11001\n            }\n          })\n\n          break;\n\n        case 'other':\n          this.setState({\n            catImg: cat,\n            dogImg: dog,\n            otherImg: redother,\n            selectWZ: val,\n            breedArr: [],\n            confirmSelectBreedJson: {\n              name: \"defaultother\",\n              petSpeciesBreedId: 13001\n            }\n          })\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n  //宠物详情第一列\n  _petSpecies = () => {\n    let { petSpecies, dogImg, catImg, otherImg, imgurl } = this.state\n\n    this.avatar = imgurl ? imgurl : selectphoto\n\n    return (\n      <div className=\"petSpecies\"\n        style={{ marginTop: mTop(30) }}\n      >\n        <div className=\"l\">\n          <p style={{ color: '#A0A0A0', fontSize: '16px' }}>Pet Species</p>\n          <div className=\"selectSpecies\">\n            <ul>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog'\n\n                    onClick={() => { this.selectWZ('dog') }}>\n                    <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Dog\n                </div>\n              </li>\n              <li>\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('cat') }} >\n                    <img src={catImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Cat\n                </div>\n              </li>\n              <li >\n                <div className='speciesChild' >\n                  <div className='dog' onClick={() => { this.selectWZ('other') }} >\n                    <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\n                  </div>\n                  Other\n                </div>\n              </li>\n\n            </ul>\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"img\">\n            <Avatar\n              init={\n                <div className=\"ciral \">\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\n                </div>\n              }\n              getinfo={(val) => {\n                if (val) {\n                  this.setState({\n                    imageId: val\n                  })\n                }\n\n              }}\n              getAllInfo={(val) => {\n                if (val.url) {\n                  this.setState({\n                    petUrl: val.url\n                  })\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //宠物详情第二列\n  _petName = () => {\n    let birthday = this.state.birthday\n    let birthdayValue = birthday ? moment(birthday) : moment(new Date())\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\n        <div className=\"l\">\n          <p >Pet Name</p>\n          <div className=\"infoInput\">\n            <Input\n              bordered={false}\n              value={this.state.initpetName}\n              onChange={(item) => {\n                this.setState({\n                  petName: item.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\"),\n                  initpetName: item.target.value\n                })\n              }}\n            />\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <p >Pet Birthday</p>\n          <div className=\"infoInput\" >\n            <p style={{ weight: '60px', height: '27px', padding: 0, margin: 0 }} onClick={() => {\n              document.getElementById('calendar').style.display = 'block'\n            }}>{this.state.birthday}</p>\n            <div className=\"calendar\" id=\"calendar\">\n              <Calendar\n                fullscreen={false}\n                headerRender={({ value, type, onChange, onTypeChange }) => {\n                  const start = 0;\n                  const end = 12;\n                  const monthOptions = [];\n\n                  const current = value.clone();\n                  const localeData = value.localeData();\n                  const months = [];\n                  for (let i = 0; i < 12; i++) {\n                    current.month(i);\n                    months.push(localeData.monthsShort(current));\n                  }\n\n                  for (let index = start; index < end; index++) {\n                    monthOptions.push(\n                      <Select.Option className=\"month-item\" key={`${index}`}>\n                        {months[index]}\n                      </Select.Option>\n                    );\n                  }\n                  const month = value.month();\n\n                  const year = value.year();\n                  const options = [];\n                  for (let i = year - 10; i < year + 10; i += 1) {\n                    options.push(\n                      <Select.Option key={i} value={i} className=\"year-item\">\n                        {i}\n                      </Select.Option>\n                    );\n                  }\n                  return (\n                    <div style={{ padding: 8 }}>\n                      <Row gutter={8}>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            className=\"my-year-select\"\n                            onChange={(newYear) => {\n                              const now = value.clone().year(newYear);\n                              onChange(now);\n                            }}\n                            value={String(year)}\n                          >\n                            {options}\n                          </Select>\n                        </Col>\n                        <Col>\n                          <Select\n                            size=\"small\"\n                            dropdownMatchSelectWidth={false}\n                            value={String(month)}\n                            onChange={(selectedMonth) => {\n                              const newValue = value.clone();\n                              newValue.month(parseInt(selectedMonth, 10));\n                              onChange(newValue);\n                            }}\n                          >\n                            {monthOptions}\n                          </Select>\n                        </Col>\n                        {/* <Col>\n                          <div className=\"btn\" onClick={() => {\n                            document.getElementById('calendar').style.display = 'none'\n                          }}>\n                            Choose this date\n                          </div>\n\n                        </Col> */}\n                      </Row>\n                    </div>\n                  );\n                }}\n                value={birthdayValue}\n                onSelect={(value) => {\n                  console.log(value);\n                  this.setState({\n                    birthday: moment(value).format('MMMM D, YYYY')\n                  })\n                  document.getElementById('calendar').style.display = 'none'\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //宠物详情第三列\n  _ownName = () => {\n    let { confirmSelectUserJson } = this.state\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(18), alignItems: 'flex-end' }}\n      >\n        <div className=\"l\">\n          <p ><span style={{ color: 'red' }}>*</span> Patient ID</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.patientId}\n              onChange={(item) => {\n                this.setState({\n                  patientId: item.target.value.replace(/\\s/g, \"\"),\n                  intFlog: true\n                })\n                if (item.target.value !== errPatientId) {\n                  message.destroy()\n                }\n              }}\n              onBlur={() => {\n                if (this.state.patientId === this.state.oldPatientId) {\n                  return\n                }\n                if (this.state.patientId === '' && !this.props.history.location?.pet) {\n                  message.error('The pet ID cannot be empty');\n                  return\n                }\n                let params = {\n                  patientId: this.state.patientId ? this.state.patientId : null,\n                  doctorId: storage.userId\n                }\n                if (storage.lastWorkplaceId) {\n                  params.workplaceId = storage.lastWorkplaceId\n                }\n                if (storage.lastOrganization) {\n                  params.organizationId = storage.lastOrganization\n                }\n                checkPatientId(params)\n                  .then(res => {\n                    if (res.flag === false) {\n                      errPatientId = params.patientId\n                      message.error('This patient ID is already occupied, please change to a new one');\n                    } else {\n                      errPatientId = '';\n                      if (!this.props.history.location?.pet && this.state.patientId !== null) {\n                        message.success('This pet ID will work');\n                      }\n                    }\n                  })\n                  .catch(err => {\n                    console.log(err);\n                  })\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"r\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer', }}\n            onClick={() => {\n              this.setState({\n                // selectUser: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>{confirmSelectUserJson.name ? confirmSelectUserJson.name : 'My Parents'}</div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  //选择宠物详细品种\n  _select = (value, data) => {\n    console.log(value, data);  //value的值为id\n    this.setState({\n      petSpeciesBreedId: value,\n      breedName: data.children\n    })\n  }\n  //品种判断\n  _primaryBreed = () => {\n    let { breedName, confirmSelectBreedJson } = this.state;\n\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30), alignItems: 'flex-end', }}>\n        <div className=\"l\">\n          <div className=\"infoInput flex\"\n            style={{ marginTop: px(8), flexDirection: 'row', justifyContent: 'space-between', cursor: 'pointer' }}\n            onClick={() => {\n              this.setState({\n                selectBreed: true\n              })\n            }}\n          >\n            <div className=\"myBreed\" style={{ width: '90%', height: px(25) }}>\n              {\n                confirmSelectBreedJson.name ? confirmSelectBreedJson.name : 'My Breed'\n              }\n            </div>\n            <div className=\"nextimg\" >\n              <img src={nextImg} style={{ height: px(15) }} />\n            </div>\n          </div>\n        </div>\n        <div className=\"r\" >\n          <div className=\"max\">\n            Mix?\n            <div className=\"selected\"\n              onClick={() => this.setState({\n                isMix: !this.state.isMix\n              })}\n            >\n              {(this.state.isMix) ? (<img src={dui} alt=\"\" width='20px' />) : (null)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //体重\n  _weight = () => {\n    let ibBgcColor = '', ibCor = '', kgBgcColor = '', kgCor = '', femaleBgc = '', maleBgc = '';\n    switch (this.state.unit) {\n      case 1: ibBgcColor = '#E1206D'; ibCor = '#fff'; kgBgcColor = '#fff'; kgCor = '#E1206D'; break;\n      case 2: ibBgcColor = '#fff'; ibCor = '#E1206D'; kgBgcColor = '#E1206D'; kgCor = '#fff'; break;\n    }\n    switch (this.state.gender) {\n      case 1: femaleBgc = '#E1206D'; maleBgc = '#F08FB6'; break;\n      case 0: femaleBgc = '#F08FB6'; maleBgc = '#E1206D'; break;\n    }\n    return (\n      <div className=\"petName\" style={{ marginTop: mTop(30) }}>\n        <div className=\"l\">\n          <p >Pet Weight</p>\n          <div className=\"infoInput\">\n            <Input bordered={false}\n              value={this.state.weight}\n              onChange={(item) => {\n\n                this.setState({\n                  weight: item.target.value\n                })\n              }}\n            />\n            <div className=\"ibKg\">\n              <div className=\"ibs\"\n                style={{ backgroundColor: ibBgcColor, color: ibCor }}\n                onClick={() => {\n                  if (this.state.unit === 2) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight * 2.2046).toFixed(1)\n                    })\n                  }\n                }}\n              >Ibs</div>\n              <div className=\"kgs\"\n                style={{ backgroundColor: kgBgcColor, color: kgCor }}\n                onClick={() => {\n\n                  if (this.state.unit === 1) {\n\n                    this.setState({\n                      unit: 1,\n                      weight: (this.state.weight / 2.2046).toFixed(1)\n                    })\n                  }\n                  this.setState({ unit: 2 })\n                }}\n              >kgs</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"r\">\n          <p style={{ color: '#4a4a4a', fontSize: '17px', marginTop: '20px' }}>Pet Gender</p>\n          <div className=\"gender\">\n            <div className=\"selectGender\">\n              <div className=\"female\" style={{ marginRight: px(8), fontSize: px(18) }}>\n                <div className=\"femaleCiral\"\n                  style={{ backgroundColor: femaleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 1 })}\n                >\n                  <img src={female} alt=\"\" style={{ width: px(15) }} />\n                </div>\n                Female\n              </div>\n              <div className=\"male\" style={{ fontSize: px(18) }}>\n                <div className=\"maleCiral\"\n                  style={{ backgroundColor: maleBgc, width: px(40), height: px(40), }}\n                  onClick={() => this.setState({ gender: 0 })}\n                >\n                  <img src={male} alt=\"\" style={{ width: px(20) }} />\n                </div>\n                Male\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n  //确认删除弹窗\n  confirm = () => {\n    Modal.confirm({\n      title: 'Delete',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Deleting this pet also deletes all health records associated with this pet. Are you sure?',\n      centered: 'true',\n      onOk: this.deletPet\n    });\n  };\n  //删除宠物\n  deletPet = () => {\n    let data = {\n      petId: this.state.petId\n    }\n    deletePetByPetId(data)\n      .then(ref => {\n        if (ref.flag === true) {\n          message.success('Successfully Delete');\n          this.props.petDetailInfoFun({});\n          this.props.history.goBack();\n        } else {\n          message.error('Fail to Delete!');\n        }\n      })\n  }\n  //更新宠物信息\n  save = () => {\n    let { petName, birthday, firstName, lastName, petSpeciesBreedId, isMix, weight, gender, unit, imageId, breedName, petId, confirmSelectBreedJson, confirmSelectUserJson } = this.state\n    if (unit === 1) {\n      weight = (0.45359 * weight).toFixed(2)\n    }\n    let data = {}\n    if (this.state.patientId === this.state.oldPatientId) {\n      data = {\n        petName,\n        weight: parseFloat(weight),\n        gender,\n        firstName,\n        lastName,\n      }\n    } else {\n      data = {\n        petName,\n        weight: parseFloat(weight),\n        gender,\n        firstName,\n        lastName,\n        patientId: this.state.patientId,\n      }\n    }\n    if (birthday) {\n      data.birthday = moment(birthday).format('YYYY-MM-DD')\n    }\n    if (imageId !== -1) {\n      data.imageId = imageId\n    }\n    if (confirmSelectBreedJson.name) {\n      data.breedName = confirmSelectBreedJson.name\n    }\n    if (confirmSelectUserJson.petSpeciesBreedId) {\n      data.userId = confirmSelectUserJson.petSpeciesBreedId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (this.state.patientId === '' && !this.props.history.location?.pet) {\n      message.error('The pet ID cannot be empty');\n    } else {\n      this.setState({\n        spin: true\n      })\n      //判断是用户更新宠物还是医生更新宠物\n      if (this.props.history.location?.pet) {\n        updatePetInfo1(this.props.history.location.userId, petId, data)\n          .then((res) => {\n            this.setState({\n              spin: false\n            })\n            if (res.flag === true) {\n              message.success('update successfully');\n              this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\n            } else {\n              message.error('This patient ID is already occupied, please change to a new one')\n            }\n          })\n          .catch((err) => {\n            message.error(err)\n          })\n      } else {\n        updatePetInfo(petId, data)\n          .then(res => {\n            this.setState({\n              spin: false\n            })\n            if (res.flag === true) {\n              try {\n                if (storage.identity === '3') {\n                  let data = JSON.parse(storage.doctorExam)\n                  data.petName = petName\n                  data.weight = weight\n                  data.gender = gender\n                  data.patientId = this.state.patientId\n                  if (birthday) {\n                    data.age = moment(new Date()).diff(moment(birthday), 'years')\n                  }\n                  if (confirmSelectBreedJson.name) {\n                    data.breed = confirmSelectBreedJson.name\n                  }\n                  if (this.state.petUrl) {\n                    data.url = this.state.petUrl\n                  }\n\n                  storage.doctorExam = JSON.stringify(data)\n                }\n              } catch (error) {\n\n              }\n              this.props.petDetailInfoFun({ ...this.props.petDetailInfo, petName, birthday, patientId: this.state.patientId })\n              this.props.history.goBack()\n            } else {\n              message.error('This patient ID is already occupied, please change to a new one')\n            }\n          })\n          .catch(err => {\n            this.setState({\n              spin: false\n            })\n          })\n      }\n    }\n  }\n  render() {\n    const { closeColor, closebgc, minbgc } = this.state\n    return (\n      <div id=\"editPetInfo\">\n        {/* 头部 */}\n        <div className=\"close1\">\n          {/* 菜单 */}\n          <div className=\"menu\">\n            <MyIcon\n              type='icon-fanhui4'\n              className=\"icon\"\n              onClick={() => {\n                if (!_.isEmpty(this.props.history.location.userId)) {\n                  this.props.history.push({ pathname: '/menuOptions/editParent', userId: this.props.history.location.userId })\n                } else {\n                  this.props.history.goBack()\n                }\n              }}\n            />\n          </div>\n          <div className=\"text\">mella</div>\n          <div className='maxmin'>\n            <div\n              className=\"min iconfont icon-64\"\n              onClick={this._min}\n              onMouseEnter={this._minMove}\n              onMouseLeave={this._minLeave}\n              style={{ backgroundColor: minbgc }}\n            ></div>\n\n            <div\n              className=\"max iconfont icon-guanbi2\"\n              onClick={this._close}\n              onMouseEnter={this._closeMove}\n              onMouseLeave={this._closeLeave}\n              style={{ backgroundColor: closebgc, color: closeColor }}\n            ></div>\n          </div>\n        </div>\n        <div className=\"editPetInfo_top\">\n          <div className=\"title\">{`${this.state.patientId}, ${this.state.petName}`}</div>\n          {this._petSpecies()}\n          {this._petName()}\n          {this._ownName()}\n          {this._primaryBreed()}\n          {this._weight()}\n        </div>\n        <div className=\"editPetInfo_foot\">\n          <div className='deletePet'\n            onClick={this.confirm}\n          >\n            Delete Pet\n          </div>\n          <div className=\"save\"\n            onClick={() => {\n              this.save();\n            }}\n          >Save Changes</div>\n        </div>\n        <MyModal\n          visible={this.state.spin}\n        />\n        {\n          this.state.selectBreed && (\n            <SelectPetBreed\n              visible={this.state.selectBreed}\n              destroyOnClose\n              width={400}\n              value={this.state.petSpeciesBreedId}\n              onSelect={(value) => {\n                this.setState({\n                  selectBreed: false,\n                  selectBreedJson: value,\n                  petSpeciesBreedId: value.petSpeciesBreedId,\n                  confirmSelectBreedJson: value,\n                })\n              }}\n              onCancel={() => {\n                this.setState({\n                  selectBreed: false,\n                })\n              }}\n            />\n          )\n        }\n        {\n          this.state.selectUser && (\n            <MyModal\n              visible={this.state.selectUser}\n              element={\n                <div className='myfindOrg' >\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div>\n                      </div>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            selectUser: false,\n                            selectUserJson: {}\n                          })\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div className=\"text\" >Choose Parents</div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search name\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.searchBreed}\n                        onChange={(item) => {\n\n                          this.setState({\n                            searchBreed: item.target.value\n                          })\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\" >\n                    <PhoneBook\n                      listDate={this.state.doctorArr}\n                      confirmSelectBreed={this.state.selectUserId}\n                      selectFun={(val) => {\n                        this.setState({\n                          selectUserJson: val,\n                          selectUserId: val.petSpeciesBreedId\n                        })\n                      }}\n                      searchText={this.state.searchBreed}\n                    />\n                  </div>\n                  <div className=\"foot\">\n                    <Button\n                      text={'Select'}\n                      onClick={() => {\n                        this.setState({\n                          confirmSelectUserJson: this.state.selectUserJson,\n                          selectUser: false\n                        })\n                      }}\n                    />\n                  </div>\n                </div>\n              }\n            />\n          )\n        }\n      </div>\n    )\n  }\n}\nexport default connect(\n  state => ({\n    petDetailInfo: state.petReduce.petDetailInfo\n  }),\n  { petDetailInfoFun }\n)(EditPetInfo)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signIn/index.jsx",["699","700","701","702","703","704"],"import React, { Component } from \"react\";\nimport { Input, message, Spin } from \"antd\";\nimport {\n  createFromIconfontCN,\n  LoadingOutlined,\n} from \"@ant-design/icons\";\n\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\nimport dui from \"./../../assets/images/dui.png\";\nimport back_white from \"./../../assets/img/back-white.png\";\nimport back_hui from \"./../../assets/img/back-hui.png\";\n\nimport { getLoginQRcode, loginWithQRcode, mellaLogin } from \"../../api\"\n\nimport temporaryStorage from \"../../utils/temporaryStorage\";\nimport { px, win } from \"../../utils/px\";\nimport MinClose from \"./../../utils/minClose/MinClose\";\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\nimport { addLogin } from \"../../utils/axios\";\n\nimport \"./index.less\";\n\nlet storage = window.localStorage;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\n});\nlet num = 0;\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\nlet isSign = true;\n\nexport default class SignIn extends Component {\n  state = {\n    isRemember: false,\n    email: \"\",\n    hash: \"\",\n    isCode: false,\n    baseUrl: \"\",\n    QRToken: \"\",\n    isExpired: false, //二维码是否过期\n    spin: false,\n    isLoadQrCode: false, //是否正在加载二维码\n  };\n  componentDidMount() {\n    isSign = true;\n    storage.lastOrganization = \"\";\n    //通知main.js渲染一个small窗口\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.send(\"small\", win());\n    //如果有保存的账号密码则展示出来\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\n      let data = storage.signIn;\n      data = JSON.parse(data);\n      this.setState({\n        email: data.email,\n        hash: data.hash,\n        QRToken: \"\",\n      });\n    }\n    //是否勾选了保持登录\n    if (storage.isRemember !== undefined) {\n      let isRemember = storage.isRemember === \"true\" ? true : false;\n      this.setState({\n        isRemember,\n      });\n    }\n    // 监听分辨率是否改变\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //清空本地的注册界面的信息\n    temporaryStorage.logupVetInfo = {};\n    this._getQRCode();\n  }\n  componentWillUnmount() {\n    isSign = false;\n    this.timer && clearInterval(this.timer);\n    let ipcRenderer = window.electron.ipcRenderer;\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    // ipcRenderer.send('small')\n    ipcRenderer.send(\"small\", win());\n    this.setState({});\n  };\n  _getQRCode = () => {\n    this.setState({\n      isLoadQrCode: true,\n    });\n    num = 0;\n\n    getLoginQRcode()\n      // addQRCode()\n      .then((res) => {\n        message.destroy();\n\n        console.log(\"---获取二维码\", res);\n        if (res.flag === true) {\n          this.setState({\n            baseUrl: res.data.QRcode,\n            QRToken: res.data.QRToken,\n            isLoadQrCode: false,\n          });\n          this.timer = setInterval(() => {\n            if (!isSign) {\n              this.timer && clearInterval(this.timer);\n            }\n            num++;\n            console.log(\"lunxin\");\n            this._polling();\n\n            if (num > 280) {\n              //超过280秒则去显示二维码过期，要重新获取\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n            }\n          }, 1000);\n        } else {\n          message.error(\"Failed to obtain QR code\", 10);\n          this.setState({\n            isLoadQrCode: false,\n          });\n        }\n      })\n      .catch((err) => {\n        message.error(\"Failed to obtain QR code\", 10);\n        this.setState({\n          isLoadQrCode: false,\n        });\n        console.log(err);\n      });\n  };\n  //轮询\n  _polling = () => {\n\n    loginWithQRcode(this.state.QRToken)\n      .then((res) => {\n        console.log(\"轮询结果：\", res);\n        if (res.flag === true) {\n          switch (res.code) {\n            case 10001:\n              console.log(\"未扫码\");\n\n              break;\n\n            case 11033:\n              console.log(\"扫码未点击登录\");\n              this.timer && clearInterval(this.timer);\n              temporaryStorage.QRToken = this.state.QRToken;\n              let { name, url } = res.data;\n              this.props.history.replace({\n                pathname: \"/user/login/scanCodeLogin\",\n                params: { name, url },\n              });\n\n              break;\n\n            case 11023:\n              console.log(\"过期\");\n              this.setState({\n                isExpired: true,\n              });\n              num = 0;\n              this.timer && clearInterval(this.timer);\n\n              break;\n\n            default:\n              break;\n          }\n        }\n        console.log(\"code\", res.code);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  //登录接口\n  _continue = () => {\n    const { email, hash, isRemember } = this.state;\n\n    message.destroy();\n    let params = {\n      email: email.replace(/(^\\s*)/g, \"\"),\n      hash,\n      identityTypeId: \"1\",\n    };\n    if (email === \"\") {\n      message.error(\"please input your email\");\n      return;\n    }\n    if (hash === \"\") {\n      message.error(\"please input your password\");\n      return;\n    }\n    console.log(params);\n    this.setState({\n      spin: true,\n    });\n    mellaLogin(params)\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          spin: false,\n        });\n        if (res.status && res.status === 404) {\n          message.error(\"system error\");\n          return;\n        }\n        if (res.status === 500) {\n          message.error(\"system error\");\n\n          return;\n        }\n        if (res.code === 10001 && res.msg === \"账号错误\") {\n          message.error(\"Account error\");\n          return;\n        }\n        if (res.code === 10002 && res.msg === \"密码错误\") {\n          message.error(\"wrong password\");\n          return;\n        }\n        if (\n          res.code === 0 &&\n          res.msg === \"success\" &&\n          res.success.roleId === 1\n        ) {\n          message.error(\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\n          message.error(\n            \"The account is restricted, please contact the management\",\n            10\n          );\n          return;\n        }\n        if (res.code === 10003) {\n          message.error(\"The password or email is incorrect, please re-enter\");\n          return;\n        }\n\n        if (res.code === 0 && res.msg === \"success\") {\n          this.timer && clearInterval(this.timer);\n          console.log(\"账号密码正确，登录进去了\");\n          let { userWorkplace, lastOrganization, token } = res.success;\n          storage.token = token;\n          storage.userId = \"\";\n          let data = {\n            email: email.replace(/(^\\s*)/g, \"\"),\n            hash,\n          };\n          data = JSON.stringify(data);\n          if (isRemember === true) {\n            storage.signIn = data;\n          } else {\n            storage.signIn = \"\";\n          }\n          storage.saveSign = data;\n\n          storage.userId = res.success.userId;\n          storage.roleId = res.success.roleId;\n\n          //每次登陆后清空宠物列表缓存的数据\n          storage.doctorList = \"\";\n          storage.defaultCurrent = \"\";\n\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\n          if (res.success.lastWorkplaceId) {\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\n          } else {\n            storage.lastWorkplaceId = \"\";\n          }\n\n          if (res.success.lastOrganization) {\n            storage.lastOrganization = res.success.lastOrganization;\n          } else {\n            storage.lastOrganization = \"\";\n          }\n\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\n\n          if (userWorkplace) {\n            storage.userWorkplace = JSON.stringify(userWorkplace);\n            let connectionKey = \"\";\n            for (let i = 0; i < userWorkplace.length; i++) {\n              const element = userWorkplace[i];\n              if (element.organizationEntity) {\n                if (\n                  element.organizationEntity.organizationId === lastOrganization\n                ) {\n                  if (element.organizationEntity.connectionKey) {\n                    connectionKey = element.organizationEntity.connectionKey;\n                  }\n                  if (element.roleId) {\n                    console.log(element.roleId);\n                    storage.roleId = element.roleId;\n                  }\n\n                  break;\n                }\n              }\n            }\n            console.log(\"----------key值为：\", connectionKey);\n            storage.connectionKey = connectionKey;\n          } else {\n            storage.userWorkplace = \"\";\n            storage.connectionKey = \"\";\n          }\n\n          this.props.history.push(\"/MainBody\");\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          spin: false,\n        });\n        console.log(err);\n      });\n  };\n\n  _signUp = (e) => {\n    e.preventDefault();\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\n  };\n  _change = () => {\n    let { isCode } = this.state;\n    message.destroy();\n    if (isCode === false) {\n      this._getQRCode();\n    } else {\n      this.timer && clearInterval(this.timer);\n      num = 0;\n      this.setState({\n        isExpired: false,\n      });\n    }\n    this.setState({ isCode: !this.state.isCode });\n  };\n  //二维码界面\n  _qrCode = () => {\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\n\n    if (!isExpired) {\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{\n              width: px(120),\n              height: px(120),\n              opacity: imgOpacity,\n            }}\n          />\n          {isLoadQrCode && (\n            // true &&\n\n            <div className=\"err\">\n              <Spin\n                indicator={antIcon}\n                tip=\"Loading...\"\n                style={{ fontSize: 16, color: \"#e1206d\" }}\n              />\n            </div>\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"qrcode\">\n          <img\n            src={`data:image/jpeg;base64,${baseUrl}`}\n            alt=\"\"\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\n          />\n\n          <div className=\"err\">\n            <div className=\"errText\">QR code has expired</div>\n            <div\n              className=\"btn\"\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\n              onClick={this.refresh}\n            >\n              Refresh\n            </div>\n          </div>\n        </div>\n      );\n    }\n  };\n  //点击refresh按钮\n  refresh = () => {\n    this.setState({\n      isExpired: false,\n    });\n    num = 0;\n    this._getQRCode();\n  };\n  beforeDiv = () => {\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\n  };\n  afterDiv = () => {\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\n  };\n\n  render() {\n    let { isCode, baseUrl } = this.state;\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\n    return (\n      <div id=\"signIn\">\n        <div\n          className=\"heaed\"\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\n        >\n          <div className=\"l\">\n            <MouseDiv\n              className=\"mouseDiv\"\n              beforeDiv={this.beforeDiv}\n              afterDiv={this.afterDiv}\n              divClick={() => {\n                this.props.history.push(\"/\");\n              }}\n            />\n          </div>\n          <div className=\"r\">\n            <MinClose />\n          </div>\n        </div>\n\n        <div className=\"body\">\n          <div className=\"logo\">\n            <img src={mellaLogo} alt=\"\" />\n          </div>\n          <div className=\"body\" style={{ position: \"relative\" }}>\n            <div\n              className=\"text\"\n            // style={{\n            //   fontSize: px(28),\n            //   marginBottom: px(20),\n            //   marginTop: px(30),\n            // }}\n            >\n              Please enter email <br />\n              and password\n            </div>\n\n            <div className=\"inpF\">\n              <Input\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   fontSize: px(18),\n                // }}\n                value={this.state.email}\n                placeholder=\"rachel@friends.com\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    email: str,\n                  });\n                }}\n              />\n              <Input.Password\n                className=\"inp\"\n                // style={{\n                //   width: px(310),\n                //   height: px(45),\n                //   marginLeft: px(6),\n                //   marginBottom: px(18),\n                //   fontSize: px(18),\n                // }}\n                visibilityToggle={false}\n                value={this.state.hash}\n                placeholder=\"********\"\n                bordered={false}\n                onChange={(item) => {\n                  let str = item.target.value;\n                  this.setState({\n                    hash: str,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    this._continue();\n                  }\n                }}\n              />\n\n              <div\n                className=\"text\"\n              // style={{\n              //   fontSize: px(28),\n              //   lineHeight: px(1),\n              //   marginTop: px(10),\n              //   marginBottom: px(20),\n              // }}\n              >\n                {\"Or scan QR Code\"}\n              </div>\n            </div>\n\n            {this._qrCode()}\n            <div\n              className=\"littleText flex\"\n              style={{\n                fontSize: px(12),\n                marginTop: px(10),\n                marginBottom: px(10),\n              }}\n            >\n              Go to your Mella mobile app to access\n              <br />\n              the QR scanner\n            </div>\n            <div className=\"stay\">\n              <div className=\"remember\">\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\n                <div\n                  className=\"box\"\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\n                  onClick={() => {\n                    let { isRemember } = this.state;\n                    this.setState({\n                      isRemember: !isRemember,\n                    });\n                    storage.isRemember = !isRemember;\n                  }}\n                >\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\n                </div>\n              </div>\n              <div\n                className=\"forgot\"\n                style={{ fontSize: px(16) }}\n                onMouseDown={() => {\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\n                  forget[0].style.opacity = 0.5;\n                }}\n                onMouseUp={() => {\n                  document.querySelectorAll(\n                    \"#signIn .forgot\"\n                  )[0].style.opacity = 1;\n                  if (this.state.email) {\n                    temporaryStorage.forgotPassword_email = this.state.email;\n                  }\n\n                  this.props.history.push(\"/user/login/forgotPassword\");\n                }}\n              >\n                Forgot?\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          className=\"button11\"\n          style={{ backgroundColor: \"#E7E7E7\" }}\n        >\n          <div\n            className=\"btn1 flex\"\n            onClick={this._continue}\n          // style={{ height: px(40) }}\n          >\n            <p>{`CONTINUE`}</p>\n          </div>\n\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\n            <p style={{ fontSize: px(17) }}>\n              Do not have an account?{\" \"}\n              <a href=\"#\" onClick={this._signUp}>\n                Sign Up\n              </a>\n            </p>\n          </div>\n        </div>\n\n        {this.state.spin && (\n          <div className=\"modal\">\n            <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n              <LoadingOutlined\n                style={{ fontSize: 30, color: \"#fff\", marginTop: px(-30) }}\n              />\n            </div>\n            <p>loading...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/maxminreturn/MaxMinReturn.jsx",["705","706","707","708"],"import React, { Component } from 'react';\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\nimport './maxminreturn.less'\n\nexport default class MaxMin extends Component {\n    state = {\n        closebgc: '',\n        minbgc: '',\n        closeColor: '',\n    }\n    _close = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('关闭程序');\n        ipcRenderer.send('window-close')\n    }\n    _min = () => {\n        let ipcRenderer = window.electron.ipcRenderer\n        console.log('最小化程序');\n        ipcRenderer.send('window-min')\n        this.setState({\n            minbgc: '',\n        })\n    }\n    _minMove = () => {\n\n        this.setState({\n            minbgc: 'rgb(229,229,229)'\n        })\n    }\n    _minLeave = () => {\n        this.setState({\n            minbgc: ''\n        })\n    }\n    _closeMove = () => {\n        this.setState({\n            closeColor: 'red',\n            closebgc: '#fff'\n        })\n    }\n    _closeLeave = () => {\n        this.setState({\n            closeColor: ' rgb(245, 145, 145)',\n            closebgc: ''\n        })\n    }\n    _home = () => {\n        console.log(this.props);\n        // this.props.history.push('/')\n    }\n\n    render() {\n        const { closeColor, closebgc, minbgc } = this.state\n        return (\n            <div className=\"maxminreturn\">\n                <div className=\"heard1\">\n                    <div\n                        className=\" iconfont icon-left heard\"\n                        onClick={this.props.onClick1}\n                    />\n                </div>\n\n\n                <div className='headIconBox'>\n\n                </div>\n\n\n                <div className=\"close123\">\n                    <div className=\"home iconfont icon-zhuye3\"\n                        onClick={this.props.onClick}\n                    />\n                    <div\n                        className=\"min iconfont icon-64\"\n                        onClick={this._min}\n                        onMouseEnter={this._minMove}\n                        onMouseLeave={this._minLeave}\n                        style={{ backgroundColor: minbgc }}\n                    ></div>\n\n                    <div\n                        className=\"max iconfont icon-guanbi2\"\n                        onClick={this._close}\n                        onMouseEnter={this._closeMove}\n                        onMouseLeave={this._closeLeave}\n                        style={{ backgroundColor: closebgc, color: closeColor }}\n                    ></div>\n                </div>\n            </div>\n        )\n    }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/connectWorkplace/index.jsx",["709","710","711","712"],"import React, { Component } from \"react\";\nimport { Select } from \"antd\";\nimport Heart from \"../../utils/heard/Heard\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Option } = Select;\nlet storage = window.localStorage;\n\nexport default class ConnectWorkplace extends Component {\n  state = {\n    orgArr: [],\n    workplaceJson: {},\n    connectionKey: \"\",\n    selectOrgId: -1,\n    selectRoleId: \"\",\n  };\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    ipcRenderer.send(\"big\");\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    // console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      // console.log('每一项的值：', element);\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          this.setState({\n            workplaceName,\n            workplaceId: storage.lastWorkplaceId,\n          });\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n          this.setState({\n            organizationName: name,\n            organizationId: storage.lastOrganization,\n            selectOrgId: storage.lastOrganization,\n          });\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n    // console.log('-----转换后的组织信息--', orgArr, workplaceJson);\n    this.setState({\n      orgArr,\n      workplaceJson,\n      connectionKey: storage.connectionKey,\n      selectRoleId: storage.roleId,\n    });\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    // console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n\n  render() {\n    let { orgArr, selectOrgId } = this.state;\n    let option = orgArr.map((item, index) => {\n      let bac =\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\n      return (\n        <li\n          key={`${item.organizationId}`}\n          style={{ background: bac, color: col }}\n          onClick={() => {\n            this.setState({\n              selectOrgId: item.organizationId,\n              connectionKey: item.connectionKey,\n              selectRoleId: item.roleId,\n            });\n            // storage.roleId = item.roleId\n          }}\n        >\n          <div className=\"org\" style={{ fontSize: px(16) }}>\n            {item.organizationName}\n          </div>\n        </li>\n      );\n    });\n    return (\n      <div id=\"connectworkplace\">\n        <div className=\"heard\">\n          <Heart />\n        </div>\n\n        <div className=\"body\">\n          <div className=\"top\">\n            <div className=\"title flex\">\n              <p style={{ fontSize: px(24), fontWeight: \"800\" }}>\n                Connected Workplaces\n              </p>\n              <div\n                className=\"addbtn flex\"\n                style={{ height: px(45) }}\n                onClick={() => this.props.history.push(\"/menuOptions/NewOrg\")}\n              >\n                <p>+ Add Workplace</p>\n              </div>\n            </div>\n            <div className=\"tablebox\">\n              <div className=\"table\" style={{ height: px(220) }}>\n                <ul>{option}</ul>\n              </div>\n            </div>\n          </div>\n          <div className=\"center\"></div>\n          <div className=\"footer flex\">\n            <div\n              className=\"saveBtn flex\"\n              style={{ height: px(45) }}\n              onClick={() => {\n                let {\n                  selectOrgId,\n                  selectRoleId,\n                  connectionKey,\n                  workplaceJson,\n                } = this.state;\n                // console.log({ selectOrgId, selectRoleId, connectionKey, workplaceJson });\n                storage.roleId = selectRoleId;\n                storage.lastOrganization = selectOrgId;\n                try {\n                  let key = parseInt(selectOrgId);\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n                  // console.log(lastWorkplaceId);\n                  storage.lastWorkplaceId = lastWorkplaceId;\n                } catch (error) { }\n                storage.connectionKey = connectionKey;\n                // this.props.history.replace(\"/menuOptions/settings\");\n                this.props.history.goBack();\n              }}\n            >\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\n            </div>\n          </div>\n        </div>\n\n        {/* <MyModal visible={this.state.loading} /> */}\n      </div>\n    );\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/signUpVetProfile/index.jsx",["713","714","715","716","717","718"],"import React, { Component, } from 'react'\nimport {\n  Button,\n  Modal,\n  message\n} from 'antd';\nimport { CaretDownFilled } from '@ant-design/icons';\n\nimport imgArray from '../../utils/areaCode/imgArray'\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\nimport countryList from '../../utils/areaCode/country';\nimport temporaryStorage from '../../utils/temporaryStorage'\nimport { px } from '../../utils/px';\nimport MyModal from '../../utils/myModal/MyModal'\n\nimport { checkUser, deskRegistAWSSNS, registByAWSSES } from '../../api';\n\nimport moment from 'moment';\n\nimport './index.less';\n\nconst options = [\n  { label: 'Dogs', value: 'Dogs' },\n  { label: 'Cats', value: 'Cats' },\n  { label: 'Small Pets', value: 'Small Pets' },\n  { label: 'Nutrition', value: 'Nutrition' },\n  { label: 'Surgery', value: 'Surgery' },\n  { label: 'Zoo', value: 'Zoo' },\n  { label: 'Wildlife', value: 'Wildlife' },\n  { label: 'Cardiology', value: 'Cardiology' },\n  { label: 'Neurology', value: 'Neurology' },\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\n  { label: 'Other', value: 'Other' },\n]\nexport default class VetPrifile extends Component {\n\n  state = {\n    code: 1,\n    imgArrayIndex: 0,\n    otherText: '',\n    name: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    birthday: moment(),\n    password: '',\n    password1: '',\n    checboxtValue: [],\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\n\n    visible: false,       //nodel框是否显示\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    loadVisible: false\n  }\n\n  componentDidMount() {\n    console.log('_________________config', process.env, process.env.REACT_APP_MELLASERVER_BASE_URL,);\n    //发送指令让main.js创建一个big窗口\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //检测是否本地是否有注册信息，有就展示出来。\n    console.log(temporaryStorage.logupVetInfo);\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\n      console.log('进来了');\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\n      this.setState({\n        name: firstName || '',\n        lastName,\n        email,\n        password: hash,\n        password1: hash,\n        code,\n        phone: initPhone || '',\n        imgArrayIndex\n      })\n\n\n    }\n\n\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\n    if (this.props.location && this.props.location.email) {\n      this.setState({\n        email: this.props.location.email\n      })\n    }\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n  _next = () => {\n    let { name, lastName, email, code, phone, password1, password, } = this.state\n    message.destroy()\n    console.log({ name, email, code, phone, password1, password, });\n    email = email.toLocaleLowerCase()\n    if (name.length <= 0) {\n      message.error('Please enter your first name', 3)\n      return\n    }\n    if (lastName.length <= 0) {\n      message.error('Please enter your last name', 3)\n      return\n    }\n    if (!email) {\n      message.error('Please enter the mailbox number', 3)\n      return\n    } else {\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\n        message.error('E-mail format is incorrect', 3)\n        return\n      }\n    }\n    if (password.length <= 0 || password1.length <= 0) {\n      message.error('Please enter the password', 3)\n      return\n    }\n\n    if (password !== password1) {\n      message.error('The password entered twice is incorrect, please re-enter', 3)\n      return\n    }\n    this.setState({\n      loadVisible: true\n    })\n\n\n    let params = {\n      firstName: name,\n      lastName,\n      email,\n      hash: password,\n    }\n    if (phone) {\n      params.phone = `+${code}${phone}`\n    }\n\n    registByAWSSES(params)\n      .then(res => {\n\n        this.setState({\n          loadVisible: false\n        })\n        // console.log('注册接口返回数据：', res);\n        switch (res.code) {\n          case 11011:\n            console.log('用户已存在，应该跳出弹框')\n            this.setState({\n              visible: true\n            })\n\n            break;\n\n          case 20000:\n          case 200:\n            console.log('可以注册，跳转到下一页');\n            temporaryStorage.logupEmailCode = res.data\n            params.code = code\n            params.initPhone = phone\n            params.imgArrayIndex = this.state.imgArrayIndex\n            temporaryStorage.logupVetInfo = params\n            this.props.history.push('/uesr/logUp/VerifyEmail')\n            break;\n\n          default:\n            break;\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadVisible: false\n        })\n        message.error(`Error:${err.message}`)\n        console.log('注册接口抛出错误：', err);\n      })\n\n  }\n  _signIn = (e) => {\n    e.preventDefault();\n    this.props.history.push('/page11')\n  }\n\n\n\n  render() {\n\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\n    return (\n      <div id=\"vetPrifile\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.push('/')}\n          />\n        </div>\n        <div className=\"body\">\n          <div className=\"text\"\n            style={{ fontSize: px(30), marginBottom: px(120) }}\n          >\n            Let’s start by creating your account\n          </div>\n          <div className=\"form\" >\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={name}\n                  placeholder=\"First Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      name: data\n                    })\n                  }}\n                />\n\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={lastName}\n                  placeholder=\"Last Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      lastName: data\n                    })\n                  }}\n                />\n\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Email\"\n                  value={email}\n                  placeholder=\"Email Address*\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      email: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\n                  {countryList.map((item, index) => {\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\n                    return (\n                      <li key={index}>\n                        <div key={index}\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                          onClick={() => {\n                            console.log(item, index);\n                            this.setState({\n                              code: item.code,\n                              imgArrayIndex: index\n                            })\n                            document.getElementById('list').style.display = \"none\"\n                          }}\n                        >\n                          <img src={url} alt=\"\" />\n                          <p >{`${item.en}   +${item.code}`}</p>\n                        </div>\n                      </li>\n                    )\n                  })}\n                </ul>\n\n\n                <div className='phone'>\n                  <div\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\n                    onClick={() => {\n                      document.getElementById('list').style.display = \"block\"\n                    }}\n                  >\n                    <img style={{ zIndex: '888' }}\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\n                    />\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\n                  </div>\n\n\n                  <input\n                    type=\"Phone\"\n                    value={phone}\n                    placeholder=\"Phone Number\"\n                    onChange={(value) => {\n                      let data = value.target.value\n                      this.setState({\n                        phone: data.replace(/[^\\-?\\d]/g, '')\n                      })\n                    }}\n                  />\n                </div>\n\n              </div>\n\n            </div>\n\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password}\n                  placeholder=\"Create Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password1}\n                  placeholder=\"Confirm  Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password1: data\n                    })\n                  }}\n                />\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n\n\n\n\n        <div className=\"foot\">\n          <div className=\"footText\"\n          >Already have an accoun? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\n\n          {/* 按钮 */}\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._next}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n\n        <MyModal\n\n          visible={this.state.loadVisible}\n        />\n\n        <Modal\n\n          visible={visible}\n          // visible={true}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">Email Already Exists</div>\n\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\n\n            <div className=\"btn\">\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false,\n                    email: ''\n                  })\n                }}\n              >Try Again</button>\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false\n                  })\n                  this.props.history.replace('/page11')\n                }}\n              >Sign Up</button>\n\n            </div>\n          </div>\n\n\n        </Modal>\n      </div>\n\n\n    )\n  }\n}\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/temporaryStorage.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/appversion.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/electronStore.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/minClose/MinClose.js",["719","720","721"],"\nimport React, { useState, useEffect } from 'react'\nimport { useHistory } from \"react-router-dom\";\n\nimport PropTypes from 'prop-types';\n\nimport './minClose.less'\nimport { px, mTop } from './../px'\nimport rMin_red from './../../assets/img/min-red.png'\nimport rClose_red from './../../assets/img/close-red.png'\n\nimport rMin_white from './../../assets/img/min-white.png'\nimport rClose_white from './../../assets/img/close-white.png'\n\nlet ipcRenderer = window.electron.ipcRenderer\n\n/**\n * \n * @param {string} minHeight 最小化、最大化方块的宽高 \n * @param {number} imgWidth 最小化、最大化图片的高度 \n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\n */\nconst MinClose = ({ minHeight, imgWidth }) => {\n  const [minbgc, setMinbgc] = useState('')\n  const [rMin, setRMin] = useState(rMin_red)\n  const [closebgc, setClosebgc] = useState('')\n  const [rClose, setRClose] = useState(rClose_red)\n\n  const minMouseEnter = () => {\n    setMinbgc('rgba(70, 70, 70, 0.5)')\n    setRMin(rMin_white)\n  }\n  const minMouseLeave = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n  }\n  const minClock = () => {\n    setMinbgc('')\n    setRMin(rMin_red)\n    ipcRenderer.send('window-min')\n\n  }\n\n\n  const closeMouseEnter = () => {\n    setClosebgc('rgba(232,17,35)')\n    setRClose(rClose_white)\n  }\n  const closeMouseLeave = () => {\n    setClosebgc('')\n    setRClose(rClose_red)\n  }\n  const closeClock = () => {\n    ipcRenderer.send('window-close')\n  }\n\n\n  return (\n    <div\n      id='minClose'\n    >\n      <div\n        className='min_icon'\n        onClick={minClock}\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\n        onMouseEnter={minMouseEnter}\n        onMouseLeave={minMouseLeave}\n      >\n        <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\n      </div>\n      <div\n        className='min_icon'\n        onClick={closeClock}\n        style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\n        onMouseEnter={closeMouseEnter}\n        onMouseLeave={closeMouseLeave}\n      >\n        <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\n      </div>\n    </div>\n  )\n}\n\nMinClose.propTypes = {\n  minHeight: PropTypes.string,\n  imgWidth: PropTypes.string,\n}\nMinClose.defaultProps = {\n  minHeight: '40px',\n  imgWidth: `${px(20)}px`\n\n}\n\nexport default MinClose","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/mouseDiv/MouseDiv.js",["722","723"],"\nimport React, { useState, useEffect } from 'react'\n\n\nimport PropTypes from 'prop-types';\n\nimport { px, mTop } from './../px'\nimport './mouseDiv.less'\n\n/**\n * \n * @param {string} minHeight 最小化、最大化方块的宽高 \n * @param {number} imgWidth 最小化、最大化图片的高度 \n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\n */\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\n  const [minbgc, setMinbgc] = useState('')\n  const [rMin, setRMin] = useState(beforeDiv)\n\n  const minMouseEnter = () => {\n    setMinbgc('rgba(70, 70, 70, 0.5)')\n    setRMin(afterDiv)\n  }\n  const minMouseLeave = () => {\n    setMinbgc('')\n    setRMin(beforeDiv)\n  }\n  const minClock = () => {\n    setMinbgc('')\n    setRMin(beforeDiv)\n    divClick()\n\n  }\n\n\n\n\n  return (\n    <div id='mouseDiv'>\n      <div\n        className='min_icon'\n        onClick={minClock}\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\n        onMouseEnter={minMouseEnter}\n        onMouseLeave={minMouseLeave}\n      >\n        {rMin}\n      </div>\n\n    </div>\n  )\n}\n\nMinClose.propTypes = {\n  minHeight: PropTypes.string,\n  imgWidth: PropTypes.number,\n  divClick: PropTypes.func,\n  afterDiv: PropTypes.func,\n  beforeDiv: PropTypes.func,\n\n\n}\nMinClose.defaultProps = {\n  minHeight: '40px',\n  imgWidth: px(20)\n\n}\n\nexport default MinClose","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/button/Button.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/user.js",["724","725"],"/**\n * @file user.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { melladeskBaseUrl } from '../../config/config'\nconst baseURL = `${melladeskBaseUrl}/user`\n\n\n/**\n * @dec 邀请别人加入组织\n * @param {*} userId 用户id\n * @param {*} organizationId 组织id\n * @param {*} parames \n * @returns \n */\nexport const inviteUserByEmail = (userId, organizationId, parames) => {\n    return postJson(`${baseURL}/inviteUserByEmail/${userId}/${organizationId}`, parames)\n}\n\nexport const updateUserInfo = (parames) => {\n    return postJson(`${baseURL}/updateUserInfo`, parames)\n}\n\n\n\n\nexport const loginWithQRcode = (QRToken) => {\n    return get(`${baseURL}/loginWithQRcode/${QRToken}`, '')\n}\n\n\nexport const getLoginQRcode = () => {\n    return get(`${baseURL}/getLoginQRcode`, '')\n}\n\n\n\nexport const resendDeskRegistEmail = (logupEmailCode, params) => {\n    return get(`${baseURL}/resendDeskRegistEmail/${logupEmailCode}`, params)\n}\n\n\nexport const deskRegistAWSSNS = (params) => {\n    return postJson(`${baseURL}/deskRegistAWSSNS`, params)\n}\n\n\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/pet.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/organization.js",["726"],"/**\n * @file organization.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/organization 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/organization`\n\n\n\n/**\n * @dec  管理员获取组织下的所有医生\n * @param {string} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\n\nexport const listDoctorsByAdmin = (lastOrganization, params) => {\n    return get(`${baseURL}/listDoctorsByAdmin/${lastOrganization}`, params)\n}\n\n/**\n * @dec 获取所有组织\n * @returns\n *\n */\nexport const listAll = () => {\n    return get(`${baseURL}/listAll`, '')\n}\n\n\n\n/**\n * @dec 创建一个组织\n * @param {str} userId 用户id\n * @param {*} params\n * @returns\n */\nexport const addOrganization = (userId, params) => {\n    return postJson(`${baseURL}/addOrganization/${userId}`, params)\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/px.jsx",["727","728","729","730","731","732"],"/**\n *\n * 获取屏幕分辨率宽高\n * let width = parseInt(window.screen.width)\n * let height = parseInt(window.screen.height)\n *\n * 获取应用窗口大小\n * document.documentElement.clientHeight\n * document.documentElement.clientWidth\n */\n//\n\n//\n\nconst devWidth = 1920;\nconst devHeight = 1040;\n\nlet size = window.screen\n// console.log('-------------------------分辨率的大小-----------------', size);\nlet width = parseInt(window.screen.availWidth);\nlet height = parseInt(window.screen.availHeight);\nif (width < height) {\n  let a = width;\n  width = height;\n  height = a;\n}\n\nexport const px = (val) => {\n  return val\n  // let width = parseInt(window.screen.availWidth);\n  // let height = parseInt(window.screen.availHeight);\n\n\n\n  // if (width < height) {\n  //   let a = width;\n  //   width = height;\n  //   height = a;\n  // }\n\n  // return parseInt((val / devWidth) * width);\n};\n\nexport const mTop = (val) => {\n  return val\n  let width = parseInt(window.screen.availWidth);\n  let height = parseInt(window.screen.availHeight);\n  if (width < height) {\n    let a = width;\n    width = height;\n    height = a;\n  }\n\n  // console.log('mTop',val, parseInt(val / devHeight * height))\n  return parseInt((val / devHeight) * height);\n};\n\nexport const fs = (val) => {\n  let width = parseInt(window.screen.availWidth);\n  let height = parseInt(window.screen.availHeight);\n  if (width < height) {\n    let a = width;\n    width = height;\n    height = a;\n  }\n};\nexport const pX = (val) => {\n  let windowWidth = document.documentElement.clientWidth;\n  // console.log('px', window.screen,)\n  return parseInt((windowWidth / 650) * val);\n};\nexport const MTop = (val) => {\n  return val\n  let windowWidth = document.documentElement.clientHeight;\n  console.log(\"px\", windowWidth);\n  return parseInt((windowWidth / 375) * val);\n};\n\nlet windowssize = {\n  width: 0,\n  height: 0,\n};\n\nexport const win = () => {\n  let width = parseInt(window.screen.availWidth);\n  let height = parseInt(window.screen.availHeight);\n  if (width < height) {\n    let a = width;\n    width = height;\n    height = a;\n  }\n  // let win1 = JSON.stringify({\n  //   width, height\n  // })\n\n  return {\n    width: 1920,\n    height: 1080,\n  };\n};\n\nlet timer = null;\nexport const timerFun = () => {\n  // console.log(\"jianting1------------\");\n  // timer && clearInterval(timer);\n  // timer = setInterval(() => {\n  //   let width = parseInt(window.screen.availWidth);\n  //   let height = parseInt(window.screen.availHeight);\n  //   if (width < height) {\n  //     let a = width;\n  //     width = height;\n  //     height = a;\n  //   }\n  //   // console.log('jianting1', windowssize, { width, height });\n  //   if (width !== windowssize.width || height !== windowssize.height) {\n  //     windowssize.width = width;\n  //     windowssize.height = height;\n  //     let ipcRenderer = window.electron.ipcRenderer;\n  //     ipcRenderer.send(\"changeFenBianLv\", windowssize);\n  //   }\n  // }, 2000);\n};\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/myModal/MyModal.jsx",["733","734"],"\n/**\n * \n * @param {boolean} visible 控制modal框是否显示\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\n * @returns {element} 这是自己写的一个modal框\n */\n\nimport React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './myModal.less'\nimport { px, pX, MTop, mTop } from '../px'\n\nclass MyModal extends Component {\n\n  render () {\n    let { visible, element, text } = this.props\n    // console.log('---上层组件传来的值---', this.props);\n\n    if (visible) {\n      let body = element ? element :\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\n          </div>\n          <p>\n            {text ? text : 'loading...'}\n          </p>\n        </div>\n      return (\n        <div className=\"myModal\">\n          {body}\n        </div>\n      )\n    } else {\n      return (null)\n    }\n\n  }\n}\n\nMyModal.propTypes = {\n  visible: PropTypes.bool,\n  element: PropTypes.element,\n  text: PropTypes.string\n\n}\nMyModal.defaultProps = {\n  visible: false,\n  text: 'loading...'\n}\n\nexport default MyModal","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/phoneBook/PhoneBook.jsx",["735","736","737","738","739","740","741","742","743"],"import React, { useState, useEffect } from 'react'\nimport {\n  Menu,\n  Popover,\n  Button,\n  Modal\n} from 'antd';\nimport PropTypes from 'prop-types';\nimport pinyin from 'pinyin';\nimport './phoneBook.less'\nimport { px } from '../px';\n/**\n *\n * @param {function} onReturn  点击返回按钮后调用的函数\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\n * @returns\n */\n\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\n  const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\n  const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\n  const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\n  const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\n  const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\n\n  const _phoneList = () => {\n    let option = phoneList.map((item, index) => {\n      let data = item.data\n      let option1 = data.map((value, index1) => {\n        return (\n          <li\n            key={`option1${index1}`}\n            onClick={() => {\n              setSelectBreed(value.petSpeciesBreedId)\n              selectFun(value)\n            }}>\n            {value.name}\n            {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\n          </li>\n        )\n      })\n      return (\n        <div className=\"phoneBody\">\n          <div className=\"title\" id={`${item.title}`} >{item.title} </div>\n          <ul>\n            {option1}\n          </ul>\n        </div>\n      )\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n  }\n  const _letterList = () => {\n\n    let option = letterList.map((item, index) => {\n\n\n      return (\n        <li\n          key={`${index}`}\n\n          style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\n          <a\n\n            onClick={() => {\n              litterClick(item)\n            }}\n          >{item}</a>\n        </li>\n      )\n\n    })\n\n    return (\n      <ul className=\"letterUL\">\n        {option}\n      </ul>\n    )\n  }\n  const litterClick = (anchorName) => {\n    // console.log(anchorName);\n    if (anchorName) {\n      // 找到锚点\n      let anchorElement = document.getElementById(anchorName);\n      // console.log(anchorElement);\n      // 如果对应id的锚点存在，就跳转到锚点\n      if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\n    }\n    // e.preventDefault();\n  }\n\n  useEffect(() => {\n    if (confirmSelectBreed !== -1) {\n      setSelectBreed(confirmSelectBreed)\n    }\n  }, [confirmSelectBreed]);\n\n  useEffect(() => {\n    let test = []\n    listDate.forEach((item, index) => {\n      let data = {\n        name: item.breedName,\n        hidden: false,\n        petSpeciesBreedId: item.petSpeciesBreedId\n      }\n      test.push(data)\n    })\n    //获取联系人列表\n    let list = test;\n    let sections = [], letterArr = [];\n    // 右侧字母栏数据处理\n    list.forEach((item, index) => {\n      letterArr.push(pinyin(item.name.substring(0, 1), {\n        style: pinyin.STYLE_FIRST_LETTER,\n      })[0][0].toUpperCase());\n\n      letterArr = [...new Set(letterArr)].sort();\n    });\n    // 分组数据处理\n    letterArr.forEach((item, index) => {\n      sections.push({\n        title: item,\n        data: []\n      })\n    });\n    list.forEach(item => {\n      let listItem = item;\n      sections.forEach(item => {\n        let first = listItem.name.substring(0, 1);\n        let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\n        if (item.title == test) {\n          item.data.push({\n            firstName: first,\n            name: listItem.name,\n            hidden: listItem.hidden,\n            petSpeciesBreedId: listItem.petSpeciesBreedId\n          });\n        }\n      })\n    });\n    setPhoneList(sections)\n    setPhoneListCopy(sections)\n    setLetterList(letterArr)\n    setLetterListCopy(letterArr)\n  }, [listDate]);\n\n  useEffect(() => {\n    if (letterListCopy.length > 0) {\n      let allData = phoneListCopy\n      let newArr = []\n      let arr = []\n      if (searchText.length > 0) {\n        allData.map((item, i) => {\n          item.data.forEach((data, index) => {\n            let dataName = data.name ? data.name.toUpperCase() : ''\n            let keyData = searchText ? searchText.toUpperCase() : ''\n            if (dataName.search(keyData) !== -1) {\n              newArr.push(data)\n            }\n          })\n          if (newArr.length != 0) {\n            let oneGreep = {\n              title: item.title,\n              data: newArr\n            }\n            arr.push(oneGreep)\n          }\n          newArr = []\n        })\n        let letterArr = []\n        arr.forEach((item, index) => {\n          letterArr.push(item.title)\n        })\n        setPhoneList(arr)\n        setLetterList(letterArr)\n      } else {\n        setPhoneList(phoneListCopy)\n        setLetterList(letterListCopy)\n      }\n    }\n  }, [searchText]);\n\n  return (\n    <div id=\"phoneBook\">\n      <div className=\"phone\">\n        {_phoneList()}\n      </div>\n      <div className=\"litter\">\n        {_letterList()}\n      </div>\n    </div >\n  )\n}\n\nPhoneBook.propTypes = {\n  listDate: PropTypes.array,\n  selectFun: PropTypes.func,\n  searchText: PropTypes.string,\n  confirmSelectBreed: PropTypes.number\n}\nPhoneBook.defaultProps = {\n  listDate: [],\n  selectFun: () => { },\n  searchText: '',\n  confirmSelectBreed: -1,\n}\n\nexport default PhoneBook\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/avatar/Avatar.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/axios/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/api.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/ezyvetApi.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/selectPetBreedModal/index.jsx",["744"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport PhoneBook from '../../utils/phoneBook/PhoneBook';\n\nimport _ from 'lodash';\n\nimport './index.less';\nimport { selectBreedBySpeciesId } from '../../api';\n\nconst SelectPetBreed = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel }) => {\n\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [breedList, setBreedList] = useState([]);//所有宠物品种\n  const [searchValue, setSearchValue] = useState();//搜索框的值\n  const [selePetBreedValue, setSelePetBreedValue] = useState();//选择的宠物品种\n  const [loading, setLoading] = useState(false);//加载\n\n  //获取所有宠物品种\n  const getAllPetBreed = () => {\n    let data = {\n      speciesId: null,//null是获取所有宠物品种不分猫和狗\n    }\n    setLoading(true);\n\n    selectBreedBySpeciesId(data)\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          setBreedList(res.petlist);\n        } else {\n          message.error('Failed to obtain pet breed')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    onSelect(selePetBreedValue);\n    setIsModalVisible(visible);\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入内容\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { });\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPetBreed();\n    return (() => { });\n  }, []);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  return (\n    <>\n      <Modal\n        title=\"Choose Breed\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetBreedModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <PhoneBook\n                listDate={breedList}\n                confirmSelectBreed={value}\n                selectFun={(val) => {\n                  setSelePetBreedValue(val);\n                }}\n                searchText={searchValue}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                >\n                  Select\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPetBreed;\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/config/config.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/hardwareReduce.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/userReduce.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/petReduce.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/current.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/heard/Heard.js",["745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770"],"import React, { useState, useEffect } from \"react\";\nimport { Menu, Popover, Button, Modal } from \"antd\";\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\n\nimport help from \"./../../assets/images/help.png\";\nimport message from \"./../../assets/images/message.png\";\nimport dog from \"./../../assets/images/reddog.png\";\nimport cat from \"./../../assets/images/redcat.png\";\nimport other from \"./../../assets/images/redother.png\";\nimport menu from \"./../../assets/img/menu.png\";\nimport close from \"./../../assets/img/close.png\";\nimport jinggao from \"./../../assets/img/jinggao.png\";\nimport redclose from \"./../../assets/img/redclose.png\";\nimport rMin_red from \"./../../assets/img/min-red.png\";\nimport rClose_red from \"./../../assets/img/close-red.png\";\nimport rMin_white from \"./../../assets/img/min-white.png\";\nimport rClose_white from \"./../../assets/img/close-white.png\";\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\n\nimport { mTop, px, MTop } from \"../px\";\nimport electronStore from \"../electronStore\";\nimport MyModal from './../myModal/MyModal'\nimport { version, updateTime } from \"./../appversion\";\n\nimport { connect } from 'react-redux'\nimport { setMenuNum, setSelectHardwareType, petDetailInfoFun } from '../../store/actions';\nimport moment from 'moment'\nimport PropTypes from \"prop-types\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { getPetInfoByRFID } from \"../../api\";\n\nimport \"./heard.less\";\n\nconst { SubMenu } = Menu;\nconst MyIcon = createFromIconfontCN({\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\n});\n\nconst allPetList = electronStore.get(\"doctorExam\");\nlet storage = window.localStorage;\nlet ipcRenderer = window.electron.ipcRenderer;\nlet mouseoutTimer = null;\nlet matchingTimer = null;\n/**\n *\n * @param {function} onReturn  点击返回按钮后调用的函数\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\n * @returns\n */\n\nconst Heard = ({\n  onReturn,\n  onSearch,\n\n  blueSearch,\n  setMenuNum,\n  menuNum,\n  setSelectHardwareType,\n  petListArr,\n  petDetailInfoFun\n}) => {\n  let history = useHistory();\n\n  const [minbgc, setMinbgc] = useState('')        //最小化的背景颜色\n  const [closebgc, setClosebgc] = useState('')    //关闭按钮的背景色\n  const [rMin, setRMin] = useState(rMin_red)      //最小化的图标\n  const [rClose, setRClose] = useState(rClose_red) //关闭按钮图标\n  const [value, setValue] = useState('')          //搜索框输入的内容\n  const [visible, setVisible] = useState(false)   //搜索框下面的搜索model\n  const [loading, setLoading] = useState(false)     //搜索宠物过程中的加载图标\n  const [petList, setPetList] = useState([])        //搜索到的宠物列表\n  const [menuVisible, setMenuVisible] = useState(false)//菜单图标下面的菜单内容图标\n  const [menuMouseOverIndex, setMenuMouseOverIndex] = useState('')//用来定位鼠标滑到哪个菜单选项\n\n  const [modalvisible, setModalVisible] = useState(false)       //关于的弹窗\n  const [modalVis, setModalVis] = useState(false)               //RFID搜索是否有宠物的弹窗\n  const [isNotFound, setIsNotFound] = useState(false)           //是否找到RFID对应的图标\n  const [deviceModel, setDeviceModel] = useState(false)         //我的设备弹窗\n\n  const [noUSB, setNoUSB] = useState(false)                 //没有底座设备\n  const [searchMac, setSearchMac] = useState(false)         //是否展示狗牌mac搜索图标下面的Modal框\n  const [bluDevice, setBluDevice] = useState([])            //搜索到的狗牌设备mac地址\n\n  const [isShowBlePetList, setIsShowBlePetList] = useState(false)  //是否展示狗牌对应宠物\n  const [isMatchPet, setIsMatchPet] = useState(false)      //正在匹配狗牌对应的宠物\n  const [macMatchPetList, setMacMatchPetList] = useState([])\n  const [updateStatus, setUpdateStatus] = useState('init')\n  const [lastVersion, setLastVersion] = useState(version)\n  const [downLoadNum, setDownLoadingNum] = useState(0)\n  const [selectDeviceMac, setSelectDeviceMac] = useState('')\n  const [clickType, setClickType] = useState(false);\n\n  //这里是为了模拟数据所做出来的,后期要改成接口\n  const testPetList = [\n    {\n      macId: \"E0:7C:62:30:08:08\",\n      petName: \"Mella\",\n      petId: \"b9de0868-9202-4fc9-9f1b-325220ceeccf\",\n    },\n    {\n      macId: \"E0:7C:62:03:75:32\",\n      petName: \"Possum\",\n      petId: \"e4b11580-1277-4b10-bd64-46b097f6f882\",\n    },\n    {\n      macId: \"E0:7D:EA:A8:8D:7E\",\n      petName: \"Charlie\",\n      petId: \"b4e7a185-1c7e-4885-ab95-4a7d2d2ada83\",\n    },\n    {\n      macId: \"E0:7C:62:32:76:8C\",\n      petName: \"Noah\",\n      petId: \"01b34bf2-47e6-4036-884f-47299447cb6a\",\n    },\n\n    {\n      macId: \"84:C2:E4:03:C3:06\",\n      petName: \"Whitey\",\n      petId: \"f713a238-f5df-4c85-8c4f-5766b0770c07\",\n    },\n  ];\n  const [size, setSize] = useState({ height: px(47) });\n  const [headerRef, setHeaderRef] = useState();\n\n  const uploadMessage = (e, data) => {\n    switch (data.payload.status) {\n      case -1:\n        console.log('查询异常');\n        setUpdateStatus('error')\n        break;\n\n      case 0:\n        console.log(\"正在检查应用程序更新\");\n        setUpdateStatus(\"check\");\n        break;\n\n      case 2:\n        console.log(\"正在检查应用程序更新\");\n        setUpdateStatus(\"lastVersion\");\n        break;\n\n      case 1:\n        console.log(\"检测到新版本\");\n        let version = data.output.version;\n        setLastVersion(version);\n\n        setUpdateStatus(\"newVersion\");\n        break;\n\n      // case 3:\n      //   console.log(\"下载新版成功\");\n      // case 4:\n      //   console.log(\"取消背景下载\");\n      case 5:\n        console.log(\"取消安装\");\n        setUpdateStatus(\"init\");\n        break;\n      case 6:\n        console.log(\"正在下载\");\n        setUpdateStatus(\"downLoading\");\n        let loadNum = data.output.percent\n          ? (data.output.percent / 100).toFixed(1)\n          : 0;\n        setDownLoadingNum(loadNum);\n        break;\n\n      default:\n        break;\n    }\n  };\n  const _noUSB = (e, data) => {\n    console.log(\"没有USB设备：\", data);\n    if (data === false) {\n      setNoUSB(false);\n    } else {\n      if (!noUSB) {\n        setNoUSB(true);\n      }\n    }\n  };\n  const _send = (event, data) => {\n    command(data)();\n  };\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  const command = (newArr) => {\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    console.log(dataArr1);\n    const instruction = [255];\n    const commandArr = {\n      255: () => {\n        // console.log(dataArr1);\n        // console.log(bluDevice);\n        let length = newArr.length;\n        let frameLength = newArr[1]; //帧长\n        let itemLength = newArr[3] + 1; //数据位的长度   13\n        let dataIndex = 0;\n\n        let MAC = \"\";\n        let bluData = [];\n        let UUID = \"\";\n        while (itemLength < length && itemLength + 3 <= frameLength) {\n          let itemData = [];\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5]);\n          }\n          // console.log('循环得到的数据', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              break;\n            case 255:\n              break;\n            case 3:\n              break;\n            case 239:\n              // console.log('---mac地址');\n              let str = itemData[0];\n              for (let i = 1; i < itemData.length; i++) {\n                str += `:${itemData[i]}`;\n              }\n              MAC = str.toUpperCase();\n\n              break;\n            case 7:\n              console.log(\"uuid\");\n              let uuid = \"\";\n              for (let i = 0; i < itemData.length; i++) {\n                uuid += `${itemData[i]}`;\n              }\n              UUID = uuid;\n              break;\n            default:\n              return;\n          }\n          dataIndex = itemLength;\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\n\n          // console.log(itemLength, itemLength < length && (itemLength + 3 <= frameLength));\n        }\n        console.log(\"----mac\", MAC, \"-----uuid\", UUID);\n        if (UUID === \"d7895ab1acc74de3b9919e825c24c809\") {\n          // console.log('uuid相等', bluDevice, bluDevice.indexOf(MAC) === -1,);\n          if (bluDevice.indexOf(MAC) === -1) {\n            let dataArr = [].concat(bluDevice);\n            dataArr.push(MAC);\n            setBluDevice(dataArr);\n          }\n        }\n      },\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n  //最小化，关闭的\n  const MINCOLOSE = {\n    minMouseEnter: () => {\n      setMinbgc(\"rgba(70, 70, 70, 0.5)\");\n      setRMin(rMin_white);\n    },\n    minMouseLeave: () => {\n      setMinbgc(\"\");\n      setRMin(rMin_red);\n    },\n    minClock: () => {\n      setMinbgc(\"\");\n      setRMin(rMin_red);\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"window-min\");\n    },\n    closeMouseEnter: () => {\n      setClosebgc(\"rgba(232,17,35)\");\n      setRClose(rClose_white);\n    },\n    closeMouseLeave: () => {\n      setClosebgc(\"\");\n      setRClose(rClose_red);\n    },\n    closeClock: () => {\n      let ipcRenderer = window.electron.ipcRenderer;\n      ipcRenderer.send(\"window-close\");\n    },\n  };\n  //搜索框内容\n  const searchPetBody = () => {\n    if (loading) {\n      //加载中\n      return (\n        <div className=\"searchPetLoading\" style={{ padding: `${20}px 0` }}>\n          <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n            <LoadingOutlined\n              style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\n            />\n          </div>\n          <p style={{ color: \"#e1206d\", marginTop: px(5) }}>loading...</p>\n        </div>\n      );\n    } else {\n      // console.log('-----展示', petList.length);\n      if (petList.length > 0) {\n        //找到了宠物，展示出来\n\n        // let petList = electronStore.get('doctorExam')\n        // console.log(petList);\n\n        let option = petList.map((item, index) => {\n          let { speciesId, url } = item;\n\n          let images = `url(${url}?download=0&width=150)`;\n          if (!url) {\n            switch (speciesId) {\n              case 1:\n                images = `url(${cat})`;\n\n                break;\n              case 2:\n                images = `url(${dog})`;\n                break;\n              default:\n                images = `url(${other})`;\n                break;\n            }\n          }\n          return (\n            <li\n              key={`${index}`}\n              style={{ margin: `${px(20)}px 0` }}\n              onClick={() => {\n                setValue('')\n                setVisible(false)\n                setPetList([])\n                petDetailInfoFun(item)\n                // onSearch(item)\n                history.push('/MainBody')\n              }}\n            >\n              <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                <div\n                  className=\"img\"\n                  style={{\n                    width: px(50),\n                    height: px(50),\n                    marginRight: px(40),\n                    borderRadius: px(60),\n                    backgroundImage: images,\n                  }}\n                >\n\n                </div>\n\n                <div className=\"petInfo\">\n                  <p\n                    style={{\n                      color: \"#141414\",\n                      fontWeight: 600,\n                      fontSize: px(20),\n                    }}\n                  >\n                    {item.petName}\n                  </p>\n                  <p\n                    style={{ color: \"#797979\", fontSize: px(18) }}\n                  >{`Patient ID: ${item.patientId}`}</p>\n                  <p\n                    style={{ color: \"#797979\", fontSize: px(18) }}\n                  >{`Owner: ${item.owner}`}</p>\n                </div>\n              </div>\n            </li>\n          );\n        });\n        let liStyle = { backgroundColor: \"#fff\" };\n        if (petList.length > 4) {\n          liStyle = { height: px(500), overflowY: \"auto\" };\n        }\n\n        return (\n          <div className=\"searchPetList\">\n            <ul style={liStyle}>{option}</ul>\n          </div>\n        );\n      } else {\n        //没有发现这个宠物\n        return (\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\n              Pet not found. Would you like to add a new patient?\n            </p>\n\n            <div\n              className=\"searchPetBtn\"\n              style={{ fontSize: px(18) }}\n              onClick={() => {\n                history.push(\"/pet/doctorAddPet\");\n              }}\n            >\n              <p style={{ padding: `${px(8)}px 0` }}>+ New Patient</p>\n            </div>\n          </div>\n        );\n      }\n    }\n  };\n  const inputChange = (text) => {\n    function isNumber(val) {\n      var regPos = /^\\d+(\\.\\d+)?$/; //非负浮点数\n      var regNeg =\n        /^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数\n      if (regPos.test(val) || regNeg.test(val)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    //去除前后空格\n    let search = text.target.value.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    setValue(search);\n    if (search.length > 0) {\n      setVisible(true);\n      setLoading(true);\n\n      //搜索分成两种，一种是通过手输入数据搜索，一种是通过RFID扫描过后搜索\n\n      if (search.length === 15 && isNumber(search)) {\n        //这是RFID扫描后的搜索\n\n        getPetInfoByRFID(search, storage.lastOrganization)\n          .then((res) => {\n            console.log(\"----RFID搜索结果\", res);\n\n            if (res.flag === true && res.data) {\n              let {\n                createTime,\n                patientId,\n                petName,\n                firstName,\n                lastName,\n                url,\n                speciesId,\n                breedName,\n                gender,\n                birthday,\n                petId,\n                rfid,\n                weight,\n              } = res.data;\n              patientId = patientId || \"unknown\";\n              petName = petName || \"unknown\";\n              breedName = breedName || \"unknown\";\n              weight = weight || \"unknown\";\n              let owner = \"\";\n              if (!firstName) {\n                firstName = \"\";\n              }\n              if (!lastName) {\n                lastName = \"\";\n              }\n              if (lastName === \"\" && firstName === \"\") {\n                owner = \"unknown\";\n              } else {\n                owner = `${lastName} ${firstName}`;\n              }\n              createTime = moment(createTime).format(\"X\");\n              let petGender = \"\";\n              switch (`${gender}`) {\n                case \"1\":\n                  petGender = \"F\";\n\n                  break;\n                case \"0\":\n                  petGender = \"M\";\n                  break;\n                default:\n                  petGender = \"unknown\";\n                  break;\n              }\n              let petAge = \"unknown\";\n              if (birthday) {\n                petAge = moment(new Date()).diff(moment(birthday), \"years\");\n                // console.log('petAge', petAge);\n              }\n              let json = {\n                insertedAt: createTime,\n                patientId,\n                petName,\n                owner,\n                breed: breedName,\n                gender: petGender,\n                age: petAge,\n                petId,\n                id: 0,\n                weight,\n                rfid,\n                url,\n                speciesId,\n              };\n              let searchData = [];\n              searchData.push(json);\n              setLoading(false);\n              setPetList(searchData);\n            } else if (\n              res.flag === true &&\n              res.msg === \"该组织下无此宠物信息\"\n            ) {\n              console.log(\"找到了但是不是在这个组织下\");\n              setLoading(false);\n              setModalVis(true);\n              setIsNotFound(false);\n              setValue(\"\");\n              setVisible(false);\n\n              // this.setState({\n              //   loading: false,\n              //   modalVis: true,\n              //   isNotFound: false,\n              //   heardSearchText: ''\n              // })\n            } else {\n              console.log(\"没有找到\");\n              setLoading(false);\n              setModalVis(true);\n              setIsNotFound(true);\n              setValue(\"\");\n              setVisible(false);\n\n              // this.setState({\n              //   loading: false,\n              //   modalVis: true,\n              //   isNotFound: true,\n              //   heardSearchText: ''\n              // })\n            }\n          })\n          .catch((err) => {\n            console.log(\"抛出异常:\", err);\n            setLoading(false);\n          });\n        return;\n      }\n\n      /**\n       * 使用indexof方法实现模糊查询\n       *     语法：stringObject.indexOf(searchvalue, fromindex)\n       *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n       *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n       *\n       * list         原数组\n       * keyWord      查询关键词\n       * searchData   查询的结果\n       *\n       * toLowerCase（）方法：将字符串统一转成小写\n       * toUpperCase（）方法：将字符串统一转成大写\n       *\n       */\n      // let list = allPetList\n      let list = petListArr || []\n\n      let searchData = [];\n      let keyWord = search;\n      for (let i = 0; i < list.length; i++) {\n        let petName = list[i].petName ? list[i].petName.toLowerCase() : ''\n        let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : ''\n        let rfid = list[i].rfid || ''\n        if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n          || `${rfid}`.indexOf(keyWord) !== -1\n        ) {\n          searchData.push(list[i]);\n        }\n      }\n      // console.log('找到的宠物', searchData);\n      console.log(\n        \"---搜索词：\",\n        search,\n        \"---搜索数组：\",\n        list,\n        \"----搜索结果：\",\n        searchData\n      );\n      setLoading(false);\n      setPetList(searchData);\n    } else {\n      setVisible(false);\n    }\n  };\n  //左侧菜单栏\n  const menuList = () => {\n    let name = electronStore.get(`${storage.userId}-isClical`) ? 'Exit Clinical Study Mode' : 'Enter Clinical Study Mode'\n    let menulistArr = [\n      { name: \"Home\", index: \"1\" },\n      { name: \"All Patients\", index: \"2\" },\n      { name: \"Scheduled Patients\", index: \"3\" },\n      { name: \"My Account\", index: \"4\" },\n      { name: \"Org & Practice Profiles\", index: \"10\" },\n      { name: \"Settings\", index: \"5\" },\n      { name: name, index: \"6\" },\n      { name: `Billing & Subscriptions`, index: \"7\" },\n      { name: \"About Mella\", index: \"8\" },\n      { name: \"Log Out\", index: \"9\" },\n    ];\n    let menuOption = menulistArr.map((item, index) => {\n      let pColor = menuMouseOverIndex === item.index ? \"#e1206d\" : \"#1a1a1a\";\n      return (\n        <li\n          key={item.index}\n          style={{ padding: `${px(15)}px ${px(20)}px` }}\n          onClick={() => {\n            menulistClick(item);\n          }}\n          onMouseOver={(e) => {\n            setMenuMouseOverIndex(item.index);\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOver();\n          }}\n          onMouseOut={(e) => {\n            setMenuMouseOverIndex(\"\");\n            e.stopPropagation();\n            e.nativeEvent.stopImmediatePropagation();\n            menuMouseOut();\n          }}\n        >\n          <div className=\"item\">\n            <p style={{ color: pColor }}>{item.name}</p>\n          </div>\n        </li>\n      );\n    });\n\n    return <ul>{menuOption}</ul>;\n  };\n  const menulistClick = (e) => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setMenuVisible(false);\n    setMenuMouseOverIndex(\"\");\n    console.log(\"click \", e);\n\n    switch (e.index) {\n      case \"1\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"2\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"3\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"4\":\n        history.push(\"/MainBody\");\n        setMenuNum(e.index);\n        break;\n      case \"5\":\n        //跳转到设置\n        history.push(\"/menuOptions/settings\");\n        break;\n      case \"6\":\n        if (e.name === \"Exit Clinical Study Mode\") {\n          setMenuNum('1');\n          electronStore.set(`${storage.userId}-isClical`, false)\n          setSelectHardwareType(\"mellaPro\");\n        } else {\n          setMenuNum(e.index);\n          electronStore.set(`${storage.userId}-isClical`, true)\n        }\n        history.push(\"/MainBody\");\n        console.log(\"临床测试\");\n        break;\n      case \"7\":\n        console.log(\"billing\");\n        break;\n\n      case \"8\":\n        setModalVisible(true);\n        console.log(\"关于\");\n        break;\n      case \"9\":\n        console.log(\"退出登录\");\n        storage.userId = \"\";\n        storage.roleId = \"\";\n        storage.userWorkplace = \"\";\n        storage.lastOrganization = \"\";\n        storage.lastWorkplaceId = \"\";\n        storage.connectionKey = \"\";\n        storage.isClinical = \"false\";\n        setMenuNum(\"1\");\n        history.push(\"/\");\n        break;\n\n      case \"10\":\n        history.push('/menuOptions/ConnectWorkplace');\n        break;\n\n      default:\n        break;\n    }\n  };\n  const menuMouseOut = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    mouseoutTimer = setTimeout(() => {\n      setMenuVisible(false);\n      mouseoutTimer && clearTimeout(mouseoutTimer);\n    }, 1000);\n  };\n  const menuMouseOver = () => {\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setMenuVisible(true);\n  };\n  const updatePage = () => {\n    switch (updateStatus) {\n      case \"init\":\n        return (\n          <div\n            className=\"updateBtn\"\n            style={{ height: px(40) }}\n            onClick={() => {\n              setDownLoadingNum(0);\n              setUpdateStatus(\"check\");\n\n              ipcRenderer.send(\"clickUpdateBtn\");\n            }}\n          >\n            Check for Updates\n          </div>\n        );\n      case \"check\":\n        return (\n          <div className=\"updateLoading flex\">\n            <div className=\"loadIcon1\">\n              <LoadingOutlined\n                style={{ fontSize: 30, color: \"#e1206d\", marginRight: px(20) }}\n              />\n            </div>\n            <p style={{ color: \"#e1206d\" }}>Checking for updates</p>\n          </div>\n        );\n      case \"lastVersion\":\n        return (\n          <div style={{ fontSize: px(22), }}>\n            already the latest version\n          </div>\n        )\n      case 'error':\n        return (\n          <div style={{ fontSize: px(22), }}>\n            Failed to get the latest version, please try again later\n          </div>\n        )\n\n\n      case \"newVersion\":\n        return (\n          <div style={{ fontSize: px(22) }}>\n            {`Found new version V${lastVersion}`}\n          </div>\n        );\n      case \"downLoading\":\n        return (\n          <div style={{ fontSize: px(22) }}>\n            {`Download progress: ${downLoadNum}%`}\n          </div>\n        );\n\n      default:\n        break;\n    }\n  };\n  //关于界面\n  const modal = () => {\n    return (\n      <div\n        className=\"settingModal\"\n        style={{ height: `${document.documentElement.clientHeight}px` }}\n      >\n        <div className=\"writeBox\" style={{ borderRadius: px(25) }}>\n          <div className=\"modalHeadr\">\n            <div className=\"close\">\n              <div\n                className=\"imgBox\"\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => {\n                  setModalVisible(false);\n                  setUpdateStatus(\"init\");\n                }}\n              >\n                <img src={close} style={{ width: px(23) }} />\n              </div>\n            </div>\n            <div className=\"heaerCenter\">\n              <div className=\"heaerCenterL\">\n                <img src={mellaLogo} style={{ width: \"80%\" }} />\n              </div>\n              <div className=\"heaerCenterR\">\n                <h1 style={{ fontSize: px(45), marginBottom: px(10) }}>\n                  About the System\n                </h1>\n                <div className=\"version\">\n                  <div\n                    className=\"versionL\"\n                    style={{ fontSize: px(22), width: px(180) }}\n                  >\n                    Version\n                  </div>\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\n                    {version}\n                  </div>\n                </div>\n                <div className=\"version\">\n                  <div\n                    className=\"versionL\"\n                    style={{ fontSize: px(22), width: px(180) }}\n                  >\n                    Last Checked\n                  </div>\n                  <div className=\"versionR\" style={{ fontSize: px(24) }}>\n                    {updateTime}\n                  </div>\n                </div>\n\n                <div className=\"check\" style={{ marginTop: px(20) }}>\n                  {updatePage()}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"modalfoot\">\n            <div\n              className=\"about\"\n              style={{ marginTop: px(40), fontSize: px(18) }}\n            >\n              Nanjing Jiubian Technology Co., Ltd. was founded in 2019, located\n              in Nanjing Yuhuatai Software Valley Branch City, the company\n              brings together medical sensors, mobile Internet and other\n              industry's top professionals, business areas covering artificial\n              intelligence, smart medical, pet health, sleep monitoring, etc.,\n              is a design, research and development, production, sales, service\n              in one of the high-tech companies. The nine-sided science and\n              technology to \"the number of heavens and earths, starting from\n              one, finally nine\" as the cultural concept, adhering to the\n              essence of Chinese artisans, with an international vision, always\n              standing in the forefront of bio-intelligent medical monitoring\n              technology.\n            </div>\n\n            <div className=\"aLable\">\n              <a\n                href=\"#\"\n                style={{ fontSize: px(18), marginRight: px(50) }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                Terms and Agreements\n              </a>\n              <a\n                href=\"#\"\n                style={{ fontSize: px(18) }}\n                onClick={(e) => {\n                  e.preventDefault();\n                }}\n              >\n                Privacy Policy\n              </a>\n            </div>\n\n            <div className=\"foot\" style={{ marginBottom: px(40) }}>\n              © 2021 Mella Pet Care All RIghts Reserved\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //设备列表界面\n  const devices = () => {\n    let userId = storage.userId;\n    // electronStore.delete(`${userId}-deviceList`)\n    let deviceList = electronStore.get(`${userId}-deviceList`);\n    console.log(\"---\", deviceList);\n    if (!deviceList) {\n      let str = `${getRamNumber()}`;\n      for (let i = 0; i < 5; i++) {\n        str += `:${getRamNumber()}`;\n      }\n      console.log(\"随机生成的mac地址:\", str);\n      deviceList = [{ name: \"MellaPro\", deviceType: \"mellaPro\", macId: str }];\n      electronStore.set(`${userId}-deviceList`, deviceList);\n    }\n\n    function getRamNumber() {\n      var result = \"\";\n      for (var i = 0; i < 2; i++) {\n        result += Math.floor(Math.random() * 16).toString(16); //获取0-15并通过toString转16进制\n      }\n      //默认字母小写，手动转大写\n      return result.toLowerCase(); //另toLowerCase()转小写\n    }\n\n    // deviceList = [\n    //   // { name: 'Add Device', deviceType: 'add', macId: '0' },\n    //   { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\n    //   { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:51:66' },\n    //   { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:35:66' },\n    //   { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:24:33:44:55:66' },\n    //   { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:25:66' },\n    //   { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:56:66' },\n    // ]\n\n    let options = deviceList.map((item, index) => {\n      return (\n        <li\n          className=\"flex\"\n          key={`${index}`}\n          style={{ marginBottom: px(15), marginTop: px(5) }}\n          onClick={() => {\n            console.log(item.macId);\n            setSelectDeviceMac(item.macId);\n          }}\n        >\n          <div className=\"liLeft\" style={{ fontSize: px(16) }}>\n            {item.name}\n          </div>\n          <div className=\"liCenter\" style={{ fontSize: px(16) }}>\n            {item.macId}\n          </div>\n          <div className=\"liRight\">\n            <div\n              className=\"circle flex\"\n              style={{ width: px(18), height: px(18) }}\n            >\n              {selectDeviceMac === item.macId && <div className=\"redCircle\" />}\n            </div>\n          </div>\n        </li>\n      );\n    });\n\n    return (\n      <div\n        className=\"settingModal\"\n        style={{ height: `${document.documentElement.clientHeight}px` }}\n      >\n        <div\n          className=\"writeBox devices\"\n          style={{ borderRadius: px(25), width: px(400) }}\n        >\n          <div className=\"deviceHeadr\">\n            <div className=\"close\">\n              <div\n                className=\"imgBox\"\n                style={{ padding: `0 ${px(30)}px` }}\n                onClick={() => setDeviceModel(false)}\n              >\n                <img src={close} style={{ width: px(23) }} />\n              </div>\n            </div>\n            <div className=\"logo flex\">\n              <img src={mellaLogo} style={{ width: px(60) }} />\n              <div style={{ fontSize: px(22), marginTop: px(30) }}>Devices</div>\n              <div\n                className=\"bodyText\"\n                style={{ fontSize: px(18), marginTop: px(40) }}\n              >\n                Select the device you would\n                <br />\n                like to use or add a new device.\n              </div>\n            </div>\n          </div>\n\n          <div className=\"deviceCenter\">\n            <ul>{options}</ul>\n          </div>\n          <div\n            className=\"deviceFooter flex\"\n            style={{\n              borderBottomLeftRadius: px(25),\n              borderBottomRightRadius: px(25),\n            }}\n          >\n            <div\n              className=\"btn\"\n              style={{ height: px(40) }}\n              onMouseDown={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[0].style.opacity = \"0.5\";\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[0].style.opacity = \"1\";\n              }}\n              onClick={() => {\n                setDeviceModel(false);\n                history.push(\"/menuOptions/AddDevice\");\n              }}\n            >\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\n                New Device\n              </p>\n            </div>\n            <div\n              className=\"btn\"\n              style={{ height: px(40) }}\n              onMouseDown={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[1].style.opacity = \"0.5\";\n              }}\n              onMouseUp={() => {\n                let button = document.querySelectorAll(\n                  \"#heard .deviceFooter .btn\"\n                );\n                button[1].style.opacity = \"1\";\n              }}\n              onClick={() => {\n                electronStore.set(\n                  `${storage.userId}-selectDevice`,\n                  selectDeviceMac\n                );\n                setDeviceModel(false);\n              }}\n            >\n              <p className=\"btnText\" style={{ fontSize: px(18) }}>\n                Connect\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //点击蓝牙搜索图标\n  const blueClick = () => {\n    console.log(\"点击了蓝牙图标\");\n    setIsShowBlePetList(false);\n    setSearchMac(true);\n  };\n  //点击取消链接\n  const cencleClick = (e) => {\n    console.log(\"mac列表为空,点击取消\");\n    setBluDevice([]);\n    setSearchMac(false);\n    setIsShowBlePetList(false);\n    setIsMatchPet(false);\n    setMacMatchPetList([]);\n    if (e) {\n      e.preventDefault();\n    }\n    matchingTimer && clearTimeout(matchingTimer);\n  };\n  //搜索狗牌的蓝牙\n  const blusearchBody = () => {\n    console.log(\"搜索狗牌的蓝牙\", searchMac, bluDevice);\n    if (isShowBlePetList) {\n      if (isMatchPet) {\n        return (\n          <div\n            className=\"searchPetLoading\"\n            style={{ padding: `${20}px 0`, width: \"100%\" }}\n          >\n            <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n              <LoadingOutlined\n                style={{ fontSize: 30, color: \"#e1206d\", marginTop: mTop(-30) }}\n              />\n            </div>\n            <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\n              matching...\n            </p>\n\n            <a\n              href=\"#\"\n              style={{ color: \"#e1206d\", marginTop: px(30) }}\n              onClick={cencleClick}\n            >\n              Cencle\n            </a>\n          </div>\n        );\n      } else {\n        if (macMatchPetList.length > 0) {\n          let option = macMatchPetList.map((item, index) => {\n            let { speciesId, url } = item;\n\n            let images = `url(${url}?download=0&width=150)`;\n            if (!url) {\n              switch (speciesId) {\n                case 1:\n                  images = `url(${cat})`;\n                  break;\n                case 2:\n                  images = `url(${dog})`;\n                  break;\n                default:\n                  images = `url(${other})`;\n                  break;\n              }\n            }\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  cencleClick();\n                  onSearch(item);\n                }}\n              >\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                  <div\n                    className=\"img\"\n                    style={{\n                      width: px(50),\n                      height: px(50),\n                      marginRight: px(40),\n                      borderRadius: px(60),\n                      backgroundImage: images,\n                    }}\n                  >\n                    {/* <img src={images} style={{ width: px(40) }} /> */}\n                  </div>\n\n                  <div className=\"petInfo\">\n                    <p\n                      style={{\n                        color: \"#141414\",\n                        fontWeight: 600,\n                        fontSize: px(20),\n                        textAlign: \"start\",\n                      }}\n                    >\n                      {item.petName}\n                    </p>\n                    <p\n                      style={{ color: \"#797979\", fontSize: px(18) }}\n                    >{`Patient ID: ${item.patientId}`}</p>\n                    <p\n                      style={{ color: \"#797979\", fontSize: px(18) }}\n                    >{`Owner: ${item.owner}`}</p>\n                  </div>\n                </div>\n              </li>\n            );\n          });\n          let liStyle = { backgroundColor: \"#fff\" };\n          if (petList.length > 4) {\n            liStyle = { height: px(500), overflowY: \"auto\" };\n          }\n\n          return (\n            <div className=\"searchPetList flex\">\n              <ul style={liStyle}>{option}</ul>\n              <a\n                href=\"#\"\n                style={{\n                  color: \"#e1206d\",\n                  marginTop: px(10),\n                  marginBottom: px(21),\n                }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        }\n      }\n    } else {\n      if (noUSB) {\n        return (\n          <div className=\"searchPetLoading\" style={{ padding: `${10}px 0` }}>\n            <p style={{ width: \"80%\", fontSize: px(18) }}>\n              Please insert address and scan\n            </p>\n\n            <a href=\"#\" style={{ color: \"#e1206d\" }} onClick={cencleClick}>\n              Cencle\n            </a>\n          </div>\n        );\n      } else {\n        if (bluDevice.length > 0) {\n          let option = bluDevice.map((item, index) => {\n            return (\n              <li\n                key={`${index}`}\n                style={{ margin: `${px(20)}px 0` }}\n                onClick={() => {\n                  console.log(\"mac列表为空,点击列表内容\");\n                  setBluDevice([]);\n                  // setSearchMac(false)\n                  setIsShowBlePetList(true);\n                  setIsMatchPet(true);\n                  matchingTimer && clearTimeout(matchingTimer);\n                  matchingTimer = setTimeout(() => {\n                    let haveFlog = false,\n                      index = -1;\n                    for (let i = 0; i < testPetList.length; i++) {\n                      if (testPetList[i].macId === item) {\n                        haveFlog = true;\n                        index = i;\n                        break;\n                      }\n                    }\n                    if (haveFlog) {\n                      if (storage.lastOrganization === \"1\") {\n                        matchPet(testPetList[index].petId);\n                      } else {\n                        setModalVis(true);\n                        setIsNotFound(false);\n                        cencleClick();\n                      }\n                    } else {\n                      setModalVis(true);\n                      setIsNotFound(true);\n                      cencleClick();\n                    }\n\n                    setIsMatchPet(false);\n                    matchingTimer && clearTimeout(matchingTimer);\n                  }, 2000);\n                }}\n              >\n                <div className=\"item\" style={{ paddingLeft: px(40) }}>\n                  <div className=\"petInfo\">\n                    <p\n                      style={{\n                        color: \"#141414\",\n                        fontWeight: 600,\n                        fontSize: px(20),\n                      }}\n                    >\n                      mac:{item}\n                    </p>\n                  </div>\n                </div>\n              </li>\n            );\n          });\n          let liStyle = { backgroundColor: \"#fff\" };\n          if (bluDevice.length > 4) {\n            liStyle = { height: px(500), overflowY: \"auto\" };\n          }\n          return (\n            <div className=\"searchPetList\" style={{ flexDirection: \"column\" }}>\n              <ul style={liStyle}>{option}</ul>\n              <a\n                href=\"#\"\n                style={{\n                  color: \"#e1206d\",\n                  marginTop: px(10),\n                  marginBottom: px(21),\n                }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        } else {\n          return (\n            <div\n              className=\"searchPetLoading\"\n              style={{ padding: `${20}px 0`, width: \"100%\" }}\n            >\n              <div className=\"loadIcon\" style={{ paddingTop: MTop(15) }}>\n                <LoadingOutlined\n                  style={{\n                    fontSize: 30,\n                    color: \"#e1206d\",\n                    marginTop: mTop(-30),\n                  }}\n                />\n              </div>\n              <p style={{ color: \"#e1206d\", marginTop: px(5), width: \"80%\" }}>\n                scanning...\n              </p>\n\n              <a\n                href=\"#\"\n                style={{ color: \"#e1206d\", marginTop: px(30) }}\n                onClick={cencleClick}\n              >\n                Cencle\n              </a>\n            </div>\n          );\n        }\n      }\n    }\n  };\n  const matchPet = (searchValue) => {\n    console.log(\"搜索词:\", searchValue);\n    let list = electronStore.get(\"doctorExam\");\n\n    let searchData = [];\n    let keyWord = searchValue;\n    for (let i = 0; i < list.length; i++) {\n      let petName = `${list[i].petId}`;\n      if (keyWord === petName) {\n        searchData.push(list[i]);\n      }\n    }\n\n    setIsMatchPet(false);\n\n    setMacMatchPetList(searchData);\n  };\n\n  useEffect(() => {\n    console.log(\"mac列表为空,初始化\");\n    mouseoutTimer && clearTimeout(mouseoutTimer);\n    setBluDevice([]);\n    return () => {\n      matchingTimer && clearTimeout(matchingTimer);\n    };\n  }, []);\n  useEffect(() => {\n    ipcRenderer.on(\"uploadMessage\", uploadMessage);\n    return () => {\n      ipcRenderer.removeListener(\"uploadMessage\", uploadMessage);\n    };\n  }, []);\n  useEffect(() => {\n    if (blueSearch) {\n      console.log(\"---渲染时执行----??????\");\n      ipcRenderer.on(\"sned\", _send);\n      ipcRenderer.on(\"noUSB\", _noUSB);\n      return () => {\n        console.log(\"----卸载----?????????/\");\n        ipcRenderer.removeListener(\"sned\", _send);\n        ipcRenderer.removeListener(\"noUSB\", _noUSB);\n      };\n    }\n  }, []);\n  useEffect(() => {\n    //监听屏幕窗口改变\n    setSize({ height: 47 });\n  }, [window.screen.availWidth])\n\n  return (\n    <div id=\"heardUI\">\n      <div id=\"heardUITop\" />\n      <div\n        id=\"heard\"\n        style={size}\n        ref={(val) => {\n          setHeaderRef(val);\n        }}\n      >\n        <div className=\"l\">\n          <div\n            className=\"menuF\"\n            style={{ marginLeft: px(40), marginRight: px(40) }}\n          >\n            <div\n              className=\"menu\"\n              onMouseOver={menuMouseOver}\n              onMouseOut={menuMouseOut}\n            >\n              <img src={menu} style={{ width: px(20) }} />\n              {menuVisible ? (\n                // true\n                <div className=\"manuBody\" style={{ top: px(20), left: px(-40) }}>\n                  <div\n                    className=\"triangle\"\n                    style={{\n                      borderLeft: `${px(10)}px solid transparent`,\n                      borderRight: `${px(10)}px solid transparent`,\n                      borderBottom: `${px(13)}px solid #fff`,\n                      left: px(40),\n                    }}\n                  />\n\n                  <div className=\"manuBodyList\" style={{ marginTop: px(13) }}>\n                    {menuList()}\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div className=\"search\" style={{ width: px(300) }}>\n            <input\n              placeholder=\"Search Pet    &#xe63f;\"\n              style={{ fontSize: px(16), paddingLeft: px(20) }}\n              value={value}\n              onChange={(text) => {\n                inputChange(text);\n              }}\n              onKeyUp={(e) => {\n                // console.log(e);\n                if (e.keyCode === 13) {\n                  console.log(\"回车,去搜索\");\n                }\n                if (e.keyCode === 27) {\n                  console.log(\"清空\");\n                  setValue(\"\");\n                  setVisible(false);\n                }\n              }}\n            />\n            {blueSearch ? (\n              <div\n                className=\"searchIconFa bluSearch\"\n              // style={{ cursor: 'pointer', backgroundColor: 'pink' }}\n              // onClick={blueClick}\n              >\n                <div onClick={blueClick}>\n                  {/* <img src={blueSearchPng} style={{ width: '50%' }} /> */}\n                  <span\n                    className=\" iconfont icon-sousuo searchIcon\"\n                    style={{ fontSize: px(25) }}\n                  />\n                </div>\n\n                {searchMac ? (\n                  // true ?\n                  <div className=\"searchPet flex\" style={{ width: px(400) }}>\n                    <div\n                      className=\"triangle\"\n                      style={{\n                        borderLeft: `${px(20)}px solid transparent`,\n                        borderRight: `${px(20)}px solid transparent`,\n                        borderBottom: `${px(25)}px solid #fff`,\n                        // marginLeft: px(30),\n                        zIndex: 999,\n                      }}\n                    />\n\n                    <div className=\"searchPetBody\" style={{ width: \"100%\" }}>\n                      {blusearchBody()}\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n            ) : (\n              <div className=\"searchIconFa\">\n                <span\n                  className=\" iconfont icon-sousuo searchIcon\"\n                  style={{ fontSize: px(25) }}\n                />\n              </div>\n            )}\n\n            {visible ? (\n              // true ?\n              <div className=\"searchPet\" style={{ top: px(35), width: px(400) }}>\n                <div\n                  className=\"triangle\"\n                  style={{\n                    borderLeft: `${px(20)}px solid transparent`,\n                    borderRight: `${px(20)}px solid transparent`,\n                    borderBottom: `${px(25)}px solid #fff`,\n                    marginLeft: px(30),\n                    zIndex: 999,\n                  }}\n                />\n\n                <div className=\"searchPetBody\">{searchPetBody()}</div>\n              </div>\n            ) : null}\n          </div>\n        </div>\n\n        <div className=\"r\">\n          <div className=\"heardCenter\">\n            <div\n              className=\"message\"\n              onClick={() => history.push(\"/menuOptions/unassigned\")}\n            >\n              <img\n                src={message}\n                alt=\"\"\n                style={{ height: px(25), width: px(25) }}\n              />\n            </div>\n            <div\n              className=\"help\"\n              style={{ margin: `0 ${px(25)}px` }}\n              onClick={() => history.push(\"/menuOptions/help\")}\n            >\n              <img src={help} alt=\"\" style={{ height: px(25) }} />\n            </div>\n          </div>\n          <div className=\"min_close\" style={{ paddingRight: px(15) }}>\n            <div\n              className=\"min_icon\"\n              onClick={MINCOLOSE.minClock}\n              style={{ backgroundColor: minbgc, height: px(47), width: px(47) }}\n              onMouseEnter={MINCOLOSE.minMouseEnter}\n              onMouseLeave={MINCOLOSE.minMouseLeave}\n            >\n              <img src={rMin} alt=\"\" style={{ width: px(20) }} />\n            </div>\n            <div\n              className=\"min_icon\"\n              onClick={MINCOLOSE.closeClock}\n              style={{ backgroundColor: closebgc, height: px(47), width: px(47) }}\n              onMouseEnter={MINCOLOSE.closeMouseEnter}\n              onMouseLeave={MINCOLOSE.closeMouseLeave}\n            >\n              <img src={rClose} alt=\"\" style={{ width: px(20) }} />\n            </div>\n          </div>\n        </div>\n\n        {modalvisible && modal()}\n        {deviceModel && devices()}\n\n        <MyModal\n          // visible={true}\n          visible={modalVis}\n          element={\n            <div\n              className=\"tip\"\n              style={{ width: px(420), height: px(480), borderRadius: px(20) }}\n            >\n              <div\n                className=\"close\"\n                style={{ height: px(60) }}\n                onClick={() => setModalVis(false)}\n              >\n                <div className=\"flex\" style={{ height: px(60), width: px(60) }}>\n                  <img src={close} alt=\"\" style={{ width: px(20) }} />\n                </div>\n              </div>\n              <div className=\"text\">\n                <h1 style={{ fontSize: px(36), marginTop: px(30) }}>\n                  {\" \"}\n                  {isNotFound ? \"Pet not found!\" : \"Pet found!\"}\n                </h1>\n              </div>\n              <div className=\"flex\" style={{ margin: `${px(20)}px 0` }}>\n                {isNotFound ? (\n                  <img src={redclose} width=\"50px\" />\n                ) : (\n                  <img src={jinggao} width=\"50px\" />\n                )}\n              </div>\n              <div\n                className=\"textbody\"\n                style={{ marginTop: px(30), color: \"#000\" }}\n              >\n                {isNotFound ? (\n                  <p style={{ fontSize: px(22) }}>\n                    {\" \"}\n                    This pet is not on your database\n                  </p>\n                ) : (\n                  <p style={{ fontSize: px(22) }}>\n                    Pet Identified but does not <br /> belong to your\n                    organization.\n                  </p>\n                )}\n              </div>\n\n              <div className=\"flex\" style={{ marginTop: px(30), width: \"100%\" }}>\n                <div\n                  className=\"btn flex\"\n                  style={{ height: px(40) }}\n                  onClick={() => {\n                    setModalVis(false);\n                    cencleClick();\n                  }}\n                >\n                  <p>OK</p>\n                </div>\n              </div>\n            </div>\n          }\n        />\n      </div>\n    </div>\n\n  );\n};\n\nHeard.propTypes = {\n  onReturn: PropTypes.func,\n  onSearch: PropTypes.func,\n\n  blueSearch: PropTypes.bool,\n};\n// let userHistory = useHistory()\nHeard.defaultProps = {\n  onSearch: () => { },\n  onReturn: () => { },\n\n  blueSearch: false,\n};\n\nexport default connect(\n  state => ({\n    menuNum: state.userReduce.menuNum,\n    petListArr: state.petReduce.petListArr,\n  }),\n  { setMenuNum, setSelectHardwareType, petDetailInfoFun }\n)(Heard)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/areaCode/imgArray.js",["771"],"export default {\n  ac: require('./countryFlag/flag_ac.png'),\n  ad: require('./countryFlag/flag_ad.png'),\n  ae: require('./countryFlag/flag_ae.png'),\n  af: require('./countryFlag/flag_af.png'),\n  ag: require('./countryFlag/flag_ag.png'),\n  ai: require('./countryFlag/flag_ai.png'),\n  al: require('./countryFlag/flag_al.png'),\n  am: require('./countryFlag/flag_am.png'),\n  an: require('./countryFlag/flag_an.png'),\n  ao: require('./countryFlag/flag_ao.png'),\n  aq: require('./countryFlag/flag_aq.png'),\n  ar: require('./countryFlag/flag_ar.png'),\n  as: require('./countryFlag/flag_as.png'),\n  at: require('./countryFlag/flag_at.png'),\n  au: require('./countryFlag/flag_au.png'),\n  aw: require('./countryFlag/flag_aw.png'),\n  ax: require('./countryFlag/flag_ax.png'),\n  az: require('./countryFlag/flag_az.png'),\n  ba: require('./countryFlag/flag_ba.png'),\n  bb: require('./countryFlag/flag_bb.png'),\n  bd: require('./countryFlag/flag_bd.png'),\n  be: require('./countryFlag/flag_be.png'),\n  bf: require('./countryFlag/flag_bf.png'),\n  bg: require('./countryFlag/flag_bg.png'),\n  bh: require('./countryFlag/flag_bh.png'),\n  bi: require('./countryFlag/flag_bi.png'),\n  bj: require('./countryFlag/flag_bj.png'),\n  bl: require('./countryFlag/flag_bl.png'),\n  bm: require('./countryFlag/flag_bm.png'),\n  bn: require('./countryFlag/flag_bn.png'),\n  bo: require('./countryFlag/flag_bo.png'),\n  bq: require('./countryFlag/flag_bq.png'),\n  br: require('./countryFlag/flag_br.png'),\n  bs: require('./countryFlag/flag_bs.png'),\n  bt: require('./countryFlag/flag_bt.png'),\n  bv: require('./countryFlag/flag_bv.png'),\n  bw: require('./countryFlag/flag_bw.png'),\n  by: require('./countryFlag/flag_by.png'),\n  bz: require('./countryFlag/flag_bz.png'),\n  ca: require('./countryFlag/flag_ca.png'),\n  cc: require('./countryFlag/flag_cc.png'),\n  cd: require('./countryFlag/flag_cd.png'),\n  cf: require('./countryFlag/flag_cf.png'),\n  cg: require('./countryFlag/flag_cg.png'),\n  ch: require('./countryFlag/flag_ch.png'),\n  ci: require('./countryFlag/flag_ci.png'),\n  ck: require('./countryFlag/flag_ck.png'),\n  cl: require('./countryFlag/flag_cl.png'),\n  cm: require('./countryFlag/flag_cm.png'),\n  cn: require('./countryFlag/flag_cn.png'),\n  co: require('./countryFlag/flag_co.png'),\n  cr: require('./countryFlag/flag_cr.png'),\n  cu: require('./countryFlag/flag_cu.png'),\n  cv: require('./countryFlag/flag_cv.png'),\n  cw: require('./countryFlag/flag_cw.png'),\n  cx: require('./countryFlag/flag_cx.png'),\n  cy: require('./countryFlag/flag_cy.png'),\n  cz: require('./countryFlag/flag_cz.png'),\n  de: require('./countryFlag/flag_de.png'),\n  dj: require('./countryFlag/flag_dj.png'),\n  dk: require('./countryFlag/flag_dk.png'),\n  dm: require('./countryFlag/flag_dm.png'),\n  do: require('./countryFlag/flag_do.png'),\n  dz: require('./countryFlag/flag_dz.png'),\n  ec: require('./countryFlag/flag_ec.png'),\n  ee: require('./countryFlag/flag_ee.png'),\n  eg: require('./countryFlag/flag_eg.png'),\n  eh: require('./countryFlag/flag_eh.png'),\n  er: require('./countryFlag/flag_er.png'),\n  es: require('./countryFlag/flag_es.png'),\n  et: require('./countryFlag/flag_et.png'),\n  fi: require('./countryFlag/flag_fi.png'),\n  fj: require('./countryFlag/flag_fj.png'),\n  fk: require('./countryFlag/flag_fk.png'),\n  fm: require('./countryFlag/flag_fm.png'),\n  fo: require('./countryFlag/flag_fo.png'),\n  fr: require('./countryFlag/flag_fr.png'),\n  fx: require('./countryFlag/flag_fx.png'),\n  ga: require('./countryFlag/flag_ga.png'),\n  gb: require('./countryFlag/flag_gb.png'),\n  gd: require('./countryFlag/flag_gd.png'),\n  ge: require('./countryFlag/flag_ge.png'),\n  gf: require('./countryFlag/flag_gf.png'),\n  gg: require('./countryFlag/flag_gg.png'),\n  gh: require('./countryFlag/flag_gh.png'),\n  gi: require('./countryFlag/flag_gi.png'),\n  gl: require('./countryFlag/flag_gl.png'),\n  gm: require('./countryFlag/flag_gm.png'),\n  gn: require('./countryFlag/flag_gn.png'),\n  gp: require('./countryFlag/flag_gp.png'),\n  gq: require('./countryFlag/flag_gq.png'),\n  gr: require('./countryFlag/flag_gr.png'),\n  gs: require('./countryFlag/flag_gs.png'),\n  gt: require('./countryFlag/flag_gt.png'),\n  gu: require('./countryFlag/flag_gu.png'),\n  gw: require('./countryFlag/flag_gw.png'),\n  gy: require('./countryFlag/flag_gy.png'),\n  hk: require('./countryFlag/flag_hk.png'),\n  hm: require('./countryFlag/flag_hm.png'),\n  hn: require('./countryFlag/flag_hn.png'),\n  hr: require('./countryFlag/flag_hr.png'),\n  ht: require('./countryFlag/flag_ht.png'),\n  hu: require('./countryFlag/flag_hu.png'),\n  id: require('./countryFlag/flag_id.png'),\n  ie: require('./countryFlag/flag_ie.png'),\n  il: require('./countryFlag/flag_il.png'),\n  im: require('./countryFlag/flag_im.png'),\n  in: require('./countryFlag/flag_in.png'),\n  io: require('./countryFlag/flag_io.png'),\n  iq: require('./countryFlag/flag_iq.png'),\n  ir: require('./countryFlag/flag_ir.png'),\n  is: require('./countryFlag/flag_is.png'),\n  it: require('./countryFlag/flag_it.png'),\n  je: require('./countryFlag/flag_je.png'),\n  jm: require('./countryFlag/flag_jm.png'),\n  jo: require('./countryFlag/flag_jo.png'),\n  jp: require('./countryFlag/flag_jp.png'),\n  ke: require('./countryFlag/flag_ke.png'),\n  kg: require('./countryFlag/flag_kg.png'),\n  kh: require('./countryFlag/flag_kh.png'),\n  ki: require('./countryFlag/flag_ki.png'),\n  km: require('./countryFlag/flag_km.png'),\n  kn: require('./countryFlag/flag_kn.png'),\n  kp: require('./countryFlag/flag_kp.png'),\n  kr: require('./countryFlag/flag_kr.png'),\n  kw: require('./countryFlag/flag_kw.png'),\n  ky: require('./countryFlag/flag_ky.png'),\n  kz: require('./countryFlag/flag_kz.png'),\n  la: require('./countryFlag/flag_la.png'),\n  lb: require('./countryFlag/flag_lb.png'),\n  lc: require('./countryFlag/flag_lc.png'),\n  li: require('./countryFlag/flag_li.png'),\n  lk: require('./countryFlag/flag_lk.png'),\n  lr: require('./countryFlag/flag_lr.png'),\n  ls: require('./countryFlag/flag_ls.png'),\n  lt: require('./countryFlag/flag_lt.png'),\n  lu: require('./countryFlag/flag_lu.png'),\n  lv: require('./countryFlag/flag_lv.png'),\n  ly: require('./countryFlag/flag_ly.png'),\n  ma: require('./countryFlag/flag_ma.png'),\n  mc: require('./countryFlag/flag_mc.png'),\n  md: require('./countryFlag/flag_md.png'),\n  me: require('./countryFlag/flag_me.png'),\n  mf: require('./countryFlag/flag_mf.png'),\n  mg: require('./countryFlag/flag_mg.png'),\n  mh: require('./countryFlag/flag_mh.png'),\n  mk: require('./countryFlag/flag_mk.png'),\n  ml: require('./countryFlag/flag_ml.png'),\n  mm: require('./countryFlag/flag_mm.png'),\n  mn: require('./countryFlag/flag_mn.png'),\n  mo: require('./countryFlag/flag_mo.png'),\n  mp: require('./countryFlag/flag_mp.png'),\n  mq: require('./countryFlag/flag_mq.png'),\n  mr: require('./countryFlag/flag_mr.png'),\n  ms: require('./countryFlag/flag_ms.png'),\n  mt: require('./countryFlag/flag_mt.png'),\n  mu: require('./countryFlag/flag_mu.png'),\n  mv: require('./countryFlag/flag_mv.png'),\n  mw: require('./countryFlag/flag_mw.png'),\n  mx: require('./countryFlag/flag_mx.png'),\n  my: require('./countryFlag/flag_my.png'),\n  mz: require('./countryFlag/flag_mz.png'),\n  na: require('./countryFlag/flag_na.png'),\n  nc: require('./countryFlag/flag_nc.png'),\n  ne: require('./countryFlag/flag_ne.png'),\n  nf: require('./countryFlag/flag_nf.png'),\n  ng: require('./countryFlag/flag_ng.png'),\n  ni: require('./countryFlag/flag_ni.png'),\n  nl: require('./countryFlag/flag_nl.png'),\n  no: require('./countryFlag/flag_no.png'),\n  np: require('./countryFlag/flag_np.png'),\n  nr: require('./countryFlag/flag_nr.png'),\n  nu: require('./countryFlag/flag_nu.png'),\n  nz: require('./countryFlag/flag_nz.png'),\n  om: require('./countryFlag/flag_om.png'),\n  pa: require('./countryFlag/flag_pa.png'),\n  pe: require('./countryFlag/flag_pe.png'),\n  pf: require('./countryFlag/flag_pf.png'),\n  pg: require('./countryFlag/flag_pg.png'),\n  ph: require('./countryFlag/flag_ph.png'),\n  pk: require('./countryFlag/flag_pk.png'),\n  pl: require('./countryFlag/flag_pl.png'),\n  pm: require('./countryFlag/flag_pm.png'),\n  pn: require('./countryFlag/flag_pn.png'),\n  pr: require('./countryFlag/flag_pr.png'),\n  ps: require('./countryFlag/flag_ps.png'),\n  pt: require('./countryFlag/flag_pt.png'),\n  pw: require('./countryFlag/flag_pw.png'),\n  py: require('./countryFlag/flag_py.png'),\n  qa: require('./countryFlag/flag_qa.png'),\n  re: require('./countryFlag/flag_re.png'),\n  ro: require('./countryFlag/flag_ro.png'),\n  rs: require('./countryFlag/flag_rs.png'),\n  ru: require('./countryFlag/flag_ru.png'),\n  rw: require('./countryFlag/flag_rw.png'),\n  sa: require('./countryFlag/flag_sa.png'),\n  sb: require('./countryFlag/flag_sb.png'),\n  sc: require('./countryFlag/flag_sc.png'),\n  sd: require('./countryFlag/flag_sd.png'),\n  se: require('./countryFlag/flag_se.png'),\n  sg: require('./countryFlag/flag_sg.png'),\n  sh: require('./countryFlag/flag_sh.png'),\n  si: require('./countryFlag/flag_si.png'),\n  sj: require('./countryFlag/flag_sj.png'),\n  sk: require('./countryFlag/flag_sk.png'),\n  sl: require('./countryFlag/flag_sl.png'),\n  sm: require('./countryFlag/flag_sm.png'),\n  sn: require('./countryFlag/flag_sn.png'),\n  so: require('./countryFlag/flag_so.png'),\n  sr: require('./countryFlag/flag_sr.png'),\n  ss: require('./countryFlag/flag_ss.png'),\n  st: require('./countryFlag/flag_st.png'),\n  sv: require('./countryFlag/flag_sv.png'),\n  sx: require('./countryFlag/flag_sx.png'),\n  sy: require('./countryFlag/flag_sy.png'),\n  sz: require('./countryFlag/flag_sz.png'),\n  tc: require('./countryFlag/flag_tc.png'),\n  td: require('./countryFlag/flag_td.png'),\n  tf: require('./countryFlag/flag_tf.png'),\n  tg: require('./countryFlag/flag_tg.png'),\n  th: require('./countryFlag/flag_th.png'),\n  tj: require('./countryFlag/flag_tj.png'),\n  tk: require('./countryFlag/flag_tk.png'),\n  tl: require('./countryFlag/flag_tl.png'),\n  tm: require('./countryFlag/flag_tm.png'),\n  tn: require('./countryFlag/flag_tn.png'),\n  to: require('./countryFlag/flag_to.png'),\n  tr: require('./countryFlag/flag_tr.png'),\n  tt: require('./countryFlag/flag_tt.png'),\n  tv: require('./countryFlag/flag_tv.png'),\n  tw: require('./countryFlag/flag_tw.png'),\n  tz: require('./countryFlag/flag_tz.png'),\n  ua: require('./countryFlag/flag_ua.png'),\n  ug: require('./countryFlag/flag_ug.png'),\n  um: require('./countryFlag/flag_um.png'),\n  us: require('./countryFlag/flag_us.png'),\n  uy: require('./countryFlag/flag_uy.png'),\n  uz: require('./countryFlag/flag_uz.png'),\n  va: require('./countryFlag/flag_va.png'),\n  vc: require('./countryFlag/flag_vc.png'),\n  ve: require('./countryFlag/flag_ve.png'),\n  vg: require('./countryFlag/flag_vg.png'),\n  vi: require('./countryFlag/flag_vi.png'),\n  vn: require('./countryFlag/flag_vn.png'),\n  vu: require('./countryFlag/flag_vu.png'),\n  wf: require('./countryFlag/flag_wf.png'),\n  ws: require('./countryFlag/flag_ws.png'),\n  xk: require('./countryFlag/flag_xk.png'),\n  ye: require('./countryFlag/flag_ye.png'),\n  yt: require('./countryFlag/flag_yt.png'),\n  yu: require('./countryFlag/flag_yu.png'),\n  za: require('./countryFlag/flag_za.png'),\n  zm: require('./countryFlag/flag_zm.png'),\n  zw: require('./countryFlag/flag_zw.png'),\n};\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/areaCode/country.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/axios/http.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/AddDevice.jsx",["772","773"],"import React, { useState, useEffect } from 'react'\nimport { message } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport biggieHome from './../../assets/img/searchType-biggieHome.png'\nimport biggiePro from './../../assets/img/searchType-biggiePro.png'\nimport mellaHome from './../../assets/img/searchType-home.png'\nimport mellaPro from './../../assets/img/searchType-mellaPro.png'\nimport maeBowl from './../../assets/img/searchType-maeBowl.png'\nimport other from './../../assets/img/searchType-other.png'\nimport possum from './../../assets/img/searchType-possum.png'\nimport rfid from './../../assets/img/searchType-rfid.png'\nimport redclose from '../../assets/img/redclose.png'\n\nimport electronStore from '../../utils/electronStore';\nimport { mTop, px, MTop } from '../../utils/px';\n\nimport { connect } from 'react-redux'\nimport { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList } from '../../store/actions';\nimport PropTypes from 'prop-types';\n\nimport './mainbody.less';\n\nlet storage = window.localStorage;\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\n  //是否有底座设备\n  const [noUSB, setNoUSB] = useState(false)\n  //设备列表\n  const [devicesList, setDevicesList] = useState([])\n  //选择的设备\n  const [selectDevice, setSelectDevice] = useState(null)\n  //重命名\n  const [reName, setReName] = useState('')\n  //房间号\n  const [examRoom, setExamRoom] = useState('')\n  //已经保存过的设备的macid\n  const [saveDeviceMac, setSaveDeviceMac] = useState([])\n  //顶部文本\n  const [topText, setTopText] = useState(' Pair Device')\n\n\n\n  const addDevice = () => {\n    //从redux拿到列表中的所有硬件设备 hardwareList\n    console.log('hardwareList', hardwareList);\n    //拿到硬件的macid 类型 名称 房间号\n    console.log('selectDevice', selectDevice);\n    let sameFlog = hardwareList.some((item, index) => {\n      return item.type === selectDevice.deviceType\n    })\n    let hardwareArr = [].concat(hardwareList)\n    let { deviceType, macId, name } = selectDevice\n    let newDevice = {\n      name: reName || name,\n      mac: macId,\n      deviceType,\n      examRoom: examRoom || '',\n    }\n    console.log('newDevice', newDevice);\n    if (sameFlog) {\n      //相同就代表有这个硬件类型,可以直接去push\n\n      for (let i = 0; i < hardwareArr.length; i++) {\n        if (hardwareArr[i].type === selectDevice.deviceType) {\n          hardwareArr[i].devices.push(newDevice)\n          break\n        }\n      }\n\n    } else {\n      //没有就要新建一个硬件类型\n      let json = {\n        type: selectDevice.deviceType,\n        devices: [newDevice]\n      }\n      hardwareArr.push(json)\n    }\n    setReName('')\n    setExamRoom('')\n    setHardwareList(hardwareArr)\n\n    return newDevice\n\n\n  }\n\n  const body = () => {\n\n    if (selectDevice) {\n      return <div className=\"addDevice1 flex\">\n        <div className=\"addDeviceTop flex\">\n          <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\n            {`this ${selectDevice.name} device?`}</div>\n\n          <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\n            {`SN: ${selectDevice.macId}`}</div>\n\n\n          <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={reName}\n              onChange={(value) => {\n                setReName(value.target.value)\n\n              }}\n              placeholder={`${selectDevice.name} Device Name`}\n            />\n          </div>\n          <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\n            <input type=\"text\" style={{ height: px(45) }}\n              value={examRoom}\n              onChange={(value) => {\n                setExamRoom(value.target.value)\n\n              }}\n              placeholder={`Exam Room Name`}\n            />\n          </div>\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\n            on the Exam Room. Write<br /> the name\n            on the sticker provided so it is easy\n            to select<br /> your device in the future.</div>\n        </div>\n        <div className=\"addDeviceFoot flex\">\n          <div className=\"btn\"\n            onClick={() => {\n              addDevice()\n              setSelectDevice(null)\n              setSelectHardwareType('add')\n\n            }}\n          >\n            <p className='btnText'>Add Another Device</p>\n          </div>\n          <div className=\"btn\"\n            onClick={() => {\n              let newDevice = addDevice()\n              setSelectHardwareType(selectDevice.deviceType)\n\n\n              electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\n              setSelectDevice(null)\n            }}\n          >\n            <p className='btnText'>Finish</p>\n          </div>\n        </div>\n\n\n      </div>\n    } else {\n      if (noUSB) {\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\n\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\n        </div>\n      } else {\n        if (devicesList.length === 0) {\n          let options = (val) => {\n            let arr = []\n            if (val === 1) {\n              arr = [mellaPro, mellaHome, biggiePro, biggieHome, rfid]\n            } else {\n              arr = [possum, maeBowl, other]\n            }\n            let option = arr.map((item, index) => {\n              let imgWidth = px(80)\n              imgWidth = index === 2 ? px(65) : imgWidth\n              return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\n                <div className=\"searchType-item\" key={index} >\n                  <img src={item} alt=\"\" width={imgWidth} />\n                </div>\n              </li>)\n            })\n            return (\n              <ul>\n                {option}\n              </ul>\n            )\n          }\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\n\n\n            <div className=\"addDeviceContent\">\n              <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\n                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\n                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                  <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\n                </div>\n              </div>\n              <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\n                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\n              </div>\n              <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\n                <div className=\"btnText\">\n                  Scan For Devices\n                </div>\n              </div>\n              <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\n                Or\n              </div>\n              <div className=\"select\">\n                Select device type to\n              </div>\n              <div className=\"add\">\n                add manually\n              </div>\n\n              <div className=\"item\">\n                {options(1)}\n                {options(2)}\n              </div>\n            </div>\n\n            {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\n\n                            <p>\n                                {'searching...'}\n                            </p>\n                        </div> */}\n          </div>\n        } else {\n          let options = devicesList.map((item, index) => {\n\n            let flog = saveDeviceMac.some((device, index) => {\n              return device === item.macId\n            })\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\n            return <li\n              className='flex'\n              style={{ marginBottom: px(20) }}\n              key={`${index}`}\n              onClick={() => {\n                if (!flog) {\n                  setSelectDevice(item)\n\n                } else {\n                  message.destroy();\n                  message.error('This device has already been added')\n                }\n\n              }}\n            >\n\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\n\n            </li>\n          })\n          return <div className='deviceList ' >\n            <ul>\n              {options}\n            </ul>\n          </div>\n        }\n      }\n    }\n\n  }\n\n  //初始化\n  useEffect(() => {\n    setNoUSB(false)\n    setDevicesList([])\n    setSelectDevice(null)\n    setReName('')\n    setSaveDeviceMac([])\n    setTopText(' Pair Device')\n    //组件渲染完毕后要先清空广播的硬件信息\n    setReceiveBroadcastHardwareInfoFun({\n      deviceType: '',\n      macId: '',\n      name: ''\n    })\n  }, [])\n  useEffect(() => {\n\n    if (hardwareList.length > 0) {\n      let saveDeviceMac = []\n      for (let i = 0; i < hardwareList.length; i++) {\n        const element = hardwareList[i];\n        for (let j = 0; j < element.devices.length; j++) {\n          const device = element.devices[j];\n          saveDeviceMac.push(device.mac)\n        }\n      }\n      setSaveDeviceMac(saveDeviceMac)\n\n    }\n  }, [hardwareList])\n  useEffect(() => {\n    if (!selectDevice) {\n      setTopText(' Pair Device')\n    } else {\n      setTopText('Device Connected')\n    }\n\n  }, [selectDevice])\n  useEffect(() => {\n    setNoUSB(!isHaveUsbDevice)\n  }, [isHaveUsbDevice])\n  useEffect(() => {\n    let sameFlog = devicesList.some((device, index) => {\n      return device.macId === receiveBroadcastHardwareInfo.macId\n    })\n    if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\n      return\n    }\n    console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\n    let deviceArr = [].concat(devicesList)\n    deviceArr.push(receiveBroadcastHardwareInfo)\n    setDevicesList(deviceArr)\n\n\n\n  }, [receiveBroadcastHardwareInfo])\n\n  return (\n    <div className='addDevice' style={{ height: bodyHeight }}>\n      <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\n        {topText}\n      </div>\n\n      {body()}\n    </div >\n  )\n}\n\n\nAddDevice.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n//默认值\nAddDevice.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: []\n}\nexport default connect(\n  state => ({\n    hardwareReducer: state.hardwareReduce,\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\n    hardwareList: state.hardwareReduce.hardwareList,\n  }),\n  { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\n)(AddDevice)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/hardWareTypeUI.jsx",["774"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/HardAndPetsUI.jsx",["775","776"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/enrolledPlan/index.jsx",["777","778","779","780","781"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Checkbox, Layout, List, Avatar, Modal, Form, Input } from \"antd\";\n\nimport catFood from '../../assets/img/catFood.png';\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\nimport electronStore from \"../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst EnrolledPlan = ({ petMessage, hardwareMessage, bodyHeight,setSelectHardwareType }) => {\n  const { Content, Header } = Layout;\n  let history = useHistory();\n  const [form] = Form.useForm();\n  const [nextType, setNextType] = useState('selectIllness');//切换当前页面的组件。selectIllness：选择疾病；createPlan:创建计划；planInfo:计划详情。\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const options = [\n    {\n      label: 'Hepatic Disease',\n      value: '1',\n    },\n    {\n      label: 'Renal Disease',\n      value: '2',\n    },\n    {\n      label: 'Osteoarthritis / Mobility / Joint',\n      value: '3',\n    },\n  ];\n  const data = [\n    {\n      title: 'Title 1',\n    },\n    {\n      title: 'Title 2',\n    },\n    {\n      title: 'Title 3',\n    },\n    {\n      title: 'Title 4',\n    },\n  ];\n  //表单提交\n  const onFinish = (values) => {\n    console.log(values);\n    setSelectHardwareType(\"mabel\");\n  };\n  //选择的疾病\n  const onChange = (checkedValues) => {\n    console.log('checked = ', checkedValues);\n  };\n  //切换头部文字\n  const topTitle = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return 'Prescription Diet Matrix';\n      case 'createPlan':\n        return 'Prescription Diet Recommendations'\n      case 'planInfo':\n        return 'Feeding Plan'\n      default:\n        break;\n    }\n  }\n  //切换中间组件\n  const middleContent = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <div className=\"selectIllness\">\n            <Checkbox.Group\n              options={options}\n              onChange={onChange}\n              className=\"checkboxGroup\"\n            />\n          </div>\n        );\n      case 'createPlan':\n        return (\n          <div className=\"recommendMessageBox\">\n            <div className=\"leftBox\">\n              <img src={catFood} alt=\"\" />\n            </div>\n            <div className=\"rightBox\">\n              <p>Hill's Science Diet Adult 11+ Chicken Recipe cat food</p>\n              <p>Fluffy's Feeding Plan:</p>\n              <div className=\"descriptionTitle\">\n                <p>\n                  Based on Fluffy's BCS of 7, age 14, and osteoarthritis, we recommend feeding her 1 1/8 cups of kibble per day.\n                </p>\n                <p>443 Calories per cup</p>\n              </div>\n            </div>\n          </div>\n        )\n      case 'planInfo':\n        return (\n          <div className=\"planList\">\n            <List\n              dataSource={data}\n              renderItem={(item) => (\n                <div className=\"listBox\">\n                  <List.Item className=\"listItem\">\n                    <div className=\"item\">\n                      <div className=\"top\">\n                        <p>{item.title}</p>\n                        <p>123</p>\n                      </div>\n                      <div className=\"bottom\">\n                        <p>Weight</p>\n                        <p>465</p>\n                      </div>\n                    </div>\n                  </List.Item>\n                </div>\n              )}\n            />\n          </div>\n        );\n      default:\n        break;\n    }\n  }\n  //切换底部按钮\n  const bottomBtn = () => {\n    switch (nextType) {\n      case 'selectIllness':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => {\n              electronStore.set(`${petMessage.petId}-planType`, true);\n              setNextType('createPlan');\n            }}\n          >\n            Set Recommendations\n          </Button>\n        );\n      case 'createPlan':\n        return (\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            onClick={() => { setNextType('planInfo') }}\n          >\n            Create Feeding Plan\n          </Button>\n        );\n      case 'planInfo':\n        return (\n          <>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              onClick={() => { }}\n              className=\"itemBtn\"\n            >\n              Email\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { }}\n            >\n              Print\n            </Button>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              className=\"itemBtn\"\n              onClick={() => { setIsModalVisible(true) }}\n            >\n              Send to Mabel\n            </Button>\n          </>\n        );\n      default:\n        break;\n    }\n  }\n  //展示宠物照片\n  const shoePetPicture = () => {\n    if (_.isEmpty(petMessage?.url)) {\n      switch (petPicture(petMessage?.petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return petMessage?.url\n    }\n  }\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(petMessage?.firstName) && _.isEmpty(petMessage?.lastName)) {\n      return \"unknown\";\n    } else {\n      return petMessage?.firstName + \" \" + petMessage?.lastName;\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <Layout className=\"planContentBox\" style={{ height: bodyHeight }}>\n      <div className=\"heardTitleBox\">\n        <p>{topTitle()}</p>\n      </div>\n      <div className=\"petMessageBox\">\n        <div className=\"left\">\n          <Avatar src={shoePetPicture()} size={64} />\n          <div className=\"petMsg\">\n            <p>{petMessage.petName ? petMessage?.petName : 'unknown'}</p>\n            <p>{ownerName()}</p>\n          </div>\n        </div>\n        <div className=\"right\">\n          <p>{calculateAge(petMessage?.birthday) === 'unknown' ? 'unknown' : `${calculateAge(petMessage?.birthday)} Years Old`}</p>\n          <p>{petMessage?.weight} lbs</p>\n          <p>{petMessage?.gender === 0 ? 'Male' : 'Female'}</p>\n          <p>{petMessage?.breedName}</p>\n        </div>\n      </div>\n      <div className=\"middleBox\">\n        {middleContent()}\n      </div>\n      <div className=\"btnBox\">\n        {bottomBtn()}\n      </div>\n      <Modal\n        title=\"Send Feeding Plan to Mabel\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        destroyOnClose\n        width={300}\n        className=\"planModal\"\n      >\n        <div className=\"modalContentBox\">\n          <div className=\"description\">\n            <p>Enter pet parent's email associated with their Mella Health App.</p>\n          </div>\n          <div className=\"formBox\">\n            <Form form={form} onFinish={onFinish} preserve={false}>\n              <Form.Item\n                name=\"mellaId\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n              >\n                <Input />\n              </Form.Item>\n              <Form.Item>\n                <Button type=\"primary\" shape=\"round\" block htmlType=\"submit\">\n                  Send\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </div>\n      </Modal>\n    </Layout>\n  );\n};\n\nEnrolledPlan.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType,\n  }\n)(EnrolledPlan);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/userAction.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/petAction.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/index.jsx",["782","783","784","785"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Measurement from \"./components/measurement\";\nimport MeasuredData from \"./components/measuredData\";\nimport HeaderItem from \"./components/headerItem\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport { px } from \"../../utils/px\";\nimport _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst TemperaturePage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [vibible, setVibible] = useState(false);\n\n  //测量温度中的页面变化\n  const changePage = () => {\n    // return <MeasuredData />\n    switch (mellaConnectStatus) {\n      case \"isMeasuring\":\n        return <Measurement />;\n      case \"complete\":\n        return <MeasuredData />;\n      case \"connected\":\n        return <LinkEquipment />;\n      case \"disconnected\":\n        return <LinkEquipment />;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Layout className=\"homeBox\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\">\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {_.isEmpty(petMessage) ? (\n          <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100 }}>\n            <p className=\"chackPatientTitle\">Select a patient</p>\n          </div>\n        ) : (\n          changePage()\n        )}\n      </Layout>\n    </>\n  );\n};\n\nTemperaturePage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(TemperaturePage);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/hardwareAction.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mabelPage/index.jsx",["786","787","788"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport LinkEquipment from \"./components/linkEquipment\";\n\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport PropTypes from 'prop-types';\n\nimport \"./index.less\";\n\nconst { Content, Header } = Layout;\nconst MabelPage = ({ petMessage, hardwareMessage, bodyHeight }) => {\n\n  return (\n    <Layout className=\"mabelPageBox\" style={{ height: bodyHeight }}>\n      <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\" style={{ height: bodyHeight - 100 }}>\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"mabelPagecontentBox\"}>\n          <LinkEquipment />\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nMabelPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(MabelPage);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/index.jsx",["789","790","791"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/combineScales/index.jsx",["792","793","794","795","796","797"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Avatar,\n  Button,\n  Card,\n  Space,\n  message,\n  Input,\n  Modal,\n} from \"antd\";\nimport {\n  CheckCircleFilled,\n  ExclamationCircleOutlined,\n} from \"@ant-design/icons\";\nimport {\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Meta } = Card;\nconst { confirm } = Modal;\nconst CombineScales = ({\n  petMessage,\n  hardwareMessage,\n  userMessage,\n  setMenuNum,\n  selectHardwareInfoFun,\n  selectHardwareList,\n}) => {\n  let { hardwareList } = hardwareMessage;\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\n  const [confirmType, setConfirmType] = useState(false); //确认选择\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\n\n  //点击卡片选择效果\n  const onClick = (index, data) => {\n    console.log(data);\n    let changeClassName = document.getElementById(index).classList;\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\n    let cardClassNametype = document\n      .getElementById(index)\n      .classList.contains(\"cardBoxClick\");\n    cardClassNametype\n      ? changeClassName.remove(\"cardBoxClick\")\n      : changeClassName.add(\"cardBoxClick\");\n    cardClassNametype\n      ? (iconClassName.style.display = \"none\")\n      : (iconClassName.style.display = \"\");\n    let oldData = checkHardwareList;\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\n  };\n  //确认选择两个体重秤\n  const onChangeScales = () => {\n    if (_.size(checkHardwareList) > 1) {\n      setConfirmType(true);\n    } else {\n      message.error({\n        content: \"Please choose more than two scales\",\n        style: {\n          marginTop: \"20vh\",\n        },\n      });\n    }\n  };\n  //保存用户更改的名字\n  const saveChangeName = (e) => {\n    setSaveName(e.target.value);\n  };\n\n  //跳转准备测量\n  const startMeasuring = () => {\n    confirm({\n      title: \"Are you sure to incorporate the body fat scale?\",\n      icon: <ExclamationCircleOutlined />,\n      style: {\n        marginTop: \"20vh\",\n      },\n      width: 480,\n      onOk() {\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\n        let newData = {\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\n          mac: mac,\n          deviceType: \"biggie\",\n          examRoom: \"\",\n        };\n        let newHardwareList = hardwareList;\n        newHardwareList[1].devices.push({ ...newData });\n        selectHardwareList(newHardwareList);\n        selectHardwareInfoFun(newData);\n        setMenuNum(\"1\");\n      },\n    });\n  };\n\n  useEffect(() => {\n    let newData = [];\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\n      if (item.mac.indexOf(\"/\") === -1) {\n        newData.push(item);\n      }\n    });\n    setBiggieList(newData);\n    return () => { };\n  }, []);\n\n  return (\n    <>\n      <Layout className=\"mergePage\">\n        <Header className=\"mergeHeaderBox\">\n          <span className=\"headerTitle\">\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\n          </span>\n        </Header>\n        <Content className=\"combineContentBox\">\n          <div>\n            <div className=\"tipTitleBox\">\n              {!confirmType ? (\n                <span>\n                  Select the scales you'd\n                  <br />\n                  like to combine\n                </span>\n              ) : (\n                <span>\n                  These two scales are now combined.\n                  <br />\n                  Please give this combination a name\n                </span>\n              )}\n            </div>\n            {confirmType ? (\n              <div className=\"asOneCardBox\">\n                <Space>\n                  {_.map(checkHardwareList, (item, index) => {\n                    return (\n                      <Card className=\"asOneCard\">\n                        <Meta\n                          avatar={<Avatar src={scaleImage} size={53} />}\n                          description={\n                            <div style={{ display: \"grid\" }}>\n                              <span>Device Name:{item.name}</span>\n                              <span>\n                                {item.deviceType === \"biggie\"\n                                  ? \"Biggie Pro Scale\"\n                                  : \"Biggie Home Scale\"}\n                              </span>\n                              <span>SN:{item.mac}</span>\n                            </div>\n                          }\n                        />\n                      </Card>\n                    );\n                  })}\n                </Space>\n                <div className=\"acOneImageBox\">\n                  <img src={combinedscales} />\n                </div>\n              </div>\n            ) : (\n              <div className=\"selectScalesBox\">\n                <div>\n                  {_.map(biggieList, (item, index) => {\n                    return (\n                      <Card\n                        className=\"cardBox\"\n                        hoverable\n                        onClick={() => onClick(`${index}`, item)}\n                        id={`${index}`}\n                        key={index}\n                      >\n                        <div className=\"cardBodyBox\">\n                          <Meta\n                            avatar={<Avatar src={scaleImage} size={53} />}\n                            description={\n                              <div style={{ display: \"grid\" }}>\n                                <span>Device Name:{item.name}</span>\n                                <span>\n                                  {item.deviceType === \"biggie\"\n                                    ? \"Biggie Pro Scale\"\n                                    : \"Biggie Home Scale\"}\n                                </span>\n                                <span>SN:{item.mac}</span>\n                              </div>\n                            }\n                          />\n                          <CheckCircleFilled\n                            id={`${\"icon\" + index}`}\n                            style={{\n                              color: \"#5cbbe0\",\n                              fontSize: \"20px\",\n                              display: \"none\",\n                            }}\n                          />\n                        </div>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            {confirmType ? (\n              <>\n                <div className=\"inputBox\">\n                  <Input\n                    placeholder=\"Combined Scale Name\"\n                    className=\"inputName\"\n                    maxLength={25}\n                    onChange={saveChangeName}\n                  />\n                </div>\n                <div className=\"scalesBtnBox\">\n                  <Button\n                    type=\"primary\"\n                    className=\"scalesBtn\"\n                    shape=\"round\"\n                    onClick={() => startMeasuring()}\n                  >\n                    Save & Start Measuring\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <Space className=\"scalesBtnBox\">\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => setMenuNum(\"AddDevice\")}\n                >\n                  Add New Scale\n                </Button>\n                <Button\n                  type=\"primary\"\n                  className=\"scalesBtn\"\n                  shape=\"round\"\n                  onClick={() => onChangeScales()}\n                >\n                  Combine Scales\n                </Button>\n              </Space>\n            )}\n          </div>\n        </Content>\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n    userMessage: state.userReduce,\n  }),\n  {\n    setMenuNum,\n    selectHardwareInfoFun,\n    selectHardwareList,\n  }\n)(CombineScales);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/clinicalStudyPage/index.jsx",["798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835"],"import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { Layout, message, Input, Modal, Table, Popconfirm, Select } from \"antd\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nimport edit from \"./../../assets/images/edit.png\";\nimport del from \"./../../assets/images/del.png\";\nimport start from \"./../../assets/img/start.png\";\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\nimport placement_er from \"./../../assets/images/placement_er.png\";\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport { px, mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport UnassignModal from './../../components/UnassignModal/UnassignModal';\nimport SelectPet from \"../../components/selectPetModal\";\nimport AddPetModal from \"../../components/addPetModal\";\nimport {\n  addAllClinical,\n  deletePetExamByExamId,\n  getClinicalDataByExamId,\n  getPetExamAndClinicalByPetId,\n  getPetExamByDoctorId,\n  updatePetExam,\n  updatePetInfo,\n  addAndSavePetExam,\n  addDeskPet,\n} from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport { setTest } from \"../../store/actions\";\nimport ReactECharts from \"echarts-for-react\";\nimport propTypes from \"prop-types\";\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\n\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\nlet storage = window.localStorage;\n\nlet mellaMeasureNumCopy = 0;\n\n//定义echarts的数据个数\nconst { Option } = Select;\nlet saveHistoryTime = null;\nconst ClinicalStudy = ({\n  bodyHeight,\n  mellaConnectStatus,\n  mellaMeasureValue,\n  mellaMeasureNum,\n  petDetailInfo,\n  setTest,\n  biggieBodyWeight,\n  biggieUnit,\n}) => {\n  const [units, setUnits] = useState(\"\");\n  const [temperature, setTemp] = useState(0);\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\n  const [echarsData, setEcharsData] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [echarsData1, setEcharsData1] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\n    useState(\"\");\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\n  const [furLength, setFurLength] = useState(\"\");\n  const [heartRate, setHeartRate] = useState(\"\");\n  const [bloodPressure, setBloodPressure] = useState(\"\");\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\n  const [historyData, setHistoryData] = useState([]);//walk-in中未分配的数据\n  const [editRectal, setEditRectal] = useState(\"\");\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\n  const [editVisible, setEditVisible] = useState(false);\n  const [editId, setEditId] = useState(\"\");\n  const [editMemo, setEditMemo] = useState(\"\");\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\n  const [editFurLength, setEditFurLength] = useState(\"\");\n  const [tipSpin, setTipSpin] = useState(false);\n  const [tip, setTip] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [memo, setMemo] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(px(500));\n  const [WeightValue, setWeightValue] = useState('');\n  const echartsElement = useRef(null);\n  const clinicalRef = useRef(null);\n  const [assignVisible, setAssignVisible] = useState(false);\n  const [seleceEmergencies, setSeleceEmergencies] = useState({});\n  const [lastWorkplaceId, setLastLastWorkplaceId] = useState('');\n  const [selectPetVisible, setSelectPetVisible] = useState(false);//选择宠物弹窗显隐\n  const [addPetVisible, setAddPetVisible] = useState(false);//添加新宠物弹窗显隐\n  const [selectPetModalLoading, setSelectPetModalLoading] = useState(false);//分配宠物后调用接口加载\n  const [addPetModalLoading, setAddPetModalLoading] = useState(false);//添加新宠物调用接口加载\n  const [addPetId, setAddPetId] = useState('');//添加宠物成功后返回的宠物id\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //分辨率变化\n  const chartsBox = useCallback((node) => {\n    if (node !== null && echartsElement.current) {\n      setTimeout(() => {\n        echartsElement.current.getEchartsInstance().resize({ height: px(380) });\n      }, 1000)\n    }\n  }, [window.screen.availWidth]);\n  //窗口宽高变化\n  const resize = () => {\n    if (clinicalRef.current && clinicalRef.current.offsetWidth) {\n      setWindowWidth(clinicalRef.current.offsetWidth);\n    }\n  };\n  const addClinical = () => {\n    let emerData = [];\n    let { Eci, wen0, wen1 } = echarsData;\n    for (let i = 0; i < wen0.length; i++) {\n      const element = wen0[i];\n      let str = {\n        data0: element,\n        data1: wen1[i],\n      };\n      emerData.push(str);\n    }\n    saveHistoryTime && clearTimeout(saveHistoryTime);\n    saveHistoryTime = setTimeout(() => {\n      let BCS =\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\n      let respireatoryR =\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\n\n      let roomT =\n        roomTemperature === \"\"\n          ? null\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\n\n      let referenceT =\n        referenceRectalTemperature === \"\"\n          ? null\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\n\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\n\n      let petVitalId = 1;\n\n      let datas = {\n        temperature: parseFloat(temperature), //测量温度\n        roomTemperature: roomT, //室温\n        bodyConditionScore: BCS, //身体状况评分\n        heartRate: hrartR, //心率\n        respiratoryRate: respireatoryR, //呼吸率\n        referenceRectalTemperature: referenceT, //参考腹部温度\n        furLength: furL, //毛发长度\n        bloodPressure: bloodPressure, //血压\n        memo: notes,\n        petVitalTypeId: petVitalId,\n        clinicalDataEntityList: emerData,\n        anusTemperature: referenceT\n      };\n      if (storage.roleId === `1`) {\n        datas.userId = storage.userId;\n      } else {\n        datas.doctorId = storage.userId;\n        datas.userId = storage.userId;\n      }\n      let ubdateWeight = units === \"℉\" ? (parseFloat(WeightValue / 2)).toFixed(2) : parseFloat(WeightValue).toFixed(2);\n      let updatePetInfoData = {\n        weight: ubdateWeight\n      }\n      if (storage.lastOrganization) {\n        updatePetInfoData.organizationId = storage.lastOrganization\n      }\n\n      let { petId, isWalkIn } = petDetailInfo;\n      if (petId && !isWalkIn) {\n        datas.petId = petId;\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getHistory11(petDetailInfo.petId);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(\"upload failed\");\n          });\n      } else if (isWalkIn) {\n        addAllClinical(datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n              _getEmergencyHistory(1);\n            } else {\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            message.error(err);\n          });\n      }\n      if (WeightValue !== '' && !isWalkIn) {\n        updatePetInfo(petId, updatePetInfoData)\n          .then((res) => {\n            if (res.flag === true) {\n\n            } else {\n              message.error('Failed to update pet weight');\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }\n    }, 500);\n  };\n  const _getHistory11 = (petId) => {\n    let historys = [];\n    setLoading(true);\n    getPetExamAndClinicalByPetId(petId)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i];\n\n            let {\n              petId,\n              examId,\n              clinicalDatagroupId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n              modifiedTime,\n            } = data;\n\n            if (!clinicalDatagroupId) {\n              continue;\n            }\n            let Tem = temperature;\n            if (clinicalDataEntity) {\n              Tem = Tem || clinicalDataEntity.data0;\n            }\n            Tem = Tem ? Tem : 0;\n\n            let time = null;\n            if (\n              modifiedTime &&\n              `${modifiedTime}` !== \"\" &&\n              `${modifiedTime}` !== `undefined`\n            ) {\n              time = modifiedTime;\n            } else {\n              time = createTime;\n            }\n            let json = {\n              time,\n              Temp: Tem,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(json);\n          }\n          let historyData = [];\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i];\n            let {\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              examId,\n            } = history;\n            // console.log('--------', history.placement);\n            let placement = history.placement;\n            if (placement === null || placement === \"\") {\n              placement = 1;\n            }\n            let str = {\n              date: moment(history.time).format(\"MMM DD\"),\n              time: moment(history.time).format(\"hh:mm A\"),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              key: examId,\n            };\n            historyData.push(str);\n          }\n          // this.setState({\n          //     historyData\n          // })\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  //获取walk-in下未分配宠物的临床测试记录\n  const _getEmergencyHistory = (currPage) => {\n    let historys = [];\n    setLoading(true);\n    let data = {\n      pageSize: pageSize,\n      currPage: currPage,\n    }\n    getPetExamByDoctorId(storage.userId, data)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          setTotal(res.data.totalCount);\n          let datas = res.data.list;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let {\n              petId,\n              examId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              clinicalDatagroupId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n            } = datas[i];\n            let Tem = temperature;\n            try {\n              Tem = temperature || clinicalDataEntity.data0;\n            } catch (error) {\n              console.log(\"抛出的异常\", error);\n            }\n            let str = {\n              clinicalDatagroupId,\n              createTime,\n              date: moment(createTime).format(\"MMM DD\"),\n              time: moment(createTime).format(\"hh:mm A\"),\n              temp: parseInt(Tem * 10) / 10,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(str);\n          }\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = historys;\n          } else {\n            let oldArr = historyData;\n            let arr = historys;\n            newArr = [...oldArr, ...arr];\n          }\n          setHistoryData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const getOption = () => {\n    let option = {};\n    try {\n      let min, max;\n      if (units === \"℃\") {\n        min = 25;\n        max = 45;\n      } else {\n        min = 75;\n        max = 115;\n      }\n      let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci)\n        ? echarsData\n        : echarsData1;\n      option = {\n        color: [\"#81b22f\"],\n        tooltip: {\n          /*返回需要的信息*/\n          trigger: \"axis\",\n          triggerOn: \"mousemove\",\n          enterable: true,\n          formatter: function (param) {\n            var value = param[0].value;\n            // console.log('---valuez值', value, units);\n            if (\n              (units === \"℉\" && parseInt(value) <= 32) ||\n              (units === \"℃\" && parseInt(value) == 0)\n            ) {\n              return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:--</div>`;\n            }\n            return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\n              1\n            )}${units}</div>`;\n          },\n        },\n        xAxis: {\n          name: \"SPL\",\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\",\n          },\n          type: \"category\",\n          data: Eci,\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          // 设置X轴数据旋转倾斜\n          axisLabel: {\n            rotate: 0, // 旋转角度\n            interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\n          },\n        },\n        yAxis: {\n          name: \"temperature\",\n          type: \"value\",\n          min, // 设置y轴刻度的最小值\n          max, // 设置y轴刻度的最大值\n          splitNumber: 0, // 设置y轴刻度间隔个数\n          nameTextStyle: {\n            padding: [0, 0, 0, 8],\n            // backgroundColor: 'pink',\n            width: \"1200px\",\n            // fontSize: 20,\n            align: \"left\",\n          },\n\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        series: [\n          {\n            name: \"模拟数据\",\n            type: \"line\",\n            showSymbol: false,\n            hoverAnimation: false,\n            // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\n            data: wen0,\n            smooth: 0.5,\n            symbol: \"none\",\n            // itemStyle: {\n            //     normal: {\n\n            //     }\n            // }\n            lineStyle: {\n              // 系列级个性化折线样式\n              width: 2,\n              type: \"solid\",\n              color: {\n                type: \"linear\",\n                x: 0,\n                y: 1,\n                x2: 0,\n                y2: 0,\n                colorStops: [\n                  {\n                    offset: 0.5,\n                    color: \"#47C2ED\", // 0% 处的颜色  蓝\n                  },\n                  {\n                    offset: 1,\n                    color: \"#78D35D\", // 50% 处的颜色  绿\n                  },\n                  // {\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\n                  // }\n                ],\n                globalCoord: false, // 缺省为 false\n              },\n            },\n          },\n        ],\n      };\n    } catch (error) { }\n\n    return option;\n  };\n  const _status = () => {\n    let text = \"\",\n      unit = \"\",\n      temColor = \"\";\n    let Temp = parseFloat(temperature);\n    if (mellaConnectStatus === \"disconnected\") {\n      if (!showHistoryEchart) {\n        Temp = \"\";\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      } else {\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      }\n    } else if (mellaConnectStatus === \"connected\") {\n      Temp = \"\";\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n    } else {\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n      if (Temp > 15) {\n        unit = units;\n        if (Temp > 39) {\n          text = \"High\";\n          temColor = \"#E1206D\";\n        } else if (Temp < 31) {\n          text = \"Low\";\n          temColor = \"#47C2ED\";\n        } else {\n          text = \"Normal\";\n          temColor = \"#78D35D\";\n        }\n      }\n    }\n    let temp = null;\n\n    if (`${Temp}` !== \"NaN\" && Temp) {\n      temp =\n        units === \"℉\" ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1);\n    }\n    let lowFlog = false;\n    if (unit === \"℃\") {\n      if (temp < 24.8) {\n        lowFlog = true;\n      }\n    } else {\n      if (temp < 76.6) {\n        lowFlog = true;\n      }\n    }\n\n    return (\n      <div\n        className=\"Tem\"\n        style={{\n          color: temColor,\n          right: px(100),\n          bottom: mTop(120),\n          pointerEvents: \"none\",\n        }}\n      >\n        {mellaConnectStatus !== \"isMeasuring\" ? (\n          showHistoryEchart ? (\n            <>\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {units}\n                </sup>\n              </span>\n              <br />\n              {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\n\n              <span\n                style={{\n                  fontSize: px(32),\n                  color: \"#8a8a8a\",\n                  fontWeight: \"bold\",\n                }}\n              >{`History`}</span>\n            </>\n          ) : (\n            <>\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp < 3 && !temp ? null : temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {unit}\n                </sup>\n              </span>\n              <br />\n              <span style={{ fontSize: px(32), fontWeight: \"bold\" }}>\n                {text}\n              </span>\n            </>\n          )\n        ) : lowFlog ? (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {\"Low\"}\n            </span>\n            <br />\n          </>\n        ) : (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {temp}{\" \"}\n              <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>{unit}</sup>\n            </span>\n            <br />\n          </>\n        )}\n      </div>\n    );\n  };\n  const handleChange = (index) => {\n    console.log(\"---------\", index);\n    setFurLength(index);\n  };\n  //Exam Details内容\n  const _petCharacteristics = () => {\n    let placeholder = \"\";\n    switch (`${furLength}`) {\n      case \"1\":\n        placeholder = \"smooth\";\n        break;\n      case \"2\":\n        placeholder = \"short\";\n        break;\n      case \"3\":\n        placeholder = \"medium\";\n        break;\n      case \"4\":\n        placeholder = \"long\";\n        break;\n      default:\n        break;\n    }\n    return (\n      <div\n        className=\"petChaeacteristics\"\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\n      >\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Room Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={roomTemperature}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRoomTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Reference Rectal Temperature: </p>\n            <Input\n              className=\"inp\"\n              value={`${referenceRectalTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setReferenceRectalTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Body Condition Score: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bodyConditionScore}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBodyConditionScore(str);\n              }}\n              maxLength={8}\n            />\n          </div>\n          <div className=\"item\">\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              className=\"inpSelect\"\n              placeholder\n              onChange={handleChange}\n              value={placeholder}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${heartRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setHeartRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Blood Pressure: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bloodPressure}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBloodPressure(str);\n              }}\n              suffix={'mm'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${respiratoryRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRespiratoryRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            className=\"item\"\n          >\n            <p className=\"labelTitle\" style={{ width: '140px' }}>Weight:  </p>\n            <Input className='inp'\n              style={{ border: 'none', outline: 'medium' }}\n              value={WeightValue}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\n                setWeightValue(str);\n              }}\n              suffix={units === '℉' ? 'lb' : 'kg'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  //历史数据\n  const _history = () => {\n    const _del = (key, record) => {\n      deletePetExamByExamId(key)\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              const historyData1 = [...historyData];\n              setHistoryData(\n                historyData1.filter((item) => item.historyId !== key)\n              );\n            } else {\n              message.error('fail to delete!');\n            }\n          }\n        );\n    };\n    const _edit = (key, record) => {\n      let {\n        heartRate,\n        bloodPressure,\n        respiratoryRate,\n        referenceRectalTemperature,\n        roomTemperature,\n        bodyConditionScore,\n        furLength,\n        note,\n      } = record;\n      let editHeartRate =\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\n      let editBloodPressure =\n        bloodPressure !== null && bloodPressure !== undefined\n          ? bloodPressure\n          : \"\";\n      let editRespiratoryRate =\n        respiratoryRate !== null && respiratoryRate !== undefined\n          ? respiratoryRate\n          : \"\";\n      let editRectal =\n        referenceRectalTemperature !== null &&\n          referenceRectalTemperature !== undefined\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editRoomTemperature =\n        roomTemperature !== null && roomTemperature !== undefined\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editBodyConditionScore =\n        bodyConditionScore !== null && bodyConditionScore !== undefined\n          ? bodyConditionScore\n          : \"\";\n      let editFurLength = furLength;\n      let mome = note ? note : \"\";\n\n      console.log(\n        editRectal,\n        editRoomTemperature,\n        editHeartRate,\n        editBloodPressure,\n        editRespiratoryRate\n      );\n\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\n      setEditRectal(editRectal);\n      setEditRoomTemperature(editRoomTemperature);\n      setEditHeartRate(editHeartRate);\n      setEditBloodPressure(editBloodPressure);\n      setEditRespiratoryRate(editRespiratoryRate);\n      setEditVisible(true);\n      setEditId(key);\n      setEditMemo(record.note);\n      setEditBodyConditionScore(editBodyConditionScore);\n      setEditFurLength(editFurLength);\n      setMemo(mome);\n    };\n    const see = (id, record) => {\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      console.log(id, record);\n      setTip(\"data is loading\");\n      setTipSpin(true);\n      getClinicalDataByExamId(id)\n        .then((res) => {\n          setTip(\"\");\n          setTipSpin(false);\n          if (res.flag) {\n            let datas = res.data.clinicalDataEntityList;\n            if (datas) {\n              let echarsData = {\n                Eci: [],\n                wen0: [],\n                wen1: [],\n              };\n              let { wen0, wen1, Eci } = echarsData;\n              for (let i = 0; i < datas.length; i++) {\n                let { data0, data1 } = datas[i];\n\n                Eci.push(i);\n                if (units === \"℃\") {\n                  wen0.push(data0);\n                  wen1.push(data1);\n                } else {\n                  wen0.push(data0 * 1.8 + 32);\n                  wen1.push(data1 * 1.8 + 32);\n                }\n              }\n              let Temp = datas[datas.length - 1].data0 || \"\";\n              setEcharsData(echarsData);\n              setTemp(Temp);\n              setShowHistoryEchart(true);\n            }\n          }\n        })\n        .catch((err) => {\n          setTip(\"\");\n          setTipSpin(false);\n          console.log(err);\n        });\n    };\n    const isflog = window.screen.height < 1000 ? true : false;\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"activeImageBox\"\n              style={{\n                display: \"flex\",\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" className=\"activeImages\" />\n              </Popconfirm>\n              {petDetailInfo.isWalkIn ? (\n                <div\n                  className=\"assign\"\n                  style={{\n                    fontSize: px(14),\n                  }}\n                  onClick={() => {\n                    setSelectPetVisible(true);\n                    setSeleceEmergencies(record);\n                    setLastLastWorkplaceId(storage.lastOrganization);\n                  }}\n                >\n                  Assign\n                </div>\n              ) : (\n                <>\n                  <img\n                    src={edit}\n                    alt=\"\"\n                    // style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                    className=\"activeImages\"\n                  />\n\n                  <img\n                    src={start}\n                    alt=\"\"\n                    // style={{ width: px(25) }}\n                    onClick={() => see(record.historyId, record)}\n                    className=\"activeImages\"\n                  />\n                </>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: `Temp(${units})`,\n        // title: `Temp(℉)`,\n        key: \"temp\",\n        dataIndex: \"temp\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log(text, record);\n\n          /**\n           * bag：温度数值前的圆圈的背景颜色\n           * tem：展示的温度\n           * endvalue:将从后台得到的数据全部转化成华氏度\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           *\n           */\n\n          let bag = \"\",\n            tem = \"\";\n\n          let endValue =\n            text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10;\n          let min = 100.4,\n            max = 102.56;\n\n          if (endValue > max) {\n            bag = \"#E1206D\";\n          } else if (endValue < min) {\n            bag = \"#98DA86\";\n          } else {\n            bag = \"#58BDE6\";\n          }\n\n          if (units === \"℃\") {\n            if (text) {\n              tem = `${text}${units}`;\n              if (text > 55) {\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\n              } else {\n                tem = `${text.toFixed(1)}${units}`;\n              }\n            }\n          } else {\n            if (text) {\n              if (text > 55) {\n                tem = `${text}${units}`;\n              } else {\n                tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${units}`;\n              }\n            }\n          }\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {tem ? (\n                <div\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"8px\",\n                    backgroundColor: bag,\n                    marginRight: \"3px\",\n                  }}\n                />\n              ) : null}\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n            </div>\n          );\n        },\n      },\n      {\n        title: `Rectal Temperature`,\n        key: \"referenceRectalTemperature\",\n        dataIndex: \"referenceRectalTemperature\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log('肛温的值：', text);\n          let num = text;\n          if (text !== null) {\n            num = (text * 1.8 + 32).toFixed(1);\n          }\n\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {text !== null && (\n                <p style={{ margin: 0, padding: 0 }}>\n                  {num} <span>{\"℉\"}</span>\n                </p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Placement\",\n        dataIndex: \"placement\",\n        key: \"placement\",\n        align: \"center\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          switch (record.placement) {\n            case 1:\n              return (\n                //腋温\n                <div>\n                  <img src={palcement_ye} alt=\"\" />\n                </div>\n              );\n            case 3:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 2:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 4:\n              return (\n                //耳温\n                <div>\n                  <img src={placement_er} alt=\"\" />\n                </div>\n              );\n            default:\n              return null;\n          }\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"100%\" }}>{text}</p>;\n        },\n      },\n    ];\n    let hisHe = mTop(200);\n    try {\n      let historyElement = document.querySelectorAll(\n        \"#clinicalMeasure11 .historyTable\"\n      );\n      hisHe = historyElement[0].clientHeight - mTop(100);\n    } catch (error) { }\n\n    return (\n      <div className=\"historyTableBox\" onScrollCapture={onScrollCapture}>\n        <Table\n          className=\"historyTable\"\n          columns={columns}\n          loading={loading}\n          dataSource={historyData}\n          rowKey={(columns) => columns.historyId}\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\n          pagination={false}\n          scroll={{\n            // y: hisHe,\n            y: '80%'\n          }}\n        />\n      </div>\n    );\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === historyData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      _getEmergencyHistory(currPage + 1);\n    }\n  }\n  const _editModal = () => {\n    function save() {\n      let datas = {\n        memo: memo,\n        bodyConditionScore: parseInt(editBodyConditionScore),\n        furLength: parseInt(editFurLength),\n        heartRate: editHeartRate,\n        bloodPressure: editBloodPressure,\n        respiratoryRate: editRespiratoryRate,\n      };\n      if (editRoomTemperature) {\n        datas.roomTemperature = (\n          (parseFloat(editRoomTemperature) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n      if (editRectal) {\n        datas.referenceRectalTemperature = (\n          (parseFloat(editRectal) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n\n      setEditVisible(false);\n      setTip(\"Data is being modified\");\n      setTipSpin(true);\n\n\n      updatePetExam(editId, datas)\n        .then((res) => {\n          console.log(res);\n          setTipSpin(false);\n          setTip(\"\");\n          message.success(\"Data modified successfully\");\n\n          _getHistory11(petDetailInfo.petId);\n        })\n        .catch((err) => {\n          setTipSpin(false);\n          setTip(\"\");\n\n          message.success(\" Data modification failed\");\n\n          console.log(err);\n        });\n    }\n\n    let furLength = \"\";\n    if (editFurLength !== null && editFurLength !== undefined) {\n      switch (`${editFurLength}`) {\n        case \"1\":\n          furLength = \"smooth\";\n          break;\n        case \"2\":\n          furLength = \"short\";\n          break;\n        case \"3\":\n          furLength = \"medium\";\n          break;\n        case \"4\":\n          furLength = \"long\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          >\n            Modification history information\n          </div>\n        }\n        visible={editVisible}\n        // visible={true}\n        onCancel={() => {\n          setEditVisible(false);\n        }}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n          // onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n        className=\"editModalBox\"\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRoomTemperature}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n\n                setEditRoomTemperature(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRectal}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setEditRectal(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBodyConditionScore}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n\n                setEditBodyConditionScore(str);\n              }}\n            />\n          </div>\n\n          <div className=\"bodyType11\">\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={(index) => {\n                console.log(index);\n                setEditFurLength(index);\n              }}\n              style={{\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={furLength}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editHeartRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditHeartRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBloodPressure}\n              onChange={(item) => {\n                setEditBloodPressure(item.target.value);\n              }}\n            />\n            <span>mm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRespiratoryRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditRespiratoryRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"2\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              value={memo}\n              onChange={(val) => {\n                setMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n\n          <div className=\"btn\" onClick={save}>\n            Save\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n  const _foot = () => {\n    let lbgc = \"\",\n      rbgc = \"\";\n    if (isPetCharacteristics) {\n      lbgc = \"rgba(25,173,228,0.5)\";\n      rbgc = \"rgba(105,201,237,1)\";\n    } else {\n      lbgc = \"rgba(105,201,237,1)\";\n      rbgc = \"rgba(25,173,228,0.5)\";\n    }\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\">\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: lbgc }}\n            onClick={() => setIsPetCharacteristics(true)}\n          >\n            Exam Details\n          </div>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: rbgc }}\n            onClick={() => setIsPetCharacteristics(false)}\n          >\n            History\n          </div>\n        </div>\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\n      </div>\n    );\n  };\n  //获取本地数据\n  const getLocalSetting = () => {\n    let settings = {\n      isHua: true,\n      is15: true,\n      self_tarting: false, //自启动\n      isBacklight: true,\n      isBeep: true,\n      backlightTimer: { length: 140, number: \"45\" },\n      autoOff: { length: 0, number: \"30\" },\n    };\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n  };\n  //echars渲染\n  const echars = () => {\n    return (\n      <div id=\"myCharts\"\n        style={{ width: windowWidth }}\n        ref={chartsBox}\n      >\n        <ReactECharts\n          option={getOption()}\n          theme=\"Imooc\"\n          style={{ height: 'auto', width: 'auto' }}\n          notMerge={true}\n          lazyUpdate={true}\n          ref={echartsElement}\n          className=\"charts\"\n        />\n        {_status()}\n      </div>\n    );\n  };\n  //分配宠物walk-in信息\n  const assignPet = (value) => {\n    setSelectPetModalLoading(true);\n    let parmes = {\n      petId: value.petId,\n      clinicalDatagroupId: seleceEmergencies.clinicalDatagroupId,\n    };\n    addAndSavePetExam(seleceEmergencies.historyId, parmes)\n      .then((res) => {\n        setSelectPetModalLoading(false);\n        if (res.flag === true) {\n          message.success(\"Assigned successfully\");\n          setSelectPetVisible(false);\n          setAddPetId('');\n          _getEmergencyHistory(1);\n        } else {\n          message.error(\"Assignment failed\");\n        }\n      })\n      .catch((err) => {\n        setSelectPetModalLoading(false);\n        message.error(\"Assignment failed\");\n      });\n  }\n  //添加宠物弹窗显示\n  const onAddPet = () => {\n    setAddPetId('');\n    setSelectPetVisible(false);\n    setAddPetVisible(true);\n  }\n  //添加宠物\n  const addNewPet = (value) => {\n    let data = {\n      ...value,\n      weight: value.weight === '' ? '' : parseFloat(value.weight).toFixed(2),\n    };\n    if (storage.lastWorkplaceId) {\n      data.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      data.organizationId = storage.lastOrganization\n    }\n    if (storage.userId) {\n      data.doctorId = storage.userId\n    }\n    setAddPetModalLoading(true);\n    addDeskPet(value.patientId, data)\n      .then((res) => {\n        setAddPetModalLoading(false);\n        if (res.flag === true) {\n          message.success('Adding pets successfully');\n          setAddPetId(res.data.petId);\n          setAddPetVisible(false);\n          setSelectPetVisible(true);\n        } else {\n          message.error('patientId already exists');\n        }\n      })\n      .catch((err) => {\n        setAddPetModalLoading(false);\n      })\n  }\n\n  useEffect(() => {\n    if (petDetailInfo.petId) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getHistory11(petDetailInfo.petId);\n    } else if (petDetailInfo.isWalkIn) {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n      _getEmergencyHistory(1);\n    }\n    return () => {\n      setCurrPage(1);\n      setHistoryData([]);\n      setTotal(0);\n    };\n  }, [petDetailInfo]);\n\n  useEffect(() => {\n    return () => {\n      saveHistoryTime && clearTimeout(saveHistoryTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", resize);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // setTest(echartsElement);\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (mellaMeasureNumCopy === mellaMeasureNum) {\n      return;\n    }\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // console.log('监听', mellaMeasureValue);\n    setTemp(mellaMeasureValue);\n    let { Eci, wen0, wen1 } = echarsData;\n    //两个数组合并成一个数组\n    let EciCopy = [...Eci];\n\n    let win0Copy = [...wen0];\n    let wen1Copy = [...wen1];\n    EciCopy.push(EciCopy.length + 1);\n    win0Copy.push(mellaMeasureValue);\n    wen1Copy.push(mellaMeasureValue);\n    let json = {\n      Eci: EciCopy,\n      wen0: win0Copy,\n      wen1: wen1Copy,\n    };\n    setEcharsData(json);\n    let Eci1 = echarsData1.Eci;\n    let wen01 = echarsData1.wen0;\n    let wen11 = echarsData1.wen1;\n    let EciCopy1 = [...Eci1];\n\n    let win0Copy1 = [...wen01];\n    let wen1Copy1 = [...wen11];\n    EciCopy1.push(EciCopy1.length + 1);\n    let num =\n      units === \"℃\"\n        ? mellaMeasureValue\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\n    win0Copy1.push(num);\n    wen1Copy1.push(num);\n    let json1 = {\n      Eci: EciCopy1,\n      wen0: win0Copy1,\n      wen1: wen1Copy1,\n    };\n    setEcharsData1(json1);\n    // const option = getOption();\n    // echartsElement.current.getEchartsInstance().setOption(option);\n    return () => { };\n  }, [mellaMeasureNum]);\n\n  useEffect(() => {\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\n      addClinical();\n    }\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\n      setEcharsData({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n    }\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setShowHistoryEchart(false);\n    }\n\n    setMellaStatus(mellaConnectStatus);\n    return () => { };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      getLocalSetting();\n    } else {\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\n    }\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    let bufferData = electronStore.get(`${petDetailInfo.petId}`);\n    // console.log('bufferData: ', bufferData);\n    setRoomTemperature(bufferData ? bufferData?.roomTemperature : '');\n    setReferenceRectalTemperature(bufferData ? bufferData?.referenceRectalTemperature : '');\n    setBodyConditionScore(bufferData ? bufferData?.bodyConditionScore : '');\n    setFurLength(bufferData ? bufferData?.furLength : '');\n    setHeartRate(bufferData ? bufferData?.heartRate : '');\n    setBloodPressure(bufferData ? bufferData?.bloodPressure : '');\n    setRespiratoryRate(bufferData ? bufferData?.respiratoryRate : '');\n    setWeightValue(bufferData ? bufferData?.WeightValue : '');\n    return (() => { })\n  }, [petDetailInfo.petId]);\n\n  useEffect(() => {\n    return () => {\n      let newData = {\n        roomTemperature: roomTemperature,\n        referenceRectalTemperature: referenceRectalTemperature,\n        bodyConditionScore: bodyConditionScore,\n        furLength: furLength,\n        heartRate: heartRate,\n        bloodPressure: bloodPressure,\n        respiratoryRate: respiratoryRate,\n        WeightValue: WeightValue\n      }\n      electronStore.set(`${petDetailInfo.petId}`, newData);\n    }\n  }, [roomTemperature, referenceRectalTemperature, bodyConditionScore, furLength, heartRate, bloodPressure, respiratoryRate, WeightValue, petDetailInfo.petId])\n\n  useEffect(() => {\n    if (biggieBodyWeight !== 0) {\n      if (units === '℉') {\n        setWeightValue((biggieBodyWeight * 2).toFixed(2));\n      } else {\n        setWeightValue(biggieBodyWeight.toFixed(2));\n      }\n    }\n    return (() => { })\n  }, [biggieBodyWeight])\n\n  return (\n    <>\n      <div\n        id=\"clinical\"\n        style={{\n          height: bodyHeight,\n          minWidth: px(200),\n          minHeight: bodyHeight,\n          overflow: \"hidden\",\n        }}\n        ref={clinicalRef}\n      >\n        <div\n          className=\"headerContentBox\"\n          style={{ background: \"#fff\", position: \"relative\" }}\n        >\n          <Layout style={{ height: \"100%\" }}>\n            <HeaderItem timeNum={60} />\n          </Layout>\n        </div>\n        <div\n          className=\"clinicalBody\"\n          style={{ width: \"100%\", height: bodyHeight - px(100) }}\n        >\n          <div className=\"clinical_top\">\n            <div className=\"r\">\n              {/*顶部按钮Re-sync Base*/}\n              {mellaConnectStatus === \"disconnected\" && (\n                <div className=\"bb1\">\n                  <div\n                    className=\"btn78\"\n                    onClick={() => {\n                      if (resyncDeviceIsClick === true) {\n                        resyncDeviceIsClick = false;\n                        let ipcRenderer = window.electron.ipcRenderer;\n                        ipcRenderer.send(\"qiehuan\");\n                        const time = setTimeout(() => {\n                          resyncDeviceIsClick = true;\n                          clearTimeout(time);\n                        }, 2500);\n                      }\n                    }}\n                  >\n                    Re-sync Base\n                  </div>\n                </div>\n              )}\n              {echars()}\n              {/* 底部宠物信息 */}\n              {_foot()}\n              {_editModal()}\n              {tipSpin && (\n                <div className=\"modal\">\n                  <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                    <LoadingOutlined\n                      style={{\n                        fontSize: 30,\n                        color: \"#fff\",\n                        marginTop: mTop(-30),\n                      }}\n                    />\n                  </div>\n                  <p>data is loading...</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        {\n          selectPetVisible && (\n            <SelectPet\n              visible={selectPetVisible}\n              destroyOnClose\n              width={400}\n              value={addPetId}\n              onCancel={() => {\n                setAddPetId('');\n                setSelectPetVisible(false);\n              }}\n              onSelect={(value) => {\n                assignPet(value);\n              }}\n              onAddPet={() => onAddPet()}\n              onLoading={selectPetModalLoading}\n            />\n          )\n        }\n        {\n          addPetVisible && (\n            <AddPetModal\n              visible={addPetVisible}\n              destroyOnClose\n              width={400}\n              onCancel={() => {\n                setAddPetVisible(false);\n                setSelectPetVisible(true);\n              }}\n              onConfirm={(value) => {\n                addNewPet(value);\n              }}\n              onLoading={addPetModalLoading}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nClinicalStudy.propTypes = {\n  bodyHeight: propTypes.number,\n};\nClinicalStudy.defaultProps = {\n  bodyHeight: 0,\n};\nexport default connect(\n  (state) => ({\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    biggieBodyWeight: state.hardwareReduce.biggieBodyWeight,\n    biggieUnit: state.hardwareReduce.biggieUnit,\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  { setTest }\n)(ClinicalStudy);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/PetsUI.jsx",["836","837","838","839","840","841","842","843","844","845"],"import React, { useEffect, useState } from 'react'\nimport {\n  Dropdown,\n  Menu,\n  Select,\n  Tooltip,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport petIcon from './../../assets/img/petIcon.png'\nimport xia from './../../assets/img/xia.png'\nimport MyModal from './../../utils/myModal/MyModal'\nimport redjinggao from './../../assets/img/redjinggao.png'\nimport orgicn from './../../assets/img/orgicn.png'\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\n\nimport { px } from '../../utils/px'\n\nimport { connect } from 'react-redux'\nimport { petSortTypeFun, petDetailInfoFun, setPetListArrFun } from '../../store/actions';\nimport { useHistory } from \"react-router-dom\";\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\n\nimport './mainbody.less'\nimport { listAllPetInfo } from '../../api';\n\nlet storage = window.localStorage;\n\nconst { Option } = Select;\n\nconst PetsUI = ({ bodyHeight, petSortTypeFun, petSortType, petDetailInfoFun, petDetailInfo, setPetListArrFun, petListArr, selectHardwareType, rulerConnectStatus, selectHardwareInfo, receiveBroadcastHardwareInfo }) => {\n  const history = useHistory();\n  //定义宠物列表数组\n  const [petList, setPetList] = useState([])\n  //是否展示弹窗\n  const [showModal, setShowModal] = useState(false)\n  //选中的宠物的详细信息\n  const [selectPetDetail, setSelectPetDetail] = useState({})\n\n  //获取宠物列表加载动画\n  const [loading, setLoading] = useState(false)\n\n  const [orgArr, setOrgArr] = useState([])\n  const [workplaceJson, setWorkplaceJson] = useState({})\n  const [connectionKey, setConnectionKey] = useState(\"\")\n  const [selectOrgId, setSelectOrgId] = useState(-1)\n  const [selectRoleId, setSelectRoleId] = useState(\"\")\n  const [workplaceName, setWorkplaceName] = useState(\"\")\n  const [workplaceId, setWorkplaceId] = useState()\n  const [organizationName, setOrganizationName] = useState(\"\")\n  const [organizationId, setOrganizationId] = useState()\n\n  //获取组织列表\n  const getOrgList = () => {\n    let userWorkplace = [];\n    try {\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\n    } catch (error) {\n      console.log(\"字符串转对象失败\", error);\n    }\n    let orgArr = [],\n      workplaceJson = {};\n    for (let i = 0; i < userWorkplace.length; i++) {\n      let element = userWorkplace[i];\n      if (element.organizationEntity && element.workplaceEntity) {\n        let { organizationEntity, workplaceEntity, roleId } = element;\n        const { name, organizationId, connectionKey } = organizationEntity;\n        const { workplaceName, workplaceId } = workplaceEntity;\n\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\n          setWorkplaceName(workplaceName)\n          setWorkplaceId(workplaceId)\n        }\n\n        if (`${organizationId}` === storage.lastOrganization) {\n\n          setOrganizationName(name)\n          setSelectOrgId(storage.lastOrganization)\n          setSelectOrgId(storage.lastOrganization)\n\n        }\n\n        let orgRepeatFlog = false,\n          repeatFlogNum = -1;\n        for (let j = 0; j < orgArr.length; j++) {\n          if (orgArr[j].organizationId === organizationId) {\n            orgRepeatFlog = true;\n            repeatFlogNum = j;\n            break;\n          }\n        }\n        if (orgRepeatFlog) {\n          let workplace = {\n            workplaceName,\n            workplaceId,\n          };\n          let id = orgArr[repeatFlogNum].organizationId;\n          workplaceJson[`${id}`] = workplace;\n        } else {\n          let connectKey = connectionKey || \"\";\n          let json = {\n            organizationId,\n            organizationName: name,\n            connectionKey: connectKey,\n            roleId,\n          };\n          let workplace = [\n            {\n              workplaceName,\n              workplaceId,\n            },\n          ];\n          workplaceJson[`${organizationId}`] = workplace;\n\n          orgArr.push(json);\n        }\n      }\n    }\n\n    setOrgArr(orgArr)\n    setWorkplaceJson(workplaceJson)\n    setConnectionKey(storage.connectionKey)\n    setSelectRoleId(storage.roleId)\n\n  }\n  //获取宠物列表数据\n  const _getExam = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 10,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    setLoading(true)\n    listAllPetInfo(params)\n      .then(res => {\n        setLoading(false)\n        if (res.flag === true && res.data) {\n          let oldList = res.data\n          let petArr = dataSort(oldList)\n          setPetList(petArr)\n          setPetListArrFun(petArr)\n        } else {\n          setPetList([])\n          setPetListArrFun([])\n        }\n      })\n      .catch(err => {\n        setLoading(false)\n        console.log(err);\n        setPetList([])\n        setPetListArrFun([])\n      })\n  }\n  const dataSort = (data, key,) => {\n    if (!key) {\n      key = petSortType\n    }\n    let petList = [].concat(data)\n    switch (key) {\n\n      case 'Time':\n      case 'Recent':\n        petList.sort((a, b) => { return a.createTime > b.createTime ? -1 : 1 })\n        break;\n      case 'Pet ID':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'Owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'Breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'Pet Name':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'Gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    console.log(petList);\n    return petList\n  }\n  const menu = () => {\n    let menuList = [\n      // { value: 'Time' },\n      { value: 'Pet ID' },\n      // { value: 'Owner' },\n      // { value: 'Breed' },\n      { value: 'Pet Name' },\n      { value: 'Recent' },\n      // { value: 'Gender' },\n    ];\n    let options = menuList.map((item, index) => {\n      let itemstyle = {}, textColor = '#1a1a1a'\n      if (petSortType === item.value) {\n        itemstyle = { backgroundColor: '#e1206D' }\n        textColor = '#fff'\n      }\n      return (\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\n          <div style={{ color: textColor }}>{item.value}</div>\n        </Menu.Item>\n      )\n    })\n    return (\n      <Menu onClick={({ key, }) => {\n        console.log('----', key);\n        petSortTypeFun(key)\n\n        let petArr = dataSort(petList, key,)\n        setPetList(petArr)\n        setPetListArrFun(petArr)\n\n\n      }}>\n        {options}\n\n      </Menu>\n    );\n  }\n  const petListUI = () => {\n    let options = petList.map((item, index) => {\n      let itemBac = '', itemColor = '#141414'\n      if (item.petId === petDetailInfo.petId) {\n        itemBac = '#e1206D'\n        itemColor = '#fff'\n      }\n      return (\n        <li key={index} >\n          <div className='petItem'\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\n            onClick={() => {\n              //当硬件是尺子且尺子还在测量的时候,要做出提示\n              setSelectPetDetail(item)\n              let { deviceType, mac } = selectHardwareInfo\n              if ((mac && receiveBroadcastHardwareInfo.deviceType === 'tape' && receiveBroadcastHardwareInfo.macId === mac) && selectHardwareType === 'tape' && rulerConnectStatus !== 'disconnected') {\n                setShowModal(true)\n              } else {\n                petDetailInfoFun(item)\n              }\n              // petDetailInfoFun(item)\n            }}\n          >\n            {`${item.patientId}, ${item.petName}`}\n          </div>\n        </li >\n      )\n\n    })\n\n    return (\n      <div className=\"petList\" style={{ marginTop: px(10) }}>\n        {loading ?\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', width: '100%', height: '100%' }}>\n            <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n              <LoadingOutlined style={{ fontSize: 30, color: '#141414', marginTop: px(-30), }} />\n            </div>\n            <p style={{ color: '#141414' }}>loading... </p>\n          </div>\n          :\n          <ul>\n            {options}\n          </ul>}\n\n      </div>\n    )\n  }\n  const selectOrgUI = () => {\n    // console.log('orgArr', orgArr);\n    const selectOrgFn = (value, option) => {\n      console.log('-------value', value, option);\n      setOrganizationName(value)\n      storage.roleId = option.roleid\n      storage.lastOrganization = option.organizationid\n      storage.connectionKey = option.connectionkey\n      try {\n        let key = parseInt(selectOrgId);\n        let lastWorkplaceId = workplaceJson[key][0].workplaceId;\n        // console.log('------', lastWorkplaceId);\n        storage.lastWorkplaceId = lastWorkplaceId;\n\n      } catch (error) {\n\n      }\n      _getExam()\n\n    }\n\n    let options = orgArr.map((item, index) => {\n      if (index === 1) {\n      }\n      return (\n        <Option\n          key={`${item.organizationId}`}\n          value={item.organizationName}\n          organizationid={item.organizationId}\n          roleid={item.roleId}\n          connectionkey={item.connectionKey}\n\n\n        >\n          {item.organizationName}\n        </Option>\n      )\n    })\n    return (\n      <Select\n        style={{ width: '70%', marginLeft: px(15) }}\n        value={organizationName}\n        onChange={selectOrgFn}\n        dropdownClassName=\"selectOrgUI\"\n        bordered={false}\n        // showArrow={false}\n        // dropdownMatchSelectWidth={140}\n        suffixIcon={() => <img src={xia} alt=\"\" width={px(20)} style={{ marginLeft: px(10) }} />}\n      >\n        {options}\n      </Select>\n    )\n\n  }\n\n  useEffect(() => {\n    //设置宠物列表数据\n    setPetList(petListArr)\n  }, [petListArr])\n  //获取组织列表\n  useEffect(() => {\n    getOrgList()\n  }, [])\n\n  useEffect(() => {\n    _getExam()\n  }, [])\n\n\n  return (\n    <div className=\"PetUI11\" style={{ height: bodyHeight - px(100), }}>\n      <MyModal\n        visible={showModal}\n        element={\n          <div className='petUiModal'>\n            <img src={redjinggao} alt=\"\" width={'45px'} style={{ margin: `${px(25)}px 0` }} />\n            <div className='bodyText' style={{ marginTop: px(30) }}>Patient Switched – select dimension to measure</div>\n            <div className=\"btns\" style={{ marginTop: px(35) }}>\n              <div className=\"btn\" onClick={() => { setShowModal(false) }}>Cancel</div>\n              <div className=\"btn\" onClick={() => { setShowModal(false); petDetailInfoFun(selectPetDetail) }}>Confirm</div>\n            </div>\n          </div>\n        }\n      />\n      <div style={{ width: '100%', position: 'relative', height: bodyHeight - px(100), }}>\n        <div className=\"selectOrg\" style={{ width: '100%' }}>\n          <div className=\"title\" style={{ padding: `${px(10)}px 0px ${px(10)}px ${px(20)}px ` }}>\n            <img src={orgicn} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n            <div className=\"titleText\" >{`Organization`}</div>\n          </div>\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n            {selectOrgUI()}\n            <Tooltip placement='bottom' title='Add an organization'>\n              <div\n                className=\"addImgBox\"\n                // onClick={() => history.push(\"/uesr/logUp/JoinOrganizationByOption\")}\n                onClick={() => history.push(\"/menuOptions/NewOrg\")}\n\n              >\n                <img\n                  src={deivceAdd}\n                  alt=\"\"\n                  width={px(20)}\n                  style={{ marginLeft: px(12) }}\n                />\n              </div>\n\n            </Tooltip>\n          </div>\n        </div>\n        <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\n          <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\n          <div className=\"titleText\" >Pets</div>\n        </div>\n        <div className=\"sort\" style={{ paddingLeft: px(15), display: 'flex' }}>\n          <Dropdown overlay={menu} trigger={['click']}>\n            <div className=\"sortBox\">\n              <div className=\"sortText\" >\n                {`Sort by: ${petSortType}`}\n              </div>\n              <img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10),cursor:'pointer' }} />\n            </div>\n          </Dropdown>\n          <Tooltip placement='bottom' title='Add a Pet'>\n            <div\n              className=\"addImgBox\"\n              onClick={() => history.push(\"/pet/doctorAddPet\")}\n            >\n              <img\n                src={deivceAdd}\n                alt=\"\"\n                width={px(20)}\n                style={{ marginLeft: px(12) }}\n              />\n            </div>\n          </Tooltip>\n\n        </div>\n        {petListUI()}\n        <div className=\"walkBtn\">\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(40), marginTop: px(15) }}\n            onClick={() => {\n              let json = {\n                isWalkIn: true,\n                petId: null,\n                petName: null,\n                owner: null,\n                breed: null,\n\n              }\n              petDetailInfoFun(json)\n            }}\n          >\n            <div className=\"walkText\">Walk-In</div>\n          </div>\n        </div>\n      </div >\n    </div >\n  )\n}\n\n\nPetsUI.propTypes = {\n  bodyHeight: PropTypes.number\n}\n//默认值\nPetsUI.defaultProps = {\n  bodyHeight: 0\n}\nexport default connect(\n  state => ({\n    petSortType: state.petReduce.petSortType,\n    petDetailInfo: state.petReduce.petDetailInfo,\n    petListArr: state.petReduce.petListArr,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    rulerConnectStatus: state.hardwareReduce.rulerConnectStatus,\n    selectHardwareInfo: state.hardwareReduce.selectHardwareInfo,\n    receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo\n  }),\n  { petSortTypeFun, petDetailInfoFun, setPetListArrFun }\n)(PetsUI)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/hardwareType.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scheduledPetsPage/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/addScheduledPet/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/allPetsPage/index.jsx",["846"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { } from 'antd';\nimport { SyncOutlined } from '@ant-design/icons';\nimport { px } from '../../utils/px';\nimport PetTable from '../../components/petTable';\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\nimport moment from 'moment'\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nlet storage = window.localStorage;\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\n\n  //初始化获取宠物列表数据\n  const [petListArr, setPetListArr] = useState([])\n  //定义宠物列表是否加载中\n  const [loading, setLoading] = useState(true)\n  const [spin, setSpin] = useState(false)\n  const _getExam = async () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('查询宠物的入参', params);\n    const isUnKnow = (val) => {\n      if (val) {\n        return val\n      } else {\n        return 'unknown'\n      }\n    }\n    setLoading(true)\n    listAllPetInfo(params)\n      .then(res => {\n        console.log('查询到的宠物列表,/user/listAllPetInfo', res);\n        if (res.flag === true && res.data) {\n          let data = []\n          let oldList = res.data\n          setPetListArrFun(oldList)\n          // let oldList = res.data.list\n          for (let i = 0; i < oldList.length; i++) {\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\n              h2tLength, torsoLength } = oldList[i]\n            let owner = ''\n            patientId = isUnKnow(patientId)\n            petName = isUnKnow(petName)\n            breedName = isUnKnow(breedName)\n            age = isUnKnow(age)\n            weight = isUnKnow(weight)\n            if (!firstName) {\n              firstName = ''\n            }\n            if (!lastName) {\n              lastName = ''\n            }\n            if (lastName === '' && firstName === '') {\n              owner = 'unknown'\n            } else {\n              owner = `${lastName} ${firstName}`\n            }\n            createTime = moment(createTime).format('X')\n            let petGender = ''\n            switch (`${gender}`) {\n              case '1': petGender = 'F'\n\n                break;\n              case '0': petGender = \"M\"\n                break;\n              default: petGender = 'unknown'\n                break;\n            }\n            let petAge = 'unknown'\n            if (birthday) {\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\n            }\n\n            let json = {\n              insertedAt: createTime,\n              patientId,\n              petName,\n              owner,\n              breed: breedName,\n              gender: petGender,\n              age: petAge,\n              petId,\n              id: i,\n              weight,\n              rfid,\n              url,\n              speciesId,\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\n              h2tLength, torsoLength,\n              pethubId, macId,\n\n            }\n            data.push(json)\n\n          }\n          data.sort((a, b) => {\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\n          })\n          console.log('列表的数据：', data);\n          setPetListArr(data)\n          setLoading(false)\n          setSpin(false)\n        } else {\n          setLoading(false)\n          setSpin(false)\n        }\n      })\n      .catch(err => {\n        console.log(err);\n        setLoading(false)\n        setSpin(false)\n      })\n\n\n\n  }\n  const _refresh = () => {\n    setSpin(true)\n    _getExam()\n  }\n\n  useEffect(() => {\n    //获取宠物列表\n    _getExam()\n  }, [])\n\n  return (\n    <div id='allPets' style={{ height: bodyHeight }}>\n      <div className=\"allPetHeard\">\n        <div className=\"addDeviceTitle flex\" style={{ fontSize: 26, paddingLeft: px(20) }}>\n          <div className=\"title\">Client Results</div>\n          <div className=\"refresh flex\"\n            style={{ fontSize: px(25), marginLeft: px(10) }}\n          >\n            <SyncOutlined onClick={_refresh} spin={spin} />\n          </div>\n\n        </div>\n\n        <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(40), width: px(200) }}\n            onClick={() => {\n              let json = {\n                isWalkIn: true,\n                petId: null,\n                petName: null,\n                owner: null,\n                breed: null,\n\n              }\n              petDetailInfoFun(json);\n              setMenuNum(\"1\");\n            }}\n          >\n            <p className=\"walkText\">Walk-In</p>\n          </div>\n        </div>\n\n      </div>\n\n      <PetTable\n        bodyHeight={bodyHeight - px(100)}\n        petListArr={petListArr}\n        loading={loading}\n        resetPetList={(val) => setPetListArr(val)}\n\n      />\n    </div >\n\n  )\n}\n\nAllPet.propTypes = {\n}\n//默认值\nAllPet.defaultProps = {\n  bodyHeight: 0,\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, setPetListArrFun }\n)(AllPet)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/index.jsx",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/index.jsx",["847","848","849","850","851","852"],"import React, { useEffect, useState } from \"react\";\nimport { Layout, message } from \"antd\";\n\nimport { connect } from \"react-redux\";\nimport { setBiggieConnectStatusFun } from \"../../store/actions\";\n\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport HistoryTable from \"../../components/historyTable\";\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Biggie from \"./components/Biggie\";\n\nimport { px } from \"../../utils/px\";\nimport MyModal from \"../../utils/myModal/MyModal\";\n\nimport PropTypes from 'prop-types';\nimport _ from \"lodash\";\n\nimport \"./index.less\";\nimport { ezyvetGetPetLatestExam, ezyvetUpdateWeight, vetspireGetPetLatestExam, vetspireUpdateWeight } from \"../../api\";\nimport { addClamantPetExam } from '../../api/mellaserver/exam'\n\n\nconst { Header, Content, Footer, Sider } = Layout;\nlet storage = window.localStorage;\n\nconst BiggirPage = ({\n  hardwareReduce,\n  setBiggieConnectStatusFun,\n  petReduce,\n  bodyHeight,\n}) => {\n  let { petDetailInfo } = petReduce;\n  let { biggieBodyWeight } = hardwareReduce;\n  //定义体重值 体脂值 体重单位 连接状态\n  const [weight, setWeight] = useState(0);\n  const [saveNum, setSaveNum] = useState(0);\n  const [fat, setFat] = useState(0);\n  const [unit, setUnit] = useState(\"kg\");\n  const [connectStatus, setConnectStatus] = useState(\"disconnected\");\n  const [isSavePMS, setIsSavePMS] = useState(false);\n  const [saveLoad, setSaveLoad] = useState(false);\n  const [isHaveSaveBtn, setIsHaveSaveBtn] = useState(true);\n\n  const _saveWeight = () => {\n    let params = {\n      petId: petDetailInfo.petId,\n      doctorId: storage.userId,\n      weight: weight,\n      memo: \"\",\n      fat,\n      bodyConditionScore: null,\n    };\n    setSaveLoad(true);\n    console.log(\"---体重保存入参--：\", params);\n    addClamantPetExam(params)\n      .then((res) => {\n        setSaveLoad(false);\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataWeightVetspire()\n              break;\n            case '4'://ezyVet\n              updataWeightEzyvet()\n              break;\n            default:\n              message.success(\"Data successfully saved in Mella\");\n              break;\n          }\n          setSaveNum(saveNum + 1);\n          setIsHaveSaveBtn(false);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setSaveLoad(false);\n      });\n  };\n  const updataWeightVetspire = () => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: petDetailInfo.patientId,\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            weight: unit === 'kg' ? (weight * 2.2046).toFixed(1) : weight\n          }\n          vetspireUpdateWeight(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n\n  }\n  const updataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reUpdataWeightEzyvet();\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reUpdataWeightEzyvet();\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  const reUpdataWeightEzyvet = () => {\n    let params = {\n      id: petDetailInfo.patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let parames1 = {\n            consult_id,\n            weight: unit === 'kg' ? weight : (weight / 2.2046).toFixed(2)\n          }\n          ezyvetUpdateWeight(paramId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record')\n      })\n  }\n\n  useEffect(() => {\n    let isSave = storage.connectionKey ? false : true;\n    setIsSavePMS(isSave);\n    return () => { };\n  }, []);\n  useEffect(() => {\n    let {\n      biggieConnectStatus,\n      biggieBodyFat,\n      biggieBodyWeight,\n      biggieUnit,\n      biggieSameWeightCount,\n    } = hardwareReduce;\n    setConnectStatus(biggieConnectStatus);\n    setFat(biggieBodyFat);\n    setUnit(biggieUnit);\n    if (biggieUnit === \"lb\") {\n      biggieBodyWeight = biggieBodyWeight * 2;\n    }\n    setWeight(biggieBodyWeight);\n    if (biggieSameWeightCount === 6) {\n      let ipcRenderer = window.require(\"electron\").ipcRenderer;\n      ipcRenderer.send(\"keyboardWriting\", weight);\n    }\n\n    return () => { };\n  }, [hardwareReduce]);\n\n  useEffect(() => {\n    setIsHaveSaveBtn(true);\n    return () => { };\n  }, [biggieBodyWeight]);\n  //宠物变了,要设置为未连接\n  useEffect(() => {\n    setBiggieConnectStatusFun(\"disconnected\")\n  }, [petDetailInfo]);\n\n  return (\n    <>\n      <Layout className=\"biggiePage\" style={{ height: bodyHeight }}>\n        <div className=\"headerContentBox\" style={{ background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        <Content className=\"biggieContentBox\">\n          {_.isEmpty(petDetailInfo) ? (\n            <>\n              <div className=\"chackPatientBox\">\n                <p className=\"chackPatientTitle\">Select a patient</p>\n              </div>\n            </>\n          ) : connectStatus === \"isMeasuring\" ? (\n            <div className=\"biggbody\">\n              <div className=\"biggieTopBox\">\n                <Biggie\n                  weight={weight}\n                  bodyFat={fat}\n                  score={5}\n                  impedance={fat}\n                  isIbs={unit === \"lb\"}\n                  onPress={_saveWeight}\n                  discardOnPress={() =>\n                    setBiggieConnectStatusFun(\"disconnected\")\n                  }\n                  issave={isSavePMS}\n                  isHaveSaveBtn={isHaveSaveBtn}\n                />\n              </div>\n            </div>\n          ) : (\n            <LinkEquipment />\n          )}\n          {\n            !_.isEmpty(petDetailInfo) && (\n              <div className=\"bottomContent\">\n                <div className=\"biggeTitleBox\">\n                  <p className=\"biggeTitle\">History</p>\n                </div>\n                <HistoryTable saveNum={saveNum} tableColumnType='weight' />\n              </div>\n            )\n          }\n        </Content>\n      </Layout>\n      <MyModal visible={saveLoad} />\n    </>\n  );\n};\n\nBiggirPage.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array\n}\n\nexport default connect(\n  (state) => ({\n    hardwareReduce: state.hardwareReduce,\n    petReduce: state.petReduce,\n  }),\n  {\n    setBiggieConnectStatusFun,\n  }\n)(BiggirPage);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mainbody/HardListModal.jsx",["853"],"import React, { useEffect, useState } from \"react\";\n\n\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\nimport nextImg from \"./../../assets/img/nextImg.png\";\nimport dui from \"./../../assets/img/dui.png\";\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\nimport scales from \"./../../assets/img/scales.png\";\n\nimport { px } from \"../../utils/px\";\nimport { compareObject } from \"../../utils/current\";\nimport electronStore from \"../../utils/electronStore\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareInfoFun,\n  selectHardwareModalShowFun,\n  setMenuNum,\n  setSelectHardwareType\n} from \"./../../store/actions\";\n\nimport \"./mainbody.less\";\n\nlet storage = window.localStorage;\nconst HardAndPetsUI = ({\n  hardwareList,\n  selectHardwareType,\n  selectHardwareInfoFun,\n  selectHardwareModalShowFun,\n  setInfo,\n  setMenuNum,\n  hardwareMessage,\n  setSelectHardwareType\n}) => {\n  let { selectHardwareInfo } = hardwareMessage;\n  //定义数组hardwareList\n  const [hardwareListArr, setHardwareList] = useState([]);\n  //定义选择的硬件详细信息\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\n\n  let options = hardwareListArr.map((item, index) => {\n    let { name, mac, deviceType } = item;\n    let deviceTypeStr = \"\",\n      img = null;\n    switch (deviceType) {\n      case \"biggie\":\n        deviceTypeStr = \"Biggie Pro Scale\";\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\n        break;\n      case \"rfid\":\n        deviceTypeStr = \"RFID\";\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\n        break;\n      case \"tape\":\n        deviceTypeStr = \"Tabby\";\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\n        break;\n      case \"maeBowl\":\n        deviceTypeStr = \"MaeBowl\";\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\n\n        break;\n      case \"otterEQ\":\n        deviceTypeStr = \"Otter EQ\";\n\n        break;\n      case \"mellaPro\":\n        deviceTypeStr = \"Mella Pro\";\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\n        break;\n\n      default:\n        break;\n    }\n    //判断对象是否相等\n\n    let isEqual = compareObject(item, selectHardwareDetail);\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\n    return (\n      <li\n        key={`${index}`}\n        onClick={() => {\n          setSelectHardwareDetail(item);\n          electronStore.set(\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\n            item\n          );\n          selectHardwareInfoFun(item);\n          setInfo && setInfo(item);\n        }}\n      >\n        <div\n          className=\"hardListInfo\"\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\n        >\n          <div className=\"deviceL\">\n            <div\n              className=\"hardIcon\"\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\n            >\n              {img}\n            </div>\n            <div className=\"deviceInfo\">\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\n              <div className=\"deviceName\">{deviceTypeStr}</div>\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\n            </div>\n          </div>\n\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\n            <img src={nextImg} alt=\"\" width={px(13)} />\n            {isEqual && (\n              <div\n                className=\"seleIcon\"\n                style={{ width: px(18), height: px(18), top: px(-30) }}\n              >\n                <img src={dui} alt=\"\" width={px(12)} />\n              </div>\n            )}\n          </div>\n        </div>\n      </li>\n    );\n  });\n  const otherItems = () => {\n    let deviceType = selectHardwareDetail.deviceType;\n    let isBiggie = deviceType === \"biggie\",\n      deviceTypeStr = \"\";\n    switch (deviceType) {\n      case \"biggie\":\n        deviceTypeStr = \"Biggie\";\n        break;\n      case \"rfid\":\n        deviceTypeStr = \"RFID\";\n        break;\n      case \"tape\":\n        deviceTypeStr = \"Tabby\";\n\n        break;\n      case \"maeBowl\":\n        deviceTypeStr = \"MaeBowl\";\n\n        break;\n      case \"otterEQ\":\n        deviceTypeStr = \"Otter EQ\";\n        break;\n      case \"mellaPro\":\n        deviceTypeStr = \"Mella\";\n        break;\n      default:\n        break;\n    }\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\n    return (\n      <div>\n        {isBiggie && (\n          <div\n            className=\"addNewDevice\"\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\n            onClick={() => setMenuNum(\"CombineScales\")}\n          >\n            <div\n              className=\"addNewDeviceText\"\n              style={{ paddingLeft: px(25) }}\n            >{`Combine Scales`}</div>\n            <div className=\"addNewDeviceImg\">\n              <img\n                src={scales}\n                alt=\"\"\n                width={px(30)}\n                style={{ marginRight: px(20) }}\n              />\n            </div>\n          </div>\n        )}\n        <div\n          className=\"addNewDevice\"\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\n          onClick={() => {\n            setMenuNum(\"1\");\n            setSelectHardwareType('add');\n          }}\n        >\n          <div\n            className=\"addNewDeviceText\"\n            style={{ paddingLeft: px(25), }}\n\n\n          >{`Add New ${deviceTypeStr}`}</div>\n          <div className=\"addNewDeviceImg\">\n            <img\n              src={deivceAdd}\n              alt=\"\"\n              width={px(30)}\n              style={{ marginRight: px(20) }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\n    for (let i = 0; i < hardwareList.length; i++) {\n      const element = hardwareList[i];\n      if (element.type === selectHardwareType) {\n        let list = element.devices || [];\n        setHardwareList(list);\n        //获取被选中的硬件的详细信息\n        let selectHardwareInfoData = selectHardwareInfo || {};\n        if (selectHardwareInfoData === {}) {\n          let selectHardwareInfoData = list[0] || {};\n          setSelectHardwareDetail(selectHardwareInfoData);\n        } else {\n          let sameFlag = false;\n          for (let i = 0; i < list.length; i++) {\n            const element = list[i];\n            if (\n              element.name === selectHardwareInfoData.name &&\n              element.mac === selectHardwareInfoData.mac\n            ) {\n              setSelectHardwareDetail(selectHardwareInfoData);\n              sameFlag = true;\n              break;\n            }\n          }\n          console.log(\"sameFlag\", sameFlag);\n          if (!sameFlag) {\n            console.log(\"设置了默认值\");\n            let selectHardwareInfoData = list[0] || {};\n            setSelectHardwareDetail(selectHardwareInfoData);\n          }\n        }\n        break;\n      }\n    }\n  }, [selectHardwareType]);\n\n  return (\n    <div\n      className=\"hardList\"\n      style={{ top: px(90), zIndex: 999 }}\n      onClick={(e) => {\n        e.stopPropagation();\n        selectHardwareModalShowFun(false);\n      }}\n    >\n      <ul>{options}</ul>\n      {otherItems()}\n    </div>\n  );\n};\n\nHardAndPetsUI.propTypes = {\n  setInfo: PropTypes.func,\n};\n//默认值\nHardAndPetsUI.defaultProps = {\n  setInfo: () => { },\n};\nexport default connect(\n  (state) => ({\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareList: state.hardwareReduce.hardwareList,\n    userMessage: state.userReduce,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum, setSelectHardwareType }\n)(HardAndPetsUI);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/InitDate.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/index.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/headerItem.jsx",["854","855","856","857","858","859","860","861","862","863"],"import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Image,\n  Layout,\n  Dropdown,\n  Col,\n  Row,\n  Avatar,\n  Space,\n  Card,\n  Menu,\n  Progress,\n} from \"antd\";\nimport { DownOutlined } from \"@ant-design/icons\";\n\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\nimport connectBle from \"./../../../assets/img/connectBle.png\";\nimport redcat from \"./../../../assets/images/redcat.png\";\nimport reddog from \"./../../../assets/images/reddog.png\";\nimport redother from \"./../../../assets/images/redother.png\";\n\nimport electronStore from \"../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaPredictReturnValueFun,\n} from \"../../../store/actions\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nimport \"./headerItem.less\";\nimport { catv12Predict } from \"../../../api\";\n\nconst { Header } = Layout;\nconst HeaderItem = ({\n  petMessage,\n  hardwareMessage,\n  timeNum = 15,\n  setMellaPredictReturnValueFun,\n}) => {\n  let history = useHistory();\n  let storage = window.localStorage;\n  let {\n    petName,\n    patientId,\n    firstName,\n    lastName,\n    gender,\n    breedName,\n    birthday,\n    weight,\n    url,\n    petSpeciesBreedId,\n    petId,\n    isWalkIn,\n  } = petMessage;\n  let {\n    mellaConnectStatus,\n    mellaPredictValue,\n    mellaMeasureValue,\n    mellaMeasurePart,\n    rulerConnectStatus,\n    biggieConnectStatus,\n    selectHardwareInfo,\n    selectHardwareType,\n  } = hardwareMessage;\n  const [value, setValue] = useState(0);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    let random = null;\n    if (timeNum === 15) {\n      random = 7;\n    } else if (timeNum === 30) {\n      random = 3.5;\n    } else {\n      random = 1.75;\n    }\n    setValue(value + random);\n  };\n  //展示宠物照片方法\n  const petPicture = (size) => {\n    if (_.isEmpty(url)) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <Avatar src={redcat} size={size} />;\n      } else if (\n        petSpeciesBreedId === 12001 ||\n        _.inRange(petSpeciesBreedId, 136, 456)\n      ) {\n        return <Avatar src={reddog} size={size} />;\n      } else if (petSpeciesBreedId === 13001) {\n        return <Avatar src={redother} size={size} />;\n      } else {\n        return <Avatar src={redother} size={size} />;\n      }\n    } else {\n      return <Avatar src={url} size={size} />;\n    }\n  };\n  //展示名字或id方法\n  const showNameOrId = () => {\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\n      return \"unknown\";\n    } else if (!_.isEmpty(petName)) {\n      return petName;\n    } else {\n      return patientId;\n    }\n  };\n  //展示主人名字方法\n  const ownerName = () => {\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\n      return \"unknown\";\n    } else {\n      return firstName + \" \" + lastName;\n    }\n  };\n  //计算宠物年龄\n  const calculateAge = () => {\n    if (_.isEmpty(birthday)) {\n      return \"unknown\";\n    } else {\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\n    }\n  };\n  //计算宠物体重\n  const calculateWeight = () => {\n    if (_.isEmpty(weight)) {\n      return \"unknown\";\n    } else {\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\n    }\n  };\n  //头部弹出卡片\n  const cardItem = () => {\n    return (\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\n        <Menu.Item className=\"topItem\">\n          <div className=\"cardTopBox\">\n            <div className=\"topLeftBox\">\n              {petPicture(91)}\n              <p className=\"cardTitle\">{showNameOrId()}</p>\n              <p className=\"cardTitle\">{ownerName()}</p>\n            </div>\n            <div className=\"topRightBox\">\n              <p className=\"cardTitle\">{calculateAge()}</p>\n              <p className=\"cardTitle\">{calculateWeight()}</p>\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\n              <p className=\"cardTitle\">{breedName}</p>\n            </div>\n          </div>\n        </Menu.Item>\n        <Menu.Item key={\"editPetInfo\"} style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Edit Pet Profile</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export Temperature History</p>\n        </Menu.Item>\n        <Menu.Item style={{ paddingLeft: '8px' }}>\n          <p className=\"itemList\">Export All Vitals History</p>\n        </Menu.Item>\n      </Menu>\n    );\n  };\n  const clilkMenu = (item) => {\n    console.log(\"---item\", item);\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\n      //跳转到编辑宠物信息页面\n      history.push(\"/page9\");\n    }\n  };\n  //超过15s后调用接口\n  const prediction = () => {\n    let parame = {\n      ambient_temperature: 17,\n      data: mellaPredictValue,\n      deviceId: \"11111\",\n      sampling_rate: \"135ms\",\n    };\n    let url = \"/clinical/catv12Predict\";\n    catv12Predict(parame)\n      .then((res) => {\n        console.log(\"res\", res);\n        let ipcRenderer = window.electron.ipcRenderer;\n        if (res.message === \"Success\") {\n          let prediction = res.result.prediction.toFixed(2);\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\n          setMellaPredictReturnValueFun(num);\n          let tempArr = prediction.split(\".\");\n          let intNum = tempArr[0];\n          let flotNum = tempArr[1];\n          if (intNum.length < 2) {\n            intNum = \"0\" + intNum;\n          }\n          if (flotNum.length < 2) {\n            flotNum = \"0\" + flotNum;\n          }\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", {\n              command: \"42\",\n              arr: [intNum, flotNum],\n            });\n\n            timeID && clearTimeout(timeID);\n          }, 10);\n        } else {\n          const timeID = setTimeout(() => {\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n            clearTimeout(timeID);\n          }, 10);\n        }\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n      });\n  };\n  //判断仪器是否连接从而判断选择什么图片\n  const isConnect = () => {\n    const checkImage = () => {\n      if (mellaMeasurePart === \"腋温\") {\n        return AxillaryBluetooth;\n      } else if (mellaMeasurePart === \"耳温\") {\n        return EarBluetoothIcon;\n      } else {\n        return RectalBluetoothIcon;\n      }\n    };\n\n    if (electronStore.get(`${storage.userId}-isClical`)) {\n      return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\n        <Avatar size={40} src={BluetoothNotConnected} />\n      ) : (\n        <Progress\n          width={48}\n          type=\"circle\"\n          percent={value}\n          format={() => <Avatar size={40} src={checkImage()} />}\n        />\n      );\n    } else {\n      switch (selectHardwareType) {\n        case \"mellaPro\":\n          return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Progress\n              width={48}\n              type=\"circle\"\n              percent={value}\n              format={() => <Avatar size={40} src={checkImage()} />}\n            />\n          );\n        case \"biggie\":\n          return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        case \"tape\":\n          return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\n            <Avatar size={40} src={BluetoothNotConnected} />\n          ) : (\n            <Avatar size={40} src={connectBle} />\n          );\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (value === 105 && timeNum !== 60) {\n      prediction();\n    } else if (value === 105 && timeNum === 60) {\n      let ipcRenderer = window.electron.ipcRenderer;\n      const timeID = setTimeout(() => {\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\n        clearTimeout(timeID);\n      }, 10);\n    }\n    return () => { };\n  }, [value]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setValue(0);\n      timer = setInterval(tick, 1000);\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\n      clearInterval(timer);\n    } else if (mellaConnectStatus === \"disconnected\") {\n      setValue(0);\n    };\n    if (mellaConnectStatus === \"complete\") {\n      // let ipcRenderer = window.electron.ipcRenderer;\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [mellaConnectStatus]);\n\n  return (\n    <div className=\"headerBox\">\n      <Header style={{ background: \"#fff\", height: '100%' }}>\n        {_.isEmpty(petId) && !isWalkIn ? (\n          <></>\n        ) : (\n          <Row className=\"heardRow\" >\n            {/*头部左侧 */}\n            <Col flex={10}>\n              {isWalkIn ? (\n                <span className=\"walkInTitle\">Walk-In</span>\n              ) : (\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\n                  <div\n                    className=\"petMessageBox\"\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {petPicture(40)}\n                    <div className=\"petMessageBox\">\n                      <p className=\"petName\">\n                        {!_.isEmpty(petMessage.patientId)\n                          ? petMessage.patientId\n                          : \"unknown\"}\n                        ,{\" \"}\n                        {!_.isEmpty(petMessage.petName)\n                          ? petMessage.petName\n                          : \"unknown\"}\n                      </p>\n                      <DownOutlined\n                        style={{ fontSize: \"22px\", marginLeft: \"10px\" }}\n                      />\n                    </div>\n                  </div>\n                </Dropdown>\n              )}\n            </Col>\n            {/*头部右侧 */}\n            <Col flex={1}>\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\n            </Col>\n          </Row>\n        )}\n      </Header>\n    </div>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaPredictReturnValueFun,\n  }\n)(HeaderItem);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/exam.js",["864"],"/**\n * @file exam.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/exam`\n\n\n/**\n * @dec 体重保存\n * @param {*} params \n * @returns \n */\nexport const addClamantPetExam = (params) => {\n    return postJson(`${baseURL}/addClamantPetExam`, params)\n}\n\n/**\n * @dec 根据历史记录id获取全部的过程数据\n * @param {str} examId 历史记录id\n * @returns \n */\nexport const getClinicalDataByExamId = (examId) => {\n    return get(`${baseURL}/getClinicalDataByExamId/${examId}`, \"\")\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/user.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/backend.js",["865","866"],"/**\n * @file backend.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/backend 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/backend`\n\n\n/**\n * @dec 获取硬件的最新版本信息\n * @param {str} hardWareType 硬件类型 <br/>\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\n * @returns \n */\nexport const getOta = (hardWareType) => {\n    return get(`${baseURL}/getOta?type=${hardWareType}`)\n}","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/petall.js",["867"],"/**\n * @file petall.js\n * @authoe 胡邵杰\n * @dec https://www.mellaserver.com/api/mellaserver/petall 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n *\n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/petall`\n\n\n\n/**\n * @dec 根据组织获取所有宠物\n * @param {str} lastOrganization 组织id\n * @param {*} params\n * @returns\n */\nexport const pet_petall = (lastOrganization, params) => {\n  return postJson(`${baseURL}/pet/${lastOrganization}/petall`, params)\n}\n/**\n * @dec 根据用户id查询当前组织下的所有宠物\n * @param {*} params\n * @returns\n */\nexport const getPersonPetByUserId = (params) => {\n  return get(`${baseURL}/getPersonPetByUserId?userId=${params.userId}&orgId=${params.orgId}`);\n}\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/EzyVet.js",["868"],"/**\n * @file EzyVet.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { melladeskBaseUrl } from '../../config/config'\nconst baseURL = `${melladeskBaseUrl}/EzyVet`\n\n\n/**\n * @dec 重新获取令牌\n * @param {*} parames \n * @returns \n */\nexport const ezyvetauth = (parames) => {\n    return get(`${baseURL}/ezyvetauth`, parames)\n}\n\n\nexport const checkAndSaveAnimalList = (parames) => {\n    return postJson(`${baseURL}/checkAndSaveAnimalList`, parames)\n}\n\nexport const healthstatus = (paramId, petVitalId, parames) => {\n    return patch(`${baseURL}/healthstatus/${paramId}/${petVitalId}`, parames)\n}\n\n\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/melladesk/VetSpire.js",["869","870","871"],"/**\n * @file VetSpire.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { melladeskBaseUrl } from '../../config/config'\nconst baseURL = `${melladeskBaseUrl}/VetSpire`\n\n\n\nexport const selectExamByPatientId = (parames) => {\n    return postJson(`${baseURL}/selectExamByPatientId`, parames)\n}\n\n\nexport const updateVitalsTemperatureByVitalId = (parames) => {\n    return postJson(`${baseURL}/updateVitalsTemperatureByVitalId`, parames)\n}\n\n\nexport const selectLocations = (parames) => {\n    return postJson(`${baseURL}/selectLocations`, parames)\n}\n\n\nexport const selectProvidersByLocationId = (parames) => {\n    return postJson(`${baseURL}/selectProvidersByLocationId`, parames)\n}\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/new.js",["872","873"],"/**\n * @file new.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/new`\n\n\n/**\n * @dec 添加预约宠物\n * @param {*} params \n * @returns \n */\nexport const petall_subscribe = (params) => {\n    return postJson(`${baseURL}/petall/subscribe`, params)\n}\n\n/**\n * @dec 管理员添加医生\n * @param {string} userId 管理员id\n * @param {*} params \n * @returns \n */\nexport const admin_users = (userId, params) => {\n    return patch(`${baseURL}/admin/users/${userId}`, params)\n}\n\n\n/**\n * @dec 获取预约宠物\n * @param {*} params \n * @returns \n */\nexport const pet_subscribe_page = (params) => {\n    return postJson(`${baseURL}/pet/subscribe/page`, params)\n}\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/vetSpire.js",["874","875"],"/**\n * @file vetSpire.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/VetSpire`\n\n\n\n/**\n * @dec 根据vetspire中的api验证\n * @param params \n */\n\nexport const selectLocationsByOrganization = (params) => {\n    return postJson(`${baseURL}/selectLocationsByOrganization`, params)\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/userfeedback.js",["876","877"],"/**\n * @file userfeedback.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/userfeedback 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/userfeedback`\n\n\n/**\n * @dec bug提交\n * @param {*} params \n * @returns \n */\nexport const savefeedback = (params) => {\n    return postJson(`${baseURL}/savefeedback`, params)\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/clinical.js",["878","879"],"/**\n * @file clinical.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/clinical 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/clinical`\n\n\n/**\n * @dec 体重保存\n * @param {*} params \n * @returns \n */\nexport const addAllClinical = (params) => {\n    return postJson(`${baseURL}/addAllClinical`, params)\n}\n\n/**\n * @dec 1.2版本的猫预测\n * @param {*} params \n * @returns \n */\nexport const catv12Predict = (params) => {\n    return postJson(`${baseURL}/catv12Predict`, params)\n}","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/user.js",["880","881","882"],"/**\n * @file user.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/user 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { biggieBaseUrl } from '../../config/config'\nconst baseURL = `${biggieBaseUrl}/user`\n\n\nexport const changeLatestWorkplace = (userId, workplaceId, roleId = 2) => {\n    return get(`${baseURL}/changeLatestWorkplace/${userId}/${roleId}/${workplaceId}`,\n        '')\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/pet.js",["883","884","885"],"/**\n * @file pet.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/pet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { biggieBaseUrl } from '../../config/config'\nconst baseURL = `${biggieBaseUrl}/pet`\n\n\n\n\n\nexport const getPetInfoByRFID = (heardSearchText, lastOrganization) => {\n    return get(`${baseURL}/getPetInfoByRFID/${heardSearchText}/${lastOrganization}`, '')\n}\n\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/UnassignModal/UnassignModal.jsx",["886","887","888","889","890","891","892","893","894","895"],"import React, { Component } from 'react'\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\nimport './unassignModal.less'\nimport Draggable from \"react-draggable\";\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport {\n  getPetExamByDoctorId,\n  selectBreedBySpeciesId,\n  checkPatientId,\n  addDeskPet,\n  addAndSavePetExam,\n  deletePetExamByExamId,\n  listAllPetInfo\n} from './../../api';\n\nimport Close from \"./../../assets/img/close.png\";\n\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { mTop, px, MTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport MyModal from \"../../utils/myModal/MyModal\";\nimport Button from \"./../../utils/button/Button\";\n\nimport moment from \"moment\";\n\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\n\n\n\nexport default class UnassignModal extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n    workplaceId: storage.lastWorkplaceId,\n    loadingPets: false,\n  };\n\n  componentDidMount() {\n\n    if (this.props.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n\n\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('prevProps', prevProps, prevState);\n    if (this.props.assignVisible !== this.state.assignVisible) {\n      this.setState({\n        assignVisible: this.props.assignVisible\n      })\n    }\n    if (this.props.lastWorkplaceId !== this.state.workplaceId) {\n      this.setState({\n        petListData: [],\n        workplaceId: this.props.lastWorkplaceId\n      })\n\n      this.gerAllPetMsg();\n\n    }\n    if (this.props.seleceEmergencies !== this.state.seleceEmergencies) {\n      this.setState({\n        seleceEmergencies: this.props.seleceEmergencies\n      })\n    }\n\n  }\n\n\n\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n\n    getPetExamByDoctorId(storage.userId)\n      .then((res) => {\n        console.log(\"---res\", res);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let day = moment().diff(moment(createTime), \"day\");\n              // console.log(day);\n              if (day > 3) {\n                continue;\n              }\n\n              let Tem = temperature;\n              try {\n                if (clinicalDataEntity) {\n                  Tem = temperature || clinicalDataEntity.data0;\n                }\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n                day,\n              };\n\n              historys.push(str);\n            }\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          this.setState({\n            historyData,\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    selectBreedBySpeciesId({ speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n          selectBreedBySpeciesId({ speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    console.log('获取列表');\n    this.setState({\n      loadingPets: true,\n    })\n    listAllPetInfo(params)\n      .then((res) => {\n        console.log('res33: ', res);\n        this.setState({\n          loadingPets: false,\n        })\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadingPets: false,\n        })\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n          checkPatientId(datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n\n      addDeskPet(this.state.assignPatientId, petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n\n            addAndSavePetExam(that.state.seleceEmergencies.historyId, parmes)\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  this.props.success(true)\n\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        visible={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      deletePetExamByExamId(key, '')\n        .then(\n          (res) => {\n            if (res.flag === true) {\n              console.log(\"删除成功\");\n              const historyData = [...this.state.historyData];\n              console.log(historyData);\n              this.setState({\n                historyData: historyData.filter((item) => item.historyId !== key),\n              });\n            } else {\n              console.log(\"删除失败\");\n            }\n          }\n        );\n    };\n\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n\n    return (\n      <div id='unassignedModal111'>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                          this.props.onChangeVisible(false)\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this.state.loadingPets ?\n                    <div style={{ display: 'flex', width: '100%', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\n                      <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\n                        <LoadingOutlined style={{ fontSize: 30, color: '#000', marginTop: mTop(-30), }} />\n                      </div>\n                      <p style={{ color: '#000' }}>\n                        {'loading...'}\n                      </p>\n                    </div> :\n                    this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                        this.props.onChangeVisible(false)\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n\n                          addAndSavePetExam(seleceEmergencies.historyId, parmes)\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                this.props.success(true)\n\n                                this.setState({\n                                  assignVisible: false,\n                                });\n                                this.props.onChangeVisible(false)\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n        {this._modal()}\n      </div>\n\n    )\n  }\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/VetSpire.js",["896","897","898"],"/**\n * @file VetSpire.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/VetSpire 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { biggieBaseUrl } from '../../config/config'\nconst baseURL = `${biggieBaseUrl}/VetSpire`\n\n\n\nexport const vetspireGetPetLatestExam = (params) => {\n    return postJson(`${baseURL}/vetspireGetPetLatestExam`, params)\n}\n\n\n\n\nexport const vetspireUpdateWeight = (params) => {\n    return postJson(`${baseURL}/vetspireUpdateWeight`, params)\n}\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellabiggie/EzyVet.js",["899","900"],"/**\n * @file EzyVet.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/EzyVet 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del, patch } from '../ezyvetApi'\nimport { biggieBaseUrl } from '../../config/config'\nconst baseURL = `${biggieBaseUrl}/EzyVet`\n\n\n\n\nexport const ezyvetGetPetLatestExam = (params) => {\n    return get(`${baseURL}/ezyvetGetPetLatestExam`, params)\n}\n\n\nexport const ezyvetUpdateWeight = (paramId, params) => {\n    return patch(`${baseURL}/ezyvetUpdateWeight/${paramId}`, params)\n}\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/components/Biggie.jsx",["901","902","903","904"],"import React, { } from 'react'\nimport PropTypes from 'prop-types';\nimport { px, mTop } from '../../../utils/px'\nimport cir from '../../../assets/images/cir.png'\nimport xia from '../../../assets/img/xia.png'\nimport './biggie.less'\n/**\n *\n * @param {string} weight   体重值\n * @param {string} bodyFat   体脂\n * @param {string} score   健康指数\n * @param {string} impedance   阻抗值\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\n * @param {function} onPress   点击按钮调用的函数\n * @returns\n */\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\n\n  return (\n    <div className=\"biggie\" >\n      <div className=\"top\">\n\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='cen'>\n          <div style={{ borderRadius: px(75) }} className='lT'>\n            <img\n              src={cir}\n              width={'100%'}\n            />\n          </div>\n          <div className='cTText' style={{ fontWeight: '800' }}>{weight}</div>\n          <div className='cTTextUnit'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\n          <div className='cenCText'>Weight</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(6) }}\n          />\n        </div>\n        <div style={{ borderRadius: px(150) }} className='biggiel'>\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\n          </div>\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\n          <img\n            src={xia}\n            style={{ width: px(20), marginBottom: px(5) }}\n          />\n        </div>\n      </div>\n      <div className='biggiefoot'>\n        {isHaveSaveBtn &&\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                discardOnPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\n            </div>\n            <div\n              className='biggiefootbtn'\n              onClick={() => {\n                onPress()\n              }}\n            >\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\n            </div>\n          </div>\n        }\n        <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10), height: '28px' }}>{(impedance && impedance > 0) ? `Impedance ${impedance} Ohms` : ''}</div>\n      </div>\n    </div>\n  )\n\n}\n\nBiggie.propTypes = {\n  weight: PropTypes.string || PropTypes.number,\n  bodyFat: PropTypes.number || PropTypes.string,\n  score: PropTypes.number || PropTypes.string,\n  impedance: PropTypes.number || PropTypes.string,\n  issave: PropTypes.bool,\n  onPress: PropTypes.func,\n  isIbs: PropTypes.bool\n}\nexport default Biggie\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/biggiePage/components/linkEquipment.jsx",["905","906","907","908","909","910","911","912","913","914","915"],"import React, { useEffect, useState } from \"react\";\nimport { Image, Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  const [saveNum, setSaveNum] = useState(0);\n  return (\n    <>\n      <div className={\"linkBox\"}>\n        <div className=\"startBox\">\n          <img src={biggieonscale}></img>\n          <p className=\"startTitle\">Ready, place pet onto scale</p>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/userType.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/petType.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/timer/index.jsx",["916","917","918","919","920"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Progress } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Results Processing\n        </p>\n      </div>\n      <div className=\"middleBox\" style={{margin:px(-100)}}>\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\n          Please wait for\n          <br />\n          accurate results\n        </p>\n      </div>\n      <div>\n        <Progress type=\"circle\" percent={60} format={() => '06:01:59'} width={270} strokeWidth={12} />\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(TimerPage);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/swabPetEar/index.jsx",["921","922","923","924","925"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\n\nconst SwabPetEar = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  let {\n    petSpeciesBreedId,\n  } = petMessage;\n  const [value, setValue] = useState(1);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const imagetypeEvent = () => {\n    if (value === 1) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatRightEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogRightEar} alt=\"\" />;\n      } else {\n        return <img src={DogRightEar} alt=\"\" />;\n      }\n    } else {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatLeftEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogLeftEar} alt=\"\" />;\n      } else {\n        return <img src={DogLeftEar} alt=\"\" />;\n      }\n    }\n  }\n\n  const onClick = () => {\n    if (value === 1) {\n      setValue(2);\n    } else {\n      cutPageType('experimentalPage');\n    }\n  }\n\n  // useEffect(() => {\n  //   imagetypeEvent();\n  // },[value])\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Swab Pet's Ear\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {imagetypeEvent()}\n      </div>\n      <div className=\"radioBox\">\n        <Radio.Group onChange={onChange} value={value}>\n          <Radio value={1}>Right Ear</Radio>\n          <Radio value={2}>Left Ear</Radio>\n        </Radio.Group>\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\n      </div>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(SwabPetEar);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/linkEquipment/index.jsx",["926","927","928","929"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/otterEQ/components/experimental/index.jsx",["930","931","932","933","934","935","936"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst ExperimentalPage = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  const [value, setValue] = useState(1);\n\n  const cutTitle = () => {\n    switch (value) {\n      case 1:\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\n      case 2:\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\n      case 3:\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\n      case 4:\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\n      default:\n        break;\n    }\n  }\n\n  const cutImage = () => {\n    switch (value) {\n      case 1:\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 2:\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 3:\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 4:\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      default:\n        break;\n    }\n  }\n\n  const onClick = () => {\n    if (value !== 4) {\n      setValue(value + 1)\n    } else {\n      cutPageType('timerPage');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          {cutTitle()}\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {cutImage()}\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(ExperimentalPage);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/mabelPage/components/linkEquipment/index.jsx",["937","938","939","940","941","942"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Input, Card, List } from \"antd\";\nimport { InfoCircleFilled } from \"@ant-design/icons\";\n\nimport scale from \"../../../../assets/img/scale.png\"\n\nimport electronStore from \"../../../../utils/electronStore\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setSelectHardwareType\n} from \"../../../../store/actions\";\nimport _ from \"lodash\";\n\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage, setSelectHardwareType }) => {\n  let history = useHistory();\n  const data = [\n    {\n      title: 'Last 24 hrs',\n      number: '1'\n    },\n    {\n      title: 'Last 7 days',\n      number: '3'\n    },\n    {\n      title: 'Days to goal',\n      number: '33'\n    },\n    {\n      title: 'Ideal Weight',\n      number: '42'\n    },\n  ];\n  const [planType, setPlanType] = useState(false);\n\n  useEffect(() => {\n    console.log('electronStore.get(`${petMessage.petId}-planType`): ', electronStore.get(`${petMessage.petId}-planType`));\n    setPlanType(electronStore.get(`${petMessage.petId}-planType`) ? true : false);\n  }, [petMessage.petId]);\n\n\n\n  return (\n    <div className=\"contentBox\">\n      {\n        planType ?\n          (\n            <>\n              <div className=\"topBox annulusBox\">\n                <div className=\"excircle\">\n                  <div className=\"circleContentBox\">\n                    <img src={scale} alt=\"\" />\n                    <div className=\"floatBox\">\n                      <div className=\"weightTitle\">\n                        <p>70</p>\n                        <p>lbs</p>\n                      </div>\n                      <div className=\"identification\">\n                        <p>Current Weight</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"middleBox\">\n                <div className=\"bodyState\">\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Fat Percent: 88%</p>\n                  </div>\n                  <div className=\"item\">\n                    <InfoCircleFilled style={{ fontSize: '20px' }} />\n                    <p>Body Condition Score: 9</p>\n                  </div>\n                </div>\n                <p className=\"hintTitle\">23 lbs over ideal weight</p>\n              </div>\n              <div className=\"bottomBox\">\n                <List\n                  dataSource={data}\n                  renderItem={(item) => (\n                    <div className=\"listBox\">\n                      <List.Item>\n                        <div className=\"item\">\n                          <div className=\"top\">\n                            <p>{item.title}</p>\n                          </div>\n                          <div className=\"bottom\">\n                            <p>{item.number}</p>\n                          </div>\n                        </div>\n                      </List.Item>\n                    </div>\n                  )}\n                />\n              </div>\n            </>\n          )\n          :\n          (\n            <div className=\"planBox\">\n              <p className=\"title\">\n                Luna is not enrolled<br />\n                in a feeding plan\n              </p>\n              <p className=\"recommendedTitle\">A Mabel smart bowl scale is recommended.</p>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  block\n                  onClick={() => {\n                    setSelectHardwareType('prescribePlan');\n                  }}\n                >\n                  Prescribe Feeding Plan\n                </Button>\n              </div>\n            </div>\n          )\n      }\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setSelectHardwareType\n  }\n)(LinkEquipment);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/selectPetModal/index.jsx",["943","944","945","946"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Avatar,\n  List\n} from \"antd\";\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport redcat from \"../../assets/images/redcat.png\";\nimport reddog from \"../../assets/images/reddog.png\";\nimport redother from \"../../assets/images/redother.png\";\n\n\nimport { calculateAge, petPicture } from '../../utils/commonFun';\n\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport './index.less';\nimport { listAllPetInfo } from '../../api';\n\nconst SelectPet = ({ visible, width, title, destroyOnClose, value, onSelect, onCancel, onLoading, onAddPet }) => {\n  console.log('value: ', value);\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [petList, setPetList] = useState([]);//当前组织下所有宠物\n  const [searchPetList, setSearchPetList] = useState([]);//搜索宠物列表\n  const [searchValue, setSearchValue] = useState('');//搜索框的值\n  const [selePetValue, setSelePetValue] = useState();//选中的宠物值\n  const [selePetId, setSelePetId] = useState('');//选中的宠物id\n  const [loading, setLoading] = useState(false);//数据加载\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n  //获取所有宠物\n  const getAllPet = () => {\n    setLoading(true);\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    listAllPetInfo(params)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let newData = [];\n          _.map(res.data, (item, index) => {\n            newData.push({\n              petId: item.petId,\n              petIndex: index,\n              birthday: item.birthday,\n              breedName: item.breedName,\n              patientId: item.patientId,\n              petName: item.petName,\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              gender: item.gender,\n              url: item.url,\n            })\n          });\n          setPetList(_.orderBy(newData, ['petIndex'], ['desc']));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      })\n  }\n  //确认选择\n  const handleOk = () => {\n    if (_.isEmpty(selePetValue)) {\n      message.error('Please choose a pet!');\n    } else {\n      onSelect(selePetValue);\n      setIsModalVisible(visible);\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //输入框输入值\n  const onChange = (e) => {\n    setSearchValue(e.target.value);\n  }\n  //展示宠物照片\n  const shoePetPicture = (petSpeciesBreedId, url) => {\n    if (_.isEmpty(url)) {\n      switch (petPicture(petSpeciesBreedId)) {\n        case 'cat':\n          return redcat\n        case 'dog':\n          return reddog\n        case 'other':\n          return redother\n        default:\n          return redother\n      }\n    } else {\n      return url\n    }\n  }\n  //选择宠物事件\n  const selectPet = (petId, item) => {\n    setSelePetValue(item);\n    setSelePetId(petId);\n  }\n  //搜索宠物名字或patientId\n  const searchPetByPetNameOrPatientId = () => {\n    let list = petList;\n    let searchData = [];\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n      if (\n        `${name}`.indexOf(searchValue.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(searchValue.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n    setSearchPetList(searchData);\n  }\n  //取消或添加宠物\n  const handleCancelOrAddPet = () => {\n    onAddPet(false);\n    setIsModalVisible(visible);\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    getAllPet();\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (searchValue.length > 0) {\n      searchPetByPetNameOrPatientId();\n    }\n    return (() => { })\n  }, [searchValue]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  useEffect(() => {\n    if (_.find(petList, ['petId', value]) !== undefined) {\n      setSelePetId(_.toString(value));\n      setSelePetValue(_.find(petList, ['petId', value]));\n    }\n    return (() => { })\n  }, [value, petList]);\n\n  return (\n    <>\n      <Modal\n        title=\"Assign Measurement\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"selectPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className=\"searchBox\">\n              <Input\n                placeholder=\"Search Name\"\n                bordered={false}\n                allowClear={true}\n                prefix={<SearchOutlined />}\n                onChange={onChange}\n              />\n            </div>\n            <div className='list'>\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={searchValue.length > 0 ? searchPetList : petList}\n                renderItem={(item, index) => (\n                  <List.Item\n                    extra={selePetId === item.petId ? <span className=\"search\">&#xe614;</span> : null}\n                    onClick={() => selectPet(item.petId, item)}\n                  >\n                    <List.Item.Meta\n                      avatar={<Avatar src={shoePetPicture(item.petSpeciesBreedId, item.url)} />}\n                      title={\n                        <div className='petListItemTitle'>\n                          {item.petName ? item.petName : 'unKnown'},{item.patientId ? item.patientId : 'unKnown'}\n                        </div>\n                      }\n                      description={\n                        <div>\n                          {calculateAge(item.birthday) === 'unknown' ? 'unknown' : `${calculateAge(item.birthday)} yrs`},\n                          {item.gender === 0 ? \"Male\" : \"Venter\"},\n                          {item.breedName ? item.breedName : 'unKnow'}\n                        </div>\n                      }\n                    />\n                  </List.Item>\n\n                )}\n              />\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancelOrAddPet}\n                >\n                  +Add New Pet\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n};\n\nexport default SelectPet;\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/addPetModal/index.jsx",["947"],"import React, { useEffect, useState } from 'react'\nimport {\n  Modal,\n  Input,\n  message,\n  Spin,\n  Button,\n  Select,\n} from \"antd\";\n\nimport UploadImg from \"../../utils/uploadImg/UploadImg\";\n\nimport {\n  checkPatientId,\n  selectBreedBySpeciesId,\n} from '../../api';\n\nimport _ from 'lodash';\n\nimport './index.less';\n\nconst AddPetModal = ({ visible, width, title, destroyOnClose, value, onConfirm, onCancel, onLoading }) => {\n  const { Option } = Select;\n  let storage = window.localStorage;\n  const [isModalVisible, setIsModalVisible] = useState(false);//控制弹窗的显隐\n  const [isdestroyOnClose, setIsdestroyOnClose] = useState(false);//是否清除弹窗里面的内容\n  const [isWidth, setIsWidth] = useState(520);//弹窗的宽度\n  const [loading, setLoading] = useState(false);//加载\n  const [breedList,  setBreedList] = useState([]);//\n  const [imageId, setImageId] = useState('');//上传后图片id\n  const [patientId, setPatientId] = useState('');//用户输入的病人id\n  const [petName, setPetName] = useState('');//用户输入的宠物名字\n  const [ownerName, setOwnerName] = useState('');//用户输入的主人名字\n  const [breedId, setBreedId] = useState('');//用户选择的宠物品种id\n  const [petAge, setPetAge] = useState('');//用户输入的宠物年龄\n  const [petWeight, setPetWeight] = useState('');//用户输入的宠物体重\n  const [btnLoading, setBtnLoading] = useState(false);//按钮加载\n\n\n  //确认选择\n  const handleOk = () => {\n    if (patientId === '') {\n      message.error('Please enter the patientId!');\n    } else {\n      setIsModalVisible(visible);\n      onConfirm({\n        imageId: imageId,\n        patientId: patientId,\n        petName: petName,\n        petSpeciesBreedId: breedId,\n        age: petAge,\n        weight: petWeight,\n        owner: ownerName,\n      })\n    }\n  };\n  //关闭弹窗\n  const handleCancel = () => {\n    onCancel(false);\n    setIsModalVisible(visible);\n  };\n  //判断用户输入的patientId是否存在\n  const getPetInfoByPatientId = () => {\n    setLoading(true);\n    let datas = {\n      patientId: patientId,\n      doctorId: storage.userId\n    }\n    if (storage.lastWorkplaceId) {\n      datas.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      datas.organizationId = storage.lastOrganization\n    }\n    checkPatientId(datas)\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === false) {\n          message.error('The patient ID already exists, please replace it !');\n        } else {\n          message.success('The patientId can be used ~')\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        message.error('Abnormal interface');\n      })\n\n  }\n  //获取宠物品种\n  const selectBreed = () => {\n    setLoading(true);\n    selectBreedBySpeciesId({ speciesId: null })\n      .then((res) => {\n        setLoading(false);\n        if (res.msg === 'success') {\n          let arr = [];\n          _.map(res.petlist, (item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n            };\n            arr.push(data);\n          });\n          setBreedList(arr);\n        } else {\n          message.error('Failed to obtain pet breed information!');\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  }\n\n  useEffect(() => {\n    if (visible === true || visible === false) {\n      setIsModalVisible(visible);\n    } else {\n      setIsModalVisible(false);\n    }\n    return (() => { })\n  }, [visible]);\n\n  useEffect(() => {\n    if (destroyOnClose === true) {\n      setIsdestroyOnClose(destroyOnClose);\n    }\n    if (_.isNumber(width)) {\n      setIsWidth(width)\n    }\n    return (() => { })\n  }, []);\n\n  useEffect(() => {\n    selectBreed();\n  }, []);\n\n  useEffect(() => {\n    if (onLoading === true || onLoading === false) {\n      setBtnLoading(onLoading);\n    } else {\n      setBtnLoading(false);\n    }\n    return (() => { })\n  }, [onLoading]);\n\n  return (\n    <>\n      <Modal\n        title=\"Add a Pet\"\n        visible={isModalVisible}\n        onCancel={handleCancel}\n        centered\n        maskClosable={false}\n        footer={null}\n        width={isWidth}\n        destroyOnClose={isdestroyOnClose}\n        className=\"addPetModal\"\n      >\n        <Spin spinning={loading}>\n          <div className='modalContentBox'>\n            <div className='petMsgBox'>\n              <div className='addPhoto'>\n                <UploadImg\n                  getImg={(val) => {\n                    setImageId(val.imageId);\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Patient ID:</p>\n                <Input\n                  value={patientId}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPatientId(e.target.value)\n                  }}\n                  onBlur={() => {\n                    if (patientId.length > 0) {\n                      getPetInfoByPatientId();\n                    }\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Name:</p>\n                <Input\n                  value={petName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetName(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Owner Name:</p>\n                <Input\n                  value={ownerName}\n                  bordered={false}\n                  onChange={(e) => {\n                    setOwnerName(e.target.value)\n                  }}\n                />\n              </div>\n\n              <div className=\"item\">\n                <p>Breed:</p>\n                <div className='selectBox'>\n                  <Select\n                    showSearch\n                    style={{ width: \"100%\" }}\n                    bordered={false}\n                    value={breedId}\n                    placeholder=\"Search to Select\"\n                    optionFilterProp=\"children\"\n                    listHeight={256}\n                    onSelect={(value, data) => setBreedId(value)}\n                    filterOption={(input, option) =>\n                      option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                      0\n                    }\n                    filterSort={(optionA, optionB) =>\n                      optionA.children\n                        .toLowerCase()\n                        .localeCompare(optionB.children.toLowerCase())\n                    }\n                  >\n                    {\n                      _.map(breedList, (item, index) => (\n                        <Option key={item.petSpeciesBreedId}>{item.breedName}</Option>\n                      ))\n                    }\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"item\">\n                <p>Pet Age:</p>\n                <Input\n                  value={petAge}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetAge(e.target.value)\n                  }}\n                />\n              </div>\n              <div className=\"item\">\n                <p>Pet Weight:</p>\n                <Input\n                  value={petWeight}\n                  bordered={false}\n                  onChange={(e) => {\n                    setPetWeight(e.target.value)\n                  }}\n                />\n                <div className=\"unit\">{`kg`}</div>\n              </div>\n            </div>\n            <div className='foot'>\n              <div className=\"btnBox\">\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"primary\"\n                  shape=\"round\"\n                  size=\"large\"\n                  block\n                  onClick={handleOk}\n                  loading={btnLoading}\n                >\n                  Confirm\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    </>\n  );\n\n};\n\nexport default AddPetModal;\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/historyTable/index.jsx",["948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\n\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\nimport Delete from \"./../../assets/img/Delete.png\";\n\nimport { mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport { deletePetExamByExamId, getPetExamByPetId, updatePetExam } from \"../../api\";\n\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport { useThrottleFn, useDebounceFn, useDebounceEffect } from 'ahooks';\n\nimport \"./index.less\";\n\nconst HistoryTable = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n  saveNum = 0,\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\n}) => {\n  let { petId } = petMessage;\n  let storage = window.localStorage;\n  let draggleRef = React.createRef();\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [reRender, setReRender] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const [loading, setLoading] = useState(false);//加载\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n  const [isMore, setIsMore] = useState(true); // 是否还有数据 false-已经到底\n  //体重表格渲染\n  const weightColumns = [\n    {\n      title: \"Data\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: \"Weight\",\n      dataIndex: \"weight\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\n      ),\n    },\n\n    {\n      title: \"BF%\",\n      dataIndex: \"fat\",\n      key: \"fat\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"BCS\",\n      dataIndex: \"bodyConditionScore\",\n      key: \"bodyConditionScore\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"Note\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //温度表格渲染\n  const TemperatureColumns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            style={{ cursor: \"pointer\" }}\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //选择表格colum渲染\n  const columType = () => {\n    switch (tableColumnType) {\n      case \"temperature\":\n        return TemperatureColumns;\n      case \"weight\":\n        return weightColumns;\n      default:\n        break;\n    }\n  };\n  //判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //获取历史宠物数据\n  const { run: getPetTemperatureData } = useDebounceFn((currPage) => {\n    setLoading(true);\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: tableColumnType === \"temperature\" ? 0 : 1,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        setLoading(false);\n        setTotal(res.data.totalCount);\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, { wait: 0 });\n\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史记录\n  const deletePetMessage = (examId) => {\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.historyTableStyle .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useDebounceEffect(() => {\n    setCurrPage(1);\n    setPetData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n  }, [petId], { wait: 0 });\n\n  useEffect(() => {\n    if (reRender !== saveNum) {\n      setCurrPage(1);\n      setPetData([]);\n      setTotal(0);\n      setReRender(saveNum);\n      getPetTemperatureData(1);\n    }\n    return () => { };\n  }, [saveNum]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n    return (() => { });\n  }, []);\n\n  return (\n    <div className=\"tableContainer\" onScrollCapture={onScrollCapture}>\n      <Table\n        rowKey={\"examId\"}\n        columns={columType()}\n        dataSource={petData}\n        pagination={false}\n        loading={loading}\n        scroll={{\n          y: '80%'\n        }}\n        className=\"historyTableStyle\"\n      />\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        visible={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(HistoryTable);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/uploadImg/UploadImg.js",["965"],"\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nimport './uploadImg.less'\nimport selectphoto from './../../assets/images/sel.png'\n\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\n\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\n  let cursor = !disable ? 'default' : 'no-drop'\n  return (\n\n    <div id=\"uploadImg\">\n      <div className=\"ciral\"\n        onClick={() => {\n          if (disable) {\n            return\n          }\n          let file = document.getElementById('img')\n          file.click();\n        }}\n        style={{\n          width: imgWidth,\n          height: imgWidth,\n          borderRadius: imgWidth,\n          backgroundImage: backgroundImage,\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: `auto ${imgWidth}`,\n          cursor: cursor\n\n        }}\n      >\n\n        <input type=\"file\"\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\n          className=\"uploadImg\"\n          id=\"img\"\n          style={{ display: 'none' }}\n          onChange={(e) => {\n            console.log(e);\n            let $target = e.target || e.srcElement\n            if ($target.files.length === 0) {\n              return;\n            }\n            let file = $target.files[0]\n            var reader = new FileReader()                   //创建文件阅读器实例\n            reader.readAsDataURL(file)\n            reader.onload = (data) => {\n              let res = data.target || data.srcElement\n              console.dir(document.getElementsByClassName('ciral')[0]);\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\n              // document.getElementById('touxiang').src = res.result\n\n\n              const formData = new FormData();\n              formData.append('img', file);\n              fetch(`${url}/image/uploadImage`, {\n                method: 'POST',\n                headers: {\n                },\n                body: formData\n              })\n                .then((response) => response.json())\n                .then((res) => {\n                  console.log('上传的结果', res);\n                  if (res.flag === true) {\n                    getImg(res.data)\n                  }\n                })\n                .catch((err) => {\n                  console.log(err);\n                });\n            }\n\n          }} />\n        <p>{text}</p>\n      </div>\n\n    </div>\n  )\n}\nUploadImg.propTypes = {\n  imgWidth: PropTypes.string,\n  text: PropTypes.string,\n  getImg: PropTypes.func,\n  imgUrl: PropTypes.string,\n  disable: PropTypes.bool\n}\nUploadImg.defaultProps = {\n  imgWidth: '120px',\n  text: 'Add Photo',\n  disable: false\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\n}\nexport default UploadImg","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/commonFun.js",["966","967","968","969","970","971","972","973","974","975"],"import _ from 'lodash';\nimport moment from 'moment';\n\n/**\n * description: 摄氏度转华氏度,根据入参来保留小数点位数\n * @param {Number} celsius 摄氏度\n * @param {Number} decimal 小数点位数\n * @return {Number} 华氏度\n */\nfunction CtoF(celsius, decimal = 1) {\n  let fahrenheit = (celsius * 1.8) + 32;\n  return parseFloat(fahrenheit.toFixed(decimal));\n}\n/**\n * description: 华氏度转摄氏度,根据入参来保留小数点位数\n * @param {Number} fahrenheit 华氏度\n * @param {Number} decimal 小数点位数\n * @return {Number} 摄氏度\n */\nfunction FtoC(fahrenheit, decimal = 1) {\n  let celsius = (fahrenheit - 32) / 1.8;\n  return parseFloat(celsius.toFixed(decimal));\n}\n/**\n * description: 千克转磅,根据入参来保留小数点位数\n * @param {Number} kg 千克\n * @param {Number} decimal 小数点位数\n * @return {Number} 磅\n */\nfunction KgtoLb(kg, decimal = 2) {\n  let pound = kg * 2.2046;\n  return parseFloat(pound.toFixed(decimal));\n}\n/**\n * description: 磅转千克,根据入参来保留小数点位数\n * @param {Number} lb 磅\n * @param {Number} decimal 小数点位数\n * @return {Number} 千克\n *\n */\nfunction LbtoKg(lb, decimal = 2) {\n  let kilogram = lb / 2.2046;\n  return parseFloat(kilogram.toFixed(decimal));\n}\n/**\n * description: 克转毫升,根据入参来保留小数点位数\n * @param {Number} gram 克\n * @param {Number} decimal 小数点位数\n * @return {Number} 毫升\n */\nfunction GToMl(gram, decimal = 2) {\n  let milliliter = gram\n  return parseFloat(milliliter.toFixed(decimal));\n}\n/**\n * description: 毫升转克,根据入参来保留小数点位数\n * @param {Number} ml 毫升\n * @param {Number} decimal 小数点位数\n * @return {Number} 克\n */\nfunction MltoG(ml, decimal = 2) {\n  let gram = ml;\n  return parseFloat(gram.toFixed(decimal));\n}\n/**\n * @description: 克转盎司,根据入参来保留小数点位数\n * @param {Number} gram 克\n * @param {Number} decimal 小数点位数\n * @return {Number} 盎司\n */\nfunction GToOz(gram, decimal = 2) {\n  let ounce = gram / 28.3495;\n  return parseFloat(ounce.toFixed(decimal));\n}\n/**\n * @description: 盎司转克,根据入参来保留小数点位数\n * @param {Number} ounce 盎司\n * @param {Number} decimal 小数点位数\n * @return {Number} 克\n */\nfunction OztoG(ounce, decimal = 2) {\n  let gram = ounce * 28.3495;\n  return parseFloat(gram.toFixed(decimal));\n}\n/**\n * description: 厘米转英寸,根据入参来保留小数点位数\n * @param {Number} cm 厘米\n * @param {Number} decimal 小数点位数\n * @return {Number} 英寸\n */\nfunction CmtoIn(cm, decimal = 2) {\n  let inch = cm / 2.54;\n  return parseFloat(inch.toFixed(decimal));\n}\n/**\n * description: 英寸转厘米,根据入参来保留小数点位数\n * @param {Number} inch 英寸\n * @param {Number} decimal 小数点位数\n * @return {Number} 厘米\n */\nfunction IntoCm(inch, decimal = 2) {\n  let cm = inch * 2.54;\n  return parseFloat(cm.toFixed(decimal));\n}\n/**\n * @description: 计算宠物年龄\n * @param {string} birthday 宠物生日\n * @return {number | string} age | ‘unknown’\n */\nexport const calculateAge = (birthday) => {\n  if (_.isEmpty(birthday)) {\n    return \"unknown\";\n  } else {\n    return moment().diff(moment(birthday), \"years\");\n  }\n};\n/**\n * @description: 没有上传照片的宠物头像展示\n * @param {Number} petSpeciesBreedId 宠物品种id\n * @return {string} 'cat' 'dog' 'other'\n */\nexport const petPicture = (petSpeciesBreedId) => {\n  if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n    return 'cat';\n  } else if (\n    petSpeciesBreedId === 12001 ||\n    _.inRange(petSpeciesBreedId, 136, 456)\n  ) {\n    return 'dog';\n  } else if (petSpeciesBreedId === 13001) {\n    return 'other';\n  } else {\n    return 'other';\n  }\n}\n/**\n * @dec 判断版本1是否大于版本2\n * @param {str} version1 版本号1,格式必须为1.0.0\n * @param {*} version2 版本号2,格式必须为1.0.0\n * @returns 版本1是否大于版本2\n */\nexport const versionComarision = (version1, version2) => {\n  let version1Arr = version1.split('.')\n  let version2Arr = version2.split('.')\n  function num(params) {\n    return parseInt(params)\n  }\n  if (num(version1Arr[0]) >= num(version2Arr[0])\n    && num(version1Arr[1]) >= num(version2Arr[1])\n    && num(version1Arr[2]) > num(version2Arr[2])\n  ) {\n    return true\n  } else {\n    return false\n  }\n}\n/**\n *\n * @param {*} time\n * @returns\n */\n\nexport const transitionTime = (time) => {\n\n  let timeDifference = new Date().getTimezoneOffset();\n  let newTime = moment(time).subtract(timeDifference, 'm').format();\n  return newTime;\n\n}\n\n\n\n\n\n\n\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/scanPet.jsx",["976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008"],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/LinkEquipment.jsx",["1009","1010","1011","1012","1013","1014"],"import React, {\n    useEffect,\n    useState,\n} from 'react';\nimport { Image, Layout } from 'antd';\nimport { connect } from 'react-redux';\nimport {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun\n} from '../../../store/actions';\nimport _ from 'lodash';\nimport './LinkEquipment.less';\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n    let { mellaConnectStatus } = hardwareMessage;\n    return (\n\n        <Content className={\"contentBox\"}>\n            <div className='chackPatientBox'>\n                <p className='chackPatientTitle'>Select a patient</p>\n            </div>\n        </Content>\n\n    );\n}\nexport default connect(\n    state => ({\n        petMessage: state.petReduce.petDetailInfo,\n        hardwareMessage: state.hardwareReduce,\n    }),\n    {\n        selectHardwareModalShowFun,\n        petSortTypeFun,\n        petDetailInfoFun,\n        setMellaConnectStatusFun,\n        setMellaMeasureValueFun,\n        setMellaPredictValueFun,\n        setMellaMeasurePartFun\n    }\n)(LinkEquipment);","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/measuredData.jsx",["1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Progress,\n  Space,\n  Table,\n  Tag,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\nimport measuredTable_1 from \"./../../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../../assets/img/EditCircle.png\";\nimport Delete from \"./../../../assets/img/Delete.png\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport { px, mTop } from \"../../../utils/px\";\nimport moment from \"moment\";\nimport electronStore from \"../../../utils/electronStore\";\nimport \"./measuredData.less\";\nimport {\n\n  deletePetExamByExamId,\n  ezyvetGetPetLatestExam,\n  getPetExamByPetId,\n  healthstatus,\n  updatePetExam,\n  updateVitalsTemperatureByVitalId,\n  vetspireGetPetLatestExam\n} from \"../../../api\";\nimport { addClamantPetExam } from './../../../api/mellaserver/exam'\n\n\nconst MeasuredData = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n}) => {\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\n    hardwareMessage;\n  let draggleRef = React.createRef();\n  let { petId, memo, patientId } = petMessage;\n  let storage = window.localStorage;\n  let hisHe = mTop(200);\n  try {\n    let historyElement = document.querySelectorAll(\".measurementBox .table\");\n    hisHe = historyElement[0].clientHeight - mTop(60);\n  } catch (error) { }\n  const [petTemperatureData, setPetTemperatureData] = useState([]); //存储宠物历史温度数据\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [isHua, setIsHua] = useState(true);\n  const [pageSize, setPageSize] = useState(10); // 每页10条\n  const [total, setTotal] = useState(0);//历史数据的总条数\n  const [currPage, setCurrPage] = useState(1);//页码\n\n  //表格渲染\n  const columns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      key: \"Action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            // className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n            style={{ cursor: \"pointer\" }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} style={{ cursor: \"pointer\" }} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //根据温度判断指示文字颜色\n  const color = (data) => {\n    if (_.toNumber(data) > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(_.toNumber(data)), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    //根据温度判断指示文字\n    const title = () => {\n      if (mellaMeasureValue > 40) {\n        return \"Danger\";\n      } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\n        return \"Normal\";\n      } else {\n        return \"Low\";\n      }\n    };\n    return (\n      <>\n        <p style={{ color:  color(mellaMeasureValue)  }} className=\"ProgressTitle\">\n          {getTemp(percent)}\n          <span style={{ color: color(mellaMeasureValue)  }} className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"\n            }`}</span>\n        </p>\n        <p style={{ color:  color(mellaMeasureValue)  }} className=\"ProgressTitle\">\n          {title()}\n        </p>\n      </>\n    );\n  };\n  //获取历史宠物温度数据\n  const getPetTemperatureData = (currPage) => {\n    let params = {\n      pageSize: pageSize,\n      currPage: currPage,\n      deviceType: 0,\n    }\n    getPetExamByPetId(petId, params)\n      .then((res) => {\n        if (res.flag === true) {\n          let newArr = [];\n          if (currPage === 1) {\n            newArr = res.data.list;\n          } else {\n            let oldArr = petTemperatureData;\n            let arr = res.data.list;\n            newArr = [...oldArr, ...arr];\n          }\n          setPetTemperatureData(_.orderBy(newArr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //返回准备测量界面\n  const backConnectedPage = () => {\n    if (mellaConnectStatus != \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    } else {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n  };\n  //保存数据\n  const saveData = () => {\n    let petVitalId = null;\n    switch (mellaMeasurePart) {\n      case \"腋温\":\n        petVitalId = 1;\n        break;\n      case \"肛温\":\n        petVitalId = 3;\n        break;\n      case \"耳温\":\n        petVitalId = 4;\n        break;\n      default:\n        petVitalId = 1;\n        break;\n    }\n    let params = {\n      petId: petId,\n      doctorId: storage.userId,\n      temperature: mellaMeasureValue,\n      petVitalTypeId: petVitalId,\n      memo: \"\",\n    };\n    addClamantPetExam(params)\n      .then((res) => {\n        if (res.flag === true) {\n          switch (storage.lastOrganization) {\n            case '3'://vetspire\n              updataVetspire(mellaMeasureValue)\n              break;\n            case '4'://ezyVet\n              updataEzyvet(mellaMeasureValue, petVitalId)\n              break;\n            default: message.success('Data successfully saved in Mella')\n              break;\n          }\n        }\n        setSaveType(true);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    updatePetExam(petMessages.examId, datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData(1);\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史温度记录\n  const deletePetMessage = (examId) => {\n\n    deletePetExamByExamId(examId, '')\n      .then(\n        (res) => {\n          if (res.flag === true) {\n            message.success(\"Successfully Delete\");\n            getPetTemperatureData(1);\n          } else {\n            message.error(\"Fail To Delete\");\n          }\n        }\n      );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n  const getTemp = (percent) => {\n\n    let num = parseFloat(mellaMeasureValue);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    } else {\n      num = parseFloat(num.toFixed(1));\n    }\n    return num;\n  };\n  const updataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n          storage.connectionKey = res.newToken;\n          reupdataEzyvet(Temp, petVitalId)\n          return\n        }\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.code === 10004 && res.msg === 'ezyvet token失效') {\n                storage.connectionKey = res.newToken;\n                reupdataEzyvet(Temp, petVitalId)\n                return\n              }\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const reupdataEzyvet = (Temp, petVitalId) => {\n    let params = {\n      id: patientId\n    }\n\n    ezyvetGetPetLatestExam(params)\n      .then(res => {\n        if (res.flag && res.data && res.data.items.length > 0) {\n          let data = res.data.items[0]\n\n          let { consult_id } = data\n          if (!consult_id) {\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n            return\n          }\n          let paramId = data.id\n          let temperature = Temp\n          let parames1 = {\n            consult_id,\n            temperature\n          }\n\n          healthstatus(paramId, petVitalId, parames1)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in EzyVet')\n              } else {\n                message.error('Data failed saved in EzyVet')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in EzyVet')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  const updataVetspire = (Temp) => {\n    let datas = {\n      APIkey: storage.connectionKey,\n      patientId: patientId\n    }\n    vetspireGetPetLatestExam(datas)\n      .then(res => {\n        if (res.flag) {\n          let data = res.data.encounters[0].vitals\n          let encountersId = data.id\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\n          let params = {\n            vitalId: encountersId,\n            APIkey: storage.connectionKey,\n            temp: temperature\n          }\n\n          updateVitalsTemperatureByVitalId(params)\n            .then(res => {\n              if (res.flag) {\n                message.success('Data successfully saved in Vetspire')\n              } else {\n                message.error('Data failed saved in Vetspire')\n              }\n            })\n            .catch(err => {\n              message.error('Data failed saved in Vetspire')\n            })\n        } else {\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n        }\n      })\n      .catch(err => {\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\n      })\n  }\n  //滚动监听\n  const onScrollCapture = () => {\n    // 滚动的容器\n    let tableEleNodes = document.querySelectorAll(`.measuredTable .ant-table-body`)[0];\n    //是否滚动到底部\n    let bottomType = Math.round(tableEleNodes?.scrollTop) + tableEleNodes?.clientHeight === tableEleNodes?.scrollHeight;\n    if (bottomType) {\n      if (total === petTemperatureData.length) {\n        return false;\n      }\n      setCurrPage(currPage + 1);\n      getPetTemperatureData(currPage + 1);\n    }\n  }\n\n  useEffect(() => {\n    setCurrPage(1);\n    setPetTemperatureData([]);\n    setTotal(0);\n    getPetTemperatureData(1);\n    return(() => {})\n  }, [petId]);\n\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      <div className=\"measurementBox\">\n        <div className=\"progress\" style={{ height: px(400) }}>\n          <Progress\n            type=\"dashboard\"\n            percent={_.round(mellaMeasureValue, 1)}\n            gapDegree={30}\n            // width={px(260)}\n            strokeWidth={\"8\"}\n            format={(percent) => ProgressTitle(percent)}\n            strokeColor={{\n              \"0%\": \"#7bd163\",\n              \"100%\": \"#19ade4\",\n            }}\n            className=\"measurementProgress\"\n          />\n          {!saveType && (\n            <div className=\"buttonBox\">\n              <Button\n                style={{ backgroundColor: \"#e1206d\" }}\n                type=\"danger\"\n                shape=\"round\"\n                onClick={() => backConnectedPage()}\n              >\n                Discard\n              </Button>\n              <Button\n                style={{ backgroundColor: \"#e1206d\" }}\n                type=\"danger\"\n                shape=\"round\"\n                color=\"#e1206d\"\n                onClick={() => saveData()}\n              >\n                Save\n              </Button>\n            </div>\n          )}\n        </div>\n\n        <div className=\"listTitleBox1\">\n          <p className=\"listTitle\">History</p>\n        </div>\n        <div className=\"table\" onScrollCapture={onScrollCapture} style={{ height: mTop(300) }}>\n          <Table\n            rowKey={\"examId\"}\n            columns={columns}\n            dataSource={petTemperatureData}\n            className=\"measuredTable\"\n            pagination={false}\n            scroll={{\n              y: '80%'\n            }}\n          />\n        </div>\n      </div>\n      {/*修改note弹窗 */}\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        visible={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(MeasuredData);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/measurement.jsx",["1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Progress, Layout, Carousel } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\n// import HeaderItem from './headerItem';\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport \"./measurement.less\";\nimport { px } from \"../../../utils/px\";\nimport electronStore from \"../../../utils/electronStore\";\n\nlet storage = window.localStorage;\nconst { Content, Header } = Layout;\n\nconst Measurement = ({ petMessage, hardwareMessage }) => {\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\n  const [percent, setPercent] = useState(0);\n  const [value, setValue] = useState(0);\n  const [timers, setTimers] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const saveCallBack = useRef();\n  const callBack = () => {\n    const random = 1;\n    setValue(value + random);\n    setTimers(timers + random);\n  };\n\n  //圆滑里面的文字\n  const ProgressTitle = (percent) => {\n    let num = parseFloat(percent);\n    if (isHua) {\n      num = (num * 1.8 + 32).toFixed(1);\n    }\n    return (\n      <>\n        {mellaMeasurePart !== \"耳温\" ? (\n          <p className=\"ProgressTitle\">\n            {num}\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\n          </p>\n        ) : (\n          <></>\n        )}\n        <p className=\"ProgressTitle\">Measuring</p>\n      </>\n    );\n  };\n  //图片切换\n  const checkImage = () => {\n    switch (timers) {\n      case 0:\n        return <img src={Animation_1} />;\n      case 1:\n        return <img src={Animation_2} />;\n      case 2:\n        return <img src={Animation_3} />;\n      case 3:\n        return <img src={Animation_3} />;\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (timers > 2) {\n      setTimers(0);\n    }\n    return () => { };\n  });\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    const timer = setInterval(tick, 1000);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* <HeaderItem /> */}\n      <Content className={\"measureContentBox\"}>\n        <div style={{ marginTop: px(33) }}>\n          <Progress\n            type=\"dashboard\"\n            percent={_.round(mellaMeasureValue, 1)}\n            gapDegree={30}\n            // width={px(260)}\n            strokeWidth={\"8\"}\n            format={(percent) => ProgressTitle(percent)}\n            strokeColor={'#4C595E'}\n            className='measuringProgress'\n          />\n        </div>\n\n        {checkImage()}\n      </Content>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(Measurement);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/temperaturePage/components/linkEquipment.jsx",["1040","1041","1042","1043","1044","1045","1046","1047"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Image, Layout, Button } from \"antd\";\nimport { connect } from \"react-redux\";\n\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\nimport { px } from \"../../../utils/px\";\n\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../../store/actions\";\nimport _ from \"lodash\";\nimport HistoryTable from \"../../../components/historyTable\";\nimport moment from \"moment\";\nimport \"./linkEquipment.less\";\n\nconst { Content, Header } = Layout;\n\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\n  let imageMap = [\n    Standing_Dog,\n    Standing_Cat,\n    Sitting_Dog,\n    Sitting_Cat,\n    Laying_Dog,\n    Laying_Cat,\n  ];\n\n  const [type, setType] = useState(false); //是否显示轮播图\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\n  const [title, setTitle] = useState('Ready, place under foreleg')//准备测量的文字\n  const saveCallBack = useRef();\n  const callBack = () => {\n    setCarouselIndex(carouselIndex + 1);\n  };\n\n  //切换图片\n  const checkImage = () => {\n    if (mellaMeasurePart === \"腋温\") {\n      return AxillaryPlacement;\n    } else if (mellaMeasurePart === \"耳温\") {\n      return EarPlacement;\n    } else {\n      return RectalPlacement;\n    }\n  };\n  //点击进入轮播图\n  const clickIntoTip = () => {\n    setType(true);\n  };\n  //小圆点点击事件\n  const clickPoint = (index) => {\n    setCarouselIndex(index);\n  };\n\n  useEffect(() => {\n    saveCallBack.current = callBack;\n    if (carouselIndex === 6) {\n      setCarouselIndex(0);\n    }\n  }, [carouselIndex]);\n\n  useEffect(() => {\n    const tick = () => {\n      saveCallBack.current();\n    };\n    let timer = null;\n    if (type && mellaConnectStatus === \"connected\") {\n      timer = setInterval(tick, 1500);\n    }\n    if (mellaConnectStatus !== \"connected\") {\n      setType(false);\n      setCarouselIndex(0);\n      clearInterval(timer);\n    }\n    return () => {\n      clearInterval(timer);\n    };\n  }, [type, mellaConnectStatus]);\n\n  useEffect(() => {\n    if (mellaMeasurePart === '腋温') {\n      setTitle('Ready, place under foreleg');\n    } else if (mellaMeasurePart === '耳温') {\n      setTitle('Ready, place in ear');\n    } else {\n      setTitle('Ready, place in anus');\n    }\n  }, [mellaMeasurePart])\n\n  return (\n    <>\n      <Content className={\"temperatureContentBox\"}>\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\n          <>\n            <div className=\"startBox\">\n              <p className=\"startTitle\">\n                Turn on your\n                <br />\n                Mella Thermometer\n                <br />\n                or Pair New Mella\n              </p>\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\n                <img src={PressButton_Pro} className=\"PressButton_Pro\" />\n              </div>\n            </div>\n            <div className=\"tableBox\">\n              <HistoryTable tableColumnType='temperature' />\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"startBox\">\n              <p className=\"startTitle\">\n                {!type\n                  ? title\n                  : \"Place Under Foreleg Standing\"}\n              </p>\n              {!type ? (\n                <>\n                  <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <img src={checkImage()} className=\"checkImages\"></img>\n                  </div>\n\n                  {mellaMeasurePart === \"腋温\" ? (\n                    <div className=\"bottomTip1\">\n                      <div className=\"bottomTip1_1\">\n                        <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\n                          Need Help With Accurate Placement On Pet?\n                        </p>\n                      </div>\n                    </div>\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ) : (\n                <>\n                  <div className=\"carouselBox\">\n                    {_.map(imageMap, (item, index) => {\n                      return (\n                        <img\n                          key={index}\n                          className=\"contentImgStyle\"\n                          src={item}\n                          style={{\n                            display: carouselIndex === index ? \"\" : \"none\",\n                          }}\n                        />\n                      );\n                    })}\n                  </div>\n                  <div className=\"dotBox\">\n                    <ul className=\"dotList\">\n                      {_.map(imageMap, (item, index) => {\n                        return (\n                          <li key={index}>\n                            <Button\n                              className=\"dotItem\"\n                              onClick={() => clickPoint(index)}\n                              style={{\n                                background:\n                                  carouselIndex === index\n                                    ? \"#0a0a0a\"\n                                    : \"#bdbaba\",\n                              }}\n                            >\n                              {index}\n                            </Button>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </div>\n                </>\n              )}\n            </div>\n          </>\n        )}\n      </Content>\n    </>\n  );\n};\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(LinkEquipment);\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/components/petTable/index.jsx",["1048","1049","1050","1051","1052","1053","1054","1055"],"import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { ConfigProvider, Table, Select } from 'antd';\nimport { useHistory } from 'react-router-dom'\nimport moment from 'moment'\nimport { mTop, px, MTop, pX } from '../../utils/px';\nimport './petTable.less'\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\n\nconst PetTable = ({ petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type }) => {\n  let history = useHistory()\n  const [heardSearchText, setHeardSearchText] = useState('')\n  //搜索后展示的宠物列表\n  const [searchData, setSearchData] = useState([])\n  const _search = (value) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\n    let keyWord = value || heardSearchText\n    /**\n     * 使用indexof方法实现模糊查询\n     *     语法：stringObject.indexOf(searchvalue, fromindex)\n     *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\n     *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\n     *\n     * list         原数组\n     * keyWord      查询关键词\n     * searchData   查询的结果\n     *\n     * toLowerCase（）方法：将字符串统一转成小写\n     * toUpperCase（）方法：将字符串统一转成大写\n     *\n     */\n    let list = petListArr\n    let searchData = []\n    for (let i = 0; i < list.length; i++) {\n      let petName = list[i].petName.toLowerCase() || ''\n      let patientId = list[i].patientId.toLowerCase() || ''\n      let rfid = list[i].rfid || ''\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n        || `${rfid}`.indexOf(keyWord) !== -1\n      ) {\n        searchData.push(list[i])\n      }\n    }\n    setSearchData(searchData)\n  }\n  const columns = [\n    {\n      title: 'Time',\n      dataIndex: 'insertedAt',\n      key: 'insertedAt',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => moment(parseInt(text) * 1000).format('YYYY-MM-DD hh:mm a'),\n\n    },\n    {\n      title: 'Pet ID',\n      dataIndex: 'patientId',\n      key: 'patientId',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Pet Name',\n      dataIndex: 'petName',\n      key: 'petName',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Owner',\n      dataIndex: 'owner',\n      key: 'owner',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Breed',\n      dataIndex: 'breed',\n      key: 'breed',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n    {\n      title: 'Gender',\n      dataIndex: 'gender',\n      key: 'gender',\n      ellipsis: true,\n      align: \"center\",\n    },\n    {\n      title: 'Age',\n      dataIndex: 'age',\n      key: 'age',\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        if (`${text}` === 'NaN') {\n          return (\n            'unknown'\n          )\n        } else {\n          return (\n            text\n          )\n        }\n\n      }\n    },\n\n\n  ];\n  const noData = () => {\n    return (\n      <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\n        <p style={{ fontSize: px(22) }}> {`No Pets Scheduled &`}</p>  &nbsp;&nbsp;\n        <a style={{ fontSize: px(22) }} href=\"#\"\n          onClick={(e) => {\n            try {\n              if (type === 'scheduled') {\n                setMenuNum('AddScheduledPet')\n              } else {\n                setMenuNum('AddPet')\n              }\n            } catch (error) {\n              console.log('错误信息', error);\n            }\n            e.preventDefault();\n\n          }}\n\n        >{`Schedule a Pet`}</a>\n      </div>\n    )\n  }\n  const options = [\n    { key: 'time', value: 'Time' },\n    { key: 'petid', value: 'Pet ID' },\n    { key: 'owner', value: 'Owner' },\n    { key: 'breed', value: 'Breed' },\n    { key: 'petname', value: 'Pet Name' },\n    { key: 'gender', value: 'Gender' },\n  ]\n  const handleChange = (value,option) => {\n    let petList = [].concat(petListArr)\n    switch (option.key) {\n      case 'time':\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n        break;\n      case 'petid':\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n        break;\n      case 'owner':\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n        break;\n      case 'breed':\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n        break;\n      case 'petname':\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n        break;\n      case 'gender':\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n        break;\n    }\n    resetPetList(petList)\n  };\n  return (\n    <div className='petTable' >\n      <div className=\"pet_table_heard\">\n        <div className=\"search\" style={{ height: px(32) }}>\n          <input\n            type=\"text\"\n            placeholder=\"&#xe61b;    search\"\n            value={heardSearchText}\n            onChange={(e) => {\n              setHeardSearchText(e.target.value)\n              _search(e.target.value)\n            }\n            }\n          />\n        </div>\n\n        <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\n          <div\n            className=\"walkbtnBox\"\n            style={{ height: px(28), width: px(80) }}\n            onClick={_search}\n          >\n            <div className=\"walkText\">Search</div>\n          </div>\n        </div>\n\n      </div>\n      <div className=\"heard2 flex\" style={{ marginBottom: px(8), marginLeft: px(20) }}>\n\n        <div className=\"sort flex\" >\n          <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\n          {/* <SelectionBox\n            listArr={[\n              { key: 'time', value: 'Time' },\n              { key: 'petid', value: 'Pet ID' },\n              { key: 'owner', value: 'Owner' },\n              { key: 'breed', value: 'Breed' },\n              { key: 'petname', value: 'Pet Name' },\n              { key: 'gender', value: 'Gender' },\n            ]}\n            clickItem={(item) => {\n              let petList = [].concat(petListArr)\n              switch (item.key) {\n                case 'time':\n                  petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\n                  break;\n                case 'petid':\n                  petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\n                  break;\n                case 'owner':\n                  petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\n                  break;\n                case 'breed':\n                  petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\n                  break;\n                case 'petname':\n                  petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\n                  break;\n                case 'gender':\n                  petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\n                  break;\n              }\n              resetPetList(petList)\n            }}\n          /> */}\n          <Select\n            defaultValue={['Time']}\n            onChange={handleChange}\n            options={options}\n            className=\"selectFilter\"\n          />\n        </div>\n      </div>\n      <div className=\"table\" >\n        <ConfigProvider renderEmpty={noData}>\n          <Table\n            style={{\n              padding: 0,\n              margin: 0,\n              width: '95%',\n            }}\n            rowKey={data => data.id}\n            bordered={false}\n            columns={columns}\n            dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\n            loading={loading}\n            pagination={false}\n            scroll={{\n              // y: px(480),\n              y: '80 %'\n            }}\n            onRow={(record) => {\n              return {\n                onClick: (event) => {\n                  setMenuNum('1')\n                  petDetailInfoFun(record)\n                }, // 点击行\n              };\n            }}\n            className=\"allPetTable\"\n          />\n        </ConfigProvider>\n      </div>\n    </div >\n  )\n}\n\nPetTable.propTypes = {\n  petListArr: PropTypes.array,\n  resetPetList: PropTypes.func,\n}\n//默认值\nPetTable.defaultProps = {\n  bodyHeight: 0,\n  petListArr: [],\n  resetPetList: () => { },\n}\nexport default connect(\n  state => ({\n\n  }),\n  { petDetailInfoFun, setMenuNum, }\n)(PetTable)\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/pages/scanPage/components/numericInput.jsx",["1056","1057"],"import React, {\n} from 'react';\nimport { Input } from 'antd';\nimport _ from 'lodash';\nimport './numericInput.less'\nimport { useEffect } from 'react';\n\nconst NumericInput = (props) => {\n    const { value, onChange, getInput, onClick,onKey,index } = props;\n\n    //输入框输入\n    const handleChange = (e) => {\n        const { value: inputValue } = e.target;\n        const reg = /^-?\\d*(\\.\\d*)?$/;\n\n        if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\n            onChange(inputValue);\n        }\n    }\n    //失去焦点\n    const handleBlur = () => {\n        let valueTemp = value;\n        if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\n            valueTemp = value.slice(0, -1);\n        }\n        onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\n    };\n    //输入框点击事件\n    const handleClick = () => {\n        onClick();\n    }\n    //修改样式\n    let bordercolor = onKey ===index ?'#e1206d':'#d9d9d9';\n\n\n    return (\n        <Input\n            {...props}\n            className='inputNum'\n            onChange={handleChange}\n            onBlur={handleBlur}\n            maxLength={25}\n            ref={getInput}\n            onClick={handleClick}\n            style={{borderColor:bordercolor}}\n        />\n    );\n\n};\n\nexport default NumericInput;\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/mellarecord.js",["1058"],"/**\n * @file mellarecord.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/mellarecord 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/mellarecord`\n\n\n/**\n * @dec 增加硬件记录并更新ota硬件版本\n * @param {*} params \n * @returns \n */\nexport const saveRecord = (params) => {\n    return postJson(`${baseURL}/saveRecord`, params)\n}\n\n\n\n/**\n * @dec 获取硬件的最新版本信息\n * @param {str} hardWareType 硬件类型 <br/>\n * 硬件种类:分成mellahome1,mellahome2,mellapro1(6针机器),mellapro(7针机器)\n * @returns \n */\nexport const getInfoOfLatestDevice = (hardWareType) => {\n    return get(`${baseURL}/getInfoOfLatestDevice?type=${hardWareType}`)\n}","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/api/mellaserver/workplace.js",["1059"],"/**\n * @file pet.js\n * @authoe 胡邵杰 \n * @dec https://www.mellaserver.com/api/mellaserver/workplace 下的所有接口都在这个<br />\n *      封装,封装函数名称和接口地址保持一致\n * @createDate 20220824\n * \n */\nimport { get, postJson, del } from '../api'\nimport { mellaserverBaseUrl } from '../../config/config'\nconst baseURL = `${mellaserverBaseUrl}/workplace`\n\n\n/**\n * \n * @dec 根据组织id获取工作场所\n * @param {string} organizationId \n * @returns \n */\nexport const listAllWorkplaceByOrganizationId = (organizationId) => {\n    return get(`${baseURL}/listAllWorkplaceByOrganizationId/${organizationId}`, '')\n}\n\n\n/**\n * @dec 添加工作场所\n * @param {str} userId 用户id\n * @param {*} params \n * @returns \n */\n\nexport const addWorkplace = (userId, params) => {\n    return postJson(`${baseURL}/addWorkplace${userId}`, params)\n}\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/slider/Slider.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/utils/selectionBox/SelectionBox.jsx",["1060"],"\n\nimport React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport './selectionBox.less'\nimport { px } from './../px'\nimport { stopBubble } from './../current'\n\nimport blackTriangle from './../../assets/img/blackTriangle.png'\n\n\nconst SelectionBox = ({ listArr, clickItem, clickitemBgc, clickItemColor, initSelectVale }) => {\n  const [selectValue, setSelectValue] = useState('')\n  const [mouseValue, setMouseValue] = useState('')\n  const [showSelect, setShowSelect] = useState(false)\n\n  const selection = () => {\n    let option = listArr.map((item, index) => {\n      let bacColor = item.value === selectValue ? clickitemBgc : item.value === mouseValue ? '#e7e7e7' : '#fff'\n      let textColor = item.value === selectValue ? clickItemColor : '#000'\n\n\n      // setBacColor(bacColor1)\n      // setTextColor(textColor1)\n      return <li\n        key={item.key}\n        style={{ paddingTop: px(5), paddingBottom: px(5), backgroundColor: bacColor, color: textColor }}\n        onClick={() => {\n          setSelectValue(item.value)\n          setShowSelect(false)\n          clickItem(item)\n        }}\n        onMouseMove={() => {\n          console.log();\n          if (item.value !== selectValue) {\n            setMouseValue(item.value)\n          }\n        }}\n        onMouseLeave={() => {\n          if (item.value !== selectValue) {\n            // setBacColor('#fff')\n            setMouseValue('')\n          }\n        }}\n      >{item.value}</li>\n    })\n    return (\n      <ul>\n        {option}\n      </ul>\n    )\n\n\n  }\n\n  useEffect(() => {\n    console.log(listArr[0]);\n    setSelectValue(listArr[0].value)\n    setMouseValue(listArr[0].value)\n    if (initSelectVale) {\n      setSelectValue(initSelectVale)\n    }\n  }, [])\n\n  return (\n    <div className='selectionbox'>\n\n      <div className=\"select flex\" style={{ height: px(26) }}>\n        <div className=\"flex box\" onClick={(e) => {\n          setShowSelect(true)\n          stopBubble(e)\n        }}>\n          <p style={{ fontSize: px(16), }}>{selectValue}</p>\n          <img src={blackTriangle} alt=\"\" style={{ height: '50%' }} />\n        </div>\n\n        {\n          showSelect &&\n          true &&\n          <div className=\"sortList\" style={{ top: px(26), }}>\n            {selection()}\n          </div>\n        }\n      </div>\n    </div>\n  )\n\n}\nSelectionBox.propTypes = {\n  listArr: PropTypes.array.isRequired,\n  clickItem: PropTypes.func,\n  clickitemBgc: PropTypes.string,\n  clickItemColor: PropTypes.string,\n  initSelectVale: PropTypes.string\n\n\n}\nSelectionBox.defaultProps = {\n  clickitemBgc: '#e1206d',\n  clickItemColor: '#fff',\n  initSelectVale: '',\n  clickItem: () => {\n\n  }\n}\nexport default SelectionBox\n","/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actionTypes/qsmType.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/actions/qsmAction.js",[],"/Users/macbook/Desktop/workcode/Mella_Desktop_Super_USB/src/store/reducers/qsmReduce.js",[],{"ruleId":"1061","severity":1,"message":"1062","line":4,"column":3,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1065","line":56,"column":5,"nodeType":"1063","messageId":"1064","endLine":56,"endColumn":14},{"ruleId":"1066","severity":1,"message":"1067","line":429,"column":9,"nodeType":"1068","messageId":"1069","endLine":436,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1070","line":467,"column":22,"nodeType":"1063","messageId":"1064","endLine":467,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1071","line":467,"column":28,"nodeType":"1063","messageId":"1064","endLine":467,"endColumn":40},{"ruleId":"1061","severity":1,"message":"1072","line":628,"column":15,"nodeType":"1063","messageId":"1064","endLine":628,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1073","line":672,"column":17,"nodeType":"1063","messageId":"1064","endLine":672,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1074","line":813,"column":13,"nodeType":"1063","messageId":"1064","endLine":813,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1075","line":816,"column":15,"nodeType":"1063","messageId":"1064","endLine":816,"endColumn":30},{"ruleId":"1061","severity":1,"message":"1076","line":818,"column":15,"nodeType":"1063","messageId":"1064","endLine":818,"endColumn":30},{"ruleId":"1061","severity":1,"message":"1073","line":886,"column":17,"nodeType":"1063","messageId":"1064","endLine":886,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1077","line":995,"column":11,"nodeType":"1063","messageId":"1064","endLine":995,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1078","line":3,"column":10,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":24},{"ruleId":"1079","replacedBy":"1080"},{"ruleId":"1081","replacedBy":"1082"},{"ruleId":"1061","severity":1,"message":"1083","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1084","line":30,"column":9,"nodeType":"1063","messageId":"1064","endLine":30,"endColumn":16},{"ruleId":"1066","severity":1,"message":"1067","line":77,"column":11,"nodeType":"1068","messageId":"1069","endLine":98,"endColumn":12},{"ruleId":"1066","severity":1,"message":"1067","line":70,"column":13,"nodeType":"1068","messageId":"1069","endLine":99,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1085","line":297,"column":45,"nodeType":"1063","messageId":"1064","endLine":297,"endColumn":59},{"ruleId":"1061","severity":1,"message":"1086","line":297,"column":61,"nodeType":"1063","messageId":"1064","endLine":297,"endColumn":75},{"ruleId":"1061","severity":1,"message":"1087","line":4,"column":3,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":8},{"ruleId":"1061","severity":1,"message":"1088","line":6,"column":3,"nodeType":"1063","messageId":"1064","endLine":6,"endColumn":7},{"ruleId":"1061","severity":1,"message":"1089","line":390,"column":21,"nodeType":"1063","messageId":"1064","endLine":390,"endColumn":27},{"ruleId":"1090","severity":1,"message":"1091","line":532,"column":19,"nodeType":"1092","endLine":532,"endColumn":56},{"ruleId":"1090","severity":1,"message":"1091","line":584,"column":17,"nodeType":"1092","endLine":584,"endColumn":60},{"ruleId":"1061","severity":1,"message":"1093","line":8,"column":14,"nodeType":"1063","messageId":"1064","endLine":8,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1094","line":60,"column":9,"nodeType":"1063","messageId":"1064","endLine":60,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1094","line":90,"column":9,"nodeType":"1063","messageId":"1064","endLine":90,"endColumn":22},{"ruleId":"1095","severity":1,"message":"1096","line":205,"column":41,"nodeType":"1097","messageId":"1098","endLine":205,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1096","line":218,"column":47,"nodeType":"1097","messageId":"1098","endLine":218,"endColumn":49},{"ruleId":"1061","severity":1,"message":"1099","line":423,"column":23,"nodeType":"1063","messageId":"1064","endLine":423,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1100","line":50,"column":7,"nodeType":"1063","messageId":"1064","endLine":50,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1101","line":51,"column":7,"nodeType":"1063","messageId":"1064","endLine":51,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1102","line":54,"column":10,"nodeType":"1063","messageId":"1064","endLine":54,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1103","line":54,"column":20,"nodeType":"1063","messageId":"1064","endLine":54,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1104","line":121,"column":9,"nodeType":"1063","messageId":"1064","endLine":121,"endColumn":18},{"ruleId":"1105","severity":1,"message":"1106","line":291,"column":59,"nodeType":"1107","messageId":"1108","endLine":291,"endColumn":60},{"ruleId":"1061","severity":1,"message":"1109","line":24,"column":9,"nodeType":"1063","messageId":"1064","endLine":24,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1110","line":40,"column":11,"nodeType":"1063","messageId":"1064","endLine":40,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1111","line":40,"column":19,"nodeType":"1063","messageId":"1064","endLine":40,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1094","line":55,"column":9,"nodeType":"1063","messageId":"1064","endLine":55,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1112","line":160,"column":43,"nodeType":"1063","messageId":"1064","endLine":160,"endColumn":52},{"ruleId":"1061","severity":1,"message":"1099","line":160,"column":54,"nodeType":"1063","messageId":"1064","endLine":160,"endColumn":59},{"ruleId":"1061","severity":1,"message":"1113","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1114","line":2,"column":25,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1088","line":2,"column":41,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":45},{"ruleId":"1061","severity":1,"message":"1115","line":3,"column":10,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":30},{"ruleId":"1061","severity":1,"message":"1116","line":18,"column":47,"nodeType":"1063","messageId":"1064","endLine":18,"endColumn":68},{"ruleId":"1061","severity":1,"message":"1117","line":74,"column":61,"nodeType":"1063","messageId":"1064","endLine":74,"endColumn":64},{"ruleId":"1061","severity":1,"message":"1118","line":74,"column":66,"nodeType":"1063","messageId":"1064","endLine":74,"endColumn":75},{"ruleId":"1061","severity":1,"message":"1119","line":216,"column":56,"nodeType":"1063","messageId":"1064","endLine":216,"endColumn":63},{"ruleId":"1061","severity":1,"message":"1120","line":217,"column":11,"nodeType":"1063","messageId":"1064","endLine":217,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1121","line":8,"column":10,"nodeType":"1063","messageId":"1064","endLine":8,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1122","line":13,"column":5,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1109","line":20,"column":9,"nodeType":"1063","messageId":"1064","endLine":20,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1094","line":64,"column":9,"nodeType":"1063","messageId":"1064","endLine":64,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1123","line":336,"column":9,"nodeType":"1063","messageId":"1064","endLine":336,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1124","line":357,"column":7,"nodeType":"1063","messageId":"1064","endLine":357,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1125","line":9,"column":3,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":8},{"ruleId":"1061","severity":1,"message":"1126","line":34,"column":10,"nodeType":"1063","messageId":"1064","endLine":34,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1127","line":36,"column":10,"nodeType":"1063","messageId":"1064","endLine":36,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1128","line":38,"column":10,"nodeType":"1063","messageId":"1064","endLine":38,"endColumn":18},{"ruleId":"1129","severity":1,"message":"1130","line":92,"column":6,"nodeType":"1131","endLine":92,"endColumn":8,"suggestions":"1132"},{"ruleId":"1061","severity":1,"message":"1109","line":22,"column":9,"nodeType":"1063","messageId":"1064","endLine":22,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1110","line":45,"column":11,"nodeType":"1063","messageId":"1064","endLine":45,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1111","line":45,"column":19,"nodeType":"1063","messageId":"1064","endLine":45,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1094","line":61,"column":9,"nodeType":"1063","messageId":"1064","endLine":61,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1133","line":144,"column":18,"nodeType":"1063","messageId":"1064","endLine":144,"endColumn":27},{"ruleId":"1061","severity":1,"message":"1134","line":144,"column":29,"nodeType":"1063","messageId":"1064","endLine":144,"endColumn":37},{"ruleId":"1135","severity":1,"message":"1136","line":544,"column":19,"nodeType":"1092","endLine":551,"endColumn":61},{"ruleId":"1090","severity":1,"message":"1091","line":559,"column":19,"nodeType":"1092","endLine":567,"endColumn":30},{"ruleId":"1061","severity":1,"message":"1137","line":19,"column":5,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":10},{"ruleId":"1066","severity":1,"message":"1067","line":165,"column":9,"nodeType":"1068","messageId":"1069","endLine":183,"endColumn":10},{"ruleId":"1066","severity":1,"message":"1067","line":81,"column":13,"nodeType":"1068","messageId":"1069","endLine":110,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1085","line":286,"column":45,"nodeType":"1063","messageId":"1064","endLine":286,"endColumn":59},{"ruleId":"1061","severity":1,"message":"1086","line":286,"column":61,"nodeType":"1063","messageId":"1064","endLine":286,"endColumn":75},{"ruleId":"1061","severity":1,"message":"1109","line":29,"column":9,"nodeType":"1063","messageId":"1064","endLine":29,"endColumn":15},{"ruleId":"1066","severity":1,"message":"1067","line":99,"column":5,"nodeType":"1068","messageId":"1069","endLine":105,"endColumn":6},{"ruleId":"1095","severity":1,"message":"1096","line":112,"column":41,"nodeType":"1097","messageId":"1098","endLine":112,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1096","line":150,"column":41,"nodeType":"1097","messageId":"1098","endLine":150,"endColumn":43},{"ruleId":"1061","severity":1,"message":"1138","line":257,"column":11,"nodeType":"1063","messageId":"1064","endLine":257,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1139","line":257,"column":49,"nodeType":"1063","messageId":"1064","endLine":257,"endColumn":55},{"ruleId":"1135","severity":1,"message":"1136","line":507,"column":15,"nodeType":"1092","endLine":507,"endColumn":63},{"ruleId":"1135","severity":1,"message":"1136","line":537,"column":15,"nodeType":"1092","endLine":537,"endColumn":63},{"ruleId":"1066","severity":1,"message":"1067","line":558,"column":5,"nodeType":"1068","messageId":"1069","endLine":561,"endColumn":6},{"ruleId":"1066","severity":1,"message":"1067","line":562,"column":5,"nodeType":"1068","messageId":"1069","endLine":565,"endColumn":6},{"ruleId":"1061","severity":1,"message":"1112","line":678,"column":11,"nodeType":"1063","messageId":"1064","endLine":678,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1140","line":681,"column":11,"nodeType":"1063","messageId":"1064","endLine":681,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1141","line":749,"column":13,"nodeType":"1063","messageId":"1064","endLine":749,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1142","line":749,"column":25,"nodeType":"1063","messageId":"1064","endLine":749,"endColumn":33},{"ruleId":"1061","severity":1,"message":"1143","line":749,"column":35,"nodeType":"1063","messageId":"1064","endLine":749,"endColumn":41},{"ruleId":"1061","severity":1,"message":"1144","line":749,"column":43,"nodeType":"1063","messageId":"1064","endLine":749,"endColumn":51},{"ruleId":"1061","severity":1,"message":"1145","line":749,"column":53,"nodeType":"1063","messageId":"1064","endLine":749,"endColumn":70},{"ruleId":"1061","severity":1,"message":"1138","line":796,"column":29,"nodeType":"1063","messageId":"1064","endLine":796,"endColumn":39},{"ruleId":"1061","severity":1,"message":"1146","line":796,"column":79,"nodeType":"1063","messageId":"1064","endLine":796,"endColumn":84},{"ruleId":"1061","severity":1,"message":"1147","line":796,"column":117,"nodeType":"1063","messageId":"1064","endLine":796,"endColumn":139},{"ruleId":"1061","severity":1,"message":"1113","line":2,"column":17,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1088","line":2,"column":60,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":64},{"ruleId":"1061","severity":1,"message":"1148","line":103,"column":29,"nodeType":"1063","messageId":"1064","endLine":103,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1134","line":103,"column":38,"nodeType":"1063","messageId":"1064","endLine":103,"endColumn":46},{"ruleId":"1061","severity":1,"message":"1133","line":103,"column":48,"nodeType":"1063","messageId":"1064","endLine":103,"endColumn":57},{"ruleId":"1061","severity":1,"message":"1149","line":230,"column":103,"nodeType":"1063","messageId":"1064","endLine":230,"endColumn":112},{"ruleId":"1061","severity":1,"message":"1138","line":396,"column":11,"nodeType":"1063","messageId":"1064","endLine":396,"endColumn":21},{"ruleId":"1135","severity":1,"message":"1136","line":657,"column":15,"nodeType":"1092","endLine":657,"endColumn":63},{"ruleId":"1061","severity":1,"message":"1150","line":674,"column":11,"nodeType":"1063","messageId":"1064","endLine":674,"endColumn":20},{"ruleId":"1135","severity":1,"message":"1136","line":693,"column":15,"nodeType":"1092","endLine":693,"endColumn":63},{"ruleId":"1066","severity":1,"message":"1067","line":716,"column":5,"nodeType":"1068","messageId":"1069","endLine":719,"endColumn":6},{"ruleId":"1066","severity":1,"message":"1067","line":720,"column":5,"nodeType":"1068","messageId":"1069","endLine":723,"endColumn":6},{"ruleId":"1061","severity":1,"message":"1145","line":825,"column":51,"nodeType":"1063","messageId":"1064","endLine":825,"endColumn":68},{"ruleId":"1061","severity":1,"message":"1146","line":825,"column":70,"nodeType":"1063","messageId":"1064","endLine":825,"endColumn":75},{"ruleId":"1061","severity":1,"message":"1150","line":825,"column":108,"nodeType":"1063","messageId":"1064","endLine":825,"endColumn":117},{"ruleId":"1061","severity":1,"message":"1151","line":19,"column":10,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1152","line":24,"column":7,"nodeType":"1063","messageId":"1064","endLine":24,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1153","line":348,"column":11,"nodeType":"1063","messageId":"1064","endLine":348,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1154","line":416,"column":19,"nodeType":"1063","messageId":"1064","endLine":416,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1155","line":417,"column":9,"nodeType":"1063","messageId":"1064","endLine":417,"endColumn":13},{"ruleId":"1090","severity":1,"message":"1091","line":582,"column":15,"nodeType":"1092","endLine":582,"endColumn":50},{"ruleId":"1061","severity":1,"message":"1156","line":2,"column":8,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1157","line":3,"column":8,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1158","line":4,"column":8,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1159","line":5,"column":8,"nodeType":"1063","messageId":"1064","endLine":5,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1109","line":7,"column":9,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1110","line":20,"column":11,"nodeType":"1063","messageId":"1064","endLine":20,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1111","line":20,"column":19,"nodeType":"1063","messageId":"1064","endLine":20,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1094","line":109,"column":9,"nodeType":"1063","messageId":"1064","endLine":109,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1160","line":16,"column":10,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1161","line":16,"column":21,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":37},{"ruleId":"1061","severity":1,"message":"1162","line":22,"column":7,"nodeType":"1063","messageId":"1064","endLine":22,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1144","line":202,"column":21,"nodeType":"1063","messageId":"1064","endLine":202,"endColumn":29},{"ruleId":"1061","severity":1,"message":"1089","line":202,"column":31,"nodeType":"1063","messageId":"1064","endLine":202,"endColumn":37},{"ruleId":"1090","severity":1,"message":"1091","line":362,"column":36,"nodeType":"1092","endLine":362,"endColumn":71},{"ruleId":"1061","severity":1,"message":"1163","line":2,"column":27,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1164","line":3,"column":10,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1165","line":8,"column":14,"nodeType":"1063","messageId":"1064","endLine":8,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1163","line":2,"column":27,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1165","line":7,"column":14,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1167","line":9,"column":30,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":35},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1168","line":15,"column":7,"nodeType":"1063","messageId":"1064","endLine":15,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1169","line":18,"column":5,"nodeType":"1063","messageId":"1064","endLine":18,"endColumn":9},{"ruleId":"1170","severity":1,"message":"1171","line":46,"column":3,"nodeType":"1172","messageId":"1173","endLine":55,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1171","line":74,"column":3,"nodeType":"1172","messageId":"1173","endLine":76,"endColumn":46},{"ruleId":"1061","severity":1,"message":"1174","line":79,"column":5,"nodeType":"1063","messageId":"1064","endLine":79,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1175","line":102,"column":5,"nodeType":"1063","messageId":"1064","endLine":102,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1176","line":13,"column":10,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1177","line":13,"column":14,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1113","line":3,"column":3,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":7},{"ruleId":"1061","severity":1,"message":"1178","line":4,"column":3,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1179","line":5,"column":3,"nodeType":"1063","messageId":"1064","endLine":5,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1087","line":6,"column":3,"nodeType":"1063","messageId":"1064","endLine":6,"endColumn":8},{"ruleId":"1090","severity":1,"message":"1180","line":67,"column":11,"nodeType":"1092","endLine":72,"endColumn":12},{"ruleId":"1181","severity":1,"message":"1182","line":135,"column":24,"nodeType":"1107","messageId":"1183","endLine":135,"endColumn":26},{"ruleId":"1095","severity":1,"message":"1096","line":157,"column":31,"nodeType":"1097","messageId":"1098","endLine":157,"endColumn":33},{"ruleId":"1181","severity":1,"message":"1184","line":165,"column":29,"nodeType":"1107","messageId":"1183","endLine":165,"endColumn":31},{"ruleId":"1129","severity":1,"message":"1185","line":185,"column":6,"nodeType":"1131","endLine":185,"endColumn":18,"suggestions":"1186"},{"ruleId":"1129","severity":1,"message":"1187","line":85,"column":6,"nodeType":"1131","endLine":85,"endColumn":8,"suggestions":"1188"},{"ruleId":"1061","severity":1,"message":"1178","line":2,"column":16,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1179","line":2,"column":25,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1087","line":2,"column":33,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":38},{"ruleId":"1061","severity":1,"message":"1189","line":35,"column":9,"nodeType":"1063","messageId":"1064","endLine":35,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1152","line":36,"column":7,"nodeType":"1063","messageId":"1064","endLine":36,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1190","line":40,"column":7,"nodeType":"1063","messageId":"1064","endLine":40,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1191","line":92,"column":10,"nodeType":"1063","messageId":"1064","endLine":92,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1192","line":92,"column":21,"nodeType":"1063","messageId":"1064","endLine":92,"endColumn":33},{"ruleId":"1061","severity":1,"message":"1193","line":124,"column":10,"nodeType":"1063","messageId":"1064","endLine":124,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1194","line":206,"column":13,"nodeType":"1063","messageId":"1064","endLine":206,"endColumn":20},{"ruleId":"1135","severity":1,"message":"1136","line":799,"column":17,"nodeType":"1092","endLine":799,"endColumn":62},{"ruleId":"1135","severity":1,"message":"1136","line":804,"column":17,"nodeType":"1092","endLine":804,"endColumn":65},{"ruleId":"1090","severity":1,"message":"1091","line":859,"column":15,"nodeType":"1092","endLine":865,"endColumn":16},{"ruleId":"1090","severity":1,"message":"1091","line":868,"column":15,"nodeType":"1092","endLine":874,"endColumn":16},{"ruleId":"1135","severity":1,"message":"1136","line":967,"column":17,"nodeType":"1092","endLine":967,"endColumn":62},{"ruleId":"1135","severity":1,"message":"1136","line":971,"column":15,"nodeType":"1092","endLine":971,"endColumn":64},{"ruleId":"1090","severity":1,"message":"1091","line":1088,"column":13,"nodeType":"1092","endLine":1092,"endColumn":14},{"ruleId":"1090","severity":1,"message":"1091","line":1169,"column":15,"nodeType":"1092","endLine":1177,"endColumn":16},{"ruleId":"1090","severity":1,"message":"1091","line":1192,"column":13,"nodeType":"1092","endLine":1192,"endColumn":76},{"ruleId":"1090","severity":1,"message":"1091","line":1263,"column":15,"nodeType":"1092","endLine":1271,"endColumn":16},{"ruleId":"1090","severity":1,"message":"1091","line":1295,"column":15,"nodeType":"1092","endLine":1299,"endColumn":16},{"ruleId":"1129","severity":1,"message":"1195","line":1351,"column":6,"nodeType":"1131","endLine":1351,"endColumn":8,"suggestions":"1196"},{"ruleId":"1129","severity":1,"message":"1197","line":1355,"column":6,"nodeType":"1131","endLine":1355,"endColumn":32,"suggestions":"1198"},{"ruleId":"1135","severity":1,"message":"1136","line":1377,"column":15,"nodeType":"1092","endLine":1377,"endColumn":59},{"ruleId":"1135","severity":1,"message":"1136","line":1552,"column":19,"nodeType":"1092","endLine":1552,"endColumn":54},{"ruleId":"1135","severity":1,"message":"1136","line":1554,"column":19,"nodeType":"1092","endLine":1554,"endColumn":53},{"ruleId":"1199","severity":1,"message":"1200","line":1,"column":1,"nodeType":"1201","endLine":256,"endColumn":3},{"ruleId":"1129","severity":1,"message":"1202","line":276,"column":6,"nodeType":"1131","endLine":276,"endColumn":8,"suggestions":"1203"},{"ruleId":"1129","severity":1,"message":"1204","line":317,"column":6,"nodeType":"1131","endLine":317,"endColumn":36,"suggestions":"1205"},{"ruleId":"1129","severity":1,"message":"1206","line":179,"column":6,"nodeType":"1131","endLine":179,"endColumn":23,"suggestions":"1207"},{"ruleId":"1061","severity":1,"message":"1122","line":16,"column":5,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":12},{"ruleId":"1129","severity":1,"message":"1208","line":55,"column":6,"nodeType":"1131","endLine":55,"endColumn":41,"suggestions":"1209"},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1211","line":26,"column":11,"nodeType":"1063","messageId":"1064","endLine":26,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1212","line":26,"column":20,"nodeType":"1063","messageId":"1064","endLine":26,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1101","line":27,"column":7,"nodeType":"1063","messageId":"1064","endLine":27,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1176","line":19,"column":10,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1213","line":27,"column":10,"nodeType":"1063","messageId":"1064","endLine":27,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1214","line":27,"column":19,"nodeType":"1063","messageId":"1064","endLine":27,"endColumn":29},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1215","line":1,"column":28,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1212","line":18,"column":18,"nodeType":"1063","messageId":"1064","endLine":18,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1212","line":26,"column":18,"nodeType":"1063","messageId":"1064","endLine":26,"endColumn":24},{"ruleId":"1129","severity":1,"message":"1216","line":86,"column":6,"nodeType":"1131","endLine":86,"endColumn":8,"suggestions":"1217"},{"ruleId":"1129","severity":1,"message":"1218","line":90,"column":6,"nodeType":"1131","endLine":90,"endColumn":8,"suggestions":"1219"},{"ruleId":"1061","severity":1,"message":"1220","line":23,"column":10,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1176","line":26,"column":10,"nodeType":"1063","messageId":"1064","endLine":26,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1221","line":29,"column":26,"nodeType":"1063","messageId":"1064","endLine":29,"endColumn":32},{"ruleId":"1061","severity":1,"message":"1222","line":29,"column":34,"nodeType":"1063","messageId":"1064","endLine":29,"endColumn":39},{"ruleId":"1129","severity":1,"message":"1223","line":116,"column":6,"nodeType":"1131","endLine":116,"endColumn":8,"suggestions":"1224"},{"ruleId":"1135","severity":1,"message":"1136","line":168,"column":19,"nodeType":"1092","endLine":168,"endColumn":47},{"ruleId":"1061","severity":1,"message":"1225","line":15,"column":8,"nodeType":"1063","messageId":"1064","endLine":15,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1226","line":81,"column":17,"nodeType":"1063","messageId":"1064","endLine":81,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1227","line":92,"column":10,"nodeType":"1063","messageId":"1064","endLine":92,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1228","line":96,"column":10,"nodeType":"1063","messageId":"1064","endLine":96,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1229","line":99,"column":18,"nodeType":"1063","messageId":"1064","endLine":99,"endColumn":27},{"ruleId":"1061","severity":1,"message":"1230","line":110,"column":10,"nodeType":"1063","messageId":"1064","endLine":110,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1231","line":110,"column":25,"nodeType":"1063","messageId":"1064","endLine":110,"endColumn":41},{"ruleId":"1061","severity":1,"message":"1232","line":112,"column":10,"nodeType":"1063","messageId":"1064","endLine":112,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1233","line":118,"column":20,"nodeType":"1063","messageId":"1064","endLine":118,"endColumn":31},{"ruleId":"1129","severity":1,"message":"1234","line":129,"column":6,"nodeType":"1131","endLine":129,"endColumn":32,"suggestions":"1235"},{"ruleId":"1061","severity":1,"message":"1236","line":138,"column":11,"nodeType":"1063","messageId":"1064","endLine":138,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1237","line":447,"column":24,"nodeType":"1063","messageId":"1064","endLine":447,"endColumn":28},{"ruleId":"1181","severity":1,"message":"1182","line":462,"column":49,"nodeType":"1107","messageId":"1183","endLine":462,"endColumn":51},{"ruleId":"1238","severity":1,"message":"1239","line":719,"column":34,"nodeType":"1240","messageId":"1241","endLine":719,"endColumn":35,"suggestions":"1242"},{"ruleId":"1238","severity":1,"message":"1243","line":724,"column":31,"nodeType":"1240","messageId":"1241","endLine":724,"endColumn":32,"suggestions":"1244"},{"ruleId":"1238","severity":1,"message":"1239","line":741,"column":34,"nodeType":"1240","messageId":"1241","endLine":741,"endColumn":35,"suggestions":"1245"},{"ruleId":"1238","severity":1,"message":"1243","line":746,"column":31,"nodeType":"1240","messageId":"1241","endLine":746,"endColumn":32,"suggestions":"1246"},{"ruleId":"1238","severity":1,"message":"1239","line":766,"column":34,"nodeType":"1240","messageId":"1241","endLine":766,"endColumn":35,"suggestions":"1247"},{"ruleId":"1238","severity":1,"message":"1243","line":771,"column":31,"nodeType":"1240","messageId":"1241","endLine":771,"endColumn":32,"suggestions":"1248"},{"ruleId":"1238","severity":1,"message":"1239","line":804,"column":34,"nodeType":"1240","messageId":"1241","endLine":804,"endColumn":35,"suggestions":"1249"},{"ruleId":"1238","severity":1,"message":"1243","line":809,"column":31,"nodeType":"1240","messageId":"1241","endLine":809,"endColumn":32,"suggestions":"1250"},{"ruleId":"1238","severity":1,"message":"1239","line":827,"column":34,"nodeType":"1240","messageId":"1241","endLine":827,"endColumn":35,"suggestions":"1251"},{"ruleId":"1238","severity":1,"message":"1243","line":832,"column":31,"nodeType":"1240","messageId":"1241","endLine":832,"endColumn":32,"suggestions":"1252"},{"ruleId":"1238","severity":1,"message":"1239","line":852,"column":34,"nodeType":"1240","messageId":"1241","endLine":852,"endColumn":35,"suggestions":"1253"},{"ruleId":"1238","severity":1,"message":"1243","line":857,"column":31,"nodeType":"1240","messageId":"1241","endLine":857,"endColumn":32,"suggestions":"1254"},{"ruleId":"1238","severity":1,"message":"1239","line":873,"column":59,"nodeType":"1240","messageId":"1241","endLine":873,"endColumn":60,"suggestions":"1255"},{"ruleId":"1238","severity":1,"message":"1243","line":873,"column":165,"nodeType":"1240","messageId":"1241","endLine":873,"endColumn":166,"suggestions":"1256"},{"ruleId":"1257","severity":1,"message":"1258","line":1203,"column":9,"nodeType":"1259","messageId":"1183","endLine":1203,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1260","line":1256,"column":7,"nodeType":"1063","messageId":"1064","endLine":1256,"endColumn":12},{"ruleId":"1238","severity":1,"message":"1239","line":1413,"column":34,"nodeType":"1240","messageId":"1241","endLine":1413,"endColumn":35,"suggestions":"1261"},{"ruleId":"1238","severity":1,"message":"1243","line":1418,"column":31,"nodeType":"1240","messageId":"1241","endLine":1418,"endColumn":32,"suggestions":"1262"},{"ruleId":"1238","severity":1,"message":"1239","line":1434,"column":34,"nodeType":"1240","messageId":"1241","endLine":1434,"endColumn":35,"suggestions":"1263"},{"ruleId":"1238","severity":1,"message":"1243","line":1439,"column":31,"nodeType":"1240","messageId":"1241","endLine":1439,"endColumn":32,"suggestions":"1264"},{"ruleId":"1129","severity":1,"message":"1265","line":1689,"column":6,"nodeType":"1131","endLine":1689,"endColumn":21,"suggestions":"1266"},{"ruleId":"1129","severity":1,"message":"1267","line":1710,"column":6,"nodeType":"1131","endLine":1710,"endColumn":8,"suggestions":"1268"},{"ruleId":"1129","severity":1,"message":"1269","line":1757,"column":6,"nodeType":"1131","endLine":1757,"endColumn":23,"suggestions":"1270"},{"ruleId":"1129","severity":1,"message":"1271","line":1781,"column":6,"nodeType":"1131","endLine":1781,"endColumn":26,"suggestions":"1272"},{"ruleId":"1129","severity":1,"message":"1273","line":1832,"column":6,"nodeType":"1131","endLine":1832,"endColumn":24,"suggestions":"1274"},{"ruleId":"1061","severity":1,"message":"1275","line":23,"column":8,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1276","line":46,"column":10,"nodeType":"1063","messageId":"1064","endLine":46,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1277","line":48,"column":10,"nodeType":"1063","messageId":"1064","endLine":48,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1278","line":49,"column":10,"nodeType":"1063","messageId":"1064","endLine":49,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1279","line":50,"column":10,"nodeType":"1063","messageId":"1064","endLine":50,"endColumn":21},{"ruleId":"1061","severity":1,"message":"1280","line":52,"column":10,"nodeType":"1063","messageId":"1064","endLine":52,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1281","line":52,"column":26,"nodeType":"1063","messageId":"1064","endLine":52,"endColumn":43},{"ruleId":"1066","severity":1,"message":"1067","line":166,"column":5,"nodeType":"1068","messageId":"1069","endLine":187,"endColumn":6},{"ruleId":"1061","severity":1,"message":"1282","line":243,"column":21,"nodeType":"1063","messageId":"1064","endLine":243,"endColumn":31},{"ruleId":"1129","severity":1,"message":"1283","line":342,"column":6,"nodeType":"1131","endLine":342,"endColumn":8,"suggestions":"1284"},{"ruleId":"1129","severity":1,"message":"1283","line":136,"column":6,"nodeType":"1131","endLine":136,"endColumn":8,"suggestions":"1285"},{"ruleId":"1061","severity":1,"message":"1176","line":12,"column":10,"nodeType":"1063","messageId":"1064","endLine":12,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1212","line":23,"column":9,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1221","line":23,"column":26,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":32},{"ruleId":"1061","severity":1,"message":"1222","line":23,"column":34,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":39},{"ruleId":"1129","severity":1,"message":"1286","line":230,"column":6,"nodeType":"1131","endLine":230,"endColumn":22,"suggestions":"1287"},{"ruleId":"1129","severity":1,"message":"1288","line":239,"column":6,"nodeType":"1131","endLine":239,"endColumn":21,"suggestions":"1289"},{"ruleId":"1129","severity":1,"message":"1290","line":243,"column":6,"nodeType":"1131","endLine":243,"endColumn":26,"suggestions":"1291"},{"ruleId":"1061","severity":1,"message":"1292","line":3,"column":3,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":8},{"ruleId":"1061","severity":1,"message":"1293","line":9,"column":3,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":8},{"ruleId":"1061","severity":1,"message":"1294","line":10,"column":3,"nodeType":"1063","messageId":"1064","endLine":10,"endColumn":7},{"ruleId":"1061","severity":1,"message":"1295","line":71,"column":5,"nodeType":"1063","messageId":"1064","endLine":71,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1296","line":75,"column":5,"nodeType":"1063","messageId":"1064","endLine":75,"endColumn":23},{"ruleId":"1105","severity":1,"message":"1106","line":133,"column":61,"nodeType":"1107","messageId":"1108","endLine":133,"endColumn":62},{"ruleId":"1105","severity":1,"message":"1106","line":141,"column":45,"nodeType":"1107","messageId":"1108","endLine":141,"endColumn":46},{"ruleId":"1061","severity":1,"message":"1117","line":190,"column":9,"nodeType":"1063","messageId":"1064","endLine":190,"endColumn":12},{"ruleId":"1129","severity":1,"message":"1297","line":293,"column":6,"nodeType":"1131","endLine":293,"endColumn":13,"suggestions":"1298"},{"ruleId":"1129","severity":1,"message":"1299","line":315,"column":6,"nodeType":"1131","endLine":315,"endColumn":26,"suggestions":"1300"},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1301","line":9,"column":15,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1167","line":9,"column":30,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":35},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1301","line":9,"column":15,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1167","line":9,"column":30,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":35},{"ruleId":"1061","severity":1,"message":"1301","line":9,"column":15,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1167","line":9,"column":30,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":35},{"ruleId":"1061","severity":1,"message":"1303","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1304","line":2,"column":17,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":27},{"ruleId":"1061","severity":1,"message":"1179","line":23,"column":8,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":14},{"ruleId":"1095","severity":1,"message":"1096","line":225,"column":41,"nodeType":"1097","messageId":"1098","endLine":225,"endColumn":43},{"ruleId":"1095","severity":1,"message":"1096","line":237,"column":47,"nodeType":"1097","messageId":"1098","endLine":237,"endColumn":49},{"ruleId":"1061","severity":1,"message":"1099","line":451,"column":23,"nodeType":"1063","messageId":"1064","endLine":451,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1305","line":830,"column":11,"nodeType":"1063","messageId":"1064","endLine":830,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1306","line":832,"column":11,"nodeType":"1063","messageId":"1064","endLine":832,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1307","line":850,"column":9,"nodeType":"1063","messageId":"1064","endLine":850,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1308","line":938,"column":65,"nodeType":"1063","messageId":"1064","endLine":938,"endColumn":76},{"ruleId":"1061","severity":1,"message":"1302","line":9,"column":10,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1167","line":9,"column":30,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":35},{"ruleId":"1061","severity":1,"message":"1301","line":9,"column":15,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1135","severity":1,"message":"1136","line":34,"column":11,"nodeType":"1092","endLine":37,"endColumn":13},{"ruleId":"1135","severity":1,"message":"1136","line":41,"column":13,"nodeType":"1092","endLine":44,"endColumn":15},{"ruleId":"1135","severity":1,"message":"1136","line":49,"column":11,"nodeType":"1092","endLine":52,"endColumn":13},{"ruleId":"1135","severity":1,"message":"1136","line":59,"column":11,"nodeType":"1092","endLine":62,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1292","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1309","line":4,"column":8,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1310","line":15,"column":8,"nodeType":"1063","messageId":"1064","endLine":15,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1311","line":16,"column":8,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1211","line":19,"column":9,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1212","line":19,"column":18,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1312","line":22,"column":9,"nodeType":"1063","messageId":"1064","endLine":22,"endColumn":27},{"ruleId":"1061","severity":1,"message":"1313","line":23,"column":10,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1314","line":23,"column":19,"nodeType":"1063","messageId":"1064","endLine":23,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":28,"column":11,"nodeType":"1092","endLine":28,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1215","line":1,"column":28,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1275","line":11,"column":8,"nodeType":"1063","messageId":"1064","endLine":11,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1310","line":12,"column":8,"nodeType":"1063","messageId":"1064","endLine":12,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1315","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1316","line":2,"column":26,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1275","line":17,"column":8,"nodeType":"1063","messageId":"1064","endLine":17,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1315","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1275","line":13,"column":8,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1310","line":14,"column":8,"nodeType":"1063","messageId":"1064","endLine":14,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":17,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":26},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1315","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1316","line":2,"column":26,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1125","line":2,"column":33,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":38},{"ruleId":"1061","severity":1,"message":"1275","line":17,"column":8,"nodeType":"1063","messageId":"1064","endLine":17,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1310","line":18,"column":8,"nodeType":"1063","messageId":"1064","endLine":18,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1316","line":2,"column":18,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1294","line":2,"column":25,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":29},{"ruleId":"1061","severity":1,"message":"1310","line":17,"column":8,"nodeType":"1063","messageId":"1064","endLine":17,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1101","line":22,"column":7,"nodeType":"1063","messageId":"1064","endLine":22,"endColumn":14},{"ruleId":"1317","severity":1,"message":"1318","line":44,"column":17,"nodeType":"1240","messageId":"1319","endLine":44,"endColumn":70},{"ruleId":"1061","severity":1,"message":"1275","line":21,"column":8,"nodeType":"1063","messageId":"1064","endLine":21,"endColumn":14},{"ruleId":"1129","severity":1,"message":"1320","line":153,"column":6,"nodeType":"1131","endLine":153,"endColumn":8,"suggestions":"1321"},{"ruleId":"1129","severity":1,"message":"1322","line":160,"column":6,"nodeType":"1131","endLine":160,"endColumn":19,"suggestions":"1323"},{"ruleId":"1129","severity":1,"message":"1187","line":170,"column":6,"nodeType":"1131","endLine":170,"endColumn":8,"suggestions":"1324"},{"ruleId":"1129","severity":1,"message":"1187","line":133,"column":6,"nodeType":"1131","endLine":133,"endColumn":8,"suggestions":"1325"},{"ruleId":"1061","severity":1,"message":"1165","line":16,"column":10,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1326","line":33,"column":10,"nodeType":"1063","messageId":"1064","endLine":33,"endColumn":23},{"ruleId":"1061","severity":1,"message":"1327","line":51,"column":10,"nodeType":"1063","messageId":"1064","endLine":51,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1328","line":51,"column":20,"nodeType":"1063","messageId":"1064","endLine":51,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1233","line":62,"column":20,"nodeType":"1063","messageId":"1064","endLine":62,"endColumn":31},{"ruleId":"1061","severity":1,"message":"1329","line":65,"column":10,"nodeType":"1063","messageId":"1064","endLine":65,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1330","line":65,"column":18,"nodeType":"1063","messageId":"1064","endLine":65,"endColumn":27},{"ruleId":"1135","severity":1,"message":"1136","line":133,"column":11,"nodeType":"1092","endLine":140,"endColumn":13},{"ruleId":"1135","severity":1,"message":"1136","line":145,"column":13,"nodeType":"1092","endLine":145,"endColumn":33},{"ruleId":"1135","severity":1,"message":"1136","line":191,"column":18,"nodeType":"1092","endLine":191,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":193,"column":18,"nodeType":"1092","endLine":193,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":195,"column":18,"nodeType":"1092","endLine":195,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":197,"column":18,"nodeType":"1092","endLine":197,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":221,"column":11,"nodeType":"1092","endLine":228,"endColumn":13},{"ruleId":"1135","severity":1,"message":"1136","line":233,"column":13,"nodeType":"1092","endLine":233,"endColumn":63},{"ruleId":"1129","severity":1,"message":"1331","line":364,"column":6,"nodeType":"1131","endLine":364,"endColumn":15,"suggestions":"1332"},{"ruleId":"1129","severity":1,"message":"1333","line":373,"column":6,"nodeType":"1131","endLine":373,"endColumn":8,"suggestions":"1334"},{"ruleId":"1061","severity":1,"message":"1215","line":2,"column":17,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1335","line":10,"column":10,"nodeType":"1063","messageId":"1064","endLine":10,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1336","line":20,"column":10,"nodeType":"1063","messageId":"1064","endLine":20,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1337","line":30,"column":10,"nodeType":"1063","messageId":"1064","endLine":30,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1338","line":41,"column":10,"nodeType":"1063","messageId":"1064","endLine":41,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1339","line":51,"column":10,"nodeType":"1063","messageId":"1064","endLine":51,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1340","line":61,"column":10,"nodeType":"1063","messageId":"1064","endLine":61,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1341","line":71,"column":10,"nodeType":"1063","messageId":"1064","endLine":71,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1342","line":81,"column":10,"nodeType":"1063","messageId":"1064","endLine":81,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1343","line":91,"column":10,"nodeType":"1063","messageId":"1064","endLine":91,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1344","line":101,"column":10,"nodeType":"1063","messageId":"1064","endLine":101,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1210","line":1,"column":38,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1113","line":5,"column":3,"nodeType":"1063","messageId":"1064","endLine":5,"endColumn":7},{"ruleId":"1061","severity":1,"message":"1345","line":6,"column":3,"nodeType":"1063","messageId":"1064","endLine":6,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1346","line":13,"column":3,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":11},{"ruleId":"1061","severity":1,"message":"1347","line":39,"column":8,"nodeType":"1063","messageId":"1064","endLine":39,"endColumn":18},{"ruleId":"1061","severity":1,"message":"1348","line":42,"column":8,"nodeType":"1063","messageId":"1064","endLine":42,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1212","line":45,"column":18,"nodeType":"1063","messageId":"1064","endLine":45,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1112","line":55,"column":28,"nodeType":"1063","messageId":"1064","endLine":55,"endColumn":37},{"ruleId":"1061","severity":1,"message":"1349","line":56,"column":58,"nodeType":"1063","messageId":"1064","endLine":56,"endColumn":76},{"ruleId":"1061","severity":1,"message":"1350","line":60,"column":10,"nodeType":"1063","messageId":"1064","endLine":60,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1351","line":60,"column":19,"nodeType":"1063","messageId":"1064","endLine":60,"endColumn":29},{"ruleId":"1061","severity":1,"message":"1352","line":68,"column":10,"nodeType":"1063","messageId":"1064","endLine":68,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1353","line":68,"column":21,"nodeType":"1063","messageId":"1064","endLine":68,"endColumn":33},{"ruleId":"1061","severity":1,"message":"1354","line":69,"column":10,"nodeType":"1063","messageId":"1064","endLine":69,"endColumn":25},{"ruleId":"1061","severity":1,"message":"1355","line":69,"column":27,"nodeType":"1063","messageId":"1064","endLine":69,"endColumn":45},{"ruleId":"1135","severity":1,"message":"1136","line":160,"column":11,"nodeType":"1092","endLine":160,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":162,"column":11,"nodeType":"1092","endLine":162,"endColumn":32},{"ruleId":"1135","severity":1,"message":"1136","line":166,"column":11,"nodeType":"1092","endLine":166,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":168,"column":11,"nodeType":"1092","endLine":168,"endColumn":32},{"ruleId":"1135","severity":1,"message":"1136","line":172,"column":11,"nodeType":"1092","endLine":172,"endColumn":30},{"ruleId":"1135","severity":1,"message":"1136","line":174,"column":11,"nodeType":"1092","endLine":174,"endColumn":33},{"ruleId":"1135","severity":1,"message":"1136","line":178,"column":11,"nodeType":"1092","endLine":178,"endColumn":30},{"ruleId":"1135","severity":1,"message":"1136","line":180,"column":11,"nodeType":"1092","endLine":180,"endColumn":33},{"ruleId":"1135","severity":1,"message":"1136","line":184,"column":11,"nodeType":"1092","endLine":184,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":186,"column":11,"nodeType":"1092","endLine":186,"endColumn":32},{"ruleId":"1135","severity":1,"message":"1136","line":190,"column":11,"nodeType":"1092","endLine":190,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":192,"column":11,"nodeType":"1092","endLine":192,"endColumn":32},{"ruleId":"1135","severity":1,"message":"1136","line":196,"column":11,"nodeType":"1092","endLine":196,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":198,"column":11,"nodeType":"1092","endLine":198,"endColumn":32},{"ruleId":"1129","severity":1,"message":"1356","line":258,"column":6,"nodeType":"1131","endLine":258,"endColumn":18,"suggestions":"1357"},{"ruleId":"1129","severity":1,"message":"1358","line":280,"column":6,"nodeType":"1131","endLine":280,"endColumn":25,"suggestions":"1359"},{"ruleId":"1129","severity":1,"message":"1360","line":311,"column":6,"nodeType":"1131","endLine":311,"endColumn":13,"suggestions":"1361"},{"ruleId":"1129","severity":1,"message":"1362","line":356,"column":6,"nodeType":"1131","endLine":356,"endColumn":44,"suggestions":"1363"},{"ruleId":"1061","severity":1,"message":"1163","line":2,"column":5,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1215","line":3,"column":5,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":13},{"ruleId":"1061","severity":1,"message":"1292","line":5,"column":10,"nodeType":"1063","messageId":"1064","endLine":5,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1310","line":16,"column":8,"nodeType":"1063","messageId":"1064","endLine":16,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1212","line":19,"column":18,"nodeType":"1063","messageId":"1064","endLine":19,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1312","line":22,"column":11,"nodeType":"1063","messageId":"1064","endLine":22,"endColumn":29},{"ruleId":"1061","severity":1,"message":"1293","line":5,"column":3,"nodeType":"1063","messageId":"1064","endLine":5,"endColumn":8},{"ruleId":"1061","severity":1,"message":"1364","line":7,"column":3,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":6},{"ruleId":"1061","severity":1,"message":"1365","line":55,"column":16,"nodeType":"1063","messageId":"1064","endLine":55,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1260","line":60,"column":5,"nodeType":"1063","messageId":"1064","endLine":60,"endColumn":10},{"ruleId":"1061","severity":1,"message":"1233","line":75,"column":20,"nodeType":"1063","messageId":"1064","endLine":75,"endColumn":31},{"ruleId":"1135","severity":1,"message":"1136","line":118,"column":18,"nodeType":"1092","endLine":118,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":120,"column":18,"nodeType":"1092","endLine":120,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":122,"column":18,"nodeType":"1092","endLine":122,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":124,"column":18,"nodeType":"1092","endLine":124,"endColumn":47},{"ruleId":"1135","severity":1,"message":"1136","line":147,"column":11,"nodeType":"1092","endLine":155,"endColumn":13},{"ruleId":"1135","severity":1,"message":"1136","line":160,"column":13,"nodeType":"1092","endLine":160,"endColumn":63},{"ruleId":"1181","severity":1,"message":"1184","line":228,"column":28,"nodeType":"1107","messageId":"1183","endLine":228,"endColumn":30},{"ruleId":"1129","severity":1,"message":"1366","line":481,"column":6,"nodeType":"1131","endLine":481,"endColumn":13,"suggestions":"1367"},{"ruleId":"1129","severity":1,"message":"1333","line":490,"column":6,"nodeType":"1131","endLine":490,"endColumn":8,"suggestions":"1368"},{"ruleId":"1061","severity":1,"message":"1179","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":16},{"ruleId":"1061","severity":1,"message":"1346","line":2,"column":36,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":44},{"ruleId":"1061","severity":1,"message":"1369","line":3,"column":10,"nodeType":"1063","messageId":"1064","endLine":3,"endColumn":22},{"ruleId":"1061","severity":1,"message":"1212","line":24,"column":18,"nodeType":"1063","messageId":"1064","endLine":24,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1370","line":28,"column":10,"nodeType":"1063","messageId":"1064","endLine":28,"endColumn":17},{"ruleId":"1061","severity":1,"message":"1371","line":28,"column":19,"nodeType":"1063","messageId":"1064","endLine":28,"endColumn":29},{"ruleId":"1135","severity":1,"message":"1136","line":63,"column":16,"nodeType":"1092","endLine":63,"endColumn":41},{"ruleId":"1135","severity":1,"message":"1136","line":65,"column":16,"nodeType":"1092","endLine":65,"endColumn":41},{"ruleId":"1135","severity":1,"message":"1136","line":67,"column":16,"nodeType":"1092","endLine":67,"endColumn":41},{"ruleId":"1135","severity":1,"message":"1136","line":69,"column":16,"nodeType":"1092","endLine":69,"endColumn":41},{"ruleId":"1129","severity":1,"message":"1372","line":75,"column":3,"nodeType":"1063","endLine":75,"endColumn":12,"suggestions":"1373"},{"ruleId":"1061","severity":1,"message":"1292","line":2,"column":10,"nodeType":"1063","messageId":"1064","endLine":2,"endColumn":15},{"ruleId":"1061","severity":1,"message":"1176","line":15,"column":10,"nodeType":"1063","messageId":"1064","endLine":15,"endColumn":12},{"ruleId":"1061","severity":1,"message":"1275","line":28,"column":8,"nodeType":"1063","messageId":"1064","endLine":28,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1212","line":31,"column":18,"nodeType":"1063","messageId":"1064","endLine":31,"endColumn":24},{"ruleId":"1129","severity":1,"message":"1374","line":76,"column":6,"nodeType":"1131","endLine":76,"endColumn":21,"suggestions":"1375"},{"ruleId":"1135","severity":1,"message":"1136","line":120,"column":17,"nodeType":"1092","endLine":120,"endColumn":74},{"ruleId":"1135","severity":1,"message":"1136","line":138,"column":21,"nodeType":"1092","endLine":138,"endColumn":69},{"ruleId":"1135","severity":1,"message":"1136","line":158,"column":25,"nodeType":"1092","endLine":165,"endColumn":27},{"ruleId":"1061","severity":1,"message":"1163","line":1,"column":27,"nodeType":"1063","messageId":"1064","endLine":1,"endColumn":36},{"ruleId":"1061","severity":1,"message":"1165","line":7,"column":10,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":14},{"ruleId":"1061","severity":1,"message":"1093","line":7,"column":20,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":24},{"ruleId":"1061","severity":1,"message":"1177","line":7,"column":26,"nodeType":"1063","messageId":"1064","endLine":7,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1376","line":10,"column":8,"nodeType":"1063","messageId":"1064","endLine":10,"endColumn":20},{"ruleId":"1061","severity":1,"message":"1101","line":13,"column":7,"nodeType":"1063","messageId":"1064","endLine":13,"endColumn":14},{"ruleId":"1090","severity":1,"message":"1091","line":132,"column":9,"nodeType":"1092","endLine":147,"endColumn":10},{"ruleId":"1066","severity":1,"message":"1067","line":161,"column":5,"nodeType":"1068","messageId":"1069","endLine":180,"endColumn":6},{"ruleId":"1061","severity":1,"message":"1310","line":4,"column":8,"nodeType":"1063","messageId":"1064","endLine":4,"endColumn":9},{"ruleId":"1061","severity":1,"message":"1163","line":6,"column":10,"nodeType":"1063","messageId":"1064","endLine":6,"endColumn":19},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1061","severity":1,"message":"1166","line":9,"column":25,"nodeType":"1063","messageId":"1064","endLine":9,"endColumn":28},{"ruleId":"1129","severity":1,"message":"1377","line":64,"column":6,"nodeType":"1131","endLine":64,"endColumn":8,"suggestions":"1378"},"no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","'isMeasure' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'is15' is assigned a value but never used.","'self_tarting' is assigned a value but never used.","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'mac' is assigned a value but never used.","'hardwareVersion' is assigned a value but never used.","'softwareVersion' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","'ConfigProvider' is defined but never used.","no-native-reassign",["1379"],"no-negated-in-lhs",["1380"],"'BrowserRouter' is defined but never used.","'_resend' is assigned a value but never used.","'editInputIndex' is assigned a value but never used.","'editInputValue' is assigned a value but never used.","'Modal' is defined but never used.","'Spin' is defined but never used.","'bounds' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'MTop' is defined but never used.","'windowsHeight' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petId' is assigned a value but never used.","'mar' is assigned a value but never used.","'history' is assigned a value but never used.","'imageUrl' is assigned a value but never used.","'setImageUrl' is assigned a value but never used.","'getBase64' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Option' is assigned a value but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'patientId' is assigned a value but never used.","'Menu' is defined but never used.","'Select' is defined but never used.","'createFromIconfontCN' is defined but never used.","'selectPetInfoByUserId' is defined but never used.","'url' is assigned a value but never used.","'userImage' is assigned a value but never used.","'imageId' is assigned a value but never used.","'images' is assigned a value but never used.","'getOta' is defined but never used.","'storage' is assigned a value but never used.","'selectDeviceName' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'Radio' is defined but never used.","'petUrl' is assigned a value but never used.","'country' is assigned a value but never used.","'infoData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.","ArrayExpression",["1381"],"'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'num07' is assigned a value but never used.","'petSpecies' is assigned a value but never used.","'imgurl' is assigned a value but never used.","'age' is assigned a value but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'disabled' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'isMix' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'petName' is assigned a value but never used.","'speciesId' is assigned a value but never used.","'breedName' is assigned a value but never used.","'addLogin' is defined but never used.","'MyIcon' is assigned a value but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","'rMin_red' is defined but never used.","'rClose_red' is defined but never used.","'rMin_white' is defined but never used.","'rClose_white' is defined but never used.","'checkUser' is defined but never used.","'deskRegistAWSSNS' is defined but never used.","'options' is assigned a value but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'mTop' is defined but never used.","'del' is defined but never used.","'patch' is defined but never used.","'devWidth' is assigned a value but never used.","'size' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'windowssize' is assigned a value but never used.","'timer' is assigned a value but never used.","'px' is defined but never used.","'pX' is defined but never used.","'Popover' is defined but never used.","'Button' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","unexpected","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1382"],"React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",["1383"],"'SubMenu' is assigned a value but never used.","'allPetList' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","'headerRef' is assigned a value but never used.","'bluData' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.",["1384"],"React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1385"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1386"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1387"],"React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1388"],"React Hook useEffect has missing dependencies: 'hardwareInfo' and 'selectHardwareInfoFun'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1389"],"'useRef' is defined but never used.","'Content' is assigned a value but never used.","'Header' is assigned a value but never used.","'vibible' is assigned a value but never used.","'setVibible' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'usbDetect'. Either include it or remove the dependency array.",["1390"],"React Hook useEffect has a missing dependency: 'readQSMConnectionStatus'. Either include it or remove the dependency array.",["1391"],"'devicesTitleHeight' is defined but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1392"],"'UnassignModal' is defined but never used.","'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","'assignVisible' is assigned a value but never used.","'setAssignVisible' is assigned a value but never used.","'lastWorkplaceId' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1393"],"'Eci' is assigned a value but never used.","'wen1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1394","1395"],"Unnecessary escape character: \\-.",["1396","1397"],["1398","1399"],["1400","1401"],["1402","1403"],["1404","1405"],["1406","1407"],["1408","1409"],["1410","1411"],["1412","1413"],["1414","1415"],["1416","1417"],["1418","1419"],["1420","1421"],"no-dupe-keys","Duplicate key 'align'.","ObjectExpression","'hisHe' is assigned a value but never used.",["1422","1423"],["1424","1425"],["1426","1427"],["1428","1429"],"React Hook useEffect has a missing dependency: '_getEmergencyHistory'. Either include it or remove the dependency array.",["1430"],"React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",["1431"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1432"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1433"],"React Hook useEffect has a missing dependency: 'units'. Either include it or remove the dependency array.",["1434"],"'moment' is defined but never used.","'connectionKey' is assigned a value but never used.","'selectRoleId' is assigned a value but never used.","'workplaceName' is assigned a value but never used.","'workplaceId' is assigned a value but never used.","'organizationId' is assigned a value but never used.","'setOrganizationId' is assigned a value but never used.","'deviceType' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1435"],["1436"],"React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1437"],"React Hook useEffect has a missing dependency: 'setBiggieConnectStatusFun'. Either include it or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1438"],"React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1439"],"'Image' is defined but never used.","'Space' is defined but never used.","'Card' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1440"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1441"],"'postJson' is defined but never used.","'get' is defined but never used.","'Table' is defined but never used.","'Popconfirm' is defined but never used.","'loading' is assigned a value but never used.","'_del' is assigned a value but never used.","'tableData' is assigned a value but never used.","'historyData' is assigned a value but never used.","'PressButton_Pro' is defined but never used.","'_' is defined but never used.","'HistoryTable' is defined but never used.","'mellaConnectStatus' is assigned a value but never used.","'saveNum' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'Layout' is defined but never used.","'Input' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",["1442"],"React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",["1443"],["1444"],["1445"],"'useThrottleFn' is defined but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","'isMore' is assigned a value but never used.","'setIsMore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1446"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1447"],"'CtoF' is defined but never used.","'FtoC' is defined but never used.","'KgtoLb' is defined but never used.","'LbtoKg' is defined but never used.","'GToMl' is defined but never used.","'MltoG' is defined but never used.","'GToOz' is defined but never used.","'OztoG' is defined but never used.","'CmtoIn' is defined but never used.","'IntoCm' is defined but never used.","'PageHeader' is defined but never used.","'Carousel' is defined but never used.","'redjinggao' is defined but never used.","'MyModal' is defined but never used.","'rulerConnectStatus' is assigned a value but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","'selectPetDetail' is assigned a value but never used.","'setSelectPetDetail' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1448"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1449"],"React Hook useEffect has missing dependencies: 'petLengthDataConvert' and 'petMessage'. Either include them or remove the dependency array.",["1450"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'headValue', 'inputIndex', 'lowerValue', 'neckValue', 'radioValue', 'receiveBroadcastHardwareInfo', 'rulerUnit', 'selectHardwareInfo', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1451"],"'Tag' is defined but never used.","'memo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["1452"],["1453"],"'PlusOutlined' is defined but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1454"],"React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1455"],"'SelectionBox' is defined but never used.","React Hook useEffect has missing dependencies: 'initSelectVale' and 'listArr'. Either include them or remove the dependency array. If 'setSelectValue' needs the current value of 'listArr', you can also switch to useReducer instead of useState and read 'listArr' in the reducer.",["1456"],"no-global-assign","no-unsafe-negation",{"desc":"1457","fix":"1458"},{"desc":"1459","fix":"1460"},{"desc":"1461","fix":"1462"},{"desc":"1463","fix":"1464"},{"desc":"1465","fix":"1466"},{"desc":"1467","fix":"1468"},{"desc":"1469","fix":"1470"},{"desc":"1471","fix":"1472"},{"desc":"1473","fix":"1474"},{"desc":"1475","fix":"1476"},{"desc":"1477","fix":"1478"},{"desc":"1479","fix":"1480"},{"desc":"1465","fix":"1481"},{"messageId":"1482","fix":"1483","desc":"1484"},{"messageId":"1485","fix":"1486","desc":"1487"},{"messageId":"1482","fix":"1488","desc":"1484"},{"messageId":"1485","fix":"1489","desc":"1487"},{"messageId":"1482","fix":"1490","desc":"1484"},{"messageId":"1485","fix":"1491","desc":"1487"},{"messageId":"1482","fix":"1492","desc":"1484"},{"messageId":"1485","fix":"1493","desc":"1487"},{"messageId":"1482","fix":"1494","desc":"1484"},{"messageId":"1485","fix":"1495","desc":"1487"},{"messageId":"1482","fix":"1496","desc":"1484"},{"messageId":"1485","fix":"1497","desc":"1487"},{"messageId":"1482","fix":"1498","desc":"1484"},{"messageId":"1485","fix":"1499","desc":"1487"},{"messageId":"1482","fix":"1500","desc":"1484"},{"messageId":"1485","fix":"1501","desc":"1487"},{"messageId":"1482","fix":"1502","desc":"1484"},{"messageId":"1485","fix":"1503","desc":"1487"},{"messageId":"1482","fix":"1504","desc":"1484"},{"messageId":"1485","fix":"1505","desc":"1487"},{"messageId":"1482","fix":"1506","desc":"1484"},{"messageId":"1485","fix":"1507","desc":"1487"},{"messageId":"1482","fix":"1508","desc":"1484"},{"messageId":"1485","fix":"1509","desc":"1487"},{"messageId":"1482","fix":"1510","desc":"1484"},{"messageId":"1485","fix":"1511","desc":"1487"},{"messageId":"1482","fix":"1512","desc":"1484"},{"messageId":"1485","fix":"1513","desc":"1487"},{"messageId":"1482","fix":"1514","desc":"1484"},{"messageId":"1485","fix":"1515","desc":"1487"},{"messageId":"1482","fix":"1516","desc":"1484"},{"messageId":"1485","fix":"1517","desc":"1487"},{"messageId":"1482","fix":"1518","desc":"1484"},{"messageId":"1485","fix":"1519","desc":"1487"},{"messageId":"1482","fix":"1520","desc":"1484"},{"messageId":"1485","fix":"1521","desc":"1487"},{"desc":"1522","fix":"1523"},{"desc":"1524","fix":"1525"},{"desc":"1526","fix":"1527"},{"desc":"1528","fix":"1529"},{"desc":"1530","fix":"1531"},{"desc":"1532","fix":"1533"},{"desc":"1532","fix":"1534"},{"desc":"1535","fix":"1536"},{"desc":"1537","fix":"1538"},{"desc":"1539","fix":"1540"},{"desc":"1541","fix":"1542"},{"desc":"1543","fix":"1544"},{"desc":"1545","fix":"1546"},{"desc":"1547","fix":"1548"},{"desc":"1461","fix":"1549"},{"desc":"1461","fix":"1550"},{"desc":"1551","fix":"1552"},{"desc":"1553","fix":"1554"},{"desc":"1555","fix":"1556"},{"desc":"1557","fix":"1558"},{"desc":"1559","fix":"1560"},{"desc":"1561","fix":"1562"},{"desc":"1563","fix":"1564"},{"desc":"1553","fix":"1565"},{"desc":"1566","fix":"1567"},{"desc":"1568","fix":"1569"},{"desc":"1570","fix":"1571"},"Update the dependencies array to be: [form, storage.userId]",{"range":"1572","text":"1573"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"1574","text":"1575"},"Update the dependencies array to be: [destroyOnClose, width]",{"range":"1576","text":"1577"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"1578","text":"1579"},"Update the dependencies array to be: []",{"range":"1580","text":"1581"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"1582","text":"1583"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"1584","text":"1585"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"1586","text":"1587"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",{"range":"1588","text":"1589"},"Update the dependencies array to be: [usbDetect]",{"range":"1590","text":"1591"},"Update the dependencies array to be: [readQSMConnectionStatus]",{"range":"1592","text":"1593"},"Update the dependencies array to be: [hardwareList]",{"range":"1594","text":"1595"},{"range":"1596","text":"1581"},"removeEscape",{"range":"1597","text":"1598"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1599","text":"1600"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1601","text":"1598"},{"range":"1602","text":"1600"},{"range":"1603","text":"1598"},{"range":"1604","text":"1600"},{"range":"1605","text":"1598"},{"range":"1606","text":"1600"},{"range":"1607","text":"1598"},{"range":"1608","text":"1600"},{"range":"1609","text":"1598"},{"range":"1610","text":"1600"},{"range":"1611","text":"1598"},{"range":"1612","text":"1600"},{"range":"1613","text":"1598"},{"range":"1614","text":"1600"},{"range":"1615","text":"1598"},{"range":"1616","text":"1600"},{"range":"1617","text":"1598"},{"range":"1618","text":"1600"},{"range":"1619","text":"1598"},{"range":"1620","text":"1600"},{"range":"1621","text":"1598"},{"range":"1622","text":"1600"},{"range":"1623","text":"1598"},{"range":"1624","text":"1600"},{"range":"1625","text":"1598"},{"range":"1626","text":"1600"},{"range":"1627","text":"1598"},{"range":"1628","text":"1600"},{"range":"1629","text":"1598"},{"range":"1630","text":"1600"},{"range":"1631","text":"1598"},{"range":"1632","text":"1600"},{"range":"1633","text":"1598"},{"range":"1634","text":"1600"},"Update the dependencies array to be: [_getEmergencyHistory, petDetailInfo]",{"range":"1635","text":"1636"},"Update the dependencies array to be: [mellaMeasureNum]",{"range":"1637","text":"1638"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"1639","text":"1640"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"1641","text":"1642"},"Update the dependencies array to be: [biggieBodyWeight, units]",{"range":"1643","text":"1644"},"Update the dependencies array to be: [_getExam]",{"range":"1645","text":"1646"},{"range":"1647","text":"1646"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"1648","text":"1649"},"Update the dependencies array to be: [petDetailInfo, setBiggieConnectStatusFun]",{"range":"1650","text":"1651"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"1652","text":"1653"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"1654","text":"1655"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"1656","text":"1657"},"Update the dependencies array to be: [getAllPet]",{"range":"1658","text":"1659"},"Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",{"range":"1660","text":"1661"},{"range":"1662","text":"1577"},{"range":"1663","text":"1577"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"1664","text":"1665"},"Update the dependencies array to be: [storage.userId]",{"range":"1666","text":"1667"},"Update the dependencies array to be: [finishScan, inputIndex, newData]",{"range":"1668","text":"1669"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"1670","text":"1671"},"Update the dependencies array to be: [petId, petLengthDataConvert, petMessage]",{"range":"1672","text":"1673"},"Update the dependencies array to be: [bodyValue, changeUnit, headValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",{"range":"1674","text":"1675"},"Update the dependencies array to be: [getPetTemperatureData, petId]",{"range":"1676","text":"1677"},{"range":"1678","text":"1667"},"Add dependencies array: [callBack, timers]",{"range":"1679","text":"1680"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"1681","text":"1682"},"Update the dependencies array to be: [initSelectVale, listArr]",{"range":"1683","text":"1684"},[2508,2510],"[form, storage.userId]",[4834,4846],"[letterListCopy, phoneListCopy, searchText]",[2079,2081],"[destroyOnClose, width]",[41714,41716],"[_noUSB, _send, blueSearch]",[41788,41814],"[]",[9316,9318],"[setReceiveBroadcastHardwareInfoFun]",[10420,10450],"[devicesList, receiveBroadcastHardwareInfo]",[4953,4970],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[1842,1877],"[selectHardwareType, hardwareList, hardwareInfo, selectHardwareInfoFun]",[2316,2318],"[usbDetect]",[2391,2393],"[readQSMConnectionStatus]",[3213,3215],"[hardwareList]",[5063,5089],[21677,21678],"",[21677,21677],"\\",[21878,21879],[21878,21878],[22461,22462],[22461,22461],[22662,22663],[22662,22662],[23342,23343],[23342,23342],[23543,23544],[23543,23543],[24685,24686],[24685,24685],[24886,24887],[24886,24886],[25493,25494],[25493,25493],[25694,25695],[25694,25694],[26360,26361],[26360,26360],[26561,26562],[26561,26561],[27132,27133],[27132,27132],[27238,27239],[27238,27238],[42419,42420],[42419,42419],[42620,42621],[42620,42620],[43150,43151],[43150,43150],[43351,43352],[43351,43351],[50427,50442],"[_getEmergencyHistory, petDetailInfo]",[50859,50861],"[mellaMeasureNum]",[52102,52119],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[52660,52680],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[54544,54562],"[biggieBodyWeight, units]",[9945,9947],"[_getExam]",[4098,4100],[7021,7037],"[hardwareReduce, weight]",[7225,7240],"[petDetailInfo, setBiggieConnectStatusFun]",[7161,7181],"[hardwareList, selectHardwareInfo, selectHardwareType]",[8426,8433],"[callBack, prediction, timeNum, value]",[9055,9075],"[mellaConnectStatus, value]",[4201,4203],"[getAllPet]",[4334,4347],"[searchPetByPetNameOrPatientId, searchValue]",[4542,4544],[3573,3575],[9623,9632],"[getPetTemperatureData, reRender, saveNum]",[9844,9846],"[storage.userId]",[6623,6635],"[finishScan, inputIndex, newData]",[7086,7105],"[inputIndex, rulerConfirmCount]",[7932,7939],"[petId, petLengthDataConvert, petMessage]",[9472,9510],"[bodyValue, changeUnit, headValue, inputIndex, lowerValue, neckValue, radioValue, receiveBroadcastHardwareInfo, rulerConfirmCount, rulerMeasureValue, rulerUnit, selectHardwareInfo, torsoValue, upperValue]",[13607,13614],"[getPetTemperatureData, petId]",[13803,13805],[2257,2257],", [callBack, timers]",[2356,2371],"[callBack, carouselIndex]",[1734,1736],"[initSelectVale, listArr]"]