[{"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx":"1","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\api.js":"2","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\measure\\index.jsx":"3","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx":"4","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\choose\\index.jsx":"5","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx":"6","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx":"7","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx":"8","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetLogin\\index.jsx":"9","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx":"10","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ishavePMS\\index.jsx":"11","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\invite\\index.jsx":"12","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx":"13","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx":"14","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx":"15","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx":"16","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\apiKey\\index.jsx":"17","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\norMalMeasurement\\index.jsx":"18","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectLocation\\index.jsx":"19","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx":"20","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx":"21","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectExam\\index.jsx":"22","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\verifyEmail\\index.jsx":"23","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetSelectTime\\index.jsx":"24","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\vetProfile\\index.jsx":"25","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx":"26","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx":"27","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx":"28","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx":"29","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx":"30","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx":"31","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetSelectExam\\index.jsx":"32","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx":"33","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx":"34","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx":"35","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx":"36","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx":"37","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx":"38","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx":"39","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\findMyOrganization\\index.jsx":"40","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectMella\\index.jsx":"41","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\findMyWorkplace\\index.jsx":"42","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"43","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"44","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js":"45","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx":"46","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"47","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js":"48","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx":"49","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx":"50"},{"size":28164,"mtime":1661396254399,"results":"51","hashOfConfig":"52"},{"size":2204,"mtime":1661332045007,"results":"53","hashOfConfig":"52"},{"size":113182,"mtime":1661324384369,"results":"54","hashOfConfig":"52"},{"size":41489,"mtime":1661332045024,"results":"55","hashOfConfig":"52"},{"size":3702,"mtime":1661324384283,"results":"56","hashOfConfig":"52"},{"size":12367,"mtime":1661324384329,"results":"57","hashOfConfig":"52"},{"size":10956,"mtime":1661324384302,"results":"58","hashOfConfig":"52"},{"size":14139,"mtime":1661324384362,"results":"59","hashOfConfig":"52"},{"size":7259,"mtime":1661324384310,"results":"60","hashOfConfig":"52"},{"size":5849,"mtime":1661324384400,"results":"61","hashOfConfig":"52"},{"size":1538,"mtime":1661324384349,"results":"62","hashOfConfig":"52"},{"size":6701,"mtime":1661324384341,"results":"63","hashOfConfig":"52"},{"size":8160,"mtime":1661324384360,"results":"64","hashOfConfig":"52"},{"size":4334,"mtime":1661324384336,"results":"65","hashOfConfig":"52"},{"size":16395,"mtime":1661324384379,"results":"66","hashOfConfig":"52"},{"size":16122,"mtime":1661324384376,"results":"67","hashOfConfig":"52"},{"size":8684,"mtime":1661324384274,"results":"68","hashOfConfig":"52"},{"size":141705,"mtime":1661324637421,"results":"69","hashOfConfig":"52"},{"size":10128,"mtime":1661324384413,"results":"70","hashOfConfig":"52"},{"size":36420,"mtime":1661327098443,"results":"71","hashOfConfig":"52"},{"size":14207,"mtime":1661324384357,"results":"72","hashOfConfig":"52"},{"size":12629,"mtime":1661324384410,"results":"73","hashOfConfig":"52"},{"size":4488,"mtime":1661327136023,"results":"74","hashOfConfig":"52"},{"size":4961,"mtime":1661324384317,"results":"75","hashOfConfig":"52"},{"size":16691,"mtime":1661327184304,"results":"76","hashOfConfig":"52"},{"size":6955,"mtime":1661324384405,"results":"77","hashOfConfig":"52"},{"size":3725,"mtime":1661412835846,"results":"78","hashOfConfig":"52"},{"size":15507,"mtime":1661324384263,"results":"79","hashOfConfig":"52"},{"size":12304,"mtime":1661324384393,"results":"80","hashOfConfig":"52"},{"size":7585,"mtime":1661324384396,"results":"81","hashOfConfig":"52"},{"size":13514,"mtime":1661324384252,"results":"82","hashOfConfig":"52"},{"size":52142,"mtime":1661324384314,"results":"83","hashOfConfig":"52"},{"size":5364,"mtime":1661324384363,"results":"84","hashOfConfig":"52"},{"size":4120,"mtime":1661324384277,"results":"85","hashOfConfig":"52"},{"size":10384,"mtime":1661324384428,"results":"86","hashOfConfig":"52"},{"size":9762,"mtime":1661324384267,"results":"87","hashOfConfig":"52"},{"size":3416,"mtime":1661324384358,"results":"88","hashOfConfig":"52"},{"size":18286,"mtime":1661332045026,"results":"89","hashOfConfig":"52"},{"size":25908,"mtime":1661324384420,"results":"90","hashOfConfig":"52"},{"size":3391,"mtime":1661324384321,"results":"91","hashOfConfig":"52"},{"size":3943,"mtime":1661324384417,"results":"92","hashOfConfig":"52"},{"size":6406,"mtime":1661324384325,"results":"93","hashOfConfig":"52"},{"size":3569,"mtime":1660200016614,"results":"94","hashOfConfig":"52"},{"size":2301,"mtime":1661413541920,"results":"95","hashOfConfig":"52"},{"size":3438,"mtime":1661338598369,"results":"96","hashOfConfig":"52"},{"size":7170,"mtime":1661413281531,"results":"97","hashOfConfig":"52"},{"size":10996,"mtime":1661405498110,"results":"98","hashOfConfig":"52"},{"size":3785,"mtime":1661406115094,"results":"99","hashOfConfig":"52"},{"size":6805,"mtime":1661419546899,"results":"100","hashOfConfig":"52"},{"size":30741,"mtime":1661418005124,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fb2hrx",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"116"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"132"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"132"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"147"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"154"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"158"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\doctorAddPet\\index.jsx",["229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\api\\api.js",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\measure\\index.jsx",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Menu,\r\n  Modal,\r\n  Table,\r\n  Popconfirm,\r\n  Tooltip,\r\n  message,\r\n  Select,\r\n} from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport ye from './../../assets/images/ye1.png'\r\nimport er from './../../assets/images/er3.png'\r\nimport gang from './../../assets/images/gang3.png'\r\nimport dog from './../../assets/images/dog.png'\r\nimport cat from './../../assets/images/cat.png'\r\nimport other from './../../assets/images/other.png'\r\nimport edit from './../../assets/images/edit.png'\r\nimport del from './../../assets/images/del.png'\r\nimport start from './../../assets/img/start.png'\r\nimport redjinggao from './../../assets/img/redjinggao.png'\r\nimport placement_gang from './../../assets/images/placement_gang.png'\r\nimport placement_er from './../../assets/images/placement_er.png'\r\nimport palcement_ye from './../../assets/images/palcement_ye.png'\r\nimport close from './../../assets/img/close.png'\r\n\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\nimport electronStore from './../../utils/electronStore'\r\nimport { mTop, px, MTop, win } from '../../utils/px';\r\nimport { fetchRequest3 } from '../../utils/FetchUtil3';\r\nimport Heard from '../../utils/heard/Heard';\r\n\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment';\r\nimport ReactECharts from 'echarts-for-react';// 引入 ECharts 主模块\r\nimport 'echarts/lib/chart/bar';// 引入柱状图\r\nimport 'echarts/lib/component/tooltip';// 引入提示框和标题组件\r\nimport 'echarts/lib/component/title';\r\n\r\nimport './index.less';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\n\r\nlet storage = window.localStorage;\r\nlet echartCi = 0\r\nlet saveHistoryTime = null, getSerialTime = null\r\nlet ipcRenderer = window.electron.ipcRenderer\r\nlet detectTimer = null, countdownTimer = null;\r\n\r\nlet resyncDeviceIsClick = true //用于控制多次点击重新配对按钮\r\nlet num = 0, is97Time = null, is193Time = null, initTime = null\r\n\r\nlet num07 = 0       //接收到07命令行的次数\r\nlet indexNum = 0\r\nlet meetCondition = false //满足第一次测量在76.6与85之间\r\nlet tempArr = []\r\nlet dropNum = 0\r\n\r\nlet lastMeasureTemp = 0, lastMeasureBig = true\r\n\r\nlet firstMeasure = true  //用户反馈刚到这个界面测量就会显示测量温度过高,因此在这里做一个限制,第一次测量不进入温度过高提示\r\nexport default class Mesasure extends Component {\r\n  state = {\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    value: '',\r\n    api: '',\r\n    id: '',\r\n    dataArr: [],\r\n    seleceID: '',//医生id\r\n    data: { ci: [''], wen: [] },\r\n    echarsData: {\r\n      Eci: [],\r\n      wen0: [],\r\n      wen1: []\r\n    },\r\n    temColor: '',\r\n    Temp: '',\r\n    isMeasure: false,     //腋温正在测量中\r\n\r\n    mearsurePart: 1,\r\n    historyData: [],\r\n    patientId: '',\r\n    spin: false,        //patientId后面的刷新按钮是否旋转\r\n    petName: '',\r\n    notes: '',\r\n    addpatient_petName: '',\r\n    addpatient_description: '',\r\n    addpatient_species: 1,\r\n    roomTemperature: '',\r\n    referenceRectalTemperature: '',\r\n    bodyConditionScore: '',\r\n    furLength: '',\r\n    bodyType: '',\r\n    heartRate: '',\r\n    bloodPressure: '',\r\n    respiratoryRate: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n    editVisible: false,\r\n    err07Visible: false,\r\n\r\n    leftStatus: 3,         //1代表着有宠物信息，2代表着添加宠物信息，3代表着初始化，没有填入patientId\r\n\r\n    selectPet: {\r\n      petId: '',\r\n      petName: '',\r\n      owner: '',\r\n      breedName: '',\r\n      isMix: false,\r\n      age: '',\r\n      weight: '',\r\n      birthday: ''\r\n    },\r\n    units: '℉',\r\n    measuerStatus: 'disconnected',\r\n    isconnected: false,\r\n    countdown: 60,\r\n    isPetCharacteristics: true,\r\n    isEmergency: false,\r\n    seleceEmergencies: {},\r\n    emerPatientID: '',\r\n    emerData: [],         //临床测试所有数据,用于传到mella后台\r\n    petVitalTypeId: '01',  //测量部位\r\n\r\n\r\n\r\n    memo: '',\r\n    editRectal: '',\r\n    editRoomTemperature: '',\r\n    editHeartRate: '',\r\n    editRespiratoryRate: '',\r\n    editBloodPressure: '',\r\n    editBodyConditionScore: '',\r\n    editFurLength: '',\r\n\r\n    noUSB: false,  //是否有usb底座，为true代表没有\r\n\r\n\r\n    tip: '',\r\n    tipSpin: false,\r\n    loading: false,\r\n    showHistoryEchart: false,  //在展示历史曲线的时候为true，当开始测量为false\r\n    tempHeight: false,           //第一次温度过高,需要冷却一下\r\n  }\r\n\r\n  componentWillMount () {\r\n    try {\r\n      console.log('-----------------===============-------------', this.props.location.isconnected);\r\n      if (this.props.location.isconnected === false || this.props.location.isconnected === true) {\r\n        if (this.props.location.isconnected === false) {\r\n\r\n        } else {\r\n          this.setState({\r\n            measuerStatus: 'connented',\r\n            isconnected: true\r\n\r\n          })\r\n          is97Time = new Date()\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    firstMeasure = true\r\n\r\n\r\n    ipcRenderer.send('Lowbig', win())\r\n    console.log(this.props);\r\n    storage.isClinical = 'true'\r\n\r\n    //这里是为了从编辑宠物界面回来的时候能够直接展示这个宠物\r\n    if (this.props.location.participate) {\r\n      let props = this.props.location.participate\r\n\r\n      this.setState({\r\n        patientId: props.patientId\r\n      }, () => {\r\n        this._getPetInfo()\r\n      })\r\n    } else {\r\n      if (storage.measurepatientId) {\r\n        console.log('有上级传来的数据:', storage.measurepatientId);\r\n        this.setState({\r\n          patientId: storage.measurepatientId\r\n        }, () => {\r\n          this._getPetInfo()\r\n        })\r\n      }\r\n    }\r\n\r\n    //这里是记录从哪里传过来的，是普通医生、ezyVet、vetspire\r\n    if (this.props.location.identity) {\r\n      switch (this.props.location.identity) {\r\n        case '1':\r\n          console.log('这是从vetspire来的')\r\n\r\n          break;\r\n        case '2':\r\n          console.log('这是从ezyVet来的')\r\n          if (this.props.location.patientId) {\r\n            this.setState({\r\n              patientId: this.props.location.patientId\r\n            }, () => {\r\n              this._getPetInfo()\r\n            })\r\n          }\r\n\r\n          break;\r\n        case '3':\r\n          console.log('这是从普通医生来的来的');\r\n          // if (this.props.location.patientId) {\r\n          //   this.setState({\r\n          //     patientId: this.props.location.patientId\r\n          //   }, () => {\r\n          //     this._getPetInfo()\r\n          //   })\r\n          // }\r\n          this._getPetInfoBySave()\r\n          break;\r\n        default: console.log('暂未定义');\r\n          break;\r\n      }\r\n    }\r\n\r\n    let hardSet = electronStore.get('hardwareConfiguration')\r\n\r\n    if (!hardSet) {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false,\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: '45' },\r\n        autoOff: { length: 0, number: '30' },\r\n      }\r\n      electronStore.set('hardwareConfiguration', settings)\r\n      this.setState({\r\n        units: '℉'\r\n      })\r\n    } else {\r\n      let units = hardSet.isHua ? '℉' : '℃'\r\n      this.setState({\r\n        units\r\n      })\r\n    }\r\n\r\n\r\n\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('usbDetect', this.usbDetect)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    //分辨率改变后窗口自动改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //检测有没有充电桩、温度计\r\n\r\n\r\n    this._whether_to_connect_to_mella()\r\n    countdownTimer && clearInterval(countdownTimer)\r\n\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('usbDetect', this.usbDetect)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    detectTimer && clearInterval(detectTimer)\r\n    this.timer && clearTimeout(this.timer)\r\n    countdownTimer && clearInterval(countdownTimer)\r\n    getSerialTime && clearTimeout(getSerialTime)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    message.destroy()\r\n    firstMeasure = true\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  usbDetect = (event, data) => {\r\n    if (data === true) {\r\n      this._whether_to_connect_to_mella()\r\n    } else {\r\n      this.detectTimer && clearInterval(this.detectTimer)\r\n      num07 = 0\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n\r\n    this.command(data)()\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true,\r\n          measuerStatus: 'disconnected',\r\n          countdown: 60,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          echarsData: {\r\n            Eci: [],\r\n            wen0: [],\r\n            wen1: []\r\n          },\r\n          Temp: '',\r\n          emerData: []\r\n        })\r\n        echartCi = 0\r\n        meetCondition = false\r\n      }\r\n\r\n    }\r\n  }\r\n  _whether_to_connect_to_mella = () => {\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    message.destroy()\r\n    this.detectTimer = setInterval(() => {\r\n      if (this.state.isMeasure) {\r\n        return\r\n      }\r\n      // console.log(initTime);\r\n      if (!initTime) {\r\n        console.log('断开连接');\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown: 0,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n        initTime = new Date()\r\n        meetCondition = false\r\n      } else {\r\n        // if (this.state.measuerStatus === 'disconnected') {\r\n        //   ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n        // }\r\n        ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n\r\n        if (new Date() - initTime < 5000) {\r\n          console.log('连接成功', indexNum);\r\n          if (indexNum++ % 5 === 1) {\r\n            console.log('去询问探头');\r\n            ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n          }\r\n\r\n\r\n\r\n        } else {\r\n\r\n          console.log('2断开连接');\r\n          this.setState({\r\n            measuerStatus: 'disconnected',\r\n            countdown: 0,\r\n            isMeasure: false,\r\n            isconnected: false,\r\n            isEarMeasure: false\r\n          })\r\n          meetCondition = false\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  getOption = () => {\r\n    let { units } = this.state\r\n    let min, max;\r\n    if (units === '℃') {\r\n      min = 25\r\n      max = 45\r\n    } else {\r\n      min = 75\r\n      max = 115\r\n    }\r\n    let { echarsData } = this.state\r\n    let { Eci, wen0, wen1 } = echarsData\r\n    let that = this\r\n    let option = {\r\n      color: ['#81b22f'],\r\n      tooltip: {\r\n        /*返回需要的信息*/\r\n        trigger: 'axis',\r\n        triggerOn: 'mousemove',\r\n        enterable: true,\r\n        formatter: function (param) {\r\n          var value = param[0].value;\r\n          // console.log('----para', param);\r\n          return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(1)}${that.state.units}</div>`\r\n        }\r\n      },\r\n      xAxis: {\r\n        name: 'SPL',\r\n        nameLocation: 'end',\r\n        nameTextStyle: {\r\n          align: 'left',\r\n        },\r\n        type: 'category',\r\n        // data: [\"\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,],\r\n        data: Eci,\r\n        // data:['','15miao','30miao'],\r\n        axisLine: {\r\n          lineStyle: {\r\n            // 设置x轴颜色\r\n            color: '#A0A0A0',\r\n            show: true\r\n          }\r\n        },\r\n        // 设置X轴数据旋转倾斜\r\n        axisLabel: {\r\n          rotate: 0, // 旋转角度\r\n          interval: 29  //设置X轴数据间隔几个显示一个，为0表示都显示\r\n\r\n        },\r\n\r\n      },\r\n      yAxis: {\r\n        name: 'temperature',\r\n        type: 'value',\r\n        min, // 设置y轴刻度的最小值\r\n        max,  // 设置y轴刻度的最大值\r\n        splitNumber: 0,  // 设置y轴刻度间隔个数\r\n        nameTextStyle: {\r\n          padding: [0, 0, 0, 8],\r\n          // backgroundColor: 'pink',\r\n          width: '1200px',\r\n          // fontSize: 20,\r\n          align: 'left',\r\n        },\r\n\r\n        axisLine: {\r\n          lineStyle: {\r\n            // 设置x轴颜色\r\n            color: '#A0A0A0',\r\n            show: true\r\n          }\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n      },\r\n      series: [{\r\n        name: '模拟数据',\r\n        type: 'line',\r\n        showSymbol: false,\r\n        hoverAnimation: false,\r\n        // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\r\n        data: wen0,\r\n        smooth: 0.5,\r\n        symbol: 'none',\r\n        itemStyle: {\r\n          normal: {\r\n            lineStyle: {        // 系列级个性化折线样式\r\n              width: 2,\r\n              type: 'solid',\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 1,\r\n                x2: 0,\r\n                y2: 0,\r\n                colorStops: [{\r\n                  offset: 0.5, color: '#47C2ED' // 0% 处的颜色  蓝\r\n                }, {\r\n                  offset: 1, color: '#78D35D' // 50% 处的颜色  绿\r\n                },\r\n                  // {\r\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\r\n                  // }\r\n                ],\r\n                globalCoord: false // 缺省为 false\r\n              }\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n    return option;\r\n  }\r\n\r\n  handleClick = e => {\r\n    console.log('---------------身份', storage.identity);\r\n\r\n    switch (e.key) {\r\n      case '1':\r\n        //  storage.measurepatientId = this.state.patientId; console.log('返回前的问题查看：', this.props.history); this.props.history.goBack()\r\n        switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n          case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n            break;\r\n          case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n          case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n\r\n\r\n          default:\r\n            break;\r\n        }\r\n        break;\r\n      case '2': storage.measurepatientId = ''; this.props.history.push('/')\r\n        break;\r\n      case '3': storage.measurepatientId = this.state.patientId; this.props.history.push('/page12');\r\n        break;\r\n      case '4': storage.measurepatientId = this.state.patientId; this.props.history.push({ pathname: '/page10', isconnected: this.state.isconnected })\r\n        break;\r\n      case '5': this.props.history.push('/menuOptions/settings'); break;\r\n      default: console.log('这个选项还没有做呢');\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n  command = (newArr) => {\r\n    const instruction = [209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 7, 99]\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n    if (newArr[2] !== 7) {\r\n      initTime = new Date()\r\n      num07 = 0\r\n    } else {\r\n      num07++\r\n    }\r\n\r\n\r\n    const commandArr = {\r\n      209: () => {  //腋温\r\n\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${(dataArr1[4])}`)\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${(dataArr1[6])}`)\r\n        let temp2 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n        let pdt0 = parseFloat(`${dataArr1[9]}.${(dataArr1[10])}`)\r\n        let pdt1 = parseFloat(`${dataArr1[11]}.${(dataArr1[12])}`)\r\n        let alpha0 = parseFloat(`${dataArr1[13]}.${(dataArr1[14])}`)\r\n        let alpha1 = parseFloat(`${dataArr1[15]}.${(dataArr1[16])}`)\r\n        let Temp = temp0\r\n\r\n        if (Temp === 0 || Temp === null || Temp === undefined) {\r\n          return\r\n        }\r\n\r\n        if (this.state.isMeasure === false) {\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n          this.setState({\r\n            echarsData: {\r\n              Eci: [],\r\n              wen0: [],\r\n              wen1: []\r\n            },\r\n            countdown: 60\r\n\r\n          })\r\n          echartCi = 0\r\n\r\n        }\r\n\r\n\r\n\r\n        //需要做第一次温度,判断,如果温度低于76.6(24.8)则界面显示low,并且不记录上传到后台的临床测试数据emerData\r\n        //需要第一次做温度判断,如果温度高于85(29.4)℉,则跳出高温弹窗,不记录上传到后台的临床测试数据emerDate,并且第一次测量也为true\r\n\r\n        if (!meetCondition) {\r\n          dropNum = 0\r\n          tempArr = []\r\n          if (Temp >= 24.8 && Temp <= 29.4) {\r\n            meetCondition = true\r\n\r\n            if (countdownTimer) {\r\n              console.log('有定时器了，清理掉');\r\n              clearInterval(countdownTimer)\r\n              this.setState((prestate, props) => ({\r\n                countdown: 60\r\n              }));\r\n            }\r\n            countdownTimer = setInterval(() => {\r\n              console.log('进入定时器');\r\n              let { countdown, isconnected } = this.state\r\n              if (countdown <= 0) {\r\n                countdown = 60\r\n              }\r\n              this.setState({\r\n                countdown: countdown - 1\r\n\r\n              })\r\n              if (countdown <= 1) {\r\n                clearInterval(countdownTimer)\r\n                console.log('我要去发送了');\r\n                ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n              }\r\n              if (isconnected === false) {\r\n                clearInterval(countdownTimer)\r\n              }\r\n            }, 1000);\r\n\r\n\r\n\r\n            let emerData = this.state.emerData\r\n            let str = {\r\n              data0: temp0,\r\n              data1: temp1,\r\n              data2: temp2,\r\n              pdt0,\r\n              pdt1,\r\n              Alpha0: alpha0,\r\n              Alpha1: alpha1,\r\n            }\r\n            emerData.push(str)\r\n\r\n            let { echarsData } = this.state\r\n            let { wen0, wen1, Eci } = echarsData\r\n            Eci.push((echartCi++))\r\n            if (this.state.units === '℃') {\r\n              wen0.push(temp0)\r\n              wen1.push(temp1)\r\n            } else {\r\n              wen0.push(temp0 * 1.8 + 32)\r\n              wen1.push(temp1 * 1.8 + 32)\r\n            }\r\n\r\n            this.setState({\r\n              Temp,\r\n              echarsData,\r\n              isMeasure: true,\r\n              measuerStatus: 'connented',\r\n              isconnected: true,\r\n              showHistoryEchart: false,\r\n              emerData,\r\n              tempHeight: false\r\n            }, () => {\r\n              const option = this.getOption();\r\n              this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n            })\r\n\r\n          } else {\r\n\r\n            meetCondition = false\r\n            lastMeasureBig = true\r\n            lastMeasureTemp = temp0\r\n            if (Temp < 24.8) {\r\n              let { echarsData } = this.state\r\n              let { wen0, wen1, Eci } = echarsData\r\n              Eci.push((echartCi++))\r\n              if (this.state.units === '℃') {\r\n                wen0.push(temp0)\r\n                wen1.push(temp1)\r\n              } else {\r\n                wen0.push(temp0 * 1.8 + 32)\r\n                wen1.push(temp1 * 1.8 + 32)\r\n              }\r\n\r\n              this.setState({\r\n                Temp,\r\n                echarsData,\r\n                isMeasure: true,\r\n                measuerStatus: 'connented',\r\n                isconnected: true,\r\n                showHistoryEchart: false,\r\n                countdown: 60,\r\n                tempHeight: false,\r\n              }, () => {\r\n                const option = this.getOption();\r\n                this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n              })\r\n            } else {\r\n              if (!firstMeasure) {\r\n                if (!this.state.tempHeight) {\r\n                  this.setState({\r\n                    tempHeight: true\r\n                  })\r\n                }\r\n              } else {\r\n                meetCondition = true\r\n                firstMeasure = false\r\n\r\n                if (countdownTimer) {\r\n                  console.log('有定时器了，清理掉');\r\n                  clearInterval(countdownTimer)\r\n                  this.setState((prestate, props) => ({\r\n                    countdown: 60\r\n                  }));\r\n                }\r\n                countdownTimer = setInterval(() => {\r\n                  console.log('进入定时器');\r\n                  let { countdown, isconnected } = this.state\r\n                  if (countdown <= 0) {\r\n                    countdown = 60\r\n                  }\r\n                  this.setState({\r\n                    countdown: countdown - 1\r\n\r\n                  })\r\n                  if (countdown <= 1) {\r\n                    clearInterval(countdownTimer)\r\n                    console.log('我要去发送了');\r\n                    ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n                  }\r\n                  if (isconnected === false) {\r\n                    clearInterval(countdownTimer)\r\n                  }\r\n                }, 1000);\r\n\r\n\r\n\r\n                let emerData = this.state.emerData\r\n                let str = {\r\n                  data0: temp0,\r\n                  data1: temp1,\r\n                  data2: temp2,\r\n                  pdt0,\r\n                  pdt1,\r\n                  Alpha0: alpha0,\r\n                  Alpha1: alpha1,\r\n                }\r\n                emerData.push(str)\r\n\r\n                let { echarsData } = this.state\r\n                let { wen0, wen1, Eci } = echarsData\r\n                Eci.push((echartCi++))\r\n                if (this.state.units === '℃') {\r\n                  wen0.push(temp0)\r\n                  wen1.push(temp1)\r\n                } else {\r\n                  wen0.push(temp0 * 1.8 + 32)\r\n                  wen1.push(temp1 * 1.8 + 32)\r\n                }\r\n\r\n                this.setState({\r\n                  Temp,\r\n                  echarsData,\r\n                  isMeasure: true,\r\n                  measuerStatus: 'connented',\r\n                  isconnected: true,\r\n                  showHistoryEchart: false,\r\n                  emerData,\r\n                  tempHeight: false\r\n                }, () => {\r\n                  const option = this.getOption();\r\n                  this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n                })\r\n              }\r\n\r\n            }\r\n\r\n            console.log('不满足');\r\n          }\r\n        } else {\r\n          console.log('差值', temp0, lastMeasureTemp, temp0 - lastMeasureTemp);\r\n          if (temp0 - lastMeasureTemp <= -0.03) {\r\n            console.log('本次测量要小于上次测量,不计入里面');\r\n            countdownTimer && clearInterval(countdownTimer)\r\n            lastMeasureBig = false\r\n            return\r\n          }\r\n          if (!lastMeasureBig) {\r\n            countdownTimer = setInterval(() => {\r\n              console.log('进入定时器');\r\n              let { countdown, isconnected } = this.state\r\n              if (countdown <= 0) {\r\n                countdown = 60\r\n              }\r\n              this.setState({\r\n                countdown: countdown - 1\r\n\r\n              })\r\n              if (countdown <= 1) {\r\n                clearInterval(countdownTimer)\r\n                console.log('我要去发送了');\r\n                ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n              }\r\n              if (isconnected === false) {\r\n                clearInterval(countdownTimer)\r\n              }\r\n            }, 1000);\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n\r\n          lastMeasureBig = true\r\n          lastMeasureTemp = temp0\r\n          let emerData = this.state.emerData\r\n          let str = {\r\n            data0: temp0,\r\n            data1: temp1,\r\n            data2: temp2,\r\n            pdt0,\r\n            pdt1,\r\n            Alpha0: alpha0,\r\n            Alpha1: alpha1,\r\n          }\r\n          emerData.push(str)\r\n\r\n          let { echarsData } = this.state\r\n          let { wen0, wen1, Eci } = echarsData\r\n          Eci.push((echartCi++))\r\n          if (this.state.units === '℃') {\r\n            wen0.push(temp0)\r\n            wen1.push(temp1)\r\n          } else {\r\n            wen0.push(temp0 * 1.8 + 32)\r\n            wen1.push(temp1 * 1.8 + 32)\r\n          }\r\n\r\n          tempArr.push(temp0)\r\n          if (tempArr.length > 10) {\r\n            let k = (tempArr[tempArr.length - 1] - tempArr[tempArr.length - 11]) / 10\r\n            console.log('斜率', k);\r\n            if (k < -0.035) {\r\n              console.log('下降的有点狠了');\r\n              dropNum++\r\n            } else {\r\n              dropNum = 0\r\n            }\r\n            if (dropNum > 10) {\r\n              message.destroy()\r\n              message.error('Measurement failed')\r\n              dropNum = 0\r\n            }\r\n          }\r\n\r\n\r\n          this.setState({\r\n            Temp,\r\n            echarsData,\r\n            isMeasure: true,\r\n            measuerStatus: 'connented',\r\n            isconnected: true,\r\n            showHistoryEchart: false,\r\n            emerData,\r\n            tempHeight: false\r\n          }, () => {\r\n            const option = this.getOption();\r\n            this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n          })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      },\r\n      208: () => {  //耳温\r\n\r\n\r\n\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n\r\n\r\n        let Temp = Math.floor(temp0 * 10) / 10\r\n        console.log('------------gangwen--------------', Temp);\r\n\r\n        let emerData = this.state.emerData\r\n\r\n        let str = {\r\n          data0: temp0,\r\n\r\n        }\r\n        emerData.push(str)\r\n        this.setState({\r\n          emerData,\r\n          Temp,\r\n          isMeasure: false,\r\n          mearsurePart: 3,\r\n          measuerStatus: 'measuring',\r\n          isconnected: true\r\n        })\r\n        meetCondition = false\r\n\r\n      },\r\n      193: () => {  //硬件发送结束命令\r\n        let time = new Date() - is193Time\r\n        lastMeasureTemp = 0\r\n        lastMeasureBig = true\r\n        console.log(time);\r\n        if (time < 1000) {\r\n          is193Time = new Date()\r\n          console.log('我直接抛出');\r\n          return;\r\n        } else {\r\n          console.log('---------------------------', time);\r\n          is193Time = new Date()\r\n\r\n          countdownTimer && clearInterval(countdownTimer)\r\n\r\n\r\n          saveHistoryTime && clearTimeout(saveHistoryTime)\r\n\r\n          saveHistoryTime = setTimeout(() => { //防止连续向后台发送数据\r\n            countdownTimer && clearInterval(countdownTimer)\r\n\r\n            meetCondition = false\r\n\r\n\r\n\r\n            let { roomTemperature, referenceRectalTemperature, bodyConditionScore,\r\n              furLength, heartRate, bloodPressure, respiratoryRate, Temp, emerData } = this.state\r\n            if (emerData.length < 10) {\r\n              console.log('临床数据太少,不做保存');\r\n              return\r\n            }\r\n\r\n            if (bodyConditionScore === '') {\r\n              bodyConditionScore = null\r\n            } else {\r\n              bodyConditionScore = parseFloat(bodyConditionScore)\r\n            }\r\n\r\n            if (heartRate === '') {\r\n              heartRate = null\r\n            } else {\r\n              heartRate = parseFloat(heartRate)\r\n            }\r\n\r\n            if (respiratoryRate === '') {\r\n              respiratoryRate = null\r\n            } else {\r\n              respiratoryRate = parseFloat(respiratoryRate)\r\n            }\r\n\r\n            if (roomTemperature === '') {\r\n              roomTemperature = null\r\n            } else {\r\n              roomTemperature = ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2)\r\n            }\r\n\r\n            if (referenceRectalTemperature === '') {\r\n              referenceRectalTemperature = null\r\n            } else {\r\n              referenceRectalTemperature = ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2)\r\n            }\r\n\r\n            if (furLength === '') {\r\n              furLength = null\r\n            } else {\r\n              furLength = parseFloat(furLength)\r\n            }\r\n            let petVitalId = null\r\n            switch (this.state.petVitalTypeId) {\r\n              case '01': petVitalId = 1; break;\r\n              case '02': petVitalId = 3; break;\r\n              case '03': petVitalId = 4; break;\r\n              default: petVitalId = 1; break;\r\n            }\r\n            let datas = {\r\n\r\n              temperature: parseFloat(Temp),  //测量温度\r\n              roomTemperature,//室温\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              bloodPressure,\r\n              memo: this.state.notes,\r\n              petVitalTypeId: petVitalId,\r\n              clinicalDataEntityList: emerData\r\n            }\r\n            if (storage.roleId === `1`) {\r\n              datas.userId = storage.userId\r\n            } else {\r\n              datas.doctorId = storage.userId\r\n              datas.userId = storage.userId\r\n            }\r\n\r\n            if (this.state.selectPet.petId !== '' && this.state.isEmergency === false) {\r\n\r\n              datas.petId = this.state.selectPet.petId\r\n\r\n\r\n              console.log('临床测试入参：', datas);\r\n              //把数据保存进入云端\r\n              fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  meetCondition = false\r\n                  if (res.flag === true) {\r\n                    console.log('上传成功');\r\n                    // message.success('Uploaded successfully')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n\r\n                    message.success('Uploaded successfully')\r\n                    this._getHistory11(this.state.selectPet.petId)\r\n                  } else {\r\n                    console.log('上传失败');\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                    message.error('upload failed')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                  // message.error(err)\r\n                  this.setState({\r\n                    emerData: [],\r\n                    isMeasure: false\r\n                  })\r\n                  meetCondition = false\r\n                })\r\n            } else if (this.state.isEmergency === true) {\r\n\r\n              console.log('温度数据保存入参：', datas);\r\n\r\n              fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  meetCondition = false\r\n                  if (res.flag === true) {\r\n                    console.log('上传成功');\r\n                    message.success('Uploaded successfully')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                    // this._getHistory11(this.state.selectPet.petId)\r\n                    this._getEmergencyHistory()\r\n                  } else {\r\n                    console.log('上传失败');\r\n                    message.error('upload failed')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                  message.error(err)\r\n                  this.setState({\r\n                    emerData: [],\r\n                    isMeasure: false\r\n                  })\r\n                  meetCondition = false\r\n                })\r\n            }\r\n\r\n            clearTimeout(saveHistoryTime)\r\n          }, 500);\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n      },\r\n\r\n      192: () => {   //开始测量返回结果\r\n        switch (newArr[3]) {\r\n          case 90: console.log('有探头，开始测量的返回指令·'); break;\r\n          case 11: console.log('没有探头，开始测量的返回值'); break;\r\n\r\n        }\r\n      },\r\n      129: () => {      //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n      },\r\n      135: () => {          //硬件的一些配置信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间        bcd码\r\n         * newArr[8] 背光时间              bcd码\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n        countdownTimer && clearInterval(countdownTimer)\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let beep = hardSet.isBeep ? '11' : '00'\r\n        let unit = hardSet.isHua ? '00' : '01'\r\n\r\n        if (dataArr1[7] === hardSet.autoOff.number && dataArr1[8] === hardSet.backlightTimer.number &&\r\n          dataArr1[9] === beep && dataArr1[10] === unit) {\r\n        } else {\r\n          console.log('不相同，去发送命令');\r\n          let setArr = ['03', 'ed', '07', 'dd', hardSet.autoOff.number, hardSet.isBacklight ? hardSet.backlightTimer.number : '00', hardSet.isBeep ? '11' : '00', hardSet.isHua ? '00' : '01']\r\n          ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n        }\r\n        // if (newArr[10] === 0) {\r\n        //   this.setState({\r\n        //     units: '℉'\r\n        //   })\r\n        // } else {\r\n        //   this.setState({\r\n        //     units: '℃'\r\n        //   })\r\n        // }\r\n\r\n\r\n      },\r\n      238: () => {     //探头松动\r\n        console.log('探头松动');\r\n        this.setState({\r\n          isMeasure: false\r\n        })\r\n        meetCondition = false\r\n        message.error('The probe is loose, please re-install and measure again', 5)\r\n        clearInterval(countdownTimer)\r\n      },\r\n      98: () => { //蓝牙连接断开\r\n        console.log('断开连接---断开连接---断开连接---断开连接---断开连接---断开连接');\r\n\r\n        console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 800) {\r\n          return\r\n        }\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown: 60,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          echarsData: {\r\n            Eci: [],\r\n            wen0: [],\r\n            wen1: []\r\n          },\r\n          Temp: '',\r\n          emerData: []\r\n        })\r\n        echartCi = 0\r\n        meetCondition = false\r\n\r\n      },\r\n      97: () => {       //蓝牙连接\r\n        console.log('连接成功---连接成功---连接成功---连接成功---连接成功---连接成功');\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n        is97Time = new Date()\r\n      },\r\n      130: () => {   //获取到mac地址\r\n        let dataArr = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n        let str = ''\r\n        for (let i = 3; i < dataArr.length - 2; i++) {\r\n\r\n          str += dataArr[i]\r\n\r\n        }\r\n        // console.log(str);\r\n        this.setState({\r\n          notes: `${str}\r\n          `\r\n        })\r\n      },\r\n      177: () => {         //探头id\r\n        let dataArr1 = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n        let id = ''\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i]\r\n\r\n        }\r\n        console.log(id, dataArr1[7]);\r\n\r\n        this.setState({\r\n          probeID: id,\r\n          petVitalTypeId: dataArr1[7]\r\n        })\r\n        if (dataArr1[7] === '01') {\r\n          this.setState({\r\n            mearsurePart: 1\r\n          })\r\n        } else if (dataArr1[7] === '02') {\r\n          this.setState({\r\n            mearsurePart: 2\r\n          })\r\n        } else if (dataArr1[7] === '03') {\r\n          this.setState({\r\n            mearsurePart: 3\r\n          })\r\n        }\r\n\r\n\r\n\r\n      },\r\n      7: () => {  //发什么收什么，需要去重新插拔底座\r\n        console.log('重新插拔底座');\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true\r\n          })\r\n        }\r\n      },\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  _mearsurePort = () => {\r\n    switch (this.state.mearsurePart) {\r\n      case 1: return (\r\n        <div >\r\n          <div className='part'>\r\n            Axillary\r\n            <img src={ye} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n      case 2: return (\r\n        <div >\r\n          <div className='part'>\r\n            Rectal\r\n            <img src={gang} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n      default: return (\r\n        <div >\r\n          <div className='part'>\r\n            Ear\r\n            <img src={er} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  _getEmergencyHistory = () => {\r\n\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate (data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        // console.log('获取的宠物记录列表1', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            if (datas[i].petId === null) {\r\n              let { petId, examId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo, clinicalDatagroupId,\r\n                bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime, clinicalDataEntity } = datas[i]\r\n              let Tem = temperature\r\n              try {\r\n                Tem = temperature || clinicalDataEntity.data0\r\n              } catch (error) {\r\n                console.log('抛出的异常', error);\r\n              }\r\n\r\n\r\n              let str = {\r\n                clinicalDatagroupId,\r\n                createTime,\r\n                date: moment(createTime).format('MMM DD'),\r\n                time: moment(createTime).format('hh:mm A'),\r\n                temp: parseInt(Tem * 10) / 10,\r\n                placement: petVitalTypeId,\r\n                note: memo,\r\n                historyId: examId,\r\n                bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId\r\n              }\r\n\r\n              historys.push(str)\r\n            }\r\n          }\r\n\r\n          //把所有数据拿完后做个排序\r\n\r\n          let historyData = ForwardRankingDate(historys, \"createTime\");\r\n          console.log('historyData:', historyData);\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  _getHistory11 = (petId) => {\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamAndClinicalByPetId/${petId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        console.log('获取历史记录', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          console.log('-------', datas);\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n\r\n            let data = datas[i]\r\n\r\n            let { petId, examId, clinicalDatagroupId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime, clinicalDataEntity, modifiedTime } = data\r\n\r\n            if (!clinicalDatagroupId) {\r\n              continue\r\n            }\r\n            let Tem = temperature\r\n            if (clinicalDataEntity) {\r\n              Tem = Tem || clinicalDataEntity.data0\r\n            }\r\n            // console.log('==============', Tem);\r\n            Tem = Tem ? Tem : 0\r\n\r\n\r\n            let time = null\r\n            if (modifiedTime && `${modifiedTime}` !== '' && `${modifiedTime}` !== `undefined`) {\r\n              time = modifiedTime\r\n            } else {\r\n              time = createTime\r\n            }\r\n            let json = {\r\n              time,\r\n              Temp: Tem,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId\r\n            }\r\n            historys.push(json)\r\n\r\n\r\n          }\r\n          console.log('---', historys);\r\n          let historyData = []\r\n          for (let i = 0; i < historys.length; i++) {\r\n            let history = historys[i]\r\n            let { bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId, examId } = history\r\n            // console.log('--------', history.placement);\r\n            let placement = history.placement\r\n            if (placement === null || placement === '') {\r\n              placement = 1\r\n            }\r\n            let str = {\r\n              date: moment(history.time).format('MMM DD'),\r\n              time: moment(history.time).format('hh:mm A'),\r\n              temp: history.Temp,\r\n              placement,\r\n              note: history.note,\r\n              historyId: history.historyId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId,\r\n              key: examId\r\n            }\r\n            historyData.push(str)\r\n          }\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    // ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n    this.setState({\r\n      spin: true,  //\r\n      addpatient_description: '',\r\n      addpatient_petName: '',\r\n      addpatient_species: 1\r\n    })\r\n    if (this.state.patientId === '') {\r\n      this.setState({\r\n        spin: false\r\n      })\r\n    } else {\r\n      this._getPetInfo()\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  _getPetInfoBySave = () => {\r\n    let data = JSON.parse(storage.doctorExam)\r\n    console.log('从列表里面传过来的数据', data);\r\n    if (!data) {\r\n      console.log('从walk-in来的');\r\n    } else {\r\n      let { petId, petName, owner, breed, isMix, age, weight, url, patientId } = data\r\n      if (weight === 'unknown') {\r\n        weight = null\r\n      }\r\n      let selectPet = {\r\n        petId,\r\n        petName,\r\n        owner,\r\n        breedName: breed,\r\n        isMix,\r\n        age,\r\n        weight,\r\n        // birthday,\r\n        url,\r\n\r\n\r\n      }\r\n      this.setState({\r\n        selectPet,\r\n        leftStatus: 1,\r\n        patientId\r\n      })\r\n      this._getHistory11(petId)\r\n    }\r\n  }\r\n\r\n\r\n  _getPetInfo = () => {\r\n\r\n    switch (storage.identity) {\r\n      // case '1':\r\n      //   console.log('我是vetspire查找');\r\n\r\n\r\n\r\n      case '2':\r\n        console.log('我是ezyVet查找');\r\n        let params = {\r\n          animalId: this.state.patientId,\r\n          organizationId: 4\r\n        }\r\n        let paramsArray = [];\r\n        Object.keys(params).forEach(key =>\r\n          paramsArray.push(key + \"=\" + params[key])\r\n        );\r\n        let url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId'\r\n        // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\r\n        if (url.search(/\\?/) === -1) {\r\n          url = url + \"?\" + paramsArray.join(\"&\");\r\n        } else {\r\n          url = url + \"&\" + paramsArray.join(\"&\");\r\n        }\r\n        console.log('ezyVet集成查找宠物入参-请求地址', params, url);\r\n        fetch(url, {\r\n          method: \"GET\",\r\n          headers: {\r\n            'authorization': `Bearer ${storage.ezyVetToken}`,\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((res) => {\r\n            console.log('res', res);\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              //有宠物，进入1\r\n              let petArr = res.data\r\n              if (petArr.length > 1) {\r\n                petArr.sort(function (a, b) {\r\n                  return a.createTime > b.createTime ? 1 : -1;\r\n                })\r\n              }\r\n\r\n\r\n              console.log(petArr);\r\n\r\n              let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr\r\n              if (isMix !== true) {\r\n                isMix = false\r\n              }\r\n              let age = moment(new Date()).diff(birthday, 'year')\r\n              let selectPet = {\r\n                petId,\r\n                petName,\r\n                owner: `${lastName}  ${firstName}`,\r\n                breedName,\r\n                isMix,\r\n                age,\r\n                weight,\r\n                birthday,\r\n                url\r\n\r\n              }\r\n              this.setState({\r\n                selectPet,\r\n                leftStatus: 1,\r\n              })\r\n              this._getHistory11(petId)\r\n\r\n            } else {\r\n              //没有宠物，进入2\r\n              this.setState({\r\n                leftStatus: 2\r\n              })\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        break;\r\n\r\n      case '3':\r\n        console.log('我是一般医生查找');\r\n        let datas = {\r\n          patientId: this.state.patientId,\r\n          doctorId: storage.userId,\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n          datas.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n          datas.org = storage.lastOrganization\r\n        }\r\n        console.log('入参：', datas);\r\n        fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n          .then(res => {\r\n            console.log(res);\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              //有宠物，进入1\r\n              let petArr = res.data\r\n              if (petArr.length > 1) {\r\n                petArr.sort(function (a, b) {\r\n                  return a.createTime > b.createTime ? 1 : -1;\r\n                })\r\n              }\r\n\r\n              console.log(petArr);\r\n\r\n              let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr[0]\r\n              if (isMix !== true) {\r\n                isMix = false\r\n              }\r\n              let age = moment(new Date()).diff(birthday, 'year')\r\n              let selectPet = {\r\n                petId,\r\n                petName,\r\n                owner: `${lastName}  ${firstName}`,\r\n                breedName,\r\n                isMix,\r\n                age,\r\n                weight,\r\n                birthday,\r\n                url\r\n\r\n              }\r\n              this.setState({\r\n                selectPet,\r\n                leftStatus: 1,\r\n              })\r\n              this._getHistory11(petId)\r\n\r\n            } else {\r\n              //没有宠物，进入2\r\n              this.setState({\r\n                leftStatus: 2\r\n              })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            console.log(err);\r\n          })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n\r\n  handleOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n  _addPatient = () => {\r\n    console.log(222);\r\n    let { addpatient_description, addpatient_petName, addpatient_species, patientId } = this.state\r\n    let speciesId = 3, petSpeciesBreedId = 13001\r\n\r\n    // speciesId   狗：2   猫：1    其他：3\r\n    switch (addpatient_species) {\r\n      case 1: speciesId = 2; petSpeciesBreedId = 12001; break;\r\n      case 2: speciesId = 1; petSpeciesBreedId = 11001; break;\r\n      default: speciesId = 3; petSpeciesBreedId = 13001;\r\n    }\r\n    // 11001 是cat 12001是dog 13001是other\r\n    //\r\n    let datas = {\r\n\r\n      petName: addpatient_petName,\r\n      description: addpatient_description,\r\n      speciesId,\r\n      doctorId: storage.userId,\r\n      petSpeciesBreedId\r\n\r\n\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log(datas);\r\n    fetchRequest(`/pet/addDeskPet/${patientId}`, 'POST', datas)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.flag === true) {\r\n          message.success('Patient id created successfully')\r\n          this._refresh()\r\n        } else {\r\n          console.log('创建Patient id 失败');\r\n          message.error('Patient id creation failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        message.error('Patient id creation failed')\r\n      })\r\n  }\r\n\r\n  _topLeft = () => {\r\n    let { historyData, spin, selectPet, patientId } = this.state\r\n    let { petName, owner, breedName, isMix, age, weight, url, speciesId } = selectPet\r\n    if (!breedName) {\r\n      breedName = ''\r\n    }\r\n    switch (breedName) {\r\n      case 'defaultdog':\r\n        breedName = 'Dog'\r\n\r\n        break;\r\n      case 'defaultother':\r\n        breedName = 'Other'\r\n\r\n        break;\r\n      case 'defaultcat':\r\n        breedName = 'Cat'\r\n        break;\r\n\r\n    }\r\n\r\n    let image = `url(${other})`\r\n\r\n    if (url) {\r\n      image = `url(${url}?download=0&width=80)`\r\n    } else {\r\n      switch (speciesId) {\r\n        case 1: image = `url(${cat})`; break;\r\n        case 2: image = `url(${dog})`; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n\r\n    let mix = ''\r\n    if (isMix === true) {\r\n      mix = 'Mix'\r\n    }\r\n    if (weight === null) {\r\n      weight = ''\r\n    } else {\r\n      weight = (2.2046 * parseFloat(weight)).toFixed(1) + 'lbs'\r\n    }\r\n\r\n    if (`${age}` === `NaN` || `${age}` === `null`) {\r\n      age = ''\r\n    } else {\r\n      age = `${age} yrs`\r\n    }\r\n    let datas = []\r\n    for (let i = 0; i < historyData.length; i++) {\r\n      if (i < 3) {\r\n        datas.push(historyData[i])\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    let dogbgc = '', catbgc = '', otherbgc = '';\r\n\r\n    switch (this.state.addpatient_species) {\r\n      case 1: dogbgc = '#E1206D'; catbgc = '#F08FB6'; otherbgc = '#F08FB6'; break;\r\n      case 2: dogbgc = '#F08FB6'; catbgc = '#E1206D'; otherbgc = '#F08FB6'; break;\r\n      case 3: dogbgc = '#F08FB6'; catbgc = '#F08FB6'; otherbgc = '#E1206D'; break;\r\n      default: break;\r\n    }\r\n\r\n    if (owner === `null  null`) {\r\n      // owner = 'unknown'\r\n      owner = ''\r\n    }\r\n    if (breedName === '' || breedName === null || breedName === undefined) {\r\n      // breedName = 'unknown'\r\n      breedName = ''\r\n    }\r\n    let title = ''\r\n    if (patientId) {\r\n      title += `ID: ${patientId}`\r\n    }\r\n    if (patientId && petName) {\r\n      title += ` , `\r\n    }\r\n    if (petName) {\r\n      title += `${petName}`\r\n    }\r\n    switch (this.state.leftStatus) {\r\n      case 1: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n            >\r\n              <Tooltip placement='bottom' title='Switch pet'>\r\n                <MyIcon\r\n                  type='icon-qiehuanchengshi'\r\n                  className=\"icon\"\r\n                  style={{ marginRight: px(10), textAlign: 'center', }}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      leftStatus: 3,\r\n                      isMeasure: false,\r\n                      selectPet: {\r\n                        petId: '',\r\n                        petName: '',\r\n                        owner: '',\r\n                        breedName: '',\r\n                        isMix: false,\r\n                        age: '',\r\n                        weight: '',\r\n                        birthday: '',\r\n                      },\r\n                      patientId: '',\r\n                      historyData: [],\r\n                    })\r\n                    meetCondition = false\r\n                  }} />\r\n              </Tooltip>\r\n\r\n              <div className='avatar'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  marginRight: px(10),\r\n                  backgroundImage: image,\r\n                }}\r\n\r\n              >\r\n\r\n                {/* <img src={image} width={px(80)} alt=\"\" /> */}\r\n\r\n                {(storage.identity === '3') &&\r\n                  <img className='edit' src={edit} alt=\"\" width='18px'\r\n                    onClick={() => {\r\n                      storage.goEditPet = 'mesasure'\r\n                      this.props.history.push({ pathname: '/page9', participate: { patientId, petName, petId: this.state.selectPet.petId } })\r\n                    }}\r\n\r\n                  />}\r\n\r\n\r\n              </div>\r\n              <div className=\"ltitle\">\r\n                <p > {title}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"info\"\r\n              style={{ marginTop: mTop(10), marginBottom: mTop(20), paddingLeft: px(80) }}\r\n            >\r\n              Owner: {`${owner}`} <br />\r\n              {`Breed:  ${breedName}  ${mix}`}<br />\r\n              Age: {`${age}`}<br />\r\n              Weight: {`${weight}`}<br />\r\n            </div>\r\n          </div>\r\n          <div className=\"history\">\r\n            <div className=\"heard1\"\r\n              style={{ height: mTop(40), marginTop: mTop(10) }}\r\n              onClick={() => { this.setState({ visible: true }) }}>\r\n              <span>Device Info</span>\r\n            </div>\r\n            <div className=\"historyBody\">\r\n              {/* <div className=\"devices\">\r\n                <p>Device:</p>\r\n                <Select defaultValue=\"Mella-684h2\" style={{ width: 120 }} size={'small'}\r\n                // onChange={handleChange}\r\n                >\r\n                  <Option value=\"device1\">Mella-684h2</Option>\r\n                  <Option value=\"device2\">Mella-587j0</Option>\r\n                  <Option value=\"device3\">Mella-742k3</Option>\r\n                </Select>\r\n              </div> */}\r\n              {this._mearsurePort()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n      case 2: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"patirntID\"\r\n              style={{ marginTop: px(18) }}\r\n            >\r\n              <p style={{ width: '80px' }}>Patient ID:</p>\r\n              <Input\r\n                // style={{ border: 'none', outline: 'medium' }}\r\n                style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                value={this.state.patientId}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    patientId: item.target.value.replace(/\\s/g, \"\")\r\n                  })\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  // console.log('------', e);\r\n                  if (e.keyCode === 13) {\r\n                    this._refresh()\r\n                  }\r\n                }}\r\n              />\r\n              <SyncOutlined className='refresh'\r\n                style={{ fontSize: px(25) }}\r\n                onClick={this._refresh} spin={spin} />\r\n            </div>\r\n\r\n            <div className='newPet'>\r\n              <p style={{ color: '#E1206D', fontSize: px(18), fontWeight: 'bold', marginTop: mTop(10), paddingLeft: px(30) }}>Yay! You got a new patient!</p>\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(18) }}\r\n              >\r\n                <p style={{ width: '80px' }}>Pet Name:</p>\r\n                <Input\r\n                  // style={{ border: 'none', outline: 'medium' }}\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={this.state.addpatient_petName}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    // console.log(item);\r\n                    this.setState({\r\n                      addpatient_petName: item.target.value\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(18) }}\r\n              >\r\n                <p style={{ width: '80px' }}>Description:</p>\r\n                <Input\r\n                  // style={{ border: 'none', outline: 'medium' }}\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={this.state.addpatient_description}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    // console.log(item);\r\n                    this.setState({\r\n                      addpatient_description: item.target.value\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"species\">\r\n\r\n                <ul>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50), }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: dogbgc }}\r\n                        onClick={() => { this.setState({ addpatient_species: 1 }) }} >\r\n                        <img src={dog} alt=\"\" style={{ width: px(38) }} />\r\n                      </div>\r\n                      Dog\r\n                    </div>\r\n                  </li>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50) }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: catbgc }}\r\n                        onClick={() => { this.setState({ addpatient_species: 2 }) }}  >\r\n                        <img src={cat} alt=\"\" style={{ width: px(38) }} />\r\n                      </div>\r\n                      Cat\r\n                    </div>\r\n                  </li>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50) }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: otherbgc }}\r\n\r\n                        onClick={() => { this.setState({ addpatient_species: 3 }) }}>\r\n                        <img src={other} alt=\"\" style={{ width: px(38), color: '#FFF' }} />\r\n                      </div>\r\n                      Other\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"savebtn\"\r\n                style={{ marginTop: mTop(20) }}\r\n              >\r\n                <p\r\n                  style={{ width: px(180), height: px(40), marginLeft: px(70), fontSize: px(16) }}\r\n                  onClick={() => { this._addPatient() }}>Add New Patient</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      case 3: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"patirntID\">\r\n              <p style={{ width: '80px' }}>Patient ID:</p>\r\n              <Input\r\n                // style={{ border: 'none', outline: 'medium' }}\r\n                style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                value={this.state.patientId}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  // console.log(item);\r\n                  this.setState({\r\n                    patientId: item.target.value.replace(/\\s/g, \"\")\r\n                  })\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  // console.log('------', e);\r\n                  if (e.keyCode === 13) {\r\n                    this._refresh()\r\n                  }\r\n                }}\r\n              />\r\n              <SyncOutlined className='refresh' onClick={this._refresh} spin={spin} />\r\n            </div>\r\n            <div className=\"emergency\"\r\n              style={{ marginTop: mTop(10) }}\r\n              onClick={() => {\r\n                this.setState({ leftStatus: 4, isEmergency: true })\r\n                this._getEmergencyHistory()\r\n              }}>\r\n              <div className=\"btn\"\r\n                style={{ width: px(180), height: px(40) }}\r\n              >\r\n                Emergency\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      case 4: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"emergencyText\">\r\n              <p style={{ fontSize: px(20), marginTop: mTop(10), margin: 0, padding: 0 }}>\r\n                You are in an emergency now,\r\n                you can click History in this mode to assign history records</p>\r\n\r\n            </div>\r\n            <div className=\"emergency\" onClick={() => {\r\n              this.setState({ leftStatus: 3, isEmergency: false, historyData: [] })\r\n\r\n            }}>\r\n              <div className=\"btn\"\r\n                style={{ width: px(180), height: px(40), fontSize: px(25) }}\r\n              >\r\n                Exit\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"history\">\r\n              <div className=\"heard1\"\r\n                style={{ height: mTop(40), marginTop: mTop(10) }}\r\n                onClick={() => { this.setState({ visible: true }) }}>\r\n                <span>Device Info</span>\r\n              </div>\r\n              <div className=\"historyBody\">\r\n                <div className=\"devices\">\r\n                  <p>Device:</p>\r\n                  <Select defaultValue=\"Mella-684h2\" style={{ width: 120 }} size={'small'}\r\n                  // onChange={handleChange}\r\n                  >\r\n                    <Option value=\"device1\">Mella-684h2</Option>\r\n                    <Option value=\"device2\">Mella-587j0</Option>\r\n                    <Option value=\"device3\">Mella-742k3</Option>\r\n                  </Select>\r\n                </div>\r\n                {this._mearsurePort()}\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      default: return null;\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleChange = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      furLength: index\r\n    })\r\n  };\r\n\r\n  handleChange1 = index => {\r\n    console.log('---------', index);\r\n    let bodyType = document.querySelectorAll('#_bodyType .ant-select-selector')\r\n    switch (`${index}`) {\r\n      case '1': bodyType[0].style.width = \"105px\"\r\n\r\n        break;\r\n      case '2': bodyType[0].style.width = \"130px\"\r\n\r\n        break;\r\n      case '3': bodyType[0].style.width = \"120px\"\r\n\r\n        break;\r\n\r\n      default: bodyType[0].style.width = \"105px\"\r\n        break;\r\n    }\r\n\r\n    // bodyType[0].style.width = \"120px\"\r\n    console.dir(bodyType)\r\n    this.setState({\r\n      bodyType: index\r\n    })\r\n  };\r\n\r\n  _foot = () => {\r\n    let lbgc = '', rbgc = ''\r\n    if (this.state.isPetCharacteristics) {\r\n      lbgc = 'rgba(25,173,228,0.5)'; rbgc = 'rgba(105,201,237,1)'\r\n    } else {\r\n      lbgc = 'rgba(105,201,237,1)'; rbgc = 'rgba(25,173,228,0.5)'\r\n    }\r\n    return (\r\n      <div className=\"clinical_foot\" >\r\n        <div className=\"top\"\r\n          style={{ height: '10%', }}\r\n        >\r\n\r\n          <div className=\"foot_l\" style={{ backgroundColor: lbgc }} onClick={() => this.setState({ isPetCharacteristics: true })}>\r\n            Pet Characteristics\r\n          </div>\r\n          <div className=\"foot_l\" style={{ backgroundColor: rbgc }} onClick={() => this.setState({ isPetCharacteristics: false })}>\r\n            History\r\n          </div>\r\n        </div>\r\n        {this.state.isPetCharacteristics ?\r\n          this._petCharacteristics() :\r\n          this._history()\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n  _petCharacteristics = () => {\r\n\r\n    let { furLength, bodyType } = this.state\r\n    let placeholder = '', placeholder1 = ''\r\n    switch (`${furLength}`) {\r\n      case '1': placeholder = 'smooth'; break;\r\n      case '2': placeholder = 'short'; break;\r\n      case '3': placeholder = 'medium'; break;\r\n      case '4': placeholder = 'long'; break;\r\n      default: break;\r\n    }\r\n\r\n    switch (`${bodyType}`) {\r\n      case '1': placeholder1 = 'small'; break;\r\n      case '2': placeholder1 = 'barrel chested'; break;\r\n      case '3': placeholder1 = 'keel chested'; break;\r\n      default: break;\r\n    }\r\n    return (\r\n      <div className=\"petChaeacteristics\"\r\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: '90%' }}\r\n      >\r\n        <div className=\"child\" style={{ marginTop: mTop(30), }}>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Room Temperature: </p>\r\n            <Input className='inp'\r\n              // style={{ border: 'none', outline: 'medium' }}\r\n              // style={{ width: px(105), height: mTop(33), fontSize: px(18), marginRight: px(6) }}\r\n\r\n              value={`${this.state.roomTemperature}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  roomTemperature: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"5%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>℉</span>\r\n          </div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Reference Rectal Temperature: </p>\r\n            <Input className='inp'\r\n              // style={{ border: 'none', outline: 'medium' }}\r\n\r\n              value={`${this.state.referenceRectalTemperature}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  referenceRectalTemperature: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"10%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>℉</span>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"child\">\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <p style={{ width: '150px' }}>Body Condition Score:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n\r\n              value={this.state.bodyConditionScore}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  bodyConditionScore: str\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n          <div className='furLength' >\r\n            <p style={{ width: '150px' }}>Fur Length: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange}\r\n              style={{ width: '105px', borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={placeholder}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"child\">\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative', }}>\r\n            <p style={{ width: '150px' }}>Heart Rate:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={`${this.state.heartRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  heartRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '1px' }}>bpm</span>\r\n          </div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Blood Pressure:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={this.state.bloodPressure}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  bloodPressure: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>mm</span>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"child\" style={{ marginBottom: px(40) }}>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative', }}>\r\n            <p style={{ width: '150px' }}>Respiratory Rate:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={`${this.state.respiratoryRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  respiratoryRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '1px' }}>bpm</span>\r\n          </div>\r\n          <div className='furLength' id='_bodyType'  >\r\n            {/* <p style={{ width: '150px' }}>Body Type: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange1}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={placeholder1}\r\n              dropdownMatchSelectWidth={120}\r\n\r\n            >\r\n              <Option value=\"1\">small</Option>\r\n              <Option value=\"2\">barrel chested</Option>\r\n              <Option value=\"3\">keel chested</Option>\r\n            </Select> */}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"note\">\r\n          <p>Notes:</p>\r\n          <textarea\r\n            rows=\"2\"\r\n            cols=\"30\"\r\n            value={this.state.notes}\r\n            onChange={(val) => {\r\n              console.log(val);\r\n              this.setState({\r\n                notes: val.target.value\r\n              })\r\n            }}\r\n\r\n          >\r\n          </textarea>\r\n        </div> */}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  _history = () => {\r\n\r\n    const _del = (key, record) => {\r\n      console.log('删除', key, record);\r\n\r\n\r\n      /**------------这里还要删除后台的数据------------ */\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, 'DELETE')\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n            console.log('删除成功');\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key)\r\n            });\r\n          } else {\r\n            console.log('删除失败');\r\n          }\r\n        })\r\n    }\r\n    const _edit = (key, record) => {\r\n      console.log('编辑', key, record);\r\n      let { heartRate, bloodPressure, respiratoryRate, referenceRectalTemperature, roomTemperature, bodyConditionScore, furLength, } = record\r\n      console.log('转换前：', heartRate, bloodPressure, respiratoryRate, referenceRectalTemperature, roomTemperature);\r\n      let editHeartRate = (heartRate !== null && heartRate !== undefined) ? heartRate : ''\r\n      let editBloodPressure = (bloodPressure !== null && bloodPressure !== undefined) ? bloodPressure : ''\r\n      let editRespiratoryRate = (respiratoryRate !== null && respiratoryRate !== undefined) ? respiratoryRate : ''\r\n      let editRectal = (referenceRectalTemperature !== null && referenceRectalTemperature !== undefined) ? (referenceRectalTemperature * 1.8 + 32).toFixed(1) : ''\r\n      let editRoomTemperature = (roomTemperature !== null && roomTemperature !== undefined) ? (roomTemperature * 1.8 + 32).toFixed(1) : ''\r\n      let editBodyConditionScore = (bodyConditionScore !== null && bodyConditionScore !== undefined) ? bodyConditionScore : ''\r\n      let editFurLength = furLength\r\n\r\n      console.log(editRectal,\r\n        editRoomTemperature,\r\n        editHeartRate,\r\n        editBloodPressure,\r\n        editRespiratoryRate);\r\n      this.setState({\r\n        editRectal,\r\n        editRoomTemperature,\r\n        editHeartRate,\r\n        editBloodPressure,\r\n        editRespiratoryRate,\r\n        editVisible: true,\r\n        editId: key,\r\n        memo: record.note,\r\n        editBodyConditionScore,\r\n        editFurLength\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    const see = (id, record) => {\r\n      console.log(id, record);\r\n      this.setState({\r\n        tip: 'data is loading',\r\n        tipSpin: true\r\n      })\r\n\r\n      fetchRequest3(`/exam/getClinicalDataByExamId/${id}`, 'GET')\r\n        .then(res => {\r\n          console.log('此条记录的全部数据：', res);\r\n          this.setState({\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          if (res.flag) {\r\n            let datas = res.data.clinicalDataEntityList\r\n\r\n\r\n            if (datas) {\r\n\r\n              let echarsData = {\r\n                Eci: [],\r\n                wen0: [],\r\n                wen1: []\r\n              }\r\n              // let { echarsData } = this.state\r\n              let { wen0, wen1, Eci } = echarsData\r\n              for (let i = 0; i < datas.length; i++) {\r\n                let { data0, data1 } = datas[i]\r\n\r\n\r\n                Eci.push(i)\r\n                if (this.state.units === '℃') {\r\n                  wen0.push(data0)\r\n                  wen1.push(data1)\r\n\r\n                } else {\r\n                  wen0.push(data0 * 1.8 + 32)\r\n                  wen1.push(data1 * 1.8 + 32)\r\n                }\r\n\r\n              }\r\n              let Temp = datas[datas.length - 1].data0 || ''\r\n              console.log('----------------', Temp);\r\n              this.setState({\r\n                echarsData,\r\n                Temp,\r\n                showHistoryEchart: true\r\n              }, () => {\r\n                const option = this.getOption();\r\n                this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n              })\r\n            }\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          console.log(err);\r\n        })\r\n    }\r\n    const isflog = window.screen.height < 1000 ? true : false\r\n\r\n    const columns = [\r\n      {\r\n        title: '',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        width: '16%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          // console.log('狩猎:', text, record, index);\r\n          //record:\r\n          return (\r\n            <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center', padding: `${px(18)}px 0` }} >\r\n              <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n              </Popconfirm>\r\n              {\r\n                (this.state.isEmergency) ? (\r\n                  <div className=\"assign\"\r\n                    style={{ width: mTop(60), height: mTop(28), fontSize: px(14) }}\r\n\r\n                    onClick={() => {\r\n                      console.log(text, record, index);\r\n                      this.setState({\r\n                        visible: true,\r\n                        seleceEmergencies: record\r\n                      })\r\n                    }}>Assign</div>\r\n                ) : (\r\n                  <>\r\n                    <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                      onClick={() => _edit(record.historyId, record)}\r\n                    />\r\n\r\n                    <img src={start} alt=\"\" style={{ width: px(25) }}\r\n                      onClick={() => see(record.historyId, record)}\r\n                    />\r\n\r\n                    {/* <div\r\n                      onClick={() => see(record.historyId, record)}\r\n                      className='see'\r\n                      style={{ width: px(25), height: px(25) }}\r\n                    >\r\n                      <MyIcon type={'icon-mimaxiaoyanjing-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(13) }} />\r\n                    </div> */}\r\n                  </>\r\n                )\r\n              }\r\n\r\n\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        width: '14%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'time',\r\n        key: 'time',\r\n        width: '14%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: `Temp(${this.state.units})`,\r\n        // title: `Temp(℉)`,\r\n        key: 'temp',\r\n        dataIndex: 'temp',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        width: '14%',\r\n        render: (text, record, index) => {\r\n          // console.log(text, record);\r\n\r\n          /**\r\n          * bag：温度数值前的圆圈的背景颜色\r\n          * tem：展示的温度\r\n          * endvalue:将从后台得到的数据全部转化成华氏度\r\n          * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n          * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n          *\r\n          */\r\n\r\n\r\n          let bag = '', tem = ''\r\n\r\n          let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n          let min = 100.4, max = 102.56\r\n\r\n\r\n\r\n\r\n\r\n\r\n          if (endValue > max) {\r\n            bag = '#E1206D'\r\n          } else if (endValue < min) {\r\n            bag = '#98DA86'\r\n          } else {\r\n            bag = '#58BDE6'\r\n          }\r\n\r\n          if (this.state.units === '℃') {\r\n            if (text) {\r\n              tem = `${text}${this.state.units}`\r\n              if (text > 55) {\r\n\r\n                tem = `${((text - 32) / 1.8).toFixed(1)}${this.state.units}`\r\n              }\r\n            }\r\n          } else {\r\n            if (text) {\r\n              if (text > 55) {\r\n                tem = `${text}${this.state.units}`\r\n              } else {\r\n                tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n              }\r\n\r\n            }\r\n          }\r\n          return (\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: `Rectal Temperature`,\r\n        key: 'referenceRectalTemperature',\r\n        dataIndex: 'referenceRectalTemperature',\r\n        width: '15%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          // console.log('肛温的值：', text);\r\n          let num = text\r\n          if (text !== null) {\r\n            num = (text * 1.8 + 32).toFixed(1)\r\n          }\r\n\r\n          return (\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              {text !== null && <p style={{ margin: 0, padding: 0 }}>{num} <span>{'℉'}</span></p>}\r\n\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Placement',\r\n        dataIndex: 'placement',\r\n        key: 'placement',\r\n        align: 'center',\r\n        width: '15%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          switch (record.placement) {\r\n            case 1: return (    //腋温\r\n              <div>\r\n                <img src={palcement_ye} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 3: return (     //肛温\r\n              <div>\r\n                <img src={placement_gang} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 2: return (     //肛温\r\n              <div>\r\n                <img src={placement_gang} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 4: return (    //耳温\r\n              <div>\r\n                <img src={placement_er} alt=\"\" />\r\n              </div>\r\n            )\r\n            default: return null;\r\n          }\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Note',\r\n        dataIndex: 'note',\r\n        key: 'note',\r\n        width: '12%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ width: '70px' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n    ];\r\n\r\n\r\n\r\n    let hisHe = mTop(200)\r\n    try {\r\n      let historyElement = document.querySelectorAll('#clinicalMeasure11 .historyTable')\r\n      hisHe = historyElement[0].clientHeight - mTop(100)\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className='historyTable' style={{ height: '90%' }}>\r\n        <Table\r\n          columns={columns}\r\n          loading={this.state.loading}\r\n          dataSource={this.state.historyData}\r\n          rowKey={columns => columns.historyId}\r\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\r\n          pagination={false}\r\n          scroll={{\r\n            y: hisHe\r\n          }}\r\n        />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n  _status = () => {\r\n    let { closeColor, closebgc, minbgc, units, isMeasure, Temp, measuerStatus, isconnected, showHistoryEchart } = this.state\r\n    let text = '', unit = '', temColor = ''\r\n\r\n    Temp = parseFloat(Temp)\r\n\r\n    if (isconnected === false) {\r\n      if (!showHistoryEchart) {\r\n        Temp = ''\r\n        text = 'disconnected'\r\n        temColor = '#3B3A3A'\r\n      } else {\r\n        text = 'disconnected'\r\n        temColor = '#3B3A3A'\r\n      }\r\n\r\n    } else {\r\n      text = 'connected'\r\n      temColor = '#3B3A3A'\r\n      if (Temp > 15) {\r\n        unit = units\r\n        if (Temp > 39) {\r\n          text = 'High'\r\n          temColor = '#E1206D'\r\n        } else if (Temp < 31) {\r\n          text = 'Low'\r\n          temColor = '#47C2ED'\r\n        } else {\r\n          text = 'Normal'\r\n          temColor = '#78D35D'\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    let temp = ''\r\n\r\n    if (`${Temp}` !== 'NaN' && Temp !== '') {\r\n      temp = units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\r\n    }\r\n    let lowFlog = false\r\n    if (unit === '℃') {\r\n      if (temp < 24.8) {\r\n        lowFlog = true\r\n      }\r\n    } else {\r\n      if (temp < 76.6) {\r\n        lowFlog = true\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className='Tem' style={{ color: temColor, right: px(30), bottom: mTop(120) }}>\r\n\r\n        {(!isMeasure) ? (\r\n          showHistoryEchart ? <>\r\n            <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{units}</sup></span><br />\r\n            {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\r\n\r\n            <span style={{ fontSize: px(22), color: '#8a8a8a' }}>{`History`}</span>\r\n          </> :\r\n\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{unit}</sup></span><br />\r\n              <span style={{ fontSize: px(22) }}>{text}</span>\r\n            </>\r\n        ) : (\r\n          lowFlog ? (\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{'Low'}</span><br />\r\n\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{unit}</sup></span><br />\r\n\r\n            </>\r\n          )\r\n\r\n        )}\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _modal = () => {\r\n    let that = this\r\n\r\n    function save () {\r\n\r\n\r\n      switch (storage.identity) {\r\n        case '1':\r\n          console.log('我是vetspire查找');\r\n\r\n          break;\r\n\r\n        case '2':\r\n          console.log('我是ezyVet查找');\r\n          let params = {\r\n            animalId: that.state.emerPatientID,\r\n            organizationId: 4\r\n          }\r\n          let paramsArray = [];\r\n          Object.keys(params).forEach(key =>\r\n            paramsArray.push(key + \"=\" + params[key])\r\n          );\r\n          let url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId'\r\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\r\n          if (url.search(/\\?/) === -1) {\r\n            url = url + \"?\" + paramsArray.join(\"&\");\r\n          } else {\r\n            url = url + \"&\" + paramsArray.join(\"&\");\r\n          }\r\n          console.log('ezyVet集成查找宠物入参-请求地址', params, url);\r\n          fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              'authorization': `Bearer ${storage.ezyVetToken}`,\r\n            }\r\n          }).then((response) => response.json())\r\n            .then((res) => {\r\n              console.log('res', res);\r\n              this.setState({\r\n                spin: false\r\n              })\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  })\r\n                }\r\n\r\n\r\n                console.log(petArr);\r\n\r\n                let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr\r\n                assign(petId)\r\n\r\n              } else {\r\n                //没有宠物\r\n                message.error('There are no pets under this patientID')\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              message.error('There are no pets under this patientID')\r\n            });\r\n\r\n          break;\r\n\r\n        case '3':\r\n          console.log('我是一般医生查找');\r\n          let datas = {\r\n            patientId: that.state.emerPatientID,\r\n            doctorId: storage.userId,\r\n          }\r\n          if (storage.lastWorkplaceId) {\r\n            datas.workplaceId = storage.lastWorkplaceId\r\n          }\r\n          console.log('入参：', datas);\r\n          fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n            .then(res => {\r\n\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  })\r\n                }\r\n\r\n                console.log(petArr);\r\n\r\n                let { petId, } = petArr[0]\r\n                assign(petId)\r\n              } else {\r\n\r\n                message.error('There are no pets under this patientID')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              message.error('There are no pets under this patientID')\r\n              console.log(err);\r\n            })\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const assign = (petId) => {\r\n        let parmes = {\r\n          petId,\r\n          clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId\r\n        }\r\n        fetchRequest(`/pet/addAndSavePetExam/${that.state.seleceEmergencies.historyId}`, 'POST', parmes)\r\n          .then(res => {\r\n            console.log('----------', res);\r\n            if (res.flag === true) {\r\n              console.log('分配成功');\r\n              message.success('Assigned successfully')\r\n              that._getEmergencyHistory()\r\n              that.setState({\r\n                visible: false,\r\n                emerPatientID: ''\r\n              })\r\n            } else {\r\n              message.success('Assignment failed')\r\n            }\r\n\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            message.success('Assignment failed')\r\n          })\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, visible } = this.state\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Distribute the history of emergencies\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onOk={this.handleOk}\r\n        onCancel={this.handleCancel}\r\n\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Patient ID</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={this.state.emerPatientID}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  emerPatientID: item.target.value.replace(/\\s/g, \"\")\r\n                })\r\n              }}\r\n              onKeyDown={(e) => {\r\n                // console.log('------', e);\r\n                if (e.keyCode === 13) {\r\n                  save()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"btn\" onClick={save}>Save</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n    )\r\n\r\n  }\r\n\r\n  _editModal = () => {\r\n    let that = this\r\n\r\n    function save () {\r\n      let { editBodyConditionScore, editFurLength, editHeartRate, editBloodPressure, editRespiratoryRate } = that.state\r\n      let datas = {\r\n        memo: that.state.memo,\r\n        bodyConditionScore: parseInt(editBodyConditionScore),\r\n        furLength: parseInt(editFurLength),\r\n        heartRate: editHeartRate,\r\n        bloodPressure: editBloodPressure,\r\n        respiratoryRate: editRespiratoryRate\r\n        // roomTemperature: that.state.editRoomTemperature,\r\n        // referenceRectalTemperature: that.state.editRectal\r\n      }\r\n      if (that.state.editRoomTemperature) {\r\n        datas.roomTemperature = ((parseFloat(that.state.editRoomTemperature) - 32) / 1.8).toFixed(2)\r\n      }\r\n      if (that.state.editRectal) {\r\n        datas.referenceRectalTemperature = ((parseFloat(that.state.editRectal) - 32) / 1.8).toFixed(2)\r\n      }\r\n\r\n      console.log('入参：', datas, that.state.editId);\r\n      that.setState({\r\n        editVisible: false,\r\n        tip: 'Data is being modified',\r\n        tipSpin: true,\r\n\r\n      })\r\n      fetchRequest(`/pet/updatePetExam/${that.state.editId}`, 'POST', datas)\r\n        .then(res => {\r\n          console.log(res);\r\n          that.setState({\r\n\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          message.success('Data modified successfully')\r\n\r\n          that._getHistory11(that.state.selectPet.petId)\r\n        })\r\n        .catch(err => {\r\n          that.setState({\r\n            spin: false,\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          message.success(' Data modification failed')\r\n\r\n          console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, editVisible, editFurLength } = this.state\r\n    let furLength = ''\r\n    if (editFurLength !== null && editFurLength !== undefined) {\r\n      switch (`${editFurLength}`) {\r\n        case '1': furLength = 'smooth'; break;\r\n        case '2': furLength = 'short'; break;\r\n        case '3': furLength = 'medium'; break;\r\n        case '4': furLength = 'long'; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Modification history information\r\n          </div>\r\n        }\r\n        visible={editVisible}\r\n        // visible={true}\r\n        onCancel={() => { that.setState({ editVisible: false, }); }}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Room Temperature </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRoomTemperature}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  editRoomTemperature: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Rectal Temperature</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRectal}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  editRectal: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Body Condition Score</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editBodyConditionScore}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n                this.setState({\r\n                  editBodyConditionScore: str\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className='bodyType11' >\r\n            <p style={{ width: '140px' }}>Fur Length: </p>\r\n            <Select\r\n              placeholder\r\n              onChange={(index) => {\r\n                console.log(index);\r\n                this.setState({\r\n                  editFurLength: index\r\n                })\r\n              }}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={furLength}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Heart Rate: </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editHeartRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n\r\n                this.setState({\r\n                  editHeartRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Blood Pressure </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editBloodPressure}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  editBloodPressure: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>mm</span>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Respiratory Rate: </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRespiratoryRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n\r\n                this.setState({\r\n                  editRespiratoryRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          {/* <div className='bodyType11' >\r\n            <p style={{ width: '140px' }}>Body Type: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange1}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              // value={placeholder1}\r\n              dropdownMatchSelectWidth={120}\r\n\r\n            >\r\n              <Option value=\"1\">small</Option>\r\n              <Option value=\"2\">barrel chested</Option>\r\n              <Option value=\"3\">keel chested</Option>\r\n            </Select>\r\n          </div> */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Notes</p>\r\n            <textarea\r\n              rows=\"2\"\r\n              cols=\"40\"\r\n              style={{ textIndent: '10px' }}\r\n              value={that.state.memo}\r\n              onChange={(val) => {\r\n                that.setState({\r\n                  memo: val.target.value\r\n                })\r\n              }}\r\n\r\n            >\r\n            </textarea>\r\n          </div>\r\n\r\n          <div className=\"btn\" onClick={save}>Save</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n\r\n\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    console.log('-----', this.state.Temp);\r\n    return (\r\n      <div id=\"clinicalMeasure11\">\r\n        <div style={{ height: '60%' }}>\r\n\r\n          <div className=\"heard\">\r\n            <Heard\r\n              onSearch={(data) => {\r\n                console.log(data);\r\n                this.setState({\r\n                  patientId: data.patientId\r\n                }, () => {\r\n                  this._getPetInfo()\r\n                })\r\n              }}\r\n              menu9Click={() => {\r\n                storage.measurepatientId = this.state.patientId;\r\n              }}\r\n              menu8Click={() => {\r\n                switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n                  case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                    break;\r\n                  case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n\r\n                  case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }}\r\n\r\n              onReturn={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n          {/* 宠物信息与折线图部分 */}\r\n          <div className='clinical_top'\r\n          // style={{ height: mTop(480) }}\r\n          >\r\n            {this._topLeft()}\r\n            <div className=\"r\" >\r\n              {!this.state.isconnected && <div className=\"bb1\"\r\n                style={{ left: px(150) }}\r\n              >\r\n                <div className=\"btn78\"\r\n                  style={{ width: px(220), height: mTop(30), fontSize: px(16) }}\r\n                  onClick={() => {\r\n                    console.log('点击了切换按钮');\r\n\r\n                    if (resyncDeviceIsClick === true) {\r\n                      resyncDeviceIsClick = false\r\n                      console.log('发送给主进程切换按钮');\r\n                      ipcRenderer.send('qiehuan')\r\n                      // ipcRenderer.send('getSerialPort')\r\n                      const time = setTimeout(() => {\r\n                        resyncDeviceIsClick = true\r\n                        clearTimeout(time)\r\n                      }, 2500)\r\n                    }\r\n\r\n\r\n\r\n                  }}\r\n                >Re-sync Base</div>\r\n              </div>}\r\n\r\n\r\n              <div id='myCharts'\r\n                style={{ marginTop: mTop(50) }}\r\n\r\n              >\r\n                <ReactECharts\r\n\r\n                  option={this.getOption()} theme=\"Imooc\" style={{ height: mTop(430), }}\r\n                  notMerge={true}\r\n                  lazyUpdate={true}\r\n                  // theme={\"theme_name\"}\r\n                  ref={(e) => { this.echartsElement = e }}\r\n                />\r\n              </div>\r\n\r\n              {this._status()}\r\n              {/* {this._mearsurePort()} */}\r\n              <div className=\"time\"\r\n                style={{ bottom: mTop(20), left: px(70) }}\r\n              >\r\n                {(this.state.isconnected) ? (<p style={{ fontSize: px(25) }}>{`Measurement Timer  ${this.state.countdown} s`}</p>) : null}\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        {/* 底部宠物信息 */}\r\n        {this._foot()}\r\n        {this._modal()}\r\n        {this._editModal()}\r\n\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n                  })\r\n                  num07 = 0\r\n\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n\r\n        {\r\n          this.state.tipSpin &&\r\n          // true &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              data is loading...\r\n            </p>\r\n          </div>\r\n        }\r\n        <MyModal\r\n          visible={this.state.tempHeight}\r\n          element={\r\n            <div className=\"tempHeight\">\r\n              <div className=\"tempHeightImg\">\r\n                <img src={redjinggao} alt=\"\" style={{ width: px(60), }} />\r\n              </div>\r\n              <div className=\"tempText\" style={{ fontSize: px(24), marginBottom: px(60) }}>If the initial temperature reading is too high, the measurement may be inaccurate. Consider letting the thermometer cool down to 85°F and try again</div>\r\n\r\n              <div className=\"tempBtn flex\" style={{ height: px(45), fontSize: px(24), marginBottom: px(20) }}\r\n                onClick={() => { this.setState({ tempHeight: false }) }}\r\n              >\r\n                OK\r\n              </div>\r\n\r\n              <div className=\"close\" style={{ top: px(20), right: px(20) }}\r\n                onClick={() => { this.setState({ tempHeight: false }) }}\r\n              >\r\n                <img src={close} alt=\"\" style={{ width: px(30) }} />\r\n              </div>\r\n\r\n\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}\r\n",["285","286"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\index.jsx",["287","288","289","290","291","292","293","294"],"import React, { Component } from \"react\";\r\nimport { Modal, message } from \"antd\";\r\n\r\nimport Heard from \"../../utils/heard/Heard\";\r\nimport { px, win, timerFun } from \"../../utils/px\";\r\nimport electronStore from \"../../utils/electronStore\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport { compareArray } from \"../../utils/current\";\r\n\r\nimport HardAndPetsUI from \"./HardAndPetsUI\";\r\nimport HardWareTypeUI from \"./hardWareTypeUI\";\r\nimport AddDevice from \"./AddDevice\";\r\n\r\nimport BiggiePage from \"../../pages/biggiePage\";\r\nimport ScanPage from \"../../pages/scanPage\";\r\nimport AllPets from \"../../pages/allPetsPage\";\r\nimport ScheduledPetPage from \"../../pages/scheduledPetsPage\";\r\nimport AddScheduledPet from \"../../pages/addScheduledPet\";\r\nimport ClininalStudy from \"../../pages/clinicalStudyPage\";\r\nimport CombineScales from \"../../pages/combineScales\";\r\nimport OtterEQPage from '../../pages/otterEQ';\r\nimport MyAccount from \"../../pages/myAccount\";\r\nimport TemperaturePage from \"../../pages/temperaturePage\";\r\n\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setHardwareList,\r\n  selectHardwareModalShowFun,\r\n  setIsHaveUsbDeviceFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n  setMellaDeviceIdFun,\r\n  setMellaMeasureNumFun,\r\n  setBiggieConnectStatusFun,\r\n  setBiggieBodyFatFun,\r\n  setBiggieBodyWeightFun,\r\n  setBiggieUnitFun,\r\n  setBiggieSameWeightCountFun,\r\n  setRulerConnectStatusFun,\r\n  setRulerMeasureValueFun,\r\n  setRulerUnitFun,\r\n  setRulerConfirmCountFun,\r\n  setReceiveBroadcastHardwareInfoFun,\r\n} from \"../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\n\r\nlet ipcRenderer = window.require(\"electron\").ipcRenderer;\r\nlet isMeasure = false; //是否正在测量,用于判断是否需要发送指定指令给USB,查看硬件是否连接\r\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\r\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\r\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\r\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\r\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\r\nlet time194 = 0\r\n\r\n//用于预测的东西\r\nlet clinicalYuce = [],\r\n  clinicalIndex = 0;\r\n\r\nlet storage = window.localStorage;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    //body部分窗口高度\r\n    bodyHeight: 0,\r\n    //本地保存的硬件类型数组,不包括Add这个类型\r\n    devicesTypeList: [],\r\n    //展示硬件类型的数组\r\n    showHardWareTypeList: [],\r\n    //是否有USB设备\r\n    isHaveUsbDevice: true,\r\n    //mella温度计测量状态\r\n    mellaMeasureStatus: \"disconnected\", //connected,disconnected,isMeasuring,complete\r\n\r\n    //点击菜单的序号\r\n    clickMenuIndex: \"1\",\r\n    err07Visible: false,\r\n    units: '℉'\r\n  };\r\n  componentDidMount() {\r\n    ipcRenderer.send(\"big\", win());\r\n    timerFun();\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    //获取窗口高度\r\n    this.resize();\r\n    //react监听屏幕窗口改变\r\n    window.addEventListener(\"resize\", this.resize);\r\n\r\n    //获取设备类型\r\n    this.getDevicesType();\r\n\r\n    //检测USB设备发来的信息\r\n    ipcRenderer.on(\"sned\", this._send);\r\n    //检测是否有USB设备\r\n    ipcRenderer.on(\"noUSB\", this._noUSB);\r\n    //定时查看mella温度计是否与底座连接或断开\r\n    this._whether_to_connect_to_mella();\r\n\r\n    //获取本地设置\r\n    this.getLocalSetting();\r\n    //获取单位\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`) || {}\r\n    console.log('----', hardSet);\r\n    let { isHua, } = hardSet\r\n    if (isHua === false) {\r\n      this.setState({\r\n        units: '℃'\r\n      })\r\n    } else {\r\n      this.setState({\r\n        units: '℉'\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    //组件销毁，取消监听\r\n    window.removeEventListener(\"resize\", this.resize);\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n    ipcRenderer.removeListener(\"sned\", this._send);\r\n    ipcRenderer.removeListener(\"noUSB\", this._noUSB);\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    this.rulerTimer && clearTimeout(this.rulerTimer);\r\n    message.destroy();\r\n  }\r\n  //检测到props里的hardwareList更新\r\n  UNSAFE_componentWillReceiveProps(prevProps) {\r\n    //对比props里的hardwareList和state里的hardwareList是否相同\r\n\r\n    if (!compareArray(prevProps.hardwareList, this.state.devicesTypeList)) {\r\n      let showHardWareTypeList = [].concat(prevProps.hardwareList);\r\n      showHardWareTypeList.push({\r\n        type: \"add\",\r\n        devices: [],\r\n      });\r\n      this.setState({\r\n        devicesTypeList: prevProps.hardwareList,\r\n        showHardWareTypeList,\r\n      });\r\n    }\r\n    if (!compareObject(prevProps.menuNum, this.state.clickMenuIndex)) {\r\n      this.setState({\r\n        clickMenuIndex: prevProps.menuNum,\r\n      });\r\n    }\r\n  }\r\n\r\n  changeFenBianLv = (e) => {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    // ipcRenderer.send('small')\r\n    ipcRenderer.send(\"big\", win());\r\n    // this.setState({}, () => {\r\n    //   if (this.props.test) {\r\n    //     if (this.props.test.current) {\r\n    //       this.props.test.current.getEchartsInstance().dispose();\r\n    //       this.props.test.current.getEchartsInstance().clear();\r\n    //       setTimeout(() => {\r\n    //         this.props.test.current.getEchartsInstance().resize();\r\n    //       }, 500);\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n  };\r\n  //获取本地设置\r\n  getLocalSetting = () => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (!hardSet) {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false, //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: \"45\" },\r\n        autoOff: { length: 0, number: \"30\" },\r\n      };\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\r\n    }\r\n  };\r\n  //检测USB设备发来的信息\r\n  _send = (e, data) => {\r\n    // console.log('检测USB设备发来的信息', data)\r\n    //data就是测量的数据，是十进制的数字\r\n    this.command(data)();\r\n  };\r\n  //监听是否有USB设备,true代表没有USB设备，false代表有USB设备\r\n  _noUSB = (e, data) => {\r\n    if (data === false) {\r\n      message.destroy();\r\n    } else {\r\n      if (this.state.isHaveUsbDevice) {\r\n        message.destroy();\r\n        message.error(\"The base is not detected. Please insert the base\", 0);\r\n      }\r\n    }\r\n    if (data === this.props.isHaveUsbDevice) {\r\n      this.props.setIsHaveUsbDeviceFun(!data);\r\n    }\r\n    if (data === this.state.isHaveUsbDevice) {\r\n      this.setState({\r\n        isHaveUsbDevice: !data,\r\n      });\r\n    }\r\n  };\r\n  //监听mella温度计是否与底座连接或断开\r\n  _whether_to_connect_to_mella = () => {\r\n    console.log(\"监听mella温度计是否与底座连接或断开\");\r\n    message.destroy();\r\n    this.detectTimer && clearInterval(this.detectTimer);\r\n    //2秒检测一次\r\n    this.detectTimer = setInterval(() => {\r\n      exchangeNum++;\r\n      //如果正在测量或者没有USB设备，不检测\r\n      if (isMeasure || !this.state.isHaveUsbDevice) {\r\n        return;\r\n      }\r\n      if (exchangeNum % 2 === 0) {\r\n        //让底座发送查询温度计信息指令\r\n        ipcRenderer.send(\"usbdata\", { command: \"07\", arr: [\"5A\"] });\r\n      } else {\r\n        ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n      }\r\n\r\n      //如果底座没有回应，则计算时间差,时间差大于5秒，则没与温度计连接\r\n      if (new Date() - initTime > 6000) {\r\n        this._disconnect_to_mella();\r\n      } else {\r\n      }\r\n    }, 2000);\r\n  };\r\n  //底座与温度计断开连接\r\n  _disconnect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus, setMellaDeviceIdFun } =\r\n      this.props;\r\n    if (mellaConnectStatus !== \"disconnected\") {\r\n      setMellaConnectStatusFun(\"disconnected\");\r\n    }\r\n    setMellaDeviceIdFun(\"\");\r\n  };\r\n  //底座与温度计连接\r\n  _connect_to_mella = () => {\r\n    let { setMellaConnectStatusFun, mellaConnectStatus } = this.props;\r\n    if (mellaConnectStatus !== \"connected\") {\r\n      setMellaConnectStatusFun(\"connected\");\r\n    }\r\n  };\r\n\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    let dataArr1 = newArr.map((item) => {\r\n      if (item.toString(16).length < 2) {\r\n        return \"0\" + item.toString(16);\r\n      } else {\r\n        return item.toString(16);\r\n      }\r\n    });\r\n    //除了255,其他都是温度计的数据\r\n    let {\r\n      setMellaConnectStatusFun,\r\n      setMellaMeasureValueFun,\r\n      setMellaPredictValueFun,\r\n      setMellaMeasurePartFun,\r\n      mellaMeasurePart,\r\n      mellaConnectStatus,\r\n      setBiggieBodyFatFun,\r\n      setBiggieBodyWeightFun,\r\n      setBiggieConnectStatusFun,\r\n      setBiggieUnitFun,\r\n      setBiggieSameWeightCountFun,\r\n    } = this.props;\r\n    let {\r\n      biggieConnectStatus,\r\n      biggieBodyFat,\r\n      biggieBodyWeight,\r\n      biggieUnit,\r\n      biggieSameWeightCount,\r\n    } = this.props.hardwareReduce;\r\n\r\n    const instruction = [\r\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255, 182,\r\n    ];\r\n\r\n    if (newArr[2] !== 7 && newArr[2] !== 255 && newArr[2] !== 182) {\r\n      initTime = new Date();\r\n      num07 = 0;\r\n      if (mellaConnectStatus === \"disconnected\") {\r\n        this._connect_to_mella();\r\n      }\r\n    } else {\r\n      num07++;\r\n    }\r\n\r\n    const commandArr = {\r\n      209: () => {\r\n        //腋温\r\n        //第一次测量去获取探头ID\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          console.log(\"去获取探头id\");\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\r\n        let Temp = temp0;\r\n        if (\r\n          Temp === 24.7 ||\r\n          Temp === 0 ||\r\n          Temp === null ||\r\n          Temp === undefined\r\n        ) {\r\n          return;\r\n        }\r\n\r\n        let dataS = {\r\n          sample: clinicalIndex++,\r\n          data0: temp0,\r\n          data1: temp1,\r\n        };\r\n        clinicalYuce.push(dataS);\r\n        if (clinicalYuce.length >= 30) {\r\n          setMellaPredictValueFun(clinicalYuce);\r\n        }\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n\r\n        if (mellaMeasurePart !== \"腋温\" || mellaMeasurePart !== \"肛温\") {\r\n          setMellaMeasurePartFun(\"腋温\");\r\n        }\r\n        this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\r\n      },\r\n      208: () => {\r\n        //耳温\r\n\r\n        if (firstEar) {\r\n          firstEar = false;\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\r\n          //重新测量,清空预测值\r\n          clinicalYuce = [];\r\n          clinicalIndex = 0;\r\n        }\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[8]}`);\r\n        let Temp = temp0;\r\n        setMellaMeasureValueFun(Temp);\r\n        if (mellaConnectStatus !== \"isMeasuring\") {\r\n          setMellaConnectStatusFun(\"isMeasuring\");\r\n        }\r\n\r\n        if (mellaMeasurePart !== \"耳温\") {\r\n          setMellaMeasurePartFun(\"耳温\");\r\n        }\r\n      },\r\n      193: () => {\r\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\r\n        //为了清除黏贴的数据，使用定时器\r\n        this.time193 && clearTimeout(this.time193);\r\n        this.time193 = setTimeout(() => {\r\n          if (new Date() - time194 < 1000) {\r\n            this.time193 && clearTimeout(this.time193);\r\n            return;\r\n          }\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaMeasureValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            console.log('要去写了', units, temp);\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          this.time193 && clearTimeout(this.time193);\r\n        }, 500);\r\n      },\r\n      194: () => {\r\n        //硬件收到机器学习结果并停止测量，\r\n        this.time193 && clearTimeout(this.time193);\r\n        time194 = new Date()\r\n        console.log(\"---机器学习\", newArr);\r\n        if (mellaConnectStatus !== \"complete\") {\r\n          setMellaConnectStatusFun(\"complete\");\r\n        }\r\n        const timer = setTimeout(() => {\r\n          setMellaMeasureValueFun(this.props.mellaPredictReturnValue);\r\n\r\n          firstEar = true;\r\n          if (mellaConnectStatus !== \"complete\") {\r\n            setMellaConnectStatusFun(\"complete\");\r\n          }\r\n\r\n          let { units } = this.state;\r\n          let Temp = this.props.mellaPredictReturnValue;\r\n          let temp =\r\n            units === \"℉\"\r\n              ? (Temp * 1.8 + 32).toFixed(1)\r\n              : Temp.toFixed(1);\r\n          if (this.props.selectHardwareType === \"mellaPro\") {\r\n            ipcRenderer.send(\"keyboardWriting\", temp);\r\n          }\r\n          clearTimeout(timer);\r\n        }, 80);\r\n        clinicalYuce = [];\r\n        clinicalIndex = 0;\r\n      },\r\n      192: () => {\r\n        //温度计收到40开始数据后返回的指令\r\n        switch (newArr[3]) {\r\n          case 90:\r\n            console.log(\"有探头，开始测量的返回指令·\");\r\n            break;\r\n          case 11:\r\n            console.log(\"没有探头，开始测量的返回值\");\r\n            break;\r\n        }\r\n      },\r\n      129: () => {\r\n        //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n      },\r\n      135: () => {\r\n        //硬件的一些基本信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间\r\n         * newArr[8] 背光时间\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n\r\n        let hardSet = electronStore.get(\r\n          `${storage.userId}-hardwareConfiguration`\r\n        );\r\n        if (!hardSet) {\r\n          hardSet = {\r\n            isHua: true,\r\n            is15: true,\r\n            self_tarting: false, //自启动\r\n            isBacklight: true,\r\n            isBeep: true,\r\n            backlightTimer: { length: 140, number: \"45\" },\r\n            autoOff: { length: 0, number: \"30\" },\r\n          };\r\n        }\r\n\r\n        let beep = hardSet.isBeep ? \"11\" : \"00\";\r\n        let unit = hardSet.isHua ? \"00\" : \"01\";\r\n\r\n        if (\r\n          dataArr1[7] === hardSet.autoOff.number &&\r\n          dataArr1[8] === hardSet.backlightTimer.number &&\r\n          dataArr1[9] === beep &&\r\n          dataArr1[10] === unit\r\n        ) {\r\n        } else {\r\n          console.log(\"不相同，去发送命令\");\r\n          let setArr = [\r\n            \"03\",\r\n            \"ed\",\r\n            \"07\",\r\n            \"dd\",\r\n            hardSet.autoOff.number,\r\n            hardSet.isBacklight ? hardSet.backlightTimer.number : \"00\",\r\n            hardSet.isBeep ? \"11\" : \"00\",\r\n            hardSet.isHua ? \"00\" : \"01\",\r\n          ];\r\n          ipcRenderer.send(\"usbdata\", { command: \"21\", arr: setArr });\r\n        }\r\n      },\r\n      238: () => {\r\n        //探头松动\r\n        console.log(\"探头松动\");\r\n        message.error(\r\n          \"The probe is loose, please re-install and measure again\",\r\n          5\r\n        );\r\n      },\r\n\r\n      98: () => {\r\n        //蓝牙连接断开\r\n        console.log(\r\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\r\n        );\r\n        firstEar = true;\r\n        // console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 1300) {\r\n          return;\r\n        }\r\n        this._disconnect_to_mella();\r\n      },\r\n      97: () => {\r\n        //蓝牙连接\r\n        console.log(\r\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\r\n        );\r\n        this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        this.getIdTimer = setTimeout(() => {\r\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\r\n          this.getIdTimer && clearTimeout(this.getIdTimer);\r\n        }, 50);\r\n\r\n\r\n        is97Time = new Date();\r\n        this._connect_to_mella();\r\n      },\r\n      177: () => {\r\n        //探头id\r\n        let dataArr1 = newArr.map((item) => {\r\n          if (item.toString(16).length < 2) {\r\n            return \"0\" + item.toString(16);\r\n          } else {\r\n            return item.toString(16);\r\n          }\r\n        });\r\n\r\n        let id = \"\";\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i];\r\n        }\r\n        // console.log(id, dataArr1[7]);\r\n        setMellaDeviceIdFun(id);\r\n        // this.setState({\r\n        //   probeID: id,\r\n        //   petVitalTypeId: dataArr1[7]\r\n        // })\r\n        if (dataArr1[7] === \"01\") {\r\n          if (mellaMeasurePart !== \"腋温\") {\r\n            setMellaMeasurePartFun(\"腋温\");\r\n          }\r\n        } else if (dataArr1[7] === \"02\") {\r\n          if (mellaMeasurePart !== \"肛温\") {\r\n            setMellaMeasurePartFun(\"肛温\");\r\n          }\r\n        } else if (dataArr1[7] === \"03\") {\r\n          if (mellaMeasurePart !== \"耳温\") {\r\n            setMellaMeasurePartFun(\"耳温\");\r\n          }\r\n        }\r\n      },\r\n      7: () => {\r\n        //发什么收什么，需要去重新插拔底座\r\n        console.log(\"重新插拔底座\");\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true,\r\n          });\r\n        }\r\n      },\r\n      255: () => {\r\n        let length = newArr.length;\r\n        let frameLength = newArr[1]; //帧长\r\n        let itemLength = newArr[3] + 1; //数据位的长度   13\r\n        let dataIndex = 0;\r\n        let bluName = \"\";\r\n        let bluData = [];\r\n\r\n        while (itemLength < length && itemLength + 3 <= frameLength) {\r\n          let itemData = [];\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5]);\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = \"\";\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16);\r\n                str += String.fromCharCode(item);\r\n              }\r\n              bluName = str;\r\n              // console.log('--蓝牙名称:', bluName);\r\n\r\n              break;\r\n\r\n            case 255:\r\n              bluData = itemData;\r\n              break;\r\n            case 7:\r\n              console.log(\"---UUID\");\r\n              break;\r\n            case 239:\r\n              // console.log('---mac地址');\r\n              break;\r\n\r\n            case 3:\r\n              // console.log('----尺子的,不知道什么用');\r\n              break;\r\n\r\n            default:\r\n              console.log(\"直接跳出循环\");\r\n              return;\r\n          }\r\n          dataIndex = itemLength;\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\r\n        }\r\n        // console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n        let { setReceiveBroadcastHardwareInfoFun, hardwareReduce } = this.props;\r\n\r\n        let { receiveBroadcastHardwareInfo } = hardwareReduce;\r\n\r\n        if (bluName.indexOf(\"C19\") !== -1 && bluData.length > 10) {\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: \"00:00:00:00:00:00\",\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          let weight = `0x${bluData[10]}${bluData[11]}`;\r\n          let impedance = `0x${bluData[12]}${bluData[13]}`;\r\n          let sendWeight = null;\r\n          //C19发送的体重值单位只是KG\r\n          try {\r\n            weight = parseInt(weight) / 100;\r\n            if (impedance) {\r\n              impedance = parseInt(impedance);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n          if (weight === biggieBodyWeight) {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          } else {\r\n            setBiggieSameWeightCountFun(0);\r\n            setBiggieBodyWeightFun(weight);\r\n          }\r\n          if (impedance) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n          if (biggieConnectStatus !== \"isMeasuring\") {\r\n            setBiggieConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          if (biggieUnit !== \"kg\") {\r\n            setBiggieUnitFun(\"kg\");\r\n          }\r\n        } else if (bluName.indexOf(\"Mella Measure\") !== -1) {\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          // console.log('结束循环蓝牙名称', bluData)\r\n          let confirmBtn = bluData[8]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[11], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9];\r\n          let num2 = bluData[10];\r\n          let num = getVal(num1, num2);\r\n          try {\r\n            newVal = parseFloat(num);\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2);\r\n            } else {\r\n              newVal = newVal.toFixed(1);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            return `${num1}.${num2}`;\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n        } else if (bluName.indexOf(\"Biggie\") !== -1 && bluData.length > 13) {\r\n          // console.log(\"biggie\", bluData);\r\n          if (bluData[0] !== \"aa\") {\r\n            return;\r\n          }\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n\r\n          let newArr = bluData;\r\n\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n\r\n          let json = {\r\n            deviceType: \"biggie\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n          //定义体重的控制字符\r\n          let weightControl = newArr[8];\r\n          //定义体重的值\r\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(\r\n            newArr[10].toString(16)\r\n          )}`;\r\n          weight = parseInt(weight, 16);\r\n          //定义体脂值\r\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(\r\n            newArr[13].toString(16)\r\n          )}`;\r\n          impedance = parseInt(impedance, 16);\r\n          let arr11 = getVal(newArr[11].toString(16));\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n\r\n          let weightUnits = arr11[1] === \"1\" ? \"lb\" : \"kg\";\r\n          let biggieStatus = \"isMeasuring\";\r\n          switch (weightControl) {\r\n            case 1:\r\n              biggieStatus = \"connected\";\r\n              break;\r\n            case 2:\r\n              biggieStatus = \"isMeasuring\";\r\n              break;\r\n            case 3:\r\n              biggieStatus = \"complete\";\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n          if (biggieStatus !== biggieConnectStatus) {\r\n            setBiggieConnectStatusFun(biggieStatus);\r\n          }\r\n          if (weightUnits !== biggieUnit) {\r\n            setBiggieUnitFun(weightUnits);\r\n          }\r\n          if (weight !== biggieBodyWeight) {\r\n            setBiggieBodyWeightFun(weight);\r\n            setBiggieSameWeightCountFun(0);\r\n          } else {\r\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\r\n          }\r\n          if (impedance !== biggieBodyFat) {\r\n            setBiggieBodyFatFun(impedance);\r\n          }\r\n        } else if (bluName.indexOf(\"MaeBowl\") !== -1 && bluData.length > 10) {\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`;\r\n            }\r\n            return `${shi}`;\r\n          }\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          //定义硬件版本号\r\n          let hardwareVersion = bluData[7] + bluData[8];\r\n          //定义软件版本号\r\n          let softwareVersion = bluData[9];\r\n          //定义wifi标志位\r\n          let wifiFlag = bluData[10];\r\n          //定义控制字\r\n          let control = bluData[11];\r\n          //定义重量\r\n          let weight = `${getVal(bluData[12].toString(16))}${getVal(\r\n            bluData[13].toString(16)\r\n          )}`\r\n          weight = parseInt(weight, 16);\r\n          let arr11 = bluData[14]\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\r\n          let weightUnits = null\r\n          switch (arr11[1]) {\r\n            case '0':\r\n              weightUnits = 'kg'\r\n\r\n              break;\r\n            case '1':\r\n              weightUnits = 'lb'\r\n\r\n              break;\r\n            case '2':\r\n              weightUnits = 'g'\r\n\r\n              break;\r\n            case '3':\r\n              weightUnits = 'ml'\r\n\r\n              break;\r\n            case '4':\r\n              weightUnits = 'oz'\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n          console.log({\r\n            // mac,\r\n            // hardwareVersion,\r\n            // softwareVersion,\r\n            wifiFlag,\r\n            control,\r\n            weight,\r\n            weightUnits,\r\n          });\r\n\r\n\r\n        } else if (bluName.indexOf(\"Tabby\") !== -1 && bluData.length > 10) {\r\n          // console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n          let {\r\n            hardwareReduce,\r\n            setRulerConfirmCountFun,\r\n            setRulerConnectStatusFun,\r\n            setRulerMeasureValueFun,\r\n            setRulerUnitFun,\r\n          } = this.props;\r\n          let {\r\n            rulerConnectStatus,\r\n            rulerMeasureValue,\r\n            rulerUnit,\r\n            rulerConfirmCount,\r\n            receiveBroadcastHardwareInfo,\r\n          } = hardwareReduce;\r\n          let confirmBtn = bluData[10]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[13], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null; //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6;\r\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\r\n          let mac = bluData[1];\r\n          for (let i = 2; i <= 6; i++) {\r\n            mac += `:${bluData[i]}`;\r\n          }\r\n          let json = {\r\n            deviceType: \"tape\",\r\n            macId: mac,\r\n            name: bluName,\r\n          };\r\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\r\n            setReceiveBroadcastHardwareInfoFun(json);\r\n          }\r\n\r\n          if (units !== rulerUnit) {\r\n            setRulerUnitFun(units);\r\n          }\r\n          if (rulerConnectStatus !== \"isMeasuring\") {\r\n            setRulerConnectStatusFun(\"isMeasuring\");\r\n          }\r\n          this.rulerTimer && clearTimeout(this.rulerTimer);\r\n          this.rulerTimer = setTimeout(() => {\r\n            setRulerConnectStatusFun(\"disconnected\");\r\n          }, 5000);\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[11];\r\n          let num2 = bluData[12];\r\n          let num = getVal(num1, num2);\r\n          try {\r\n            newVal = parseFloat(num);\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2);\r\n            } else {\r\n              newVal = newVal.toFixed(1);\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16);\r\n            let num2 = parseInt(xiaoshuo, 16);\r\n            return `${num1}.${num2}`;\r\n          }\r\n          if (newVal !== rulerMeasureValue) {\r\n            setRulerMeasureValueFun(newVal);\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (\r\n            confirmBtn[1] === \"2\" &&\r\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\r\n            confirmBtn[0] !== null\r\n          ) {\r\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\r\n          }\r\n\r\n\r\n\r\n\r\n        }\r\n      },\r\n      182: () => {\r\n        console.log(\"打开了底座通信\");\r\n      },\r\n    };\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]];\r\n    } else {\r\n      return () => {\r\n        console.log(\"没有控制命令\", commandArr);\r\n      };\r\n    }\r\n  };\r\n\r\n  testCheck = (arr) => {\r\n    if (arr.length < 7) {\r\n      return false;\r\n    }\r\n    let i = 7;\r\n    let checkFloag = arr[i];\r\n\r\n    for (i = 8; i < arr.length - 2; i++) {\r\n      checkFloag = checkFloag ^ arr[i];\r\n    }\r\n    return checkFloag;\r\n  };\r\n  getMac = (arr) => {\r\n    // console.log(arr);\r\n    let str = arr[1].toString(16);\r\n    if (str.length === 1) {\r\n      str = \"0\" + str;\r\n    }\r\n    for (let i = 2; i < 7; i++) {\r\n      let item = arr[i].toString(16);\r\n      if (item.length === 1) {\r\n        item = \"0\" + item;\r\n      }\r\n      str += `:${item}`;\r\n      // }\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n  //监听屏幕窗口改变\r\n  resize = () => {\r\n    let { offsetWidth, offsetHeight } = this.mainbody;\r\n    // console.log('resize', this.mainbody, { offsetWidth, offsetHeight });\r\n    if (offsetHeight !== this.state.bodyHeight) {\r\n      this.setState({\r\n        bodyHeight: offsetHeight - px(50),\r\n      });\r\n    }\r\n  };\r\n  //获取设备类型(渲染左侧硬件种类侧边栏)\r\n  getDevicesType = () => {\r\n    // let devicesTypeList = [\r\n    //   {\r\n    //     type: 'mellaPro',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'mellaPro',\r\n    //         mac: '',\r\n    //         deviceType: 'mellaPro',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'biggie',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'biggie',\r\n    //         mac: '',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       },\r\n    //       {\r\n    //         name: 'biggie002',\r\n    //         mac: '1253',\r\n    //         deviceType: 'biggie',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'otterEQ',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'otterEQ',\r\n    //         mac: '',\r\n    //         deviceType: 'otterEQ',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n\r\n    //   {\r\n    //     type: 'rfid',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'rfid',\r\n    //         mac: '',\r\n    //         deviceType: 'rfid',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'tape',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'tape',\r\n    //         mac: '',\r\n    //         deviceType: 'tape',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   },\r\n    //   {\r\n    //     type: 'maeBowl',\r\n    //     devices: [\r\n    //       {\r\n    //         name: 'maeBowl',\r\n    //         mac: '',\r\n    //         deviceType: 'maeBowl',\r\n    //         examRoom: '',\r\n    //       }\r\n    //     ]\r\n    //   }\r\n    // ]\r\n\r\n    let devicesTypeList =\r\n      electronStore.get(\r\n        `${storage.lastOrganization}-${storage.userId}-devicesTypeList`\r\n      ) || [];\r\n    // console.log(\"获取的设22222备列表\", devicesTypeList);\r\n    if (devicesTypeList.length === 0) {\r\n      devicesTypeList.push({\r\n        type: \"mellaPro\",\r\n        devices: [\r\n          {\r\n            name: \"mellaPro\",\r\n            mac: \"\",\r\n            deviceType: \"mellaPro\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"biggie\",\r\n        devices: [\r\n          {\r\n            name: \"biggie\",\r\n            mac: \"\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n          {\r\n            name: \"biggie002\",\r\n            mac: \"1253\",\r\n            deviceType: \"biggie\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"tape\",\r\n        devices: [\r\n          {\r\n            name: \"tape\",\r\n            mac: \"45264\",\r\n            deviceType: \"tape\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n      devicesTypeList.push({\r\n        type: \"otterEQ\",\r\n        devices: [\r\n          {\r\n            name: \"otterEQ\",\r\n            mac: \"375082\",\r\n            deviceType: \"otterEQ\",\r\n            examRoom: \"\",\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    let hardList = [].concat(devicesTypeList);\r\n    this.props.setHardwareList(hardList);\r\n    let showHardWareTypeList = [].concat(devicesTypeList);\r\n    showHardWareTypeList.push({\r\n      type: \"add\",\r\n      devices: [],\r\n    });\r\n\r\n    this.setState({\r\n      devicesTypeList,\r\n      showHardWareTypeList,\r\n    });\r\n  };\r\n  body = () => {\r\n    let { selectHardwareType } = this.props;\r\n\r\n    let { bodyHeight, clickMenuIndex } = this.state;\r\n    let measurePage = null;\r\n    switch (clickMenuIndex) {\r\n      case \"1\":\r\n        if (electronStore.get(`${storage.userId}-isClical`)) {\r\n          return (\r\n            <>\r\n              <HardAndPetsUI bodyHeight={bodyHeight} />\r\n              <ClininalStudy bodyHeight={bodyHeight} />\r\n            </>\r\n          );\r\n        } else {\r\n          switch (selectHardwareType) {\r\n            case \"mellaPro\":\r\n              measurePage = <TemperaturePage bodyHeight={bodyHeight} />;\r\n\r\n              break;\r\n            case \"biggie\":\r\n              measurePage = <BiggiePage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            case \"tape\":\r\n              measurePage = <ScanPage bodyHeight={bodyHeight} />;\r\n              break;\r\n            case \"otterEQ\":\r\n              measurePage = <OtterEQPage bodyHeight={bodyHeight} />;\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n          if (selectHardwareType === \"add\") {\r\n            return <AddDevice bodyHeight={bodyHeight} />;\r\n          } else {\r\n            return (\r\n              <>\r\n                <HardAndPetsUI bodyHeight={bodyHeight} />\r\n                {measurePage}\r\n              </>\r\n            );\r\n          }\r\n        }\r\n      case \"2\":\r\n        return <AllPets bodyHeight={bodyHeight} />;\r\n      case \"CombineScales\":\r\n        return <CombineScales bodyHeight={bodyHeight} />;\r\n      case \"AddDevice\":\r\n        return <AddDevice bodyHeight={bodyHeight} />;\r\n      case \"3\":\r\n        return <ScheduledPetPage bodyHeight={bodyHeight} />;\r\n\r\n      case \"AddScheduledPet\":\r\n        return <AddScheduledPet bodyHeight={bodyHeight} />;\r\n      case \"6\":\r\n        return (\r\n          <>\r\n            <HardAndPetsUI bodyHeight={bodyHeight} />\r\n            <ClininalStudy bodyHeight={bodyHeight} />\r\n          </>\r\n        );\r\n\r\n      case \"4\":\r\n        return (\r\n          <MyAccount bodyHeight={bodyHeight} />\r\n        );\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { bodyHeight } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className=\"flex\"\r\n        id=\"mainbody\"\r\n        ref={(val) => (this.mainbody = val)}\r\n        onClick={() => {\r\n          if (this.props.selectHardwareModalShowFun) {\r\n            this.props.selectHardwareModalShowFun(false);\r\n          }\r\n        }}\r\n      >\r\n        <Heard />\r\n        <div className=\"mainbody-body\">\r\n          <HardWareTypeUI\r\n            bodyHeight={bodyHeight}\r\n            devicesTypeList={this.state.showHardWareTypeList}\r\n          />\r\n          {this.body()}\r\n        </div>\r\n        <Modal\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id=\"vetPrifileModal\">\r\n            <div className=\"title\">prompt</div>\r\n\r\n            <div className=\"text\">Please re-plug the base device</div>\r\n\r\n            <div\r\n              className=\"btn\"\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"5px\",\r\n              }}\r\n            >\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n                  });\r\n                  num07 = 0;\r\n                }}\r\n              >\r\n                OK\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(\r\n  (state) => ({\r\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\r\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\r\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\r\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\r\n    mellaMeasurePart: state.hardwareReduce.mellaMeasurePart,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareReduce: state.hardwareReduce,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\r\n    menuNum: state.userReduce.menuNum,\r\n    mellaPredictReturnValue: state.hardwareReduce.mellaPredictReturnValue,\r\n    test: state.userReduce.test\r\n  }),\r\n  {\r\n    setHardwareList,\r\n    selectHardwareModalShowFun,\r\n    setIsHaveUsbDeviceFun,\r\n\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n    setMellaDeviceIdFun,\r\n    setBiggieConnectStatusFun,\r\n    setBiggieBodyFatFun,\r\n    setBiggieBodyWeightFun,\r\n    setBiggieUnitFun,\r\n    setBiggieSameWeightCountFun,\r\n    setRulerConnectStatusFun,\r\n    setRulerMeasureValueFun,\r\n    setRulerUnitFun,\r\n    setRulerConfirmCountFun,\r\n    setReceiveBroadcastHardwareInfoFun,\r\n    setMellaMeasureNumFun,\r\n  }\r\n)(App);\r\n",["295","296"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\choose\\index.jsx",[],["297","298"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\forgotPassword\\index.jsx",["299"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../assets/images/errorIcon.png'\r\n\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\nimport { px, mTop, pX, MTop } from '../../utils/px';\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\n\r\nimport './index.less';\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount () {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    fetchRequest(`/user/forgetPwd/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n    fetchRequest(`/user/checkForgetPassword/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    fetchRequest(`/user/sendActivateEmail/${this.state.email}`, \"GET\", \"\")\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\editParent\\index.jsx",["300","301","302","303","304","305","306","307","308"],"import React, { Component } from 'react'\r\nimport { Menu, message, Select } from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\n\r\nimport dog from '../../assets/images/reddog.png'\r\nimport cat from '../../assets/images/redcat.png'\r\nimport other from '../../assets/images/redother.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\n\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport Heard from '../../utils/heard/Heard';\r\nimport Avatar from '../../components/avatar/Avatar'\r\n\r\nimport moment from 'moment';\r\n\r\nimport './index.less';\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nlet url = 'https://www.mellaserver.com/api/mellaserver'\r\n// let url = 'http://192.168.0.36:8080/mellaserver'\r\nexport default class EditParent extends Component {\r\n  state = {\r\n    lastName: '',       //宠物主人性\r\n    firstName: '',      //宠物主人名\r\n    email: '',          //邮箱号\r\n    phone: '',          //电话号码\r\n    spin: false,        //加载中\r\n    imageId: null,      //图片的ID值\r\n    petList: [],         //当前这个宠物主人下的所有宠物\r\n    userId: '',          //当前这个宠物主人的userId\r\n    userImageUrl: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    console.log(this.props.history.location.parent);\r\n\r\n    if (this.props.history.location.parent) { //接受入参\r\n      let { parent, pets } = this.props.history.location.parent\r\n      let { firstName, lastName, userId } = parent\r\n      this._getParent(userId)\r\n\r\n      this.setState({\r\n        firstName,\r\n        lastName,\r\n        userId,\r\n        petList: pets\r\n\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _getParent = (data) => {\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    fetchRequest(`/user/getUserInfoByUserId/${data}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('获取到了用户信息', res);\r\n        if (res.msg === 'success') {\r\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\r\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\r\n          firstName = firstName ? firstName : ''\r\n          phone = phone ? phone : ''\r\n          email = email ? email : ''\r\n          lastName = lastName ? lastName : ''\r\n\r\n\r\n          this.setState({\r\n            userImageUrl,\r\n            firstName,\r\n            lastName,\r\n            phone,\r\n            email,\r\n            imageId,\r\n            spin: false\r\n\r\n          })\r\n        } else {\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _petSpecies = () => {\r\n    let { userImageUrl } = this.state\r\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\r\n    let { firstName, lastName } = this.state\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>First Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={firstName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  firstName: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Last Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={lastName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  lastName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _petName = () => {\r\n    let { email, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  petList = () => {\r\n\r\n    let { petList } = this.state\r\n    console.log(petList);\r\n    let options = petList.map((item, index) => {\r\n      let { speciesId, url, breedName, petBirthday, gender, name, } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n\r\n      let petAge = moment(new Date()).diff(moment(petBirthday), 'years')\r\n\r\n      if (!url) {\r\n\r\n        switch (speciesId) {\r\n          case 1: images = `url(${cat})`\r\n\r\n            break;\r\n          case 2: images = `url(${dog})`\r\n            break\r\n          default: images = `url(${other})`\r\n            break;\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\r\n          onClick={() => {\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div className=\"itemL\">\r\n              <div\r\n                className='img'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  marginRight: px(20),\r\n                  borderRadius: px(60),\r\n                  backgroundImage: images,\r\n                }}>\r\n              </div>\r\n              <a\r\n                href=\"#\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  console.log(item);\r\n                }}\r\n              >{name}</a>\r\n            </div>\r\n            <div className=\"itemC\">\r\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\r\n            </div>\r\n            <div className=\"itemR\">\r\n              <p>{`${breedName}`}</p>\r\n            </div>\r\n\r\n\r\n            {/* <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div> */}\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n\r\n\r\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\r\n    if (petList.length > 3) {\r\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\r\n    }\r\n\r\n    return (\r\n      <ul style={liStyle}>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"editParent\">\r\n\r\n        <div className=\"heard\">\r\n          <Heard\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"editPetInfo_top\" >\r\n          <div className=\"parentInfo\">\r\n            <div className=\"title\" >{`Parent Information`}</div>\r\n            <div className=\"info\">\r\n              {this._petSpecies()}\r\n              {this._petName()}\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"pets\">\r\n            <div className=\"petsTitle\">\r\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\r\n              <div className=\"btn\" style={{ fontSize: px(22) }}>+ Add New Pet</div>\r\n            </div>\r\n            <div className=\"petList\">\r\n              {this.petList()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"editPetInfo_foot\"  >\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              let { firstName, lastName, email, phone, imageId, userId } = this.state\r\n              console.log({ firstName, lastName, email, phone, imageId });\r\n              let parames = {\r\n                userId,\r\n                email,\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n                imageId\r\n              }\r\n              this.setState({\r\n                spin: true\r\n              })\r\n              message.destroy()\r\n              console.log('修改的宠物信息:', parames);\r\n              fetchRequest('/user/updateUserInfo', 'POST', parames,)\r\n                .then(res => {\r\n                  console.log('保存所有信息', res);\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  if (res.flag === true) {\r\n                    this.props.history.goBack()\r\n                  } else {\r\n                    message.error('fail to edit')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  message.error('fail to edit')\r\n                  console.log(err);\r\n                })\r\n\r\n            }}\r\n\r\n          >Edit Profile</div>\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              this.props.history.goBack()\r\n            }}\r\n\r\n          >OK</div>\r\n\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n      </div >\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\PetsUI.jsx",["309","310","311","312","313","314","315","316"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n  Dropdown,\r\n  Menu,\r\n  Select,\r\n  Tooltip,\r\n} from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport petIcon from './../../assets/img/petIcon.png'\r\nimport xia from './../../assets/img/xia.png'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\nimport redjinggao from './../../assets/img/redjinggao.png'\r\nimport orgicn from './../../assets/img/orgicn.png'\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\n\r\nimport { px } from '../../utils/px'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { petSortTypeFun, petDetailInfoFun, setPetListArrFun } from '../../store/actions'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types'\r\nimport moment from 'moment'\r\n\r\nimport './mainbody.less'\r\n\r\nlet storage = window.localStorage;\r\n\r\nconst { Option } = Select;\r\n\r\nconst PetsUI = ({ bodyHeight, petSortTypeFun, petSortType, petDetailInfoFun, petDetailInfo, setPetListArrFun, petListArr, selectHardwareType, rulerConnectStatus }) => {\r\n  const history = useHistory();\r\n  //定义宠物列表数组\r\n  const [petList, setPetList] = useState([])\r\n  //是否展示弹窗\r\n  const [showModal, setShowModal] = useState(false)\r\n  //选中的宠物的详细信息\r\n  const [selectPetDetail, setSelectPetDetail] = useState({})\r\n\r\n  //获取宠物列表加载动画\r\n  const [loading, setLoading] = useState(false)\r\n\r\n  const [orgArr, setOrgArr] = useState([])\r\n  const [workplaceJson, setWorkplaceJson] = useState({})\r\n  const [connectionKey, setConnectionKey] = useState(\"\")\r\n  const [selectOrgId, setSelectOrgId] = useState(-1)\r\n  const [selectRoleId, setSelectRoleId] = useState(\"\")\r\n  const [workplaceName, setWorkplaceName] = useState(\"\")\r\n  const [workplaceId, setWorkplaceId] = useState()\r\n  const [organizationName, setOrganizationName] = useState(\"\")\r\n  const [organizationId, setOrganizationId] = useState()\r\n\r\n  //获取组织列表\r\n  const getOrgList = () => {\r\n    let userWorkplace = [];\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\r\n    } catch (error) {\r\n      console.log(\"字符串转对象失败\", error);\r\n    }\r\n    /*orgArr的格式为[{\r\n       organizationId:1,\r\n       organizationName:'11111',\r\n       connectionKey:''\r\n     }]\r\n\r\n      workplace:{\r\n        1:{\r\n           workplaceId:1,\r\n           workplaceName:'122334\r\n         },\r\n      }\r\n     */\r\n    let orgArr = [],\r\n      workplaceJson = {};\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i];\r\n      // console.log('每一项的值：', element);\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element;\r\n        const { name, organizationId, connectionKey } = organizationEntity;\r\n        const { workplaceName, workplaceId } = workplaceEntity;\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          setWorkplaceName(workplaceName)\r\n          setWorkplaceId(workplaceId)\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n\r\n          setOrganizationName(name)\r\n          setSelectOrgId(storage.lastOrganization)\r\n          setSelectOrgId(storage.lastOrganization)\r\n\r\n        }\r\n\r\n        let orgRepeatFlog = false,\r\n          repeatFlogNum = -1;\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true;\r\n            repeatFlogNum = j;\r\n            break;\r\n          }\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName,\r\n            workplaceId,\r\n          };\r\n          let id = orgArr[repeatFlogNum].organizationId;\r\n          workplaceJson[`${id}`] = workplace;\r\n        } else {\r\n          let connectKey = connectionKey || \"\";\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId,\r\n          };\r\n          let workplace = [\r\n            {\r\n              workplaceName,\r\n              workplaceId,\r\n            },\r\n          ];\r\n          workplaceJson[`${organizationId}`] = workplace;\r\n\r\n          orgArr.push(json);\r\n        }\r\n      }\r\n    }\r\n\r\n    setOrgArr(orgArr)\r\n    setWorkplaceJson(workplaceJson)\r\n    setConnectionKey(storage.connectionKey)\r\n    setSelectRoleId(storage.roleId)\r\n\r\n  }\r\n  //获取宠物列表数据\r\n  const _getExam = () => {\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    setLoading(true)\r\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n      .then(res => {\r\n        setLoading(false)\r\n        console.log('查询所有宠物', res);\r\n        if (res.flag === true && res.data) {\r\n          let oldList = res.data\r\n          let petArr = dataSort(oldList)\r\n          setPetList(petArr)\r\n          setPetListArrFun(petArr)\r\n        } else {\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setLoading(false)\r\n        console.log(err);\r\n      })\r\n  }\r\n  const dataSort = (data) => {\r\n    let petList = [].concat(data)\r\n    switch (petSortType) {\r\n      case 'Time':\r\n        petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n        break;\r\n      case 'Pet ID':\r\n        petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n        break;\r\n      case 'Owner':\r\n        petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n        break;\r\n      case 'Breed':\r\n        petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n        break;\r\n      case 'Pet Name':\r\n        petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n        break;\r\n      case 'Gender':\r\n        petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n        break;\r\n    }\r\n    return petList\r\n  }\r\n  const menu = () => {\r\n    let menuList = [\r\n      // { value: 'Time' },\r\n      { value: 'Pet ID' },\r\n      // { value: 'Owner' },\r\n      // { value: 'Breed' },\r\n      { value: 'Pet Name' },\r\n      // { value: 'Gender' },\r\n    ];\r\n    let options = menuList.map((item, index) => {\r\n      let itemstyle = {}, textColor = '#1a1a1a'\r\n      if (petSortType === item.value) {\r\n        itemstyle = { backgroundColor: '#e1206D' }\r\n        textColor = '#fff'\r\n      }\r\n      return (\r\n        <Menu.Item style={itemstyle} key={`${item.value}`}>\r\n          <div style={{ color: textColor }}>{item.value}</div>\r\n        </Menu.Item>\r\n      )\r\n    })\r\n    return (\r\n      <Menu onClick={({ key, }) => {\r\n        petSortTypeFun(key)\r\n        let petArr = dataSort(petList)\r\n        setPetList(petArr)\r\n        setPetListArrFun(petArr)\r\n      }}>\r\n        {options}\r\n\r\n      </Menu>\r\n    );\r\n  }\r\n  const petListUI = () => {\r\n    let options = petList.map((item, index) => {\r\n      let itemBac = '#E7E7E7', itemColor = '#141414'\r\n      if (item.petId === petDetailInfo.petId) {\r\n        itemBac = '#e1206D'\r\n        itemColor = '#fff'\r\n      }\r\n      return (\r\n        <li key={index} >\r\n          <div className='petItem'\r\n            style={{ padding: `${px(7)}px 0 ${px(7)}px ${px(20)}px`, fontSize: 14, backgroundColor: itemBac, color: itemColor }}\r\n            onClick={() => {\r\n              //当硬件是尺子且尺子还在测量的时候,要做出提示\r\n              setSelectPetDetail(item)\r\n              if (selectHardwareType === 'tape' && rulerConnectStatus !== 'disconnected') {\r\n                setShowModal(true)\r\n              } else {\r\n                petDetailInfoFun(item)\r\n              }\r\n              // petDetailInfoFun(item)\r\n            }}\r\n          >\r\n            {`${item.patientId}, ${item.petName}`}\r\n          </div>\r\n        </li>\r\n      )\r\n\r\n    })\r\n\r\n    return (\r\n      <div className=\"petList\" style={{ marginTop: px(10) }}>\r\n        {loading ?\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', width: '100%', height: '100%' }}>\r\n            <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#141414', marginTop: px(-30), }} />\r\n            </div>\r\n            <p style={{ color: '#141414' }}>loading... </p>\r\n          </div>\r\n          :\r\n          <ul>\r\n            {options}\r\n          </ul>}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  const selectOrgUI = () => {\r\n    // console.log('orgArr', orgArr);\r\n    const selectOrgFn = (value, option) => {\r\n      console.log('-------value', value, option);\r\n      setOrganizationName(value)\r\n      storage.roleId = option.roleid\r\n      storage.lastOrganization = option.organizationid\r\n      storage.connectionKey = option.connectionkey\r\n      try {\r\n        let key = parseInt(selectOrgId);\r\n        let lastWorkplaceId = workplaceJson[key][0].workplaceId;\r\n        // console.log('------', lastWorkplaceId);\r\n        storage.lastWorkplaceId = lastWorkplaceId;\r\n\r\n      } catch (error) {\r\n\r\n      }\r\n      _getExam()\r\n\r\n    }\r\n\r\n    let options = orgArr.map((item, index) => {\r\n      // console.log('item', item);\r\n      if (index === 1) {\r\n        console.log('+++++++', item);\r\n      }\r\n      return (\r\n        <Option\r\n          key={`${item.organizationId}`}\r\n          value={item.organizationName}\r\n          organizationid={item.organizationId}\r\n          roleid={item.roleId}\r\n          connectionkey={item.connectionKey}\r\n\r\n\r\n        >\r\n          {item.organizationName}\r\n        </Option>\r\n      )\r\n    })\r\n    return (\r\n      <Select\r\n        style={{ width: '70%', marginLeft: px(15) }}\r\n        value={organizationName}\r\n        onChange={selectOrgFn}\r\n        dropdownClassName=\"selectOrgUI\"\r\n        bordered={false}\r\n        // showArrow={false}\r\n        // dropdownMatchSelectWidth={140}\r\n        suffixIcon={() => <img src={xia} alt=\"\" width={px(20)} style={{ marginLeft: px(10) }} />}\r\n      >\r\n        {options}\r\n      </Select>\r\n    )\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    //设置宠物列表数据\r\n    setPetList(petListArr)\r\n  }, [petListArr])\r\n  //获取组织列表\r\n  useEffect(() => {\r\n    getOrgList()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    _getExam()\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"PetUI11\" style={{ height: bodyHeight - px(100), }}>\r\n      <MyModal\r\n        visible={showModal}\r\n        element={\r\n          <div className='petUiModal'>\r\n            <img src={redjinggao} alt=\"\" width={'45px'} style={{ margin: `${px(25)}px 0` }} />\r\n            <div className='bodyText' style={{ marginTop: px(30) }}>Patient Switched – select dimension to measure</div>\r\n            <div className=\"btns\" style={{ marginTop: px(35) }}>\r\n              <div className=\"btn\" onClick={() => { setShowModal(false) }}>Cancel</div>\r\n              <div className=\"btn\" onClick={() => { setShowModal(false); petDetailInfoFun(selectPetDetail) }}>Confirm</div>\r\n            </div>\r\n          </div>\r\n        }\r\n      />\r\n      <div style={{ width: '100%', position: 'relative', height: bodyHeight - px(100), }}>\r\n        <div className=\"selectOrg\" style={{ width: '100%' }}>\r\n          <div className=\"title\" style={{ padding: `${px(10)}px 0px ${px(10)}px ${px(20)}px ` }}>\r\n            <img src={orgicn} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\r\n            <div className=\"titleText\" >{`Organization`}</div>\r\n          </div>\r\n          <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n            {selectOrgUI()}\r\n            <Tooltip placement='bottom' title='Add an organization'>\r\n              <div\r\n                className=\"addImgBox\"\r\n                onClick={() => history.push(\"/menuOptions/NewOrg\")}\r\n              >\r\n                <img\r\n                  src={deivceAdd}\r\n                  alt=\"\"\r\n                  width={px(20)}\r\n                  style={{ marginLeft: px(12) }}\r\n                />\r\n              </div>\r\n\r\n            </Tooltip>\r\n          </div>\r\n        </div>\r\n        <div className=\"title\" style={{ padding: `${px(20)}px 0px ${px(20)}px ${px(20)}px ` }}>\r\n          <img src={petIcon} alt=\"\" width={px(25)} style={{ marginRight: px(10) }} />\r\n          <div className=\"titleText\" >Pets</div>\r\n        </div>\r\n        <div className=\"sort\" style={{ paddingLeft: px(20) }}>\r\n          <Dropdown overlay={menu} trigger={['click']}>\r\n            <div className=\"sortBox\">\r\n              <div className=\"sortText\" >\r\n                {`Sort by: ${petSortType}`}\r\n              </div>\r\n              <img src={xia} alt=\"\" width={px(15)} style={{ marginLeft: px(10) }} />\r\n            </div>\r\n          </Dropdown>\r\n        </div>\r\n        {petListUI()}\r\n        <div className=\"walkBtn\">\r\n          <div\r\n            className=\"walkbtnBox\"\r\n            style={{ height: px(40), marginTop: px(15) }}\r\n            onClick={() => {\r\n              let json = {\r\n                isWalkIn: true,\r\n                petId: null,\r\n                petName: null,\r\n                owner: null,\r\n                breed: null,\r\n\r\n              }\r\n              petDetailInfoFun(json)\r\n            }}\r\n          >\r\n            <div className=\"walkText\">Walk-In</div>\r\n          </div>\r\n        </div>\r\n        {/* <MyModal visible={loading} /> */}\r\n      </div >\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nPetsUI.propTypes = {\r\n  bodyHeight: PropTypes.number\r\n}\r\n//默认值\r\nPetsUI.defaultProps = {\r\n  bodyHeight: 0\r\n}\r\nexport default connect(\r\n  state => ({\r\n    petSortType: state.petReduce.petSortType,\r\n    petDetailInfo: state.petReduce.petDetailInfo,\r\n    petListArr: state.petReduce.petListArr,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    rulerConnectStatus: state.hardwareReduce.rulerConnectStatus,\r\n  }),\r\n  { petSortTypeFun, petDetailInfoFun, setPetListArrFun }\r\n)(PetsUI)\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetLogin\\index.jsx",["317"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    Input,\r\n    Form,\r\n    Select\r\n} from 'antd';\r\n\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2'\r\n\r\nimport './index.less';\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\nexport default class EzyNetLogin extends Component {\r\n\r\n    state = {\r\n        isRemember: false,\r\n        client_id: '',\r\n        client_secret: '',\r\n        partner_id: ''\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('middle')\r\n        storage.ezyVetToken = ''\r\n    }\r\n    componentWillMount () {\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin1 !== '', storage.ezyVetToken1 !== undefined, `${storage.ezyVetToken1}` !== 'undefined');\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin !== '', storage.ezyVetToken !== undefined, `${storage.ezyVetToken}` !== 'undefined');\r\n        if (storage.ezyVetLogin !== '' && storage.ezyVetToken !== undefined && `${storage.ezyVetToken}` !== 'undefined') {\r\n            try {\r\n                let data = JSON.parse(storage.ezyVetLogin)\r\n                console.log('--', data);\r\n                this.setState({\r\n                    isRemember: data.isRemember,\r\n                    client_id: data.client_id,\r\n                    client_secret: data.client_secret,\r\n                    partner_id: data.partner_id\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 10 },\r\n                sm: { span: 6 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 14 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 10,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 8,\r\n                    offset: 7,\r\n                },\r\n            },\r\n        };\r\n\r\n        const _next = (values) => {\r\n            console.log('Received values of form: ', values);\r\n            let parames = {\r\n                clientId: values.client_id,\r\n                clientSecret: values.client_secret,\r\n                partnerId: values.partner_id,\r\n            }\r\n            console.log(parames);\r\n            fetchRequest2('/EzyVet/ezyvetauth', 'GET', parames, '')\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    if (res && res.msg === 'success') {\r\n\r\n                        storage.ezyVetToken = res.data\r\n                        if (this.state.isRemember) {\r\n                            storage.ezyVetLogin = JSON.stringify({\r\n                                client_id: values.client_id,\r\n                                client_secret: values.client_secret,\r\n                                partner_id: values.partner_id,\r\n                                isRemember: this.state.isRemember\r\n                            })\r\n                        } else {\r\n                            storage.ezyVetLogin = ''\r\n                        }\r\n                        storage.selectTime = ''\r\n                        storage.ezyVetReLogin = JSON.stringify({  //如果令牌过期了，需要重新输入信息重新获取令牌\r\n                            client_id: values.client_id,\r\n                            client_secret: values.client_secret,\r\n                            partner_id: values.partner_id,\r\n                        })\r\n\r\n                        this.props.history.push('EzyVetSelectTime')\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n        }\r\n        let { client_id, client_secret, partner_id } = this.state\r\n\r\n        return (\r\n            <div id=\"eszVetLogin\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page1')}\r\n                />\r\n                <div className=\"text\">\r\n                    Please enter your user information\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Form\r\n                        {...formItemLayout}\r\n                        name=\"register\"\r\n                        onFinish={_next}\r\n                        initialValues={{\r\n                            client_id, client_secret, partner_id\r\n                        }}\r\n\r\n                        scrollToFirstError\r\n                    >\r\n                        <Form.Item\r\n                            name=\"client_id\"\r\n                            label=\"Client ID\"\r\n                            rules={[{ required: true, message: 'Please input your Client ID!', whitespace: true }]}\r\n\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"client_secret\"\r\n                            label=\"Client Secret\"\r\n                            rules={[{ required: true, message: 'Please input your Client Secret!', whitespace: true }]}\r\n                            hasFeedback\r\n                        >\r\n                            <Input.Password className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"partner_id\"\r\n                            label=\"Partner ID\"\r\n                            rules={[{ required: true, message: 'Please input your Partner ID!', whitespace: true }]}\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            {...tailFormItemLayout}\r\n                        >\r\n                            <div className=\"btn\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    htmlType=\"submit\"\r\n                                >\r\n                                    Next\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"remember\">\r\n                    <p>Stay Signed In:</p>\r\n                    <div className=\"box\" onClick={() => {\r\n                        let { isRemember } = this.state\r\n                        this.setState({\r\n                            isRemember: !isRemember\r\n                        })\r\n                        storage.isRemember = !isRemember\r\n                    }}>\r\n                        {this.state.isRemember && <img src={dui} alt=\"\" />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",["318","319"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scanCodeLogin\\index.jsx",[],["320","321"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ishavePMS\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\invite\\index.jsx",["322"],"import React, { Component, } from 'react'\r\nimport {\r\n  Tag,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n} from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2';\r\nimport { px } from '../../utils/px';\r\nimport Button from '../../utils/button/Button'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\n\r\nimport './index.less';\r\n\r\nlet storage = window.localStorage;\r\n\r\nexport default class Invite extends Component {\r\n\r\n  state = {\r\n\r\n    tags: [],\r\n    inputVisible: false,\r\n    inputValue: '',\r\n    editInputIndex: -1,\r\n    editInputValue: '',\r\n    visible: false\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  handleClose = removedTag => {\r\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    console.log(tags);\r\n    this.setState({ tags });\r\n  };\r\n\r\n  showInput = () => {\r\n    this.setState({ inputVisible: true }, () => this.input.focus());\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleInputConfirm = () => {\r\n    const { inputValue } = this.state;\r\n    let { tags } = this.state;\r\n    if (inputValue && tags.indexOf(inputValue) === -1) {\r\n      console.log('输入的内容为：', inputValue);\r\n      message.destroy()\r\n      fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.code === 11011) {\r\n            console.log('邮箱号以被注册，是否忘记密码');\r\n            tags = [...tags, inputValue];\r\n            console.log(tags);\r\n\r\n            this.setState({\r\n              tags,\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n          else {\r\n            message.error('This mailbox was not found!', 3)\r\n            this.setState({\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error(`Error:${err.message}`)\r\n          console.log('检测邮箱号的接口出错了', err);\r\n        })\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  saveInputRef = input => {\r\n    this.input = input;\r\n  };\r\n\r\n  saveEditInputRef = input => {\r\n    this.editInput = input;\r\n  };\r\n\r\n  _next = () => {\r\n    message.destroy()\r\n    let { tags } = this.state\r\n    let userId = storage.userId\r\n    let organizationId = storage.lastOrganization\r\n    console.log({ tags, userId, organizationId });\r\n    if (tags.length === 0) {\r\n      message.error('Please enter the invitation email')\r\n      return\r\n    }\r\n    this.setState({\r\n      visible: true\r\n    })\r\n    fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('成功，跳转');\r\n          message.success('Invitation successful', 3)\r\n          this.props.history.goBack()\r\n\r\n        } else {\r\n          message.error('Invitation failed')\r\n\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n  render () {\r\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n    console.log('---', editInputIndex);\r\n    return (\r\n      <div id=\"inviteTeam\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n          <div className=\"text\">Invite your Team</div>\r\n\r\n          <div className=\"addF\">\r\n            <p>To:</p>\r\n            <div className=\"add\">\r\n\r\n              <>\r\n                {tags.map((tag, index) => {\r\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                  const tagElem = (\r\n                    <Tag\r\n                      className=\"edit-tag\"\r\n                      key={tag}\r\n                      closable={true}\r\n                      onClose={() => this.handleClose(tag)}\r\n                    >\r\n                      <span>\r\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                      </span>\r\n                    </Tag>\r\n                  );\r\n                  return isLongTag ? (\r\n                    <Tooltip title={tag} key={tag}>\r\n                      {tagElem}\r\n                    </Tooltip>\r\n                  ) : (\r\n                    tagElem\r\n                  );\r\n                })}\r\n                {inputVisible && (\r\n                  <Input\r\n                    ref={this.saveInputRef}\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    className=\"tag-input\"\r\n                    value={inputValue}\r\n                    onChange={this.handleInputChange}\r\n                    onBlur={this.handleInputConfirm}\r\n                    onPressEnter={this.handleInputConfirm}\r\n                  />\r\n                )}\r\n                {!inputVisible && (\r\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                    <PlusOutlined />Press Enter to add mailbox\r\n                  </Tag>\r\n                )}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn\"\r\n          style={{ padding: `${px(40)}px 0` }}\r\n        >\r\n\r\n          {/* <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._next}\r\n            text={'Send'}\r\n          >\r\n\r\n          </Button> */}\r\n\r\n          <Button\r\n\r\n            onClick={this._next}\r\n            text={'Send'}\r\n            textBoxStyle={{ height: px(45), width: '45%' }}\r\n          >\r\n\r\n          </Button>\r\n        </div>\r\n        <MyModal visible={this.state.visible} />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardListModal.jsx",["323"],"import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\n\r\nimport { px } from \"../../utils/px\";\r\nimport { compareObject } from \"../../utils/current\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\n\r\nimport \"./mainbody.less\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25) }}\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => {},\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\home\\index.jsx",["324"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrganization\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\newOrg\\index.jsx",[],["325","326"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\apiKey\\index.jsx",["327"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    Input,\r\n    Spin,\r\n    Form,\r\n    Modal\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\n\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest1 } from '../../utils/FetchUtil'\r\nimport { mTop } from '../../utils/px';\r\n\r\nimport './index.less';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2326495_ryrpg35knb.js'\r\n})\r\nlet storage = window.localStorage;\r\nexport default class APIKey extends Component {\r\n    state = {\r\n        value: '',\r\n        loading: false,\r\n        id: '', // location 的ID\r\n        name: '',\r\n        flog: false,\r\n        visible: false,\r\n        modalText: '',\r\n        api: '',\r\n        selectApi: false\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n    }\r\n    componentWillMount () {\r\n        if (storage.selectApi === `true`) {\r\n            if (`${storage.API}` !== `undefined`) {\r\n                this.setState({\r\n                    api: storage.API\r\n                })\r\n            }\r\n            this.setState({\r\n                selectApi: storage.selectApi\r\n            })\r\n        }\r\n        console.log('----------', storage.selectApi, storage.API);\r\n\r\n    }\r\n    onFinish = values => {\r\n        console.log(\"Success:\", values);\r\n        console.log('跳转');\r\n        if (values) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            let params = {\r\n                APIkey: values.api\r\n            }\r\n            console.log('传入的数据：', params);\r\n\r\n            fetchRequest1('/VetSpire/selectLocationsByOrganization', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    this.setState({\r\n                        loading: false\r\n                    })\r\n                    if (res.code === 14002) {\r\n\r\n\r\n                        storage.selectApi = this.state.selectApi\r\n                        console.log(this.state.selectApi);\r\n                        storage.API = values.api\r\n                        console.log(res.message);\r\n                        let data = res.data.org\r\n                        console.log(data);\r\n                        this.setState({\r\n                            id: data.id,\r\n                            name: data.name,\r\n                            flog: true,\r\n                            api: params.APIkey\r\n                        })\r\n                        storage.id = data.id\r\n                        console.log(storage.id);\r\n                        this.props.history.push({ pathname: '/page3', })\r\n                    } else {\r\n                        this.setState({\r\n                            visible: true,\r\n                            modalText: 'The input API is wrong',\r\n                            flog: false\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                    this.setState({\r\n                        loading: false,\r\n                        visible: true,\r\n                        modalText: `${err}`,\r\n                        flog: false\r\n                    })\r\n                })\r\n\r\n        }\r\n    };\r\n    onFinishFailed = errorInfo => {\r\n        console.log(\"Failed:\", errorInfo);\r\n    };\r\n    render () {\r\n        const { api, id } = this.state\r\n        return (\r\n            <div id=\"inputAPI\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page1')}\r\n                />\r\n\r\n\r\n                <Spin tip=\"Loading...\" spinning={this.state.loading} delay={500}>\r\n\r\n                    {/* 文本 */}\r\n                    <div className=\"text\"\r\n                        style={{ marginTop: mTop(100), marginBottom: mTop(80) }}\r\n                    >Enter your Vetspire API key<br />and we’ll take care of the rest.</div>\r\n\r\n\r\n                    <Form\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(value) => this.onFinish(value)}\r\n                        onFinishFailed={(value) => this.onFinishFailed(value)}\r\n                    >\r\n                        <div className=\"inptDiv\">\r\n                            <Form.Item\r\n                                name=\"api\"\r\n                                initialValue={this.state.api}\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your vetspire API key!\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    className='input'\r\n                                    placeholder=\"Your Vetspire API Key\"\r\n\r\n                                />\r\n\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className=\"remember\">\r\n                            <div className=\"text1\">Remember Me</div>\r\n                            <div className=\"square\" onClick={() => {\r\n                                this.setState({ selectApi: !this.state.selectApi })\r\n                            }}>\r\n                                {(this.state.selectApi) ? (<img src={dui} width={'40px'} alt=\"\" />) : (null)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* {(!this.state.flog) ? ( */}\r\n                        {(true) ? (\r\n                            <Form.Item>\r\n                                <div className=\"btn\"\r\n                                    style={{ marginTop: mTop(280) }}\r\n                                >\r\n                                    <Button\r\n                                        type=\"primary\"\r\n                                        shape=\"round\"\r\n                                        size='large'\r\n                                        htmlType=\"submit\"\r\n                                    >\r\n                                        Connect\r\n                                    </Button>\r\n                                </div>\r\n                            </Form.Item>\r\n                        ) : (null)}\r\n\r\n                    </Form>\r\n\r\n                </Spin>\r\n\r\n                {/* {(this.state.flog) ? ( */}\r\n                {(false) ? (\r\n                    <div>\r\n                        <div className=\"text2\"> Verify Organization<br />Information</div>\r\n                        <div className=\"text9\">Business Name <span>{this.state.name}</span></div>\r\n                        <div className=\"btns\">\r\n                            <div className=\"btn1\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    onClick={() => this.setState({ flog: false })}\r\n                                >\r\n                                    Try Again\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"btn2\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    onClick={() => {\r\n                                        console.log('点击了');\r\n                                        this.props.history.push({ pathname: '/page4', query: { api, id } })\r\n                                    }}\r\n                                >\r\n                                    Verify\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                ) : (null)}\r\n\r\n\r\n                <Modal\r\n                    title='err'\r\n                    visible={this.state.visible}\r\n                    footer={[]}\r\n                    onCancel={() => this.setState({ visible: false })}\r\n                >\r\n                    {this.state.modalText}\r\n                </Modal>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\norMalMeasurement\\index.jsx",["328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348"],"import React, { Component } from 'react'\r\nimport {\r\n  Menu,\r\n  Table,\r\n  Popconfirm,\r\n  message,\r\n  Select,\r\n  Progress,\r\n  Input,\r\n  Modal\r\n} from 'antd';\r\nimport { createFromIconfontCN, LoadingOutlined, SyncOutlined } from '@ant-design/icons';\r\n\r\nimport ye from './../../assets/images/ye1.png'\r\nimport er from './../../assets/images/er3.png'\r\nimport gang from './../../assets/images/gang3.png'\r\nimport edit from './../../assets/images/edit.png'\r\nimport del from './../../assets/images/del.png'\r\nimport scale from './../../assets/images/scale.png'\r\nimport placement_gang from './../../assets/images/placement_gang.png'\r\nimport placement_er from './../../assets/images/placement_er.png'\r\nimport palcement_ye from './../../assets/images/palcement_ye.png'\r\nimport careacte from './../../assets/images/dogMessage.png'\r\nimport catcareacte from './../../assets/images/catMessage.png'\r\nimport dog from './../../assets/img/redDog.png'\r\nimport cat from './../../assets/img/redcat.png'\r\nimport other from './../../assets/images/other.png'\r\nimport dog1 from './../../assets/images/pinkdog.png'\r\nimport cat1 from './../../assets/images/pinkcat.png'\r\nimport redDog1 from './../../assets/images/reddog.png'\r\nimport redCat1 from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\n\r\n\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport { fetchRequest1 } from './../../utils/FetchUtil'\r\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\r\nimport electronStore from './../../utils/electronStore'\r\nimport { fetchToken } from '../../utils/Fetch_token';\r\nimport { mTop, px, win } from '../../utils/px';\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport Biggie from './../../pages/biggiePage/components/Biggie'\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport Heard from '../../utils/heard/Heard';\r\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\r\n\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n\r\nimport './index.less'\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet saveHistoryTime = null, getSerialTime = null\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\nlet detectTimer = null, countdownTimer = null, lastConnectionTime = null;\r\n\r\nlet storage = window.localStorage;\r\n//用于预测的东西\r\nlet clinicalYuce = [], clinicalIndex = 0, endflog = false\r\nlet temp15 = ''\r\nlet is97Time = null, //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\r\n  initTime = null\r\nlet firstEar = true\r\nlet isMeasurement = false //正在测量为true，反之为false\r\nlet num07 = 0       //接收到07命令行的次数\r\n\r\nlet isClick = true\r\n\r\nlet sameBiggieNum = 0, keyboardBiggieFlog = false\r\n\r\nlet nextFlog = false //用来判断是否按下了尺子的确认键\r\nlet avoidRepetition = false //避免重复，防止尺子数据过来后持续刷新\r\n\r\nlet confirmBtnFlog = ''\r\n//因为biggie样机测量完成控制字从02(测量中)变成03(测量完成),但是会发多组03,因此做一个限制,当控制字为02时biggieSave=false,第一次为03时变成true\r\nlet biggieSave = false\r\n\r\nexport default class NorMalMeasurement extends Component {\r\n  state = {\r\n    dogImg: redDog1,\r\n    catImg: cat1,\r\n    otherImg: other,\r\n    selectWZ: 'dog',\r\n\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    value: '',\r\n    api: '',\r\n    id: '',\r\n    dataArr: [],\r\n    seleceID: '',//医生id\r\n    data: { ci: [''], wen: [] },\r\n\r\n    temColor: '',\r\n    Temp: '',\r\n    isMeasure: false,\r\n    mearsurePart: 1,\r\n    historyData: [],\r\n    patientId: '',\r\n    spin: false,        //patientId后面的刷新按钮是否旋转\r\n    petName: '',\r\n    addpatient_petName: '',\r\n    addpatient_description: '',\r\n    addpatient_species: 1,\r\n    roomTemperature: '',\r\n    referenceRectalTemperature: '',\r\n    bodyConditionScore: '',\r\n    furLength: '',\r\n    bodyType: '',\r\n    heartRate: '',\r\n    bloodPressure: '',\r\n    respiratoryRate: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    units: '℉',\r\n    measuerStatus: 'disconnected',\r\n    isconnected: false,\r\n    countdown: 15,\r\n    petVitalTypeId: '01',  //测量部位\r\n    probeID: '',         //探头id\r\n    org: 1,\r\n    err07Visible: false,\r\n\r\n\r\n    //左侧的宠物信息\r\n    petId: '',\r\n    owner: '',\r\n    breedName: '',\r\n    isMix: false,\r\n    age: null,\r\n    weight: '',\r\n    url: '',\r\n    speciesId: null,\r\n\r\n    //圆环的一些信息\r\n    temp_statu: 'Ready',\r\n    progress: 0,\r\n    endMeasure: false,\r\n    initFlog: false,\r\n    isEarMeasure: false,\r\n\r\n\r\n    //底部的信息\r\n    isNotes: true,\r\n    notes: '',\r\n    petSpeciesBreedId: 0,\r\n    consult_id: '',\r\n    healthStatus: '',\r\n\r\n\r\n    editId: '',\r\n    memo: '',\r\n    macAddr: '',\r\n    loading: false,\r\n\r\n    noUSB: false,  //是否有usb底座，为true代表没有\r\n    devicesType: 'biggie',\r\n    isHaveBigieDate: false, //为false则展示把宠物放到秤上的文本，为true则展示体重值\r\n\r\n    biggieDate: '', //体脂称体重值（磅）\r\n    sendWeight: '', //体脂称体重值（kg）\r\n    impedance: '',   //阻抗\r\n    isWeightSave: false,  //保存体重数据跳出的上传中弹框\r\n\r\n\r\n    //宠物特征信息\r\n    l2rarmDistance: '',           //左右手间距，这里用他临时替换成头部周长\r\n    neckCircumference: '',        //脖子周长\r\n    upperTorsoCircumference: '',  //上躯干周长\r\n    lowerTorsoCircumference: '',  //下躯干周长\r\n    h2tLength: '',                //头尾长度\r\n    torsoLength: \"\",             //躯干长度\r\n\r\n    rulerUnit: 'cm',               //尺子的单位\r\n    itemIndex: 1,                //代表现在是第几个宠物特征\r\n    updatePetAttributes: false,    //上传宠物属性的弹框\r\n\r\n    isWalkIn: false,               //是否是从walkIn进来的\r\n  }\r\n  componentWillMount() {\r\n    try {\r\n      console.log('--------------', this.props.location.isconnected);\r\n      if (this.props.location.isconnected === false || this.props.location.isconnected === true) {\r\n        if (this.props.location.isconnected === false) {\r\n\r\n        } else {\r\n          this.setState({\r\n            measuerStatus: 'connented',\r\n            isconnected: true,\r\n            isEarMeasure: false\r\n\r\n          })\r\n          is97Time = new Date()\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    ipcRenderer.send('big', win())\r\n    storage.isClinical = 'false'\r\n    if (storage.identity === '2') {\r\n      let ezyVetSelectHealthstatus = JSON.parse(storage.ezyVetSelectHealthstatus)\r\n      console.log(ezyVetSelectHealthstatus);\r\n      let { age, animal_id, breed, consult_id, gender, key, owner, petName, weight, url, speciesId } = ezyVetSelectHealthstatus\r\n      let petAge = null\r\n      if (`${age}` === '' || `${age}` === 'null') {\r\n        petAge = 0\r\n      } else {\r\n        petAge = age\r\n      }\r\n      this.setState({\r\n        petName,\r\n        owner,\r\n        breedName: breed,\r\n        weight,\r\n        age: petAge,\r\n        consult_id,\r\n        healthStatus: key,\r\n        patientId: animal_id,\r\n        org: 4,\r\n        url,\r\n        speciesId\r\n      }, () => {\r\n        this._getPetInfo('ezyVet')\r\n      })\r\n    } else if (storage.identity === '1') {\r\n      this.setState({\r\n        petName: storage.selectPetName,\r\n        owner: storage.selectOwner,\r\n        breedName: storage.selectBreed,\r\n        weight: storage.selectWeight,\r\n        age: storage.selectAge,\r\n        patientId: storage.selectPatientId,\r\n        org: 1\r\n      }, () => {\r\n        this._getPetInfo('vetspire')\r\n      })\r\n    } else {\r\n      let hardSet = electronStore.get('hardwareConfiguration')\r\n      console.log('测量单位', hardSet);\r\n      let rulerUnit = 'in'\r\n      if (!hardSet) {\r\n        let settings = {\r\n          isHua: true,\r\n          is15: true,\r\n          self_tarting: false,\r\n          isBacklight: true,\r\n          isBeep: true,\r\n          backlightTimer: { length: 140, number: '45' },\r\n          autoOff: { length: 0, number: '30' },\r\n        }\r\n        electronStore.set('hardwareConfiguration', settings)\r\n        this.setState({\r\n          units: '℉',\r\n          rulerUnit: 'in',\r\n          countdown: 15\r\n        })\r\n      } else {\r\n        let units = hardSet.isHua ? '℉' : '℃'\r\n        rulerUnit = hardSet.isHua ? 'in' : 'cm'\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        console.log('测量单位', units);\r\n        this.setState({\r\n          units,\r\n          countdown,\r\n          rulerUnit\r\n        })\r\n      }\r\n\r\n\r\n\r\n\r\n      let data = JSON.parse(storage.doctorExam)\r\n      console.log('从列表里面传过来的数据', data);\r\n      if (!data) {\r\n        console.log('从walk-in来的');\r\n        this.setState({\r\n          isWalkIn: true\r\n        })\r\n\r\n      } else {\r\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength, weight, url, speciesId } = data\r\n\r\n        // l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n        // neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n        // upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n        // lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n        // h2tLength = h2tLength ? `${h2tLength}` : ''\r\n        // torsoLength = torsoLength ? `${torsoLength}` : ''\r\n        console.log('+++++++++++', l2rarmDistance);\r\n\r\n        l2rarmDistance = changeNum(l2rarmDistance)\r\n        console.log('++++++0+++++', l2rarmDistance);\r\n        neckCircumference = changeNum(neckCircumference)\r\n        upperTorsoCircumference = changeNum(upperTorsoCircumference)\r\n        lowerTorsoCircumference = changeNum(lowerTorsoCircumference)\r\n        h2tLength = changeNum(h2tLength)\r\n        torsoLength = changeNum(torsoLength)\r\n\r\n        function changeNum(params) {\r\n\r\n          if (params) {\r\n            if (rulerUnit === 'cm') {\r\n              return `${params}`\r\n            } else {\r\n              return `${(params / 2.54).toFixed(2)}`\r\n            }\r\n          } else {\r\n            return ''\r\n          }\r\n\r\n        }\r\n\r\n\r\n        if (weight && weight !== 'unknown') {\r\n          weight = parseFloat(weight).toFixed(1)\r\n        }\r\n        let breedName = data.breed\r\n        if (!breedName) {\r\n          breedName = 'unknown'\r\n        }\r\n        switch (breedName) {\r\n          case 'defaultdog':\r\n            breedName = 'Dog'\r\n\r\n            break;\r\n          case 'defaultother':\r\n            breedName = 'Other'\r\n\r\n            break;\r\n          case 'defaultcat':\r\n            breedName = 'Cat'\r\n            break;\r\n\r\n        }\r\n        this.setState({\r\n          petName: data.petName,\r\n          owner: data.owner,\r\n          breedName,\r\n          weight,\r\n          age: data.age,\r\n          patientId: data.patientId,\r\n          petId: data.petId,\r\n          l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength,\r\n          url, speciesId,\r\n          isWalkIn: false\r\n        }, () => {\r\n          this._getHistory()\r\n        })\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('usbDetect', this.usbDetect)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n\r\n    this._whether_to_connect_to_mella()\r\n    //刚进入测量界面需要获取以前的历史数据，测量一次就添加一个记录\r\n    // this._getHistory()\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    if (temporaryStorage.devicesType) {\r\n      this.setState({\r\n        devicesType: temporaryStorage.devicesType\r\n      })\r\n    }\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('usbDetect', this.usbDetect)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    clearInterval(detectTimer)\r\n    detectTimer && clearInterval(detectTimer)\r\n    countdownTimer && clearInterval(countdownTimer)\r\n    getSerialTime && clearTimeout(getSerialTime)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    lastConnectionTime = null;\r\n    clinicalYuce = []\r\n    clinicalIndex = 0\r\n    message.destroy()\r\n\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    this.command(data)()\r\n  }\r\n  /**\r\n   *\r\n   *usb检测，为true代表插上了设备，false代表拔出了设备\r\n   */\r\n  usbDetect = (event, data) => {\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    if (data === true) {\r\n      this._whether_to_connect_to_mella()\r\n    } else {\r\n      this.detectTimer && clearInterval(this.detectTimer)\r\n      num07 = 0\r\n    }\r\n  }\r\n  _whether_to_connect_to_mella = () => {\r\n    message.destroy()\r\n    this.detectTimer = setInterval(() => {\r\n      if (isMeasurement) {\r\n        return\r\n      }\r\n      if (!initTime) {\r\n        // console.log('断开连接');\r\n\r\n        firstEar = true\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n        initTime = new Date()\r\n      } else {\r\n        ipcRenderer.send('usbdata', { command: '07', arr: ['5A'] })\r\n        if (new Date() - initTime < 5000) {\r\n          // console.log('连接成功');\r\n\r\n        } else {\r\n          console.log('2断开连接');\r\n          firstEar = true\r\n          let hardSet = electronStore.get('hardwareConfiguration')\r\n          let countdown = hardSet.is15 ? 15 : 30\r\n          this.setState({\r\n            measuerStatus: 'disconnected',\r\n            countdown,\r\n            isMeasure: false,\r\n            isconnected: false,\r\n            isEarMeasure: false\r\n          })\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n\r\n\r\n  }\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n\r\n    switch (e.key) {\r\n      case '1':\r\n        switch (storage.identity) {\r\n          case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n          case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n            break;\r\n          case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n\r\n        break;\r\n\r\n      case '2': this.props.history.push('/'); break;\r\n      case '3': this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: this.state.patientId, isconnected: this.state.isconnected }); break;\r\n      case '4': this.props.history.push('/page12'); break;\r\n      case '5': this.props.history.push('/menuOptions/settings'); break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n\r\n    const instruction = [209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255]\r\n    if (newArr[2] !== 7) {\r\n      initTime = new Date()\r\n      num07 = 0\r\n    } else {\r\n      num07++\r\n    }\r\n\r\n\r\n\r\n    isMeasurement = false\r\n    const commandArr = {\r\n      209: () => {  //腋温\r\n        if (firstEar) {\r\n          firstEar = false\r\n          console.log('去获取探头id');\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n        }\r\n        isMeasurement = true\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${(dataArr1[4])}`)\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${(dataArr1[6])}`)\r\n        // let Temp = parseFloat(temp0.toFixed(1))\r\n        let Temp = temp0\r\n        console.log(Temp);\r\n        if (Temp === 24.7 || Temp === 0 || Temp === null || Temp === undefined) {\r\n          return\r\n        }\r\n\r\n\r\n        if (this.state.isMeasure === false) {\r\n\r\n          if (countdownTimer) {\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n            this.setState({\r\n              countdown\r\n            })\r\n          }\r\n\r\n          countdownTimer = setInterval(() => {\r\n            let { countdown, isconnected } = this.state\r\n            this.setState({\r\n              countdown: countdown - 1\r\n\r\n            })\r\n\r\n            if (countdown === 0) {\r\n              console.log('调用15秒的接口');\r\n              this._prediction()\r\n              countdownTimer && clearInterval(countdownTimer)\r\n              this.setState({\r\n                countdown: 0\r\n              })\r\n              // ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n            }\r\n\r\n            if (isconnected === false) {\r\n              countdownTimer && clearInterval(countdownTimer)\r\n\r\n            }\r\n          }, 1000);\r\n        }\r\n        lastConnectionTime = new Date();\r\n\r\n\r\n\r\n        let progress = (Temp - 25) * 5\r\n        let dataS = {\r\n          sample: clinicalIndex++,\r\n          data0: temp0,\r\n          data1: temp1\r\n        }\r\n        clinicalYuce.push(dataS)\r\n        if (clinicalIndex < 10) {\r\n          clinicalYuce.push({\r\n            sample: clinicalIndex++,\r\n            data0: temp0,\r\n            data1: temp1\r\n          })\r\n        }\r\n        this.setState({\r\n          Temp,\r\n          isMeasure: true,\r\n          // mearsurePart: 1,\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          progress,\r\n          endMeasure: false,\r\n          initFlog: true,\r\n          isEarMeasure: false\r\n        })\r\n\r\n      },\r\n      208: () => {  //耳温\r\n\r\n        lastConnectionTime = new Date();\r\n        isMeasurement = true\r\n        if (firstEar) {\r\n          firstEar = false\r\n          console.log('去获取探头id');\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n        }\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n        let Temp = temp0\r\n\r\n        console.log(Temp, temp0);\r\n        let progress = (Temp - 25) * 5\r\n        this.setState({\r\n          Temp,\r\n          isMeasure: false,\r\n          mearsurePart: 3,\r\n          measuerStatus: '测量中',\r\n          isconnected: true,\r\n          progress,\r\n          endMeasure: false,\r\n          initFlog: true,\r\n          isEarMeasure: true,\r\n          petVitalTypeId: '03'\r\n        })\r\n\r\n      },\r\n      193: () => {  //硬件发送结束命令\r\n        this.time193 && clearTimeout(this.time193)\r\n        this.time193 = setTimeout(() => {\r\n          endflog = true\r\n          countdownTimer && clearInterval(countdownTimer)\r\n          this.setState({\r\n            isMeasure: false,\r\n            endMeasure: true,\r\n            isEarMeasure: false\r\n          })\r\n          lastConnectionTime = new Date();\r\n          if (saveHistoryTime != null) {\r\n            clearTimeout(saveHistoryTime)\r\n          }\r\n\r\n          clinicalYuce = []\r\n          clinicalIndex = 0\r\n          firstEar = true\r\n          this.time193 && clearTimeout(this.time193)\r\n          console.log('-----------=======最终结果值========---------', this.state.Temp);\r\n          let { Temp, units } = this.state\r\n          let temp = units === '℉' ? (Temp * 1.8 + 32).toFixed(1) : `${Temp}`.toFixed(1)\r\n          if (this.state.devicesType === 'mella') {\r\n            ipcRenderer.send('keyboardWriting', temp)\r\n          }\r\n\r\n        }, 1000);\r\n\r\n\r\n      },\r\n      // 194: () => {       //硬件收到机器学习结果并停止测量，通知我们一声\r\n      //   endflog = true\r\n      //   countdownTimer && clearInterval(countdownTimer)\r\n      //   this.setState({\r\n      //     isMeasure: false,\r\n      //     endMeasure: true,\r\n      //     isEarMeasure: false\r\n      //   })\r\n      //   lastConnectionTime = new Date();\r\n      //   if (saveHistoryTime != null) {\r\n      //     clearTimeout(saveHistoryTime)\r\n      //   }\r\n\r\n      //   clinicalYuce = []\r\n      //   clinicalIndex = 0\r\n      //   isMeasurement = false\r\n      // },\r\n\r\n      192: () => {   //开始测量返回结果\r\n        switch (newArr[3]) {\r\n          case 90: console.log('有探头，开始测量的返回指令·'); break;\r\n          case 11: console.log('没有探头，开始测量的返回值'); break;\r\n\r\n        }\r\n      },\r\n      129: () => {      //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n        lastConnectionTime = new Date();\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          isEarMeasure: false\r\n\r\n        })\r\n      },\r\n      135: () => {          //硬件的一些基本信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间\r\n         * newArr[8] 背光时间\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let beep = hardSet.isBeep ? '11' : '00'\r\n        let unit = hardSet.isHua ? '00' : '01'\r\n\r\n        if (dataArr1[7] === hardSet.autoOff.number && dataArr1[8] === hardSet.backlightTimer.number &&\r\n          dataArr1[9] === beep && dataArr1[10] === unit) {\r\n        } else {\r\n          console.log('不相同，去发送命令');\r\n          let setArr = ['03', 'ed', '07', 'dd', hardSet.autoOff.number, hardSet.isBacklight ? hardSet.backlightTimer.number : '00', hardSet.isBeep ? '11' : '00', hardSet.isHua ? '00' : '01']\r\n          ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n        }\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n        })\r\n\r\n      },\r\n      238: () => {     //探头松动\r\n        console.log('探头松动');\r\n        this.setState({\r\n          isMeasure: false,\r\n          endMeasure: true\r\n        })\r\n        message.error('The probe is loose, please re-install and measure again', 5)\r\n        clinicalYuce = []\r\n        clinicalIndex = 0\r\n        countdownTimer && clearInterval(countdownTimer)\r\n      },\r\n      194: () => {       //硬件收到了机器学习预测的温度\r\n        this.setState({\r\n          isMeasure: false,\r\n          endMeasure: true,\r\n          APIFlog: true,\r\n          isEarMeasure: false\r\n        })\r\n        clinicalYuce = []\r\n        clinicalIndex = 0\r\n        endflog = true\r\n        countdownTimer && clearInterval(countdownTimer)\r\n      },\r\n      98: () => { //蓝牙连接断开\r\n        console.log('断开连接---断开连接---断开连接---断开连接---断开连接---断开连接');\r\n        firstEar = true\r\n        console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 1000) {\r\n          return\r\n        }\r\n\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let countdown = hardSet.is15 ? 15 : 30\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      },\r\n      97: () => {       //蓝牙连接\r\n        console.log('连接成功---连接成功---连接成功---连接成功---连接成功---连接成功');\r\n        // disconnectedNum = 0\r\n        // lastConnectionTime = new Date();\r\n        //  disconnectedNum = 0\r\n        // lastConnectionTime = new Date();\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true,\r\n          isEarMeasure: false\r\n\r\n        })\r\n        is97Time = new Date()\r\n      },\r\n      177: () => {         //探头id\r\n        let dataArr1 = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n\r\n\r\n        let id = ''\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i]\r\n\r\n        }\r\n        console.log(id, dataArr1[7]);\r\n\r\n        this.setState({\r\n          probeID: id,\r\n          petVitalTypeId: dataArr1[7]\r\n        })\r\n        if (dataArr1[7] === '01') {\r\n          this.setState({\r\n            mearsurePart: 1\r\n          })\r\n        } else if (dataArr1[7] === '02') {\r\n          this.setState({\r\n            mearsurePart: 2\r\n          })\r\n        } else if (dataArr1[7] === '03') {\r\n          this.setState({\r\n            mearsurePart: 3\r\n          })\r\n        }\r\n\r\n\r\n\r\n      },\r\n      7: () => {  //发什么收什么，需要去重新插拔底座\r\n        console.log('重新插拔底座');\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true\r\n          })\r\n        }\r\n      },\r\n      99: () => { //体脂称的广播信息\r\n        function getVal(shi, xiaoshuo) {\r\n\r\n          if (shi.length < 2) {\r\n            shi = `0${shi}`\r\n          }\r\n          if (xiaoshuo.length < 2) {\r\n            xiaoshuo = `0${xiaoshuo}`\r\n          }\r\n          return `0x${shi}${xiaoshuo}`\r\n        }\r\n\r\n\r\n        let weight = getVal((dataArr1[3]).toString(16), (dataArr1[4]).toString(16))\r\n        let impedance = getVal((dataArr1[5]).toString(16), (dataArr1[6]).toString(16))\r\n        let sendWeight = null\r\n        try {\r\n          sendWeight = parseInt(weight) / 100\r\n          weight = parseInt(weight) / 100 * 2.2046\r\n          if (impedance) {\r\n            impedance = parseInt(impedance)\r\n          }\r\n          weight = weight.toFixed(1)\r\n\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n\r\n        if (weight) {\r\n          // console.log(sameBiggieNum, keyboardBiggieFlog);\r\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n            sameBiggieNum++\r\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n              console.log('键盘写入');\r\n              let { units, sendWeight, biggieDate } = this.state\r\n\r\n              let weight = units === '℃' ? sendWeight : biggieDate\r\n              ipcRenderer.send('keyboardWriting', weight)\r\n            }\r\n\r\n          } else {\r\n            sameBiggieNum = 0\r\n            keyboardBiggieFlog = false\r\n          }\r\n\r\n          this.setState({\r\n            biggieDate: weight,\r\n            impedance,\r\n            sendWeight,\r\n            isHaveBigieDate: true\r\n          })\r\n        }\r\n\r\n      },\r\n      100: () => {//蓝牙软尺广播的数据\r\n        let confirmBtn = newArr[6]    //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\r\n        let rulerUnitNum = newArr[11] //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\r\n        let newVal = null             //为测量数值，和单位匹配对应\r\n        const ITEMINDEX = 6\r\n\r\n        //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n        let num1 = dataArr1[7]\r\n        let num2 = dataArr1[8]\r\n        let num = getVal(num1, num2)\r\n        try {\r\n          newVal = (parseInt(num) / 100)\r\n          if (newVal < 3) {\r\n            newVal = 0\r\n          }\r\n\r\n          if (rulerUnitNum >= 80) {\r\n            newVal = (newVal * 0.3937).toFixed(2)\r\n\r\n          } else {\r\n            newVal = newVal.toFixed(1)\r\n          }\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n\r\n\r\n        function getVal(shi, xiaoshuo) {\r\n\r\n          if (shi.length < 2) {\r\n            shi = `0${shi}`\r\n          }\r\n          if (xiaoshuo.length < 2) {\r\n            xiaoshuo = `0${xiaoshuo}`\r\n          }\r\n          return `0x${shi}${xiaoshuo}`\r\n        }\r\n\r\n        //点击了确认按钮\r\n        let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength\r\n        } = this.state\r\n        if (confirmBtn === 161) {\r\n          if (!nextFlog) {\r\n            nextFlog = true\r\n\r\n\r\n            let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n            if (itemIndex === ITEMINDEX) {\r\n              // this._next()\r\n              return\r\n            }\r\n            let newitemIndex = itemIndex >= ITEMINDEX ? ITEMINDEX : itemIndex + 1\r\n            let textValue = ''\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n              default:\r\n                break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) > 0) {\r\n\r\n              switch (itemIndex) {\r\n                case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, units }); break;\r\n                default: this.setState({\r\n                  itemIndex: newitemIndex\r\n                  , units\r\n                })\r\n                  break;\r\n              }\r\n            } else {\r\n              this.setState({\r\n                itemIndex: newitemIndex,\r\n                units\r\n              })\r\n            }\r\n\r\n\r\n\r\n          }\r\n        } else if (confirmBtn === 160) {\r\n          nextFlog = false\r\n          let textValue = ''\r\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n\r\n          switch (itemIndex) {\r\n            case 1: textValue = l2rarmDistance; break;\r\n            case 2: textValue = h2tLength; break;\r\n            case 3: textValue = torsoLength; break;\r\n            case 4: textValue = neckCircumference; break;\r\n            case 5: textValue = upperTorsoCircumference; break;\r\n            case 6: textValue = lowerTorsoCircumference; break;\r\n          }\r\n\r\n          if (newVal !== textValue && parseInt(newVal) > 0) {\r\n            if (!avoidRepetition) {\r\n              avoidRepetition = true\r\n              this.avoidRepetition = setTimeout(() => {\r\n                avoidRepetition = false\r\n                this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n              }, 100);\r\n              switch (itemIndex) {\r\n                case 1: this.setState({ l2rarmDistance: newVal, units }); break;\r\n                case 2: this.setState({ h2tLength: newVal, units }); break;\r\n                case 3: this.setState({ torsoLength: newVal, units }); break;\r\n                case 4: this.setState({ neckCircumference: newVal, units }); break;\r\n                case 5: this.setState({ upperTorsoCircumference: newVal, units }); break;\r\n                case 6: this.setState({ lowerTorsoCircumference: newVal, units }); break;\r\n                default:\r\n                  break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n      },\r\n      255: () => {\r\n        // console.log(dataArr1);\r\n        let length = newArr.length\r\n        let frameLength = newArr[1]   //帧长\r\n        let itemLength = newArr[3] + 1  //数据位的长度   13\r\n        let dataIndex = 0\r\n\r\n        let bluName = ''\r\n        let bluData = []\r\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\r\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\r\n          let itemData = []\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5])\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = ''\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16)\r\n                str += String.fromCharCode(item)\r\n\r\n              }\r\n              bluName = str\r\n              // console.log('--蓝牙名称:', bluName);\r\n\r\n\r\n              break;\r\n\r\n            case 255:\r\n              bluData = itemData\r\n              break;\r\n            case 7: console.log('---UUID'); break;\r\n            case 239:\r\n              // console.log('---mac地址');\r\n              break;\r\n\r\n            case 3: console.log('----尺子的,不知道什么用'); break;\r\n\r\n            default: console.log('直接跳出循环'); return;\r\n          }\r\n          dataIndex = itemLength\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\r\n        }\r\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n\r\n        if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\r\n\r\n          let weight = `0x${bluData[10]}${bluData[11]}`\r\n          let impedance = `0x${bluData[12]}${bluData[13]}`\r\n          let sendWeight = null\r\n          try {\r\n            //sendWeight的值单位是kg,weight的值为lb(磅)\r\n            sendWeight = parseInt(weight) / 100\r\n            weight = parseInt(weight) / 100 * 2.2046\r\n            if (impedance) {\r\n              impedance = parseInt(impedance)\r\n            }\r\n            weight = weight.toFixed(1)\r\n\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n          // console.log('----秤', weight, impedance);\r\n\r\n          if (weight) {\r\n            // console.log(sameBiggieNum, keyboardBiggieFlog);\r\n            if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n              sameBiggieNum++\r\n              if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n                console.log('键盘写入');\r\n                let { units, sendWeight, biggieDate } = this.state\r\n\r\n                let weight = units === '℃' ? sendWeight : biggieDate\r\n                ipcRenderer.send('keyboardWriting', weight)\r\n              }\r\n\r\n            } else {\r\n              sameBiggieNum = 0\r\n              keyboardBiggieFlog = false\r\n            }\r\n\r\n            this.setState({\r\n              biggieDate: weight,\r\n              impedance,\r\n              sendWeight,\r\n              isHaveBigieDate: true\r\n            })\r\n          }\r\n        } else if (bluName.indexOf('Tape') !== -1) {\r\n\r\n          let confirmBtn = parseInt(bluData[8], 16)     //十进制数字，值为160代表尺子拉动，值为161代表按了尺子确认按钮\r\n          let rulerUnitNum = parseInt(bluData[13], 16) //十进制数字，值大于等于80代表单位为in，小于80代表单位为cm\r\n          let newVal = null             //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 7\r\n          let units = rulerUnitNum >= 80 ? 'in' : 'cm'\r\n\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9]\r\n          let num2 = bluData[10]\r\n          let num = getVal(num1, num2)\r\n          try {\r\n            newVal = (parseInt(num) / 100)\r\n            if (newVal < 3) {\r\n              newVal = 0\r\n            }\r\n\r\n            if (rulerUnitNum >= 80) {\r\n              newVal = (newVal * 0.3937).toFixed(2)\r\n\r\n            } else {\r\n              newVal = newVal.toFixed(1)\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n\r\n            if (shi.length < 2) {\r\n              shi = `0${shi}`\r\n            }\r\n            if (xiaoshuo.length < 2) {\r\n              xiaoshuo = `0${xiaoshuo}`\r\n            }\r\n            return `0x${shi}${xiaoshuo}`\r\n          }\r\n\r\n          //点击了确认按钮\r\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n            h2tLength, torsoLength\r\n          } = this.state\r\n          if (confirmBtn === 161) {\r\n            if (!nextFlog) {\r\n              nextFlog = true\r\n\r\n              if (itemIndex === ITEMINDEX) {\r\n                this._updatePetAttributes()\r\n                return\r\n              }\r\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\r\n\r\n              let textValue = ''\r\n              switch (itemIndex) {\r\n                case 1: textValue = l2rarmDistance; break;\r\n                case 2: textValue = h2tLength; break;\r\n                case 3: textValue = torsoLength; break;\r\n                case 4: textValue = neckCircumference; break;\r\n                case 5: textValue = upperTorsoCircumference; break;\r\n                case 6: textValue = lowerTorsoCircumference; break;\r\n                default:\r\n                  break;\r\n              }\r\n\r\n              if (newVal !== textValue && parseInt(newVal) > 0) {\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  default: this.setState({\r\n                    itemIndex: newitemIndex\r\n                    , rulerUnit: units\r\n                  })\r\n                    break;\r\n                }\r\n              } else {\r\n                this.setState({\r\n                  itemIndex: newitemIndex,\r\n                  rulerUnit: units\r\n                })\r\n              }\r\n\r\n\r\n\r\n            }\r\n          } else if (confirmBtn === 160) {\r\n            nextFlog = false\r\n            let textValue = ''\r\n\r\n\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) > 0) {\r\n              if (!avoidRepetition) {\r\n                avoidRepetition = true\r\n                this.avoidRepetition = setTimeout(() => {\r\n                  avoidRepetition = false\r\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n                }, 100);\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n        } else if (bluName.indexOf('Mella Measure') !== -1 && this.state.devicesType === 'biggie') {\r\n          //255\r\n          let { itemIndex, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n            h2tLength, torsoLength\r\n          } = this.state\r\n          // console.log('结束循环蓝牙名称', bluData)\r\n          let confirmBtn = bluData[8]     //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\r\n\r\n          let rulerUnitNum = parseInt(bluData[11], 16) //十进制数字，值等于11代表单位为in，00代表单位为cm\r\n          let newVal = null             //为测量数值，和单位匹配对应\r\n          const ITEMINDEX = 6\r\n          let units = rulerUnitNum === 0 ? 'cm' : 'in'\r\n\r\n\r\n          if (units !== this.state.rulerUnit) {\r\n            if (units === 'cm') {\r\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) * 2.54).toFixed(1)}` : ''\r\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) * 2.54).toFixed(1)}` : ''\r\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) * 2.54).toFixed(1)}` : ''\r\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) * 2.54).toFixed(1)}` : ''\r\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) * 2.54).toFixed(1)}` : ''\r\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) * 2.54).toFixed(1)}` : ''\r\n            } else {\r\n              l2rarmDistance = l2rarmDistance ? `${(parseFloat(l2rarmDistance) / 2.54).toFixed(2)}` : ''\r\n              neckCircumference = neckCircumference ? `${(parseFloat(neckCircumference) / 2.54).toFixed(2)}` : ''\r\n              upperTorsoCircumference = upperTorsoCircumference ? `${(parseFloat(upperTorsoCircumference) / 2.54).toFixed(2)}` : ''\r\n              lowerTorsoCircumference = lowerTorsoCircumference ? `${(parseFloat(lowerTorsoCircumference) / 2.54).toFixed(2)}` : ''\r\n              h2tLength = h2tLength ? `${(parseFloat(h2tLength) / 2.54).toFixed(2)}` : ''\r\n              torsoLength = torsoLength ? `${(parseFloat(torsoLength) / 2.54).toFixed(2)}` : ''\r\n            }\r\n\r\n            this.setState({\r\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n              h2tLength, torsoLength,\r\n              rulerUnit: units\r\n            })\r\n\r\n\r\n          }\r\n\r\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\r\n          let num1 = bluData[9]\r\n          let num2 = bluData[10]\r\n          let num = getVal(num1, num2)\r\n          try {\r\n            newVal = parseFloat(num)\r\n            if (rulerUnitNum === 17) {\r\n              newVal = newVal.toFixed(2)\r\n\r\n            } else {\r\n              newVal = newVal.toFixed(1)\r\n            }\r\n          } catch (error) {\r\n            console.log(error);\r\n          }\r\n\r\n\r\n\r\n          function getVal(shi, xiaoshuo) {\r\n            let num1 = parseInt(shi, 16)\r\n            let num2 = parseInt(xiaoshuo, 16)\r\n\r\n            return `${num1}.${num2}`\r\n          }\r\n\r\n          //点击了确认按钮\r\n\r\n          if (confirmBtn[1] === '2' && confirmBtn[0] !== confirmBtnFlog) {\r\n            confirmBtnFlog = confirmBtn[0]\r\n            if (!nextFlog) {\r\n              nextFlog = true\r\n\r\n              if (itemIndex === ITEMINDEX) {\r\n                this._updatePetAttributes()\r\n                return\r\n              }\r\n              let newitemIndex = itemIndex >= ITEMINDEX ? 1 : itemIndex + 1\r\n\r\n              let textValue = ''\r\n              try {\r\n                switch (itemIndex) {\r\n                  case 1: textValue = l2rarmDistance; this.input2 && this.input2.focus(); break;\r\n                  case 2: textValue = h2tLength; this.input3 && this.input3.focus(); break;\r\n                  case 3: textValue = torsoLength; this.input4 && this.input4.focus(); break;\r\n                  case 4: textValue = neckCircumference; this.input5 && this.input5.focus(); break;\r\n                  case 5: textValue = upperTorsoCircumference; this.input6 && this.input6.focus(); break;\r\n                  case 6: textValue = lowerTorsoCircumference; this.input7 && this.input7.focus(); break;\r\n                  default:\r\n                    break;\r\n                }\r\n              } catch (error) {\r\n                console.log(error);\r\n              }\r\n\r\n\r\n\r\n\r\n              if (newVal !== textValue && parseInt(newVal) >= 0) {\r\n                switch (itemIndex) {\r\n                  case 1: this.setState({ l2rarmDistance: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 2: this.setState({ h2tLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 3: this.setState({ torsoLength: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 4: this.setState({ neckCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  // case 5: this.setState({ bodyWidth: newVal, itemIndex: newitemIndex, units }); break;\r\n                  case 5: this.setState({ upperTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  case 6: this.setState({ lowerTorsoCircumference: newVal, itemIndex: newitemIndex, rulerUnit: units }); break;\r\n                  default: this.setState({\r\n                    itemIndex: newitemIndex\r\n                    , rulerUnit: units\r\n                  })\r\n                    break;\r\n                }\r\n              } else {\r\n                this.setState({\r\n                  itemIndex: newitemIndex,\r\n                  rulerUnit: units\r\n                })\r\n              }\r\n\r\n\r\n\r\n            }\r\n          } else if (confirmBtn === '01') {\r\n            nextFlog = false\r\n            let textValue = ''\r\n\r\n\r\n            switch (itemIndex) {\r\n              case 1: textValue = l2rarmDistance; break;\r\n              case 2: textValue = h2tLength; break;\r\n              case 3: textValue = torsoLength; break;\r\n              case 4: textValue = neckCircumference; break;\r\n              case 5: textValue = upperTorsoCircumference; break;\r\n              case 6: textValue = lowerTorsoCircumference; break;\r\n            }\r\n\r\n            if (newVal !== textValue && parseInt(newVal) >= 0) {\r\n              if (!avoidRepetition) {\r\n                avoidRepetition = true\r\n                this.avoidRepetition = setTimeout(() => {\r\n                  avoidRepetition = false\r\n                  this.avoidRepetition && clearTimeout(this.avoidRepetition)\r\n                }, 100);\r\n                try {\r\n                  switch (itemIndex) {\r\n                    case 1: this.setState({ l2rarmDistance: newVal, rulerUnit: units }); this.input1 && this.input1.focus(); break;\r\n                    case 2: this.setState({ h2tLength: newVal, rulerUnit: units }); this.input2 && this.input2.focus(); break;\r\n                    case 3: this.setState({ torsoLength: newVal, rulerUnit: units }); this.input3 && this.input3.focus(); break;\r\n                    case 4: this.setState({ neckCircumference: newVal, rulerUnit: units }); this.input4 && this.input4.focus(); break;\r\n                    case 5: this.setState({ upperTorsoCircumference: newVal, rulerUnit: units }); this.input5 && this.input5.focus(); break;\r\n                    case 6: this.setState({ lowerTorsoCircumference: newVal, rulerUnit: units }); this.input6 && this.input6.focus(); break;\r\n                    default:\r\n                      break;\r\n                  }\r\n                } catch (error) {\r\n                  console.log(error);\r\n                }\r\n\r\n              }\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n        // if (bluName.indexOf('C19') !== -1 && bluData.length > 10) {\r\n        // console.log(bluData);\r\n\r\n        else if (bluName.indexOf('Biggie') !== -1 && this.state.devicesType === 'biggie' && bluData.length > 10) {\r\n          function getVal(shi) {\r\n            if (`${shi}`.length < 2) {\r\n              return `0${shi}`\r\n            }\r\n            return `${shi}`\r\n\r\n          }\r\n\r\n          let newArr = bluData\r\n\r\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(newArr[10].toString(16))}`\r\n          weight = parseInt(weight, 16)\r\n\r\n\r\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(newArr[13].toString(16))}`\r\n          impedance = parseInt(impedance, 16)\r\n\r\n          let arr11 = getVal(newArr[11].toString(16))\r\n\r\n          weight = weight / Math.pow(10, parseInt(arr11[0]))\r\n          // console.log('重量为', weight);\r\n          let weightUnits = 'kg'\r\n          let sendWeight, biggieDate\r\n          switch (arr11[1]) {\r\n            case '0':\r\n              weightUnits = 'kg';\r\n              sendWeight = weight;\r\n              biggieDate = (weight * 2.2046).toFixed(2)\r\n              break;\r\n            case '1':\r\n              weightUnits = 'lb';\r\n              sendWeight = weight;\r\n              biggieDate = (weight * 2).toFixed(2)\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n\r\n          // if (`${getVal(newArr[8].toString(16))}` === '03') {\r\n          //   //进入了结束测量\r\n          //   if (!biggieSave) {\r\n          //     //第一条测量完成指令\r\n          //     console.log('键盘写入');\r\n          //     let { units, } = this.state\r\n\r\n          //     let weight = units === '℃' ? sendWeight : biggieDate\r\n          //     ipcRenderer.send('keyboardWriting', weight)\r\n\r\n          //   }\r\n          //   biggieSave = true\r\n          // } else {\r\n          //   biggieSave = false\r\n          // }\r\n          if (weight === this.state.biggieDate && this.state.devicesType === 'biggie') {\r\n\r\n            sameBiggieNum++\r\n            if (!keyboardBiggieFlog && sameBiggieNum === 6) {\r\n              console.log('键盘写入');\r\n              let { units, } = this.state\r\n\r\n              let weight = units === '℃' ? sendWeight : biggieDate\r\n              ipcRenderer.send('keyboardWriting', weight)\r\n            }\r\n\r\n          } else {\r\n            sameBiggieNum = 0\r\n            keyboardBiggieFlog = false\r\n          }\r\n\r\n\r\n\r\n          if (weight >= 0) {\r\n\r\n            this.setState({\r\n              biggieDate,\r\n              impedance,\r\n              sendWeight,\r\n              isHaveBigieDate: true\r\n            })\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n  }\r\n  testCheck = (arr) => {\r\n    if (arr.length < 7) {\r\n      return false\r\n    }\r\n    let i = 7\r\n    let checkFloag = arr[i];\r\n\r\n\r\n    for (i = 8; i < arr.length - 2; i++) {\r\n      checkFloag = checkFloag ^ arr[i];\r\n    }\r\n    return checkFloag;\r\n  }\r\n  getMac = (arr) => {\r\n    // console.log(arr);\r\n    let str = arr[1].toString(16)\r\n    if (str.length === 1) {\r\n      str = '0' + str\r\n    }\r\n    for (let i = 2; i < 7; i++) {\r\n\r\n      let item = arr[i].toString(16)\r\n      if (item.length === 1) {\r\n        item = '0' + item\r\n      }\r\n      str += `:${item}`\r\n      // }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return str\r\n  }\r\n  //15秒的预测程序\r\n  _time15 = (val) => {\r\n\r\n    let isDog = true\r\n    let { petSpeciesBreedId } = this.state\r\n    if (petSpeciesBreedId < 136) {\r\n      isDog = false\r\n    }\r\n    let parame = {\r\n      ambient_temperature: 25,\r\n      data: clinicalYuce,\r\n      deviceId: '11111111111111111111111111',\r\n\r\n      sampling_rate: '104ms'\r\n    }\r\n\r\n    console.log('预测传入数据', parame);\r\n\r\n    let url = !isDog ? '/clinical/dogPredict' : '/clinical/catPredict'\r\n    console.log(url)\r\n    console.log('预测发送只', parame);\r\n\r\n    fetchRequest(url, 'POST', parame)\r\n      .then((res) => {\r\n        // predictionFlog = false\r\n        if (res.message === 'Success') {\r\n          console.log('预测返回值：', res);\r\n\r\n          let prediction = res.result.prediction.toFixed(2)\r\n          temp15 = parseFloat(prediction)\r\n\r\n        } else {\r\n          console.log('system error')\r\n        }\r\n\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(`:${err}`)\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  //预测程序\r\n  _prediction = (val) => {\r\n\r\n    let isDog = true\r\n    let { petSpeciesBreedId } = this.state\r\n    if (petSpeciesBreedId < 136) {\r\n      isDog = false\r\n    }\r\n    let parame = {\r\n      // ambient_temperature: this.state.huanwen,\r\n      ambient_temperature: 17,\r\n\r\n      data: clinicalYuce,\r\n      deviceId: `${this.state.probeId}`,\r\n      // deviceId: '11111111111111111111111111',\r\n\r\n      sampling_rate: '135ms'\r\n    }\r\n\r\n    console.log('预测传入数据', parame);\r\n\r\n    clinicalYuce = []\r\n    clinicalIndex = 0\r\n\r\n    let url = isDog ? '/clinical/dogv12Predict' : '/clinical/catv12Predict'\r\n    console.log(url, petSpeciesBreedId)\r\n    console.log('预测发送只', parame);\r\n\r\n    fetchRequest(url, 'POST', parame)\r\n      .then((res) => {\r\n        console.log('预测结果：', res);\r\n        // predictionFlog = false\r\n        if (res.message === 'Success') {\r\n          console.log('预测返回值：', res);\r\n\r\n          let prediction = res.result.prediction.toFixed(2)\r\n          console.log(prediction);\r\n\r\n\r\n          let tempArr = prediction.split('.')\r\n          let intNum = tempArr[0]\r\n          let flotNum = tempArr[1]\r\n          if (intNum.length < 2) {\r\n            intNum = '0' + intNum\r\n          }\r\n          if (flotNum.length < 2) {\r\n            flotNum = '0' + flotNum\r\n          }\r\n          endflog = false\r\n\r\n\r\n          //1.这里先注释掉,后面忘了取消注释\r\n          const timeID1 = setInterval(() => {\r\n            if (endflog) {\r\n              let Temp = parseFloat(prediction)\r\n              let progress = (Temp - 25) * 5\r\n              this.setState({\r\n                Temp,\r\n                progress\r\n              })\r\n              endflog = false\r\n\r\n              timeID1 && clearInterval(timeID1)\r\n            } else {\r\n              const timeID = setTimeout(() => {\r\n                ipcRenderer.send('usbdata', { command: '42', arr: [intNum, flotNum] })\r\n                timeID && clearTimeout(timeID)\r\n              }, 10)\r\n\r\n            }\r\n          }, 200)\r\n\r\n\r\n\r\n        } else {\r\n          const timeID = setTimeout(() => {\r\n            // this.sendData('41', [])\r\n            ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n            clearTimeout(timeID)\r\n          }, 10)\r\n          console.log('system error')\r\n        }\r\n\r\n\r\n      })\r\n      .catch((err) => {\r\n        // predictionFlog = false\r\n        console.log(err);\r\n        const timeID = setTimeout(() => {\r\n          // this.sendData('41', [])\r\n          ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n\r\n          clearTimeout(timeID)\r\n        }, 10)\r\n        console.log(`:${err}`)\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _mearsurePort = () => {\r\n    switch (this.state.devicesType) {\r\n      case 'mella':\r\n        switch (this.state.mearsurePart) {\r\n          case 1: return (\r\n            <div >\r\n              <div className='part'>\r\n                Axillary\r\n                <img src={ye} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n          case 2: return (\r\n            <div >\r\n              <div className='part'>\r\n                Rectal\r\n                <img src={gang} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n          default: return (\r\n            <div >\r\n              <div className='part'>\r\n                Ear\r\n                <img src={er} alt=\"\" width=\"50px\" />\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n      case 'biggie':\r\n        return (\r\n          <div className='part'>\r\n            Scale\r\n            <img src={scale} alt=\"\" width=\"50px\" />\r\n\r\n          </div>\r\n        )\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n  _getHistory = () => {\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamByPetId/${this.state.petId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          console.log('-------', datas);\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            let data = datas[i]\r\n            let { petId, examId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime,\r\n              modifiedTime, fat, weight } = data\r\n            // console.log(createTime);\r\n            let time = null\r\n            if (storage.vetspireOrEzyvet === '2') {\r\n              time = modifiedTime\r\n              if (modifiedTime === '' || modifiedTime === null) {\r\n                time = createTime\r\n              }\r\n            } else {\r\n              time = createTime\r\n            }\r\n            let json = {\r\n              time,\r\n              Temp: temperature,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              roomTemperature,\r\n              bloodPressure,\r\n              petId,\r\n              userId,\r\n              fat, weight\r\n            }\r\n            // console.log(json);\r\n            historys.push(json)\r\n\r\n\r\n          }\r\n          console.log('----', historys);\r\n          let historyData = []\r\n          for (let i = 0; i < historys.length; i++) {\r\n            let history = historys[i]\r\n            let { bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId, examId, time, fat, weight } = history\r\n            let placement = history.placement\r\n            if (placement === null || placement === '') {\r\n              placement = 1\r\n            }\r\n            let str = {\r\n              date: moment(time).format('MMM DD'),\r\n              time: moment(time).format('hh:mm A'),\r\n              temp: history.Temp,\r\n              placement,\r\n              note: history.note,\r\n              historyId: history.historyId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId,\r\n              key: examId,\r\n              fat, weight\r\n            }\r\n            historyData.push(str)\r\n          }\r\n          console.log('historyData:', historyData);\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n\r\n\r\n  _getPetInfo = (value) => {\r\n    let datas = null\r\n\r\n    datas = {\r\n      patientId: this.state.patientId,\r\n      org: this.state.org\r\n    }\r\n\r\n\r\n\r\n    console.log('入参：', datas);\r\n    fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n      .then(res => {\r\n        console.log('宠物信息', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          //有宠物，进入1\r\n          let { petId, petSpeciesBreedId } = res.data[0]\r\n          console.log('------------', petId);\r\n          this.setState({\r\n            petId,\r\n            petSpeciesBreedId\r\n          }, () => {\r\n            console.log('去获取历史记录');\r\n            this._getHistory()\r\n          })\r\n        } else {\r\n          //没有宠物，进入2\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n  _changeDeviceType = (val, e) => {\r\n    console.log(val, e)\r\n    this.setState({\r\n      devicesType: val\r\n    })\r\n\r\n    if (val === 'biggie' && this.state.isHaveBigieDate) {\r\n      this.setState({\r\n        isHaveBigieDate: false\r\n      })\r\n      keyboardBiggieFlog = false\r\n      sameBiggieNum = 0\r\n    }\r\n\r\n    temporaryStorage.devicesType = val\r\n\r\n\r\n\r\n\r\n  }\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true,  //\r\n      // addpatient_description: '',\r\n      // addpatient_petName: '',\r\n      // addpatient_species: 1\r\n    })\r\n    if (this.state.addpatient_patientId === '') {\r\n      this.setState({\r\n        spin: false\r\n      })\r\n    } else {\r\n      let list = electronStore.get('doctorExam')\r\n\r\n      let searchData = []\r\n      let keyWord = this.state.addpatient_patientId\r\n      for (let i = 0; i < list.length; i++) {\r\n        let patientId = list[i].patientId\r\n        if (`${patientId}` === keyWord) {\r\n          searchData.push(list[i])\r\n        }\r\n      }\r\n      console.log('搜索到的宠物为', searchData);\r\n      if (searchData.length > 0) {\r\n        let data = searchData[0]\r\n        let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n          h2tLength, torsoLength } = data\r\n\r\n        l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n        neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n        upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n        lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n        h2tLength = h2tLength ? `${h2tLength}` : ''\r\n        torsoLength = torsoLength ? `${torsoLength}` : ''\r\n        let weight = data.weight\r\n        if (weight && weight !== 'unknown') {\r\n          weight = parseFloat(weight).toFixed(1)\r\n        }\r\n        let breedName = data.breed\r\n        if (!breedName) {\r\n          breedName = 'unknown'\r\n        }\r\n        switch (breedName) {\r\n          case 'defaultdog':\r\n            breedName = 'Dog'\r\n\r\n            break;\r\n          case 'defaultother':\r\n            breedName = 'Other'\r\n\r\n            break;\r\n          case 'defaultcat':\r\n            breedName = 'Cat'\r\n            break;\r\n\r\n        }\r\n        console.log('-----------', weight);\r\n        this.setState({\r\n          petName: data.petName,\r\n          owner: data.owner,\r\n          breedName,\r\n          weight,\r\n          age: data.age,\r\n          patientId: data.patientId,\r\n          petId: data.petId,\r\n          itemIndex: 1,\r\n          l2rarmDistance,\r\n          neckCircumference,\r\n          upperTorsoCircumference,\r\n          lowerTorsoCircumference,\r\n          h2tLength,\r\n          torsoLength,\r\n          isWalkIn: false\r\n        }, () => {\r\n          this._getHistory()\r\n        })\r\n      } else {\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  selectWZ = (val) => {\r\n    switch (val) {\r\n      case 'dog':\r\n        this.setState({\r\n          catImg: cat1,\r\n          dogImg: redDog1,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n        })\r\n\r\n        break;\r\n\r\n      case 'cat':\r\n        this.setState({\r\n          catImg: redCat1,\r\n          dogImg: dog1,\r\n          otherImg: other,\r\n          selectWZ: val,\r\n        })\r\n\r\n        break;\r\n\r\n      case 'other':\r\n        this.setState({\r\n          catImg: cat1,\r\n          dogImg: dog1,\r\n          otherImg: redother,\r\n          selectWZ: val,\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  _topLeft = () => {\r\n    let { patientId, breedName, isMix, age, petName, owner, weight, url, speciesId, petId, isWalkIn, spin, dogImg, catImg, otherImg, addpatient_patientId } = this.state\r\n    if (isWalkIn) {\r\n\r\n      return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\r\n            >\r\n\r\n              <div className=\"ltitle\" style={{ marginLeft: px(30) }}>\r\n                <p > {`Walk-In Exam`}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"walkPetinfo\"\r\n              style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(30), }}\r\n            >\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(10), }}\r\n              >\r\n                <p style={{ width: '80px', }}>Patient ID:</p>\r\n                <Input\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={addpatient_patientId}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    this.setState({\r\n                      addpatient_patientId: item.target.value.replace(/\\s/g, \"\")\r\n                    })\r\n                  }}\r\n                  onKeyDown={(e) => {\r\n                    // console.log('------', e);\r\n                    if (e.keyCode === 13) {\r\n                      this._refresh()\r\n                    }\r\n                  }}\r\n                />\r\n                <SyncOutlined className='refresh'\r\n                  style={{ fontSize: px(25) }}\r\n                  onClick={this._refresh} spin={spin} />\r\n              </div>\r\n\r\n              <div className='newPet'>\r\n                <div className=\"patirntID\"\r\n                  style={{ marginTop: px(10) }}\r\n                >\r\n                  <p style={{ width: '80px' }}>Pet Name*:</p>\r\n                  <Input\r\n                    // style={{ border: 'none', outline: 'medium' }}\r\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                    value={this.state.addpatient_petName}\r\n                    bordered={false}\r\n                    onChange={(item) => {\r\n                      // console.log(item);\r\n                      this.setState({\r\n                        addpatient_petName: item.target.value\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"patirntID\"\r\n                  style={{ marginTop: px(10) }}\r\n                >\r\n                  <p style={{ width: '80px' }}>Description:</p>\r\n                  <Input\r\n                    // style={{ border: 'none', outline: 'medium' }}\r\n                    style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                    value={this.state.addpatient_description}\r\n                    bordered={false}\r\n                    onChange={(item) => {\r\n                      // console.log(item);\r\n                      this.setState({\r\n                        addpatient_description: item.target.value\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"species\" style={{ marginBottom: px(20), height: px(70), marginTop: px(10) }}>\r\n\r\n                  <ul>\r\n                    <li >\r\n                      <div className='speciesChild' >\r\n                        <div className='dog'\r\n\r\n                          onClick={() => { this.selectWZ('dog') }}>\r\n                          <img src={dogImg} alt=\"\" style={{ width: px(40) }} />\r\n                        </div>\r\n                        Dog\r\n                      </div>\r\n                    </li>\r\n                    <li>\r\n                      <div className='speciesChild' >\r\n                        <div className='dog' onClick={() => { this.selectWZ('cat') }} >\r\n                          <img src={catImg} alt=\"\" style={{ height: px(40) }} />\r\n                        </div>\r\n                        Cat\r\n                      </div>\r\n                    </li>\r\n                    <li >\r\n                      <div className='speciesChild' >\r\n                        <div className='dog' onClick={() => { this.selectWZ('other') }} >\r\n                          <img src={otherImg} alt=\"\" style={{ width: px(40) }} />\r\n                        </div>\r\n                        Other\r\n                      </div>\r\n                    </li>\r\n\r\n                  </ul>\r\n                </div>\r\n\r\n\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n\r\n          <div className=\"deviceInfo\">\r\n            <div className=\"heard1\"\r\n              style={{ height: px(40), marginTop: px(10), paddingRight: px(10), paddingLeft: px(30) }}\r\n            >\r\n              <span>Device Info</span>\r\n            </div>\r\n            <div className=\"devicesBody\"\r\n              style={{ marginTop: mTop(23) }}\r\n            >\r\n              <div className=\"devices\"\r\n                style={{ paddingLeft: px(31) }}\r\n              >\r\n                <p>Device:</p>\r\n                <Select\r\n                  value={this.state.devicesType}\r\n                  style={{ width: 120 }}\r\n                  size={'small'}\r\n                  onChange={this._changeDeviceType}\r\n                >\r\n                  <Option value=\"mella\">Mella</Option>\r\n                  <Option value=\"biggie\">Biggie</Option>\r\n                </Select>\r\n              </div>\r\n              {this._mearsurePort()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n    }\r\n\r\n    if (breedName === null) {\r\n      breedName = ''\r\n    }\r\n    let mix = ''\r\n    if (isMix === true) {\r\n      mix = 'Mix'\r\n    }\r\n    let title = ''\r\n    if (petName && `${petName}`.toLowerCase() !== 'unknown') {\r\n      title += `${petName}`\r\n    }\r\n    if (petName && `${petName}`.toLowerCase() !== 'unknown' && patientId && `${patientId}`.toLowerCase() !== 'unknown') {\r\n      title += `, \\xa0 `\r\n    }\r\n    if (patientId && `${patientId}`.toLowerCase() !== 'unknown') {\r\n      title += `ID: ${patientId}`\r\n    }\r\n\r\n    let wei = (weight && `${weight}`.toLowerCase() !== 'unknown') ? `${weight}` : ''\r\n    if (wei && wei.indexOf(`kg`) === -1) {\r\n      wei += 'kg'\r\n    }\r\n    let image = `url(${other})`\r\n    if (url) {\r\n      image = `url(${url}?download=0&width=80)`\r\n    } else {\r\n      switch (speciesId) {\r\n        case 1: image = `url(${cat})`; break;\r\n        case 2: image = `url(${dog})`; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"l\">\r\n        <div className=\"petinfo\">\r\n          <div className=\"heard\"\r\n            style={{ height: px(50), marginTop: px(10), fontSize: px(24) }}\r\n          >\r\n            <div className=\"avaterBox\">\r\n              <div className='avatar'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  // marginRight: px(20),\r\n                  backgroundImage: image,\r\n                  marginLeft: px(20)\r\n\r\n\r\n                }}\r\n                onClick={() => {\r\n                  storage.goEditPet = 'nomalmeasurement'\r\n                  this.props.history.push({ pathname: '/page9', participate: { patientId, petName, petId } })\r\n                }}\r\n              >\r\n                {(storage.identity === '3') &&\r\n                  <img className='edit' src={edit} alt=\"\" width='18px' />}\r\n              </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"ltitle\">\r\n              <p > {title}</p>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n          <div className=\"info\"\r\n            style={{ marginTop: mTop(10), marginBottom: mTop(10), fontSize: px(16), paddingLeft: px(60) }}\r\n          >\r\n            <p>Owner: {(owner && `${owner}`.toLowerCase() !== 'unknown') ? `${owner}` : ''}</p>\r\n            <p>Breed: {(breedName && `${breedName}`.toLowerCase() !== 'unknown') ? `${breedName}  ${mix}` : ''}</p>\r\n            <p>Age: {((age && `${age}`.toLowerCase() !== 'unknown') || age === 0) ? `${age} yrs` : ''} </p>\r\n            <p>Weight: {wei}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"deviceInfo\">\r\n          <div className=\"heard1\"\r\n            style={{ height: mTop(40), marginTop: mTop(10), paddingRight: px(10), paddingLeft: px(30) }}\r\n          >\r\n            <span>Device Info</span>\r\n          </div>\r\n          <div className=\"devicesBody\"\r\n            style={{ marginTop: mTop(23) }}\r\n          >\r\n            <div className=\"devices\"\r\n              style={{ paddingLeft: px(31) }}\r\n            >\r\n              <p>Device:</p>\r\n              <Select\r\n                value={this.state.devicesType}\r\n                style={{ width: 120 }}\r\n                size={'small'}\r\n                onChange={this._changeDeviceType}\r\n              >\r\n                <Option value=\"mella\">Mella</Option>\r\n                <Option value=\"biggie\">Biggie</Option>\r\n              </Select>\r\n            </div>\r\n            {this._mearsurePort()}\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n\r\n\r\n\r\n  }\r\n  handleChange = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      furLength: index\r\n    })\r\n  };\r\n  handleChange1 = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      bodyType: index\r\n    })\r\n  };\r\n\r\n  _foot = () => {\r\n\r\n    // console.log('所有的历史记录：', historyData);\r\n\r\n\r\n\r\n    let lbgc = '', rbgc = ''\r\n    if (this.state.isNotes) {\r\n      lbgc = 'rgba(25,173,228,0.5)'; rbgc = 'rgba(105,201,237,1)'\r\n    } else {\r\n      lbgc = 'rgba(105,201,237,1)'; rbgc = 'rgba(25,173,228,0.5)'\r\n    }\r\n\r\n    return (\r\n      <div className=\"clinical_foot\">\r\n        <div className=\"top\"\r\n          style={{ height: '10%', }}\r\n        >\r\n          <div className=\"foot_l\" style={{ backgroundColor: lbgc }} onClick={() => this.setState({ isNotes: true })}>\r\n            Notes\r\n          </div>\r\n          <div className=\"foot_l\" style={{ backgroundColor: rbgc }} onClick={() => this.setState({ isNotes: false })}>\r\n            History\r\n          </div>\r\n        </div>\r\n        {(this.state.isNotes) ? (\r\n          this._notes()\r\n        ) : (this._history())}\r\n\r\n      </div >\r\n    )\r\n  }\r\n  _notes = () => {\r\n    let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n      h2tLength, torsoLength, rulerUnit, updatePetAttributes } = this.state\r\n    function num(val) {\r\n      let weight = val.target.value\r\n      let newText = weight.replace(/[^\\d.]/g, \"\");\r\n      newText = newText.replace(/^\\./g, \"\");\r\n      newText = newText.replace(/\\.{2,}/g, \".\");\r\n      newText = newText.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\");\r\n      newText = newText.replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3');//只能输入两个小数\r\n      if (newText.indexOf(\".\") < 0 && newText != \"\") {//以上已经过滤，此处控制的是如果没有小数点，首位不能为类似于 01、02的金额\r\n        newText = parseFloat(newText)\r\n      }\r\n      return `${newText}`\r\n\r\n    }\r\n    if (this.state.devicesType === 'mella') {\r\n      return (\r\n        <div className=\"note\" style={{ height: mTop(256), marginTop: mTop(10) }}>\r\n          <textarea\r\n            rows=\"10\"\r\n            cols=\"30\"\r\n            value={this.state.notes}\r\n            onChange={(val) => {\r\n              console.log(val);\r\n              this.setState({\r\n                notes: val.target.value\r\n              })\r\n            }}\r\n          >\r\n          </textarea>\r\n        </div>\r\n      )\r\n    } else {\r\n      let { speciesId } = this.state\r\n      let species = speciesId === 1 ? catcareacte : careacte\r\n      return (\r\n        <div className=\"characteristics flex\">\r\n          <div className=\"careacterL flex\">\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Head Circumference:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{\r\n                    borderRadius: px(40), fontSize: px(17),\r\n                    paddingRight: px(20)\r\n                  }}\r\n                  value={l2rarmDistance}\r\n                  ref={(input) => { this.input1 = input }}\r\n                  // autoFocus={true}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    console.log(data);\r\n                    this.setState({\r\n                      l2rarmDistance: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 1\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(15) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Heard to Tail Length:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input2 = input }}\r\n                  value={h2tLength}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      h2tLength: data\r\n                    })\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 2\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck to Tail Length:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input3 = input }}\r\n                  value={torsoLength}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      torsoLength: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 3\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Neck:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  ref={(input) => { this.input4 = input }}\r\n                  value={neckCircumference}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      neckCircumference: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 4\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Upper Torso:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  value={upperTorsoCircumference}\r\n                  ref={(input1) => { this.input5 = input1 }}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      upperTorsoCircumference: data\r\n                    })\r\n\r\n\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 5\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"item flex\">\r\n              <div className=\"textTitle\" style={{ fontSize: px(15) }}>Lower Torso:</div>\r\n              <div className=\"input flex\" style={{ height: px(30), borderRadius: px(40) }}>\r\n                <input type=\"text\"\r\n                  style={{ borderRadius: px(40), fontSize: px(17), paddingRight: px(20) }}\r\n                  value={`${lowerTorsoCircumference}`}\r\n                  ref={(input) => { this.input6 = input }}\r\n                  onChange={(val) => {\r\n                    let data = num(val)\r\n                    this.setState({\r\n                      lowerTorsoCircumference: data\r\n                    })\r\n                  }}\r\n                  onFocus={() => {\r\n                    this.setState({\r\n                      itemIndex: 6\r\n                    })\r\n                  }}\r\n                />\r\n                <div className=\"unit\" style={{ right: px(8), fontSize: px(17) }}>{rulerUnit}</div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n          <div className=\"careacterR flex\">\r\n            <div className=\"imgBox flex\" style={{ borderRadius: px(20) }}>\r\n              <img src={species} alt=\"\" style={{ width: '80%' }} />\r\n            </div>\r\n          </div>\r\n\r\n          <MyModal\r\n            visible={updatePetAttributes}\r\n            text={'Uploading pet information to database'}\r\n          />\r\n        </div >\r\n      )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  //更新宠物的属性值，比如头尾、上躯干周长等\r\n  _updatePetAttributes = () => {\r\n    let { l2rarmDistance, lowerTorsoCircumference, upperTorsoCircumference, neckCircumference, rulerUnit, petId, h2tLength, torsoLength } = this.state\r\n\r\n\r\n    l2rarmDistance = newNum(l2rarmDistance)\r\n    lowerTorsoCircumference = newNum(lowerTorsoCircumference)\r\n    upperTorsoCircumference = newNum(upperTorsoCircumference)\r\n    neckCircumference = newNum(neckCircumference)\r\n    h2tLength = newNum(h2tLength)\r\n    torsoLength = newNum(torsoLength)\r\n\r\n    function newNum(val) {\r\n      if (val) {\r\n        if (rulerUnit === 'in') {\r\n          return parseFloat((parseFloat(val) * 2.54).toFixed(1))\r\n\r\n        } else {\r\n          return parseFloat(val)\r\n        }\r\n\r\n      } else {\r\n        return ''\r\n      }\r\n\r\n\r\n    }\r\n\r\n    let prams = {\r\n      l2rarmDistance: l2rarmDistance || null,\r\n      lowerTorsoCircumference: lowerTorsoCircumference || null,\r\n      upperTorsoCircumference: upperTorsoCircumference || null,\r\n      neckCircumference: neckCircumference || null,\r\n      h2tLength: h2tLength || null,\r\n      torsoLength: torsoLength || null,\r\n    }\r\n    this.setState({\r\n      updatePetAttributes: true\r\n    })\r\n    let url = `/pet/updatePetInfo/${storage.userId}/${this.state.petId}`\r\n    console.log('入参:', prams);\r\n    fetchRequest(url, 'POST', prams)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          updatePetAttributes: false,\r\n          itemIndex: 1\r\n        })\r\n        this.input1.focus();\r\n\r\n        if (res.flag) {\r\n          message.success('Uploaded successfully')\r\n        } else {\r\n          message.error('upload failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          updatePetAttributes: false\r\n        })\r\n        message.error('update failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n  _history = () => {\r\n    const _del = (key, record) => {\r\n      console.log('删除', key, record);\r\n      /**------------这里还要删除后台的数据------------ */\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, 'DELETE')\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n            console.log('删除成功');\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key)\r\n            });\r\n          } else {\r\n            console.log('删除失败');\r\n          }\r\n        })\r\n    }\r\n    const _edit = (key, record) => {\r\n      console.log('编辑', key, record);\r\n      this.setState({\r\n        visible: true,\r\n        editId: key,\r\n        memo: record.note\r\n      })\r\n\r\n\r\n\r\n    }\r\n\r\n    let { historyData, devicesType } = this.state\r\n    let listData = [], columns = []\r\n    switch (devicesType) {\r\n      case 'biggie':\r\n        for (let i = 0; i < historyData.length; i++) {\r\n          const element = historyData[i];\r\n          if (element.weight) {\r\n            listData.push(element)\r\n          }\r\n\r\n        }\r\n\r\n        columns = [\r\n          {\r\n            title: '',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            width: '15%',\r\n            render: (text, record, index) => {\r\n              // console.log('狩猎:', text, record, index);\r\n              //record:\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\r\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n                  </Popconfirm>\r\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                    onClick={() => _edit(record.historyId, record)}\r\n                  />\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Date',\r\n            dataIndex: 'date',\r\n            key: 'date',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Time',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: `Weight`,\r\n            key: 'weight',\r\n            dataIndex: 'weight',\r\n            width: '13%',\r\n            render: (text, record, index) => {\r\n\r\n\r\n              let bag = '#58BDE6', tem = ''\r\n\r\n              if (this.state.units === '℃') {\r\n                if (text) {\r\n                  tem = `${text.toFixed(1)}kgs`\r\n                }\r\n              } else {\r\n\r\n                tem = `${(text * 2.2046).toFixed(1)}lbs`\r\n\r\n              }\r\n              return (\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n\r\n                  <p style={{ margin: 0, padding: 0, color: bag }}>{tem}</p>\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'BF%',\r\n            dataIndex: 'fat',\r\n            key: 'fat',\r\n            align: 'center',\r\n            width: '11%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'BCS',\r\n            dataIndex: 'bodyConditionScore',\r\n            key: 'bodyConditionScore',\r\n            align: 'center',\r\n            width: '18%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center', color: '#58BDE6' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Note',\r\n            dataIndex: 'note',\r\n            key: 'note',\r\n            width: '11%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ width: '70px' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n        ];\r\n\r\n\r\n        break;\r\n      case 'mella':\r\n        for (let i = 0; i < historyData.length; i++) {\r\n          const element = historyData[i];\r\n          if (element.temp) {\r\n            listData.push(element)\r\n          }\r\n\r\n        }\r\n        columns = [\r\n          {\r\n            title: '',\r\n            dataIndex: 'operation',\r\n            key: 'operation',\r\n            width: '15%',\r\n            render: (text, record, index) => {\r\n              // console.log('狩猎:', text, record, index);\r\n              //record:\r\n              return (\r\n                <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-around', padding: `${px(18)}px 0` }}>\r\n                  <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                    <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n                  </Popconfirm>\r\n                  <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                    onClick={() => _edit(record.historyId, record)}\r\n                  />\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Date',\r\n            dataIndex: 'date',\r\n            key: 'date',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Time',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: `Temp(${this.state.units})`,\r\n            key: 'temp',\r\n            dataIndex: 'temp',\r\n            width: '17%',\r\n            render: (text, record, index) => {\r\n              // console.log(text, record);\r\n\r\n\r\n              /**\r\n              * bag：温度数值前的圆圈的背景颜色\r\n              * tem：展示的温度\r\n              * endvalue:将从后台得到的数据全部转化成华氏度\r\n              * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n              * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n              *\r\n              */\r\n\r\n              let bag = '', tem = ''\r\n\r\n              let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n              let min = 99.5, max = 102.2\r\n              //99.5 = 37.5   102.2=39\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n              if (endValue > max) {\r\n                bag = '#E1206D'\r\n              } else if (endValue < min) {\r\n                bag = '#98DA86'\r\n              } else {\r\n                bag = '#58BDE6'\r\n              }\r\n\r\n\r\n\r\n              if (this.state.units === '℃') {\r\n                if (text) {\r\n                  tem = `${text.toFixed(1)}${this.state.units}`\r\n                }\r\n              } else {\r\n                if (text) {\r\n                  if (text > 55) {\r\n                    tem = `${text}${this.state.units}`\r\n                  } else {\r\n                    tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n                  }\r\n\r\n                }\r\n              }\r\n              return (\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                  {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n                  <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n                </div>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Placement',\r\n            dataIndex: 'placement',\r\n            key: 'placement',\r\n            align: 'center',\r\n            width: '18%',\r\n            render: (text, record, index) => {\r\n              // console.log(text, record, index);\r\n              /**\r\n               * old:   1:腋温  2：肛温 3：耳温\r\n               * new:   1.腋温  2：大腿温度 3.肛温  4：耳温\r\n               */\r\n              switch (record.placement) {\r\n                case 0: return (    //腋温\r\n                  <div>\r\n                    <img src={placement_er} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 1: return (    //腋温\r\n                  <div>\r\n                    <img src={palcement_ye} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 3: return (     //肛温\r\n                  <div>\r\n                    <img src={placement_gang} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 2: return (     //肛温\r\n                  <div>\r\n                    <img src={placement_gang} alt=\"\" />\r\n                  </div>\r\n                )\r\n                case 4: return (    //耳温\r\n                  <div>\r\n                    <img src={placement_er} alt=\"\" />\r\n                  </div>\r\n                )\r\n                default: break;\r\n              }\r\n              return (\r\n                <p style={{ textAlign: 'center' }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n          {\r\n            title: 'Note',\r\n            dataIndex: 'note',\r\n            key: 'note',\r\n            width: '16%',\r\n            render: (text, record, index) => {\r\n\r\n              return (\r\n                <p style={{ width: '100%', textAlign: 'left', }}>{text}</p>\r\n              )\r\n\r\n            }\r\n          },\r\n        ];\r\n\r\n\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const pas = window.screen.height < 1000 ? 2 : 3\r\n\r\n    let hisHe = mTop(200)\r\n    try {\r\n      let historyElement = document.querySelectorAll('#clinicalMeasure .historyTable')\r\n      hisHe = historyElement[0].clientHeight - mTop(100)\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='historyTable' style={{ height: '85%' }}>\r\n        <Table\r\n          loading={this.state.loading}\r\n          columns={columns}\r\n          dataSource={listData}\r\n          rowKey={columns => columns.historyId}\r\n          pagination={false}\r\n          scroll={{\r\n            y: hisHe\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  _ciral = () => {\r\n\r\n    let num = px(280)\r\n    let windowWidth = document.documentElement.clientHeight\r\n    if (windowWidth) {\r\n      num = windowWidth * 0.30\r\n    }\r\n    return (\r\n      <div className=\"crial\" style={{ marginTop: mTop(50), }}>\r\n        {!this.state.isconnected && <div className=\"bb1\"\r\n          style={{ top: mTop(-40) }}\r\n        >\r\n          <div className=\"btn5\"\r\n            style={{ width: px(230), height: mTop(30), fontSize: px(16), }}\r\n            onClick={() => {\r\n              console.log('点击了切换按钮');\r\n\r\n              if (isClick === true) {\r\n                isClick = false\r\n                console.log('发送给主进程切换按钮');\r\n                ipcRenderer.send('qiehuan')\r\n                // ipcRenderer.send('getSerialPort')\r\n                const time = setTimeout(() => {\r\n                  isClick = true\r\n                  clearTimeout(time)\r\n                }, 2500)\r\n              }\r\n            }}\r\n          >Re-sync Base</div>\r\n        </div>}\r\n        <div className='flex' >\r\n          <Progress\r\n\r\n            type=\"dashboard\"\r\n\r\n            strokeColor={{\r\n              \"100%\": \"#108ee9\",\r\n              \"30%\": \"#87d068\"\r\n            }}\r\n            format={() => ``}\r\n            percent={this.state.progress}\r\n            gapDegree={30}\r\n            width={num}\r\n            strokeWidth={10}\r\n            success={{ strokeColor: 'red' }}\r\n\r\n          />\r\n          <div className=\"crialtext\"\r\n          // style={{ height: mTop(50), top: mTop(135) }}\r\n          >\r\n            {this._crialText()}\r\n          </div>\r\n        </div>\r\n\r\n\r\n        {this._btnEndTime()}\r\n      </div>\r\n    )\r\n  }\r\n  _save = () => {\r\n    if (this.state.isWalkIn) {\r\n      let { Temp, addpatient_description, addpatient_petName, addpatient_species } = this.state\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      let datas = {\r\n\r\n        temperature: parseFloat(Temp),  //测量温度\r\n        doctorId: storage.userId,\r\n        memo: this.state.notes,\r\n        clinicalDataEntityList: [{\r\n          data0: parseFloat(Temp),\r\n          data1: parseFloat(Temp),\r\n          data2: parseFloat(Temp),\r\n        }],\r\n        petVitalTypeId: petVitalId,\r\n        petName: addpatient_petName,\r\n        description: addpatient_description,\r\n        speciesId: addpatient_species,\r\n\r\n      }\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n      console.log('入参', datas);\r\n\r\n      fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n              isWeightSave: false\r\n            })\r\n            temp15 = 0\r\n            message.success('Data successfully saved in Mella')\r\n\r\n          } else {\r\n            message.error('Save failed')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error('Save failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n        })\r\n\r\n\r\n      return\r\n    }\r\n    console.log(storage.vetspireOrEzyvet);\r\n    if (storage.identity === '2') {\r\n      let parames = {\r\n        consult_id: this.state.consult_id,\r\n        temperature: this.state.Temp\r\n      }\r\n      if (this.state.macAddr) {\r\n        parames.macAddr = this.state.macAddr\r\n      }\r\n      console.log(parames, storage.ezyVetToken);\r\n      //petVitalId是宠物测量部位\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      console.log('ezy请求地址：', `/EzyVet/healthstatus/${this.state.healthStatus}/${this.state.probeID}/${this.state.petVitalTypeId}/${petVitalId}`);\r\n      fetchToken(`/EzyVet/healthstatus/${this.state.healthStatus}/${petVitalId}`, 'PATCH', parames, `Bearer ${storage.ezyVetToken}`)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.msg === 'success') {\r\n            console.log('成功');\r\n            message.success('Saved successfully')\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n            })\r\n            temp15 = 0\r\n            this._getHistory()\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        })\r\n      return\r\n    } else if (storage.identity === '1') {\r\n      //这是vetspire的保存测量记录\r\n      let parames = {\r\n        APIkey: storage.API,\r\n        vitalId: storage.selectExamId,\r\n        temp: parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\r\n\r\n\r\n      }\r\n\r\n      console.log('------------------', parames);\r\n\r\n      fetchRequest1('/VetSpire/updateVitalsTemperatureByVitalId', 'POST', parames)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.flag === true) {\r\n            if (res.data.updateVitals !== null) {\r\n              message.success('Saved successfully')\r\n            } else {\r\n              message.error('Save failed')\r\n            }\r\n            let sendData = {\r\n              petId: this.state.petId,\r\n              temperature: this.state.Temp,\r\n              memo: this.state.notes,\r\n              petVitalTypeId: this.state.petVitalTypeId\r\n            }\r\n            console.log('send', sendData);\r\n            fetchRequest('/pet/savePetExam', 'POST', sendData)\r\n              .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                  let hardSet = electronStore.get('hardwareConfiguration')\r\n                  let countdown = hardSet.is15 ? 15 : 30\r\n                  this.setState({\r\n                    initFlog: false,\r\n                    endMeasure: false,\r\n                    Temp: 0,\r\n                    progress: 0,\r\n                    countdown,\r\n                  })\r\n                  temp15 = 0\r\n                  this._getHistory()\r\n                }\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n              })\r\n          } else {\r\n            message.error('Save failed')\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        })\r\n    } else {\r\n\r\n      //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n      if (storage.lastOrganization === '34') {\r\n        console.log(this.state.patientId, this.state.petId);\r\n        let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\r\n\r\n        this.setState({\r\n          isWeightSave: true\r\n        })\r\n        fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n          .then(res => {\r\n            console.log('---', res);\r\n\r\n\r\n            if (res.errors) {\r\n              message.error('Failed to obtain case list')\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n            } else {\r\n              let { vitals } = res.data.patient\r\n              let vitalArr = vitals.data\r\n              if (vitalArr.length > 0) {\r\n                vitalArr.sort((a, b) => {\r\n                  return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                })\r\n                let temperature = parseInt((this.state.Temp * 1.8 + 32) * 10) / 10\r\n\r\n                let params = {}\r\n                if (vitalArr[0].weight && vitalArr[0].weight.value) {\r\n                  params = {\r\n                    query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${vitalArr[0].weight.value}}\r\n                              temperature:{value:${temperature}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n                } else {\r\n                  params = {\r\n                    query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                              temperature:{value:${temperature}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                console.log('---入参---', { patientID: this.state.patientId, vitalId: vitalArr[0].id, temperature });\r\n\r\n                fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.errors) {\r\n                      message.error('Data saving failed')\r\n                      this.setState({\r\n                        isWeightSave: false\r\n                      })\r\n                    } else {\r\n                      let hardSet = electronStore.get('hardwareConfiguration')\r\n                      let countdown = hardSet.is15 ? 15 : 30\r\n                      this.setState({\r\n                        initFlog: false,\r\n                        endMeasure: false,\r\n                        Temp: 0,\r\n                        progress: 0,\r\n                        countdown,\r\n                        isWeightSave: false\r\n                      })\r\n                      message.success('Data saved successfully')\r\n                    }\r\n\r\n\r\n                  })\r\n                  .catch(err => {\r\n                    message.error('Data saving failed')\r\n                    this.setState({\r\n                      isWeightSave: false\r\n                    })\r\n                    console.log(err);\r\n                  })\r\n\r\n              } else {\r\n                this.setState({\r\n                  isWeightSave: false\r\n                })\r\n                message.error('There is no case sheet for this pet')\r\n              }\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n            message.error('Failed to obtain case list')\r\n            console.log(err);\r\n          })\r\n        return\r\n      }\r\n\r\n\r\n\r\n\r\n      console.log('我是普通医生，不带集成的');\r\n      let petVitalId = null\r\n      switch (this.state.petVitalTypeId) {\r\n        case '01': petVitalId = 1; break;\r\n        case '02': petVitalId = 3; break;\r\n        case '03': petVitalId = 4; break;\r\n        default: petVitalId = 1; break;\r\n      }\r\n      let params = {\r\n        petId: this.state.petId,\r\n        doctorId: storage.userId,\r\n        temperature: this.state.Temp,\r\n        petVitalTypeId: petVitalId,\r\n        memo: this.state.notes\r\n      }\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n\r\n      fetchRequest('/exam/addClamantPetExam', 'POST', params)\r\n        .then(res => {\r\n          console.log('res', res);\r\n          if (res.flag === true) {\r\n\r\n            let hardSet = electronStore.get('hardwareConfiguration')\r\n            let countdown = hardSet.is15 ? 15 : 30\r\n\r\n            let copyTemp = this.state.Temp\r\n            this.setState({\r\n              initFlog: false,\r\n              endMeasure: false,\r\n              Temp: 0,\r\n              progress: 0,\r\n              countdown,\r\n            })\r\n            temp15 = 0\r\n            switch (storage.lastOrganization) {\r\n              case '3'://vetspire\r\n                this.updataVetspire(copyTemp)\r\n\r\n                break;\r\n\r\n              case '4'://ezyVet\r\n                this.updataEzyvet(copyTemp)\r\n                break;\r\n\r\n              default: message.success('Data successfully saved in Mella')\r\n                this.setState({\r\n                  isWeightSave: false\r\n                })\r\n                break;\r\n            }\r\n            this._getHistory()\r\n          } else {\r\n            message.error('Save failed')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          message.error('Save failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  updataEzyvet = (Temp) => {\r\n    let { patientId } = this.state\r\n\r\n    let params = {\r\n      id: patientId\r\n    }\r\n    // this.setState({\r\n    //   isWeightSave: false\r\n    // })\r\n    console.log('入参:', params, storage.connectionKey);\r\n\r\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\r\n      .then(res => {\r\n        console.log('宠物最新病历单获取:', res);\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            console.log('最新病历单获取失败');\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let temperature = Temp\r\n          // if (this.state.units === '℉') {\r\n          //   temperature = ((Temp - 32) / 1.8).toFixed(1)\r\n          // } else {\r\n          //   temperature = Temp\r\n          // }\r\n          let parames1 = {\r\n            consult_id,\r\n            temperature\r\n          }\r\n          let petVitalId = null\r\n          switch (this.state.petVitalTypeId) {\r\n            case '01': petVitalId = 1; break;\r\n            case '02': petVitalId = 3; break;\r\n            case '03': petVitalId = 4; break;\r\n            default: petVitalId = 1; break;\r\n          }\r\n          console.log('入参', parames1, storage.connectionKey);\r\n          fetchRequest2(`/EzyVet/healthstatus/${paramId}/${petVitalId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\r\n            .then(res => {\r\n              console.log('更新ezyvet的体重', res);\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              if (res.flag) {\r\n                console.log('更新ezyvet的体重成功');\r\n                message.success('Data successfully saved in EzyVet')\r\n\r\n                //Toast.success('Temperature update successful')\r\n              } else {\r\n                //Toast.fail('Temperature update failed')\r\n                console.log('更新ezyvet的体重失败');\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              //Toast.fail('Temperature update failed')\r\n              console.log('更新ezyvet的体重', err);\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          //Toast.fail('Temperature update failed')\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n        console.log('宠物最新病历单获取', err);\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n\r\n        //Toast.fail('Temperature update failed')\r\n      })\r\n\r\n\r\n  }\r\n  updataVetspire = (Temp) => {\r\n    let datas = {\r\n      APIkey: storage.connectionKey,\r\n      patientId: this.state.patientId\r\n    }\r\n    console.log('更新vetspire的数值', datas);\r\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag) {\r\n          let data = res.data.encounters[0].vitals\r\n          let encountersId = data.id\r\n\r\n          let temperature = parseInt((Temp * 1.8 + 32) * 10) / 10\r\n          // if (this.state.units === '℉') {\r\n          //   temperature = Temp\r\n          // } else {\r\n          //   temperature = (Temp * 1.8 + 32).toFixed(1)\r\n          // }\r\n          let params = {\r\n            vitalId: encountersId,\r\n            APIkey: storage.connectionKey,\r\n            temp: temperature\r\n          }\r\n          console.log('写数据到vetspire', params);\r\n          fetchRequest2(`/VetSpire/updateVitalsTemperatureByVitalId`, \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('写数据到vetspire', res);\r\n              if (res.flag) {\r\n                console.log('vetspire写成功');\r\n                message.success('Data successfully saved in Vetspire')\r\n              } else {\r\n                message.error('Data failed saved in Vetspire')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('vetspire写失败', err);\r\n              message.error('Data failed saved in Vetspire')\r\n              //Toast.fail('Temperature update failed')\r\n            })\r\n        } else {\r\n          console.log('最新病历单获取失败');\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n\r\n          //Toast.fail('Temperature update failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n\r\n\r\n        console.log('最新病历单获取失败', err);\r\n        message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n      })\r\n\r\n  }\r\n\r\n\r\n  _btnEndTime = () => {\r\n    let { endMeasure, isconnected, initFlog } = this.state\r\n    if (initFlog === false) {\r\n      return\r\n    }\r\n\r\n    if (endMeasure === true) {\r\n      // if (isconnected === true) {\r\n      return (\r\n        <>\r\n          <div className=\"btn\"\r\n            style={{ marginTop: mTop(30) }}\r\n          >\r\n            <div className=\"btn1\"\r\n              style={{ width: px(120), height: mTop(35) }}\r\n              onClick={() => {\r\n                console.log('点击了Discard');\r\n                let hardSet = electronStore.get('hardwareConfiguration') || {}\r\n                let countdown = hardSet.is15 ? 15 : 30\r\n                this.setState({\r\n                  endMeasure: false,\r\n                  Temp: 0,\r\n                  progress: 0,\r\n                  countdown,\r\n                  initFlog: false\r\n                })\r\n                temp15 = 0\r\n              }}\r\n            >\r\n              Discard\r\n            </div>\r\n\r\n            <div className=\"btn1\"\r\n              style={{ width: px(120), height: mTop(35) }}\r\n              onClick={() => {\r\n                this.timer && clearTimeout(this.timer)\r\n                this.timer = setTimeout(() => {\r\n                  this._save()\r\n                  clearTimeout(this.timer)\r\n                }, 500);\r\n              }}>\r\n              Save\r\n            </div>\r\n          </div>\r\n          {isconnected === true ? null : <p style={{ fontSize: px(30), color: '#3B3A3A', marginTop: mTop(10) }}> disconnected</p>}\r\n        </>\r\n      )\r\n    } else {\r\n      if (isconnected === true) {\r\n        if (this.state.isEarMeasure) {\r\n          return\r\n        }\r\n        return (\r\n          <div className=\"time\"\r\n            style={{ fontSize: px(32), marginTop: mTop(35) }}\r\n          >\r\n            <p>{`Measuring time  ${this.state.countdown}  s`}</p>\r\n          </div>\r\n        )\r\n      } else {\r\n        return (\r\n          null\r\n        )\r\n      }\r\n    }\r\n  }\r\n  _crialText = () => {\r\n    let { endMeasure, isMeasure, isconnected, Temp } = this.state\r\n    Temp = parseFloat(Temp)\r\n\r\n    let temp = this.state.units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\r\n    let text = '', temColor = ''\r\n    if (Temp > 15) {\r\n      if (Temp > 39) {\r\n        text = 'High'\r\n        temColor = '#E1206D'\r\n      } else if (Temp < 31) {\r\n        text = 'Low'\r\n        temColor = '#47C2ED'\r\n\r\n      } else {\r\n        text = 'Normal'\r\n        temColor = '#78D35D'\r\n      }\r\n    }\r\n    if (endMeasure === true) {\r\n      if (`${Temp}` === 'NaN' || `${Temp}` === '0') {\r\n        if (isconnected === true) {\r\n\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\r\n          )\r\n        }\r\n        else {\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\r\n          )\r\n        }\r\n      } else {\r\n\r\n\r\n        return (\r\n          <div style={{ color: temColor }}>\r\n            <span >{temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\r\n            <span style={{ fontSize: px(22) }}>{text}</span>\r\n          </div>\r\n        )\r\n      }\r\n    } else {\r\n      if (isMeasure === true) {\r\n        return (\r\n          <>\r\n            <span style={{ fontSize: px(36), color: temColor, display: 'flex', alignItems: 'center' }}>\r\n              {temp} <sup style={{ fontSize: px(18) }}>{this.state.units}</sup></span>\r\n          </>\r\n        )\r\n      } else {\r\n        if (this.state.isEarMeasure) {\r\n          return (\r\n            <p style={{ fontSize: px(30), color: '#3B3A3A' }}>measuring</p>\r\n          )\r\n        } else {\r\n          if (isconnected === true) {\r\n\r\n            return (\r\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>connected</p>\r\n            )\r\n          }\r\n          else {\r\n            return (\r\n              <p style={{ fontSize: px(30), color: '#3B3A3A' }}>disconnected</p>\r\n            )\r\n          }\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n  _modal = () => {\r\n    let that = this\r\n\r\n    function save() {\r\n      let datas = {\r\n        memo: that.state.memo\r\n      }\r\n\r\n      console.log('入参：', datas, that.state.editId);\r\n      fetchRequest(`/pet/updatePetExam/${that.state.editId}`, 'POST', datas)\r\n        .then(res => {\r\n          console.log(res);\r\n          that.setState({\r\n            visible: false,\r\n          })\r\n          that._getHistory()\r\n\r\n        })\r\n        .catch(err => {\r\n          that.setState({\r\n            spin: false\r\n          })\r\n          console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, visible } = this.state\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Edit Note\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onCancel={this.handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Notes</p>\r\n            {/* <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n              }}\r\n\r\n            /> */}\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"40\"\r\n              style={{ textIndent: '10px' }}\r\n              value={that.state.memo}\r\n              onChange={(val) => {\r\n                that.setState({\r\n                  memo: val.target.value\r\n                })\r\n              }}\r\n\r\n            >\r\n            </textarea>\r\n          </div>\r\n          <div className=\"btn\" style={{ width: '60%' }} onClick={save}>Save Changes</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n    )\r\n\r\n  }\r\n\r\n  biggie = () => {\r\n    let { isHaveBigieDate, biggieDate, sendWeight, impedance, units } = this.state\r\n    if (isHaveBigieDate) {\r\n      let bodyFat = impedance ? 20 : null\r\n      let score = impedance ? 5 : null\r\n\r\n      let isIbs = units === '℃' ? false : true\r\n      let weight = units === '℃' ? sendWeight : biggieDate\r\n\r\n      let issave = storage.connectionKey ? false : true\r\n      return (\r\n        <Biggie\r\n          issave={issave}\r\n          weight={`${weight}`}\r\n          onPress={this._saveWeight}\r\n          bodyFat={bodyFat}\r\n          score={score}\r\n          impedance={impedance}\r\n          isIbs={isIbs}\r\n          discardOnPress={() => {\r\n            this.setState({\r\n              isHaveBigieDate: false\r\n            })\r\n            keyboardBiggieFlog = false\r\n            sameBiggieNum = 0\r\n          }}\r\n        />\r\n      )\r\n    } else {\r\n      return (\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100%' }}>\r\n          <h1 style={{ fontWeight: 'bold', width: '80%', textAlign: 'center', }}>Ready, place pet onto scale</h1>\r\n        </div>\r\n\r\n      )\r\n    }\r\n\r\n\r\n\r\n  }\r\n\r\n  _saveWeight = () => {\r\n    console.log('开始去保存了', storage.lastOrganization, storage.connectionKey);\r\n\r\n\r\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n    if (storage.lastOrganization === '34') {\r\n      let params = { query: `query { patient (id:\"${this.state.patientId}\") {  vitals { data{ id, weight{value}, temperature{value}, createdAt, updatedAt}}}}` }\r\n\r\n      this.setState({\r\n        isWeightSave: true\r\n      })\r\n\r\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n        .then(res => {\r\n          console.log('---', res);\r\n          if (res.errors) {\r\n            message.error('Failed to obtain case list')\r\n            this.setState({\r\n              isWeightSave: false\r\n            })\r\n          } else {\r\n            let { vitals } = res.data.patient\r\n            let vitalArr = vitals.data\r\n            if (vitalArr.length > 0) {\r\n              vitalArr.sort((a, b) => {\r\n                return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n              })\r\n\r\n              console.log('-----', vitalArr);\r\n\r\n\r\n              let params = {}\r\n              if (vitalArr[0].temperature && vitalArr[0].temperature.value) {\r\n                params = {\r\n                  query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${this.state.biggieDate}}\r\n                            temperature:{value:${vitalArr[0].temperature.value}}\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n              } else {\r\n                params = {\r\n                  query: `mutation {\r\n                      updateVital(\r\n                          id:\"${vitalArr[0].id}\"\r\n                          input:{\r\n                            weight:{value:${this.state.biggieDate}}\r\n\r\n                              patientId:\"${this.state.patientId}\"\r\n                          }\r\n                      )\r\n                      {\r\n                          id,\r\n                          weight{value},\r\n                          temperature{value}\r\n                      }\r\n                  }`}\r\n              }\r\n\r\n              console.log('---入参---', params);\r\n\r\n\r\n\r\n              fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  if (res.errors) {\r\n                    this.setState({\r\n                      isWeightSave: false\r\n                    })\r\n                    message.error('Data saving failed')\r\n                  } else {\r\n                    this.setState({\r\n                      isHaveBigieDate: false,\r\n                      isWeightSave: false\r\n                    })\r\n                    keyboardBiggieFlog = false\r\n                    sameBiggieNum = 0\r\n                    message.success('Data saved successfully')\r\n                  }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    isWeightSave: false\r\n                  })\r\n                  message.error('Data saving failed')\r\n                  console.log(err);\r\n                })\r\n\r\n\r\n            } else {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n              message.error('There is no case sheet for this pet')\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error('Failed to obtain case list')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n          console.log(err);\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      return\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n    let fat = this.state.impedance ? 20 : null\r\n    let bodyConditionScore = this.state.impedance ? 5 : null\r\n\r\n    let params = {\r\n      petId: this.state.petId,\r\n      doctorId: storage.userId,\r\n      weight: this.state.sendWeight,\r\n      memo: this.state.notes,\r\n      fat,\r\n      bodyConditionScore\r\n    }\r\n    console.log('---体重保存入参--：', params);\r\n    fetchRequest('/exam/addClamantPetExam', 'POST', params)\r\n      .then(res => {\r\n        console.log('res', res);\r\n        if (res.flag === true) {\r\n          switch (storage.lastOrganization) {\r\n            case '3'://vetspire\r\n              this.updataWeightVetspire()\r\n\r\n              break;\r\n\r\n            case '4'://ezyVet\r\n              this.updataWeightEzyvet()\r\n              break;\r\n\r\n            default:\r\n              this.setState({\r\n                isHaveBigieDate: false,\r\n                isWeightSave: false\r\n              })\r\n              keyboardBiggieFlog = false\r\n              sameBiggieNum = 0\r\n              message.success('Data successfully saved in Mella')\r\n              break;\r\n          }\r\n\r\n          this._getHistory()\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  updataWeightVetspire = () => {\r\n    console.log('保存到vetspire');\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n\r\n    let datas = {\r\n      APIkey: storage.connectionKey,\r\n      patientId: this.state.patientId\r\n    }\r\n    console.log('更新vetspire的数值', datas);\r\n    fetchRequest4('/VetSpire/vetspireGetPetLatestExam', \"POST\", datas)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag) {\r\n\r\n          let data = res.data.encounters[0].vitals\r\n          let encountersId = data.id\r\n\r\n          let params = {\r\n            vitalId: encountersId,\r\n            APIkey: storage.connectionKey,\r\n            weight: this.state.biggieDate\r\n          }\r\n          console.log('写数据到vetspire', params);\r\n          fetchRequest4(`/VetSpire/vetspireUpdateWeight`, \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n\r\n              console.log('写数据到vetspire', res);\r\n              if (res.flag) {\r\n                console.log('vetspire写成功');\r\n                this.setState({\r\n                  isHaveBigieDate: false\r\n                })\r\n                keyboardBiggieFlog = false\r\n                sameBiggieNum = 0\r\n                message.success('Data successfully saved in Vetspire')\r\n              } else {\r\n                message.error('Data failed saved in Vetspire')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              console.log('vetspire写失败', err);\r\n              message.error('Data failed saved in Vetspire')\r\n              //Toast.fail('Temperature update failed')\r\n            })\r\n        } else {\r\n          console.log('最新病历单获取失败');\r\n          message.error('Failed to obtain the latest medical record')\r\n\r\n          // Toast.fail('Update failed')\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n        console.log('最新病历单获取失败', err);\r\n        message.error('Failed to obtain the latest medical record')\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n      })\r\n\r\n  }\r\n  updataWeightEzyvet = () => {\r\n    console.log('保存到ezyVet');\r\n    this.setState({\r\n      isWeightSave: true\r\n    })\r\n\r\n    let { patientId } = this.state\r\n\r\n    let params = {\r\n      id: patientId\r\n    }\r\n    console.log('入参:', params, storage.connectionKey);\r\n\r\n    fetchRequest4('/EzyVet/ezyvetGetPetLatestExam', \"GET\", params, `Bearer ${storage.connectionKey}`)\r\n      .then(res => {\r\n        console.log('宠物最新病历单获取:', res);\r\n        if (res.flag && res.data && res.data.items.length > 0) {\r\n          let data = res.data.items[0]\r\n          let { consult_id } = data\r\n          if (!consult_id) {\r\n            console.log('最新病历单获取失败');\r\n            message.error('Failed to obtain the latest medical record, the data is saved in Mella')\r\n            return\r\n          }\r\n          let paramId = data.id\r\n          let parames1 = {\r\n            consult_id,\r\n            weight: this.state.sendWeight\r\n          }\r\n\r\n          console.log('入参', parames1, storage.connectionKey);\r\n          fetchRequest4(`/EzyVet/ezyvetUpdateWeight/${paramId}`, \"PATCH\", parames1, `Bearer ${storage.connectionKey}`)\r\n            .then(res => {\r\n              console.log('更新ezyvet的体重', res);\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              if (res.flag) {\r\n                console.log('更新ezyvet的体重成功');\r\n                message.success('Data successfully saved in EzyVet')\r\n                this.setState({\r\n                  isHaveBigieDate: false\r\n                })\r\n                keyboardBiggieFlog = false\r\n                sameBiggieNum = 0\r\n                //Toast.success('Temperature update successful')\r\n              } else {\r\n                //Toast.fail('Temperature update failed')\r\n                console.log('更新ezyvet的体重失败');\r\n                message.error('Data failed saved in EzyVet')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                isWeightSave: false\r\n              })\r\n\r\n              //Toast.fail('Temperature update failed')\r\n              console.log('更新ezyvet的体重', err);\r\n              message.error('Data failed saved in EzyVet')\r\n            })\r\n        } else {\r\n          this.setState({\r\n            isWeightSave: false\r\n          })\r\n\r\n          //Toast.fail('Temperature update failed')\r\n          message.error('Failed to obtain the latest medical record')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('宠物最新病历单获取', err);\r\n        message.error('Failed to obtain the latest medical record')\r\n        this.setState({\r\n          isWeightSave: false\r\n        })\r\n        //Toast.fail('Temperature update failed')\r\n      })\r\n\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    const { closeColor, closebgc, minbgc, isWeightSave } = this.state\r\n    // console.dir(this.input1)\r\n    // try {\r\n    //   console.log(this.input1.checked)\r\n    // } catch (error) {\r\n\r\n    // }\r\n\r\n    return (\r\n      <div id=\"clinicalMeasure\">\r\n\r\n        <div style={{ height: '60%', }}>\r\n          <div className=\"heard\">\r\n            <Heard\r\n              onSearch={(data) => {\r\n                console.log('搜索到的宠物', data);\r\n                let { l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                  h2tLength, torsoLength } = data\r\n\r\n                l2rarmDistance = l2rarmDistance ? `${l2rarmDistance}` : ''\r\n                neckCircumference = neckCircumference ? `${neckCircumference}` : ''\r\n                upperTorsoCircumference = upperTorsoCircumference ? `${upperTorsoCircumference}` : ''\r\n                lowerTorsoCircumference = lowerTorsoCircumference ? `${lowerTorsoCircumference}` : ''\r\n                h2tLength = h2tLength ? `${h2tLength}` : ''\r\n                torsoLength = torsoLength ? `${torsoLength}` : ''\r\n                let weight = data.weight\r\n                if (weight && weight !== 'unknown') {\r\n                  weight = parseFloat(weight).toFixed(1)\r\n                }\r\n                let breedName = data.breed\r\n                if (!breedName) {\r\n                  breedName = 'unknown'\r\n                }\r\n                switch (breedName) {\r\n                  case 'defaultdog':\r\n                    breedName = 'Dog'\r\n\r\n                    break;\r\n                  case 'defaultother':\r\n                    breedName = 'Other'\r\n\r\n                    break;\r\n                  case 'defaultcat':\r\n                    breedName = 'Cat'\r\n                    break;\r\n\r\n                }\r\n                console.log('-----------', weight);\r\n                this.setState({\r\n                  petName: data.petName,\r\n                  owner: data.owner,\r\n                  breedName,\r\n                  weight,\r\n                  age: data.age,\r\n                  patientId: data.patientId,\r\n                  petId: data.petId,\r\n                  itemIndex: 1,\r\n                  l2rarmDistance,\r\n                  neckCircumference,\r\n                  upperTorsoCircumference,\r\n                  lowerTorsoCircumference,\r\n                  h2tLength,\r\n                  torsoLength,\r\n                  isWalkIn: false\r\n                }, () => {\r\n                  this._getHistory()\r\n                })\r\n\r\n              }}\r\n              menu8Click={() => {\r\n                switch (storage.identity) {\r\n                  case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n                  case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                    break;\r\n                  case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n\r\n                  default:\r\n                    break;\r\n                }\r\n              }}\r\n              onReturn={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n\r\n          {/* 宠物信息与圆环部分部分 */}\r\n          <div className='clinical_top'\r\n          // style={{ height: mTop(480) }}\r\n          >\r\n            {this._topLeft()}\r\n            <div className=\"r\"\r\n\r\n            >\r\n              {\r\n                this.state.devicesType === 'mella' ?\r\n                  this._ciral() :\r\n                  this.biggie()\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        {/* 底部宠物信息 */}\r\n        {this._foot()}\r\n        {this._modal()}\r\n        {/* {this._table()} */}\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n\r\n                  })\r\n                  num07 = 0\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n\r\n                  })\r\n                  num07 = 0\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n\r\n        <MyModal\r\n          visible={isWeightSave}\r\n          element={\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n              <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n                <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n              </div>\r\n              <p>\r\n                Data is being saved\r\n              </p>\r\n            </div>\r\n          }\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",["349","350"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectLocation\\index.jsx",["351","352","353","354","355","356"],"import React, { Component, } from 'react'\r\nimport {\r\n    Select,\r\n    Button,\r\n    message\r\n} from 'antd';\r\n\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn';\r\nimport { fetchRequest1 } from '../../utils/FetchUtil';\r\nimport { mTop, px } from '../../utils/px';\r\n\r\nimport './index.less';\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nexport default class Location extends Component {\r\n    state = {\r\n        loading: false,\r\n        api: '',\r\n        id: '',  //location ID\r\n        locations: [],\r\n        locationData: [],\r\n        selectLocationId: '',\r\n        selectLocationName: '',\r\n        vetData: [],\r\n        selectvetId: '',\r\n        selectvetName: ''\r\n\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n            api: storage.API,\r\n            id: storage.id,\r\n        })\r\n        let params = {\r\n            APIkey: storage.API\r\n        }\r\n        console.log('发送的数据：', params);\r\n        this.setState({ loading: true });\r\n        fetchRequest1('/VetSpire/selectLocations', 'POST', params)\r\n            .then(res => {\r\n                console.log('接收到的数据', res, res.data.Locations);\r\n                let locations = res.data.Locations\r\n\r\n                let datas = []\r\n                for (let i = 0; i < locations.length; i++) {\r\n                    const { address, displayName, name, phoneNumber, id } = locations[i]\r\n                    let data = {\r\n                        locationId: id,\r\n                        locationName: name,\r\n                        // display: displayName,\r\n                        // address,\r\n                        // phoneNumber\r\n                    }\r\n                    datas.push(data)\r\n                }\r\n                console.log(datas);\r\n                this.setState({\r\n                    loading: false,\r\n                    locationData: datas\r\n                });\r\n\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log('错误', err);\r\n                this.setState({ loading: false });\r\n\r\n            })\r\n\r\n        if (storage.locationKey !== undefined) {\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: storage.locationKey\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n    }\r\n    _selectLocation = () => {\r\n        let locationDefaultValue = storage.locationDefaultValue\r\n        let options = this.state.locationData.map(d => <Option key={d.locationId}>{d.locationName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.locationDefaultValue = data.children\r\n            storage.locationKey = value\r\n            storage.vetDefaultValue = undefined\r\n            storage.vetKey = undefined\r\n            this.setState({})\r\n            this.setState({\r\n                selectLocationId: value,\r\n                selectLocationName: data.children\r\n            })\r\n\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: value\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n        return (\r\n            <div className=\"select\">\r\n                <p>Select Location:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    defaultValue={locationDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _selectVet = () => {\r\n        let vetDefaultValue = storage.vetDefaultValue\r\n        let options = this.state.vetData.map(d => <Option key={d.vetId}>{d.VetName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.vetDefaultValue = data.children\r\n            storage.vetKey = value\r\n            this.setState({\r\n                selectvetId: value,\r\n                selectvetName: data.children\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"select\" style={{ marginTop: mTop(70) }}>\r\n                <p>Select Vet:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    // size = {'small'}\r\n                    defaultValue={vetDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _btn = () => {\r\n\r\n        return (\r\n            <div className=\"btn\"\r\n                style={{ marginTop: px(200) }}\r\n            >\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={() => { this.props.history.push('/page2') }}>\r\n                        Try Again\r\n                    </Button>\r\n                </div>\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={this._verify}>\r\n                        Verify\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    _verify = () => {\r\n        let { selectvetId, selectvetName, selectLocationName, selectLocationId } = this.state\r\n\r\n        if ((selectLocationName != '' && selectvetName === '') || (storage.vetDefaultValue != '' && storage.locationDefaultValue != '')) {\r\n            // let arr = [{selectLocationId:'765',selectvetId:''}]\r\n            storage.selectvetId = selectvetId\r\n            storage.selectLocationId = selectLocationId\r\n            this.props.history.push('/page4')\r\n\r\n        } else {\r\n            message.error('Please select Verify Organization Information')\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"location223\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page2')}\r\n                />\r\n\r\n                <div className=\"title\">Verify Organization Information</div>\r\n                <div className=\"goodpets\" style={{\r\n                    marginBottom: mTop(80)\r\n                }}>Good Pets</div>\r\n\r\n                {this._selectLocation()}\r\n\r\n                {this._selectVet()}\r\n\r\n\r\n                {this._btn()}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",["357","358"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\unassigned\\index.jsx",["359","360","361","362","363"],"import React, { Component } from \"react\";\nimport { Table, Popconfirm, Modal, Input, message, Select, Spin } from \"antd\";\n\nimport del from \"./../../assets/images/del.png\";\nimport Close from \"./../../assets/img/close.png\";\n\nimport Heard from \"./../../utils/heard/Heard\";\nimport { fetchRequest } from \"./../../utils/FetchUtil1\";\nimport UploadImg from \"./../../utils/uploadImg/UploadImg\";\nimport { px, MTop } from \"./../../utils/px\";\nimport electronStore from \"./../../utils/electronStore\";\nimport MyModal from \"./../../utils/myModal/MyModal\";\n\nimport moment from \"moment\";\nimport Draggable from \"react-draggable\";\n\nimport \"./index.less\";\n\nlet storage = window.localStorage;\nconst { Option } = Select;\n\nexport default class Unassigned extends Component {\n  state = {\n    historyData: [], //列表的数据集合\n    units: \"℉\",\n    searchText: \"\", //搜索测试记录框输入的内容\n    serchExamData: [], //搜索到的测量记录\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\n    visible: false, //nodel框是否显示\n    imgId: -1, //上传后返回的图像id号\n\n    assignPatientId: \"\",\n    assignPetName: \"\",\n    assignOwnerName: \"\",\n    assignBreed: \"\",\n    assignBreedId: \"\",\n    assignPetAge: \"\",\n    assignPetWeight: \"\",\n    assignPetId: \"\",\n    assignPetImgUrl: \"\",\n    inputDisabled: false,\n    breedArr: [], //猫、狗品种集合\n    loading: false,\n    disabled: true, //model是否可拖拽\n    search: \"\", //分配宠物搜索框\n    petListData: [],\n    searchPetList: [],\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\n    selectPetId: \"\",\n    modalLoading: false,//控制弹窗加载\n  };\n\n  componentDidMount() {\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"big\");\n    let getBreed = electronStore.get(\"getBreed\");\n    if (getBreed) {\n      this.setState({\n        breedArr: getBreed,\n      });\n    }\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    this._getEmergencyHistory();\n    const timer = setTimeout(() => {\n      this._getBreed();\n      clearTimeout(timer);\n    }, 3000);\n    this.gerAllPetMsg();\n    // let list = electronStore.get(\"doctorExam\");\n    // this.setState({\n    //   petListData: list || [],\n    // });\n  }\n  componentWillUnmount() {\n    message.destroy();\n    let ipcRenderer = window.electron.ipcRenderer;\n\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer;\n    let { height, width } = window.screen;\n    let windowsHeight = height > width ? width : height;\n    ipcRenderer.send(\"Lowbig\");\n    this.setState({});\n  };\n  //获取通过walk-In测量的信息，通过判断获取的数据中petId是否为空来展示数据\n  _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    this.setState({\n      loading: true,\n    });\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, \"GET\", \"\") //userID要自动的\n      .then((res) => {\n        console.log(\"---res\", res);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let day = moment().diff(moment(createTime), \"day\");\n              // console.log(day);\n              if (day > 3) {\n                continue;\n              }\n\n              let Tem = temperature;\n              try {\n                if (clinicalDataEntity) {\n                  Tem = temperature || clinicalDataEntity.data0;\n                }\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n                day,\n              };\n\n              historys.push(str);\n            }\n          }\n          //把所有数据拿完后做个排序\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          this.setState({\n            historyData,\n            loading: false,\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  //获取宠物类别\n  _getBreed = () => {\n    fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 1 })\n      .then((res) => {\n        if (res.code === 0) {\n          let arr = [];\n          res.petlist.map((item, index) => {\n            let data = {\n              petSpeciesBreedId: item.petSpeciesBreedId,\n              breedName: item.breedName,\n              speciesId: 1,\n            };\n\n            arr.push(data);\n          });\n\n          fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 2 })\n            .then((res) => {\n              if (res.code === 0) {\n                res.petlist.map((item, index) => {\n                  let data = {\n                    petSpeciesBreedId: item.petSpeciesBreedId,\n                    breedName: item.breedName,\n                    speciesId: 2,\n                  };\n                  arr.push(data);\n                });\n\n                console.log(\"----品种集合：\", arr);\n                electronStore.set(\"getBreed\", arr);\n                this.setState({\n                  breedArr: arr,\n                });\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n  //获取所有宠物详情信息\n  gerAllPetMsg = () => {\n    let params = {\n      doctorId: storage.userId,\n      offset: 0,\n      size: 100,\n    }\n    if (storage.lastWorkplaceId) {\n      params.workplaceId = storage.lastWorkplaceId\n    }\n    if (storage.lastOrganization) {\n      params.organizationId = storage.lastOrganization\n    }\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\n      .then((res) => {\n        console.log('res: ', res);\n        if (res.flag === true && res.data) {\n          this.setState({\n            petListData: res.data,\n          })\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n  _search = (value = \"\") => {\n    let list = this.state.historyData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      serchExamData: searchData,\n    });\n  };\n  //搜索宠物\n  _searchPet = (value = \"\") => {\n    let list = this.state.petListData;\n    let searchData = [];\n    let keyWord = value || this.state.searchText;\n    for (let i = 0; i < list.length; i++) {\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\n\n      if (\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\n      ) {\n        searchData.push(list[i]);\n      }\n    }\n\n    this.setState({\n      searchPetList: searchData,\n    });\n  };\n  draggleRef = React.createRef();\n  handleOk = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n    });\n  };\n  //新增宠物取消新增事件\n  handleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignVisible: true,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      imgId: -1,\n    });\n  };\n  //新增宠物弹窗关闭事件\n  closeHandleCancel = (e) => {\n    this.setState({\n      visible: false,\n      assignPatientId: \"\",\n      assignPetName: \"\",\n      assignOwnerName: \"\",\n      assignBreed: \"\",\n      assignBreedId: \"\",\n      assignPetAge: \"\",\n      assignPetWeight: \"\",\n      assignPetId: \"\",\n      assignPetImgUrl: \"\",\n      search: '',\n      selectPetId: '',\n      imgId: -1,\n    });\n  }\n  onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\n    this.setState({\n      bounds: {\n        left: -targetRect?.left + uiData?.x,\n        right: clientWidth - (targetRect?.right - uiData?.x),\n        top: -targetRect?.top + uiData?.y,\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n      },\n    });\n  };\n  _select = (value, data) => {\n    console.log(value, data); //value的值为id\n    this.setState({\n      assignBreedId: value,\n      assignBreed: data.children,\n    });\n  };\n  _modal = () => {\n    let that = this;\n    function getPetInfoByPatientId() {\n      switch (storage.identity) {\n        case \"1\":\n          console.log(\"我是vetspire查找\");\n          break;\n        case \"2\":\n          console.log(\"我是ezyVet查找\");\n          let params = {\n            animalId: that.state.assignPatientId,\n            organizationId: 4,\n          };\n          let paramsArray = [];\n          Object.keys(params).forEach((key) =>\n            paramsArray.push(key + \"=\" + params[key])\n          );\n          let url =\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n          if (url.search(/\\?/) === -1) {\n            url = url + \"?\" + paramsArray.join(\"&\");\n          } else {\n            url = url + \"&\" + paramsArray.join(\"&\");\n          }\n          fetch(url, {\n            method: \"GET\",\n            headers: {\n              authorization: `Bearer ${storage.ezyVetToken}`,\n            },\n          })\n            .then((response) => response.json())\n            .then((res) => {\n              console.log(\"res\", res);\n              this.setState({\n                spin: false,\n              });\n              if (res.flag === true) {\n                //有宠物，进入1\n                let petArr = res.data;\n                if (petArr.length > 1) {\n                  petArr.sort(function (a, b) {\n                    return a.createTime > b.createTime ? 1 : -1;\n                  });\n                }\n                console.log(petArr);\n\n                let { petId } = petArr;\n                // assign(petId)\n              } else {\n                //没有宠物\n                message.error(\"There are no pets under this patientID\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n              message.error(\"There are no pets under this patientID\");\n            });\n\n          break;\n\n        case \"3\":\n          console.log(\"我是一般医生查找\");\n          let datas = {\n            patientId: that.state.assignPatientId,\n            doctorId: storage.userId\n          }\n          if (storage.lastWorkplaceId) {\n            datas.workplaceId = storage.lastWorkplaceId\n          }\n          if (storage.lastOrganization) {\n            datas.organizationId = storage.lastOrganization\n          }\n\n          fetchRequest(\"/pet/checkPatientId\", \"GET\", datas)\n            .then((res) => {\n              if (res.flag === true) {\n                that.setState({\n                  assignPetId: that.state.assignPatientId,\n                });\n                message.success(\"This patientID will work\");\n              } else {\n                that.setState({\n                  assignPetId: '',\n                });\n                message.error(\"The patientID already exists\");\n              }\n            })\n            .catch((err) => {\n              that.setState({\n                inputDisabled: false,\n                assignPetName: \"\",\n                assignOwnerName: \"\",\n                assignBreed: \"\",\n                assignBreedId: \"\",\n                assignPetAge: \"\",\n                assignPetWeight: \"\",\n                assignPetId: \"\",\n                assignPetImgUrl: \"\",\n              });\n              console.log(err);\n            });\n          break;\n        default:\n          break;\n      }\n    }\n    //将测量信息给分配宠物\n    const assignPet = () => {\n      let petMsg = {\n        petName: this.state.assignPetName,\n        age: this.state.assignPetAge,\n        petSpeciesBreedId: this.state.assignBreedId,\n        owner: this.state.assignOwnerName,\n        doctorId: storage.userId\n      }\n      if (this.state.imgId !== -1 && this.state.imgId) {\n        petMsg.imageId = this.state.imgId\n      }\n      if (this.state.assignPetWeight) {\n        petMsg.weight = parseFloat(this.state.assignPetWeight).toFixed(2)\n      }\n      if (storage.lastWorkplaceId) {\n        petMsg.workplaceId = storage.lastWorkplaceId\n      }\n      if (storage.lastOrganization) {\n        petMsg.organizationId = storage.lastOrganization\n      }\n      this.setState({\n        modalLoading: true,\n      })\n      fetchRequest(`/pet/addDeskPet/${this.state.assignPatientId}`, 'POST', petMsg)\n        .then((res) => {\n          if (res.flag === true) {\n            let parmes = {\n              petId: res.data.petId,\n              clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\n            };\n            fetchRequest(\n              `/pet/addAndSavePetExam/${that.state.seleceEmergencies.historyId}`,\n              \"POST\",\n              parmes\n            )\n              .then((res) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                if (res.flag === true) {\n                  message.success(\"Assigned successfully\");\n                  that._getEmergencyHistory();\n                  that.setState({\n                    visible: false,\n                    assignPatientId: \"\",\n                    assignPetName: \"\",\n                    assignOwnerName: \"\",\n                    assignBreed: \"\",\n                    assignBreedId: \"\",\n                    assignPetAge: \"\",\n                    assignPetWeight: \"\",\n                    assignPetId: \"\",\n                    assignPetImgUrl: \"\",\n                    imgId: -1,\n                  });\n                } else {\n                  message.error(\"Assignment failed\");\n                }\n              })\n              .catch((err) => {\n                this.setState({\n                  modalLoading: false,\n                })\n                console.log(err);\n                message.error(\"Assignment failed\");\n              });\n          } else {\n            this.setState({\n              modalLoading: false,\n            })\n            message.error('Failed to create a pet')\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            modalLoading: false,\n          })\n          console.log('err: ', err);\n          message.error('Failed to create a pet')\n        })\n    };\n    let { disabled, bounds, visible } = this.state;\n    let options = this.state.breedArr.map((d) => (\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\n    ));\n    return (\n\n      <Modal\n        maskClosable={false}\n        wrapClassName={\"web1\"} //对话框外部的类名，主要是用来修改这个modal的样式的\n        destroyOnClose={true}\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"30px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                this.setState({\n                  disabled: false,\n                });\n              }\n            }}\n            onMouseOut={() => {\n              this.setState({\n                disabled: true,\n              });\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          ></div>\n        }\n        visible={visible}\n        onOk={this.handleOk}\n        onCancel={this.closeHandleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div ref={this.draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\n      >\n        <Spin spinning={this.state.modalLoading}>\n          <div id=\"unassignedModal\">\n            <div className=\"title\">\n              Assign <br />\n              Measurement to\n            </div>\n\n            <div className=\"addPhoto\">\n              <UploadImg\n                getImg={(val) => {\n                  this.setState({\n                    imgId: val.imageId,\n                  });\n                }}\n                imgUrl={this.state.assignPetImgUrl}\n                disable={this.state.inputDisabled}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Patient ID:</p>\n              <Input\n                value={this.state.assignPatientId}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPatientId: item.target.value,\n                  });\n                }}\n                onKeyDown={(e) => {\n                  if (e.keyCode === 13) {\n                    getPetInfoByPatientId();\n                  }\n                  if (e.keyCode === 27) {\n                    this.setState({\n                      assignPatientId: \"\",\n                    });\n                  }\n                }}\n                onBlur={() => {\n                  if (this.state.assignPatientId.length > 0) {\n                    getPetInfoByPatientId();\n                  }\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Pet Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n\n            <div className=\"item\">\n              <p>Owner Name:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignOwnerName}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignOwnerName: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Breed:</p>\n              <div className=\"infoInput\">\n                <Select\n                  disabled={this.state.inputDisabled}\n                  showSearch\n                  style={{ width: \"100%\" }}\n                  bordered={false}\n                  value={this.state.assignBreed}\n                  placeholder=\"Search to Select\"\n                  optionFilterProp=\"children\"\n                  listHeight={256}\n                  onSelect={(value, data) => this._select(value, data)}\n                  filterOption={(input, option) =>\n                    option.children.toLowerCase().indexOf(input.toLowerCase()) >=\n                    0\n                  }\n                  filterSort={(optionA, optionB) =>\n                    optionA.children\n                      .toLowerCase()\n                      .localeCompare(optionB.children.toLowerCase())\n                  }\n                >\n                  {options}\n                </Select>\n              </div>\n            </div>\n            <div className=\"item\">\n              <p>Pet Age:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetAge}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetAge: item.target.value,\n                  });\n                }}\n              />\n            </div>\n            <div className=\"item\">\n              <p>Pet Weight:</p>\n              <Input\n                disabled={this.state.inputDisabled}\n                value={this.state.assignPetWeight}\n                bordered={false}\n                onChange={(item) => {\n                  this.setState({\n                    assignPetWeight: item.target.value,\n                  });\n                }}\n              />\n\n              <div className=\"unit\">{`kg`}</div>\n            </div>\n\n            <div className=\"btnF\">\n              <div className=\"btn\" onClick={this.handleCancel}>\n                Cancel\n              </div>\n              <div\n                className=\"btn\"\n                onClick={() => {\n                  if (this.state.assignPatientId === '') {\n                    message.error('patientID can not be empty!');\n                  } else if (this.state.assignPetId === '') {\n                    message.error(\"The patientID already exists\");\n                  } else if (this.state.assignPatientId !== '' && this.state.assignPetId !== '') {\n                    assignPet();\n                  }\n                }}\n              >\n                Apportion\n              </div>\n            </div>\n          </div>\n        </Spin>\n      </Modal>\n    );\n  };\n  //获取当前组织所有宠物信息\n  _list = () => {\n    const { search, petListData, searchPetList } = this.state;\n    let data = search.length > 0 ? searchPetList : petListData;\n    let option = data.map((item, index) => {\n      let male = item.gender === 0 ? \"Female\" : \"Male\";\n      return (\n        <li\n          key={item.petId}\n          onClick={() => {\n            this.setState({\n              selectPetId: item.petId,\n            });\n          }}\n        >\n          <div className=\"item\">\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {item.petName ? item.petName : 'unknown'}\n            </span>\n            <span\n              className=\"petName\"\n              style={{ margin: `${px(5)}px 0` }}\n            >{`,${item.age} yrs,`}</span>\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\n              {male}\n            </span>\n          </div>\n          {this.state.selectPetId === item.petId ? (\n            <span className=\"search\">&#xe614;</span>\n          ) : null}\n        </li>\n      );\n    });\n    return <ul>{option}</ul>;\n  };\n\n  render() {\n    let { loading, disabled, historyData, searchText, serchExamData } =\n      this.state;\n    const _del = (key, record) => {\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, \"DELETE\").then(\n        (res) => {\n          if (res.flag === true) {\n            console.log(\"删除成功\");\n            const historyData = [...this.state.historyData];\n            console.log(historyData);\n            this.setState({\n              historyData: historyData.filter((item) => item.historyId !== key),\n            });\n          } else {\n            console.log(\"删除失败\");\n          }\n        }\n      );\n    };\n\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: `${px(8)}px 0`,\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" width={25} style={{ marginRight: \"8px\" }} />\n              </Popconfirm>\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \" Pet Description\",\n        dataIndex: \"description\",\n        key: \"description\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Species\",\n        dataIndex: \"species\",\n        key: \"species\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"70px\" }}>{text}</p>;\n        },\n      },\n\n      {\n        title: \"\",\n        dataIndex: \"assign\",\n        key: \"assign\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return (\n            <div\n              className=\"assign\"\n              style={{\n                fontSize: px(16),\n                paddingTop: px(5),\n                paddingBottom: px(5),\n              }}\n              onClick={() => {\n                this.setState({\n                  assignVisible: true,\n                  seleceEmergencies: record,\n                });\n              }}\n            >\n              Assign\n            </div>\n          );\n        },\n      },\n    ];\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\n    return (\n      <div id=\"unassigned\">\n        <Heard\n          onReturn={() => {\n            this.props.history.goBack();\n          }}\n          onSearch={(data) => {\n            storage.doctorExam = JSON.stringify(data);\n            storage.doctorList = JSON.stringify(this.state.data);\n            if (storage.isClinical === \"true\") {\n              this.props.history.push({\n                pathname: \"/page8\",\n                identity: storage.identity,\n                patientId: data.patientId,\n              });\n            } else {\n              this.props.history.push({ pathname: \"/page10\" });\n            }\n          }}\n          menu8Click={() => {\n            console.log(\"--\", storage.identity);\n            switch (storage.identity) {\n              case \"2\":\n                this.props.history.push({\n                  pathname: \"/EzyVetSelectExam\",\n                  listDate: storage.ezyVetList,\n                  defaultCurrent: storage.defaultCurrent,\n                });\n\n                break;\n              case \"1\":\n                this.props.history.push(\"/VetSpireSelectExam\");\n\n                break;\n              case \"3\":\n                this.props.history.push({\n                  pathname: \"/uesr/selectExam\",\n                  listDate: storage.doctorList,\n                  defaultCurrent: storage.defaultCurrent,\n                });\n\n                break;\n\n              default:\n                break;\n            }\n          }}\n        />\n        <div className=\"body\">\n          <div\n            className=\"title\"\n            style={{\n              marginTop: px(30),\n              fontSize: px(30),\n              marginBottom: px(40),\n            }}\n          >\n            Unassigned Measurements\n          </div>\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\n            <input\n              type=\"text\"\n              placeholder=\"&#xe628; Search Pet Name or Description\"\n              value={this.state.searchText}\n              onChange={(e) => {\n                this.setState({\n                  searchText: e.target.value,\n                });\n                this._search(e.target.value);\n              }}\n              onKeyUp={(e) => {\n                if (e.keyCode === 13) {\n                  this._search();\n                }\n                if (e.keyCode === 27) {\n                  this.setState({\n                    searchText: \"\",\n                  });\n                }\n              }}\n            />\n            <div\n              className=\"searchBtn\"\n              style={{ height: px(35), fontSize: px(18) }}\n              onClick={this._search}\n            >\n              <p>Search</p>\n            </div>\n          </div>\n\n          <div className=\"table\">\n            <Table\n              style={{\n                width: \"95%\",\n                height: MTop(550),\n              }}\n              loading={loading}\n              columns={columns}\n              dataSource={tableData}\n              rowKey={(columns) => columns.historyId}\n              pagination={false}\n              scroll={{\n                y: MTop(500),\n              }}\n            />\n          </div>\n          {this._modal()}\n        </div>\n        {\n          this.state.assignVisible && (\n            <MyModal\n              visible={this.state.assignVisible}\n              element={\n                <div className=\"myfindOrg\">\n                  <div className=\"orgHeard\">\n                    <div className=\"titleicon\" style={{ marginTop: px(5) }}>\n                      <div\n                        onClick={() => {\n                          this.setState({\n                            assignVisible: false,\n                            search: '',\n                            selectPetId: '',\n                          });\n                        }}\n                      >\n                        <img src={Close} alt=\"\" style={{ width: px(25) }} />\n                      </div>\n                    </div>\n                    <div\n                      className=\"text\"\n                      onMouseOver={() => {\n                        if (disabled) {\n                          this.setState({\n                            disabled: false,\n                          });\n                        }\n                      }}\n                      onMouseOut={() => {\n                        this.setState({\n                          disabled: true,\n                        });\n                      }}\n                    >\n                      Assign Measurement\n                    </div>\n                    <div className=\"searchBox\">\n                      <Input\n                        placeholder=\" &#xe61b; Search Pet\"\n                        bordered={false}\n                        allowClear={true}\n                        value={this.state.search}\n                        onChange={(item) => {\n                          this.setState({\n                            search: item.target.value,\n                          });\n                          this._searchPet(item.target.value);\n                        }}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"list\">{this._list()}</div>\n                  <div className=\"foot\">\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        this.setState({\n                          assignVisible: false,\n                          visible: true,\n                        });\n                      }}\n                    >\n                      <p>+Add New Pet</p>\n                    </div>\n                    <div\n                      className=\"btnn flex\"\n                      style={{ height: px(45) }}\n                      onClick={() => {\n                        if (!this.state.selectPetId) {\n                          message.error(\"Please select a pet to assign\");\n                        } else {\n                          let { selectPetId, seleceEmergencies, historyData } =\n                            this.state;\n                          let parmes = {\n                            petId: selectPetId,\n                            clinicalDatagroupId:\n                              seleceEmergencies.clinicalDatagroupId,\n                          };\n                          console.log(\"分配的数据信息\", parmes);\n                          fetchRequest(\n                            `/pet/addAndSavePetExam/${seleceEmergencies.historyId}`,\n                            \"POST\",\n                            parmes\n                          )\n                            .then((res) => {\n                              console.log(\"----------\", res);\n                              if (res.flag === true) {\n                                console.log(\"分配成功\");\n                                message.success(\"Assigned successfully\");\n                                let arr = [];\n                                for (let i = 0; i < historyData.length; i++) {\n                                  const element = historyData[i];\n                                  if (\n                                    seleceEmergencies.clinicalDatagroupId !==\n                                    element.clinicalDatagroupId\n                                  ) {\n                                    arr.push(element);\n                                  }\n                                }\n\n                                this.setState({\n                                  assignVisible: false,\n                                  historyData: arr,\n                                });\n                              } else {\n                                message.error(\"Assignment failed\");\n                              }\n                            })\n                            .catch((err) => {\n                              console.log(err);\n                              message.error(\"Assignment failed\");\n                            });\n                        }\n                      }}\n                    >\n                      <p>Confirm</p>\n                    </div>\n                  </div>\n                </div>\n                // </Spin>\n              }\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\AddDevice.jsx",["364","365"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectExam\\index.jsx",["366","367","368"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\verifyEmail\\index.jsx",["369"],"import React, { useState, useEffect } from 'react'\nimport { message, Button } from 'antd'\n\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn';\nimport temporaryStorage from './../../utils/temporaryStorage';\nimport { fetchRequest2 } from './../../utils/FetchUtil2';\nimport { px } from './../../utils/px';\nimport MyModal from './../../utils/myModal/MyModal';\nimport { fetchRequest3 } from './../../utils/FetchUtil3';\n\nimport { useHistory } from 'react-router-dom'\n\nimport './index.less';\n\nconst VerifyEmail = () => {\n  let history = useHistory()\n  const [code, setCode] = useState('')\n  const [resend, setResend] = useState(60)\n  const [visible, setVisible] = useState(false)\n  useEffect(() => {\n    const timer = setInterval(() => {\n      if (resend > 0) {\n        setResend(resend - 1)\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timer)\n    }\n  })\n\n  const _resend = (e) => {\n\n    if (resend <= 0) {\n\n      //下面写逻辑代码\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\n      let params = {\n        firstName,\n        lastName,\n        domain, email, hash, phone,\n      }\n      if (birthday) {\n        params.birthday = birthday\n      }\n      console.log('重新获取验证码入参', params);\n      fetchRequest2(`/user/resendDeskRegistEmail/${temporaryStorage.logupEmailCode}`, 'POST', params)\n        .then(res => {\n          console.log('重新获取验证码', res);\n          if (res.msg === 'success') {\n            message.success('The email has been resent, please check', 3)\n            temporaryStorage.logupEmailCode = res.data\n            setResend(60)\n          } else {\n            message.error('Failed to send mail', 3)\n\n          }\n        })\n        .catch(err => {\n          console.log('重新获取验证码失败');\n        })\n\n    }\n\n    //阻止a链接跳转\n    if (e && e.preventDefault)\n      e.preventDefault();\n    else\n      window.event.returnValue = false;\n  }\n  const _next = () => {\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\n    message.destroy()\n    if (code !== temporaryStorage.logupEmailCode) {\n      message.error('Verification code input is incorrect', 3)\n      return\n    }\n    else {\n      setVisible(true)\n      fetchRequest3(`/user/activateUserByEmailCode/${code}`, \"GET\", '')\n        .then(res => {\n          setVisible(false)\n          console.log('验证码验证返回信息：', res);\n          if (res.flag === true) {\n            console.log('验证成功');\n            temporaryStorage.logupSuccessData = res.data\n            temporaryStorage.logupEmailCode = ''\n            history.push('/uesr/logUp/JoinOrganizationByOption')\n          } else {\n            message.error('Verification code verification failed', 3)\n          }\n\n        })\n        .catch(err => {\n          setVisible(false)\n          console.log('验证码验证错误：', err);\n        })\n    }\n    // history.push('/uesr/logUp/FindWorkplace')\n  }\n\n\n  return (\n    <div id=\"verifyEmail\">\n      <div className=\"heard\">\n        <MaxMin\n          onClick={() => { history.push('/') }}\n          onClick1={() => history.goBack()}\n        />\n      </div>\n      <div className=\"body\">\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\n        <div className=\"text\">Please enter it below to confirm your address.</div>\n        <div className=\"inpF\">\n          <input\n            className=\"inp\"\n            type=\"text\"\n            value={code}\n            placeholder=\"Code\"\n            onChange={(val) => { setCode(val.target.value) }}\n            maxLength={6}\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\n          />\n        </div>\n\n        {/* <div className=\"resend\">\n          <a href=\"#\" onClick={_resend}>Resend</a>\n          {resend > 0 && `(${resend})`}\n        </div> */}\n      </div>\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\n        <div className=\"btnF\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            size='large'\n            htmlType=\"submit\"\n            onClick={_next}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n\n      <MyModal\n        visible={visible}\n      />\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default VerifyEmail\n\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetSelectTime\\index.jsx",[],["370","371"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\vetProfile\\index.jsx",["372","373","374","375"],"import React, { Component, } from 'react'\nimport {\n  Button,\n  Modal,\n  message\n} from 'antd';\nimport { CaretDownFilled } from '@ant-design/icons';\n\nimport imgArray from './../../utils/areaCode/imgArray'\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\nimport { fetchRequest } from './../../utils/FetchUtil1'\nimport countryList from './../../utils/areaCode/country';\nimport temporaryStorage from './../../utils/temporaryStorage'\nimport { px } from './../../utils/px';\nimport MyModal from './../../utils/myModal/MyModal'\nimport { fetchRequest3 } from './../../utils/FetchUtil3';\n\nimport moment from 'moment';\n\nimport './index.less';\n\nconst options = [\n  { label: 'Dogs', value: 'Dogs' },\n  { label: 'Cats', value: 'Cats' },\n  { label: 'Small Pets', value: 'Small Pets' },\n  { label: 'Nutrition', value: 'Nutrition' },\n  { label: 'Surgery', value: 'Surgery' },\n  { label: 'Zoo', value: 'Zoo' },\n  { label: 'Wildlife', value: 'Wildlife' },\n  { label: 'Cardiology', value: 'Cardiology' },\n  { label: 'Neurology', value: 'Neurology' },\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\n  { label: 'Other', value: 'Other' },\n]\nexport default class VetPrifile extends Component {\n\n  state = {\n    code: 1,\n    imgArrayIndex: 0,\n    otherText: '',\n    name: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    birthday: moment(),\n    password: '',\n    password1: '',\n    checboxtValue: [],\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\n\n    visible: false,       //nodel框是否显示\n    disabled: true,       //model是否可拖拽\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\n    loadVisible: false\n  }\n\n  componentDidMount() {\n    //发送指令让main.js创建一个big窗口\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n\n    //检测是否本地是否有注册信息，有就展示出来。\n    console.log(temporaryStorage.logupVetInfo);\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\n      console.log('进来了');\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\n      this.setState({\n        name: firstName || '',\n        lastName,\n        email,\n        password: hash,\n        password1: hash,\n        code,\n        phone: initPhone || '',\n        imgArrayIndex\n      })\n\n\n    }\n\n\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\n    if (this.props.location && this.props.location.email) {\n      this.setState({\n        email: this.props.location.email\n      })\n    }\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\n\n\n  }\n  componentWillUnmount() {\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\n  }\n  changeFenBianLv = (e) => {\n    console.log(e);\n    let ipcRenderer = window.electron.ipcRenderer\n    ipcRenderer.send('big')\n    this.setState({\n\n    })\n  }\n\n\n  _next1 = () => {\n    let { name, lastName, email, code, phone, password1, password, } = this.state\n    message.destroy()\n    console.log({ name, email, code, phone, password1, password, });\n    email = email.toLocaleLowerCase()\n    if (name.length <= 0) {\n      message.error('Please enter your first name', 3)\n      return\n    }\n    if (lastName.length <= 0) {\n      message.error('Please enter your last name', 3)\n      return\n    }\n    if (!email) {\n      message.error('Please enter the mailbox number', 3)\n      return\n    } else {\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\n        message.error('E-mail format is incorrect', 3)\n        return\n      }\n    }\n    // if (!phone) {\n    //   message.error('Please enter the phone number', 3)\n    //   return\n    // }\n    if (password.length <= 0 || password1.length <= 0) {\n      message.error('Please enter the password', 3)\n      return\n    }\n\n    if (password !== password1) {\n      message.error('The password entered twice is incorrect, please re-enter', 3)\n      return\n    }\n    this.setState({\n      loadVisible: true\n    })\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\n      .then(res => {\n        console.log(res);\n        if (!res.flag) {\n          console.log('邮箱号以被注册，是否忘记密码');\n          this.setState({\n            loadVisible: false,\n            visible: true\n          })\n        }\n        else {\n          console.log('邮箱号可以使用');\n          if (res.code === 11011 || res.code === 11012) {\n            this.setState({\n              loadVisible: false,\n              visible: true\n            })\n            return\n          }\n\n          let params = {\n            firstName: name,\n            lastName,\n            email,\n            // phone: `+${code}${phone}`,\n            hash: password,\n          }\n          if (phone) {\n            params.phone = `+${code}${phone}`\n          }\n          console.log('注册接口的入参：', params);\n          fetchRequest2('/user/deskRegistAWSSNS', \"POST\", params)\n            .then(res => {\n              this.setState({\n                loadVisible: false\n              })\n              console.log('注册接口返回数据：', res);\n              if (res.flag) {\n                console.log('注册成功了，去验证验证码');\n                temporaryStorage.logupEmailCode = res.data\n                params.code = code\n                params.initPhone = phone\n                params.imgArrayIndex = this.state.imgArrayIndex\n                temporaryStorage.logupVetInfo = params\n                this.props.history.push('/uesr/logUp/VerifyEmail')\n              } else {\n                message.error('registration failed', 3)\n              }\n            })\n            .catch(err => {\n              this.setState({\n                loadVisible: false\n              })\n              message.error(`Error:${err.message}`)\n              console.log('注册接口抛出错误：', err);\n            })\n        }\n      })\n      .catch(err => {\n        this.setState({\n          loadVisible: false\n        })\n        message.error(`Error:${err.message}`)\n        console.log('检测邮箱号的接口出错了', err);\n      })\n  }\n  _next = () => {\n    let { name, lastName, email, code, phone, password1, password, } = this.state\n    message.destroy()\n    console.log({ name, email, code, phone, password1, password, });\n    email = email.toLocaleLowerCase()\n    if (name.length <= 0) {\n      message.error('Please enter your first name', 3)\n      return\n    }\n    if (lastName.length <= 0) {\n      message.error('Please enter your last name', 3)\n      return\n    }\n    if (!email) {\n      message.error('Please enter the mailbox number', 3)\n      return\n    } else {\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\n        message.error('E-mail format is incorrect', 3)\n        return\n      }\n    }\n    // if (!phone) {\n    //   message.error('Please enter the phone number', 3)\n    //   return\n    // }\n    if (password.length <= 0 || password1.length <= 0) {\n      message.error('Please enter the password', 3)\n      return\n    }\n\n    if (password !== password1) {\n      message.error('The password entered twice is incorrect, please re-enter', 3)\n      return\n    }\n    this.setState({\n      loadVisible: true\n    })\n\n\n    let params = {\n      firstName: name,\n      lastName,\n      email,\n      hash: password,\n    }\n    if (phone) {\n      params.phone = `+${code}${phone}`\n    }\n    console.log('注册接口的入参：', params);\n    fetchRequest3('/user/registByAWSSES', \"POST\", params)\n      .then(res => {\n        this.setState({\n          loadVisible: false\n        })\n        console.log('注册接口返回数据：', res);\n        switch (res.code) {\n          case 11011:\n            console.log('用户已存在，应该跳出弹框')\n            this.setState({\n              visible: true\n            })\n\n            break;\n\n          case 20000:\n            console.log('可以注册，跳转到下一页');\n            temporaryStorage.logupEmailCode = res.data\n            params.code = code\n            params.initPhone = phone\n            params.imgArrayIndex = this.state.imgArrayIndex\n            temporaryStorage.logupVetInfo = params\n            this.props.history.push('/uesr/logUp/VerifyEmail')\n            break;\n\n          default:\n            break;\n        }\n        // if (res.flag) {\n        //   console.log('注册成功了，去验证验证码');\n        //   temporaryStorage.logupEmailCode = res.data\n        //   params.code = code\n        //   params.initPhone = phone\n        //   params.imgArrayIndex = this.state.imgArrayIndex\n        //   temporaryStorage.logupVetInfo = params\n        //   this.props.history.push('/uesr/logUp/VerifyEmail')\n        // } else {\n        //   message.error('registration failed', 3)\n        // }\n      })\n      .catch(err => {\n        this.setState({\n          loadVisible: false\n        })\n        message.error(`Error:${err.message}`)\n        console.log('注册接口抛出错误：', err);\n      })\n\n  }\n  _signIn = (e) => {\n    e.preventDefault();\n    this.props.history.push('/page11')\n  }\n\n\n\n  render() {\n\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\n    return (\n      <div id=\"vetPrifile\" >\n        {/* 关闭缩小 */}\n        <div className=\"heard\">\n          <MaxMin\n            onClick={() => { this.props.history.push('/') }}\n            onClick1={() => this.props.history.push('/')}\n          />\n        </div>\n        <div className=\"body\">\n          <div className=\"text\"\n            style={{ fontSize: px(30), marginBottom: px(120) }}\n          >\n            Let’s start by creating your account\n          </div>\n          <div className=\"form\" >\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={name}\n                  placeholder=\"First Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      name: data\n                    })\n                  }}\n                />\n\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"text\"\n                  value={lastName}\n                  placeholder=\"Last Name\"\n                  onChange={(value) => {\n                    let data = value.target.value\n\n                    this.setState({\n                      lastName: data\n                    })\n                  }}\n                />\n\n              </div>\n            </div>\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Email\"\n                  value={email}\n                  placeholder=\"Email Address*\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      email: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\n                  {countryList.map((item, index) => {\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\n                    return (\n                      <li key={index}>\n                        <div key={index}\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\n                          onClick={() => {\n                            console.log(item, index);\n                            this.setState({\n                              code: item.code,\n                              imgArrayIndex: index\n                            })\n                            document.getElementById('list').style.display = \"none\"\n                          }}\n                        >\n                          <img src={url} alt=\"\" />\n                          <p >{`${item.en}   +${item.code}`}</p>\n                        </div>\n                      </li>\n                    )\n                  })}\n                </ul>\n\n\n                <div className='phone'>\n                  <div\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\n                    onClick={() => {\n                      document.getElementById('list').style.display = \"block\"\n                    }}\n                  >\n                    <img style={{ zIndex: '888' }}\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\n                    />\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\n                  </div>\n\n\n                  <input\n                    type=\"Phone\"\n                    value={phone}\n                    placeholder=\"Phone Number\"\n                    onChange={(value) => {\n                      let data = value.target.value\n                      this.setState({\n                        phone: data.replace(/[^\\-?\\d]/g, '')\n                      })\n                    }}\n                  />\n                </div>\n\n              </div>\n\n            </div>\n\n\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password}\n                  placeholder=\"Create Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password: data\n                    })\n                  }}\n                />\n              </div>\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\n                <input\n                  type=\"Password\"\n                  value={password1}\n                  placeholder=\"Confirm  Password\"\n                  onChange={(value) => {\n                    let data = value.target.value\n                    this.setState({\n                      password1: data\n                    })\n                  }}\n                />\n              </div>\n            </div>\n\n\n          </div>\n        </div>\n\n\n\n\n        <div className=\"foot\">\n          <div className=\"footText\"\n          >Already have an accoun? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\n\n          {/* 按钮 */}\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\n            <Button\n              type=\"primary\"\n              shape=\"round\"\n              size='large'\n              htmlType=\"submit\"\n              onClick={this._next}\n            >\n              Next\n            </Button>\n          </div>\n        </div>\n\n        <MyModal\n\n          visible={this.state.loadVisible}\n        />\n\n        <Modal\n\n          visible={visible}\n          // visible={true}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[\n\n          ]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id='vetPrifileModal'>\n            <div className=\"title\">Email Already Exists</div>\n\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\n\n            <div className=\"btn\">\n\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false,\n                    email: ''\n                  })\n                }}\n              >Try Again</button>\n              <button\n                onClick={() => {\n                  this.setState({\n                    visible: false\n                  })\n                  this.props.history.replace('/page11')\n                }}\n              >Sign Up</button>\n\n            </div>\n          </div>\n\n\n        </Modal>\n      </div>\n\n\n    )\n  }\n}\n\n","C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetBreedModal\\index.jsx",["376"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\admin_VetProfile\\index.jsx",["377","378","379","380","381","382","383","384"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport selectphoto from '../../assets/images/sel.png'\r\nimport close from '../../assets/img/close.png'\r\nimport dui from '../../assets/images/dui.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { mTop, px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport Avatar from '../../components/avatar/Avatar'\r\nimport moment from 'moment'\r\nimport './index.less';\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    fetchRequest(`/organization/listDoctorsByAdmin/${storage.lastOrganization}`, 'GET', params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    fetchRequest(`/new/admin/users/${userId}`, 'PATCH', params, storage.token)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",["385","386"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\petAndParents\\index.jsx",["387","388","389","390","391"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Select,\r\n} from 'antd'\r\n\r\nimport parent from '../../assets/img/parent.png'\r\nimport dog from '../../assets/images/reddog.png'\r\nimport cat from '../../assets/images/redcat.png'\r\nimport other from '../../assets/images/redother.png'\r\n\r\nimport Heart from '../../utils/heard/Heard'\r\nimport { px } from '../../utils/px';\r\nimport MyModal from '../../utils/myModal/MyModal'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\n\r\nimport moment from 'moment'\r\n\r\nimport './index.less';\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class PetAndParents extends Component {\r\n\r\n  state = {\r\n    parentList: [],       //宠物主人列表\r\n    petList: [],          //宠物列表\r\n    loading: false,       //加载中\r\n    parentSearchArr: [],  //搜索后的宠物主人列表\r\n    petSearchArr: [],     //搜索后的宠物列表\r\n    searchText: '',        //搜索文本\r\n    parentAndPetList: [],  //宠物主人下的所有宠物,\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      offset: 0,\r\n      size: 500,\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    fetchRequest(`/petall/pet/${storage.lastOrganization}/petall`, 'POST', params)\r\n      .then(res => {\r\n        console.log('查询到的宠物列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = []\r\n          let list = res.data.list\r\n          let owerList = []\r\n          let parentAndPetList = []\r\n          for (let i = 0; i < list.length; i++) {\r\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\r\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: petName,\r\n              petId,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              type: 'pet',\r\n              patientId,\r\n              petBirthday: birthday,\r\n              breedName,\r\n              gender\r\n            }\r\n            data.push(json)\r\n            if (userId) {\r\n              let flogNum = -1\r\n\r\n              for (let i = 0; i < owerList.length; i++) {\r\n                let ower = owerList[i]\r\n                if (ower.userId === userId) {\r\n                  flogNum = i\r\n                  break;\r\n                }\r\n\r\n              }\r\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\r\n                let owerJson = {\r\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n                }\r\n                owerList.push(owerJson)\r\n                let parentAndPetJson = {\r\n                  parent: owerJson,\r\n                  pets: [json]\r\n                }\r\n                // console.log('-----', parentAndPetJson);\r\n                parentAndPetList.push(parentAndPetJson)\r\n              } else {\r\n                parentAndPetList[flogNum].pets.push(json)\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            // if (userId) {\r\n            //   let sameFlog = owerList.some((ower => {\r\n            //     return ower.userId === userId\r\n            //   }))\r\n            //   if (!sameFlog) {\r\n            //     let owerJson = {\r\n            //       userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n            //     }\r\n            //     owerList.push(owerJson)\r\n            //   }\r\n            // }\r\n          }\r\n          // console.log(parentAndPetList);\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            petList: data,\r\n            parentList: owerList,\r\n            parentAndPetList\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = (value) => {\r\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\r\n    let data = []\r\n    if (value === 'parent') {\r\n      if (searchText.length > 0) {\r\n        data = parentSearchArr\r\n      } else {\r\n        data = parentList\r\n      }\r\n    } else {\r\n      if (searchText.length > 0) {\r\n        data = petSearchArr\r\n      } else {\r\n        data = petList\r\n      }\r\n    }\r\n\r\n    let options = data.map((item, index) => {\r\n      let { speciesId, url, userImageUrl, patientId, petId, name } = item\r\n      let images = null\r\n      if (value === 'parent') {\r\n        images = `url(${userImageUrl}?download=0&width=150)`\r\n        if (!userImageUrl) {\r\n          images = `url(${parent})`\r\n        }\r\n      } else {\r\n        images = `url(${url}?download=0&width=150)`\r\n        if (!url) {\r\n          switch (speciesId) {\r\n            case 1: images = `url(${cat})`\r\n              break;\r\n            case 2: images = `url(${dog})`\r\n              break\r\n            default: images = `url(${other})`\r\n              break;\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20) }}\r\n          onClick={() => {\r\n            if (item.type !== 'pet') {\r\n              // console.log('跳转到宠物用户详情页', item,);\r\n              let params = []\r\n              for (let i = 0; i < parentAndPetList.length; i++) {\r\n                if (item.userId === parentAndPetList[i].parent.userId) {\r\n\r\n                  params = parentAndPetList[i]\r\n                  break\r\n                }\r\n\r\n              }\r\n\r\n\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', parent: params })\r\n            } else {\r\n              console.log(item);\r\n              this.props.history.push({ pathname: '/page9', participate: { patientId, petName: name, petId } })\r\n\r\n            }\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 6) {\r\n      liStyle = { height: px(560), overflowY: 'auto' }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { parentList, petList } = this.state\r\n    console.log(parentList, petList);\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n    for (let i = 0; i < parentList.length; i++) {\r\n      let petName = parentList[i].name.toLowerCase() || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        parentSearchData.push(parentList[i])\r\n      }\r\n    }\r\n\r\n    let petSearchData = []\r\n    for (let i = 0; i < petList.length; i++) {\r\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\r\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\r\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        petSearchData.push(petList[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      petSearchArr: petSearchData,\r\n      parentSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"PetAndParents\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n            onSearch={(data) => {\r\n\r\n              storage.doctorExam = JSON.stringify(data)\r\n\r\n              storage.doctorList = JSON.stringify(this.state.data)\r\n              if (storage.isClinical === 'true') {\r\n                this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n              } else {\r\n                this.props.history.push({ pathname: '/page10', })\r\n              }\r\n            }}\r\n            menu8Click={() => {\r\n              console.log('--', storage.identity, storage.doctorList);\r\n              switch (storage.identity) {\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <h1 style={{ fontSize: px(38) }}>{`Pet & Parents Profile Management`}</h1>\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n          <div className=\"btns\">\r\n            <div className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}>\r\n              + New Parent\r\n            </div>\r\n            <div\r\n              className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}\r\n              onClick={() => {\r\n                this.props.history.push('/pet/doctorAddPet')\r\n              }}\r\n\r\n            >\r\n              + New Pet\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"lists\">\r\n            <div className=\"listsL\">\r\n              {this.list('parent')}\r\n            </div>\r\n\r\n            <div className=\"listsL\">\r\n              {this.list('pet')}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",["392","393"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\resetPassword\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\addDevice\\index.jsx",["394","395"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\ezyVetSelectExam\\index.jsx",["396","397","398","399","400","401","402","403","404","405","406","407","408","409"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\hardWareTypeUI.jsx",["410"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\Biggie.jsx",["411","412","413","414"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\team\\index.jsx",["415","416","417"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\advancedSettings\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\mainbody\\HardAndPetsUI.jsx",["418","419"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\signIn\\index.jsx",["420","421","422","423","424","425"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\settings\\index.jsx",["426","427","428","429","430","431","432"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\findMyOrganization\\index.jsx",[],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\selectMella\\index.jsx",["433"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\findMyWorkplace\\index.jsx",["434","435"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["436","437","438","439","440","441","442","443","444","445","446"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["447","448","449"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js",["450","451","452","453"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\selectPetModal\\index.jsx",["454","455","456"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["457","458","459","460","461","462","463","464","465","466","467","468"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\utils\\commonFun.js",["469","470","471","472","473","474","475","476","477","478"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\addPetModal\\index.jsx",["479","480","481","482","483","484","485","486"],"C:\\Users\\nonagon\\Desktop\\project\\Mella_Desktop_Super_USB\\src\\components\\UnassignModal\\UnassignModal.jsx",["487","488","489","490","491","492","493","494","495","496"],{"ruleId":"497","severity":1,"message":"498","line":10,"column":8,"nodeType":"499","messageId":"500","endLine":10,"endColumn":13},{"ruleId":"497","severity":1,"message":"501","line":20,"column":8,"nodeType":"499","messageId":"500","endLine":20,"endColumn":15},{"ruleId":"497","severity":1,"message":"502","line":22,"column":8,"nodeType":"499","messageId":"500","endLine":22,"endColumn":17},{"ruleId":"497","severity":1,"message":"503","line":23,"column":8,"nodeType":"499","messageId":"500","endLine":23,"endColumn":14},{"ruleId":"497","severity":1,"message":"504","line":33,"column":9,"nodeType":"499","messageId":"500","endLine":33,"endColumn":15},{"ruleId":"505","severity":1,"message":"506","line":111,"column":41,"nodeType":"507","messageId":"508","endLine":111,"endColumn":43},{"ruleId":"497","severity":1,"message":"509","line":218,"column":11,"nodeType":"499","messageId":"500","endLine":218,"endColumn":21},{"ruleId":"497","severity":1,"message":"510","line":218,"column":49,"nodeType":"499","messageId":"500","endLine":218,"endColumn":55},{"ruleId":"511","severity":1,"message":"512","line":468,"column":15,"nodeType":"513","endLine":468,"endColumn":63},{"ruleId":"511","severity":1,"message":"512","line":498,"column":15,"nodeType":"513","endLine":498,"endColumn":63},{"ruleId":"514","severity":1,"message":"515","line":519,"column":5,"nodeType":"516","messageId":"517","endLine":522,"endColumn":6},{"ruleId":"514","severity":1,"message":"515","line":523,"column":5,"nodeType":"516","messageId":"517","endLine":526,"endColumn":6},{"ruleId":"497","severity":1,"message":"518","line":639,"column":32,"nodeType":"499","messageId":"500","endLine":639,"endColumn":41},{"ruleId":"497","severity":1,"message":"519","line":642,"column":26,"nodeType":"499","messageId":"500","endLine":642,"endColumn":29},{"ruleId":"497","severity":1,"message":"520","line":710,"column":13,"nodeType":"499","messageId":"500","endLine":710,"endColumn":23},{"ruleId":"497","severity":1,"message":"521","line":710,"column":25,"nodeType":"499","messageId":"500","endLine":710,"endColumn":33},{"ruleId":"497","severity":1,"message":"522","line":710,"column":35,"nodeType":"499","messageId":"500","endLine":710,"endColumn":41},{"ruleId":"497","severity":1,"message":"523","line":710,"column":43,"nodeType":"499","messageId":"500","endLine":710,"endColumn":51},{"ruleId":"497","severity":1,"message":"524","line":710,"column":53,"nodeType":"499","messageId":"500","endLine":710,"endColumn":70},{"ruleId":"497","severity":1,"message":"509","line":761,"column":29,"nodeType":"499","messageId":"500","endLine":761,"endColumn":39},{"ruleId":"497","severity":1,"message":"525","line":761,"column":79,"nodeType":"499","messageId":"500","endLine":761,"endColumn":84},{"ruleId":"497","severity":1,"message":"526","line":761,"column":117,"nodeType":"499","messageId":"500","endLine":761,"endColumn":139},{"ruleId":"497","severity":1,"message":"527","line":45,"column":9,"nodeType":"499","messageId":"500","endLine":45,"endColumn":16},{"ruleId":"497","severity":1,"message":"528","line":58,"column":5,"nodeType":"499","messageId":"500","endLine":58,"endColumn":8},{"ruleId":"497","severity":1,"message":"529","line":450,"column":22,"nodeType":"499","messageId":"500","endLine":450,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":1151,"column":9,"nodeType":"516","messageId":"517","endLine":1155,"endColumn":10},{"ruleId":"514","severity":1,"message":"515","line":1818,"column":5,"nodeType":"516","messageId":"517","endLine":1831,"endColumn":6},{"ruleId":"497","severity":1,"message":"530","line":2297,"column":17,"nodeType":"499","messageId":"500","endLine":2297,"endColumn":29},{"ruleId":"531","severity":1,"message":"532","line":2314,"column":59,"nodeType":"533","messageId":"534","endLine":2314,"endColumn":60,"suggestions":"535"},{"ruleId":"531","severity":1,"message":"536","line":2314,"column":165,"nodeType":"533","messageId":"534","endLine":2314,"endColumn":166,"suggestions":"537"},{"ruleId":"531","severity":1,"message":"532","line":2330,"column":59,"nodeType":"533","messageId":"534","endLine":2330,"endColumn":60,"suggestions":"538"},{"ruleId":"531","severity":1,"message":"536","line":2330,"column":165,"nodeType":"533","messageId":"534","endLine":2330,"endColumn":166,"suggestions":"539"},{"ruleId":"531","severity":1,"message":"532","line":2349,"column":59,"nodeType":"533","messageId":"534","endLine":2349,"endColumn":60,"suggestions":"540"},{"ruleId":"531","severity":1,"message":"536","line":2349,"column":165,"nodeType":"533","messageId":"534","endLine":2349,"endColumn":166,"suggestions":"541"},{"ruleId":"531","severity":1,"message":"532","line":2382,"column":59,"nodeType":"533","messageId":"534","endLine":2382,"endColumn":60,"suggestions":"542"},{"ruleId":"531","severity":1,"message":"536","line":2382,"column":165,"nodeType":"533","messageId":"534","endLine":2382,"endColumn":166,"suggestions":"543"},{"ruleId":"531","severity":1,"message":"532","line":2398,"column":59,"nodeType":"533","messageId":"534","endLine":2398,"endColumn":60,"suggestions":"544"},{"ruleId":"531","severity":1,"message":"536","line":2398,"column":165,"nodeType":"533","messageId":"534","endLine":2398,"endColumn":166,"suggestions":"545"},{"ruleId":"531","severity":1,"message":"532","line":2416,"column":59,"nodeType":"533","messageId":"534","endLine":2416,"endColumn":60,"suggestions":"546"},{"ruleId":"531","severity":1,"message":"536","line":2416,"column":165,"nodeType":"533","messageId":"534","endLine":2416,"endColumn":166,"suggestions":"547"},{"ruleId":"497","severity":1,"message":"520","line":2836,"column":11,"nodeType":"499","messageId":"500","endLine":2836,"endColumn":21},{"ruleId":"497","severity":1,"message":"521","line":2836,"column":23,"nodeType":"499","messageId":"500","endLine":2836,"endColumn":31},{"ruleId":"497","severity":1,"message":"522","line":2836,"column":33,"nodeType":"499","messageId":"500","endLine":2836,"endColumn":39},{"ruleId":"497","severity":1,"message":"548","line":2836,"column":65,"nodeType":"499","messageId":"500","endLine":2836,"endColumn":78},{"ruleId":"497","severity":1,"message":"549","line":2980,"column":30,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":37},{"ruleId":"497","severity":1,"message":"550","line":2980,"column":39,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":47},{"ruleId":"497","severity":1,"message":"551","line":2980,"column":49,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":58},{"ruleId":"497","severity":1,"message":"552","line":2980,"column":60,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":69},{"ruleId":"497","severity":1,"message":"525","line":2980,"column":71,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":76},{"ruleId":"497","severity":1,"message":"553","line":2980,"column":78,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":86},{"ruleId":"497","severity":1,"message":"554","line":2980,"column":88,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":94},{"ruleId":"497","severity":1,"message":"555","line":2980,"column":96,"nodeType":"499","messageId":"500","endLine":2980,"endColumn":99},{"ruleId":"531","severity":1,"message":"532","line":3273,"column":59,"nodeType":"533","messageId":"534","endLine":3273,"endColumn":60,"suggestions":"556"},{"ruleId":"531","severity":1,"message":"536","line":3273,"column":165,"nodeType":"533","messageId":"534","endLine":3273,"endColumn":166,"suggestions":"557"},{"ruleId":"531","severity":1,"message":"532","line":3290,"column":59,"nodeType":"533","messageId":"534","endLine":3290,"endColumn":60,"suggestions":"558"},{"ruleId":"531","severity":1,"message":"536","line":3290,"column":165,"nodeType":"533","messageId":"534","endLine":3290,"endColumn":166,"suggestions":"559"},{"ruleId":"560","replacedBy":"561"},{"ruleId":"562","replacedBy":"563"},{"ruleId":"514","severity":1,"message":"515","line":424,"column":9,"nodeType":"516","messageId":"517","endLine":431,"endColumn":10},{"ruleId":"497","severity":1,"message":"564","line":631,"column":15,"nodeType":"499","messageId":"500","endLine":631,"endColumn":25},{"ruleId":"497","severity":1,"message":"565","line":675,"column":17,"nodeType":"499","messageId":"500","endLine":675,"endColumn":26},{"ruleId":"497","severity":1,"message":"566","line":816,"column":13,"nodeType":"499","messageId":"500","endLine":816,"endColumn":16},{"ruleId":"497","severity":1,"message":"567","line":819,"column":15,"nodeType":"499","messageId":"500","endLine":819,"endColumn":30},{"ruleId":"497","severity":1,"message":"568","line":821,"column":15,"nodeType":"499","messageId":"500","endLine":821,"endColumn":30},{"ruleId":"497","severity":1,"message":"565","line":889,"column":17,"nodeType":"499","messageId":"500","endLine":889,"endColumn":26},{"ruleId":"497","severity":1,"message":"569","line":998,"column":11,"nodeType":"499","messageId":"500","endLine":998,"endColumn":22},{"ruleId":"560","replacedBy":"570"},{"ruleId":"562","replacedBy":"571"},{"ruleId":"560","replacedBy":"572"},{"ruleId":"562","replacedBy":"573"},{"ruleId":"514","severity":1,"message":"515","line":76,"column":11,"nodeType":"516","messageId":"517","endLine":97,"endColumn":12},{"ruleId":"497","severity":1,"message":"527","line":20,"column":9,"nodeType":"499","messageId":"500","endLine":20,"endColumn":16},{"ruleId":"497","severity":1,"message":"504","line":21,"column":9,"nodeType":"499","messageId":"500","endLine":21,"endColumn":15},{"ruleId":"497","severity":1,"message":"574","line":22,"column":7,"nodeType":"499","messageId":"500","endLine":22,"endColumn":13},{"ruleId":"497","severity":1,"message":"575","line":25,"column":5,"nodeType":"499","messageId":"500","endLine":25,"endColumn":12},{"ruleId":"497","severity":1,"message":"576","line":26,"column":5,"nodeType":"499","messageId":"500","endLine":26,"endColumn":17},{"ruleId":"497","severity":1,"message":"555","line":27,"column":5,"nodeType":"499","messageId":"500","endLine":27,"endColumn":8},{"ruleId":"497","severity":1,"message":"555","line":85,"column":61,"nodeType":"499","messageId":"500","endLine":85,"endColumn":64},{"ruleId":"497","severity":1,"message":"577","line":85,"column":66,"nodeType":"499","messageId":"500","endLine":85,"endColumn":75},{"ruleId":"578","severity":1,"message":"579","line":270,"column":15,"nodeType":"513","endLine":276,"endColumn":16},{"ruleId":"497","severity":1,"message":"580","line":46,"column":10,"nodeType":"499","messageId":"500","endLine":46,"endColumn":23},{"ruleId":"497","severity":1,"message":"581","line":48,"column":10,"nodeType":"499","messageId":"500","endLine":48,"endColumn":22},{"ruleId":"497","severity":1,"message":"582","line":49,"column":10,"nodeType":"499","messageId":"500","endLine":49,"endColumn":23},{"ruleId":"497","severity":1,"message":"583","line":50,"column":10,"nodeType":"499","messageId":"500","endLine":50,"endColumn":21},{"ruleId":"497","severity":1,"message":"584","line":52,"column":10,"nodeType":"499","messageId":"500","endLine":52,"endColumn":24},{"ruleId":"497","severity":1,"message":"585","line":52,"column":26,"nodeType":"499","messageId":"500","endLine":52,"endColumn":43},{"ruleId":"514","severity":1,"message":"515","line":175,"column":5,"nodeType":"516","messageId":"517","endLine":194,"endColumn":6},{"ruleId":"586","severity":1,"message":"587","line":344,"column":6,"nodeType":"588","endLine":344,"endColumn":8,"suggestions":"589"},{"ruleId":"497","severity":1,"message":"504","line":17,"column":9,"nodeType":"499","messageId":"500","endLine":17,"endColumn":15},{"ruleId":"560","replacedBy":"590"},{"ruleId":"562","replacedBy":"591"},{"ruleId":"560","replacedBy":"592"},{"ruleId":"562","replacedBy":"593"},{"ruleId":"497","severity":1,"message":"594","line":157,"column":61,"nodeType":"499","messageId":"500","endLine":157,"endColumn":75},{"ruleId":"586","severity":1,"message":"595","line":235,"column":6,"nodeType":"588","endLine":235,"endColumn":26,"suggestions":"596"},{"ruleId":"497","severity":1,"message":"597","line":4,"column":3,"nodeType":"499","messageId":"500","endLine":4,"endColumn":10},{"ruleId":"560","replacedBy":"598"},{"ruleId":"562","replacedBy":"599"},{"ruleId":"497","severity":1,"message":"574","line":19,"column":7,"nodeType":"499","messageId":"500","endLine":19,"endColumn":13},{"ruleId":"497","severity":1,"message":"527","line":53,"column":9,"nodeType":"499","messageId":"500","endLine":53,"endColumn":16},{"ruleId":"497","severity":1,"message":"574","line":55,"column":7,"nodeType":"499","messageId":"500","endLine":55,"endColumn":13},{"ruleId":"497","severity":1,"message":"600","line":82,"column":5,"nodeType":"499","messageId":"500","endLine":82,"endColumn":15},{"ruleId":"497","severity":1,"message":"601","line":215,"column":48,"nodeType":"499","messageId":"500","endLine":215,"endColumn":54},{"ruleId":"514","severity":1,"message":"515","line":334,"column":9,"nodeType":"516","messageId":"517","endLine":347,"endColumn":10},{"ruleId":"514","severity":1,"message":"515","line":747,"column":9,"nodeType":"516","messageId":"517","endLine":751,"endColumn":10},{"ruleId":"497","severity":1,"message":"602","line":755,"column":9,"nodeType":"499","messageId":"500","endLine":755,"endColumn":27},{"ruleId":"514","severity":1,"message":"515","line":1050,"column":11,"nodeType":"516","messageId":"517","endLine":1057,"endColumn":12},{"ruleId":"514","severity":1,"message":"515","line":1273,"column":13,"nodeType":"516","messageId":"517","endLine":1280,"endColumn":14},{"ruleId":"514","severity":1,"message":"515","line":1430,"column":13,"nodeType":"516","messageId":"517","endLine":1437,"endColumn":14},{"ruleId":"497","severity":1,"message":"603","line":1501,"column":15,"nodeType":"499","messageId":"500","endLine":1501,"endColumn":26},{"ruleId":"514","severity":1,"message":"515","line":2020,"column":9,"nodeType":"516","messageId":"517","endLine":2033,"endColumn":10},{"ruleId":"531","severity":1,"message":"536","line":2426,"column":36,"nodeType":"533","messageId":"534","endLine":2426,"endColumn":37,"suggestions":"604"},{"ruleId":"605","severity":1,"message":"606","line":2427,"column":47,"nodeType":"607","messageId":"608","endLine":2427,"endColumn":49},{"ruleId":"497","severity":1,"message":"609","line":2628,"column":107,"nodeType":"499","messageId":"500","endLine":2628,"endColumn":112},{"ruleId":"497","severity":1,"message":"610","line":3045,"column":11,"nodeType":"499","messageId":"500","endLine":3045,"endColumn":14},{"ruleId":"497","severity":1,"message":"611","line":3682,"column":17,"nodeType":"499","messageId":"500","endLine":3682,"endColumn":23},{"ruleId":"497","severity":1,"message":"520","line":4310,"column":13,"nodeType":"499","messageId":"500","endLine":4310,"endColumn":23},{"ruleId":"497","severity":1,"message":"521","line":4310,"column":25,"nodeType":"499","messageId":"500","endLine":4310,"endColumn":33},{"ruleId":"497","severity":1,"message":"522","line":4310,"column":35,"nodeType":"499","messageId":"500","endLine":4310,"endColumn":41},{"ruleId":"514","severity":1,"message":"515","line":4343,"column":17,"nodeType":"516","messageId":"517","endLine":4356,"endColumn":18},{"ruleId":"560","replacedBy":"612"},{"ruleId":"562","replacedBy":"613"},{"ruleId":"497","severity":1,"message":"614","line":49,"column":29,"nodeType":"499","messageId":"500","endLine":49,"endColumn":36},{"ruleId":"497","severity":1,"message":"615","line":49,"column":38,"nodeType":"499","messageId":"500","endLine":49,"endColumn":49},{"ruleId":"497","severity":1,"message":"616","line":49,"column":57,"nodeType":"499","messageId":"500","endLine":49,"endColumn":68},{"ruleId":"605","severity":1,"message":"606","line":243,"column":33,"nodeType":"607","messageId":"608","endLine":243,"endColumn":35},{"ruleId":"605","severity":1,"message":"606","line":243,"column":92,"nodeType":"607","messageId":"608","endLine":243,"endColumn":94},{"ruleId":"605","severity":1,"message":"606","line":243,"column":130,"nodeType":"607","messageId":"608","endLine":243,"endColumn":132},{"ruleId":"560","replacedBy":"617"},{"ruleId":"562","replacedBy":"618"},{"ruleId":"497","severity":1,"message":"619","line":56,"column":9,"nodeType":"499","messageId":"500","endLine":56,"endColumn":22},{"ruleId":"497","severity":1,"message":"619","line":86,"column":9,"nodeType":"499","messageId":"500","endLine":86,"endColumn":22},{"ruleId":"505","severity":1,"message":"506","line":198,"column":41,"nodeType":"507","messageId":"508","endLine":198,"endColumn":43},{"ruleId":"505","severity":1,"message":"506","line":211,"column":47,"nodeType":"507","messageId":"508","endLine":211,"endColumn":49},{"ruleId":"497","severity":1,"message":"609","line":416,"column":23,"nodeType":"499","messageId":"500","endLine":416,"endColumn":28},{"ruleId":"586","severity":1,"message":"620","line":55,"column":8,"nodeType":"588","endLine":55,"endColumn":10,"suggestions":"621"},{"ruleId":"586","severity":1,"message":"622","line":97,"column":8,"nodeType":"588","endLine":97,"endColumn":38,"suggestions":"623"},{"ruleId":"497","severity":1,"message":"624","line":354,"column":28,"nodeType":"499","messageId":"500","endLine":354,"endColumn":31},{"ruleId":"497","severity":1,"message":"625","line":354,"column":33,"nodeType":"499","messageId":"500","endLine":354,"endColumn":35},{"ruleId":"497","severity":1,"message":"626","line":354,"column":37,"nodeType":"499","messageId":"500","endLine":354,"endColumn":45},{"ruleId":"497","severity":1,"message":"627","line":31,"column":9,"nodeType":"499","messageId":"500","endLine":31,"endColumn":16},{"ruleId":"560","replacedBy":"628"},{"ruleId":"562","replacedBy":"629"},{"ruleId":"497","severity":1,"message":"630","line":23,"column":7,"nodeType":"499","messageId":"500","endLine":23,"endColumn":14},{"ruleId":"497","severity":1,"message":"523","line":320,"column":21,"nodeType":"499","messageId":"500","endLine":320,"endColumn":29},{"ruleId":"497","severity":1,"message":"631","line":320,"column":31,"nodeType":"499","messageId":"500","endLine":320,"endColumn":37},{"ruleId":"578","severity":1,"message":"579","line":480,"column":36,"nodeType":"513","endLine":480,"endColumn":71},{"ruleId":"586","severity":1,"message":"632","line":84,"column":6,"nodeType":"588","endLine":84,"endColumn":8,"suggestions":"633"},{"ruleId":"497","severity":1,"message":"504","line":21,"column":9,"nodeType":"499","messageId":"500","endLine":21,"endColumn":15},{"ruleId":"497","severity":1,"message":"634","line":44,"column":11,"nodeType":"499","messageId":"500","endLine":44,"endColumn":17},{"ruleId":"497","severity":1,"message":"635","line":44,"column":19,"nodeType":"499","messageId":"500","endLine":44,"endColumn":24},{"ruleId":"497","severity":1,"message":"619","line":60,"column":9,"nodeType":"499","messageId":"500","endLine":60,"endColumn":22},{"ruleId":"497","severity":1,"message":"551","line":143,"column":18,"nodeType":"499","messageId":"500","endLine":143,"endColumn":27},{"ruleId":"497","severity":1,"message":"550","line":143,"column":29,"nodeType":"499","messageId":"500","endLine":143,"endColumn":37},{"ruleId":"511","severity":1,"message":"512","line":547,"column":19,"nodeType":"513","endLine":554,"endColumn":61},{"ruleId":"578","severity":1,"message":"579","line":562,"column":19,"nodeType":"513","endLine":570,"endColumn":30},{"ruleId":"560","replacedBy":"636"},{"ruleId":"562","replacedBy":"637"},{"ruleId":"497","severity":1,"message":"504","line":21,"column":9,"nodeType":"499","messageId":"500","endLine":21,"endColumn":15},{"ruleId":"497","severity":1,"message":"634","line":37,"column":11,"nodeType":"499","messageId":"500","endLine":37,"endColumn":17},{"ruleId":"497","severity":1,"message":"635","line":37,"column":19,"nodeType":"499","messageId":"500","endLine":37,"endColumn":24},{"ruleId":"497","severity":1,"message":"619","line":53,"column":9,"nodeType":"499","messageId":"500","endLine":53,"endColumn":22},{"ruleId":"497","severity":1,"message":"638","line":72,"column":11,"nodeType":"499","messageId":"500","endLine":72,"endColumn":19},{"ruleId":"560","replacedBy":"639"},{"ruleId":"562","replacedBy":"640"},{"ruleId":"497","severity":1,"message":"641","line":19,"column":5,"nodeType":"499","messageId":"500","endLine":19,"endColumn":10},{"ruleId":"514","severity":1,"message":"515","line":165,"column":9,"nodeType":"516","messageId":"517","endLine":183,"endColumn":10},{"ruleId":"497","severity":1,"message":"642","line":99,"column":9,"nodeType":"499","messageId":"500","endLine":99,"endColumn":15},{"ruleId":"497","severity":1,"message":"643","line":188,"column":25,"nodeType":"499","messageId":"500","endLine":188,"endColumn":32},{"ruleId":"497","severity":1,"message":"644","line":188,"column":34,"nodeType":"499","messageId":"500","endLine":188,"endColumn":49},{"ruleId":"497","severity":1,"message":"645","line":188,"column":51,"nodeType":"499","messageId":"500","endLine":188,"endColumn":55},{"ruleId":"497","severity":1,"message":"646","line":189,"column":25,"nodeType":"499","messageId":"500","endLine":189,"endColumn":44},{"ruleId":"497","severity":1,"message":"647","line":189,"column":46,"nodeType":"499","messageId":"500","endLine":189,"endColumn":62},{"ruleId":"497","severity":1,"message":"648","line":189,"column":64,"nodeType":"499","messageId":"500","endLine":189,"endColumn":84},{"ruleId":"497","severity":1,"message":"649","line":189,"column":86,"nodeType":"499","messageId":"500","endLine":189,"endColumn":96},{"ruleId":"531","severity":1,"message":"650","line":347,"column":55,"nodeType":"651","messageId":"534","endLine":347,"endColumn":56,"suggestions":"652"},{"ruleId":"531","severity":1,"message":"650","line":347,"column":69,"nodeType":"651","messageId":"534","endLine":347,"endColumn":70,"suggestions":"653"},{"ruleId":"497","severity":1,"message":"654","line":545,"column":15,"nodeType":"499","messageId":"500","endLine":545,"endColumn":21},{"ruleId":"497","severity":1,"message":"624","line":557,"column":28,"nodeType":"499","messageId":"500","endLine":557,"endColumn":31},{"ruleId":"497","severity":1,"message":"625","line":557,"column":33,"nodeType":"499","messageId":"500","endLine":557,"endColumn":35},{"ruleId":"497","severity":1,"message":"626","line":557,"column":37,"nodeType":"499","messageId":"500","endLine":557,"endColumn":45},{"ruleId":"586","severity":1,"message":"655","line":163,"column":6,"nodeType":"588","endLine":163,"endColumn":23,"suggestions":"656"},{"ruleId":"511","severity":1,"message":"512","line":34,"column":11,"nodeType":"513","endLine":37,"endColumn":13},{"ruleId":"511","severity":1,"message":"512","line":43,"column":13,"nodeType":"513","endLine":46,"endColumn":15},{"ruleId":"511","severity":1,"message":"512","line":51,"column":11,"nodeType":"513","endLine":54,"endColumn":13},{"ruleId":"511","severity":1,"message":"512","line":64,"column":11,"nodeType":"513","endLine":67,"endColumn":13},{"ruleId":"514","severity":1,"message":"515","line":82,"column":13,"nodeType":"516","messageId":"517","endLine":111,"endColumn":14},{"ruleId":"497","severity":1,"message":"657","line":287,"column":45,"nodeType":"499","messageId":"500","endLine":287,"endColumn":59},{"ruleId":"497","severity":1,"message":"594","line":287,"column":61,"nodeType":"499","messageId":"500","endLine":287,"endColumn":75},{"ruleId":"497","severity":1,"message":"575","line":16,"column":5,"nodeType":"499","messageId":"500","endLine":16,"endColumn":12},{"ruleId":"586","severity":1,"message":"658","line":53,"column":6,"nodeType":"588","endLine":53,"endColumn":41,"suggestions":"659"},{"ruleId":"497","severity":1,"message":"660","line":20,"column":10,"nodeType":"499","messageId":"500","endLine":20,"endColumn":18},{"ruleId":"497","severity":1,"message":"574","line":25,"column":7,"nodeType":"499","messageId":"500","endLine":25,"endColumn":13},{"ruleId":"497","severity":1,"message":"661","line":348,"column":11,"nodeType":"499","messageId":"500","endLine":348,"endColumn":17},{"ruleId":"497","severity":1,"message":"662","line":416,"column":19,"nodeType":"499","messageId":"500","endLine":416,"endColumn":26},{"ruleId":"497","severity":1,"message":"663","line":417,"column":9,"nodeType":"499","messageId":"500","endLine":417,"endColumn":13},{"ruleId":"578","severity":1,"message":"579","line":582,"column":15,"nodeType":"513","endLine":582,"endColumn":50},{"ruleId":"497","severity":1,"message":"504","line":20,"column":9,"nodeType":"499","messageId":"500","endLine":20,"endColumn":15},{"ruleId":"497","severity":1,"message":"619","line":65,"column":9,"nodeType":"499","messageId":"500","endLine":65,"endColumn":22},{"ruleId":"497","severity":1,"message":"664","line":337,"column":9,"nodeType":"499","messageId":"500","endLine":337,"endColumn":25},{"ruleId":"497","severity":1,"message":"665","line":354,"column":11,"nodeType":"499","messageId":"500","endLine":354,"endColumn":24},{"ruleId":"497","severity":1,"message":"666","line":354,"column":142,"nodeType":"499","messageId":"500","endLine":354,"endColumn":148},{"ruleId":"497","severity":1,"message":"667","line":354,"column":150,"nodeType":"499","messageId":"500","endLine":354,"endColumn":160},{"ruleId":"497","severity":1,"message":"668","line":358,"column":7,"nodeType":"499","messageId":"500","endLine":358,"endColumn":17},{"ruleId":"497","severity":1,"message":"669","line":61,"column":13,"nodeType":"499","messageId":"500","endLine":61,"endColumn":22},{"ruleId":"497","severity":1,"message":"670","line":134,"column":32,"nodeType":"499","messageId":"500","endLine":134,"endColumn":48},{"ruleId":"497","severity":1,"message":"580","line":151,"column":15,"nodeType":"499","messageId":"500","endLine":151,"endColumn":28},{"ruleId":"497","severity":1,"message":"503","line":2,"column":10,"nodeType":"499","messageId":"500","endLine":2,"endColumn":16},{"ruleId":"497","severity":1,"message":"671","line":2,"column":36,"nodeType":"499","messageId":"500","endLine":2,"endColumn":44},{"ruleId":"497","severity":1,"message":"672","line":3,"column":10,"nodeType":"499","messageId":"500","endLine":3,"endColumn":22},{"ruleId":"497","severity":1,"message":"673","line":24,"column":18,"nodeType":"499","messageId":"500","endLine":24,"endColumn":24},{"ruleId":"497","severity":1,"message":"674","line":28,"column":10,"nodeType":"499","messageId":"500","endLine":28,"endColumn":17},{"ruleId":"497","severity":1,"message":"675","line":28,"column":19,"nodeType":"499","messageId":"500","endLine":28,"endColumn":29},{"ruleId":"511","severity":1,"message":"512","line":63,"column":16,"nodeType":"513","endLine":63,"endColumn":41},{"ruleId":"511","severity":1,"message":"512","line":65,"column":16,"nodeType":"513","endLine":65,"endColumn":41},{"ruleId":"511","severity":1,"message":"512","line":67,"column":16,"nodeType":"513","endLine":67,"endColumn":41},{"ruleId":"511","severity":1,"message":"512","line":69,"column":16,"nodeType":"513","endLine":69,"endColumn":41},{"ruleId":"586","severity":1,"message":"676","line":75,"column":3,"nodeType":"499","endLine":75,"endColumn":12,"suggestions":"677"},{"ruleId":"497","severity":1,"message":"678","line":1,"column":17,"nodeType":"499","messageId":"500","endLine":1,"endColumn":26},{"ruleId":"497","severity":1,"message":"679","line":1,"column":28,"nodeType":"499","messageId":"500","endLine":1,"endColumn":36},{"ruleId":"497","severity":1,"message":"680","line":20,"column":10,"nodeType":"499","messageId":"500","endLine":20,"endColumn":12},{"ruleId":"497","severity":1,"message":"681","line":5,"column":5,"nodeType":"499","messageId":"500","endLine":5,"endColumn":10},{"ruleId":"497","severity":1,"message":"682","line":11,"column":13,"nodeType":"499","messageId":"500","endLine":11,"endColumn":19},{"ruleId":"605","severity":1,"message":"683","line":14,"column":20,"nodeType":"607","messageId":"608","endLine":14,"endColumn":22},{"ruleId":"605","severity":1,"message":"683","line":62,"column":20,"nodeType":"607","messageId":"608","endLine":62,"endColumn":22},{"ruleId":"586","severity":1,"message":"684","line":143,"column":6,"nodeType":"588","endLine":143,"endColumn":8,"suggestions":"685"},{"ruleId":"586","severity":1,"message":"686","line":150,"column":6,"nodeType":"588","endLine":150,"endColumn":19,"suggestions":"687"},{"ruleId":"586","severity":1,"message":"632","line":160,"column":6,"nodeType":"588","endLine":160,"endColumn":8,"suggestions":"688"},{"ruleId":"497","severity":1,"message":"689","line":3,"column":3,"nodeType":"499","messageId":"500","endLine":3,"endColumn":8},{"ruleId":"497","severity":1,"message":"690","line":9,"column":3,"nodeType":"499","messageId":"500","endLine":9,"endColumn":8},{"ruleId":"497","severity":1,"message":"691","line":10,"column":3,"nodeType":"499","messageId":"500","endLine":10,"endColumn":7},{"ruleId":"497","severity":1,"message":"692","line":16,"column":8,"nodeType":"499","messageId":"500","endLine":16,"endColumn":15},{"ruleId":"497","severity":1,"message":"680","line":27,"column":10,"nodeType":"499","messageId":"500","endLine":27,"endColumn":12},{"ruleId":"497","severity":1,"message":"693","line":28,"column":10,"nodeType":"499","messageId":"500","endLine":28,"endColumn":28},{"ruleId":"497","severity":1,"message":"694","line":72,"column":5,"nodeType":"499","messageId":"500","endLine":72,"endColumn":22},{"ruleId":"497","severity":1,"message":"695","line":76,"column":5,"nodeType":"499","messageId":"500","endLine":76,"endColumn":23},{"ruleId":"696","severity":1,"message":"697","line":134,"column":61,"nodeType":"607","messageId":"698","endLine":134,"endColumn":62},{"ruleId":"696","severity":1,"message":"697","line":142,"column":45,"nodeType":"607","messageId":"698","endLine":142,"endColumn":46},{"ruleId":"586","severity":1,"message":"699","line":286,"column":6,"nodeType":"588","endLine":286,"endColumn":13,"suggestions":"700"},{"ruleId":"586","severity":1,"message":"701","line":308,"column":6,"nodeType":"588","endLine":308,"endColumn":26,"suggestions":"702"},{"ruleId":"497","severity":1,"message":"703","line":10,"column":10,"nodeType":"499","messageId":"500","endLine":10,"endColumn":14},{"ruleId":"497","severity":1,"message":"704","line":20,"column":10,"nodeType":"499","messageId":"500","endLine":20,"endColumn":14},{"ruleId":"497","severity":1,"message":"705","line":30,"column":10,"nodeType":"499","messageId":"500","endLine":30,"endColumn":16},{"ruleId":"497","severity":1,"message":"706","line":41,"column":10,"nodeType":"499","messageId":"500","endLine":41,"endColumn":16},{"ruleId":"497","severity":1,"message":"707","line":51,"column":10,"nodeType":"499","messageId":"500","endLine":51,"endColumn":15},{"ruleId":"497","severity":1,"message":"708","line":61,"column":10,"nodeType":"499","messageId":"500","endLine":61,"endColumn":15},{"ruleId":"497","severity":1,"message":"709","line":71,"column":10,"nodeType":"499","messageId":"500","endLine":71,"endColumn":15},{"ruleId":"497","severity":1,"message":"710","line":81,"column":10,"nodeType":"499","messageId":"500","endLine":81,"endColumn":15},{"ruleId":"497","severity":1,"message":"711","line":91,"column":10,"nodeType":"499","messageId":"500","endLine":91,"endColumn":16},{"ruleId":"497","severity":1,"message":"712","line":101,"column":10,"nodeType":"499","messageId":"500","endLine":101,"endColumn":16},{"ruleId":"497","severity":1,"message":"597","line":5,"column":3,"nodeType":"499","messageId":"500","endLine":5,"endColumn":10},{"ruleId":"497","severity":1,"message":"713","line":10,"column":10,"nodeType":"499","messageId":"500","endLine":10,"endColumn":24},{"ruleId":"497","severity":1,"message":"714","line":12,"column":10,"nodeType":"499","messageId":"500","endLine":12,"endColumn":22},{"ruleId":"497","severity":1,"message":"715","line":29,"column":19,"nodeType":"499","messageId":"500","endLine":29,"endColumn":29},{"ruleId":"497","severity":1,"message":"716","line":30,"column":20,"nodeType":"499","messageId":"500","endLine":30,"endColumn":32},{"ruleId":"497","severity":1,"message":"717","line":31,"column":10,"nodeType":"499","messageId":"500","endLine":31,"endColumn":17},{"ruleId":"497","severity":1,"message":"718","line":35,"column":19,"nodeType":"499","messageId":"500","endLine":35,"endColumn":29},{"ruleId":"586","severity":1,"message":"632","line":84,"column":6,"nodeType":"588","endLine":84,"endColumn":8,"suggestions":"719"},{"ruleId":"497","severity":1,"message":"720","line":2,"column":10,"nodeType":"499","messageId":"500","endLine":2,"endColumn":15},{"ruleId":"497","severity":1,"message":"721","line":2,"column":17,"nodeType":"499","messageId":"500","endLine":2,"endColumn":27},{"ruleId":"497","severity":1,"message":"503","line":23,"column":8,"nodeType":"499","messageId":"500","endLine":23,"endColumn":14},{"ruleId":"505","severity":1,"message":"506","line":225,"column":41,"nodeType":"507","messageId":"508","endLine":225,"endColumn":43},{"ruleId":"505","severity":1,"message":"506","line":237,"column":47,"nodeType":"507","messageId":"508","endLine":237,"endColumn":49},{"ruleId":"497","severity":1,"message":"609","line":451,"column":23,"nodeType":"499","messageId":"500","endLine":451,"endColumn":28},{"ruleId":"497","severity":1,"message":"722","line":830,"column":11,"nodeType":"499","messageId":"500","endLine":830,"endColumn":18},{"ruleId":"497","severity":1,"message":"723","line":832,"column":11,"nodeType":"499","messageId":"500","endLine":832,"endColumn":15},{"ruleId":"497","severity":1,"message":"724","line":850,"column":9,"nodeType":"499","messageId":"500","endLine":850,"endColumn":18},{"ruleId":"497","severity":1,"message":"725","line":938,"column":65,"nodeType":"499","messageId":"500","endLine":938,"endColumn":76},"no-unused-vars","'Close' is defined but never used.","Identifier","unusedVar","'MyModal' is defined but never used.","'PhoneBook' is defined but never used.","'Button' is defined but never used.","'Option' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petSpecies' is assigned a value but never used.","'imgurl' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'patientId' is assigned a value but never used.","'age' is assigned a value but never used.","'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'disabled' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'isMix' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'SubMenu' is assigned a value but never used.","'num' is assigned a value but never used.","'wen1' is assigned a value but never used.","'placeholder1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["726","727"],"Unnecessary escape character: \\-.",["728","729"],["730","731"],["732","733"],["734","735"],["736","737"],["738","739"],["740","741"],["742","743"],["744","745"],["746","747"],["748","749"],"'measuerStatus' is assigned a value but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'breedName' is assigned a value but never used.","'birthday' is assigned a value but never used.","'weight' is assigned a value but never used.","'url' is assigned a value but never used.",["750","751"],["752","753"],["754","755"],["756","757"],"no-native-reassign",["758"],"no-negated-in-lhs",["759"],"'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'mac' is assigned a value but never used.","'hardwareVersion' is assigned a value but never used.","'softwareVersion' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.",["758"],["759"],["758"],["759"],"'MyIcon' is assigned a value but never used.","'storage' is assigned a value but never used.","'errPatientId' is assigned a value but never used.","'userImage' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'connectionKey' is assigned a value but never used.","'selectRoleId' is assigned a value but never used.","'workplaceName' is assigned a value but never used.","'workplaceId' is assigned a value but never used.","'organizationId' is assigned a value but never used.","'setOrganizationId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.","ArrayExpression",["760"],["758"],["759"],["758"],["759"],"'editInputValue' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["761"],"'message' is defined but never used.",["758"],["759"],"'biggieSave' is assigned a value but never used.","'gender' is assigned a value but never used.","'lastConnectionTime' is assigned a value but never used.","'weightUnits' is assigned a value but never used.",["762","763"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'petId' is assigned a value but never used.","'pas' is assigned a value but never used.","'temp15' is assigned a value but never used.",["758"],["759"],"'address' is assigned a value but never used.","'displayName' is assigned a value but never used.","'phoneNumber' is assigned a value but never used.",["758"],["759"],"'windowsHeight' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["764"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["765"],"'api' is assigned a value but never used.","'id' is assigned a value but never used.","'seleceID' is assigned a value but never used.","'_resend' is assigned a value but never used.",["758"],["759"],"'options' is assigned a value but never used.","'bounds' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'destroyOnClose' and 'width'. Either include them or remove the dependency array. If 'setIsdestroyOnClose' needs the current value of 'destroyOnClose', you can also switch to useReducer instead of useState and read 'destroyOnClose' in the reducer.",["766"],"'height' is assigned a value but never used.","'width' is assigned a value but never used.",["758"],["759"],"'isUnKnow' is assigned a value but never used.",["758"],["759"],"'num07' is assigned a value but never used.","'params' is assigned a value but never used.","'bree_id' is assigned a value but never used.","'animalcolour_id' is assigned a value but never used.","'guid' is assigned a value but never used.","'referring_clinic_id' is assigned a value but never used.","'referring_vet_id' is assigned a value but never used.","'residence_contact_id' is assigned a value but never used.","'species_id' is assigned a value but never used.","Unnecessary escape character: \\\".","TemplateElement",["767","768"],["769","770"],"'chazhi' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["771"],"'editInputIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareInfo'. Either include it or remove the dependency array.",["772"],"'addLogin' is defined but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","'selectDeviceName' is assigned a value but never used.","'isClicleStudy' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'showsortBy' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'chooseNum' is assigned a value but never used.","'lastOrganization' is assigned a value but never used.","'Carousel' is defined but never used.","'PlusOutlined' is defined but never used.","'Header' is assigned a value but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["773"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'px' is defined but never used.","'token' is assigned a value but never used.","'header' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'getAllPet'. Either include it or remove the dependency array.",["774"],"React Hook useEffect has a missing dependency: 'searchPetByPetNameOrPatientId'. Either include it or remove the dependency array.",["775"],["776"],"'Image' is defined but never used.","'Space' is defined but never used.","'Card' is defined but never used.","'Charlie' is defined but never used.","'devicesTitleHeight' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'selectHardwareInfo' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["777"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["778"],"'CtoF' is defined but never used.","'FtoC' is defined but never used.","'KgtoLb' is defined but never used.","'LbtoKg' is defined but never used.","'GToMl' is defined but never used.","'MltoG' is defined but never used.","'GToOz' is defined but never used.","'OztoG' is defined but never used.","'CmtoIn' is defined but never used.","'IntoCm' is defined but never used.","'SearchOutlined' is defined but never used.","'fetchRequest' is defined but never used.","'setLoading' is assigned a value but never used.","'setBreedList' is assigned a value but never used.","'imageId' is assigned a value but never used.","'setBreedId' is assigned a value but never used.",["779"],"'Table' is defined but never used.","'Popconfirm' is defined but never used.","'loading' is assigned a value but never used.","'_del' is assigned a value but never used.","'tableData' is assigned a value but never used.","'historyData' is assigned a value but never used.",{"messageId":"780","fix":"781","desc":"782"},{"messageId":"783","fix":"784","desc":"785"},{"messageId":"780","fix":"786","desc":"782"},{"messageId":"783","fix":"787","desc":"785"},{"messageId":"780","fix":"788","desc":"782"},{"messageId":"783","fix":"789","desc":"785"},{"messageId":"780","fix":"790","desc":"782"},{"messageId":"783","fix":"791","desc":"785"},{"messageId":"780","fix":"792","desc":"782"},{"messageId":"783","fix":"793","desc":"785"},{"messageId":"780","fix":"794","desc":"782"},{"messageId":"783","fix":"795","desc":"785"},{"messageId":"780","fix":"796","desc":"782"},{"messageId":"783","fix":"797","desc":"785"},{"messageId":"780","fix":"798","desc":"782"},{"messageId":"783","fix":"799","desc":"785"},{"messageId":"780","fix":"800","desc":"782"},{"messageId":"783","fix":"801","desc":"785"},{"messageId":"780","fix":"802","desc":"782"},{"messageId":"783","fix":"803","desc":"785"},{"messageId":"780","fix":"804","desc":"782"},{"messageId":"783","fix":"805","desc":"785"},{"messageId":"780","fix":"806","desc":"782"},{"messageId":"783","fix":"807","desc":"785"},{"messageId":"780","fix":"808","desc":"782"},{"messageId":"783","fix":"809","desc":"785"},{"messageId":"780","fix":"810","desc":"782"},{"messageId":"783","fix":"811","desc":"785"},{"messageId":"780","fix":"812","desc":"782"},{"messageId":"783","fix":"813","desc":"785"},{"messageId":"780","fix":"814","desc":"782"},{"messageId":"783","fix":"815","desc":"785"},"no-global-assign","no-unsafe-negation",{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"messageId":"780","fix":"820","desc":"782"},{"messageId":"783","fix":"821","desc":"785"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"messageId":"780","fix":"828","desc":"782"},{"messageId":"783","fix":"829","desc":"785"},{"messageId":"780","fix":"830","desc":"782"},{"messageId":"783","fix":"831","desc":"785"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"desc":"836","fix":"837"},{"desc":"838","fix":"839"},{"desc":"840","fix":"841"},{"desc":"826","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"826","fix":"847"},"removeEscape",{"range":"848","text":"849"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"850","text":"851"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"852","text":"849"},{"range":"853","text":"851"},{"range":"854","text":"849"},{"range":"855","text":"851"},{"range":"856","text":"849"},{"range":"857","text":"851"},{"range":"858","text":"849"},{"range":"859","text":"851"},{"range":"860","text":"849"},{"range":"861","text":"851"},{"range":"862","text":"849"},{"range":"863","text":"851"},{"range":"864","text":"849"},{"range":"865","text":"851"},{"range":"866","text":"849"},{"range":"867","text":"851"},{"range":"868","text":"849"},{"range":"869","text":"851"},{"range":"870","text":"849"},{"range":"871","text":"851"},{"range":"872","text":"849"},{"range":"873","text":"851"},{"range":"874","text":"849"},{"range":"875","text":"851"},{"range":"876","text":"849"},{"range":"877","text":"851"},{"range":"878","text":"849"},{"range":"879","text":"851"},{"range":"880","text":"849"},{"range":"881","text":"851"},"Update the dependencies array to be: [_getExam]",{"range":"882","text":"883"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"884","text":"885"},{"range":"886","text":"849"},{"range":"887","text":"851"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"888","text":"889"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"890","text":"891"},"Update the dependencies array to be: [destroyOnClose, width]",{"range":"892","text":"893"},{"range":"894","text":"849"},{"range":"895","text":"851"},{"range":"896","text":"849"},{"range":"897","text":"851"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"898","text":"899"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo]",{"range":"900","text":"901"},"Add dependencies array: [callBack, timers]",{"range":"902","text":"903"},"Update the dependencies array to be: [getAllPet]",{"range":"904","text":"905"},"Update the dependencies array to be: [searchPetByPetNameOrPatientId, searchValue]",{"range":"906","text":"907"},{"range":"908","text":"893"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"909","text":"910"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"911","text":"912"},{"range":"913","text":"893"},[68508,68509],"",[68508,68508],"\\",[68614,68615],[68614,68614],[69452,69453],[69452,69452],[69558,69559],[69558,69558],[70414,70415],[70414,70414],[70520,70521],[70520,70520],[71824,71825],[71824,71824],[71930,71931],[71930,71930],[72730,72731],[72730,72730],[72836,72837],[72836,72836],[73731,73732],[73731,73731],[73837,73838],[73837,73837],[98916,98917],[98916,98916],[99022,99023],[99022,99022],[99609,99610],[99609,99609],[99715,99716],[99715,99715],[10329,10331],"[_getExam]",[7233,7253],"[hardwareList, selectHardwareInfo, selectHardwareType]",[75008,75009],[75008,75008],[2226,2228],"[setReceiveBroadcastHardwareInfoFun]",[3537,3567],"[devicesList, receiveBroadcastHardwareInfo]",[2109,2111],"[destroyOnClose, width]",[12703,12704],[12703,12703],[12717,12718],[12717,12717],[4546,4563],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[1906,1941],"[selectHardwareType, hardwareList, hardwareInfo]",[2257,2257],", [callBack, timers]",[3926,3928],"[getAllPet]",[4059,4072],"[searchPetByPetNameOrPatientId, searchValue]",[4267,4269],[8224,8231],"[callBack, prediction, timeNum, value]",[8853,8873],"[mellaConnectStatus, value]",[2252,2254]]