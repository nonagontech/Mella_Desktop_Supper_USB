[{"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx":"1","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\index.js":"2","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\home\\Home.jsx":"3","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectLocation\\VerifyOrganizationInformation.jsx":"4","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\AddYuding.jsx":"5","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\praviders\\Praviders.jsx":"6","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectExam\\SelectExam.jsx":"7","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\Mesasure.jsx":"8","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\joinOrganizationByOption\\JoinOrganizationByOption.jsx":"9","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\verifyEmail\\index.jsx":"10","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newWorkplace\\NewWorkplace.jsx":"11","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\unassigned\\Unassigned.jsx":"12","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\invite\\Invite.jsx":"13","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\editParent\\EditParent.jsx":"14","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\ConnectWorkplace.jsx":"15","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\InviteTeam.jsx":"16","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchEszVet.js":"17","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\px.js":"18","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js":"19","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil3.js":"20","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js":"21","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js":"22","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js":"23","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js":"24","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\PetsUI.jsx":"25","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil4.js":"26","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx":"27","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js":"28","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx":"29","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js":"30","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js":"31","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx":"32","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx":"33","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx":"34","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\App.js":"35","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectTime\\EzyVetSelectTime.jsx":"36","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectMella\\SelectMella.jsx":"37","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectScheduledExam.jsx":"38","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\SignIn.jsx":"39","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\forgotPassword\\ForgotPassword.jsx":"40","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\editPetInfo\\EditPetInfo.jsx":"41","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyWorkplace\\FindMyWorkplace.jsx":"42","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\inviteTeam\\InviteTeam.jsx":"43","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\help\\Help.jsx":"44","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\petAndParents\\PetAndParents.jsx":"45","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\NewOrganization.jsx":"46","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\gender.js":"47","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx":"48","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js":"49","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardAndPetsUI.jsx":"50","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx":"51","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js":"52","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx":"53","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx":"54","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx":"55","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js":"56","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js":"57","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx":"58","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx":"59","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js":"60","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\Fetch_token.js":"61","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js":"62","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\index.js":"63","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\choose\\Choose.jsx":"64","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetLogin\\EzyVetLogin.jsx":"65","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\apiKey\\APIKey.jsx":"66","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\workPlace\\WorkPlace.jsx":"67","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorAddPet\\DoctorAddPet.jsx":"68","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\scanCodeLogin\\ScanCodeLogin.jsx":"69","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx":"70","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyOrganization\\FindMyOrganization.jsx":"71","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newOrganization\\NewOrganization.jsx":"72","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil2.js":"73","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js":"74","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx":"75","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\AddDevice.jsx":"76","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.js":"77","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx":"78","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx":"79","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx":"80","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil5.js":"81","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx":"82","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\resetPassword\\ResetPassword.jsx":"83","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\ishavePMS\\IsHavePMS.jsx":"84","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\index.jsx":"85","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js":"86","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js":"87","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js":"88","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\Biggie.jsx":"89","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js":"90","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx":"91","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js":"92","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\vetProfile\\VetPrifile.jsx":"93","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\advancedSettings\\AdvancedSettings.jsx":"94","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\addDevice\\AddDevice.jsx":"95","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js":"96","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\hardWareTypeUI.jsx":"97","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx":"98","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardListModal.jsx":"99","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil.js":"100","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js":"101","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js":"102","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectAllExam.jsx":"103","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js":"104","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\current.js":"105","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\settings\\Settings.jsx":"106","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\NorMalMeasurement.jsx":"107","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx":"108","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\admin_VetProfile\\Veterinarians.jsx":"109","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js":"110","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx":"111","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx":"112","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx":"113","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx":"114","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectExam\\EzyVetSelectExam.js":"115","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js":"116","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx":"117","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js":"118","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx":"119"},{"size":3669,"mtime":1657716047840,"results":"120","hashOfConfig":"121"},{"size":577,"mtime":1657680900931,"results":"122","hashOfConfig":"121"},{"size":6457,"mtime":1657622269625,"results":"123","hashOfConfig":"121"},{"size":10192,"mtime":1655168677490,"results":"124","hashOfConfig":"121"},{"size":12945,"mtime":1655467295802,"results":"125","hashOfConfig":"121"},{"size":6468,"mtime":1657873680144,"results":"126","hashOfConfig":"121"},{"size":12757,"mtime":1655168677486,"results":"127","hashOfConfig":"121"},{"size":113337,"mtime":1658121363223,"results":"128","hashOfConfig":"121"},{"size":17948,"mtime":1657786565842,"results":"129","hashOfConfig":"121"},{"size":4706,"mtime":1655168677413,"results":"130","hashOfConfig":"121"},{"size":13023,"mtime":1655168677410,"results":"131","hashOfConfig":"121"},{"size":39336,"mtime":1657873339308,"results":"132","hashOfConfig":"121"},{"size":6972,"mtime":1655168677464,"results":"133","hashOfConfig":"121"},{"size":11451,"mtime":1655168677459,"results":"134","hashOfConfig":"121"},{"size":8985,"mtime":1657871208928,"results":"135","hashOfConfig":"121"},{"size":13508,"mtime":1658121413043,"results":"136","hashOfConfig":"121"},{"size":3579,"mtime":1655168677525,"results":"137","hashOfConfig":"121"},{"size":3102,"mtime":1657694556682,"results":"138","hashOfConfig":"121"},{"size":3438,"mtime":1659950577532,"results":"139","hashOfConfig":"121"},{"size":2624,"mtime":1655168677529,"results":"140","hashOfConfig":"121"},{"size":1451,"mtime":1655168677805,"results":"141","hashOfConfig":"121"},{"size":17788,"mtime":1659945946500,"results":"142","hashOfConfig":"121"},{"size":52965,"mtime":1659921970481,"results":"143","hashOfConfig":"121"},{"size":4641,"mtime":1656498255379,"results":"144","hashOfConfig":"121"},{"size":7864,"mtime":1659958731474,"results":"145","hashOfConfig":"121"},{"size":3126,"mtime":1655168677530,"results":"146","hashOfConfig":"121"},{"size":7630,"mtime":1657699221595,"results":"147","hashOfConfig":"121"},{"size":74,"mtime":1659954103488,"results":"148","hashOfConfig":"121"},{"size":1984,"mtime":1658468399933,"results":"149","hashOfConfig":"121"},{"size":372,"mtime":1657709885011,"results":"150","hashOfConfig":"121"},{"size":89,"mtime":1655467295873,"results":"151","hashOfConfig":"121"},{"size":1232,"mtime":1657622269661,"results":"152","hashOfConfig":"121"},{"size":6697,"mtime":1657714986705,"results":"153","hashOfConfig":"121"},{"size":11843,"mtime":1658226522487,"results":"154","hashOfConfig":"121"},{"size":7380,"mtime":1659921321634,"results":"155","hashOfConfig":"121"},{"size":5178,"mtime":1655168677434,"results":"156","hashOfConfig":"121"},{"size":3973,"mtime":1655168677493,"results":"157","hashOfConfig":"121"},{"size":39476,"mtime":1655467295805,"results":"158","hashOfConfig":"121"},{"size":18494,"mtime":1657877382194,"results":"159","hashOfConfig":"121"},{"size":12510,"mtime":1658121443727,"results":"160","hashOfConfig":"121"},{"size":35824,"mtime":1659925049526,"results":"161","hashOfConfig":"121"},{"size":6453,"mtime":1657269085098,"results":"162","hashOfConfig":"121"},{"size":13209,"mtime":1658121326034,"results":"163","hashOfConfig":"121"},{"size":4924,"mtime":1655168677462,"results":"164","hashOfConfig":"121"},{"size":12616,"mtime":1655168677474,"results":"165","hashOfConfig":"121"},{"size":16247,"mtime":1655168677470,"results":"166","hashOfConfig":"121"},{"size":152,"mtime":1655168677794,"results":"167","hashOfConfig":"121"},{"size":1410,"mtime":1655168677807,"results":"168","hashOfConfig":"121"},{"size":11452,"mtime":1655168677771,"results":"169","hashOfConfig":"121"},{"size":3555,"mtime":1657699159519,"results":"170","hashOfConfig":"121"},{"size":2811,"mtime":1659944507368,"results":"171","hashOfConfig":"121"},{"size":91,"mtime":1655467295880,"results":"172","hashOfConfig":"121"},{"size":8517,"mtime":1657699366126,"results":"173","hashOfConfig":"121"},{"size":1458,"mtime":1657706185451,"results":"174","hashOfConfig":"121"},{"size":5204,"mtime":1657704501912,"results":"175","hashOfConfig":"121"},{"size":3856,"mtime":1656498255377,"results":"176","hashOfConfig":"121"},{"size":224,"mtime":1655467295875,"results":"177","hashOfConfig":"121"},{"size":11249,"mtime":1657702633192,"results":"178","hashOfConfig":"121"},{"size":1562,"mtime":1657271071421,"results":"179","hashOfConfig":"121"},{"size":3044,"mtime":1655168677819,"results":"180","hashOfConfig":"121"},{"size":3717,"mtime":1655168677531,"results":"181","hashOfConfig":"121"},{"size":846,"mtime":1655168677772,"results":"182","hashOfConfig":"121"},{"size":380,"mtime":1658472174932,"results":"183","hashOfConfig":"121"},{"size":3737,"mtime":1655168677392,"results":"184","hashOfConfig":"121"},{"size":7357,"mtime":1655168677429,"results":"185","hashOfConfig":"121"},{"size":8762,"mtime":1655168677387,"results":"186","hashOfConfig":"121"},{"size":9743,"mtime":1655168677505,"results":"187","hashOfConfig":"121"},{"size":39718,"mtime":1657869468627,"results":"188","hashOfConfig":"121"},{"size":6007,"mtime":1655168677501,"results":"189","hashOfConfig":"121"},{"size":2615,"mtime":1655168677801,"results":"190","hashOfConfig":"121"},{"size":3459,"mtime":1655168677395,"results":"191","hashOfConfig":"121"},{"size":16461,"mtime":1658122908371,"results":"192","hashOfConfig":"121"},{"size":2667,"mtime":1655168677528,"results":"193","hashOfConfig":"121"},{"size":1041,"mtime":1655168677775,"results":"194","hashOfConfig":"121"},{"size":3371,"mtime":1655168677813,"results":"195","hashOfConfig":"121"},{"size":14685,"mtime":1657699131947,"results":"196","hashOfConfig":"121"},{"size":8774,"mtime":1657699268121,"results":"197","hashOfConfig":"121"},{"size":57562,"mtime":1659600100637,"results":"198","hashOfConfig":"121"},{"size":12515,"mtime":1657877547105,"results":"199","hashOfConfig":"121"},{"size":12123,"mtime":1657622269648,"results":"200","hashOfConfig":"121"},{"size":3658,"mtime":1655168677531,"results":"201","hashOfConfig":"121"},{"size":8224,"mtime":1657874652863,"results":"202","hashOfConfig":"121"},{"size":7651,"mtime":1655168677499,"results":"203","hashOfConfig":"121"},{"size":1675,"mtime":1657868968877,"results":"204","hashOfConfig":"121"},{"size":35545,"mtime":1659922121097,"results":"205","hashOfConfig":"121"},{"size":431,"mtime":1655168677773,"results":"206","hashOfConfig":"121"},{"size":465,"mtime":1657709941429,"results":"207","hashOfConfig":"121"},{"size":2103,"mtime":1656498255375,"results":"208","hashOfConfig":"121"},{"size":4595,"mtime":1655727114179,"results":"209","hashOfConfig":"121"},{"size":88,"mtime":1657709847680,"results":"210","hashOfConfig":"121"},{"size":1365,"mtime":1655880805276,"results":"211","hashOfConfig":"121"},{"size":4449,"mtime":1655168677816,"results":"212","hashOfConfig":"121"},{"size":17372,"mtime":1655168677415,"results":"213","hashOfConfig":"121"},{"size":9784,"mtime":1656498255345,"results":"214","hashOfConfig":"121"},{"size":13651,"mtime":1655168677451,"results":"215","hashOfConfig":"121"},{"size":343,"mtime":1655168677793,"results":"216","hashOfConfig":"121"},{"size":5194,"mtime":1658467332734,"results":"217","hashOfConfig":"121"},{"size":12986,"mtime":1657699200148,"results":"218","hashOfConfig":"121"},{"size":8152,"mtime":1656067360425,"results":"219","hashOfConfig":"121"},{"size":3403,"mtime":1655168677526,"results":"220","hashOfConfig":"121"},{"size":249,"mtime":1655467295885,"results":"221","hashOfConfig":"121"},{"size":2445,"mtime":1655168677803,"results":"222","hashOfConfig":"121"},{"size":38409,"mtime":1655793172098,"results":"223","hashOfConfig":"121"},{"size":1275,"mtime":1655168677817,"results":"224","hashOfConfig":"121"},{"size":1150,"mtime":1655427981745,"results":"225","hashOfConfig":"121"},{"size":26702,"mtime":1657873214897,"results":"226","hashOfConfig":"121"},{"size":137290,"mtime":1659425549426,"results":"227","hashOfConfig":"121"},{"size":1738,"mtime":1658479581468,"results":"228","hashOfConfig":"121"},{"size":15939,"mtime":1655168677454,"results":"229","hashOfConfig":"121"},{"size":532,"mtime":1655467295881,"results":"230","hashOfConfig":"121"},{"size":2695,"mtime":1658483746593,"results":"231","hashOfConfig":"121"},{"size":2086,"mtime":1658483988657,"results":"232","hashOfConfig":"121"},{"size":2508,"mtime":1658483803920,"results":"233","hashOfConfig":"121"},{"size":1201,"mtime":1658485132416,"results":"234","hashOfConfig":"121"},{"size":52226,"mtime":1657870031391,"results":"235","hashOfConfig":"121"},{"size":71,"mtime":1657699049494,"results":"236","hashOfConfig":"121"},{"size":16820,"mtime":1659958952002,"results":"237","hashOfConfig":"121"},{"size":697,"mtime":1655467295909,"results":"238","hashOfConfig":"121"},{"size":10537,"mtime":1659953810186,"results":"239","hashOfConfig":"121"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"243"},"1wlgw0n",{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"243"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"259"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"243"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"249"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"263"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"243"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"243"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"249"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"243"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"263"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"243"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"243"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"259"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"243"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"253"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"243"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"249"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"336"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"253"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"243"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"263"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"243"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"243"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"263"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"359","messages":"360","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"253"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"249"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"243"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"243"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"374"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"263"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"285"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"243"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"243"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"243"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"263"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"336"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"285"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"243"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"253"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"263"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"374"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"249"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"263"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"263"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"259"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"243"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"243"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"253"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"253"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"263"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"263"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"243"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"285"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"243"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"253"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"243"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"243"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"243"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"249"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"249"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"263"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"374"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"263"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"374"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"243"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"249"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"249"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"263"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"263"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"263"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"536","messages":"537","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"374"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"243"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"285"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"249"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"263"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"243"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"263"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measurement.jsx",["567","568","569","570","571","572","573","574","575","576","577"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Progress, Layout, Carousel } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport Animation_1 from \"./../../../assets/img/Animation_1.png\";\r\nimport Animation_2 from \"./../../../assets/img/Animation_2.png\";\r\nimport Animation_3 from \"./../../../assets/img/Animation_3.png\";\r\n// import HeaderItem from './headerItem';\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport \"./measurement.less\";\r\nimport { px } from \"../../../utils/px\";\r\nimport electronStore from \"../../../utils/electronStore\";\r\n\r\nlet storage = window.localStorage;\r\nconst { Content, Header } = Layout;\r\n\r\nconst Measurement = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaMeasureValue, mellaMeasurePart } = hardwareMessage;\r\n  const [percent, setPercent] = useState(0);\r\n  const [value, setValue] = useState(0);\r\n  const [timers, setTimers] = useState(0);\r\n  const [isHua, setIsHua] = useState(true);\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    const random = 1;\r\n    setValue(value + random);\r\n    setTimers(timers + random);\r\n  };\r\n\r\n  //圆滑里面的文字\r\n  const ProgressTitle = (percent) => {\r\n    let num = parseFloat(percent);\r\n    if (isHua) {\r\n      num = parseInt((num * 1.8 + 32) * 10) / 10;\r\n    }\r\n    return (\r\n      <>\r\n        {mellaMeasurePart !== \"耳温\" ? (\r\n          <p className=\"ProgressTitle\">\r\n            {num}\r\n            <span className=\"symbol\">{`${isHua ? \"℉\" : \"℃\"}`}</span>\r\n          </p>\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <p className=\"ProgressTitle\">Measuring</p>\r\n      </>\r\n    );\r\n  };\r\n  //图片切换\r\n  const checkImage = () => {\r\n    switch (timers) {\r\n      case 0:\r\n        return <img src={Animation_1} />;\r\n      case 1:\r\n        return <img src={Animation_2} />;\r\n      case 2:\r\n        return <img src={Animation_3} />;\r\n      case 3:\r\n        return <img src={Animation_3} />;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (timers > 2) {\r\n      setTimers(0);\r\n    }\r\n    return () => { };\r\n  });\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    const timer = setInterval(tick, 1000);\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (hardSet) {\r\n      let { isHua } = hardSet;\r\n      setIsHua(isHua);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* <HeaderItem /> */}\r\n      <Content className={\"measureContentBox\"}>\r\n        <div style={{ marginTop: px(33) }}>\r\n          <Progress\r\n            type=\"dashboard\"\r\n            percent={_.round(mellaMeasureValue, 1)}\r\n            gapDegree={30}\r\n            width={px(260)}\r\n            strokeWidth={\"8\"}\r\n            format={(percent) => ProgressTitle(percent)}\r\n            strokeColor={'#4C595E'}\r\n          />\r\n        </div>\r\n\r\n        {checkImage()}\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(Measurement);\r\n",["578","579"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\home\\Home.jsx",["580","581"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    message\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\nimport './home.less'\r\nimport logo from './../../assets/images/mella.png'\r\n// import MaxMin from './../../utils/maxMin/MaxMin'\r\nimport temporaryStorage from './../../utils/temporaryStorage'\r\nimport { px, mTop, win, timerFun } from './../../utils/px'\r\nimport MinClose from '../../utils/minClose/MinClose';\r\nimport electronStore from './../../utils/electronStore'\r\nimport SelectionBox from './../../utils/selectionBox/SelectionBox'\r\nimport { addQRCode } from '../../utils/axios';\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2';\r\nimport { version } from './../../utils/appversion'\r\nlet storage = window.localStorage;\r\n//定义变量:连续点击了几次logo\r\nlet logoClick = 0;\r\n//定义变量:点击logo的时间\r\nlet logoTime = 0;\r\nexport default class Home extends Component {\r\n    state = {\r\n        imgurl: '',\r\n        size: { width: 0, height: 0 }\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        timerFun()\r\n        ipcRenderer.send('close-loading-window', 1)\r\n        ipcRenderer.send('small', win())\r\n        storage.measurepatientId = '';\r\n        temporaryStorage.logupVetInfo = {}\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n        fetchRequest2('/user/getLoginQRcode', \"GET\", '')\r\n            // addQRCode()\r\n            .then(res => {\r\n                console.log('首页获取', res);\r\n\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                console.log(err);\r\n            })\r\n\r\n\r\n        addQRCode()\r\n            .then(res => {\r\n                message.destroy()\r\n\r\n                console.log('---获取二维码', res);\r\n\r\n            })\r\n            .catch(err => {\r\n\r\n                console.log(err);\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    resize = (e) => {\r\n        // console.log('-------------监听的数据', e);\r\n\r\n    }\r\n    componentWillUnmount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        window.removeEventListener('resize', this.resize);\r\n\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log('changeFenBianLv');\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        // ipcRenderer.send('small')\r\n        ipcRenderer.send('small', win())\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n    _quickStart = () => {\r\n        console.log('dianji2')\r\n        this.props.history.push('/page1')\r\n        // this.props.history.push('/menuOptions/advancedsettings')\r\n\r\n    }\r\n    _createAccount = () => {\r\n        this.props.history.push('/uesr/logUp/VetPrifile')\r\n\r\n        // this.props.history.push('/uesr/logUp/JoinOrganizationByOption')\r\n\r\n    }\r\n    _test = () => {\r\n        console.log('点击');\r\n        console.log(navigator);\r\n        console.log(navigator.userAgent);\r\n        console.log('---------------------------');\r\n    }\r\n    _openUtils = () => {\r\n        console.log('点击来了', logoClick);\r\n        if (new Date() - logoTime > 500) {\r\n            logoClick = 0;\r\n            logoTime = new Date();\r\n\r\n        } else {\r\n            logoClick++;\r\n            logoTime = new Date();\r\n            if (logoClick >= 8) {\r\n                logoClick = 0;\r\n\r\n                let ipcRenderer = window.electron.ipcRenderer\r\n                ipcRenderer.send('openDevTools', true)\r\n            }\r\n        }\r\n\r\n    }\r\n    render () {\r\n        return (\r\n\r\n            <div id=\"home\">\r\n                {/* <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                /> */}\r\n                <div className=\"daohang\" style={{ paddingTop: px(10), paddingRight: px(20) }}>\r\n                    <MinClose />\r\n                </div>\r\n                <div className='flex refresh' style={{ alignItems: 'flex-end', paddingRight: px(20) }}>\r\n                    <div className='flex' style={{ flexDirection: 'row', paddingTop: px(20), paddingRight: px(18), color: '#700B33', cursor: 'pointer' }}>\r\n\r\n                        V{version}\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n                <div className=\"heard\" >\r\n                    <div\r\n\r\n                        onClick={this._openUtils}\r\n                        className=\"logo\"\r\n\r\n                    >\r\n                        <img\r\n                            src={logo}\r\n                            alt=\"\"\r\n                            style={{ marginTop: mTop(100), marginBottom: mTop(100), width: px(300) }}\r\n                        />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"button\" style={{ marginBottom: px(25) }}>\r\n                    <Button\r\n                        style={{ width: px(300), fontSize: px(20), height: px(300 / 6.5) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={() => { this.props.history.push('/page11') }}\r\n                    // onClick={() => { this.props.history.push('/menuOptions/settings') }}\r\n\r\n\r\n\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n\r\n                </div>\r\n\r\n                {/* <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300), fontSize: px(20), height: px(300 / 6.5) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={this._quickStart}\r\n                    >\r\n                        Sign in with PMS\r\n                    </Button>\r\n\r\n                </div> */}\r\n                <p className=\"text\" style={{ fontSize: px(20), marginTop: mTop(5), marginBottom: mTop(5) }}>New to Mella?</p>\r\n\r\n                <div className=\"create\" style={{ marginBottom: mTop(20), marginTop: px(25) }}>\r\n                    <Button\r\n                        style={{ width: px(300), fontSize: px(20), height: px(300 / 6.5) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={this._createAccount}\r\n                    >\r\n                        Create an Account\r\n                    </Button>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}",["582","583"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectLocation\\VerifyOrganizationInformation.jsx",["584","585","586","587","588","589","590"],"import React, { Component, } from 'react'\r\nimport {\r\n    Table,\r\n    Select,\r\n    Button,\r\n    message\r\n\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './VerifyOrganizationInformation.less'\r\nimport { fetchRequest1 } from '../../utils/FetchUtil'\r\nimport { mTop, px } from '../../utils/px';\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nexport default class Location extends Component {\r\n    state = {\r\n        loading: false,\r\n        api: '',\r\n        id: '',  //location ID\r\n        locations: [],\r\n        locationData: [],\r\n        selectLocationId: '',\r\n        selectLocationName: '',\r\n        vetData: [],\r\n        selectvetId: '',\r\n        selectvetName: ''\r\n\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n            api: storage.API,\r\n            id: storage.id,\r\n        })\r\n        let params = {\r\n            APIkey: storage.API\r\n        }\r\n        console.log('发送的数据：', params);\r\n        this.setState({ loading: true });\r\n        fetchRequest1('/VetSpire/selectLocations', 'POST', params)\r\n            .then(res => {\r\n                console.log('接收到的数据', res, res.data.Locations);\r\n                let locations = res.data.Locations\r\n\r\n                let datas = []\r\n                for (let i = 0; i < locations.length; i++) {\r\n                    const { address, displayName, name, phoneNumber, id } = locations[i]\r\n                    let data = {\r\n                        locationId: id,\r\n                        locationName: name,\r\n                        // display: displayName,\r\n                        // address,\r\n                        // phoneNumber\r\n                    }\r\n                    datas.push(data)\r\n                }\r\n                console.log(datas);\r\n                this.setState({\r\n                    loading: false,\r\n                    locationData: datas\r\n                });\r\n\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log('错误', err);\r\n                this.setState({ loading: false });\r\n\r\n            })\r\n\r\n        if (storage.locationKey !== undefined) {\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: storage.locationKey\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n    }\r\n    _selectLocation = () => {\r\n        let locationDefaultValue = storage.locationDefaultValue\r\n        let options = this.state.locationData.map(d => <Option key={d.locationId}>{d.locationName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.locationDefaultValue = data.children\r\n            storage.locationKey = value\r\n            storage.vetDefaultValue = undefined\r\n            storage.vetKey = undefined\r\n            this.setState({})\r\n            this.setState({\r\n                selectLocationId: value,\r\n                selectLocationName: data.children\r\n            })\r\n\r\n            let params = {\r\n                APIkey: storage.API,\r\n                locationId: value\r\n            }\r\n            console.log('发送的数据：', params);\r\n            // this.setState({ loading: true });\r\n            fetchRequest1('/VetSpire/selectProvidersByLocationId', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    if (res.code === 14002) {\r\n                        this.setState({\r\n                            loading: false\r\n                        })\r\n                        console.log(res.message);\r\n                        let datas = res.data.Location.providers\r\n                        console.log(datas);\r\n                        let arr = []\r\n                        for (let i = 0; i < datas.length; i++) {\r\n                            let data = {\r\n                                vetId: datas[i].id,\r\n                                VetName: datas[i].name\r\n                            }\r\n                            arr.push(data)\r\n                        }\r\n                        this.setState({\r\n                            vetData: arr\r\n                        })\r\n\r\n                    }\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                })\r\n        }\r\n        return (\r\n            <div className=\"select\">\r\n                <p>Select Location:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    defaultValue={locationDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _selectVet = () => {\r\n        let vetDefaultValue = storage.vetDefaultValue\r\n        let options = this.state.vetData.map(d => <Option key={d.vetId}>{d.VetName}</Option>)\r\n        const _select = (value, data) => {\r\n            console.log(value, data, '------------', value, data.children);  //value的值为id\r\n            storage.vetDefaultValue = data.children\r\n            storage.vetKey = value\r\n            this.setState({\r\n                selectvetId: value,\r\n                selectvetName: data.children\r\n            })\r\n        }\r\n        return (\r\n            <div className=\"select\" style={{ marginTop: mTop(70) }}>\r\n                <p>Select Vet:</p>\r\n                <Select\r\n                    showSearch\r\n                    style={{ width: '40%' }}\r\n                    // size = {'small'}     \r\n                    defaultValue={vetDefaultValue}\r\n                    placeholder=\"Search to Select\"\r\n                    optionFilterProp=\"children\"\r\n                    listHeight={256}\r\n                    onSelect={(value, data) => _select(value, data)}\r\n                    filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n                    filterSort={(optionA, optionB) => optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())}\r\n                >\r\n                    {options}\r\n                </Select>\r\n            </div>\r\n        )\r\n    }\r\n    _btn = () => {\r\n\r\n        return (\r\n            <div className=\"btn\"\r\n                style={{ marginTop: px(200) }}\r\n            >\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={() => { this.props.history.push('/page2') }}>\r\n                        Try Again\r\n                    </Button>\r\n                </div>\r\n                <div className=\"button\">\r\n                    <Button\r\n                        style={{ width: px(300) }}\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        onClick={this._verify}>\r\n                        Verify\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    _verify = () => {\r\n        let { selectvetId, selectvetName, selectLocationName, selectLocationId } = this.state\r\n\r\n        if ((selectLocationName != '' && selectvetName === '') || (storage.vetDefaultValue != '' && storage.locationDefaultValue != '')) {\r\n            // let arr = [{selectLocationId:'765',selectvetId:''}]\r\n            storage.selectvetId = selectvetId\r\n            storage.selectLocationId = selectLocationId\r\n            this.props.history.push('/page4')\r\n\r\n        } else {\r\n            message.error('Please select Verify Organization Information')\r\n        }\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"location223\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page2')}\r\n                />\r\n\r\n                <div className=\"title\">Verify Organization Information</div>\r\n                <div className=\"goodpets\" style={{\r\n                    marginBottom: mTop(80)\r\n                }}>Good Pets</div>\r\n\r\n                {this._selectLocation()}\r\n\r\n                {this._selectVet()}\r\n\r\n\r\n                {this._btn()}\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}",["591","592"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\AddYuding.jsx",["593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608"],"////这是普通用户的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message,\r\n  Menu,\r\n  Modal,\r\n  Select,\r\n  ConfigProvider\r\n\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport Button1 from '../../utils/button/Button'\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport Heard from '../../utils/heard/Heard'\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport MYButton from './../../utils/button/Button'\r\nimport './doctorSelectExam.less'\r\n\r\n\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport { MTop, mTop, pX, px, win } from '../../utils/px';\r\n\r\nimport dog from './../../assets/images/pinkdog.png'\r\nimport cat from './../../assets/images/pinkcat.png'\r\nimport redDog from './../../assets/images/reddog.png'\r\nimport redCat from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\nimport other from './../../assets/images/other.png'\r\nimport redJinggao from './../../assets/img/redjinggao.png'\r\n\r\nimport MyModal from '../../utils/myModal/MyModal';\r\n\r\nconst { SubMenu } = Menu;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\n\r\nlet storage = window.localStorage;\r\n\r\nlet defaultData = {\r\n  patientId: \"\",\r\n  wuzhong: 'dog',\r\n  petName: '',\r\n  miaoshu: ''\r\n}\r\n\r\n\r\nexport default class DoctorSelectExam extends Component {\r\n  state = {\r\n    addPetist: [],\r\n    petName: '',\r\n    wuzhong: 'dog',\r\n    patientId: '',\r\n    miaoshu: '',\r\n    loading: false,\r\n    isSave: false\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    // ipcRenderer.send('big')\r\n    message.destroy()\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  selsectwuzhong = (val) => {\r\n    this.setState({\r\n      wuzhong: val\r\n    })\r\n  }\r\n  add = () => {\r\n    message.destroy()\r\n    let { patientId, petName, wuzhong, miaoshu, addPetist } = this.state\r\n    if (!patientId) {\r\n      message.error(`Please enter the pet's patientId`)\r\n      return\r\n    }\r\n    this.setState({\r\n      loading: true\r\n    })\r\n\r\n    let petSpeciesBreedId = 12001\r\n    switch (wuzhong) {\r\n      case 'dog': petSpeciesBreedId = 12001; break;\r\n      case 'cat': petSpeciesBreedId = 11001; break;\r\n      case 'other': petSpeciesBreedId = 13001; break;\r\n      default:\r\n        break;\r\n    }\r\n    let params = {\r\n      description: miaoshu,\r\n      doctorId: storage.userId,\r\n      patientId,\r\n      petName,\r\n      petSpeciesBreedId\r\n    }\r\n\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    console.log('入参', params);\r\n    fetchRequest('/new/petall/subscribe', \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag) {\r\n          let json = {\r\n            patientId,\r\n            wuzhong,\r\n            petName,\r\n            miaoshu\r\n          }\r\n          let list = [].concat(addPetist)\r\n          list.push(json)\r\n          this.setState({\r\n            loading: false,\r\n            patientId: '',\r\n            wuzhong: 'dog',\r\n            petName: '',\r\n            miaoshu: '',\r\n            addPetist: list\r\n          })\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('add failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('错误原因', err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('add failed')\r\n      })\r\n\r\n  }\r\n  render() {\r\n    let addPetist = [].concat(this.state.addPetist)\r\n    addPetist.push(defaultData)\r\n\r\n    let options = addPetist.map((item, index) => {\r\n\r\n\r\n      if (index === addPetist.length - 1) {\r\n        let { patientId, wuzhong, petName, miaoshu } = this.state\r\n        return <li key={`${index}`} style={{ width: '100%', }}>\r\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n              <input type=\"text\" className='tableInput'\r\n                value={patientId}\r\n                onChange={value => {\r\n                  this.setState({\r\n                    patientId: value.target.value\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n              <input type=\"text\" className='tableInput'\r\n                value={petName}\r\n                onChange={value => {\r\n                  this.setState({\r\n                    petName: value.target.value\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n            <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n              <div\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  this.selsectwuzhong('dog')\r\n                }}>\r\n                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n              </div>\r\n              <div\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  this.selsectwuzhong('cat')\r\n                }}>\r\n                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n              </div>\r\n\r\n              <div\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  this.selsectwuzhong('other')\r\n                }}>\r\n                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n              </div>\r\n\r\n\r\n\r\n            </div>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n              <input type=\"text\" className='tableInput'\r\n                value={miaoshu}\r\n                onChange={value => {\r\n                  this.setState({\r\n                    miaoshu: value.target.value\r\n                  })\r\n                }}\r\n\r\n              />\r\n            </div>\r\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n\r\n\r\n\r\n              <div\r\n                className='flex'\r\n                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\r\n                onClick={this.add}\r\n\r\n              >\r\n\r\n                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\r\n              </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </li>\r\n      } else {\r\n        let { patientId, wuzhong, petName, miaoshu } = item\r\n        return <li key={`${index}`} style={{ width: '100%', }}>\r\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n              <div className='tableText'>\r\n                {patientId}\r\n              </div>\r\n            </div>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n              <div className='tableText'> {petName}</div>\r\n            </div>\r\n            <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n              <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n              <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n              <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n            </div>\r\n            <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n              <div className='tableText'>{miaoshu}</div>\r\n            </div>\r\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </li>\r\n      }\r\n\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div id=\"doctorSelectExam\" onClick={(e) => {\r\n        console.log('隐藏');\r\n        this.setState({\r\n          showsortBy: false\r\n        })\r\n      }}>\r\n        {/* 关闭缩小 */}\r\n        <Heard\r\n          onReturn={() => {\r\n            let { patientId } = this.state\r\n            if (!patientId) {\r\n              this.props.history.goBack()\r\n            } else {\r\n              this.setState({\r\n                isSave: true\r\n              })\r\n            }\r\n\r\n          }}\r\n          onSearch={(data) => {\r\n\r\n            storage.doctorExam = JSON.stringify(data)\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data)\r\n            if (storage.isClinical === 'true') {\r\n              this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n            } else {\r\n              this.props.history.push({ pathname: '/page10', })\r\n            }\r\n          }}\r\n          blueSearch={true}\r\n        />\r\n        <div style={{ width: '100%', marginTop: px(80), height: px(650), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%' }}>\r\n          <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n            <div className='tableHeard'>Patient Id</div>\r\n            <div className='tableHeard'>Pet Name</div>\r\n            <div className='tableHeard'>species</div>\r\n            <div className='tableHeard' style={{ width: '30%' }}>description</div>\r\n            <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\r\n\r\n          </div>\r\n\r\n          <ul >\r\n            {options}\r\n          </ul>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n        <div className='continueBox'>\r\n          <div className='continueBtn'\r\n            style={{ borderRadius: px(50), height: px(45), fontSize: px(20), }}\r\n            onClick={() => {\r\n              let { patientId } = this.state\r\n              if (!patientId) {\r\n                this.props.history.goBack()\r\n              } else {\r\n                this.setState({\r\n                  isSave: true\r\n                })\r\n              }\r\n            }}\r\n          >Continue</div>\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.loading}\r\n        />\r\n        <MyModal\r\n          visible={this.state.isSave}\r\n          element={\r\n            <div className='isSave'\r\n            //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\r\n            >\r\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n              <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <MYButton\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isSave: false\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <MYButton\r\n                  text={'Exit'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isSave: false\r\n                    })\r\n                    this.props.history.goBack()\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\praviders\\Praviders.jsx",[],["609","610"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectExam\\SelectExam.jsx",["611","612","613","614"],"//这是vetspire的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space\r\n\r\n} from 'antd';\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './selectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { fetchRequest1 } from '../../utils/FetchUtil'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2'\r\n\r\nlet storage = window.localStorage;\r\n\r\n\r\nexport default class SelectExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (window.screen.height < 1000) {\r\n      ipcRenderer.send('table')\r\n    } else {\r\n      ipcRenderer.send('big')\r\n    }\r\n    this._getData()\r\n    storage.identity = '1'\r\n\r\n  }\r\n  _getData = async () => {\r\n    this.setState({\r\n      api: storage.API,\r\n      id: storage.selectLocationId,\r\n      seleceID: storage.selectvetId\r\n    })\r\n    let time = new Date()\r\n    let updateAtStart = moment(time).format('YYYY-MM-DD')\r\n    console.log(time, updateAtStart);\r\n    let params = {\r\n      APIkey: storage.API,\r\n      providerId: storage.selectvetId,\r\n      updateAtStart\r\n    }\r\n    console.log('发送获取宠物列表数据：', params);\r\n    this.setState({ loading: true });\r\n    let arr = [\r\n      {\r\n        age: 10,\r\n        breed: \"american shorthair\",\r\n        gender: \"FEMALE\",\r\n        key: \"847571\",\r\n        owner: \"Emma Bunin\",\r\n        petName: \"Ruby\",\r\n        weight: \"100 LB\",\r\n      },\r\n      {\r\n        age: 7,\r\n        breed: \"labrador retriever\",\r\n        gender: \"MALE\",\r\n        key: \"847570\",\r\n        owner: \"Emma Bunin\",\r\n        petName: \"Wally\",\r\n        weight: \"68.4 LB\",\r\n      },\r\n      {\r\n        age: 11,\r\n        breed: \"french bulldog\",\r\n        gender: \"MALE\",\r\n        key: \"847569\",\r\n        owner: \"Jane Doe\",\r\n        petName: \"Charmander\",\r\n        weight: \"68.4 LB\",\r\n      },\r\n      {\r\n        age: 10,\r\n        breed: \"american shorthair\",\r\n        gender: \"FEMALE\",\r\n        key: \"847567\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Lemon\",\r\n        weight: \"22 LB\",\r\n      }, {\r\n        age: 9,\r\n        breed: \"golden retriever\",\r\n        gender: \"MALE\",\r\n        key: \"847566\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Zack\",\r\n        weight: \"100 LB\",\r\n      },\r\n      {\r\n        age: 9,\r\n        breed: \"american shorthair\",\r\n        gender: \"MALE\",\r\n        key: \"847568\",\r\n        owner: \"Marilyn Monroe\",\r\n        petName: \"Oreo\",\r\n        weight: \"10.5 LB\",\r\n      }\r\n    ]\r\n\r\n\r\n    console.log('转换的数据：', arr);\r\n    let examData = []\r\n    let indexArr = []\r\n    for (let i = 0; i < arr.length; i++) {\r\n      let sendData = {\r\n        APIkey: storage.API,\r\n        patientId: arr[i].key\r\n      }\r\n      console.log('发送获取exam数据', sendData);\r\n\r\n      fetchRequest2('/VetSpire/selectExamByPatientId', 'POST', sendData)\r\n        .then(res => {\r\n          console.log('接收exam数据', i, res);\r\n          this.setState({ loading: false, spin: false });\r\n          indexArr.push(i)\r\n          if (res.flag === true) {\r\n            let examArr = res.data.encounters\r\n            for (let index = 0; index < examArr.length; index++) {\r\n              let chazhi = new Date().getTimezoneOffset()\r\n              let newTime = moment(new Date()).add(chazhi, 'm').format('YYYY-MM-DD');\r\n              let insertedAt = moment(examArr[index].insertedAt).format('YYYY-MM-DD')\r\n              if (newTime === insertedAt) {\r\n                let examId = examArr[index].vitals.id\r\n                let patientId = examArr[index].patient.id\r\n                let json = {\r\n                  examId,\r\n                  patientId,\r\n                  insertedAt: examArr[index].insertedAt,\r\n                  petName: examArr[index].patient.name\r\n                }\r\n                examData.push(json)\r\n              }\r\n\r\n            }\r\n          }\r\n          if (indexArr.length === arr.length) {\r\n\r\n            let tableArr = []\r\n            for (let j = 0; j < arr.length; j++) {\r\n              for (let k = 0; k < examData.length; k++) {\r\n                if (arr[j].key === examData[k].patientId) {\r\n                  let { age, breed, gender, owner, petName, weight } = arr[j]\r\n                  let { examId, insertedAt, patientId } = examData[k]\r\n                  let json1 = {\r\n                    age, breed, gender, owner, key: examId, petName, weight, insertedAt, patientId\r\n                  }\r\n                  tableArr.push(json1)\r\n                }\r\n              }\r\n            }\r\n\r\n            console.log('最终合成的数据：', tableArr);\r\n            let historyDataArr = this.ForwardRankingDate(tableArr, 'insertedAt')\r\n            // console.log(`日期排序后：----------`, historyDataArr);\r\n\r\n\r\n            this.setState({\r\n              data: historyDataArr\r\n            })\r\n          }\r\n\r\n        })\r\n        .catch(err => {\r\n          console.log('err', err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n  ForwardRankingDate = (data, p) => {\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      for (let j = 0; j < data.length - 1 - i; j++) {\r\n        // console.log(Date.parse(data[j][p]));\r\n        if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n          var temp = data[j];\r\n          data[j] = data[j + 1];\r\n          data[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    this._getData()\r\n  }\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        //   width: '30%',\r\n        ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        //   width: '20%',\r\n        ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        ...this.getColumnSearchProps('breed'),\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        // width: '30%',\r\n        ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        // width: '20%',\r\n        ...this.getColumnSearchProps('age'),\r\n      },\r\n      {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n        key: 'weight',\r\n        ...this.getColumnSearchProps('weight'),\r\n      },\r\n      {\r\n        title: 'Creation time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n\r\n          let newTime = moment(text).subtract(chazhi, 'm').format('YYYY-MM-DD HH:mm');\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      // {\r\n      //   title: '',\r\n      //   dataIndex: 'patientId',\r\n      //   key: 'patientId',\r\n      //   render: (text, record, index) => {\r\n      //     // console.log(text, record, index);\r\n      //     let chazhi = new Date().getTimezoneOffset()\r\n\r\n      //     let newTime = moment(text).subtract(chazhi, 'm').format('YYYY-MM-DD HH:mm');\r\n      //     return (\r\n      //       null\r\n      //     )\r\n\r\n      //   }\r\n      // },\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin } = this.state\r\n    return (\r\n\r\n      <div id=\"patient\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push({ pathname: '/page4' })}\r\n        />\r\n\r\n        <div className=\"textfa1\">\r\n          <div className=\"textfa\">\r\n            <div className=\"text\">Select Patient Exam</div>\r\n            <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n          </div>\r\n          <div className=\"r\" onClick={() => {\r\n            let electron = window.electron\r\n            electron.shell.openExternal('https://mella.vetspire.com/clients')\r\n          }}>+</div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            loading={loading}\r\n            locale={{ filterConfirm: <div>111</div> }}\r\n            pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true }}\r\n            onRow={(record) => {\r\n              return {\r\n                onClick: (event) => {\r\n                  console.log(record);\r\n                  let patientId = record.key\r\n                  let petName = record.petName\r\n\r\n                  console.log(patientId, petName);\r\n                  storage.selectExamId = record.key\r\n                  storage.selectPatientId = record.patientId\r\n\r\n                  storage.selectAge = record.age\r\n                  storage.selectBreed = record.breed\r\n                  storage.selectOwner = record.owner\r\n                  storage.selectWeight = record.weight\r\n                  storage.selectPetName = record.petName\r\n\r\n                  this.props.history.push({ pathname: '/page10', })\r\n                  // if (storage.isClinical === 'true') {\r\n                  //   console.log('---------', record.patientId);\r\n                  //   this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.patientId })\r\n                  // } else {\r\n                  //   this.props.history.push({ pathname: '/page10', })\r\n                  // }\r\n\r\n                }, // 点击行\r\n\r\n              };\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}",["615","616"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\Mesasure.jsx",["617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Menu,\r\n  Modal,\r\n  Table,\r\n  Popconfirm,\r\n  Tooltip,\r\n  message,\r\n  Select,\r\n  Spin\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n// 引入 ECharts 主模块\r\nimport echarts from 'echarts/lib/echarts';\r\nimport ReactECharts from 'echarts-for-react';\r\n// 引入柱状图\r\nimport 'echarts/lib/chart/bar';\r\n// 引入提示框和标题组件\r\nimport 'echarts/lib/component/tooltip';\r\nimport 'echarts/lib/component/title';\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport { fetchRequest1 } from './../../utils/FetchUtil'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\n\r\nimport ye from './../../assets/images/ye1.png'\r\nimport er from './../../assets/images/er3.png'\r\nimport gang from './../../assets/images/gang3.png'\r\nimport dog from './../../assets/images/dog.png'\r\nimport cat from './../../assets/images/cat.png'\r\nimport other from './../../assets/images/other.png'\r\nimport edit from './../../assets/images/edit.png'\r\nimport del from './../../assets/images/del.png'\r\nimport start from './../../assets/img/start.png'\r\nimport redjinggao from './../../assets/img/redjinggao.png'\r\nimport placement_gang from './../../assets/images/placement_gang.png'\r\nimport placement_er from './../../assets/images/placement_er.png'\r\nimport palcement_ye from './../../assets/images/palcement_ye.png'\r\nimport close from './../../assets/img/close.png'\r\n\r\n\r\nimport './mesasure.less'\r\nimport electronStore from './../../utils/electronStore'\r\nimport { mTop, pX, px, MTop, win } from '../../utils/px';\r\nimport { fetchRequest3 } from '../../utils/FetchUtil3';\r\nimport Heard from '../../utils/heard/Heard';\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\n\r\nlet storage = window.localStorage;\r\nlet echartCi = 0\r\nlet saveHistoryTime = null, getSerialTime = null\r\nlet ipcRenderer = window.electron.ipcRenderer\r\nlet detectTimer = null, countdownTimer = null;\r\n\r\nlet resyncDeviceIsClick = true //用于控制多次点击重新配对按钮\r\nlet num = 0, is97Time = null, is193Time = null, initTime = null\r\n\r\nlet num07 = 0       //接收到07命令行的次数\r\nlet indexNum = 0\r\nlet meetCondition = false //满足第一次测量在76.6与85之间\r\nlet tempArr = []\r\nlet dropNum = 0\r\n\r\nlet lastMeasureTemp = 0, lastMeasureBig = true\r\n\r\nlet firstMeasure = true  //用户反馈刚到这个界面测量就会显示测量温度过高,因此在这里做一个限制,第一次测量不进入温度过高提示\r\nexport default class Mesasure extends Component {\r\n  state = {\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    value: '',\r\n    api: '',\r\n    id: '',\r\n    dataArr: [],\r\n    seleceID: '',//医生id\r\n    data: { ci: [''], wen: [] },\r\n    echarsData: {\r\n      Eci: [],\r\n      wen0: [],\r\n      wen1: []\r\n    },\r\n    temColor: '',\r\n    Temp: '',\r\n    isMeasure: false,     //腋温正在测量中\r\n\r\n    mearsurePart: 1,\r\n    historyData: [],\r\n    patientId: '',\r\n    spin: false,        //patientId后面的刷新按钮是否旋转\r\n    petName: '',\r\n    notes: '',\r\n    addpatient_petName: '',\r\n    addpatient_description: '',\r\n    addpatient_species: 1,\r\n    roomTemperature: '',\r\n    referenceRectalTemperature: '',\r\n    bodyConditionScore: '',\r\n    furLength: '',\r\n    bodyType: '',\r\n    heartRate: '',\r\n    bloodPressure: '',\r\n    respiratoryRate: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n    editVisible: false,\r\n    err07Visible: false,\r\n\r\n    leftStatus: 3,         //1代表着有宠物信息，2代表着添加宠物信息，3代表着初始化，没有填入patientId\r\n\r\n    selectPet: {\r\n      petId: '',\r\n      petName: '',\r\n      owner: '',\r\n      breedName: '',\r\n      isMix: false,\r\n      age: '',\r\n      weight: '',\r\n      birthday: ''\r\n    },\r\n    units: '℉',\r\n    measuerStatus: 'disconnected',\r\n    isconnected: false,\r\n    countdown: 60,\r\n    isPetCharacteristics: true,\r\n    isEmergency: false,\r\n    seleceEmergencies: {},\r\n    emerPatientID: '',\r\n    emerData: [],         //临床测试所有数据,用于传到mella后台\r\n    petVitalTypeId: '01',  //测量部位\r\n\r\n\r\n\r\n    memo: '',\r\n    editRectal: '',\r\n    editRoomTemperature: '',\r\n    editHeartRate: '',\r\n    editRespiratoryRate: '',\r\n    editBloodPressure: '',\r\n    editBodyConditionScore: '',\r\n    editFurLength: '',\r\n\r\n    noUSB: false,  //是否有usb底座，为true代表没有\r\n\r\n\r\n    tip: '',\r\n    tipSpin: false,\r\n    loading: false,\r\n    showHistoryEchart: false,  //在展示历史曲线的时候为true，当开始测量为false\r\n    tempHeight: false,           //第一次温度过高,需要冷却一下\r\n  }\r\n\r\n  componentWillMount () {\r\n    try {\r\n      console.log('-----------------===============-------------', this.props.location.isconnected);\r\n      if (this.props.location.isconnected === false || this.props.location.isconnected === true) {\r\n        if (this.props.location.isconnected === false) {\r\n\r\n        } else {\r\n          this.setState({\r\n            measuerStatus: 'connented',\r\n            isconnected: true\r\n\r\n          })\r\n          is97Time = new Date()\r\n        }\r\n      }\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    firstMeasure = true\r\n\r\n\r\n    ipcRenderer.send('Lowbig', win())\r\n    console.log(this.props);\r\n    storage.isClinical = 'true'\r\n\r\n    //这里是为了从编辑宠物界面回来的时候能够直接展示这个宠物\r\n    if (this.props.location.participate) {\r\n      let props = this.props.location.participate\r\n\r\n      this.setState({\r\n        patientId: props.patientId\r\n      }, () => {\r\n        this._getPetInfo()\r\n      })\r\n    } else {\r\n      if (storage.measurepatientId) {\r\n        console.log('有上级传来的数据:', storage.measurepatientId);\r\n        this.setState({\r\n          patientId: storage.measurepatientId\r\n        }, () => {\r\n          this._getPetInfo()\r\n        })\r\n      }\r\n    }\r\n\r\n    //这里是记录从哪里传过来的，是普通医生、ezyVet、vetspire\r\n    if (this.props.location.identity) {\r\n      switch (this.props.location.identity) {\r\n        case '1':\r\n          console.log('这是从vetspire来的')\r\n\r\n          break;\r\n        case '2':\r\n          console.log('这是从ezyVet来的')\r\n          if (this.props.location.patientId) {\r\n            this.setState({\r\n              patientId: this.props.location.patientId\r\n            }, () => {\r\n              this._getPetInfo()\r\n            })\r\n          }\r\n\r\n          break;\r\n        case '3':\r\n          console.log('这是从普通医生来的来的');\r\n          // if (this.props.location.patientId) {\r\n          //   this.setState({\r\n          //     patientId: this.props.location.patientId\r\n          //   }, () => {\r\n          //     this._getPetInfo()\r\n          //   })\r\n          // }\r\n          this._getPetInfoBySave()\r\n          break;\r\n        default: console.log('暂未定义');\r\n          break;\r\n      }\r\n    }\r\n\r\n    let hardSet = electronStore.get('hardwareConfiguration')\r\n\r\n    if (!hardSet) {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false,\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: '45' },\r\n        autoOff: { length: 0, number: '30' },\r\n      }\r\n      electronStore.set('hardwareConfiguration', settings)\r\n      this.setState({\r\n        units: '℉'\r\n      })\r\n    } else {\r\n      let units = hardSet.isHua ? '℉' : '℃'\r\n      this.setState({\r\n        units\r\n      })\r\n    }\r\n\r\n\r\n\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('usbDetect', this.usbDetect)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    //分辨率改变后窗口自动改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //检测有没有充电桩、温度计\r\n\r\n\r\n    this._whether_to_connect_to_mella()\r\n    countdownTimer && clearInterval(countdownTimer)\r\n\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('usbDetect', this.usbDetect)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    detectTimer && clearInterval(detectTimer)\r\n    this.timer && clearTimeout(this.timer)\r\n    countdownTimer && clearInterval(countdownTimer)\r\n    getSerialTime && clearTimeout(getSerialTime)\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    message.destroy()\r\n    firstMeasure = true\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  usbDetect = (event, data) => {\r\n    if (data === true) {\r\n      this._whether_to_connect_to_mella()\r\n    } else {\r\n      this.detectTimer && clearInterval(this.detectTimer)\r\n      num07 = 0\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n\r\n    this.command(data)()\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true,\r\n          measuerStatus: 'disconnected',\r\n          countdown: 60,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          echarsData: {\r\n            Eci: [],\r\n            wen0: [],\r\n            wen1: []\r\n          },\r\n          Temp: '',\r\n          emerData: []\r\n        })\r\n        echartCi = 0\r\n        meetCondition = false\r\n      }\r\n\r\n    }\r\n  }\r\n  _whether_to_connect_to_mella = () => {\r\n    this.detectTimer && clearInterval(this.detectTimer)\r\n    message.destroy()\r\n    this.detectTimer = setInterval(() => {\r\n      if (this.state.isMeasure) {\r\n        return\r\n      }\r\n      // console.log(initTime);\r\n      if (!initTime) {\r\n        console.log('断开连接');\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown: 0,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          isEarMeasure: false\r\n        })\r\n        initTime = new Date()\r\n        meetCondition = false\r\n      } else {\r\n        // if (this.state.measuerStatus === 'disconnected') {\r\n        //   ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n        // }\r\n        ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n\r\n        if (new Date() - initTime < 5000) {\r\n          console.log('连接成功', indexNum);\r\n          if (indexNum++ % 5 === 1) {\r\n            console.log('去询问探头');\r\n            ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n          }\r\n\r\n\r\n\r\n        } else {\r\n\r\n          console.log('2断开连接');\r\n          this.setState({\r\n            measuerStatus: 'disconnected',\r\n            countdown: 0,\r\n            isMeasure: false,\r\n            isconnected: false,\r\n            isEarMeasure: false\r\n          })\r\n          meetCondition = false\r\n        }\r\n      }\r\n    }, 2000);\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  getOption = () => {\r\n    let { units } = this.state\r\n    let min, max;\r\n    if (units === '℃') {\r\n      min = 25\r\n      max = 45\r\n    } else {\r\n      min = 75\r\n      max = 115\r\n    }\r\n    let { echarsData } = this.state\r\n    let { Eci, wen0, wen1 } = echarsData\r\n    let that = this\r\n    let option = {\r\n      color: ['#81b22f'],\r\n      tooltip: {\r\n        /*返回需要的信息*/\r\n        trigger: 'axis',\r\n        triggerOn: 'mousemove',\r\n        enterable: true,\r\n        formatter: function (param) {\r\n          var value = param[0].value;\r\n          // console.log('----para', param);\r\n          return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(1)}${that.state.units}</div>`\r\n        }\r\n      },\r\n      xAxis: {\r\n        name: 'SPL',\r\n        nameLocation: 'end',\r\n        nameTextStyle: {\r\n          align: 'left',\r\n        },\r\n        type: 'category',\r\n        // data: [\"\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,],\r\n        data: Eci,\r\n        // data:['','15miao','30miao'],\r\n        axisLine: {\r\n          lineStyle: {\r\n            // 设置x轴颜色\r\n            color: '#A0A0A0',\r\n            show: true\r\n          }\r\n        },\r\n        // 设置X轴数据旋转倾斜\r\n        axisLabel: {\r\n          rotate: 0, // 旋转角度\r\n          interval: 29  //设置X轴数据间隔几个显示一个，为0表示都显示\r\n\r\n        },\r\n\r\n      },\r\n      yAxis: {\r\n        name: 'temperature',\r\n        type: 'value',\r\n        min, // 设置y轴刻度的最小值\r\n        max,  // 设置y轴刻度的最大值\r\n        splitNumber: 0,  // 设置y轴刻度间隔个数\r\n        nameTextStyle: {\r\n          padding: [0, 0, 0, 8],\r\n          // backgroundColor: 'pink',\r\n          width: '1200px',\r\n          // fontSize: 20,\r\n          align: 'left',\r\n        },\r\n\r\n        axisLine: {\r\n          lineStyle: {\r\n            // 设置x轴颜色\r\n            color: '#A0A0A0',\r\n            show: true\r\n          }\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n      },\r\n      series: [{\r\n        name: '模拟数据',\r\n        type: 'line',\r\n        showSymbol: false,\r\n        hoverAnimation: false,\r\n        // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\r\n        data: wen0,\r\n        smooth: 0.5,\r\n        symbol: 'none',\r\n        itemStyle: {\r\n          normal: {\r\n            lineStyle: {        // 系列级个性化折线样式 \r\n              width: 2,\r\n              type: 'solid',\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 1,\r\n                x2: 0,\r\n                y2: 0,\r\n                colorStops: [{\r\n                  offset: 0.5, color: '#47C2ED' // 0% 处的颜色  蓝\r\n                }, {\r\n                  offset: 1, color: '#78D35D' // 50% 处的颜色  绿\r\n                },\r\n                  // {\r\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\r\n                  // }\r\n                ],\r\n                globalCoord: false // 缺省为 false\r\n              }\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n    return option;\r\n  }\r\n\r\n  handleClick = e => {\r\n    console.log('---------------身份', storage.identity);\r\n\r\n    switch (e.key) {\r\n      case '1':\r\n        //  storage.measurepatientId = this.state.patientId; console.log('返回前的问题查看：', this.props.history); this.props.history.goBack()\r\n        switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n          case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n            break;\r\n          case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n          case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n            break;\r\n\r\n\r\n\r\n          default:\r\n            break;\r\n        }\r\n        break;\r\n      case '2': storage.measurepatientId = ''; this.props.history.push('/')\r\n        break;\r\n      case '3': storage.measurepatientId = this.state.patientId; this.props.history.push('/page12');\r\n        break;\r\n      case '4': storage.measurepatientId = this.state.patientId; this.props.history.push({ pathname: '/page10', isconnected: this.state.isconnected })\r\n        break;\r\n      case '5': this.props.history.push('/menuOptions/settings'); break;\r\n      default: console.log('这个选项还没有做呢');\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n  command = (newArr) => {\r\n    const instruction = [209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 7, 99]\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n    if (newArr[2] !== 7) {\r\n      initTime = new Date()\r\n      num07 = 0\r\n    } else {\r\n      num07++\r\n    }\r\n\r\n\r\n    const commandArr = {\r\n      209: () => {  //腋温\r\n\r\n        let temp1 = parseFloat(`${dataArr1[3]}.${(dataArr1[4])}`)\r\n        let temp0 = parseFloat(`${dataArr1[5]}.${(dataArr1[6])}`)\r\n        let temp2 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n        let pdt0 = parseFloat(`${dataArr1[9]}.${(dataArr1[10])}`)\r\n        let pdt1 = parseFloat(`${dataArr1[11]}.${(dataArr1[12])}`)\r\n        let alpha0 = parseFloat(`${dataArr1[13]}.${(dataArr1[14])}`)\r\n        let alpha1 = parseFloat(`${dataArr1[15]}.${(dataArr1[16])}`)\r\n        let Temp = temp0\r\n\r\n        if (Temp === 0 || Temp === null || Temp === undefined) {\r\n          return\r\n        }\r\n\r\n        if (this.state.isMeasure === false) {\r\n          ipcRenderer.send('usbdata', { command: '31', arr: [] })\r\n          this.setState({\r\n            echarsData: {\r\n              Eci: [],\r\n              wen0: [],\r\n              wen1: []\r\n            },\r\n            countdown: 60\r\n\r\n          })\r\n          echartCi = 0\r\n\r\n        }\r\n\r\n\r\n\r\n        //需要做第一次温度,判断,如果温度低于76.6(24.8)则界面显示low,并且不记录上传到后台的临床测试数据emerData\r\n        //需要第一次做温度判断,如果温度高于85(29.4)℉,则跳出高温弹窗,不记录上传到后台的临床测试数据emerDate,并且第一次测量也为true\r\n\r\n        if (!meetCondition) {\r\n          dropNum = 0\r\n          tempArr = []\r\n          if (Temp >= 24.8 && Temp <= 29.4) {\r\n            meetCondition = true\r\n\r\n            if (countdownTimer) {\r\n              console.log('有定时器了，清理掉');\r\n              clearInterval(countdownTimer)\r\n              this.setState((prestate, props) => ({\r\n                countdown: 60\r\n              }));\r\n            }\r\n            countdownTimer = setInterval(() => {\r\n              console.log('进入定时器');\r\n              let { countdown, isconnected } = this.state\r\n              if (countdown <= 0) {\r\n                countdown = 60\r\n              }\r\n              this.setState({\r\n                countdown: countdown - 1\r\n\r\n              })\r\n              if (countdown <= 1) {\r\n                clearInterval(countdownTimer)\r\n                console.log('我要去发送了');\r\n                ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n              }\r\n              if (isconnected === false) {\r\n                clearInterval(countdownTimer)\r\n              }\r\n            }, 1000);\r\n\r\n\r\n\r\n            let emerData = this.state.emerData\r\n            let str = {\r\n              data0: temp0,\r\n              data1: temp1,\r\n              data2: temp2,\r\n              pdt0,\r\n              pdt1,\r\n              Alpha0: alpha0,\r\n              Alpha1: alpha1,\r\n            }\r\n            emerData.push(str)\r\n\r\n            let { echarsData } = this.state\r\n            let { wen0, wen1, Eci } = echarsData\r\n            Eci.push((echartCi++))\r\n            if (this.state.units === '℃') {\r\n              wen0.push(temp0)\r\n              wen1.push(temp1)\r\n            } else {\r\n              wen0.push(temp0 * 1.8 + 32)\r\n              wen1.push(temp1 * 1.8 + 32)\r\n            }\r\n\r\n            this.setState({\r\n              Temp,\r\n              echarsData,\r\n              isMeasure: true,\r\n              measuerStatus: 'connented',\r\n              isconnected: true,\r\n              showHistoryEchart: false,\r\n              emerData,\r\n              tempHeight: false\r\n            }, () => {\r\n              const option = this.getOption();\r\n              this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n            })\r\n\r\n          } else {\r\n\r\n            meetCondition = false\r\n            lastMeasureBig = true\r\n            lastMeasureTemp = temp0\r\n            if (Temp < 24.8) {\r\n              let { echarsData } = this.state\r\n              let { wen0, wen1, Eci } = echarsData\r\n              Eci.push((echartCi++))\r\n              if (this.state.units === '℃') {\r\n                wen0.push(temp0)\r\n                wen1.push(temp1)\r\n              } else {\r\n                wen0.push(temp0 * 1.8 + 32)\r\n                wen1.push(temp1 * 1.8 + 32)\r\n              }\r\n\r\n              this.setState({\r\n                Temp,\r\n                echarsData,\r\n                isMeasure: true,\r\n                measuerStatus: 'connented',\r\n                isconnected: true,\r\n                showHistoryEchart: false,\r\n                countdown: 60,\r\n                tempHeight: false,\r\n              }, () => {\r\n                const option = this.getOption();\r\n                this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n              })\r\n            } else {\r\n              if (!firstMeasure) {\r\n                if (!this.state.tempHeight) {\r\n                  this.setState({\r\n                    tempHeight: true\r\n                  })\r\n                }\r\n              } else {\r\n                meetCondition = true\r\n                firstMeasure = false\r\n\r\n                if (countdownTimer) {\r\n                  console.log('有定时器了，清理掉');\r\n                  clearInterval(countdownTimer)\r\n                  this.setState((prestate, props) => ({\r\n                    countdown: 60\r\n                  }));\r\n                }\r\n                countdownTimer = setInterval(() => {\r\n                  console.log('进入定时器');\r\n                  let { countdown, isconnected } = this.state\r\n                  if (countdown <= 0) {\r\n                    countdown = 60\r\n                  }\r\n                  this.setState({\r\n                    countdown: countdown - 1\r\n\r\n                  })\r\n                  if (countdown <= 1) {\r\n                    clearInterval(countdownTimer)\r\n                    console.log('我要去发送了');\r\n                    ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n                  }\r\n                  if (isconnected === false) {\r\n                    clearInterval(countdownTimer)\r\n                  }\r\n                }, 1000);\r\n\r\n\r\n\r\n                let emerData = this.state.emerData\r\n                let str = {\r\n                  data0: temp0,\r\n                  data1: temp1,\r\n                  data2: temp2,\r\n                  pdt0,\r\n                  pdt1,\r\n                  Alpha0: alpha0,\r\n                  Alpha1: alpha1,\r\n                }\r\n                emerData.push(str)\r\n\r\n                let { echarsData } = this.state\r\n                let { wen0, wen1, Eci } = echarsData\r\n                Eci.push((echartCi++))\r\n                if (this.state.units === '℃') {\r\n                  wen0.push(temp0)\r\n                  wen1.push(temp1)\r\n                } else {\r\n                  wen0.push(temp0 * 1.8 + 32)\r\n                  wen1.push(temp1 * 1.8 + 32)\r\n                }\r\n\r\n                this.setState({\r\n                  Temp,\r\n                  echarsData,\r\n                  isMeasure: true,\r\n                  measuerStatus: 'connented',\r\n                  isconnected: true,\r\n                  showHistoryEchart: false,\r\n                  emerData,\r\n                  tempHeight: false\r\n                }, () => {\r\n                  const option = this.getOption();\r\n                  this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n                })\r\n              }\r\n\r\n            }\r\n\r\n            console.log('不满足');\r\n          }\r\n        } else {\r\n          console.log('差值', temp0, lastMeasureTemp, temp0 - lastMeasureTemp);\r\n          if (temp0 - lastMeasureTemp <= -0.03) {\r\n            console.log('本次测量要小于上次测量,不计入里面');\r\n            countdownTimer && clearInterval(countdownTimer)\r\n            lastMeasureBig = false\r\n            return\r\n          }\r\n          if (!lastMeasureBig) {\r\n            countdownTimer = setInterval(() => {\r\n              console.log('进入定时器');\r\n              let { countdown, isconnected } = this.state\r\n              if (countdown <= 0) {\r\n                countdown = 60\r\n              }\r\n              this.setState({\r\n                countdown: countdown - 1\r\n\r\n              })\r\n              if (countdown <= 1) {\r\n                clearInterval(countdownTimer)\r\n                console.log('我要去发送了');\r\n                ipcRenderer.send('usbdata', { command: '41', arr: [] })\r\n              }\r\n              if (isconnected === false) {\r\n                clearInterval(countdownTimer)\r\n              }\r\n            }, 1000);\r\n          }\r\n\r\n\r\n\r\n\r\n\r\n\r\n          lastMeasureBig = true\r\n          lastMeasureTemp = temp0\r\n          let emerData = this.state.emerData\r\n          let str = {\r\n            data0: temp0,\r\n            data1: temp1,\r\n            data2: temp2,\r\n            pdt0,\r\n            pdt1,\r\n            Alpha0: alpha0,\r\n            Alpha1: alpha1,\r\n          }\r\n          emerData.push(str)\r\n\r\n          let { echarsData } = this.state\r\n          let { wen0, wen1, Eci } = echarsData\r\n          Eci.push((echartCi++))\r\n          if (this.state.units === '℃') {\r\n            wen0.push(temp0)\r\n            wen1.push(temp1)\r\n          } else {\r\n            wen0.push(temp0 * 1.8 + 32)\r\n            wen1.push(temp1 * 1.8 + 32)\r\n          }\r\n\r\n          tempArr.push(temp0)\r\n          if (tempArr.length > 10) {\r\n            let k = (tempArr[tempArr.length - 1] - tempArr[tempArr.length - 11]) / 10\r\n            console.log('斜率', k);\r\n            if (k < -0.035) {\r\n              console.log('下降的有点狠了');\r\n              dropNum++\r\n            } else {\r\n              dropNum = 0\r\n            }\r\n            if (dropNum > 10) {\r\n              message.destroy()\r\n              message.error('Measurement failed')\r\n              dropNum = 0\r\n            }\r\n          }\r\n\r\n\r\n          this.setState({\r\n            Temp,\r\n            echarsData,\r\n            isMeasure: true,\r\n            measuerStatus: 'connented',\r\n            isconnected: true,\r\n            showHistoryEchart: false,\r\n            emerData,\r\n            tempHeight: false\r\n          }, () => {\r\n            const option = this.getOption();\r\n            this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n          })\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      },\r\n      208: () => {  //耳温\r\n\r\n\r\n\r\n        //现在探头0可能不存在，所以把探头0改为探头1\r\n\r\n        let temp0 = parseFloat(`${dataArr1[7]}.${(dataArr1[8])}`)\r\n\r\n\r\n        let Temp = Math.floor(temp0 * 10) / 10\r\n        console.log('------------gangwen--------------', Temp);\r\n\r\n        let emerData = this.state.emerData\r\n\r\n        let str = {\r\n          data0: temp0,\r\n\r\n        }\r\n        emerData.push(str)\r\n        this.setState({\r\n          emerData,\r\n          Temp,\r\n          isMeasure: false,\r\n          mearsurePart: 3,\r\n          measuerStatus: 'measuring',\r\n          isconnected: true\r\n        })\r\n        meetCondition = false\r\n\r\n      },\r\n      193: () => {  //硬件发送结束命令\r\n        let time = new Date() - is193Time\r\n        lastMeasureTemp = 0\r\n        lastMeasureBig = true\r\n        console.log(time);\r\n        if (time < 1000) {\r\n          is193Time = new Date()\r\n          console.log('我直接抛出');\r\n          return;\r\n        } else {\r\n          console.log('---------------------------', time);\r\n          is193Time = new Date()\r\n\r\n          countdownTimer && clearInterval(countdownTimer)\r\n\r\n\r\n          saveHistoryTime && clearTimeout(saveHistoryTime)\r\n\r\n          saveHistoryTime = setTimeout(() => { //防止连续向后台发送数据\r\n            countdownTimer && clearInterval(countdownTimer)\r\n\r\n            meetCondition = false\r\n\r\n\r\n\r\n            let { roomTemperature, referenceRectalTemperature, bodyConditionScore,\r\n              furLength, heartRate, bloodPressure, respiratoryRate, Temp, emerData } = this.state\r\n            if (emerData.length < 10) {\r\n              console.log('临床数据太少,不做保存');\r\n              return\r\n            }\r\n\r\n            if (bodyConditionScore === '') {\r\n              bodyConditionScore = null\r\n            } else {\r\n              bodyConditionScore = parseFloat(bodyConditionScore)\r\n            }\r\n\r\n            if (heartRate === '') {\r\n              heartRate = null\r\n            } else {\r\n              heartRate = parseFloat(heartRate)\r\n            }\r\n\r\n            if (respiratoryRate === '') {\r\n              respiratoryRate = null\r\n            } else {\r\n              respiratoryRate = parseFloat(respiratoryRate)\r\n            }\r\n\r\n            if (roomTemperature === '') {\r\n              roomTemperature = null\r\n            } else {\r\n              roomTemperature = ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2)\r\n            }\r\n\r\n            if (referenceRectalTemperature === '') {\r\n              referenceRectalTemperature = null\r\n            } else {\r\n              referenceRectalTemperature = ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2)\r\n            }\r\n\r\n            if (furLength === '') {\r\n              furLength = null\r\n            } else {\r\n              furLength = parseFloat(furLength)\r\n            }\r\n            let petVitalId = null\r\n            switch (this.state.petVitalTypeId) {\r\n              case '01': petVitalId = 1; break;\r\n              case '02': petVitalId = 3; break;\r\n              case '03': petVitalId = 4; break;\r\n              default: petVitalId = 1; break;\r\n            }\r\n            let datas = {\r\n\r\n              temperature: parseFloat(Temp),  //测量温度\r\n              roomTemperature,//室温\r\n              bodyConditionScore,\r\n              heartRate,\r\n              respiratoryRate,\r\n              referenceRectalTemperature,\r\n              furLength,\r\n              bloodPressure,\r\n              memo: this.state.notes,\r\n              petVitalTypeId: petVitalId,\r\n              clinicalDataEntityList: emerData\r\n            }\r\n            if (storage.roleId === `1`) {\r\n              datas.userId = storage.userId\r\n            } else {\r\n              datas.doctorId = storage.userId\r\n              datas.userId = storage.userId\r\n            }\r\n\r\n            if (this.state.selectPet.petId !== '' && this.state.isEmergency === false) {\r\n\r\n              datas.petId = this.state.selectPet.petId\r\n\r\n\r\n              console.log('临床测试入参：', datas);\r\n              //把数据保存进入云端\r\n              fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  meetCondition = false\r\n                  if (res.flag === true) {\r\n                    console.log('上传成功');\r\n                    // message.success('Uploaded successfully')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n\r\n                    message.success('Uploaded successfully')\r\n                    this._getHistory11(this.state.selectPet.petId)\r\n                  } else {\r\n                    console.log('上传失败');\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                    message.error('upload failed')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                  // message.error(err)\r\n                  this.setState({\r\n                    emerData: [],\r\n                    isMeasure: false\r\n                  })\r\n                  meetCondition = false\r\n                })\r\n            } else if (this.state.isEmergency === true) {\r\n\r\n              console.log('温度数据保存入参：', datas);\r\n\r\n              fetchRequest(`/clinical/addAllClinical`, 'POST', datas)\r\n                .then(res => {\r\n                  console.log(res);\r\n                  meetCondition = false\r\n                  if (res.flag === true) {\r\n                    console.log('上传成功');\r\n                    message.success('Uploaded successfully')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                    // this._getHistory11(this.state.selectPet.petId)\r\n                    this._getEmergencyHistory()\r\n                  } else {\r\n                    console.log('上传失败');\r\n                    message.error('upload failed')\r\n                    this.setState({\r\n                      emerData: [],\r\n                      isMeasure: false\r\n                    })\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                  message.error(err)\r\n                  this.setState({\r\n                    emerData: [],\r\n                    isMeasure: false\r\n                  })\r\n                  meetCondition = false\r\n                })\r\n            }\r\n\r\n            clearTimeout(saveHistoryTime)\r\n          }, 500);\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n      },\r\n\r\n      192: () => {   //开始测量返回结果\r\n        switch (newArr[3]) {\r\n          case 90: console.log('有探头，开始测量的返回指令·'); break;\r\n          case 11: console.log('没有探头，开始测量的返回值'); break;\r\n\r\n        }\r\n      },\r\n      129: () => {      //返回硬件版本号\r\n        console.log(`返回的版本号为${newArr[3]}`);\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n      },\r\n      135: () => {          //硬件的一些配置信息\r\n        /**\r\n         * ______________新版、旧版没法控制温度计__________________\r\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\r\n         * newArr[7] 无操作关机时间        bcd码\r\n         * newArr[8] 背光时间              bcd码\r\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\r\n         * newArr[10] 测量单位    01代表℃，00代表℉\r\n         */\r\n        countdownTimer && clearInterval(countdownTimer)\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n        let hardSet = electronStore.get('hardwareConfiguration')\r\n        let beep = hardSet.isBeep ? '11' : '00'\r\n        let unit = hardSet.isHua ? '00' : '01'\r\n\r\n        if (dataArr1[7] === hardSet.autoOff.number && dataArr1[8] === hardSet.backlightTimer.number &&\r\n          dataArr1[9] === beep && dataArr1[10] === unit) {\r\n        } else {\r\n          console.log('不相同，去发送命令');\r\n          let setArr = ['03', 'ed', '07', 'dd', hardSet.autoOff.number, hardSet.isBacklight ? hardSet.backlightTimer.number : '00', hardSet.isBeep ? '11' : '00', hardSet.isHua ? '00' : '01']\r\n          ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n        }\r\n        // if (newArr[10] === 0) {\r\n        //   this.setState({\r\n        //     units: '℉'\r\n        //   })\r\n        // } else {\r\n        //   this.setState({\r\n        //     units: '℃'\r\n        //   })\r\n        // }\r\n\r\n\r\n      },\r\n      238: () => {     //探头松动\r\n        console.log('探头松动');\r\n        this.setState({\r\n          isMeasure: false\r\n        })\r\n        meetCondition = false\r\n        message.error('The probe is loose, please re-install and measure again', 5)\r\n        clearInterval(countdownTimer)\r\n      },\r\n      98: () => { //蓝牙连接断开\r\n        console.log('断开连接---断开连接---断开连接---断开连接---断开连接---断开连接');\r\n\r\n        console.log(new Date() - is97Time);\r\n        if (new Date() - is97Time < 800) {\r\n          return\r\n        }\r\n        this.setState({\r\n          measuerStatus: 'disconnected',\r\n          countdown: 60,\r\n          isMeasure: false,\r\n          isconnected: false,\r\n          echarsData: {\r\n            Eci: [],\r\n            wen0: [],\r\n            wen1: []\r\n          },\r\n          Temp: '',\r\n          emerData: []\r\n        })\r\n        echartCi = 0\r\n        meetCondition = false\r\n\r\n      },\r\n      97: () => {       //蓝牙连接\r\n        console.log('连接成功---连接成功---连接成功---连接成功---连接成功---连接成功');\r\n        this.setState({\r\n          measuerStatus: 'connented',\r\n          isconnected: true\r\n\r\n        })\r\n        is97Time = new Date()\r\n      },\r\n      130: () => {   //获取到mac地址\r\n        let dataArr = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n        let str = ''\r\n        for (let i = 3; i < dataArr.length - 2; i++) {\r\n\r\n          str += dataArr[i]\r\n\r\n        }\r\n        // console.log(str);\r\n        this.setState({\r\n          notes: `${str}\r\n          `\r\n        })\r\n      },\r\n      177: () => {         //探头id\r\n        let dataArr1 = newArr.map(item => {\r\n          if (item.toString(16).length < 2) {\r\n            return '0' + item.toString(16)\r\n          } else {\r\n            return item.toString(16)\r\n          }\r\n        })\r\n        let id = ''\r\n        for (let i = 3; i < dataArr1.length - 2; i++) {\r\n          id += dataArr1[i]\r\n\r\n        }\r\n        console.log(id, dataArr1[7]);\r\n\r\n        this.setState({\r\n          probeID: id,\r\n          petVitalTypeId: dataArr1[7]\r\n        })\r\n        if (dataArr1[7] === '01') {\r\n          this.setState({\r\n            mearsurePart: 1\r\n          })\r\n        } else if (dataArr1[7] === '02') {\r\n          this.setState({\r\n            mearsurePart: 2\r\n          })\r\n        } else if (dataArr1[7] === '03') {\r\n          this.setState({\r\n            mearsurePart: 3\r\n          })\r\n        }\r\n\r\n\r\n\r\n      },\r\n      7: () => {  //发什么收什么，需要去重新插拔底座\r\n        console.log('重新插拔底座');\r\n        if (num07 === 3 && this.state.err07Visible === false) {\r\n          this.setState({\r\n            err07Visible: true\r\n          })\r\n        }\r\n      },\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  _mearsurePort = () => {\r\n    switch (this.state.mearsurePart) {\r\n      case 1: return (\r\n        <div >\r\n          <div className='part'>\r\n            Axillary\r\n            <img src={ye} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n      case 2: return (\r\n        <div >\r\n          <div className='part'>\r\n            Rectal\r\n            <img src={gang} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n      default: return (\r\n        <div >\r\n          <div className='part'>\r\n            Ear\r\n            <img src={er} alt=\"\" width={px(50)} />\r\n\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  _getEmergencyHistory = () => {\r\n\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate (data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        // console.log('获取的宠物记录列表1', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            if (datas[i].petId === null) {\r\n              let { petId, examId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo, clinicalDatagroupId,\r\n                bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime, clinicalDataEntity } = datas[i]\r\n              let Tem = temperature\r\n              try {\r\n                Tem = temperature || clinicalDataEntity.data0\r\n              } catch (error) {\r\n                console.log('抛出的异常', error);\r\n              }\r\n\r\n\r\n              let str = {\r\n                clinicalDatagroupId,\r\n                createTime,\r\n                date: moment(createTime).format('MMM DD'),\r\n                time: moment(createTime).format('hh:mm A'),\r\n                temp: parseInt(Tem * 10) / 10,\r\n                placement: petVitalTypeId,\r\n                note: memo,\r\n                historyId: examId,\r\n                bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId\r\n              }\r\n\r\n              historys.push(str)\r\n            }\r\n          }\r\n\r\n          //把所有数据拿完后做个排序\r\n\r\n          let historyData = ForwardRankingDate(historys, \"createTime\");\r\n          console.log('historyData:', historyData);\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  _getHistory11 = (petId) => {\r\n    let historys = []\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest(`/pet/getPetExamAndClinicalByPetId/${petId}`, 'GET', '')  //userID要自动的\r\n      .then(res => {\r\n        console.log('获取历史记录', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let datas = res.data\r\n          console.log('-------', datas);\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n\r\n            let data = datas[i]\r\n\r\n            let { petId, examId, clinicalDatagroupId, userId, petVitalTypeId, temperature, roomTemperature, bloodPressure, memo,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, createTime, clinicalDataEntity, modifiedTime } = data\r\n\r\n            if (!clinicalDatagroupId) {\r\n              continue\r\n            }\r\n            let Tem = temperature\r\n            if (clinicalDataEntity) {\r\n              Tem = Tem || clinicalDataEntity.data0\r\n            }\r\n            // console.log('==============', Tem);\r\n            Tem = Tem ? Tem : 0\r\n\r\n\r\n            let time = null\r\n            if (modifiedTime && `${modifiedTime}` !== '' && `${modifiedTime}` !== `undefined`) {\r\n              time = modifiedTime\r\n            } else {\r\n              time = createTime\r\n            }\r\n            let json = {\r\n              time,\r\n              Temp: Tem,\r\n              placement: petVitalTypeId,\r\n              note: memo,\r\n              historyId: examId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId\r\n            }\r\n            historys.push(json)\r\n\r\n\r\n          }\r\n          console.log('---', historys);\r\n          let historyData = []\r\n          for (let i = 0; i < historys.length; i++) {\r\n            let history = historys[i]\r\n            let { bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId, examId } = history\r\n            // console.log('--------', history.placement);\r\n            let placement = history.placement\r\n            if (placement === null || placement === '') {\r\n              placement = 1\r\n            }\r\n            let str = {\r\n              date: moment(history.time).format('MMM DD'),\r\n              time: moment(history.time).format('hh:mm A'),\r\n              temp: history.Temp,\r\n              placement,\r\n              note: history.note,\r\n              historyId: history.historyId,\r\n              bodyConditionScore, heartRate, respiratoryRate, referenceRectalTemperature, furLength, roomTemperature, bloodPressure, petId, userId,\r\n              key: examId\r\n            }\r\n            historyData.push(str)\r\n          }\r\n          this.setState({\r\n            historyData\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    // ipcRenderer.send('usbdata', { command: '07', arr: [] })\r\n    this.setState({\r\n      spin: true,  //\r\n      addpatient_description: '',\r\n      addpatient_petName: '',\r\n      addpatient_species: 1\r\n    })\r\n    if (this.state.patientId === '') {\r\n      this.setState({\r\n        spin: false\r\n      })\r\n    } else {\r\n      this._getPetInfo()\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  _getPetInfoBySave = () => {\r\n    let data = JSON.parse(storage.doctorExam)\r\n    console.log('从列表里面传过来的数据', data);\r\n    if (!data) {\r\n      console.log('从walk-in来的');\r\n    } else {\r\n      let { petId, petName, owner, breed, isMix, age, weight, url, patientId } = data\r\n      if (weight === 'unknown') {\r\n        weight = null\r\n      }\r\n      let selectPet = {\r\n        petId,\r\n        petName,\r\n        owner,\r\n        breedName: breed,\r\n        isMix,\r\n        age,\r\n        weight,\r\n        // birthday,\r\n        url,\r\n\r\n\r\n      }\r\n      this.setState({\r\n        selectPet,\r\n        leftStatus: 1,\r\n        patientId\r\n      })\r\n      this._getHistory11(petId)\r\n    }\r\n  }\r\n\r\n\r\n  _getPetInfo = () => {\r\n\r\n    switch (storage.identity) {\r\n      // case '1':\r\n      //   console.log('我是vetspire查找');\r\n\r\n\r\n\r\n      case '2':\r\n        console.log('我是ezyVet查找');\r\n        let params = {\r\n          animalId: this.state.patientId,\r\n          organizationId: 4\r\n        }\r\n        let paramsArray = [];\r\n        Object.keys(params).forEach(key =>\r\n          paramsArray.push(key + \"=\" + params[key])\r\n        );\r\n        let url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId'\r\n        // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n        if (url.search(/\\?/) === -1) {\r\n          url = url + \"?\" + paramsArray.join(\"&\");\r\n        } else {\r\n          url = url + \"&\" + paramsArray.join(\"&\");\r\n        }\r\n        console.log('ezyVet集成查找宠物入参-请求地址', params, url);\r\n        fetch(url, {\r\n          method: \"GET\",\r\n          headers: {\r\n            'authorization': `Bearer ${storage.ezyVetToken}`,\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((res) => {\r\n            console.log('res', res);\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              //有宠物，进入1\r\n              let petArr = res.data\r\n              if (petArr.length > 1) {\r\n                petArr.sort(function (a, b) {\r\n                  return a.createTime > b.createTime ? 1 : -1;\r\n                })\r\n              }\r\n\r\n\r\n              console.log(petArr);\r\n\r\n              let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr\r\n              if (isMix !== true) {\r\n                isMix = false\r\n              }\r\n              let age = moment(new Date()).diff(birthday, 'year')\r\n              let selectPet = {\r\n                petId,\r\n                petName,\r\n                owner: `${lastName}  ${firstName}`,\r\n                breedName,\r\n                isMix,\r\n                age,\r\n                weight,\r\n                birthday,\r\n                url\r\n\r\n              }\r\n              this.setState({\r\n                selectPet,\r\n                leftStatus: 1,\r\n              })\r\n              this._getHistory11(petId)\r\n\r\n            } else {\r\n              //没有宠物，进入2\r\n              this.setState({\r\n                leftStatus: 2\r\n              })\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n\r\n        break;\r\n\r\n      case '3':\r\n        console.log('我是一般医生查找');\r\n        let datas = {\r\n          patientId: this.state.patientId,\r\n          doctorId: storage.userId,\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n          datas.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n          datas.org = storage.lastOrganization\r\n        }\r\n        console.log('入参：', datas);\r\n        fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n          .then(res => {\r\n            console.log(res);\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            if (res.flag === true) {\r\n              //有宠物，进入1\r\n              let petArr = res.data\r\n              if (petArr.length > 1) {\r\n                petArr.sort(function (a, b) {\r\n                  return a.createTime > b.createTime ? 1 : -1;\r\n                })\r\n              }\r\n\r\n              console.log(petArr);\r\n\r\n              let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr[0]\r\n              if (isMix !== true) {\r\n                isMix = false\r\n              }\r\n              let age = moment(new Date()).diff(birthday, 'year')\r\n              let selectPet = {\r\n                petId,\r\n                petName,\r\n                owner: `${lastName}  ${firstName}`,\r\n                breedName,\r\n                isMix,\r\n                age,\r\n                weight,\r\n                birthday,\r\n                url\r\n\r\n              }\r\n              this.setState({\r\n                selectPet,\r\n                leftStatus: 1,\r\n              })\r\n              this._getHistory11(petId)\r\n\r\n            } else {\r\n              //没有宠物，进入2\r\n              this.setState({\r\n                leftStatus: 2\r\n              })\r\n            }\r\n          })\r\n          .catch(err => {\r\n            this.setState({\r\n              spin: false\r\n            })\r\n            console.log(err);\r\n          })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n\r\n  handleOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      emerPatientID: ''\r\n    });\r\n  };\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n  _addPatient = () => {\r\n    console.log(222);\r\n    let { addpatient_description, addpatient_petName, addpatient_species, patientId } = this.state\r\n    let speciesId = 3, petSpeciesBreedId = 13001\r\n\r\n    // speciesId   狗：2   猫：1    其他：3\r\n    switch (addpatient_species) {\r\n      case 1: speciesId = 2; petSpeciesBreedId = 12001; break;\r\n      case 2: speciesId = 1; petSpeciesBreedId = 11001; break;\r\n      default: speciesId = 3; petSpeciesBreedId = 13001;\r\n    }\r\n    // 11001 是cat 12001是dog 13001是other\r\n    // \r\n    let datas = {\r\n\r\n      petName: addpatient_petName,\r\n      description: addpatient_description,\r\n      speciesId,\r\n      doctorId: storage.userId,\r\n      petSpeciesBreedId\r\n\r\n\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      datas.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      datas.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log(datas);\r\n    fetchRequest(`/pet/addDeskPet/${patientId}`, 'POST', datas)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.flag === true) {\r\n          message.success('Patient id created successfully')\r\n          this._refresh()\r\n        } else {\r\n          console.log('创建Patient id 失败');\r\n          message.error('Patient id creation failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        message.error('Patient id creation failed')\r\n      })\r\n  }\r\n\r\n  _topLeft = () => {\r\n    let { historyData, spin, selectPet, patientId } = this.state\r\n    let { petName, owner, breedName, isMix, age, weight, url, speciesId } = selectPet\r\n    if (!breedName) {\r\n      breedName = ''\r\n    }\r\n    switch (breedName) {\r\n      case 'defaultdog':\r\n        breedName = 'Dog'\r\n\r\n        break;\r\n      case 'defaultother':\r\n        breedName = 'Other'\r\n\r\n        break;\r\n      case 'defaultcat':\r\n        breedName = 'Cat'\r\n        break;\r\n\r\n    }\r\n\r\n    let image = `url(${other})`\r\n\r\n    if (url) {\r\n      image = `url(${url}?download=0&width=80)`\r\n    } else {\r\n      switch (speciesId) {\r\n        case 1: image = `url(${cat})`; break;\r\n        case 2: image = `url(${dog})`; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n\r\n    let mix = ''\r\n    if (isMix === true) {\r\n      mix = 'Mix'\r\n    }\r\n    if (weight === null) {\r\n      weight = ''\r\n    } else {\r\n      weight = (2.2046 * parseFloat(weight)).toFixed(1) + 'lbs'\r\n    }\r\n\r\n    if (`${age}` === `NaN` || `${age}` === `null`) {\r\n      age = ''\r\n    } else {\r\n      age = `${age} yrs`\r\n    }\r\n    let datas = []\r\n    for (let i = 0; i < historyData.length; i++) {\r\n      if (i < 3) {\r\n        datas.push(historyData[i])\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    let dogbgc = '', catbgc = '', otherbgc = '';\r\n\r\n    switch (this.state.addpatient_species) {\r\n      case 1: dogbgc = '#E1206D'; catbgc = '#F08FB6'; otherbgc = '#F08FB6'; break;\r\n      case 2: dogbgc = '#F08FB6'; catbgc = '#E1206D'; otherbgc = '#F08FB6'; break;\r\n      case 3: dogbgc = '#F08FB6'; catbgc = '#F08FB6'; otherbgc = '#E1206D'; break;\r\n      default: break;\r\n    }\r\n\r\n    if (owner === `null  null`) {\r\n      // owner = 'unknown'\r\n      owner = ''\r\n    }\r\n    if (breedName === '' || breedName === null || breedName === undefined) {\r\n      // breedName = 'unknown'\r\n      breedName = ''\r\n    }\r\n    let title = ''\r\n    if (patientId) {\r\n      title += `ID: ${patientId}`\r\n    }\r\n    if (patientId && petName) {\r\n      title += ` , `\r\n    }\r\n    if (petName) {\r\n      title += `${petName}`\r\n    }\r\n    switch (this.state.leftStatus) {\r\n      case 1: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n            >\r\n              <Tooltip placement='bottom' title='Switch pet'>\r\n                <MyIcon\r\n                  type='icon-qiehuanchengshi'\r\n                  className=\"icon\"\r\n                  style={{ marginRight: px(10), textAlign: 'center', }}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      leftStatus: 3,\r\n                      isMeasure: false,\r\n                      selectPet: {\r\n                        petId: '',\r\n                        petName: '',\r\n                        owner: '',\r\n                        breedName: '',\r\n                        isMix: false,\r\n                        age: '',\r\n                        weight: '',\r\n                        birthday: '',\r\n                      },\r\n                      patientId: '',\r\n                      historyData: [],\r\n                    })\r\n                    meetCondition = false\r\n                  }} />\r\n              </Tooltip>\r\n\r\n              <div className='avatar'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  marginRight: px(10),\r\n                  backgroundImage: image,\r\n                }}\r\n\r\n              >\r\n\r\n                {/* <img src={image} width={px(80)} alt=\"\" /> */}\r\n\r\n                {(storage.identity === '3') &&\r\n                  <img className='edit' src={edit} alt=\"\" width='18px'\r\n                    onClick={() => {\r\n                      storage.goEditPet = 'mesasure'\r\n                      this.props.history.push({ pathname: '/page9', participate: { patientId, petName, petId: this.state.selectPet.petId } })\r\n                    }}\r\n\r\n                  />}\r\n\r\n\r\n              </div>\r\n              <div className=\"ltitle\">\r\n                <p > {title}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"info\"\r\n              style={{ marginTop: mTop(10), marginBottom: mTop(20), paddingLeft: px(80) }}\r\n            >\r\n              Owner: {`${owner}`} <br />\r\n              {`Breed:  ${breedName}  ${mix}`}<br />\r\n              Age: {`${age}`}<br />\r\n              Weight: {`${weight}`}<br />\r\n            </div>\r\n          </div>\r\n          <div className=\"history\">\r\n            <div className=\"heard1\"\r\n              style={{ height: mTop(40), marginTop: mTop(10) }}\r\n              onClick={() => { this.setState({ visible: true }) }}>\r\n              <span>Device Info</span>\r\n            </div>\r\n            <div className=\"historyBody\">\r\n              {/* <div className=\"devices\">\r\n                <p>Device:</p>\r\n                <Select defaultValue=\"Mella-684h2\" style={{ width: 120 }} size={'small'}\r\n                // onChange={handleChange}\r\n                >\r\n                  <Option value=\"device1\">Mella-684h2</Option>\r\n                  <Option value=\"device2\">Mella-587j0</Option>\r\n                  <Option value=\"device3\">Mella-742k3</Option>\r\n                </Select>\r\n              </div> */}\r\n              {this._mearsurePort()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      )\r\n\r\n      case 2: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"patirntID\"\r\n              style={{ marginTop: px(18) }}\r\n            >\r\n              <p style={{ width: '80px' }}>Patient ID:</p>\r\n              <Input\r\n                // style={{ border: 'none', outline: 'medium' }}\r\n                style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                value={this.state.patientId}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  this.setState({\r\n                    patientId: item.target.value.replace(/\\s/g, \"\")\r\n                  })\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  // console.log('------', e);\r\n                  if (e.keyCode === 13) {\r\n                    this._refresh()\r\n                  }\r\n                }}\r\n              />\r\n              <SyncOutlined className='refresh'\r\n                style={{ fontSize: px(25) }}\r\n                onClick={this._refresh} spin={spin} />\r\n            </div>\r\n\r\n            <div className='newPet'>\r\n              <p style={{ color: '#E1206D', fontSize: px(18), fontWeight: 'bold', marginTop: mTop(10), paddingLeft: px(30) }}>Yay! You got a new patient!</p>\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(18) }}\r\n              >\r\n                <p style={{ width: '80px' }}>Pet Name:</p>\r\n                <Input\r\n                  // style={{ border: 'none', outline: 'medium' }}\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={this.state.addpatient_petName}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    // console.log(item);\r\n                    this.setState({\r\n                      addpatient_petName: item.target.value\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"patirntID\"\r\n                style={{ marginTop: px(18) }}\r\n              >\r\n                <p style={{ width: '80px' }}>Description:</p>\r\n                <Input\r\n                  // style={{ border: 'none', outline: 'medium' }}\r\n                  style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                  value={this.state.addpatient_description}\r\n                  bordered={false}\r\n                  onChange={(item) => {\r\n                    // console.log(item);\r\n                    this.setState({\r\n                      addpatient_description: item.target.value\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"species\">\r\n\r\n                <ul>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50), }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: dogbgc }}\r\n                        onClick={() => { this.setState({ addpatient_species: 1 }) }} >\r\n                        <img src={dog} alt=\"\" style={{ width: px(38) }} />\r\n                      </div>\r\n                      Dog\r\n                    </div>\r\n                  </li>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50) }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: catbgc }}\r\n                        onClick={() => { this.setState({ addpatient_species: 2 }) }}  >\r\n                        <img src={cat} alt=\"\" style={{ width: px(38) }} />\r\n                      </div>\r\n                      Cat\r\n                    </div>\r\n                  </li>\r\n                  <li >\r\n                    <div className='speciesChild'\r\n                      style={{ width: px(50) }}\r\n                    >\r\n                      <div className='dog'\r\n                        style={{ width: px(50), height: px(50), backgroundColor: otherbgc }}\r\n\r\n                        onClick={() => { this.setState({ addpatient_species: 3 }) }}>\r\n                        <img src={other} alt=\"\" style={{ width: px(38), color: '#FFF' }} />\r\n                      </div>\r\n                      Other\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n              <div className=\"savebtn\"\r\n                style={{ marginTop: mTop(20) }}\r\n              >\r\n                <p\r\n                  style={{ width: px(180), height: px(40), marginLeft: px(70), fontSize: px(16) }}\r\n                  onClick={() => { this._addPatient() }}>Add New Patient</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      case 3: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"patirntID\">\r\n              <p style={{ width: '80px' }}>Patient ID:</p>\r\n              <Input\r\n                // style={{ border: 'none', outline: 'medium' }}\r\n                style={{ width: px(150), height: mTop(33), marginLeft: px(25), fontSize: px(18), marginRight: px(6) }}\r\n\r\n                value={this.state.patientId}\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  // console.log(item);\r\n                  this.setState({\r\n                    patientId: item.target.value.replace(/\\s/g, \"\")\r\n                  })\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  // console.log('------', e);\r\n                  if (e.keyCode === 13) {\r\n                    this._refresh()\r\n                  }\r\n                }}\r\n              />\r\n              <SyncOutlined className='refresh' onClick={this._refresh} spin={spin} />\r\n            </div>\r\n            <div className=\"emergency\"\r\n              style={{ marginTop: mTop(10) }}\r\n              onClick={() => {\r\n                this.setState({ leftStatus: 4, isEmergency: true })\r\n                this._getEmergencyHistory()\r\n              }}>\r\n              <div className=\"btn\"\r\n                style={{ width: px(180), height: px(40) }}\r\n              >\r\n                Emergency\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      case 4: return (\r\n        <div className=\"l\">\r\n          <div className=\"petinfo\">\r\n            <div className=\"heard\"\r\n              style={{ height: px(50), marginTop: mTop(10), fontSize: px(24) }}\r\n\r\n            >\r\n              {`Clinical Study Mode`}\r\n            </div>\r\n            <div className=\"emergencyText\">\r\n              <p style={{ fontSize: px(20), marginTop: mTop(10), margin: 0, padding: 0 }}>\r\n                You are in an emergency now,\r\n                you can click History in this mode to assign history records</p>\r\n\r\n            </div>\r\n            <div className=\"emergency\" onClick={() => {\r\n              this.setState({ leftStatus: 3, isEmergency: false, historyData: [] })\r\n\r\n            }}>\r\n              <div className=\"btn\"\r\n                style={{ width: px(180), height: px(40), fontSize: px(25) }}\r\n              >\r\n                Exit\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"history\">\r\n              <div className=\"heard1\"\r\n                style={{ height: mTop(40), marginTop: mTop(10) }}\r\n                onClick={() => { this.setState({ visible: true }) }}>\r\n                <span>Device Info</span>\r\n              </div>\r\n              <div className=\"historyBody\">\r\n                <div className=\"devices\">\r\n                  <p>Device:</p>\r\n                  <Select defaultValue=\"Mella-684h2\" style={{ width: 120 }} size={'small'}\r\n                  // onChange={handleChange}\r\n                  >\r\n                    <Option value=\"device1\">Mella-684h2</Option>\r\n                    <Option value=\"device2\">Mella-587j0</Option>\r\n                    <Option value=\"device3\">Mella-742k3</Option>\r\n                  </Select>\r\n                </div>\r\n                {this._mearsurePort()}\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n      default: return null;\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n  handleChange = index => {\r\n    console.log('---------', index);\r\n    this.setState({\r\n      furLength: index\r\n    })\r\n  };\r\n\r\n  handleChange1 = index => {\r\n    console.log('---------', index);\r\n    let bodyType = document.querySelectorAll('#_bodyType .ant-select-selector')\r\n    switch (`${index}`) {\r\n      case '1': bodyType[0].style.width = \"105px\"\r\n\r\n        break;\r\n      case '2': bodyType[0].style.width = \"130px\"\r\n\r\n        break;\r\n      case '3': bodyType[0].style.width = \"120px\"\r\n\r\n        break;\r\n\r\n      default: bodyType[0].style.width = \"105px\"\r\n        break;\r\n    }\r\n\r\n    // bodyType[0].style.width = \"120px\"\r\n    console.dir(bodyType)\r\n    this.setState({\r\n      bodyType: index\r\n    })\r\n  };\r\n\r\n  _foot = () => {\r\n    let lbgc = '', rbgc = ''\r\n    if (this.state.isPetCharacteristics) {\r\n      lbgc = 'rgba(25,173,228,0.5)'; rbgc = 'rgba(105,201,237,1)'\r\n    } else {\r\n      lbgc = 'rgba(105,201,237,1)'; rbgc = 'rgba(25,173,228,0.5)'\r\n    }\r\n    return (\r\n      <div className=\"clinical_foot\" >\r\n        <div className=\"top\"\r\n          style={{ height: '10%', }}\r\n        >\r\n\r\n          <div className=\"foot_l\" style={{ backgroundColor: lbgc }} onClick={() => this.setState({ isPetCharacteristics: true })}>\r\n            Pet Characteristics\r\n          </div>\r\n          <div className=\"foot_l\" style={{ backgroundColor: rbgc }} onClick={() => this.setState({ isPetCharacteristics: false })}>\r\n            History\r\n          </div>\r\n        </div>\r\n        {this.state.isPetCharacteristics ?\r\n          this._petCharacteristics() :\r\n          this._history()\r\n        }\r\n      </div >\r\n    )\r\n  }\r\n  _petCharacteristics = () => {\r\n\r\n    let { furLength, bodyType } = this.state\r\n    let placeholder = '', placeholder1 = ''\r\n    switch (`${furLength}`) {\r\n      case '1': placeholder = 'smooth'; break;\r\n      case '2': placeholder = 'short'; break;\r\n      case '3': placeholder = 'medium'; break;\r\n      case '4': placeholder = 'long'; break;\r\n      default: break;\r\n    }\r\n\r\n    switch (`${bodyType}`) {\r\n      case '1': placeholder1 = 'small'; break;\r\n      case '2': placeholder1 = 'barrel chested'; break;\r\n      case '3': placeholder1 = 'keel chested'; break;\r\n      default: break;\r\n    }\r\n    return (\r\n      <div className=\"petChaeacteristics\"\r\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: '90%' }}\r\n      >\r\n        <div className=\"child\" style={{ marginTop: mTop(30), }}>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Room Temperature: </p>\r\n            <Input className='inp'\r\n              // style={{ border: 'none', outline: 'medium' }}\r\n              // style={{ width: px(105), height: mTop(33), fontSize: px(18), marginRight: px(6) }}\r\n\r\n              value={`${this.state.roomTemperature}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  roomTemperature: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"5%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>℉</span>\r\n          </div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Reference Rectal Temperature: </p>\r\n            <Input className='inp'\r\n              // style={{ border: 'none', outline: 'medium' }}\r\n\r\n              value={`${this.state.referenceRectalTemperature}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  referenceRectalTemperature: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"10%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>℉</span>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"child\">\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <p style={{ width: '150px' }}>Body Condition Score:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n\r\n              value={this.state.bodyConditionScore}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  bodyConditionScore: str\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n          <div className='furLength' >\r\n            <p style={{ width: '150px' }}>Fur Length: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange}\r\n              style={{ width: '105px', borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={placeholder}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"child\">\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative', }}>\r\n            <p style={{ width: '150px' }}>Heart Rate:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={`${this.state.heartRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  heartRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '1px' }}>bpm</span>\r\n          </div>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\r\n            <p style={{ width: '150px' }}>Blood Pressure:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={this.state.bloodPressure}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  bloodPressure: str\r\n                })\r\n              }}\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '5px' }}>mm</span>\r\n          </div>\r\n\r\n        </div>\r\n        <div className=\"child\" style={{ marginBottom: px(40) }}>\r\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative', }}>\r\n            <p style={{ width: '150px' }}>Respiratory Rate:  </p>\r\n            <Input className='inp'\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={`${this.state.respiratoryRate}`}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  respiratoryRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span style={{ position: 'absolute', top: \"2%\", right: '5%', display: 'table-cell', whiteSpace: 'nowrap', paddingTop: '5px', paddingRight: '1px' }}>bpm</span>\r\n          </div>\r\n          <div className='furLength' id='_bodyType'  >\r\n            {/* <p style={{ width: '150px' }}>Body Type: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange1}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={placeholder1}\r\n              dropdownMatchSelectWidth={120}\r\n\r\n            >\r\n              <Option value=\"1\">small</Option>\r\n              <Option value=\"2\">barrel chested</Option>\r\n              <Option value=\"3\">keel chested</Option>\r\n            </Select> */}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"note\">\r\n          <p>Notes:</p>\r\n          <textarea\r\n            rows=\"2\"\r\n            cols=\"30\"\r\n            value={this.state.notes}\r\n            onChange={(val) => {\r\n              console.log(val);\r\n              this.setState({\r\n                notes: val.target.value\r\n              })\r\n            }}\r\n\r\n          >\r\n          </textarea>\r\n        </div> */}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  _history = () => {\r\n\r\n    const _del = (key, record) => {\r\n      console.log('删除', key, record);\r\n\r\n\r\n      /**------------这里还要删除后台的数据------------ */\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, 'DELETE')\r\n        .then(res => {\r\n          if (res.flag === true) {\r\n            console.log('删除成功');\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key)\r\n            });\r\n          } else {\r\n            console.log('删除失败');\r\n          }\r\n        })\r\n    }\r\n    const _edit = (key, record) => {\r\n      console.log('编辑', key, record);\r\n      let { heartRate, bloodPressure, respiratoryRate, referenceRectalTemperature, roomTemperature, bodyConditionScore, furLength, } = record\r\n      console.log('转换前：', heartRate, bloodPressure, respiratoryRate, referenceRectalTemperature, roomTemperature);\r\n      let editHeartRate = (heartRate !== null && heartRate !== undefined) ? heartRate : ''\r\n      let editBloodPressure = (bloodPressure !== null && bloodPressure !== undefined) ? bloodPressure : ''\r\n      let editRespiratoryRate = (respiratoryRate !== null && respiratoryRate !== undefined) ? respiratoryRate : ''\r\n      let editRectal = (referenceRectalTemperature !== null && referenceRectalTemperature !== undefined) ? (referenceRectalTemperature * 1.8 + 32).toFixed(1) : ''\r\n      let editRoomTemperature = (roomTemperature !== null && roomTemperature !== undefined) ? (roomTemperature * 1.8 + 32).toFixed(1) : ''\r\n      let editBodyConditionScore = (bodyConditionScore !== null && bodyConditionScore !== undefined) ? bodyConditionScore : ''\r\n      let editFurLength = furLength\r\n\r\n      console.log(editRectal,\r\n        editRoomTemperature,\r\n        editHeartRate,\r\n        editBloodPressure,\r\n        editRespiratoryRate);\r\n      this.setState({\r\n        editRectal,\r\n        editRoomTemperature,\r\n        editHeartRate,\r\n        editBloodPressure,\r\n        editRespiratoryRate,\r\n        editVisible: true,\r\n        editId: key,\r\n        memo: record.note,\r\n        editBodyConditionScore,\r\n        editFurLength\r\n      })\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    const see = (id, record) => {\r\n      console.log(id, record);\r\n      this.setState({\r\n        tip: 'data is loading',\r\n        tipSpin: true\r\n      })\r\n\r\n      fetchRequest3(`/exam/getClinicalDataByExamId/${id}`, 'GET')\r\n        .then(res => {\r\n          console.log('此条记录的全部数据：', res);\r\n          this.setState({\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          if (res.flag) {\r\n            let datas = res.data.clinicalDataEntityList\r\n\r\n\r\n            if (datas) {\r\n\r\n              let echarsData = {\r\n                Eci: [],\r\n                wen0: [],\r\n                wen1: []\r\n              }\r\n              // let { echarsData } = this.state\r\n              let { wen0, wen1, Eci } = echarsData\r\n              for (let i = 0; i < datas.length; i++) {\r\n                let { data0, data1 } = datas[i]\r\n\r\n\r\n                Eci.push(i)\r\n                if (this.state.units === '℃') {\r\n                  wen0.push(data0)\r\n                  wen1.push(data1)\r\n\r\n                } else {\r\n                  wen0.push(data0 * 1.8 + 32)\r\n                  wen1.push(data1 * 1.8 + 32)\r\n                }\r\n\r\n              }\r\n              let Temp = datas[datas.length - 1].data0 || ''\r\n              console.log('----------------', Temp);\r\n              this.setState({\r\n                echarsData,\r\n                Temp,\r\n                showHistoryEchart: true\r\n              }, () => {\r\n                const option = this.getOption();\r\n                this.echartsElement.getEchartsInstance().setOption(option)  // 实时改变\r\n              })\r\n            }\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.setState({\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          console.log(err);\r\n        })\r\n    }\r\n    const isflog = window.screen.height < 1000 ? true : false\r\n\r\n    const columns = [\r\n      {\r\n        title: '',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        width: '16%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          // console.log('狩猎:', text, record, index);\r\n          //record:\r\n          return (\r\n            <div style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center', padding: `${px(18)}px 0` }} >\r\n              <Popconfirm title=\"Sure to delete?\" onConfirm={() => _del(record.historyId, record)}>\r\n                <img src={del} alt=\"\" style={{ width: px(25) }} />\r\n              </Popconfirm>\r\n              {\r\n                (this.state.isEmergency) ? (\r\n                  <div className=\"assign\"\r\n                    style={{ width: mTop(60), height: mTop(28), fontSize: px(14) }}\r\n\r\n                    onClick={() => {\r\n                      console.log(text, record, index);\r\n                      this.setState({\r\n                        visible: true,\r\n                        seleceEmergencies: record\r\n                      })\r\n                    }}>Assign</div>\r\n                ) : (\r\n                  <>\r\n                    <img src={edit} alt=\"\" style={{ width: px(25) }}\r\n                      onClick={() => _edit(record.historyId, record)}\r\n                    />\r\n\r\n                    <img src={start} alt=\"\" style={{ width: px(25) }}\r\n                      onClick={() => see(record.historyId, record)}\r\n                    />\r\n\r\n                    {/* <div\r\n                      onClick={() => see(record.historyId, record)}\r\n                      className='see'\r\n                      style={{ width: px(25), height: px(25) }}\r\n                    >\r\n                      <MyIcon type={'icon-mimaxiaoyanjing-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(13) }} />\r\n                    </div> */}\r\n                  </>\r\n                )\r\n              }\r\n\r\n\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        width: '14%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'time',\r\n        key: 'time',\r\n        width: '14%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: `Temp(${this.state.units})`,\r\n        // title: `Temp(℉)`,\r\n        key: 'temp',\r\n        dataIndex: 'temp',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        width: '14%',\r\n        render: (text, record, index) => {\r\n          // console.log(text, record);\r\n\r\n          /**\r\n          * bag：温度数值前的圆圈的背景颜色\r\n          * tem：展示的温度\r\n          * endvalue:将从后台得到的数据全部转化成华氏度\r\n          * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n          * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n          * \r\n          */\r\n\r\n\r\n          let bag = '', tem = ''\r\n\r\n          let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n          let min = 100.4, max = 102.56\r\n\r\n\r\n\r\n\r\n\r\n\r\n          if (endValue > max) {\r\n            bag = '#E1206D'\r\n          } else if (endValue < min) {\r\n            bag = '#98DA86'\r\n          } else {\r\n            bag = '#58BDE6'\r\n          }\r\n\r\n          if (this.state.units === '℃') {\r\n            if (text) {\r\n              tem = `${text}${this.state.units}`\r\n              if (text > 55) {\r\n\r\n                tem = `${((text - 32) / 1.8).toFixed(1)}${this.state.units}`\r\n              }\r\n            }\r\n          } else {\r\n            if (text) {\r\n              if (text > 55) {\r\n                tem = `${text}${this.state.units}`\r\n              } else {\r\n                tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n              }\r\n\r\n            }\r\n          }\r\n          return (\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: `Rectal Temperature`,\r\n        key: 'referenceRectalTemperature',\r\n        dataIndex: 'referenceRectalTemperature',\r\n        width: '15%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          // console.log('肛温的值：', text);\r\n          let num = text\r\n          if (text !== null) {\r\n            num = (text * 1.8 + 32).toFixed(1)\r\n          }\r\n\r\n          return (\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n              {text !== null && <p style={{ margin: 0, padding: 0 }}>{num} <span>{'℉'}</span></p>}\r\n\r\n            </div>\r\n          )\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Placement',\r\n        dataIndex: 'placement',\r\n        key: 'placement',\r\n        align: 'center',\r\n        width: '15%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n          switch (record.placement) {\r\n            case 1: return (    //腋温\r\n              <div>\r\n                <img src={palcement_ye} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 3: return (     //肛温\r\n              <div>\r\n                <img src={placement_gang} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 2: return (     //肛温\r\n              <div>\r\n                <img src={placement_gang} alt=\"\" />\r\n              </div>\r\n            )\r\n            case 4: return (    //耳温\r\n              <div>\r\n                <img src={placement_er} alt=\"\" />\r\n              </div>\r\n            )\r\n            default: return null;\r\n          }\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Note',\r\n        dataIndex: 'note',\r\n        key: 'note',\r\n        width: '12%',\r\n        className: `${isflog ? 'operation' : ''}`,\r\n        render: (text, record, index) => {\r\n\r\n          return (\r\n            <p style={{ width: '70px' }}>{text}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n    ];\r\n\r\n\r\n\r\n    let hisHe = mTop(200)\r\n    try {\r\n      let historyElement = document.querySelectorAll('#clinicalMeasure11 .historyTable')\r\n      hisHe = historyElement[0].clientHeight - mTop(100)\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className='historyTable' style={{ height: '90%' }}>\r\n        <Table\r\n          columns={columns}\r\n          loading={this.state.loading}\r\n          dataSource={this.state.historyData}\r\n          rowKey={columns => columns.historyId}\r\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\r\n          pagination={false}\r\n          scroll={{\r\n            y: hisHe\r\n          }}\r\n        />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n  _status = () => {\r\n    let { closeColor, closebgc, minbgc, units, isMeasure, Temp, measuerStatus, isconnected, showHistoryEchart } = this.state\r\n    let text = '', unit = '', temColor = ''\r\n\r\n    Temp = parseFloat(Temp)\r\n\r\n    if (isconnected === false) {\r\n      if (!showHistoryEchart) {\r\n        Temp = ''\r\n        text = 'disconnected'\r\n        temColor = '#3B3A3A'\r\n      } else {\r\n        text = 'disconnected'\r\n        temColor = '#3B3A3A'\r\n      }\r\n\r\n    } else {\r\n      text = 'connected'\r\n      temColor = '#3B3A3A'\r\n      if (Temp > 15) {\r\n        unit = units\r\n        if (Temp > 39) {\r\n          text = 'High'\r\n          temColor = '#E1206D'\r\n        } else if (Temp < 31) {\r\n          text = 'Low'\r\n          temColor = '#47C2ED'\r\n        } else {\r\n          text = 'Normal'\r\n          temColor = '#78D35D'\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n\r\n    let temp = ''\r\n\r\n    if (`${Temp}` !== 'NaN' && Temp !== '') {\r\n      temp = units === '℉' ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1)\r\n    }\r\n    let lowFlog = false\r\n    if (unit === '℃') {\r\n      if (temp < 24.8) {\r\n        lowFlog = true\r\n      }\r\n    } else {\r\n      if (temp < 76.6) {\r\n        lowFlog = true\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n      <div className='Tem' style={{ color: temColor, right: px(30), bottom: mTop(120) }}>\r\n\r\n        {(!isMeasure) ? (\r\n          showHistoryEchart ? <>\r\n            <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{units}</sup></span><br />\r\n            {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\r\n\r\n            <span style={{ fontSize: px(22), color: '#8a8a8a' }}>{`History`}</span>\r\n          </> :\r\n\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{unit}</sup></span><br />\r\n              <span style={{ fontSize: px(22) }}>{text}</span>\r\n            </>\r\n        ) : (\r\n          lowFlog ? (\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{'Low'}</span><br />\r\n\r\n            </>\r\n          ) : (\r\n            <>\r\n              <span style={{ fontSize: px(36) }}>{temp} <sup style={{ fontSize: px(18) }}>{unit}</sup></span><br />\r\n\r\n            </>\r\n          )\r\n\r\n        )}\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _modal = () => {\r\n    let that = this\r\n\r\n    function save () {\r\n\r\n\r\n      switch (storage.identity) {\r\n        case '1':\r\n          console.log('我是vetspire查找');\r\n\r\n          break;\r\n\r\n        case '2':\r\n          console.log('我是ezyVet查找');\r\n          let params = {\r\n            animalId: that.state.emerPatientID,\r\n            organizationId: 4\r\n          }\r\n          let paramsArray = [];\r\n          Object.keys(params).forEach(key =>\r\n            paramsArray.push(key + \"=\" + params[key])\r\n          );\r\n          let url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId'\r\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n          if (url.search(/\\?/) === -1) {\r\n            url = url + \"?\" + paramsArray.join(\"&\");\r\n          } else {\r\n            url = url + \"&\" + paramsArray.join(\"&\");\r\n          }\r\n          console.log('ezyVet集成查找宠物入参-请求地址', params, url);\r\n          fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              'authorization': `Bearer ${storage.ezyVetToken}`,\r\n            }\r\n          }).then((response) => response.json())\r\n            .then((res) => {\r\n              console.log('res', res);\r\n              this.setState({\r\n                spin: false\r\n              })\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  })\r\n                }\r\n\r\n\r\n                console.log(petArr);\r\n\r\n                let { petId, petName, lastName, firstName, breedName, isMix, birthday, weight, url } = petArr\r\n                assign(petId)\r\n\r\n              } else {\r\n                //没有宠物\r\n                message.error('There are no pets under this patientID')\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              message.error('There are no pets under this patientID')\r\n            });\r\n\r\n          break;\r\n\r\n        case '3':\r\n          console.log('我是一般医生查找');\r\n          let datas = {\r\n            patientId: that.state.emerPatientID,\r\n            doctorId: storage.userId,\r\n          }\r\n          if (storage.lastWorkplaceId) {\r\n            datas.workplaceId = storage.lastWorkplaceId\r\n          }\r\n          console.log('入参：', datas);\r\n          fetchRequest('/pet/getPetInfoByPatientIdAndPetId', 'POST', datas)\r\n            .then(res => {\r\n\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  })\r\n                }\r\n\r\n                console.log(petArr);\r\n\r\n                let { petId, } = petArr[0]\r\n                assign(petId)\r\n              } else {\r\n\r\n                message.error('There are no pets under this patientID')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              message.error('There are no pets under this patientID')\r\n              console.log(err);\r\n            })\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      const assign = (petId) => {\r\n        let parmes = {\r\n          petId,\r\n          clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId\r\n        }\r\n        fetchRequest(`/pet/addAndSavePetExam/${that.state.seleceEmergencies.historyId}`, 'POST', parmes)\r\n          .then(res => {\r\n            console.log('----------', res);\r\n            if (res.flag === true) {\r\n              console.log('分配成功');\r\n              message.success('Assigned successfully')\r\n              that._getEmergencyHistory()\r\n              that.setState({\r\n                visible: false,\r\n                emerPatientID: ''\r\n              })\r\n            } else {\r\n              message.success('Assignment failed')\r\n            }\r\n\r\n          })\r\n          .catch(err => {\r\n            console.log(err);\r\n            message.success('Assignment failed')\r\n          })\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, visible } = this.state\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Distribute the history of emergencies\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onOk={this.handleOk}\r\n        onCancel={this.handleCancel}\r\n\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Patient ID</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              value={this.state.emerPatientID}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  emerPatientID: item.target.value.replace(/\\s/g, \"\")\r\n                })\r\n              }}\r\n              onKeyDown={(e) => {\r\n                // console.log('------', e);\r\n                if (e.keyCode === 13) {\r\n                  save()\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"btn\" onClick={save}>Save</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n    )\r\n\r\n  }\r\n\r\n  _editModal = () => {\r\n    let that = this\r\n\r\n    function save () {\r\n      let { editBodyConditionScore, editFurLength, editHeartRate, editBloodPressure, editRespiratoryRate } = that.state\r\n      let datas = {\r\n        memo: that.state.memo,\r\n        bodyConditionScore: parseInt(editBodyConditionScore),\r\n        furLength: parseInt(editFurLength),\r\n        heartRate: editHeartRate,\r\n        bloodPressure: editBloodPressure,\r\n        respiratoryRate: editRespiratoryRate\r\n        // roomTemperature: that.state.editRoomTemperature,\r\n        // referenceRectalTemperature: that.state.editRectal\r\n      }\r\n      if (that.state.editRoomTemperature) {\r\n        datas.roomTemperature = ((parseFloat(that.state.editRoomTemperature) - 32) / 1.8).toFixed(2)\r\n      }\r\n      if (that.state.editRectal) {\r\n        datas.referenceRectalTemperature = ((parseFloat(that.state.editRectal) - 32) / 1.8).toFixed(2)\r\n      }\r\n\r\n      console.log('入参：', datas, that.state.editId);\r\n      that.setState({\r\n        editVisible: false,\r\n        tip: 'Data is being modified',\r\n        tipSpin: true,\r\n\r\n      })\r\n      fetchRequest(`/pet/updatePetExam/${that.state.editId}`, 'POST', datas)\r\n        .then(res => {\r\n          console.log(res);\r\n          that.setState({\r\n\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          message.success('Data modified successfully')\r\n\r\n          that._getHistory11(that.state.selectPet.petId)\r\n        })\r\n        .catch(err => {\r\n          that.setState({\r\n            spin: false,\r\n            tip: '',\r\n            tipSpin: false\r\n          })\r\n          message.success(' Data modification failed')\r\n\r\n          console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    let { disabled, bounds, editVisible, editFurLength } = this.state\r\n    let furLength = ''\r\n    if (editFurLength !== null && editFurLength !== undefined) {\r\n      switch (`${editFurLength}`) {\r\n        case '1': furLength = 'smooth'; break;\r\n        case '2': furLength = 'short'; break;\r\n        case '3': furLength = 'medium'; break;\r\n        case '4': furLength = 'long'; break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              cursor: 'move',\r\n              height: '20px',\r\n              textAlign: 'center'\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          >\r\n            Modification history information\r\n          </div>\r\n        }\r\n        visible={editVisible}\r\n        // visible={true}\r\n        onCancel={() => { that.setState({ editVisible: false, }); }}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div id=\"selectEmergenciesModal\">\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Room Temperature </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRoomTemperature}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  editRoomTemperature: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Rectal Temperature</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRectal}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\r\n                this.setState({\r\n                  editRectal: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>℉</span>\r\n          </div>\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Body Condition Score</p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editBodyConditionScore}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n                this.setState({\r\n                  editBodyConditionScore: str\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className='bodyType11' >\r\n            <p style={{ width: '140px' }}>Fur Length: </p>\r\n            <Select\r\n              placeholder\r\n              onChange={(index) => {\r\n                console.log(index);\r\n                this.setState({\r\n                  editFurLength: index\r\n                })\r\n              }}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              value={furLength}\r\n            >\r\n              <Option value=\"1\">smooth</Option>\r\n              <Option value=\"2\">short</Option>\r\n              <Option value=\"3\">medium</Option>\r\n              <Option value=\"4\">long</Option>\r\n            </Select>\r\n          </div>\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Heart Rate: </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editHeartRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n\r\n                this.setState({\r\n                  editHeartRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Blood Pressure </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editBloodPressure}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  editBloodPressure: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>mm</span>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '140px' }}>Respiratory Rate: </p>\r\n            <Input\r\n              style={{ border: 'none', outline: 'medium' }}\r\n              bordered={false}\r\n              value={this.state.editRespiratoryRate}\r\n              onChange={(item) => {\r\n                let str = item.target.value.replace(/[^\\d]/g, '')\r\n\r\n                this.setState({\r\n                  editRespiratoryRate: str\r\n                })\r\n              }}\r\n\r\n            />\r\n            <span>bpm</span>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          {/* <div className='bodyType11' >\r\n            <p style={{ width: '140px' }}>Body Type: </p>\r\n            <Select\r\n              // showSearch\r\n              placeholder\r\n              onChange={this.handleChange1}\r\n              style={{ borderRadius: '40px', height: '33px', outline: 'none', borderWidth: 0 }}\r\n              // value={placeholder1}\r\n              dropdownMatchSelectWidth={120}\r\n\r\n            >\r\n              <Option value=\"1\">small</Option>\r\n              <Option value=\"2\">barrel chested</Option>\r\n              <Option value=\"3\">keel chested</Option>\r\n            </Select>\r\n          </div> */}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <div className=\"selectEmergenciesModal\">\r\n            <p style={{ width: '80px' }}>Notes</p>\r\n            <textarea\r\n              rows=\"2\"\r\n              cols=\"40\"\r\n              style={{ textIndent: '10px' }}\r\n              value={that.state.memo}\r\n              onChange={(val) => {\r\n                that.setState({\r\n                  memo: val.target.value\r\n                })\r\n              }}\r\n\r\n            >\r\n            </textarea>\r\n          </div>\r\n\r\n          <div className=\"btn\" onClick={save}>Save</div>\r\n        </div>\r\n\r\n      </Modal>\r\n\r\n\r\n\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    console.log('-----', this.state.Temp);\r\n    return (\r\n      <div id=\"clinicalMeasure11\">\r\n        <div style={{ height: '60%' }}>\r\n\r\n          <div className=\"heard\">\r\n            <Heard\r\n              onSearch={(data) => {\r\n                console.log(data);\r\n                this.setState({\r\n                  patientId: data.patientId\r\n                }, () => {\r\n                  this._getPetInfo()\r\n                })\r\n              }}\r\n              menu9Click={() => {\r\n                storage.measurepatientId = this.state.patientId;\r\n              }}\r\n              menu8Click={() => {\r\n                switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n                  case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                    break;\r\n                  case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n\r\n                  case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                    break;\r\n                  default:\r\n                    break;\r\n                }\r\n              }}\r\n\r\n              onReturn={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n          {/* 宠物信息与折线图部分 */}\r\n          <div className='clinical_top'\r\n          // style={{ height: mTop(480) }}\r\n          >\r\n            {this._topLeft()}\r\n            <div className=\"r\" >\r\n              {!this.state.isconnected && <div className=\"bb1\"\r\n                style={{ left: px(150) }}\r\n              >\r\n                <div className=\"btn78\"\r\n                  style={{ width: px(220), height: mTop(30), fontSize: px(16) }}\r\n                  onClick={() => {\r\n                    console.log('点击了切换按钮');\r\n\r\n                    if (resyncDeviceIsClick === true) {\r\n                      resyncDeviceIsClick = false\r\n                      console.log('发送给主进程切换按钮');\r\n                      ipcRenderer.send('qiehuan')\r\n                      // ipcRenderer.send('getSerialPort')\r\n                      const time = setTimeout(() => {\r\n                        resyncDeviceIsClick = true\r\n                        clearTimeout(time)\r\n                      }, 2500)\r\n                    }\r\n\r\n\r\n\r\n                  }}\r\n                >Re-sync Base</div>\r\n              </div>}\r\n\r\n\r\n              <div id='myCharts'\r\n                style={{ marginTop: mTop(50) }}\r\n\r\n              >\r\n                <ReactECharts\r\n\r\n                  option={this.getOption()} theme=\"Imooc\" style={{ height: mTop(430), }}\r\n                  notMerge={true}\r\n                  lazyUpdate={true}\r\n                  // theme={\"theme_name\"}\r\n                  ref={(e) => { this.echartsElement = e }}\r\n                />\r\n              </div>\r\n\r\n              {this._status()}\r\n              {/* {this._mearsurePort()} */}\r\n              <div className=\"time\"\r\n                style={{ bottom: mTop(20), left: px(70) }}\r\n              >\r\n                {(this.state.isconnected) ? (<p style={{ fontSize: px(25) }}>{`Measurement Timer  ${this.state.countdown} s`}</p>) : null}\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        {/* 底部宠物信息 */}\r\n        {this._foot()}\r\n        {this._modal()}\r\n        {this._editModal()}\r\n\r\n\r\n        <Modal\r\n\r\n          visible={this.state.err07Visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">prompt\r\n            </div>\r\n\r\n            <div className='text'>Please re-plug the base device</div>\r\n\r\n\r\n            <div className=\"btn\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '5px' }}>\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    err07Visible: false,\r\n                  })\r\n                  num07 = 0\r\n\r\n                }}\r\n              >OK</button>\r\n\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n\r\n        {\r\n          this.state.tipSpin &&\r\n          // true &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              data is loading...\r\n            </p>\r\n          </div>\r\n        }\r\n        <MyModal\r\n          visible={this.state.tempHeight}\r\n          element={\r\n            <div className=\"tempHeight\">\r\n              <div className=\"tempHeightImg\">\r\n                <img src={redjinggao} alt=\"\" style={{ width: px(60), }} />\r\n              </div>\r\n              <div className=\"tempText\" style={{ fontSize: px(24), marginBottom: px(60) }}>If the initial temperature reading is too high, the measurement may be inaccurate. Consider letting the thermometer cool down to 85°F and try again</div>\r\n\r\n              <div className=\"tempBtn flex\" style={{ height: px(45), fontSize: px(24), marginBottom: px(20) }}\r\n                onClick={() => { this.setState({ tempHeight: false }) }}\r\n              >\r\n                OK\r\n              </div>\r\n\r\n              <div className=\"close\" style={{ top: px(20), right: px(20) }}\r\n                onClick={() => { this.setState({ tempHeight: false }) }}\r\n              >\r\n                <img src={close} alt=\"\" style={{ width: px(30) }} />\r\n              </div>\r\n\r\n\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\joinOrganizationByOption\\JoinOrganizationByOption.jsx",["655","656","657","658","659","660","661","662"],"import React, { Component } from 'react'\r\nimport {\r\n  // Button,\r\n  message,\r\n  Modal,\r\n  Input\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\nimport { createFromIconfontCN, SyncOutlined } from '@ant-design/icons';\r\nimport Button from './../../../utils/button/Button'\r\nimport Close from './../../../assets/img/close.png'\r\nimport left1 from './../../../assets/img/left1.png'\r\nimport './joinOrganizationByOption.less'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { px } from '../../../utils/px'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nexport default class FindWorkplace extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    listData: [],\r\n    searchData: [],\r\n    selectId: {},\r\n    isOrg: false,       //nodel框是否显示\r\n    isWorkplace: false,\r\n    workplaceList: [],\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    selectworkplace: {}\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    fetchRequest(`/organization/listAll`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            listData: res.data\r\n          })\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n    this.setState({\r\n      selectId: temporaryStorage.logupSelectOrganization\r\n    })\r\n    temporaryStorage.logupSelectOrganization = {}\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n  _logIn = () => {\r\n\r\n    let storage = window.localStorage;\r\n    let { email, hash } = temporaryStorage.logupVetInfo\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: '1'\r\n    }\r\n    console.log('---登录入参', params);\r\n    fetchRequest('/user/mellaLogin', 'POST', params)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        if (res.status && res.status === 404) {\r\n          message.error('system error');\r\n          return\r\n        }\r\n        if (res.status && res.status === 500) {\r\n          message.error('Internal Server Error');\r\n          return\r\n        }\r\n        if (res.code === 10001 && res.msg === '账号错误') {\r\n          message.error('Account error');\r\n          return\r\n        }\r\n        if (res.code === 10002 && res.msg === '密码错误') {\r\n          message.error('wrong password')\r\n          return;\r\n        }\r\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n          return\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === 'success') {\r\n          console.log('账号密码正确，登录进去了');\r\n          let { userWorkplace, lastOrganization, token } = res.success\r\n          storage.token = token\r\n          storage.userId = ''\r\n\r\n          storage.userId = res.success.userId\r\n          storage.roleId = res.success.roleId\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = ''\r\n          storage.defaultCurrent = ''\r\n          this.setState({\r\n            isOrg: false,\r\n            isWorkplace: false\r\n          })\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace)\r\n            let connectionKey = ''\r\n            const element = userWorkplace[0];\r\n            storage.lastOrganization = element.organizationEntity.organizationId\r\n            storage.lastWorkplaceId = element.workplaceEntity.workplaceId\r\n            if (element.organizationEntity.connectionKey) {\r\n              connectionKey = element.organizationEntity.connectionKey\r\n            }\r\n            if (element.roleId) {\r\n              console.log(element.roleId);\r\n              storage.roleId = element.roleId\r\n            }\r\n            if (userWorkplace.length === 1) {\r\n              this.props.history.push(\"/MainBody\");\r\n\r\n            } else {\r\n              this.props.history.push('/page12')\r\n            }\r\n          } else {\r\n            storage.userWorkplace = ''\r\n            storage.connectionKey = ''\r\n            this.props.history.push(\"/MainBody\");\r\n            storage.lastOrganization = ''\r\n            storage.lastWorkplaceId = ''\r\n          }\r\n\r\n        }\r\n        if (res.code === 10000 && res.msg === '系统内部错误') {\r\n          message.error('system error')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        message.error('Login failed')\r\n      })\r\n  }\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n  _searchworkPlace = (val) => {\r\n    let search = val.target.value\r\n    let listData = this.state.workplaceList\r\n    console.log('----------------', listData);\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].workplaceName.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.organizationId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          temporaryStorage.logupSelectOrganization = item\r\n\r\n\r\n        }}\r\n\r\n      >\r\n        <div className=\"item\"> {item.name}</div>\r\n\r\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  _list1 = () => {\r\n    const { search, workplaceList, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : workplaceList\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.workplaceId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectworkplace: item\r\n          })\r\n          console.log(item);\r\n\r\n        }}\r\n\r\n      >\r\n\r\n        {item.workplaceName}\r\n        {(this.state.selectworkplace === item ? <span className=\"search\">&#xe614;</span> : null)}\r\n      </li>\r\n\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  _goNewOrg = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    this.props.history.push('/uesr/logUp/NewOrganization')\r\n  }\r\n  _goNewWorkplace = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      isOrg: false,\r\n      isWorkplace: false\r\n    })\r\n    this.props.history.push('/uesr/logUp/NewWorkplace')\r\n  }\r\n  _goWorkplace = () => {\r\n    console.log('前往工作场所');\r\n    fetchRequest(`/workplace/listAllWorkplaceByOrganizationId/${temporaryStorage.logupSelectOrganization.organizationId}`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            workplaceList: res.data,\r\n            isOrg: false,\r\n\r\n          }, () => {\r\n            this.setState({\r\n              isWorkplace: true\r\n            })\r\n          })\r\n        } else {\r\n          console.log('请求错误');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  _addworkplaced = () => {\r\n    let params = {\r\n      userId: temporaryStorage.logupSuccessData.userId,\r\n      roleId: 2,\r\n      workplaceId: this.state.selectworkplace.workplaceId,\r\n      organizationId: this.state.selectworkplace.organizationId\r\n    }\r\n    console.log('入参：', params);\r\n    this.setState({\r\n      isLoading: true,\r\n      isWorkplace: false,\r\n      isOrg: false\r\n    })\r\n\r\n    fetchRequest('/user/updateUserInfo', 'POST', params)\r\n      .then(res => {\r\n        console.log(res);\r\n\r\n        if (res.flag === true) {\r\n          message.success('Join successfully', 3)\r\n\r\n          console.log('成功',);\r\n          this._logIn()\r\n        } else {\r\n          this.setState({\r\n            isLoading: false\r\n          })\r\n          message.error('Join failed', 3)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isLoading: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  render () {\r\n    let { disabled, bounds, isOrg, isWorkplace } = this.state\r\n    return (\r\n      <div id=\"joinOrganizationByOption\">\r\n        <div className=\"heard\">\r\n          {/* 关闭缩小 */}\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.push('/uesr/logUp/VetPrifile')}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"text\">Join an Organization</div>\r\n\r\n          <div className=\"way\" style={{ marginTop: px(20), marginBottom: px(60) }}>\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n                // this.props.history.push('/uesr/logUp/FindMyOrganization')\r\n                this.setState({\r\n                  isOrg: true\r\n                })\r\n                console.log('搜索名称加入');\r\n              }}\r\n            >\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-search' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n\r\n                <div className=\"title\">Search organization</div>\r\n\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n                console.log('创建');\r\n                this.props.history.push('/uesr/logUp/NewOrganization')\r\n              }}>\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-tianjia4' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n                <div className=\"listtext\">\r\n                  <div className=\"title\">Create an organization</div>\r\n                </div>\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ paddingTop: px(60) }}\r\n              onClick={() => {\r\n\r\n                let params = {\r\n                  userId: temporaryStorage.logupSuccessData.userId,\r\n                  roleId: 2,\r\n                }\r\n                message.destroy()\r\n                this.setState({\r\n                  isLoading: true\r\n                })\r\n                console.log('搜索id加入', params);\r\n                fetchRequest2('/user/updateUserInfo', 'POST', params)\r\n                  .then(res => {\r\n                    console.log(res);\r\n                    if (res.flag === true) {\r\n\r\n                      console.log('成功',);\r\n                      this._logIn()\r\n                    } else {\r\n                      this.setState({\r\n                        isLoading: false\r\n                      })\r\n                      message.error('Identity update failed')\r\n                    }\r\n                  })\r\n                  .catch(err => {\r\n                    console.log(err);\r\n                    message.error(err.message, 3)\r\n                  })\r\n              }}>\r\n              <div className=\"iconBox\">\r\n                <MyIcon type='icon-guanbi2' className=\"icon\" />\r\n              </div>\r\n              <div className=\"r\">\r\n                <div className=\"listtext\">\r\n                  <div className=\"title\">Continue without organization</div>\r\n                </div>\r\n                <div className=\"arrow\">\r\n                  <MyIcon type='icon-jiantou2' className=\"icon\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={isOrg}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                  // className=\" iconfont icon-left return\"\r\n                  // onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    {/* <img src={left1} alt=\"\" style={{ height: px(25) }} /> */}\r\n                  </div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"text\"\r\n                  onMouseOver={() => {\r\n                    if (disabled) {\r\n                      this.setState({\r\n                        disabled: false,\r\n                      });\r\n                    }\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    this.setState({\r\n                      disabled: true,\r\n                    });\r\n                  }}\r\n\r\n                >Find my organization</div>\r\n\r\n                <div className=\"searchBox\">\r\n\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search organization\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._search}\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\"\r\n\r\n              >\r\n                {this._list()}\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Organization'}\r\n                  onClick={this._goWorkplace}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your organization? `}</span>\r\n                <a href=\"#\" onClick={this._goNewOrg}>Create a new organization</a>\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n\r\n        />\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={isWorkplace}\r\n          element={\r\n            <div className='myfindOrg' >\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                    // className=\" iconfont icon-left return\"\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    <img src={left1} alt=\"\" style={{ height: px(25) }} />\r\n                  </div>\r\n                  <div\r\n                    onClick={() => { this.setState({ isWorkplace: false, isOrg: false }) }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"text\" style={{ fontSize: px(35) }}>Find my workplace</div>\r\n\r\n                <div className=\"searchBox\" style={{ borderRadius: px(15) }} >\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search workplace\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={this._searchworkPlace}\r\n                  />\r\n\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"list\"\r\n\r\n              >\r\n                {this._list1()}\r\n              </div>\r\n\r\n              <div className=\"foot\">\r\n                <Button\r\n                  text={'Join Workplace'}\r\n                  onClick={this._addworkplaced}\r\n                />\r\n                <span style={{ marginTop: px(20) }}>{`Don’t see your workplace? `}</span>\r\n                <a href=\"#\" onClick={this._goNewWorkplace}>Create a new workplace</a>\r\n              </div>\r\n\r\n            </div>\r\n          }\r\n\r\n        />\r\n        <MyModal\r\n          visible={this.state.isLoading}\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\verifyEmail\\index.jsx",["663","664"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message, Button } from 'antd'\r\n\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\n// import Button from '../../../utils/button/Button'\r\nimport temporaryStorage from './../../../utils/temporaryStorage'\r\nimport './index.less'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2'\r\nimport { mTop, px } from '../../../utils/px'\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport { fetchRequest3 } from '../../../utils/FetchUtil3'\r\n\r\nconst VerifyEmail = () => {\r\n  let history = useHistory()\r\n  const [code, setCode] = useState('')\r\n  const [resend, setResend] = useState(60)\r\n  const [visible, setVisible] = useState(false)\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (resend > 0) {\r\n        setResend(resend - 1)\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  })\r\n\r\n  const _resend = (e) => {\r\n\r\n    if (resend <= 0) {\r\n\r\n      //下面写逻辑代码\r\n      let { domain, email, hash, phone, birthday, firstName, lastName } = temporaryStorage.logupVetInfo\r\n      let params = {\r\n        firstName,\r\n        lastName,\r\n        domain, email, hash, phone,\r\n      }\r\n      if (birthday) {\r\n        params.birthday = birthday\r\n      }\r\n      console.log('重新获取验证码入参', params);\r\n      fetchRequest2(`/user/resendDeskRegistEmail/${temporaryStorage.logupEmailCode}`, 'POST', params)\r\n        .then(res => {\r\n          console.log('重新获取验证码', res);\r\n          if (res.msg === 'success') {\r\n            message.success('The email has been resent, please check', 3)\r\n            temporaryStorage.logupEmailCode = res.data\r\n            setResend(60)\r\n          } else {\r\n            message.error('Failed to send mail', 3)\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log('重新获取验证码失败');\r\n        })\r\n\r\n    }\r\n\r\n    //阻止a链接跳转\r\n    if (e && e.preventDefault)\r\n      e.preventDefault();\r\n    else\r\n      window.event.returnValue = false;\r\n  }\r\n  const _next = () => {\r\n    // console.log(code, '-----', temporaryStorage.logupEmailCode, '----', temporaryStorage.logupVetInfo);\r\n    message.destroy()\r\n    if (code !== temporaryStorage.logupEmailCode) {\r\n      message.error('Verification code input is incorrect', 3)\r\n      return\r\n    }\r\n    else {\r\n      setVisible(true)\r\n      fetchRequest3(`/user/activateUserByEmailCode/${code}`, \"GET\", '')\r\n        .then(res => {\r\n          setVisible(false)\r\n          console.log('验证码验证返回信息：', res);\r\n          if (res.flag === true) {\r\n            console.log('验证成功');\r\n            temporaryStorage.logupSuccessData = res.data\r\n            temporaryStorage.logupEmailCode = ''\r\n            history.push('/uesr/logUp/JoinOrganizationByOption')\r\n          } else {\r\n            message.error('Verification code verification failed', 3)\r\n          }\r\n\r\n        })\r\n        .catch(err => {\r\n          setVisible(false)\r\n          console.log('验证码验证错误：', err);\r\n        })\r\n    }\r\n    // history.push('/uesr/logUp/FindWorkplace')\r\n  }\r\n\r\n\r\n  return (\r\n    <div id=\"verifyEmail\">\r\n      <div className=\"heard\">\r\n        <MaxMin\r\n          onClick={() => { history.push('/') }}\r\n          onClick1={() => history.goBack()}\r\n        />\r\n      </div>\r\n      <div className=\"body\">\r\n        <h1 className=\"title\" style={{ fontSize: px(30), marginBottom: px(22) }}>Confirm your email</h1>\r\n        <div className=\"text\" >{`We have sent a code to ${temporaryStorage.logupVetInfo.email}.`}</div>\r\n        <div className=\"text\">Please enter it below to confirm your address.</div>\r\n        <div className=\"inpF\">\r\n          <input\r\n            className=\"inp\"\r\n            type=\"text\"\r\n            value={code}\r\n            placeholder=\"Code\"\r\n            onChange={(val) => { setCode(val.target.value) }}\r\n            maxLength={6}\r\n            onKeyUp={(e) => { if (e.keyCode === 13) { _next() } }}\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"resend\">\r\n          <a href=\"#\" onClick={_resend}>Resend</a>\r\n          {resend > 0 && `(${resend})`}\r\n        </div> */}\r\n      </div>\r\n      <div className=\"footer\" style={{ padding: `${px(40)}px 0` }}>\r\n        <div className=\"btnF\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={_next}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <MyModal\r\n        visible={visible}\r\n      />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VerifyEmail\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newWorkplace\\NewWorkplace.jsx",["665","666","667","668","669"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  Input,\r\n  Form,\r\n  Select,\r\n  Space,\r\n  Modal,\r\n\r\n  message\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './newWorkplace.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest2 } from './../../../utils/FetchUtil2'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport countryList from './../../../utils/areaCode/country';\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\n\r\nconst { Option } = Select;\r\nexport default class NewWorkplace extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    phone: '',\r\n    practiceName: '',\r\n    address: '',\r\n    country: '',\r\n    city: '',\r\n    state: '',\r\n    zipcode: '',\r\n    address1: '',\r\n    address2: '',\r\n    workplaceTypeId: 1,\r\n    email: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('middle')\r\n\r\n  }\r\n\r\n\r\n\r\n  _next = () => {\r\n    let { practiceName, workplaceTypeId, code, phone, country, city, state, address1, address2, zipcode, email } = this.state\r\n    message.destroy()\r\n\r\n    if (!practiceName) {\r\n      message.error('Please enter an Practice name', 3)\r\n      return;\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the contact email', 3)\r\n      return;\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    if (!phone) {\r\n      message.error('Please enter the phone number', 3)\r\n      return;\r\n    }\r\n    if (!country) {\r\n      message.error('Please enter country name', 3)\r\n      return;\r\n    }\r\n    if (!city) {\r\n      message.error('Please enter the city name', 3)\r\n      return;\r\n    }\r\n    if (!address1) {\r\n      message.error('Please enter address1', 3)\r\n      return;\r\n    }\r\n    if (!address2) {\r\n      message.error('Please enter address2', 3)\r\n      return;\r\n    }\r\n    if (!zipcode) {\r\n      message.error('Please enter the postal code', 3)\r\n      return;\r\n    }\r\n\r\n\r\n    let params = {\r\n      organizationId: temporaryStorage.logupSelectOrganization.organizationId,\r\n      workplaceName: practiceName,\r\n      workplaceTypeId,\r\n      address1,\r\n      address2,\r\n      phone: `+${code}${phone}`,\r\n      country,\r\n      city,\r\n      state,\r\n      zipcode,\r\n      email\r\n    }\r\n\r\n    console.log('入参信息：', params);\r\n    let { userId } = temporaryStorage.logupSuccessData\r\n    fetchRequest(`/workplace/addWorkplace/${userId}`, \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.code === 20000) {\r\n          this.props.history.push('/uesr/logUp/FindMyWorkplace')\r\n        } else if (res.code === 11029) {\r\n          message.error('The workplace has been registered!', 3)\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render () {\r\n\r\n    let { disabled, visible, bounds, address1, address2, phone, practiceName, country, city, state, zipcode, workplaceTypeId, email } = this.state\r\n    return (\r\n      <div id=\"newWorkplace\" >\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.goBack()}\r\n        />\r\n        <div className=\"text\">\r\n          New Practice\r\n        </div>\r\n        <div className=\"text1\">Tell us more about the place you will be using Mella!</div>\r\n        <div className=\"form\">\r\n          <div className=\"item\">\r\n            <div className=\"l\">\r\n              <p>Practice Name*</p>\r\n              <input\r\n                type=\"text\"\r\n                value={practiceName}\r\n                placeholder={'Practice Name'}\r\n                onChange={(value) => {\r\n                  let data = value.target.value\r\n                  this.setState({\r\n                    practiceName: data\r\n                  })\r\n                }}\r\n              />\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"item\">\r\n\r\n\r\n\r\n            <div className=\"l\">\r\n              <p>Contact Email*</p>\r\n              <input\r\n                type=\"Email\"\r\n                value={email}\r\n                placeholder={'Contact Email'}\r\n                onChange={(value) => {\r\n                  let data = value.target.value\r\n                  this.setState({\r\n                    email: data\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n\r\n            <div className=\"l\">\r\n              <p>Type of Practice*</p>\r\n              <div className=\"select\" >\r\n                <Select\r\n                  value={workplaceTypeId}\r\n                  style={{ width: '100%', borderRadius: '100px' }}\r\n                  onChange={(value) => { this.setState({ workplaceTypeId: value }) }}\r\n                >\r\n                  <Option value={1}>practice </Option>\r\n                  <Option value={2}>clinic </Option>\r\n                  <Option value={3}>shelter</Option>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"l\">\r\n              <ul id=\"list\">\r\n                {countryList.map((item, index) => {\r\n                  let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                  return (\r\n                    <li key={index}>\r\n                      <div key={index}\r\n                        style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                        onClick={() => {\r\n                          console.log(item, index);\r\n                          this.setState({\r\n                            code: item.code,\r\n                            imgArrayIndex: index\r\n                          })\r\n                          document.getElementById('list').style.display = \"none\"\r\n                        }}\r\n                      >\r\n                        <img src={url} alt=\"\" />\r\n                        <p >{`${item.en}   +${item.code}`}</p>\r\n                      </div>\r\n                    </li>\r\n                  )\r\n                })}\r\n              </ul>\r\n\r\n              <p>Contact Number*</p>\r\n              <div className='phone'>\r\n                <div\r\n                  style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                  onClick={() => {\r\n                    document.getElementById('list').style.display = \"block\"\r\n                  }}\r\n                >\r\n                  <img style={{ zIndex: '888' }}\r\n                    src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                  />\r\n                  <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                </div>\r\n\r\n\r\n                <input\r\n                  type=\"Phone\"\r\n                  value={phone}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      phone: data.replace(/[^\\-?\\d]/g, '')\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"item\">\r\n            <div className=\"l\">\r\n              <p>Address*</p>\r\n              <div className=\"inputs\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={country}\r\n                  placeholder={'country'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      country: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={city}\r\n                  placeholder={'city'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      city: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={state}\r\n                  placeholder={'state'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      state: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={address1}\r\n                  placeholder={'address1'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      address1: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={address2}\r\n                  placeholder={'address2'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      address2: data\r\n                    })\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  value={zipcode}\r\n                  placeholder={'zipcode'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      zipcode: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {/* 按钮 */}\r\n          <div className=\"btn\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <Modal\r\n          title={\r\n            <div\r\n              style={{\r\n                width: '100%',\r\n                cursor: 'move',\r\n                height: '20px',\r\n                fontWeight: '700'\r\n              }}\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n            >\r\n              remind\r\n            </div>\r\n          }\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          footer={[\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false,\r\n                  email: ''\r\n                })\r\n              }}\r\n            >Cancel</button>,\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false\r\n                })\r\n                this.props.history.replace('/uesr/logUp/FindMyOrganization')\r\n              }}\r\n            >Join</button>\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n        >\r\n          <div id='vetPrifileModal'>\r\n\r\n            <p>This organization has already been registered, do you want to join?</p>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\unassigned\\Unassigned.jsx",["670","671","672","673","674","675","676","677"],"import React, { Component } from \"react\";\r\nimport { Table, Popconfirm, Modal, Input, message, Select } from \"antd\";\r\nimport moment from \"moment\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport \"./unassigned.less\";\r\nimport Heard from \"./../../../utils/heard/Heard\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\n\r\nimport del from \"./../../../assets/images/del.png\";\r\nimport Close from \"./../../../assets/img/close.png\";\r\n\r\nimport UploadImg from \"./../../../utils/uploadImg/UploadImg\";\r\nimport { mTop, px, MTop } from \"../../../utils/px\";\r\nimport electronStore from \"./../../../utils/electronStore\";\r\nimport MyModal from \"../../../utils/myModal/MyModal\";\r\nimport Button from \"./../../../utils/button/Button\";\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\n\r\nexport default class Unassigned extends Component {\r\n  state = {\r\n    historyData: [], //列表的数据集合\r\n    units: \"℉\",\r\n    searchText: \"\", //搜索测试记录框输入的内容\r\n    serchExamData: [], //搜索到的测量记录\r\n    seleceEmergencies: {}, //分配的这条记录里的所有内容，比如温度、id、时间等\r\n    visible: false, //nodel框是否显示\r\n    imgId: -1, //上传后返回的图像id号\r\n\r\n    assignPatientId: \"\",\r\n    assignPetName: \"\",\r\n    assignOwnerName: \"\",\r\n    assignBreed: \"\",\r\n    assignBreedId: \"\",\r\n    assignPetAge: \"\",\r\n    assignPetWeight: \"\",\r\n    assignPetId: \"\",\r\n    assignPetImgUrl: \"\",\r\n    inputDisabled: false,\r\n\r\n    breedArr: [], //猫、狗品种集合\r\n\r\n    loading: false,\r\n\r\n    disabled: true, //model是否可拖拽\r\n    search: \"\", //分配宠物搜索框\r\n    petListData: [],\r\n    searchPetList: [],\r\n    assignVisible: false, //点击assign按钮后跳出的选择宠物的弹框\r\n    selectPetId: \"\",\r\n  };\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    // if (windowsHeight < 1000) {\r\n    //   ipcRenderer.send('table')\r\n    // } else {\r\n    //   ipcRenderer.send('big')\r\n    // }\r\n    let getBreed = electronStore.get(\"getBreed\");\r\n    console.log(\"------\", getBreed);\r\n    if (getBreed) {\r\n      this.setState({\r\n        breedArr: getBreed,\r\n      });\r\n    }\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    this._getEmergencyHistory();\r\n    const timer = setTimeout(() => {\r\n      this._getBreed();\r\n      clearTimeout(timer);\r\n    }, 3000);\r\n\r\n    let list = electronStore.get(\"doctorExam\");\r\n    this.setState({\r\n      petListData: list || [],\r\n    });\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy();\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    // if (windowsHeight < 1000) {\r\n    //   ipcRenderer.send('table')\r\n    // } else {\r\n    //   ipcRenderer.send('big')\r\n    // }\r\n    this.setState({});\r\n  };\r\n\r\n  _getEmergencyHistory = () => {\r\n    //封装的日期排序方法\r\n    function ForwardRankingDate (data, p) {\r\n      for (let i = 0; i < data.length - 1; i++) {\r\n        for (let j = 0; j < data.length - 1 - i; j++) {\r\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n            var temp = data[j];\r\n            data[j] = data[j + 1];\r\n            data[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n      return data;\r\n    }\r\n    let historys = [];\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, \"GET\", \"\") //userID要自动的\r\n      .then((res) => {\r\n        console.log(\"---res\", res);\r\n        if (res.flag === true) {\r\n          let datas = res.data;\r\n          for (let i = datas.length - 1; i >= 0; i--) {\r\n            if (datas[i].petId === null) {\r\n              let {\r\n                petId,\r\n                examId,\r\n                userId,\r\n                petVitalTypeId,\r\n                temperature,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                memo,\r\n                clinicalDatagroupId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                createTime,\r\n                clinicalDataEntity,\r\n              } = datas[i];\r\n              let day = moment().diff(moment(createTime), \"day\");\r\n              // console.log(day);\r\n              if (day > 3) {\r\n                continue;\r\n              }\r\n\r\n              let Tem = temperature;\r\n              try {\r\n                if (clinicalDataEntity) {\r\n                  Tem = temperature || clinicalDataEntity.data0;\r\n                }\r\n              } catch (error) {\r\n                console.log(\"抛出的异常\", error);\r\n              }\r\n              let str = {\r\n                clinicalDatagroupId,\r\n                createTime,\r\n                date: moment(createTime).format(\"MMM DD\"),\r\n                time: moment(createTime).format(\"hh:mm A\"),\r\n                temp: parseInt(Tem * 10) / 10,\r\n                placement: petVitalTypeId,\r\n                note: memo,\r\n                historyId: examId,\r\n                bodyConditionScore,\r\n                heartRate,\r\n                respiratoryRate,\r\n                referenceRectalTemperature,\r\n                furLength,\r\n                roomTemperature,\r\n                bloodPressure,\r\n                petId,\r\n                userId,\r\n                day,\r\n              };\r\n\r\n              historys.push(str);\r\n            }\r\n          }\r\n\r\n          //把所有数据拿完后做个排序\r\n\r\n          let historyData = ForwardRankingDate(historys, \"createTime\");\r\n          console.log(\"historyData:\", historyData);\r\n          this.setState({\r\n            historyData,\r\n            loading: false,\r\n          });\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n        });\r\n      });\r\n  };\r\n  _getBreed = () => {\r\n    fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 1 })\r\n      .then((res) => {\r\n        if (res.code === 0) {\r\n          let arr = [];\r\n          res.petlist.map((item, index) => {\r\n            let data = {\r\n              petSpeciesBreedId: item.petSpeciesBreedId,\r\n              breedName: item.breedName,\r\n              speciesId: 1,\r\n            };\r\n\r\n            arr.push(data);\r\n          });\r\n\r\n          fetchRequest(`/pet/selectBreedBySpeciesId`, \"POST\", { speciesId: 2 })\r\n            .then((res) => {\r\n              if (res.code === 0) {\r\n                res.petlist.map((item, index) => {\r\n                  let data = {\r\n                    petSpeciesBreedId: item.petSpeciesBreedId,\r\n                    breedName: item.breedName,\r\n                    speciesId: 2,\r\n                  };\r\n                  arr.push(data);\r\n                });\r\n\r\n                console.log(\"----品种集合：\", arr);\r\n                electronStore.set(\"getBreed\", arr);\r\n                this.setState({\r\n                  breedArr: arr,\r\n                });\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  _search = (value = \"\") => {\r\n    console.log(\"我要去搜索了\");\r\n    let list = this.state.historyData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let note = list[i].note ? list[i].note.toLowerCase() : \"\";\r\n      if (`${note}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      serchExamData: searchData,\r\n    });\r\n  };\r\n  _searchPet = (value = \"\") => {\r\n    console.log(\"我要去搜索了\", this.state.petListData);\r\n    let list = this.state.petListData;\r\n    let searchData = [];\r\n    let keyWord = value || this.state.searchText;\r\n    for (let i = 0; i < list.length; i++) {\r\n      let name = list[i].petName ? list[i].petName.toLowerCase() : \"\";\r\n      let rfid = list[i].rfid ? list[i].rfid.toLowerCase() : \"\";\r\n      let patientId = list[i].patientId ? list[i].patientId.toLowerCase() : \"\";\r\n\r\n      if (\r\n        `${name}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${rfid}`.indexOf(keyWord.toLowerCase()) !== -1 ||\r\n        `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n      ) {\r\n        searchData.push(list[i]);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      searchPetList: searchData,\r\n    });\r\n  };\r\n\r\n  draggleRef = React.createRef();\r\n\r\n  handleOk = (e) => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n    });\r\n  };\r\n\r\n  handleCancel = (e) => {\r\n    console.log(\"取消\");\r\n    this.setState({\r\n      visible: false,\r\n      assignPatientId: \"\",\r\n      assignPetName: \"\",\r\n      assignOwnerName: \"\",\r\n      assignBreed: \"\",\r\n      assignBreedId: \"\",\r\n      assignPetAge: \"\",\r\n      assignPetWeight: \"\",\r\n      assignPetId: \"\",\r\n      assignPetImgUrl: \"\",\r\n    });\r\n  };\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n      },\r\n    });\r\n  };\r\n  _select = (value, data) => {\r\n    console.log(value, data); //value的值为id\r\n    this.setState({\r\n      assignBreedId: value,\r\n      assignBreed: data.children,\r\n    });\r\n  };\r\n\r\n  _modal = () => {\r\n    let that = this;\r\n\r\n    function getPetInfoByPatientId () {\r\n      switch (storage.identity) {\r\n        case \"1\":\r\n          console.log(\"我是vetspire查找\");\r\n\r\n          break;\r\n\r\n        case \"2\":\r\n          console.log(\"我是ezyVet查找\");\r\n          let params = {\r\n            animalId: that.state.assignPatientId,\r\n            organizationId: 4,\r\n          };\r\n          let paramsArray = [];\r\n          Object.keys(params).forEach((key) =>\r\n            paramsArray.push(key + \"=\" + params[key])\r\n          );\r\n          let url =\r\n            \"http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver/petall/getPetInfoByAnimalId\";\r\n          // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\r\n          if (url.search(/\\?/) === -1) {\r\n            url = url + \"?\" + paramsArray.join(\"&\");\r\n          } else {\r\n            url = url + \"&\" + paramsArray.join(\"&\");\r\n          }\r\n          console.log(\"ezyVet集成查找宠物入参-请求地址\", params, url);\r\n          fetch(url, {\r\n            method: \"GET\",\r\n            headers: {\r\n              authorization: `Bearer ${storage.ezyVetToken}`,\r\n            },\r\n          })\r\n            .then((response) => response.json())\r\n            .then((res) => {\r\n              console.log(\"res\", res);\r\n              this.setState({\r\n                spin: false,\r\n              });\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data;\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  });\r\n                }\r\n                console.log(petArr);\r\n\r\n                let { petId } = petArr;\r\n                // assign(petId)\r\n              } else {\r\n                //没有宠物\r\n                message.error(\"There are no pets under this patientID\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              message.error(\"There are no pets under this patientID\");\r\n            });\r\n\r\n          break;\r\n\r\n        case \"3\":\r\n          console.log(\"我是一般医生查找\");\r\n          let datas = {\r\n            patientId: that.state.assignPatientId,\r\n            doctorId: storage.userId,\r\n          };\r\n          if (storage.lastWorkplaceId) {\r\n            datas.workplaceId = storage.lastWorkplaceId;\r\n          }\r\n          console.log(\"入参：\", datas);\r\n          fetchRequest(\"/pet/getPetInfoByPatientIdAndPetId\", \"POST\", datas)\r\n            .then((res) => {\r\n              if (res.flag === true) {\r\n                //有宠物，进入1\r\n                let petArr = res.data;\r\n                if (petArr.length > 1) {\r\n                  petArr.sort(function (a, b) {\r\n                    return a.createTime > b.createTime ? 1 : -1;\r\n                  });\r\n                }\r\n\r\n                console.log(\"获取到宠物信息\", petArr);\r\n\r\n                let {\r\n                  petId,\r\n                  petName,\r\n                  firstName,\r\n                  lastName,\r\n                  breedName,\r\n                  age,\r\n                  weight,\r\n                  url,\r\n                  birthday,\r\n                } = petArr[0];\r\n\r\n                let assignPetName = petName ? petName : \"\";\r\n                let assignOwnerName = lastName ? lastName : \"\";\r\n                assignOwnerName = firstName\r\n                  ? `${assignOwnerName} ${firstName}`\r\n                  : assignOwnerName;\r\n                let assignBreed = breedName ? breedName : \"\";\r\n                let assignPetAge = age ? age : \"\";\r\n                let assignPetWeight = weight ? weight : \"\";\r\n                let assignPetImgUrl = url ? url : \"\";\r\n\r\n                if (!assignPetAge) {\r\n                  let now = moment(new Date());\r\n                  let year = now.diff(moment(birthday), \"years\");\r\n                  assignPetAge = year;\r\n                }\r\n\r\n                that.setState({\r\n                  assignPetName,\r\n                  assignBreed,\r\n                  assignPetAge,\r\n                  assignPetWeight,\r\n                  assignPetId: petId,\r\n                  assignPetImgUrl,\r\n                  inputDisabled: true,\r\n                });\r\n\r\n                // assign(petId)\r\n              } else {\r\n                that.setState({\r\n                  inputDisabled: false,\r\n                  assignPetName: \"\",\r\n                  assignOwnerName: \"\",\r\n                  assignBreed: \"\",\r\n                  assignBreedId: \"\",\r\n                  assignPetAge: \"\",\r\n                  assignPetWeight: \"\",\r\n                  assignPetId: \"\",\r\n                  assignPetImgUrl: \"\",\r\n                });\r\n                message.error(\"There are no pets under this patientID\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              that.setState({\r\n                inputDisabled: false,\r\n                assignPetName: \"\",\r\n                assignOwnerName: \"\",\r\n                assignBreed: \"\",\r\n                assignBreedId: \"\",\r\n                assignPetAge: \"\",\r\n                assignPetWeight: \"\",\r\n                assignPetId: \"\",\r\n                assignPetImgUrl: \"\",\r\n              });\r\n              message.error(\"There are no pets under this patientID\");\r\n              console.log(err);\r\n            });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    const assignPet = () => {\r\n      let parmes = {\r\n        petId: this.state.assignPetId,\r\n        clinicalDatagroupId: that.state.seleceEmergencies.clinicalDatagroupId,\r\n      };\r\n      console.log(\"分配的数据信息\", parmes);\r\n      fetchRequest(\r\n        `/pet/addAndSavePetExam/${that.state.seleceEmergencies.historyId}`,\r\n        \"POST\",\r\n        parmes\r\n      )\r\n        .then((res) => {\r\n          console.log(\"----------\", res);\r\n          if (res.flag === true) {\r\n            console.log(\"分配成功\");\r\n            message.success(\"Assigned successfully\");\r\n            that._getEmergencyHistory();\r\n            that.setState({\r\n              visible: false,\r\n              assignPatientId: \"\",\r\n              assignPetName: \"\",\r\n              assignOwnerName: \"\",\r\n              assignBreed: \"\",\r\n              assignBreedId: \"\",\r\n              assignPetAge: \"\",\r\n              assignPetWeight: \"\",\r\n              assignPetId: \"\",\r\n              assignPetImgUrl: \"\",\r\n            });\r\n          } else {\r\n            message.error(\"Assignment failed\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          message.error(\"Assignment failed\");\r\n        });\r\n    };\r\n\r\n    let { disabled, bounds, visible } = this.state;\r\n    let options = this.state.breedArr.map((d) => (\r\n      <Option key={d.petSpeciesBreedId}>{d.breedName}</Option>\r\n    ));\r\n    return (\r\n      <Modal\r\n        wrapClassName={\"web\"} //对话框外部的类名，主要是用来修改这个modal的样式的\r\n        destroyOnClose={true}\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"30px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                this.setState({\r\n                  disabled: false,\r\n                });\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              this.setState({\r\n                disabled: true,\r\n              });\r\n            }}\r\n            onFocus={() => { }}\r\n            onBlur={() => { }}\r\n          // end\r\n          ></div>\r\n        }\r\n        visible={visible}\r\n        // visible={true}\r\n        onOk={this.handleOk}\r\n        onCancel={this.handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => this.onStart(event, uiData)}\r\n          >\r\n            <div ref={this.draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={[]} // 设置footer为空，去掉 取消 确定默认按钮\r\n      >\r\n        <div id=\"unassignedModal\">\r\n          <div className=\"title\">\r\n            Assign <br />\r\n            Measurement to\r\n          </div>\r\n\r\n          <div className=\"addPhoto\">\r\n            <UploadImg\r\n              getImg={(val) => {\r\n                console.log(\"hahahahahahah我获得了\", val);\r\n                this.setState({\r\n                  imgId: val.imageId,\r\n                });\r\n              }}\r\n              imgUrl={this.state.assignPetImgUrl}\r\n              disable={this.state.inputDisabled}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Patient ID:</p>\r\n            <Input\r\n              value={this.state.assignPatientId}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPatientId: item.target.value,\r\n                });\r\n              }}\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode === 13) {\r\n                  getPetInfoByPatientId();\r\n                }\r\n                if (e.keyCode === 27) {\r\n                  console.log(\"清空\");\r\n                  this.setState({\r\n                    assignPatientId: \"\",\r\n                  });\r\n                }\r\n              }}\r\n              onBlur={() => {\r\n                if (this.state.assignPatientId.length > 0) {\r\n                  getPetInfoByPatientId();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Pet Name:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetName}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetName: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"item\">\r\n            <p>Owner Name:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignOwnerName}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignOwnerName: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Breed:</p>\r\n            <div className=\"infoInput\">\r\n              {/* <Input bordered={false} /> */}\r\n              <Select\r\n                disabled={this.state.inputDisabled}\r\n                showSearch\r\n                style={{ width: \"100%\" }}\r\n                bordered={false}\r\n                value={this.state.assignBreed}\r\n                // size = {'small'}\r\n                placeholder=\"Search to Select\"\r\n                optionFilterProp=\"children\"\r\n                listHeight={256}\r\n                onSelect={(value, data) => this._select(value, data)}\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n                filterSort={(optionA, optionB) =>\r\n                  optionA.children\r\n                    .toLowerCase()\r\n                    .localeCompare(optionB.children.toLowerCase())\r\n                }\r\n              >\r\n                {options}\r\n              </Select>\r\n            </div>\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Pet Age:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetAge}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetAge: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"item\">\r\n            <p>Pet Weight:</p>\r\n            <Input\r\n              disabled={this.state.inputDisabled}\r\n              value={this.state.assignPetWeight}\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                this.setState({\r\n                  assignPetWeight: item.target.value,\r\n                });\r\n              }}\r\n            />\r\n\r\n            <div className=\"unit\">{`kg`}</div>\r\n          </div>\r\n\r\n          <div className=\"btnF\">\r\n            <div className=\"btn\" onClick={this.handleCancel}>\r\n              Cancel\r\n            </div>\r\n            <div\r\n              className=\"btn\"\r\n              onClick={() => {\r\n                if (this.state.assignPetId) {\r\n                  assignPet();\r\n                } else {\r\n                  message.error(\"Did not find this pet\");\r\n                }\r\n              }}\r\n            >\r\n              Confirm\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    );\r\n  };\r\n  _list = () => {\r\n    const { search, petListData, searchPetList } = this.state;\r\n    let data = search.length > 0 ? searchPetList : petListData;\r\n    console.log('--------------------data', data);\r\n    let option = data.map((item, index) => {\r\n      let male = item.gender === \"F\" ? \"Female\" : \"Male\";\r\n      return (\r\n        <li\r\n          key={item.organizationId}\r\n          onClick={() => {\r\n            this.setState({\r\n              selectPetId: item.petId,\r\n            });\r\n            console.log(item);\r\n          }}\r\n        >\r\n          <div className=\"item\">\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {item.petName}\r\n            </span>{\" \"}\r\n            &nbsp;&nbsp;\r\n            <span\r\n              className=\"petName\"\r\n              style={{ margin: `${px(5)}px 0` }}\r\n            >{`${item.age} yrs,`}</span>{\" \"}\r\n            &nbsp;&nbsp;\r\n            <span className=\"petName\" style={{ margin: `${px(5)}px 0` }}>\r\n              {male}\r\n            </span>\r\n          </div>\r\n\r\n          {this.state.selectPetId === item.petId ? (\r\n            <span className=\"search\">&#xe614;</span>\r\n          ) : null}\r\n\r\n          {/* <div className=\"dui\">\r\n          <img src={} alt=\"\"/>\r\n        </div> */}\r\n        </li>\r\n      );\r\n    });\r\n    return <ul>{option}</ul>;\r\n  };\r\n\r\n  render () {\r\n    let { loading, disabled, historyData, searchText, serchExamData } =\r\n      this.state;\r\n    const _del = (key, record) => {\r\n      console.log(\"删除\", key, record);\r\n\r\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, \"DELETE\").then(\r\n        (res) => {\r\n          if (res.flag === true) {\r\n            console.log(\"删除成功\");\r\n            const historyData = [...this.state.historyData];\r\n            console.log(historyData);\r\n            this.setState({\r\n              historyData: historyData.filter((item) => item.historyId !== key),\r\n            });\r\n          } else {\r\n            console.log(\"删除失败\");\r\n          }\r\n        }\r\n      );\r\n    };\r\n\r\n    const columns = [\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        key: \"operation\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          // console.log('狩猎:', text, record, index);\r\n          //record:\r\n          return (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                margin: `${px(8)}px 0`,\r\n              }}\r\n            >\r\n              <Popconfirm\r\n                title=\"Sure to delete?\"\r\n                onConfirm={() => _del(record.historyId, record)}\r\n              >\r\n                <img src={del} alt=\"\" style={{ marginRight: \"8px\" }} />\r\n              </Popconfirm>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        title: \"Date\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      {\r\n        title: \"Time\",\r\n        dataIndex: \"time\",\r\n        key: \"time\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\r\n        },\r\n      },\r\n      // {\r\n      //   // title: `Temp(${this.state.units})`,\r\n      //   title: `Temp(℉)`,\r\n      //   key: 'temp',\r\n      //   dataIndex: 'temp',\r\n      //   render: (text, record, index) => {\r\n      //     // console.log(text, record);\r\n      //     /**\r\n      //      * bag：温度数值前的圆圈的背景颜色\r\n      //      * tem：展示的温度\r\n      //      * endvalue:将从后台得到的数据全部转化成华氏度\r\n      //      * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n      //      * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\r\n      //      *\r\n      //      */\r\n\r\n      //     let bag = '', tem = ''\r\n\r\n      //     let endValue = text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10\r\n      //     let min = 100.4, max = 102.56\r\n\r\n      //     if (endValue > max) {\r\n      //       bag = '#E1206D'\r\n      //     } else if (endValue < min) {\r\n      //       bag = '#98DA86'\r\n      //     } else {\r\n      //       bag = '#58BDE6'\r\n      //     }\r\n\r\n      //     if (this.state.units === '℃') {\r\n      //       if (text) {\r\n      //         tem = `${text}${this.state.units}`\r\n      //       }\r\n      //     } else {\r\n      //       if (text) {\r\n      //         if (text > 55) {\r\n      //           tem = `${text}${this.state.units}`\r\n      //         } else {\r\n      //           tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${this.state.units}`\r\n      //         }\r\n\r\n      //       }\r\n      //     }\r\n      //     return (\r\n      //       <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n      //         {tem ? <div style={{ width: '8px', height: '8px', borderRadius: '8px', backgroundColor: bag, marginRight: '3px' }} /> : null}\r\n      //         <p style={{ margin: 0, padding: 0 }}>{tem}</p>\r\n      //       </div>\r\n      //     )\r\n\r\n      //   }\r\n      // },\r\n\r\n      {\r\n        title: \" Pet Description\",\r\n        dataIndex: \"description\",\r\n        key: \"description\",\r\n        width: \"20%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n      // Species\r\n\r\n      {\r\n        title: \"Species\",\r\n        dataIndex: \"species\",\r\n        key: \"species\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n\r\n      {\r\n        title: \"Note\",\r\n        dataIndex: \"note\",\r\n        key: \"note\",\r\n        width: \"20%\",\r\n        render: (text, record, index) => {\r\n          return <p style={{ width: \"70px\" }}>{text}</p>;\r\n        },\r\n      },\r\n\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"assign\",\r\n        key: \"assign\",\r\n        width: \"10%\",\r\n        render: (text, record, index) => {\r\n          return (\r\n            <div\r\n              className=\"assign\"\r\n              style={{\r\n                fontSize: px(16),\r\n                paddingTop: px(5),\r\n                paddingBottom: px(5),\r\n              }}\r\n              onClick={() => {\r\n                console.log(text, record, index);\r\n                this.setState({\r\n                  // visible: true,\r\n                  assignVisible: true,\r\n                  seleceEmergencies: record,\r\n                });\r\n              }}\r\n            >\r\n              Assign\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n\r\n    let tableData = searchText.length > 0 ? serchExamData : historyData;\r\n\r\n    return (\r\n      <div id=\"unassigned\">\r\n        <Heard\r\n          onReturn={() => {\r\n            this.props.history.goBack();\r\n          }}\r\n          onSearch={(data) => {\r\n            storage.doctorExam = JSON.stringify(data);\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data);\r\n            if (storage.isClinical === \"true\") {\r\n              this.props.history.push({\r\n                pathname: \"/page8\",\r\n                identity: storage.identity,\r\n                patientId: data.patientId,\r\n              });\r\n            } else {\r\n              this.props.history.push({ pathname: \"/page10\" });\r\n            }\r\n          }}\r\n          menu8Click={() => {\r\n            console.log(\"--\", storage.identity);\r\n            switch (storage.identity) {\r\n              case \"2\":\r\n                this.props.history.push({\r\n                  pathname: \"/EzyVetSelectExam\",\r\n                  listDate: storage.ezyVetList,\r\n                  defaultCurrent: storage.defaultCurrent,\r\n                });\r\n\r\n                break;\r\n              case \"1\":\r\n                this.props.history.push(\"/VetSpireSelectExam\");\r\n\r\n                break;\r\n              case \"3\":\r\n                this.props.history.push({\r\n                  pathname: \"/uesr/selectExam\",\r\n                  listDate: storage.doctorList,\r\n                  defaultCurrent: storage.defaultCurrent,\r\n                });\r\n\r\n                break;\r\n\r\n              default:\r\n                break;\r\n            }\r\n          }}\r\n        />\r\n\r\n        <div className=\"body\">\r\n          <div\r\n            className=\"title\"\r\n            style={{\r\n              marginTop: px(30),\r\n              fontSize: px(30),\r\n              marginBottom: px(40),\r\n            }}\r\n          >\r\n            Unassigned Measurements{\" \"}\r\n          </div>\r\n          <div className=\"input\" style={{ marginBottom: px(10) }}>\r\n            <input\r\n              type=\"text\"\r\n              // className=\"iconfont search\"\r\n              placeholder=\"&#xe628; Search Pet Name or Description\"\r\n              value={this.state.searchText}\r\n              onChange={(e) => {\r\n                this.setState({\r\n                  searchText: e.target.value,\r\n                });\r\n                this._search(e.target.value);\r\n              }}\r\n              onKeyUp={(e) => {\r\n                // console.log(e);\r\n                if (e.keyCode === 13) {\r\n                  this._search();\r\n                }\r\n                if (e.keyCode === 27) {\r\n                  this.setState({\r\n                    searchText: \"\",\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n            <div\r\n              className=\"searchBtn\"\r\n              style={{ height: px(35), fontSize: px(18) }}\r\n              onClick={this._search}\r\n            >\r\n              <p>Search</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"table\">\r\n            <Table\r\n              style={{\r\n                // border: ' #979797 1px solid',\r\n                padding: 0,\r\n                margin: 0,\r\n                width: \"95%\",\r\n                height: MTop(280),\r\n                // backgroundColor: 'pink'\r\n              }}\r\n              loading={loading}\r\n              columns={columns}\r\n              dataSource={tableData}\r\n              rowKey={(columns) => columns.historyId}\r\n              // pagination={{ pageSize: 8, showSizeChanger: false, showQuickJumper: true }}\r\n              pagination={false}\r\n              scroll={{\r\n                y: MTop(260),\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {this._modal()}\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.assignVisible}\r\n          // visible={true}\r\n          element={\r\n            <div className=\"myfindOrg\">\r\n              <div className=\"orgHeard\">\r\n                <div className=\"titleicon\" style={{ marginTop: px(5) }}>\r\n                  <div\r\n                  // className=\" iconfont icon-left return\"\r\n                  // onClick={() => { this.setState({ isWorkplace: false, isOrg: true }) }}\r\n                  >\r\n                    {/* <img src={left1} alt=\"\" style={{ height: px(25) }} /> */}\r\n                  </div>\r\n                  <div\r\n                    onClick={() => {\r\n                      this.setState({ assignVisible: false });\r\n                    }}\r\n                  >\r\n                    <img src={Close} alt=\"\" style={{ width: px(25) }} />\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"text\"\r\n                  onMouseOver={() => {\r\n                    if (disabled) {\r\n                      this.setState({\r\n                        disabled: false,\r\n                      });\r\n                    }\r\n                  }}\r\n                  onMouseOut={() => {\r\n                    this.setState({\r\n                      disabled: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  Assign Measurement\r\n                </div>\r\n\r\n                <div className=\"searchBox\">\r\n                  <Input\r\n                    placeholder=\" &#xe61b; Search Pet\"\r\n                    bordered={false}\r\n                    allowClear={true}\r\n                    value={this.state.search}\r\n                    onChange={(item) => {\r\n                      this.setState({\r\n                        search: item.target.value,\r\n                      });\r\n                      this._searchPet(item.target.value);\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"list\">{this._list()}</div>\r\n\r\n              <div className=\"foot\">\r\n                <div\r\n                  className=\"btnn flex\"\r\n                  style={{ height: px(45) }}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      assignVisible: false,\r\n                      visible: true,\r\n                    });\r\n                  }}\r\n                >\r\n                  <p>+Add New Pet</p>\r\n                </div>\r\n                <div\r\n                  className=\"btnn flex\"\r\n                  style={{ height: px(45) }}\r\n                  onClick={() => {\r\n                    if (!this.state.selectPetId) {\r\n                      message.error(\"Please select a pet to assign\");\r\n                    } else {\r\n                      let { selectPetId, seleceEmergencies, historyData } =\r\n                        this.state;\r\n                      let parmes = {\r\n                        petId: selectPetId,\r\n                        clinicalDatagroupId:\r\n                          seleceEmergencies.clinicalDatagroupId,\r\n                      };\r\n                      console.log(\"分配的数据信息\", parmes);\r\n                      fetchRequest(\r\n                        `/pet/addAndSavePetExam/${seleceEmergencies.historyId}`,\r\n                        \"POST\",\r\n                        parmes\r\n                      )\r\n                        .then((res) => {\r\n                          console.log(\"----------\", res);\r\n                          if (res.flag === true) {\r\n                            console.log(\"分配成功\");\r\n                            message.success(\"Assigned successfully\");\r\n                            let arr = [];\r\n                            for (let i = 0; i < historyData.length; i++) {\r\n                              const element = historyData[i];\r\n                              if (\r\n                                seleceEmergencies.clinicalDatagroupId !==\r\n                                element.clinicalDatagroupId\r\n                              ) {\r\n                                arr.push(element);\r\n                              }\r\n                            }\r\n\r\n                            this.setState({\r\n                              assignVisible: false,\r\n                              historyData: arr,\r\n                            });\r\n                          } else {\r\n                            message.error(\"Assignment failed\");\r\n                          }\r\n                        })\r\n                        .catch((err) => {\r\n                          console.log(err);\r\n                          message.error(\"Assignment failed\");\r\n                        });\r\n                    }\r\n                  }}\r\n                >\r\n                  <p>Confirm</p>\r\n                </div>\r\n                {/* <Button\r\n                  text={'+Add New Pet'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      assignVisible: false,\r\n                      visible: true\r\n                    })\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'Confirm'}\r\n                  \r\n                /> */}\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\invite\\Invite.jsx",["678","679","680","681","682","683","684"],"import React, { Component, } from 'react'\r\nimport {\r\n  Tag,\r\n  Input,\r\n  Tooltip,\r\n  message,\r\n  // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './invite.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nlet storage = window.localStorage;\r\n\r\nexport default class Invite extends Component {\r\n\r\n  state = {\r\n\r\n    tags: [],\r\n    inputVisible: false,\r\n    inputValue: '',\r\n    editInputIndex: -1,\r\n    editInputValue: '',\r\n    visible: false\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  handleClose = removedTag => {\r\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n    console.log(tags);\r\n    this.setState({ tags });\r\n  };\r\n\r\n  showInput = () => {\r\n    this.setState({ inputVisible: true }, () => this.input.focus());\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  handleInputConfirm = () => {\r\n    const { inputValue } = this.state;\r\n    let { tags } = this.state;\r\n    if (inputValue && tags.indexOf(inputValue) === -1) {\r\n      console.log('输入的内容为：', inputValue);\r\n      message.destroy()\r\n      fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.code === 11011) {\r\n            console.log('邮箱号以被注册，是否忘记密码');\r\n            tags = [...tags, inputValue];\r\n            console.log(tags);\r\n\r\n            this.setState({\r\n              tags,\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n          else {\r\n            message.error('This mailbox was not found!', 3)\r\n            this.setState({\r\n              inputVisible: false,\r\n              inputValue: '',\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          message.error(`Error:${err.message}`)\r\n          console.log('检测邮箱号的接口出错了', err);\r\n        })\r\n\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  saveInputRef = input => {\r\n    this.input = input;\r\n  };\r\n\r\n  saveEditInputRef = input => {\r\n    this.editInput = input;\r\n  };\r\n\r\n  _next = () => {\r\n    message.destroy()\r\n    let { tags } = this.state\r\n    let userId = storage.userId\r\n    let organizationId = storage.lastOrganization\r\n    console.log({ tags, userId, organizationId });\r\n    if (tags.length === 0) {\r\n      message.error('Please enter the invitation email')\r\n      return\r\n    }\r\n    this.setState({\r\n      visible: true\r\n    })\r\n    fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('成功，跳转');\r\n          message.success('Invitation successful', 3)\r\n          this.props.history.goBack()\r\n\r\n        } else {\r\n          message.error('Invitation failed')\r\n\r\n        }\r\n\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          visible: false\r\n        })\r\n        console.log(err);\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n  render () {\r\n    const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n    console.log('---', editInputIndex);\r\n    return (\r\n      <div id=\"inviteTeam\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n          <div className=\"text\">Invite your Team</div>\r\n\r\n          <div className=\"addF\">\r\n            <p>To:</p>\r\n            <div className=\"add\">\r\n\r\n              <>\r\n                {tags.map((tag, index) => {\r\n                  const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                  const tagElem = (\r\n                    <Tag\r\n                      className=\"edit-tag\"\r\n                      key={tag}\r\n                      closable={true}\r\n                      onClose={() => this.handleClose(tag)}\r\n                    >\r\n                      <span>\r\n                        {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                      </span>\r\n                    </Tag>\r\n                  );\r\n                  return isLongTag ? (\r\n                    <Tooltip title={tag} key={tag}>\r\n                      {tagElem}\r\n                    </Tooltip>\r\n                  ) : (\r\n                    tagElem\r\n                  );\r\n                })}\r\n                {inputVisible && (\r\n                  <Input\r\n                    ref={this.saveInputRef}\r\n                    type=\"text\"\r\n                    size=\"small\"\r\n                    className=\"tag-input\"\r\n                    value={inputValue}\r\n                    onChange={this.handleInputChange}\r\n                    onBlur={this.handleInputConfirm}\r\n                    onPressEnter={this.handleInputConfirm}\r\n                  />\r\n                )}\r\n                {!inputVisible && (\r\n                  <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                    <PlusOutlined />Press Enter to add mailbox\r\n                  </Tag>\r\n                )}\r\n              </>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn\"\r\n          style={{ padding: `${px(40)}px 0` }}\r\n        >\r\n\r\n          {/* <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            htmlType=\"submit\"\r\n            onClick={this._next}\r\n            text={'Send'}\r\n          >\r\n\r\n          </Button> */}\r\n\r\n          <Button\r\n\r\n            onClick={this._next}\r\n            text={'Send'}\r\n            textBoxStyle={{ height: px(45), width: '45%' }}\r\n          >\r\n\r\n          </Button>\r\n        </div>\r\n        <MyModal visible={this.state.visible} />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\editParent\\EditParent.jsx",["685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706"],"import React, { Component } from 'react'\r\nimport { Input, Button, Menu, message, Select, Calendar, Col, Row, Spin } from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { createFromIconfontCN, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport dog from './../../../assets/images/reddog.png'\r\nimport cat from './../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport horse from './../../../assets/images/horse.png'\r\nimport rabbit from './../../../assets/images/rabbit.png'\r\n// import selectphoto from './../../../assets/images/img.png'\r\nimport selectphoto from './../../../assets/images/sel.png'\r\nimport dui from './../../../assets/images/dui.png'\r\nimport female from './../../../assets/images/female.png'\r\nimport male from './../../../assets/images/male.png'\r\nimport './editParent.less'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Avatar from './../../avatar/Avatar'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nimport Heard from '../../../utils/heard/Heard';\r\nconst { SubMenu } = Menu;\r\nconst { Option } = Select;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\nlet errPatientId = ''\r\nlet url = 'https://www.mellaserver.com/api/mellaserver'\r\n// let url = 'http://192.168.0.36:8080/mellaserver'\r\nexport default class EditParent extends Component {\r\n  state = {\r\n\r\n    lastName: '',       //宠物主人性\r\n    firstName: '',      //宠物主人名\r\n    email: '',          //邮箱号\r\n    phone: '',          //电话号码\r\n    spin: false,        //加载中\r\n    imageId: null,      //图片的ID值\r\n    petList: [],         //当前这个宠物主人下的所有宠物\r\n    userId: '',          //当前这个宠物主人的userId\r\n\r\n    userImageUrl: '',\r\n\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    console.log(this.props.history.location.parent);\r\n\r\n    if (this.props.history.location.parent) { //接受入参\r\n      let { parent, pets } = this.props.history.location.parent\r\n      let { firstName, lastName, userId } = parent\r\n      this._getParent(userId)\r\n\r\n      this.setState({\r\n        firstName,\r\n        lastName,\r\n        userId,\r\n        petList: pets\r\n\r\n\r\n      })\r\n\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _getParent = (data) => {\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    fetchRequest(`/user/getUserInfoByUserId/${data}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('获取到了用户信息', res);\r\n        if (res.msg === 'success') {\r\n          let { firstName, phone, lastName, email, imageId, url, userImage } = res.data\r\n          let userImageUrl = res.data.userImage ? res.data.userImage.url : null\r\n          firstName = firstName ? firstName : ''\r\n          phone = phone ? phone : ''\r\n          email = email ? email : ''\r\n          lastName = lastName ? lastName : ''\r\n\r\n\r\n          this.setState({\r\n            userImageUrl,\r\n            firstName,\r\n            lastName,\r\n            phone,\r\n            email,\r\n            imageId,\r\n            spin: false\r\n\r\n          })\r\n        } else {\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _petSpecies = () => {\r\n    let { userImageUrl } = this.state\r\n    this.avatar = userImageUrl ? userImageUrl : selectphoto\r\n    let { firstName, lastName } = this.state\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>First Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={firstName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  firstName: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Last Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={lastName}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  lastName: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" height=\"280px\" />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _petName = () => {\r\n    let { email, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  petList = () => {\r\n\r\n    let { petList } = this.state\r\n    console.log(petList);\r\n    let options = petList.map((item, index) => {\r\n      let { speciesId, url, breedName, petBirthday, gender, name, } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n\r\n      let petAge = moment(new Date()).diff(moment(petBirthday), 'years')\r\n\r\n      if (!url) {\r\n\r\n        switch (speciesId) {\r\n          case 1: images = `url(${cat})`\r\n\r\n            break;\r\n          case 2: images = `url(${dog})`\r\n            break\r\n          default: images = `url(${other})`\r\n            break;\r\n\r\n        }\r\n\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `  0 0 ${px(15)}px 0`, }}\r\n          onClick={() => {\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div className=\"itemL\">\r\n              <div\r\n                className='img'\r\n                style={{\r\n                  width: px(50),\r\n                  height: px(50),\r\n                  marginRight: px(20),\r\n                  borderRadius: px(60),\r\n                  backgroundImage: images,\r\n                }}>\r\n              </div>\r\n              <a\r\n                href=\"#\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  console.log(item);\r\n                }}\r\n              >{name}</a>\r\n            </div>\r\n            <div className=\"itemC\">\r\n              <p>{`${petAge} years old, ${gender === 0 ? 'Male' : 'Female'}`}</p>\r\n            </div>\r\n            <div className=\"itemR\">\r\n              <p>{`${breedName}`}</p>\r\n            </div>\r\n\r\n\r\n            {/* <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div> */}\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n\r\n\r\n    let liStyle = { backgroundColor: '#fff', marginTop: px(15) }\r\n    if (petList.length > 3) {\r\n      liStyle = { height: px(305), overflowY: 'auto', marginTop: px(15) }\r\n    }\r\n\r\n    return (\r\n      <ul style={liStyle}>\r\n        {options}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div id=\"editParent\">\r\n\r\n        <div className=\"heard\">\r\n          <Heard\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"editPetInfo_top\" >\r\n          <div className=\"parentInfo\">\r\n            <div className=\"title\" >{`Parent Information`}</div>\r\n            <div className=\"info\">\r\n              {this._petSpecies()}\r\n              {this._petName()}\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"pets\">\r\n            <div className=\"petsTitle\">\r\n              <h2 style={{ fontSize: px(24), marginRight: px(40) }}>Pets</h2>\r\n              <div className=\"btn\" style={{ fontSize: px(22) }}>+ Add New Pet</div>\r\n            </div>\r\n            <div className=\"petList\">\r\n              {this.petList()}\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"editPetInfo_foot\"  >\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              let { firstName, lastName, email, phone, imageId, userId } = this.state\r\n              console.log({ firstName, lastName, email, phone, imageId });\r\n              let parames = {\r\n                userId,\r\n                email,\r\n                phone,\r\n                firstName,\r\n                lastName,\r\n                imageId\r\n              }\r\n              this.setState({\r\n                spin: true\r\n              })\r\n              message.destroy()\r\n              console.log('修改的宠物信息:', parames);\r\n              fetchRequest('/user/updateUserInfo', 'POST', parames,)\r\n                .then(res => {\r\n                  console.log('保存所有信息', res);\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  if (res.flag === true) {\r\n                    this.props.history.goBack()\r\n                  } else {\r\n                    message.error('fail to edit')\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  this.setState({\r\n                    spin: false\r\n                  })\r\n                  message.error('fail to edit')\r\n                  console.log(err);\r\n                })\r\n\r\n            }}\r\n\r\n          >Edit Profile</div>\r\n          <div className=\"save\"\r\n            onClick={() => {\r\n              message.destroy()\r\n              this.props.history.goBack()\r\n            }}\r\n\r\n          >OK</div>\r\n\r\n        </div>\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n      </div >\r\n    )\r\n  }\r\n}",["707","708"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\ConnectWorkplace.jsx",["709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725"],"import React, { Component } from \"react\";\r\nimport { Switch, Select } from \"antd\";\r\n\r\nimport Heart from \"../../../utils/heard/Heard\";\r\nimport Slider from \"../../../utils/slider/Slider\";\r\nimport Button from \"../../../utils/button/Button\";\r\nimport electronStore from \"../../../utils/electronStore\";\r\nimport temporaryStorage from \"../../../utils/temporaryStorage\";\r\nimport { mTop, px } from \"../../../utils/px\";\r\nimport MyModal from \"../../../utils/myModal/MyModal\";\r\nimport parent from \"./../../../assets/img/parent.png\";\r\nimport dog from \"../../../assets/images/reddog.png\";\r\nimport cat from \"../../../assets/images/redcat.png\";\r\nimport other from \"../../../assets/images/redother.png\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\nimport moment from \"moment\";\r\nimport \"./connectWorkplace.less\";\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class ConnectWorkplace extends Component {\r\n  state = {\r\n    orgArr: [],\r\n    workplaceJson: {},\r\n    connectionKey: \"\",\r\n    selectOrgId: -1,\r\n    selectRoleId: \"\",\r\n  };\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n\r\n    let userWorkplace = [];\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || [];\r\n    } catch (error) {\r\n      console.log(\"字符串转对象失败\", error);\r\n    }\r\n    /*orgArr的格式为[{\r\n          organizationId:1,\r\n          organizationName:'11111',\r\n          connectionKey:''\r\n        }]\r\n        \r\n         workplace:{\r\n           1:{\r\n              workplaceId:1,\r\n              workplaceName:'122334\r\n            },\r\n         }\r\n        */\r\n    let orgArr = [],\r\n      workplaceJson = {};\r\n    // console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i];\r\n      // console.log('每一项的值：', element);\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element;\r\n        const { name, organizationId, connectionKey } = organizationEntity;\r\n        const { workplaceName, workplaceId } = workplaceEntity;\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          this.setState({\r\n            workplaceName,\r\n            workplaceId: storage.lastWorkplaceId,\r\n          });\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n          this.setState({\r\n            organizationName: name,\r\n            organizationId: storage.lastOrganization,\r\n            selectOrgId: storage.lastOrganization,\r\n          });\r\n        }\r\n\r\n        let orgRepeatFlog = false,\r\n          repeatFlogNum = -1;\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true;\r\n            repeatFlogNum = j;\r\n            break;\r\n          }\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName,\r\n            workplaceId,\r\n          };\r\n          let id = orgArr[repeatFlogNum].organizationId;\r\n          workplaceJson[`${id}`] = workplace;\r\n        } else {\r\n          let connectKey = connectionKey || \"\";\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId,\r\n          };\r\n          let workplace = [\r\n            {\r\n              workplaceName,\r\n              workplaceId,\r\n            },\r\n          ];\r\n          workplaceJson[`${organizationId}`] = workplace;\r\n\r\n          orgArr.push(json);\r\n        }\r\n      }\r\n    }\r\n    // console.log('-----转换后的组织信息--', orgArr, workplaceJson);\r\n    this.setState({\r\n      orgArr,\r\n      workplaceJson,\r\n      connectionKey: storage.connectionKey,\r\n      selectRoleId: storage.roleId,\r\n    });\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    // console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    let { height, width } = window.screen;\r\n    let windowsHeight = height > width ? width : height;\r\n    ipcRenderer.send(\"Lowbig\");\r\n    this.setState({});\r\n  };\r\n\r\n  render() {\r\n    let { orgArr, selectOrgId } = this.state;\r\n    let option = orgArr.map((item, index) => {\r\n      let bac =\r\n        `${selectOrgId}` === `${item.organizationId}` ? \"#e1206d\" : \"#fff\";\r\n      let col = `${selectOrgId}` === `${item.organizationId}` ? \"#fff\" : \"#000\";\r\n      return (\r\n        <li\r\n          key={`${item.organizationId}`}\r\n          style={{ background: bac, color: col }}\r\n          onClick={() => {\r\n            this.setState({\r\n              selectOrgId: item.organizationId,\r\n              connectionKey: item.connectionKey,\r\n              selectRoleId: item.roleId,\r\n            });\r\n            // storage.roleId = item.roleId\r\n          }}\r\n        >\r\n          <div className=\"org\" style={{ fontSize: px(16) }}>\r\n            {item.organizationName}\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n    return (\r\n      <div id=\"connectworkplace\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack();\r\n            }}\r\n            onSearch={(data) => {\r\n              storage.doctorExam = JSON.stringify(data);\r\n\r\n              storage.doctorList = JSON.stringify(this.state.data);\r\n              if (storage.isClinical === \"true\") {\r\n                this.props.history.push({\r\n                  pathname: \"/page8\",\r\n                  identity: storage.identity,\r\n                  patientId: data.patientId,\r\n                });\r\n              } else {\r\n                this.props.history.push({ pathname: \"/page10\" });\r\n              }\r\n            }}\r\n            menu8Click={() => {\r\n              // console.log('--', storage.identity);\r\n              switch (storage.identity) {\r\n                case \"2\":\r\n                  this.props.history.push({\r\n                    pathname: \"/EzyVetSelectExam\",\r\n                    listDate: storage.ezyVetList,\r\n                    defaultCurrent: storage.defaultCurrent,\r\n                  });\r\n\r\n                  break;\r\n                case \"1\":\r\n                  this.props.history.push(\"/VetSpireSelectExam\");\r\n\r\n                  break;\r\n                case \"3\":\r\n                  this.props.history.push({\r\n                    pathname: \"/uesr/selectExam\",\r\n                    listDate: storage.doctorList,\r\n                    defaultCurrent: storage.defaultCurrent,\r\n                  });\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"top\">\r\n            <div className=\"title flex\">\r\n              <p style={{ fontSize: px(24), fontWeight: \"800\" }}>\r\n                Connected Workplaces\r\n              </p>\r\n              <div\r\n                className=\"addbtn flex\"\r\n                style={{ height: px(45) }}\r\n                onClick={() => this.props.history.push(\"/menuOptions/NewOrg\")}\r\n              >\r\n                <p>+ Add Workplace</p>\r\n              </div>\r\n            </div>\r\n            <div className=\"tablebox\">\r\n              <div className=\"table\" style={{ height: px(220) }}>\r\n                <ul>{option}</ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"center\"></div>\r\n          <div className=\"footer flex\">\r\n            <div\r\n              className=\"saveBtn flex\"\r\n              style={{ height: px(45) }}\r\n              onClick={() => {\r\n                let {\r\n                  selectOrgId,\r\n                  selectRoleId,\r\n                  connectionKey,\r\n                  workplaceJson,\r\n                } = this.state;\r\n                // console.log({ selectOrgId, selectRoleId, connectionKey, workplaceJson });\r\n                storage.roleId = selectRoleId;\r\n                storage.lastOrganization = selectOrgId;\r\n                try {\r\n                  let key = parseInt(selectOrgId);\r\n                  let lastWorkplaceId = workplaceJson[key][0].workplaceId;\r\n                  // console.log(lastWorkplaceId);\r\n                  storage.lastWorkplaceId = lastWorkplaceId;\r\n                } catch (error) {}\r\n                storage.connectionKey = connectionKey;\r\n                this.props.history.replace(\"/menuOptions/settings\");\r\n              }}\r\n            >\r\n              <p style={{ fontSize: px(18) }}>Save Changes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <MyModal visible={this.state.loading} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\InviteTeam.jsx",["726","727","728","729","730","731","732","733"],"import React, { Component, } from 'react'\r\nimport {\r\n    Tag,\r\n    Input,\r\n    Tooltip,\r\n    message,\r\n    // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './inviteTeam.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\n\r\nexport default class Team extends Component {\r\n\r\n    state = {\r\n\r\n        tags: [],\r\n        inputVisible: false,\r\n        inputValue: '',\r\n        editInputIndex: -1,\r\n        editInputValue: '',\r\n        visible: false\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n\r\n        //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    }\r\n    componentWillUnmount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n    handleClose = removedTag => {\r\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n        console.log(tags);\r\n        this.setState({ tags });\r\n    };\r\n\r\n    showInput = () => {\r\n        this.setState({ inputVisible: true }, () => this.input.focus());\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({ inputValue: e.target.value });\r\n    };\r\n\r\n    handleInputConfirm = () => {\r\n        const { inputValue } = this.state;\r\n        let { tags } = this.state;\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n            console.log('输入的内容为：', inputValue);\r\n            message.destroy()\r\n            fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n                .then(res => {\r\n\r\n\r\n                    console.log('检测邮箱存不存在', res);\r\n\r\n                    if (res.code) {\r\n                        switch (res.code) {\r\n\r\n                            case 11011:\r\n                                console.log('邮箱存在，发送邮件');\r\n                                tags = [...tags, inputValue];\r\n                                console.log(tags);\r\n\r\n                                this.setState({\r\n                                    tags,\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n                            // case 11012:\r\n                            //     console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n                            // case 11013:\r\n                            //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n                            case 11014:\r\n                                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                                message.error('This mailbox was not found!', 3)\r\n                                this.setState({\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n\r\n                        }\r\n                    } else {\r\n                        console.log('系统错误', res);\r\n                        message.error('system error')\r\n                        this.setState({\r\n                            spin: false\r\n                        })\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                    message.error(`Error:${err.message}`)\r\n                    console.log('检测邮箱号的接口出错了', err);\r\n                })\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    saveInputRef = input => {\r\n        this.input = input;\r\n    };\r\n\r\n    saveEditInputRef = input => {\r\n        this.editInput = input;\r\n    };\r\n\r\n    _next = () => {\r\n        message.destroy()\r\n        let { tags } = this.state\r\n        let { userId } = temporaryStorage.logupSuccessData\r\n        let { organizationId } = temporaryStorage.logupOrganization\r\n        console.log({ tags, userId, organizationId });\r\n        if (tags.length === 0) {\r\n            this._logIn()\r\n        }\r\n        this.setState({\r\n            visible: true\r\n        })\r\n        console.log('入参:', tags);\r\n        fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                    console.log('成功，跳转');\r\n                    message.success('Invitation successful', 3)\r\n                    this._logIn()\r\n                } else {\r\n                    this.setState({\r\n                        visible: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n                message.error(err.message, 3)\r\n            })\r\n    }\r\n    _logIn = () => {\r\n\r\n        let storage = window.localStorage;\r\n        let sign = storage.saveSign\r\n        try {\r\n            sign = JSON.parse(sign)\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n        let { email, hash } = sign\r\n        let params = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n            identityTypeId: '1'\r\n        }\r\n        console.log('登录入参:', params);\r\n        fetchRequest('/user/mellaLogin', 'POST', params)\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                if (res.status && res.status === 404) {\r\n                    message.error('system error');\r\n                    return\r\n                }\r\n                if (res.code === 10001 && res.msg === '账号错误') {\r\n                    message.error('Account error');\r\n                    return\r\n                }\r\n                if (res.code === 10002 && res.msg === '密码错误') {\r\n                    message.error('wrong password')\r\n                    return;\r\n                }\r\n                if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n                    message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n                    return\r\n                }\r\n\r\n                if (res.code === 0 && res.msg === 'success') {\r\n                    console.log('账号密码正确，登录进去了');\r\n                    let { userWorkplace, lastOrganization, token } = res.success\r\n                    storage.token = token\r\n                    storage.userId = ''\r\n\r\n                    storage.userId = res.success.userId\r\n                    storage.roleId = res.success.roleId\r\n\r\n                    //每次登陆后清空宠物列表缓存的数据\r\n                    storage.doctorList = ''\r\n                    storage.defaultCurrent = ''\r\n\r\n\r\n\r\n\r\n                    if (userWorkplace) {\r\n                        storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                        let connectionKey = ''\r\n                        for (let i = 0; i < userWorkplace.length; i++) {\r\n                            const element = userWorkplace[i];\r\n                            if (element.organizationEntity) {\r\n                                if (element.organizationEntity.organizationId === lastOrganization) {\r\n\r\n                                    if (element.organizationEntity.connectionKey) {\r\n                                        connectionKey = element.organizationEntity.connectionKey\r\n                                    }\r\n                                    if (element.roleId) {\r\n                                        console.log(element.roleId);\r\n                                        storage.roleId = element.roleId\r\n                                    }\r\n\r\n                                    break\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        console.log('----------key值为：', connectionKey);\r\n                        storage.connectionKey = connectionKey\r\n\r\n                    } else {\r\n                        storage.userWorkplace = ''\r\n                        storage.connectionKey = ''\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    this.props.history.push('/menuOptions/ConnectWorkplace')\r\n\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render () {\r\n        const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n        // console.log('---', editInputIndex);\r\n        return (\r\n            <div id=\"inviteTeam\" >\r\n                {/* 关闭缩小 */}\r\n                <div className=\"heard\">\r\n                    <MaxMin\r\n                        onClick={() => { this.props.history.push('/') }}\r\n                        onClick1={() => this.props.history.goBack()}\r\n                    />\r\n                    <div className=\"text\">Invite your Team</div>\r\n\r\n                    <div className=\"addF\">\r\n                        <p>To:</p>\r\n                        <div className=\"add\">\r\n\r\n                            <>\r\n                                {tags.map((tag, index) => {\r\n                                    const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                                    const tagElem = (\r\n                                        <Tag\r\n                                            className=\"edit-tag\"\r\n                                            key={tag}\r\n                                            closable={true}\r\n                                            onClose={() => this.handleClose(tag)}\r\n                                        >\r\n                                            <span>\r\n                                                {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                                            </span>\r\n                                        </Tag>\r\n                                    );\r\n                                    return isLongTag ? (\r\n                                        <Tooltip title={tag} key={tag}>\r\n                                            {tagElem}\r\n                                        </Tooltip>\r\n                                    ) : (\r\n                                        tagElem\r\n                                    );\r\n                                })}\r\n                                {inputVisible && (\r\n                                    <Input\r\n                                        ref={this.saveInputRef}\r\n                                        type=\"text\"\r\n                                        size=\"small\"\r\n                                        className=\"tag-input\"\r\n                                        value={inputValue}\r\n                                        onChange={this.handleInputChange}\r\n                                        onBlur={this.handleInputConfirm}\r\n                                        onPressEnter={this.handleInputConfirm}\r\n                                    />\r\n                                )}\r\n                                {!inputVisible && (\r\n                                    <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                                        <PlusOutlined />Press Enter to add mailbox\r\n                                    </Tag>\r\n                                )}\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"btn\"\r\n                    style={{ padding: `${px(40)}px 0` }}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._logIn}\r\n                        text={'Skip'}\r\n                    >\r\n                        Skip\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._next}\r\n                        text={'Send'}\r\n                    >\r\n\r\n                    </Button>\r\n                </div>\r\n                <MyModal visible={this.state.visible} />\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchEszVet.js",["734","735"],"// let COMMON_URL = '';\r\nlet COMMON_URL = 'https://api.trial.ezyvet.com/v1';\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function FetchEszVet (url, method, params = '', token = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let headers = null\r\n    if (token !== '') {\r\n      headers = {\r\n        'authorization': token,\r\n      };\r\n    }\r\n    if (params === '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain'\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else if (method === 'POST') {\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (params === '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/merge-patch+json\",\r\n      authorization: token\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\px.js",["736"],"/**\r\n *\r\n * 获取屏幕分辨率宽高\r\n * let width = parseInt(window.screen.width)\r\n * let height = parseInt(window.screen.height)\r\n *\r\n * 获取应用窗口大小\r\n * document.documentElement.clientHeight\r\n * document.documentElement.clientWidth\r\n */\r\n//\r\n\r\n//\r\n\r\nconst devWidth = 1920;\r\nconst devHeight = 1040;\r\n\r\nlet size = window.screen\r\n// console.log('-------------------------分辨率的大小-----------------', size);\r\nlet width = parseInt(window.screen.availWidth);\r\nlet height = parseInt(window.screen.availHeight);\r\nif (width < height) {\r\n  let a = width;\r\n  width = height;\r\n  height = a;\r\n}\r\n\r\nexport const px = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n\r\n  // console.log('px', width, height)\r\n\r\n  // if ((width === 2560 && height === 1440) || (width === 1440 && height === 2560)) {\r\n  //   width = 1920\r\n  //   height = 1080\r\n  // }\r\n\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n\r\n  return parseInt((val / devWidth) * width);\r\n};\r\n\r\nexport const mTop = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n\r\n  // console.log('mTop',val, parseInt(val / devHeight * height))\r\n  return parseInt((val / devHeight) * height);\r\n};\r\n\r\nexport const fs = (val) => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n};\r\nexport const pX = (val) => {\r\n  let windowWidth = document.documentElement.clientWidth;\r\n  // console.log('px', window.screen,)\r\n  return parseInt((windowWidth / 650) * val);\r\n};\r\nexport const MTop = (val) => {\r\n  let windowWidth = document.documentElement.clientHeight;\r\n  console.log(\"px\", windowWidth);\r\n  return parseInt((windowWidth / 375) * val);\r\n};\r\n\r\nlet windowssize = {\r\n  width: 0,\r\n  height: 0,\r\n};\r\n\r\nexport const win = () => {\r\n  let width = parseInt(window.screen.availWidth);\r\n  let height = parseInt(window.screen.availHeight);\r\n  if (width < height) {\r\n    let a = width;\r\n    width = height;\r\n    height = a;\r\n  }\r\n  // let win1 = JSON.stringify({\r\n  //   width, height\r\n  // })\r\n\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n};\r\n\r\nlet timer = null;\r\nexport const timerFun = () => {\r\n  console.log(\"jianting1------------\");\r\n  timer && clearInterval(timer);\r\n  timer = setInterval(() => {\r\n    let width = parseInt(window.screen.availWidth);\r\n    let height = parseInt(window.screen.availHeight);\r\n    if (width < height) {\r\n      let a = width;\r\n      width = height;\r\n      height = a;\r\n    }\r\n    // console.log('jianting1', windowssize, { width, height });\r\n    if (width !== windowssize.width || height !== windowssize.height) {\r\n      windowssize.width = width;\r\n      windowssize.height = height;\r\n      let ipcRenderer = window.electron.ipcRenderer;\r\n      ipcRenderer.send(\"changeFenBianLv\", windowssize);\r\n    }\r\n  }, 2000);\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil1.js",["737","738","739","740"],"\n// let COMMON_URL = 'http://192.168.0.60:8080/mellaserver';//本地\nlet COMMON_URL = 'https://www.mellaserver.com/api/mellaserver';//企业AWS\n// let COMMON_URL = 'http://3.214.224.72:8088/api/mellaserver';//企业AWS\nlet token = '';\n\n//'/v1/appUser/login', 'POST', params\nexport function fetchRequest (url, method, params = '', Authorization = '') {\n\n    if (method === 'GET' || method === 'DELETE') {\n        let header = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        };\n        if (params == '') {\n            return new Promise(function (resolve, reject) {\n                fetch(COMMON_URL + url, {\n                    method: method,\n                }).then((Response) => Response.json())\n                    .then((responseData) => {\n                        resolve(responseData)\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            });\n        } else {\n            // 定一个空数组\n            let paramsArray = [];\n            //  拆分对象\n            Object.keys(params).forEach(key =>\n                paramsArray.push(key + \"=\" + params[key])\n            );\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数\n            if (url.search(/\\?/) === -1) {\n                url = url + \"?\" + paramsArray.join(\"&\");\n            } else {\n                url = url + \"&\" + paramsArray.join(\"&\");\n            }\n            return new Promise(function (resolve, reject) {\n                fetch(COMMON_URL + url, {\n                    method: method,\n                    headers: {\n                        \"Content-Type\": 'text/plain'\n                    }\n                }).then((response) => response.json())\n                    .then((responseData) => {\n                        resolve(responseData);\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            });\n        }\n    } else {\n        let header = {\n            \"Content-type\": \"application/json\"\n        };\n        if (Authorization) {\n            header.Authorization = Authorization\n        }\n        // console.log(header);\n        if (params == '') {\n            return new Promise(function (resolve, reject) {\n                fetch(COMMON_URL + url, {\n                    method: method,\n                    headers: header\n                }).then((Response) => Response.json())\n                    .then((responseData) => {\n                        resolve(responseData)\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            });\n        } else {\n            console.log('进入着了', Authorization, header);\n            return new Promise(function (resolve, reject) {\n                fetch(COMMON_URL + url, {\n                    method: method,\n                    // mode: 'cors',\n                    headers: header,\n                    body: JSON.stringify(params),\n                }).then((response) => response.json())\n                    .then((responseData) => {\n                        resolve(responseData);\n                    })\n                    .catch((err) => {\n                        reject(err);\n                    });\n            });\n        }\n    }\n}\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil3.js",["741","742","743","744"],"\r\n// let COMMON_URL = 'http://192.168.0.36:8080/mellaserver';//本地\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/mellaserver'\r\n\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest3 (url, method, params = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain'\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\mouseDiv\\MouseDiv.js",["745","746"],"\r\nimport React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { px, mTop } from './../px'\r\nimport './mouseDiv.less'\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, beforeDiv, afterDiv, divClick }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(beforeDiv)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(afterDiv)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(beforeDiv)\r\n    divClick()\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div id='mouseDiv'>\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        {rMin}\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n  divClick: PropTypes.func,\r\n  afterDiv: PropTypes.func,\r\n  beforeDiv: PropTypes.func,\r\n\r\n\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: px(20)\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\country.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\heard\\Heard.js",["747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\hardwareReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\PetsUI.jsx",["781","782","783","784"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil4.js",["785","786","787","788"],"\r\nlet COMMON_URL = 'https://www.mellaserver.com/big/mellabiggie';//内部负载均衡\r\n\r\n//let COMMON_URL = 'http://34.206.181.105:31668/mellabiggie';//内部负载均衡\r\n\r\n// let COMMON_URL = 'http://192.168.0.36:9090/mellabiggie';//本地测试\r\nlet token = '';\r\n\r\n\r\nexport async function fetchRequest4 (url, method, params = '', Authorization = '', isLogin) {\r\n\r\n  // if (isLogin) {\r\n\r\n  //     COMMON_URL = 'http://34.206.181.105:31667/mellaserver'\r\n  // } else {\r\n  //     COMMON_URL = 'https://www.mellaserver.com/big/mellabiggie'\r\n  // }\r\n  console.log(COMMON_URL, url);\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          headers: {\r\n            Authorization\r\n          },\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      console.log(COMMON_URL + url);\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain',\r\n            Authorization\r\n          },\r\n\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\allPetsPage\\index.jsx",["789","790","791","792","793","794","795","796","797","798","799","800","801"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport PetTable from '../../components/petTable';\r\nimport './allPet.less'\r\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\r\nimport moment from 'moment'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst AllPet = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\r\n\r\n    //初始化获取宠物列表数据\r\n    const [petListArr, setPetListArr] = useState([])\r\n    //定义宠物列表是否加载中\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [spin, setSpin] = useState(false)\r\n\r\n    useEffect(() => {\r\n        //获取宠物列表\r\n        _getExam()\r\n    }, [])\r\n    const _getExam = async () => {\r\n        console.log('进来了');\r\n\r\n\r\n        let params = {\r\n            doctorId: storage.userId,\r\n            offset: 0,\r\n            size: 100,\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n\r\n\r\n        console.log('查询宠物的入参', params);\r\n        const isUnKnow = (val) => {\r\n            if (val) {\r\n                return val\r\n            } else {\r\n                return 'unknown'\r\n            }\r\n        }\r\n        setLoading(true)\r\n\r\n        fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n\r\n            .then(res => {\r\n                console.log('查询到的宠物列表,/user/listAllPetInfo', res);\r\n                if (res.flag === true && res.data) {\r\n                    let data = []\r\n                    let oldList = res.data\r\n                    setPetListArrFun(oldList)\r\n                    // let oldList = res.data.list\r\n                    for (let i = 0; i < oldList.length; i++) {\r\n                        let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n                            h2tLength, torsoLength } = oldList[i]\r\n                        let owner = ''\r\n                        patientId = isUnKnow(patientId)\r\n                        petName = isUnKnow(petName)\r\n                        breedName = isUnKnow(breedName)\r\n                        age = isUnKnow(age)\r\n                        weight = isUnKnow(weight)\r\n                        if (!firstName) {\r\n                            firstName = ''\r\n                        }\r\n                        if (!lastName) {\r\n                            lastName = ''\r\n                        }\r\n                        if (lastName === '' && firstName === '') {\r\n                            owner = 'unknown'\r\n                        } else {\r\n                            owner = `${lastName} ${firstName}`\r\n                        }\r\n                        createTime = moment(createTime).format('X')\r\n                        let petGender = ''\r\n                        switch (`${gender}`) {\r\n                            case '1': petGender = 'F'\r\n\r\n                                break;\r\n                            case '0': petGender = \"M\"\r\n                                break;\r\n                            default: petGender = 'unknown'\r\n                                break;\r\n                        }\r\n                        let petAge = 'unknown'\r\n                        if (birthday) {\r\n                            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n                        }\r\n\r\n                        let json = {\r\n                            insertedAt: createTime,\r\n                            patientId,\r\n                            petName,\r\n                            owner,\r\n                            breed: breedName,\r\n                            gender: petGender,\r\n                            age: petAge,\r\n                            petId,\r\n                            id: i,\r\n                            weight,\r\n                            rfid,\r\n                            url,\r\n                            speciesId,\r\n                            l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                            h2tLength, torsoLength,\r\n                            pethubId, macId,\r\n\r\n                        }\r\n                        data.push(json)\r\n\r\n                    }\r\n                    data.sort((a, b) => {\r\n                        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                    })\r\n                    console.log('列表的数据：', data);\r\n                    setPetListArr(data)\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setLoading(false)\r\n                setSpin(false)\r\n            })\r\n\r\n\r\n\r\n    }\r\n    const _refresh = () => {\r\n        console.log('点击了');\r\n        setSpin(true)\r\n        _getExam()\r\n    }\r\n\r\n    return (\r\n        <div id='allPets' style={{ height: bodyHeight }}>\r\n            <div className=\"allPetHeard\">\r\n                <div className=\"addDeviceTitle flex\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\r\n                    <div className=\"title\">Client Results</div>\r\n                    <div className=\"refresh flex\"\r\n                        style={{ fontSize: px(25), marginLeft: px(10) }}\r\n                    >\r\n                        <SyncOutlined onClick={_refresh} spin={spin} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(40), width: px(200) }}\r\n                        onClick={() => {\r\n                            let json = {\r\n                                isWalkIn: true,\r\n                                petId: null,\r\n                                petName: null,\r\n                                owner: null,\r\n                                breed: null,\r\n\r\n                            }\r\n                            petDetailInfoFun(json)\r\n                            setMenuNum(\"1\")\r\n                        }}\r\n                    >\r\n                        <div className=\"walkText\">Walk-In</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <PetTable\r\n                bodyHeight={bodyHeight - px(100)}\r\n                petListArr={petListArr}\r\n                loading={loading}\r\n                resetPetList={(val) => setPetListArr(val)}\r\n\r\n            />\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAllPet.propTypes = {\r\n\r\n}\r\n//默认值\r\nAllPet.defaultProps = {\r\n    bodyHeight: 0,\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, setPetListArrFun }\r\n)(AllPet)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\appversion.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\index.jsx",["802","803"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout } from \"antd\";\nimport LinkEquipment from \"./components/linkEquipment\";\nimport Measurement from \"./components/measurement\";\nimport MeasuredData from \"./components/measuredData\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport _ from \"lodash\";\nimport HeaderItem from \"./components/headerItem\";\nimport { px } from \"../../utils/px\";\nimport \"./index.less\";\n\nconst TemperaturePage = ({ petMessage, hardwareMessage }) => {\n  let { mellaConnectStatus } = hardwareMessage;\n  //测量温度中的页面变化\n  const changePage = () => {\n    // return <MeasuredData />\n    switch (mellaConnectStatus) {\n      case \"isMeasuring\":\n        return <Measurement />;\n      case \"complete\":\n        return <MeasuredData />;\n      case \"connected\":\n        return <LinkEquipment />;\n      case \"disconnected\":\n        return <LinkEquipment />;\n      default:\n        break;\n    }\n  };\n  return (\n    <>\n      <Layout className=\"homeBox\">\n        <div style={{ height: px(100), background: \"#fff\", position: 'relative' }}>\n          <div style={{ height: '100%' }}>\n            <HeaderItem />\n          </div>\n        </div>\n        {_.isEmpty(petMessage) ? (\n          <div className=\"chackPatientBox\">\n            <p className=\"chackPatientTitle\">Select a patient</p>\n          </div>\n        ) : (\n          changePage()\n        )}\n      </Layout>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(TemperaturePage);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\userAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\LinkEquipment.jsx",["804","805","806","807","808","809"],"import React, {\r\n    useEffect,\r\n    useState,\r\n} from 'react';\r\nimport { Image, Layout } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun\r\n} from '../../../store/actions';\r\nimport _ from 'lodash';\r\nimport './LinkEquipment.less';\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n    let { mellaConnectStatus } = hardwareMessage;\r\n    return (\r\n\r\n        <Content className={\"contentBox\"}>\r\n            <div className='chackPatientBox'>\r\n                <p className='chackPatientTitle'>Select a patient</p>\r\n            </div>\r\n        </Content>\r\n\r\n    );\r\n}\r\nexport default connect(\r\n    state => ({\r\n        petMessage: state.petReduce.petDetailInfo,\r\n        hardwareMessage: state.hardwareReduce,\r\n    }),\r\n    {\r\n        selectHardwareModalShowFun,\r\n        petSortTypeFun,\r\n        petDetailInfoFun,\r\n        setMellaConnectStatusFun,\r\n        setMellaMeasureValueFun,\r\n        setMellaPredictValueFun,\r\n        setMellaMeasurePartFun\r\n    }\r\n)(LinkEquipment);","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\linkEquipment.jsx",["810","811","812","813","814","815","816"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Image, Layout, Button } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\r\nimport AxillaryPlacement from \"./../../../assets/img/AxillaryPlacement.png\"; //腋温底部图片\r\nimport EarPlacement from \"./../../../assets/img/EarPlacement.png\"; //耳温底部图片\r\nimport RectalPlacement from \"./../../../assets/img/RectalPlacement.png\"; //肛温底部图片\r\nimport Standing_Dog from \"./../../../assets/img/Standing_Dog.png\";\r\nimport Standing_Cat from \"./../../../assets/img/Standing_Cat.png\";\r\nimport Sitting_Dog from \"./../../../assets/img/Sitting_Dog.png\";\r\nimport Sitting_Cat from \"./../../../assets/img/Sitting_Cat.png\";\r\nimport Laying_Dog from \"./../../../assets/img/Laying_Dog.png\";\r\nimport Laying_Cat from \"./../../../assets/img/Laying_Cat.png\";\r\nimport { px } from \"../../../utils/px\";\r\n\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HistoryTable from \"../../../components/historyTable\";\r\nimport moment from \"moment\";\r\nimport \"./linkEquipment.less\";\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaConnectStatus, mellaMeasurePart } = hardwareMessage;\r\n  let imageMap = [\r\n    Standing_Dog,\r\n    Standing_Cat,\r\n    Sitting_Dog,\r\n    Sitting_Cat,\r\n    Laying_Dog,\r\n    Laying_Cat,\r\n  ];\r\n\r\n  const [type, setType] = useState(false); //是否显示轮播图\r\n  const [carouselIndex, setCarouselIndex] = useState(0); //轮播图下标\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    setCarouselIndex(carouselIndex + 1);\r\n  };\r\n\r\n  //切换图片\r\n  const checkImage = () => {\r\n    if (mellaMeasurePart === \"腋温\") {\r\n      return AxillaryPlacement;\r\n    } else if (mellaMeasurePart === \"耳温\") {\r\n      return EarPlacement;\r\n    } else {\r\n      return RectalPlacement;\r\n    }\r\n  };\r\n  //点击进入轮播图\r\n  const clickIntoTip = () => {\r\n    setType(true);\r\n  };\r\n  //小圆点点击事件\r\n  const clickPoint = (index) => {\r\n    setCarouselIndex(index);\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (carouselIndex === 6) {\r\n      setCarouselIndex(0);\r\n    }\r\n  }, [carouselIndex]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    let timer = null;\r\n    if (type && mellaConnectStatus === \"connected\") {\r\n      timer = setInterval(tick, 1500);\r\n    }\r\n    if (mellaConnectStatus !== \"connected\") {\r\n      setType(false);\r\n      setCarouselIndex(0);\r\n      clearInterval(timer);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [type, mellaConnectStatus]);\r\n\r\n  return (\r\n    <>\r\n      <Content className={\"contentBox\"}>\r\n        {_.isEqual(mellaConnectStatus, \"disconnected\") ? (\r\n          <>\r\n            <div className=\"startBox\">\r\n              <p className=\"startTitle\" style={{ fontSize: px(31) }}>\r\n                Turn on your\r\n                <br />\r\n                Mella Thermometer\r\n                <br />\r\n                or Pair New Mella\r\n              </p>\r\n              <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <img src={PressButton_Pro} className={\"PressButton_Pro\"} style={{ width: px(300), height: px(200) }} />\r\n              </div>\r\n            </div>\r\n            <div className=\"tableBox\">\r\n              <HistoryTable tableColumnType='temperature' />\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <div className=\"startBox\">\r\n              <p className=\"startTitle\">\r\n                {!type\r\n                  ? \"Ready, place under foreleg\"\r\n                  : \"Place Under Foreleg Standing\"}\r\n              </p>\r\n              {!type ? (\r\n                <>\r\n                  <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <img src={checkImage()}></img>\r\n                  </div>\r\n\r\n                  {mellaMeasurePart === \"腋温\" ? (\r\n                    <div className=\"bottomTip1\">\r\n                      <div className=\"bottomTip1_1\">\r\n                        <p className=\"tipTitle\" onClick={() => clickIntoTip()}>\r\n                          Need Help With Accurate Placement On Pet?\r\n                        </p>\r\n                      </div>\r\n\r\n                    </div>\r\n                  ) : (\r\n                    <></>\r\n                  )}\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"carouselBox\">\r\n                    {_.map(imageMap, (item, index) => {\r\n                      return (\r\n                        <div key={index}>\r\n                          <img\r\n                            className=\"contentStyle\"\r\n                            src={item}\r\n                            style={{\r\n                              display: carouselIndex === index ? \"\" : \"none\",\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  <div className=\"dotBox\">\r\n                    <ul className=\"dotList\">\r\n                      {_.map(imageMap, (item, index) => {\r\n                        return (\r\n                          <li key={index}>\r\n                            <Button\r\n                              className=\"dotItem\"\r\n                              onClick={() => clickPoint(index)}\r\n                              style={{\r\n                                background:\r\n                                  carouselIndex === index\r\n                                    ? \"#0a0a0a\"\r\n                                    : \"#bdbaba\",\r\n                              }}\r\n                            >\r\n                              {index}\r\n                            </Button>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          </>\r\n        )}\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(LinkEquipment);\r\n",["817","818"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\historyTable\\index.jsx",["819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Progress,\n  Space,\n  Table,\n  Tag,\n  Badge,\n  Modal,\n  Popconfirm,\n  message,\n} from \"antd\";\nimport measuredTable_1 from \"./../../assets/img/measuredTable_1.png\";\nimport measuredTable_2 from \"./../../assets/img/measuredTable_2.png\";\nimport measuredTable_3 from \"./../../assets/img/measuredTable_3.png\";\nimport EditCircle from \"./../../assets/img/EditCircle.png\";\nimport Delete from \"./../../assets/img/Delete.png\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n} from \"../../store/actions\";\nimport Draggable from \"react-draggable\";\nimport { fetchRequest } from \"../../utils/FetchUtil1\";\nimport { px, mTop } from \"../../utils/px\";\nimport electronStore from \"../../utils/electronStore\";\nimport moment from \"moment\";\nimport \"./index.less\";\n\nconst HistoryTable = ({\n  petMessage,\n  hardwareMessage,\n  setMellaConnectStatusFun,\n  saveNum = 0,\n  tableColumnType, //表格内容渲染temperature为温度表格，weight为体重表格\n}) => {\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\n    hardwareMessage;\n  let { petId, memo } = petMessage;\n  let storage = window.localStorage;\n  let hisHe = mTop(200);\n  let draggleRef = React.createRef();\n  try {\n    let historyElement = document.querySelectorAll(\".historyTable\");\n    hisHe = historyElement[0].clientHeight - mTop(60);\n  } catch (error) { }\n  const [petData, setPetData] = useState([]); //存储宠物历史数据\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\n  const [visible, setVisible] = useState(false); //model框是否显示\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [reRender, setReRender] = useState(0);\n  const [isHua, setIsHua] = useState(true);\n  const [loading, setLoading] = useState(false);\n\n  //体重表格渲染\n  const weightColumns = [\n    {\n      title: \"Dat\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Tim\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: \"Weight\",\n      dataIndex: \"weight\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <Badge color={color()} text={_.toNumber(text).toFixed(1)} />\n      ),\n    },\n\n    {\n      title: \"BF%\",\n      dataIndex: \"fat\",\n      key: \"fat\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"BCS\",\n      dataIndex: \"bodyConditionScore\",\n      key: \"bodyConditionScore\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record, index) => {\n        return <p style={{ textAlign: \"center\", color: \"#58BDE6\" }}>{text}</p>;\n      },\n    },\n    {\n      title: \"Note\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            className=\"operationIcon\"\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //温度表格渲染\n  const TemperatureColumns = [\n    {\n      title: \"Date\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      // onHeaderCell: (row) => {\n      //   return console.log('row',row);\n      // } ,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"MMM D\"),\n    },\n    {\n      title: \"Time\",\n      dataIndex: \"createTime\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\n    },\n    {\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\n      dataIndex: \"temperature\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        let num = parseFloat(text);\n        if (isHua) {\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\n        } else {\n          num = num.toFixed(1);\n        }\n\n        return <Badge color={color(text)} text={num} />;\n      },\n    },\n    {\n      title: \"Placement\",\n      dataIndex: \"petVitalTypeId\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => {\n        if (text === 1) {\n          return <img src={measuredTable_2} />;\n        } else if (text === 3) {\n          return <img src={measuredTable_1} />;\n        } else if (text === 4) {\n          return <img src={measuredTable_3} />;\n        } else {\n          return <img src={measuredTable_2} />;\n        }\n      },\n    },\n    {\n      title: \"Notes\",\n      dataIndex: \"memo\",\n      ellipsis: true,\n      align: \"center\",\n      render: (text, record) => text,\n    },\n    {\n      title: \"Action\",\n      key: \"action\",\n      align: \"center\",\n      render: (text, record) => (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          <img\n            style={{ cursor: \"pointer\" }}\n            src={EditCircle}\n            onClick={() => {\n              setVisible(true);\n              setPetMessages(record);\n            }}\n          />\n          <Popconfirm\n            title=\"Sure to delete?\"\n            onConfirm={() => deletePetMessage(record.examId)}\n          >\n            <img style={{ cursor: \"pointer\" }} src={Delete} />\n          </Popconfirm>\n        </div>\n      ),\n    },\n  ];\n  //选择表格colum渲染\n  const columType = () => {\n    switch (tableColumnType) {\n      case \"temperature\":\n        return TemperatureColumns;\n      case \"weight\":\n        return weightColumns;\n      default:\n        break;\n    }\n  };\n  //判断指示文字颜色\n  const color = (data) => {\n    if (data > 40) {\n      return \"#e1206d\";\n    } else if (_.inRange(_.round(data), 38, 40)) {\n      return \"#58bde6\";\n    } else {\n      return \"#98da86\";\n    }\n  };\n  //获取历史宠物数据\n  const getPetTemperatureData = () => {\n    setLoading(true);\n    fetchRequest(`/pet/getPetExamByPetId/${petId}`, \"GET\", \"\")\n      .then((res) => {\n        setLoading(false);\n        console.log(\"历史记录\", res);\n        if (res.flag === true) {\n          let arr = [];\n          for (let i = 0; i < res.data.length; i++) {\n            const element = res.data[i];\n            const type = () => {\n              switch (tableColumnType) {\n                case \"temperature\":\n                  return element.temperature;\n                case \"weight\":\n                  return element.weight;\n                default:\n                  break;\n              }\n            };\n            if (type()) {\n              arr.push(element);\n            }\n          }\n          setPetData(_.orderBy(arr, 'createTime', 'desc'));\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  //保存note\n  const save = () => {\n    let datas = {\n      memo: newMemo,\n    };\n    fetchRequest(`/pet/updatePetExam/${petMessages.examId}`, \"POST\", datas)\n      .then((res) => {\n        setVisible(false);\n        getPetTemperatureData();\n      })\n      .catch((err) => {\n        setVisible(false);\n        console.log(err);\n      });\n  };\n  //删除历史记录\n  const deletePetMessage = (examId) => {\n    fetchRequest(`/pet/deletePetExamByExamId/${examId}`, \"DELETE\").then(\n      (res) => {\n        if (res.flag === true) {\n          message.success(\"Successfully Delete\");\n          getPetTemperatureData();\n        } else {\n          message.error(\"Fail To Delete\");\n        }\n      }\n    );\n  };\n  //关闭弹窗\n  const handleCancel = (e) => {\n    setVisible(false);\n  };\n\n  const onStart = (event, uiData) => {\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\n    setBounds({\n      left: -targetRect?.left + uiData?.x,\n      right: clientWidth - (targetRect?.right - uiData?.x),\n      top: -targetRect?.top + uiData?.y,\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\n    });\n  };\n\n  useEffect(() => {\n    getPetTemperatureData();\n    return () => { };\n  }, [petMessage]);\n\n  useEffect(() => {\n    if (reRender !== saveNum) {\n      setReRender(saveNum);\n      getPetTemperatureData();\n    }\n    return () => { };\n  }, [saveNum]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (hardSet) {\n      let { isHua } = hardSet;\n      setIsHua(isHua);\n    }\n  }, []);\n\n  return (\n    <>\n      <Table\n        rowKey={\"examId\"}\n        columns={columType()}\n        dataSource={petData}\n        pagination={false}\n        loading={loading}\n        scroll={{\n          y: hisHe,\n        }}\n      />\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          >\n            Edit Note\n          </div>\n        }\n        visible={visible}\n        onCancel={handleCancel}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n            onStart={(event, uiData) => onStart(event, uiData)}\n          >\n            <div ref={draggleRef}>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div className=\"noteModal\">\n          <div className=\"noteModalText\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"5\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              // value={petMessages.memo}\n              onChange={(val) => {\n                setNewMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\n            Save Changes\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n  }\n)(HistoryTable);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\App.js",["841","842"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectTime\\EzyVetSelectTime.jsx",["843","844","845","846"],"import React, { Component, } from 'react'\r\nimport {\r\n\r\n  Select,\r\n  DatePicker, Space,\r\n  message,\r\n  Button,\r\n  Input\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\nimport moment from 'moment';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\nimport './ezyVetSelectTime.less'\r\nimport { FetchEszVet } from './../../utils/FetchEszVet'\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst { RangePicker } = DatePicker;\r\n\r\nexport default class EzyVetSelectTime extends Component {\r\n\r\n  state = {\r\n    startTime: moment(moment().format(\"YYYY-MM-DD\")),\r\n    endTime: moment(),\r\n    patientId: ''\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    console.log(storage.selectTime);\r\n    if (storage.selectTime && `${storage.selectTime}` !== `undefined` && storage.selectTime !== '') {\r\n      try {\r\n        this.setState({\r\n          startTime: moment(JSON.parse(storage.selectTime).startTime),\r\n          endTime: moment(JSON.parse(storage.selectTime).endTime)\r\n        })\r\n      } catch (error) {\r\n        console.log('时间转换错误', error);\r\n      }\r\n\r\n    }\r\n    console.log('============', storage.selectPatientId);\r\n    if (storage.selectPatientId && `${storage.selectPatientId}` !== `undefined` && storage.selectPatientId !== '') {\r\n      try {\r\n        this.setState({\r\n          patientId: storage.selectPatientId\r\n\r\n        })\r\n      } catch (error) {\r\n        console.log('时间转换错误', error);\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  _next = () => {\r\n    let { startTime, endTime } = this.state\r\n    if (startTime === null || endTime === null) {\r\n      message.error('Please select a date range')\r\n      return\r\n    }\r\n    let saveSart = startTime.format('YYYY-MM-DD HH:mm:ss'), saveEnd = endTime.format('YYYY-MM-DD HH:mm:ss');\r\n    console.log('开始时间', startTime.format('YYYY-MM-DD HH:mm:ss'), '---------------结束时间', endTime.format('YYYY-MM-DD HH:mm:ss'));\r\n    let chazhi = new Date().getTimezoneOffset()\r\n    chazhi = chazhi + 360\r\n    console.log('差值', chazhi);\r\n    let start = startTime.add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n    let end = endTime.add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n    console.log(start, end);\r\n    let unix = `{\">\": ${moment(start).format('X')}, \"<\": ${moment(end).format('X')}}`\r\n    let uri = encodeURIComponent(unix)\r\n    console.log('-----------', unix, uri);\r\n    storage.unixToURI = uri\r\n    let selectTime = {\r\n      startTime: saveSart,\r\n      endTime: saveEnd,\r\n    }\r\n    console.log('最终的选择时间：', selectTime);\r\n    storage.selectTime = JSON.stringify(selectTime)\r\n    storage.selectPatientId = this.state.patientId\r\n    console.log(storage.selectTime, JSON.parse(storage.selectTime), storage.selectPatientId);\r\n    this.props.history.push('EzyVetSelectExam')\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"ezyVetSelectTime\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push('/ezyVetLogin')}\r\n        />\r\n        <div className=\"text\">\r\n          Please select the scope of <br /> search for medical records\r\n        </div>\r\n\r\n        <div className=\"patirntID\">\r\n          <p style={{ width: '80px' }}>Patient ID:</p>\r\n          <Input\r\n            style={{ outline: 'medium' }}\r\n            value={this.state.patientId}\r\n            // bordered={false}\r\n            onChange={(item) => {\r\n              console.log(item);\r\n              this.setState({\r\n                patientId: item.target.value\r\n              })\r\n            }}\r\n\r\n          />\r\n\r\n        </div>\r\n\r\n        <div className=\"time\">\r\n          <Space direction=\"vertical\" size={12}>\r\n            <RangePicker\r\n              value={[this.state.startTime, this.state.endTime]}\r\n              showTime\r\n              ranges={{\r\n                Today: [moment(moment().format(\"YYYY-MM-DD\")), moment(moment().endOf('day'))],\r\n              }}\r\n              onChange={(dates, dateStrings) => {\r\n                // console.log('From: ', dates[0], ', to: ', dates[1]);\r\n                // console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\r\n                console.log('我是第一个', dates, dateStrings);\r\n                // this.setState({\r\n                //   startTime: dateStrings[0],\r\n                //   endTime: dateStrings[1]\r\n                // })\r\n              }}\r\n              onCalendarChange={(dates, dateStrings) => {\r\n                console.log('我是第二个', dates, dateStrings);\r\n                this.setState({\r\n                  startTime: moment(dateStrings[0]),\r\n                  endTime: moment(dateStrings[1])\r\n                })\r\n              }}\r\n            />\r\n          </Space>\r\n        </div>\r\n\r\n        <div className=\"btn\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._next}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\selectMella\\SelectMella.jsx",["847"],"import React, { Component } from 'react'\r\nimport {\r\n  Button,\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\n\r\nimport './selectMella.less'\r\nexport default class SelectMella extends Component {\r\n\r\n  state = {\r\n    radiobgc1: '#E1206D',\r\n    radiobgc2: '',\r\n    radiobgc3: '',\r\n    chooseNum: 1,\r\n    isNotAsk: false,\r\n    isDefault: true\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n  }\r\n  _radio = (i) => {\r\n    console.log(i);\r\n    switch (i) {\r\n      case 1:\r\n        this.setState({\r\n          radiobgc1: '#E1206D',\r\n          radiobgc2: '',\r\n          radiobgc3: '',\r\n          chooseNum: 1\r\n        })\r\n        break;\r\n\r\n      case 2:\r\n        this.setState({\r\n          radiobgc1: '',\r\n          radiobgc2: '#E1206D',\r\n          radiobgc3: '',\r\n          chooseNum: 2\r\n        })\r\n        break;\r\n      case 3:\r\n        this.setState({\r\n          radiobgc1: '',\r\n          radiobgc2: '',\r\n          radiobgc3: '#E1206D',\r\n          chooseNum: 3\r\n        })\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n  }\r\n  _next = () => {\r\n    const { chooseNum } = this.state\r\n    this.props.history.push({ pathname: '/VetSpireSelectExam' })\r\n  }\r\n  render () {\r\n    const { radiobgc1, radiobgc2, radiobgc3 } = this.state\r\n    return (\r\n      <div id=\"selectMella\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick1={() => { this.props.history.push('/page3') }}\r\n          onClick={() => this.props.history.push('/')}\r\n        />\r\n\r\n        {/* 文本 */}\r\n        <div className=\"text\">Select Your Mella</div>\r\n\r\n        {/* 单选框 */}\r\n        <div className=\"radios\">\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(1)}>\r\n            <div className=\"radioText1\">Mella 001</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc1 }}></div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(2)}>\r\n            <div className=\"radioText1\">Mella 002</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc2 }}></div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"radio1\"\r\n            onClick={() => this._radio(3)}>\r\n            <div className=\"radioText1\">Mella 003</div>\r\n            <div className=\"radioBtn1\">\r\n              <div style={{ backgroundColor: radiobgc3 }}></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"select\">\r\n          <div className=\"notAsk\">\r\n            <div\r\n              className=\"zheng\"\r\n              onClick={() => {\r\n                console.log(123);\r\n                this.setState({\r\n                  isNotAsk: !this.state.isNotAsk\r\n                })\r\n              }}>\r\n              {(this.state.isNotAsk) ? (<img src={dui} alt='' width='40px' />) : (null)}\r\n            </div>\r\n            <p>Don’t ask again</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"select\">\r\n          <div className=\"notAsk\">\r\n            <div className=\"zheng\" onClick={() => this.setState({ isDefault: !this.state.isDefault })}>\r\n              {(this.state.isDefault) ? (<img src={dui} alt='' width='40px' />) : (null)}\r\n            </div>\r\n            <p>Default Device &nbsp; </p>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        {/* 按钮 */}\r\n        <div className=\"btn\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'>\r\n            New Device\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._next}>\r\n            Connect\r\n          </Button>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectScheduledExam.jsx",["848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874","875"],"////这是普通用户的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message,\r\n  Menu,\r\n  Modal,\r\n  Select,\r\n  ConfigProvider\r\n\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport Button1 from '../../utils/button/Button'\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport Heard from '../../utils/heard/Heard'\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './doctorSelectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { FetchEszVet } from '../../utils/FetchEszVet'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport gender from '../../utils/gender'\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { MTop, mTop, pX, px, win } from '../../utils/px';\r\nimport { stopBubble } from '../../utils/current'\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\r\nimport jinggao from './../../assets/img/jinggao.png'\r\nimport redclose from './../../assets/img/redclose.png'\r\nimport blackTriangle from './../../assets/img/blackTriangle.png'\r\nimport refresh from './../../assets/img/Refresh.png'\r\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\r\n\r\nimport electronStore from '../../utils/electronStore';\r\n\r\nconst { SubMenu } = Menu;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\n\r\n\r\n\r\nexport default class DoctorSelecScheduledtExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchData: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n    unixToURI: '',\r\n    ezyVetToken: '',\r\n    current: 1,\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    heardSearchText: '',\r\n\r\n    isNotFound: true,\r\n    modalVis: false,\r\n\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n    sortBy: 'Time',\r\n    showsortBy: false\r\n  }\r\n  componentWillMount () {\r\n    // console.log('------------', this.props.location.listDate);\r\n    try {\r\n      if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n        // console.log('------------', this.props.location);\r\n        let data = JSON.parse(this.props.location.listDate)\r\n        this.setState({\r\n          data,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    // ipcRenderer.send('big')\r\n    message.destroy()\r\n\r\n\r\n\r\n    storage.identity = '3'\r\n\r\n    if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n      let data = JSON.parse(this.props.location.listDate)\r\n      this.setState({\r\n        data,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        loading: true,\r\n      })\r\n    }\r\n    this._getExam()\r\n    temporaryStorage.logupVetInfo = {}\r\n    temporaryStorage.logupSelectOrganization = {}\r\n    temporaryStorage.logupSuccessData = {}\r\n    temporaryStorage.logupOrganization = {}\r\n    temporaryStorage.logupEmailCode = ''\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = \"5px 5px\"\r\n      style.textAlign = 'center'\r\n\r\n\r\n    }\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  rhapsody = async (patientsArr) => {\r\n\r\n    // console.log(patientsArr);\r\n    let dataArr = []\r\n    try {\r\n      for (let i = 0; i < patientsArr.length; i++) {\r\n        let params = { query: `query { patient (id:\"${patientsArr[i].patientId}\") {  vitals { data{ id, weight{value}, createdAt, updatedAt}}}}` }\r\n        let item = await fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n        if (item.data) {\r\n\r\n          let { vitals } = item.data.patient\r\n          let vitalData = vitals.data\r\n          console.log('-----------', vitalData);\r\n          let weight = ''\r\n          if (vitalData.length > 0) {\r\n            vitalData.sort((a, b) => {\r\n              return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n            })\r\n            if (vitalData[0].weight && vitalData[0].weight.value) {\r\n              patientsArr[i].weight = (vitalData[0].weight.value * 0.45).toFixed(1)\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n      console.log(patientsArr);\r\n      patientsArr.sort((a, b) => {\r\n        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n      })\r\n      this.setState({\r\n        data: patientsArr,\r\n        loading: false\r\n      })\r\n\r\n      electronStore.set('doctorExam', patientsArr)\r\n    } catch (error) {\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n      message.destroy()\r\n      message.error('Medical record acquisition failed')\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n\r\n\r\n\r\n\r\n\r\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n    if (storage.lastOrganization === '34') {\r\n\r\n      console.log(storage.connectionKey);\r\n      //1.获取用户id\r\n\r\n      let params = { query: `query { business { id, name, state } }` }\r\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n\r\n        .then(res => {\r\n          console.log('---', res);\r\n          if (res.errors) {\r\n            this.setState({\r\n              loading: false,\r\n              spin: false\r\n            })\r\n            message.destroy()\r\n            message.error('Data acquisition failed')\r\n\r\n          } else {\r\n            console.log('获取到了businessId');\r\n            let businessId = res.data.business.id\r\n            // let param = {\r\n            //   query: `query  { patients (businessId:\"${businessId}\") { data{ id, clientId, name,gender, dateOfBirth\r\n            //   species{id,name},\r\n            //   breeds{id,name},\r\n            //   createdAt,owners{owner{firstName,lastName} }}}` }\r\n            let param = {\r\n              query: `query { \r\n                patients (businessId:\"${businessId}\") {\r\n                    data{ \r\n                         id, \r\n                         clientId, \r\n                         businessId, \r\n                         name  \r\n                         gender,\r\n                         dateOfBirth,\r\n                         species{id,name},\r\n                         breeds{id,name},\r\n                         createdAt ,\r\n                         owners{owner{firstName,lastName}}\r\n                    }\r\n                }\r\n            }`\r\n            }\r\n\r\n            console.log('获取病历单的入参', param, JSON.stringify(param));\r\n            fetchRhapsody('', 'POST', param, storage.connectionKey)\r\n              .then(res => {\r\n                console.log(res);\r\n                if (res.errors) {\r\n                  this.setState({\r\n                    loading: false,\r\n                    spin: false\r\n                  })\r\n                  message.destroy()\r\n                  message.error('Failed to get pet list')\r\n\r\n                } else {\r\n                  let patientsArr = res.data.patients.data\r\n                  let dataArr = []\r\n                  for (let i = 0; i < patientsArr.length; i++) {\r\n                    const patient = patientsArr[i];\r\n                    let { id, name, gender, dateOfBirth, breeds, owners, createdAt } = patient\r\n\r\n                    createdAt = moment(createdAt).format('X')\r\n                    let owner = 'unknown'\r\n                    if (owners.length > 0) {\r\n                      let ownerItem = owners[0]\r\n                      if (ownerItem && ownerItem.owner) {\r\n                        let { firstName, lastName } = ownerItem.owner\r\n                        if (firstName || lastName) {\r\n                          owner = `${lastName} ${firstName}`\r\n                        }\r\n                      }\r\n\r\n                    }\r\n\r\n                    let breed = 'unknown'\r\n                    if (breeds.length > 0 && breeds[0].name) {\r\n                      breed = breeds[0].name\r\n                    }\r\n\r\n                    let petAge = 'unknown'\r\n                    if (dateOfBirth) {\r\n                      petAge = moment(new Date()).diff(moment(dateOfBirth), 'years')\r\n                      // console.log('petAge', petAge);\r\n                    }\r\n\r\n                    let json = {\r\n                      insertedAt: createdAt,\r\n                      patientId: id,\r\n                      petName: name,\r\n                      owner,\r\n                      breed,\r\n                      gender: gender || 'unknown',\r\n                      age: petAge,\r\n                      petId: '',\r\n                      id: `${i}`,\r\n                      weight: null,\r\n                      rfid: null,\r\n                      url: null,\r\n                      speciesId: null,\r\n                    }\r\n                    dataArr.push(json)\r\n\r\n\r\n                  }\r\n\r\n                  console.log(dataArr);\r\n\r\n\r\n\r\n                  this.rhapsody(dataArr)\r\n                }\r\n\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                this.setState({\r\n                  loading: false,\r\n                  spin: false\r\n                })\r\n                message.destroy()\r\n                message.error('Failed to get pet list')\r\n              })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n          message.destroy()\r\n          message.error('Data acquisition failed')\r\n        })\r\n\r\n\r\n\r\n\r\n      return\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let startDay = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n    let endDay = moment().endOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n    let chazhi = new Date().getTimezoneOffset()\r\n    let newstartTime = moment(startDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n    let newendTime = moment(endDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n      subStartTime: newstartTime,\r\n      subEndTime: newendTime\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    console.log('查询宠物的入参', params,);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    // fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n    fetchRequest('/new/pet/subscribe/page', 'POST', params)\r\n\r\n      .then(res => {\r\n        console.log('查询到的宠物列表,/new/pet/subscribe/page', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let data = []\r\n          // let oldList = res.data\r\n          let oldList = res.data.list\r\n          for (let i = 0; i < oldList.length; i++) {\r\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n              h2tLength, torsoLength } = oldList[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n              h2tLength, torsoLength,\r\n              pethubId, macId,\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          console.log('列表的数据：', data);\r\n          storage.doctorList = JSON.stringify(data)\r\n          this.setState({\r\n            data,\r\n            loading: false,\r\n            spin: false\r\n          })\r\n\r\n          electronStore.set('doctorExam', data)\r\n\r\n\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n          spin: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    // this._getData()\r\n    this._getExam()\r\n  }\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n\r\n    switch (e.key) {\r\n      case '1': this.props.history.push('/page11'); break;\r\n      case '2': this.props.history.push('/'); break;\r\n      case '3':\r\n        try {\r\n\r\n          let selectNum = document.getElementsByClassName('ant-pagination-item-active')\r\n          // storage.defaultCurrent = selectNum[0].title\r\n          storage.doctorList = JSON.stringify(this.state.data)\r\n        } catch (error) {\r\n          console.log('错误信息', error);\r\n        }\r\n\r\n\r\n        this.props.history.push('/page8'); break;\r\n      case '4': this.props.history.push('/page12'); break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n\r\n  _search1 = (search) => {       //这个是搜索调用后台的函数，现在废弃20210929\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      petName: search,\r\n    }\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n    console.log('搜索的数据', params);\r\n    fetchRequest('/pet/listPetsLike', \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n\r\n        if (res.flag === true) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { age, createTime, patientId, petName, firstName, birthday, lastName, breedName, gender, petId, weight } = res.data[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n              // console.log('petAge', petAge);\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            searchData: data,\r\n            loading: false\r\n          })\r\n        } else {\r\n          this.setState({\r\n            searchData: [],\r\n            loading: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _search = (keyWord) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\r\n\r\n    /**\r\n     * 使用indexof方法实现模糊查询\r\n     *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n     *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n     *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n     *  \r\n     * list         原数组\r\n     * keyWord      查询关键词\r\n     * searchData   查询的结果\r\n     * \r\n     * toLowerCase（）方法：将字符串统一转成小写\r\n     * toUpperCase（）方法：将字符串统一转成大写\r\n     * \r\n     */\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    let list = this.state.data\r\n    let searchData = []\r\n    for (let i = 0; i < list.length; i++) {\r\n      let petName = list[i].petName.toLowerCase() || ''\r\n      let patientId = list[i].patientId.toLowerCase() || ''\r\n      let rfid = list[i].rfid || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        searchData.push(list[i])\r\n      }\r\n    }\r\n    console.log(searchData);\r\n    this.setState({\r\n      searchData,\r\n      loading: false\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  RFIDSearch = () => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest4(`/pet/getPetInfoByRFID/${this.state.heardSearchText}/${storage.lastOrganization}`, 'GET')\r\n      .then(res => {\r\n        console.log('----RFID搜索结果', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let { createTime, patientId, petName, firstName, lastName, breedName, gender, birthday, petId, rfid, weight } = res.data\r\n          patientId = patientId || 'unknown'\r\n          petName = petName || 'unknown'\r\n          breedName = breedName || 'unknown'\r\n          weight = weight || 'unknown'\r\n          let owner = ''\r\n          if (!firstName) {\r\n            firstName = ''\r\n          }\r\n          if (!lastName) {\r\n            lastName = ''\r\n          }\r\n          if (lastName === '' && firstName === '') {\r\n            owner = 'unknown'\r\n          } else {\r\n            owner = `${lastName} ${firstName}`\r\n          }\r\n          createTime = moment(createTime).format('X')\r\n          let petGender = ''\r\n          switch (`${gender}`) {\r\n            case '1': petGender = 'F'\r\n\r\n              break;\r\n            case '0': petGender = \"M\"\r\n              break;\r\n            default: petGender = 'unknown'\r\n              break;\r\n          }\r\n          let petAge = 'unknown'\r\n          if (birthday) {\r\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            // console.log('petAge', petAge);\r\n          }\r\n          let json = {\r\n            insertedAt: createTime,\r\n            patientId,\r\n            petName,\r\n            owner,\r\n            breed: breedName,\r\n            gender: petGender,\r\n            age: petAge,\r\n            petId,\r\n            id: 0,\r\n            weight,\r\n            rfid\r\n          }\r\n          let searchData = []\r\n          searchData.push(json)\r\n          this.setState({\r\n            searchData,\r\n            loading: false\r\n          })\r\n\r\n\r\n\r\n\r\n        } else if (res.flag === true && res.msg === '该组织下无此宠物信息') {\r\n          console.log('找到了但是不是在这个组织下');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: false,\r\n            heardSearchText: ''\r\n          })\r\n        } else {\r\n          console.log('没有找到');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: true,\r\n            heardSearchText: ''\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n        console.log('抛出异常:', err);\r\n        this.setState({\r\n          loading: false,\r\n        })\r\n      })\r\n  }\r\n  draggleRef = React.createRef();\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        width: '16%',\r\n        // ...this.getColumnSearchProps('insertedAt'),\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n          // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n          let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\r\n          let time = moment(parseInt(text) * 1000).format('hh:mm a');\r\n          let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n          // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n          return (\r\n            <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\r\n              <p>{`${year}`}</p>\r\n              <p>{`${time}`}</p>\r\n            </div>\r\n          )\r\n        },\r\n\r\n      },\r\n      {\r\n        title: 'Pet ID',\r\n        dataIndex: 'patientId',\r\n        key: 'patientId',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('patientId'),\r\n      },\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('breed'),\r\n        render: (text, record, index) => {\r\n          if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        width: '12%',\r\n        // width: '30%',\r\n        // ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        width: '12%',\r\n        // width: '20%',\r\n        render: (text, record, index) => {\r\n          // console.log(text);\r\n\r\n          if (`${text}` === 'NaN') {\r\n            return (\r\n              <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin, closeColor, closebgc, minbgc, disabled, bounds, modalVis, sortBy, showsortBy } = this.state\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = `5px 5px`\r\n      style.textAlign = 'center'\r\n    }\r\n    const noData = () => {\r\n      return (\r\n        <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\r\n          <p style={{ fontSize: px(22) }}>No pet found, </p>  &nbsp;&nbsp;\r\n          <a style={{ fontSize: px(22) }} href=\"#\"\r\n            onClick={(e) => {\r\n              console.log('我要去添加宠物');\r\n              // try {\r\n\r\n              //   storage.doctorList = JSON.stringify(this.state.data)\r\n              // } catch (error) {\r\n              //   console.log('错误信息', error);\r\n              // }\r\n              // // /pet/doctorAddPet\r\n              // this.props.history.push({ pathname: '/pet/doctorAddPet' })\r\n              this.props.history.push({ pathname: '/AddYuding', })\r\n              e.preventDefault();\r\n\r\n            }}\r\n\r\n          >{`go to add`}</a>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div id=\"doctorSelectExam\" onClick={(e) => {\r\n        console.log('隐藏');\r\n        this.setState({\r\n          showsortBy: false\r\n        })\r\n      }}>\r\n        {/* 关闭缩小 */}\r\n        <Heard\r\n          onReturn={() => {\r\n            this.props.history.push('/page11')\r\n\r\n          }}\r\n          onSearch={(data) => {\r\n\r\n            storage.doctorExam = JSON.stringify(data)\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data)\r\n            if (storage.isClinical === 'true') {\r\n              this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n            } else {\r\n              this.props.history.push({ pathname: '/page10', })\r\n            }\r\n          }}\r\n          menu10Click={() => {\r\n            this.props.history.push({ pathname: '/uesr/DoctorSelectAllExam', })\r\n          }}\r\n          blueSearch={true}\r\n        />\r\n\r\n\r\n        <div className=\"hread flex\">\r\n          <div className=\"hread1 flex\" style={{ marginTop: px(30) }}>\r\n            <div className=\"heard1L flex\">\r\n              <div className=\"title\" style={{ fontSize: px(25) }}>Scheduled Patients</div>\r\n              <div className=\"refresh flex\"\r\n                style={{ fontSize: px(25), marginLeft: px(10) }}\r\n              >\r\n                <SyncOutlined onClick={this._refresh} spin={spin} />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"walkin flex\"\r\n              style={{ borderRadius: px(50), height: px(45), fontSize: px(20) }}\r\n              onClick={() => {\r\n                storage.doctorExam = JSON.stringify('')\r\n                storage.doctorList = JSON.stringify(this.state.data)\r\n                if (storage.isClinical === 'true') {\r\n                  this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: null })\r\n                } else {\r\n                  this.props.history.push({ pathname: '/page10', })\r\n                }\r\n\r\n              }}\r\n            >Walk-In</div>\r\n\r\n          </div>\r\n          <div className=\"heard2 flex\" style={{ marginTop: px(8), marginBottom: px(8) }}>\r\n\r\n            <div className=\"sort flex\" >\r\n              <p style={{ fontSize: px(16), marginRight: px(10) }}>sort By:</p>\r\n\r\n              <SelectionBox\r\n                listArr={[\r\n                  { key: 'time', value: 'Time' },\r\n                  { key: 'petid', value: 'Pet ID' },\r\n                  { key: 'owner', value: 'Owner' },\r\n                  { key: 'breed', value: 'Breed' },\r\n                  { key: 'petname', value: 'Pet Name' },\r\n                  { key: 'gender', value: 'Gender' },\r\n                ]}\r\n                clickItem={(item) => {\r\n                  let petList = [].concat(data)\r\n                  switch (item.key) {\r\n                    case 'time':\r\n                      petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n                      break;\r\n                    case 'petid':\r\n                      petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n                      break;\r\n                    case 'owner':\r\n                      petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n                      break;\r\n                    case 'breed':\r\n                      petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n                      break;\r\n                    case 'petname':\r\n                      petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n                      break;\r\n                    case 'gender':\r\n                      petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n                      break;\r\n                  }\r\n\r\n                  this.setState({\r\n                    sortBy: item.value,\r\n                    showsortBy: false,\r\n                    data: petList\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\" >\r\n          <ConfigProvider renderEmpty={noData}>\r\n            <Table\r\n              style={{\r\n                // border: ' #979797 1px solid',\r\n                padding: 0,\r\n                margin: 0,\r\n                width: '95%',\r\n                // height: px(500)\r\n              }}\r\n              rowKey={data => data.id}\r\n              bordered={false}\r\n              columns={columns}\r\n              dataSource={(this.state.heardSearchText.length === 0) ? this.state.data : this.state.searchData}\r\n              loading={loading}\r\n              locale={{ filterConfirm: <div>111</div> }}\r\n              // pagination={{ showSizeChanger: false, showQuickJumper: true, defaultCurrent: this.state.current }}\r\n              pagination={false}\r\n              scroll={{\r\n                y: px(600)\r\n              }}\r\n              onRow={(record) => {\r\n                return {\r\n                  onClick: (event) => {\r\n\r\n                    console.log('record', record);\r\n                    storage.doctorExam = JSON.stringify(record)\r\n                    storage.doctorList = JSON.stringify(this.state.data)\r\n\r\n                    if (storage.isClinical === 'true') {\r\n                      this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.patientId })\r\n                    } else {\r\n                      this.props.history.push({ pathname: '/page10', })\r\n                    }\r\n\r\n\r\n                  }, // 点击行\r\n\r\n                };\r\n              }}\r\n            />\r\n          </ConfigProvider>\r\n        </div>\r\n        <div className=\"hread flex\" style={{ alignItem: 'center' }}>\r\n          <div className=\"hread1\" style={{ marginTop: px(10), justifyContent: 'flex-end', display: 'flex', }}>\r\n            <div className=\"walkin flex\"\r\n              style={{ borderRadius: px(50), height: px(45), fontSize: px(20), marginRight: px(10) }}\r\n              onClick={() => {\r\n                this.props.history.push({ pathname: '/AddYuding', })\r\n\r\n              }}\r\n            >Create New Scheduled</div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <Modal\r\n\r\n          // visible={isOrg}\r\n          visible={modalVis}\r\n          onCancel={() => this.setState({ modalVis: false })}\r\n          width={350}\r\n          footer={[]}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"doctorSelectExamModal\"\r\n        >\r\n          <div id='doctorSelectExamModal'>\r\n            <div className=\"text\"\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n\r\n            >{this.state.isNotFound ? 'Pet not found!' : 'Pet found!'}</div>\r\n            <div className='Img'>\r\n              {this.state.isNotFound ?\r\n                <img src={redclose} width=\"50px\" /> :\r\n                <img src={jinggao} width=\"50px\" />\r\n              }\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {this.state.isNotFound ? <p > This pet is not on your database</p> :\r\n              <p >Pet Identified but does not <br /> belong to your organization.</p>}\r\n\r\n\r\n            <div style={{ marginTop: px(20) }}>\r\n              <Button1\r\n                text={'OK'}\r\n\r\n                onClick={() => this.setState({\r\n                  modalVis: false\r\n                })}\r\n              />\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\SignIn.jsx",["876","877","878","879","880","881","882","883","884","885","886","887","888","889"],"import React, { Component } from \"react\";\r\nimport { Input, Button, message, Spin, BackTop } from \"antd\";\r\nimport {\r\n  createFromIconfontCN,\r\n  SyncOutlined,\r\n  LoadingOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport \"./signIn.less\";\r\nimport mellaLogo from \"./../../assets/images/mellaLogo.png\";\r\nimport dui from \"./../../assets/images/dui.png\";\r\nimport back_white from \"./../../assets/img/back-white.png\";\r\nimport back_hui from \"./../../assets/img/back-hui.png\";\r\nimport { fetchRequest } from \"./../../utils/FetchUtil1\";\r\nimport { fetchRequest2 } from \"./../../utils/FetchUtil2\";\r\nimport temporaryStorage from \"../../utils/temporaryStorage\";\r\nimport { fetchRequest1 } from \"../../utils/FetchUtil\";\r\nimport { mTop, px, MTop, pX, win } from \"../../utils/px\";\r\nimport MinClose from \"./../../utils/minClose/MinClose\";\r\nimport MouseDiv from \"./../../utils/mouseDiv/MouseDiv\";\r\nimport { addLogin, addQRCode } from \"../../utils/axios\";\r\nlet storage = window.localStorage;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: \"//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js\",\r\n});\r\nlet num = 0;\r\n//有可能出现,登录成功跳转后获取到了二维码,这样就会导致出现一直轮询,未解决这个问题设置变量isSign\r\nlet isSign = true;\r\n\r\nexport default class SignIn extends Component {\r\n  state = {\r\n    isRemember: false,\r\n    email: \"\",\r\n    hash: \"\",\r\n    isCode: false,\r\n    baseUrl: \"\",\r\n    QRToken: \"\",\r\n    isExpired: false, //二维码是否过期\r\n    spin: false,\r\n    isLoadQrCode: false, //是否正在加载二维码\r\n  };\r\n  componentDidMount() {\r\n    isSign = true;\r\n    storage.lastOrganization = \"\";\r\n    //通知main.js渲染一个small窗口\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.send(\"small\", win());\r\n    //如果有保存的账号密码则展示出来\r\n    if (storage.signIn !== undefined && storage.signIn !== \"\") {\r\n      let data = storage.signIn;\r\n      data = JSON.parse(data);\r\n      this.setState({\r\n        email: data.email,\r\n        hash: data.hash,\r\n        QRToken: \"\",\r\n      });\r\n    }\r\n    //是否勾选了保持登录\r\n    if (storage.isRemember !== undefined) {\r\n      let isRemember = storage.isRemember === \"true\" ? true : false;\r\n      this.setState({\r\n        isRemember,\r\n      });\r\n    }\r\n    // 监听分辨率是否改变\r\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\r\n    //清空本地的注册界面的信息\r\n    temporaryStorage.logupVetInfo = {};\r\n    this._getQRCode();\r\n  }\r\n  componentWillUnmount() {\r\n    isSign = false;\r\n    this.timer && clearInterval(this.timer);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer;\r\n    // ipcRenderer.send('small')\r\n    ipcRenderer.send(\"small\", win());\r\n    this.setState({});\r\n  };\r\n  _getQRCode = () => {\r\n    this.setState({\r\n      isLoadQrCode: true,\r\n    });\r\n    num = 0;\r\n    fetchRequest2(\"/user/getLoginQRcode\", \"GET\", \"\")\r\n      // addQRCode()\r\n      .then((res) => {\r\n        message.destroy();\r\n\r\n        console.log(\"---获取二维码\", res);\r\n        if (res.flag === true) {\r\n          this.setState({\r\n            baseUrl: res.data.QRcode,\r\n            QRToken: res.data.QRToken,\r\n            isLoadQrCode: false,\r\n          });\r\n          this.timer = setInterval(() => {\r\n            if (!isSign) {\r\n              this.timer && clearInterval(this.timer);\r\n            }\r\n            num++;\r\n            console.log(\"lunxin\");\r\n            this._polling();\r\n\r\n            if (num > 280) {\r\n              //超过280秒则去显示二维码过期，要重新获取\r\n              this.setState({\r\n                isExpired: true,\r\n              });\r\n              num = 0;\r\n              this.timer && clearInterval(this.timer);\r\n            }\r\n          }, 1000);\r\n        } else {\r\n          message.error(\"Failed to obtain QR code\", 10);\r\n          this.setState({\r\n            isLoadQrCode: false,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        message.error(\"Failed to obtain QR code\", 10);\r\n        this.setState({\r\n          isLoadQrCode: false,\r\n        });\r\n        console.log(err);\r\n      });\r\n  };\r\n  //轮询\r\n  _polling = () => {\r\n    fetchRequest2(`/user/loginWithQRcode/${this.state.QRToken}`)\r\n      .then((res) => {\r\n        console.log(\"轮询结果：\", res);\r\n        if (res.flag === true) {\r\n          switch (res.code) {\r\n            case 10001:\r\n              console.log(\"未扫码\");\r\n\r\n              break;\r\n\r\n            case 11033:\r\n              console.log(\"扫码未点击登录\");\r\n              this.timer && clearInterval(this.timer);\r\n              temporaryStorage.QRToken = this.state.QRToken;\r\n              let { name, url } = res.data;\r\n              this.props.history.replace({\r\n                pathname: \"/user/login/scanCodeLogin\",\r\n                params: { name, url },\r\n              });\r\n\r\n              break;\r\n\r\n            case 11023:\r\n              console.log(\"过期\");\r\n              this.setState({\r\n                isExpired: true,\r\n              });\r\n              num = 0;\r\n              this.timer && clearInterval(this.timer);\r\n\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        console.log(\"code\", res.code);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  //登录接口\r\n  _continue = () => {\r\n    const { email, hash, isRemember } = this.state;\r\n\r\n    message.destroy();\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: \"1\",\r\n    };\r\n    if (email === \"\") {\r\n      message.error(\"please input your email\");\r\n      return;\r\n    }\r\n    if (hash === \"\") {\r\n      message.error(\"please input your password\");\r\n      return;\r\n    }\r\n    console.log(params);\r\n    this.setState({\r\n      spin: true,\r\n    });\r\n    // fetchRequest('/user/mellaLogin', 'POST', params)\r\n    addLogin(params)\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({\r\n          spin: false,\r\n        });\r\n        if (res.status && res.status === 404) {\r\n          message.error(\"system error\");\r\n          return;\r\n        }\r\n        if (res.status === 500) {\r\n          message.error(\"system error\");\r\n\r\n          return;\r\n        }\r\n        if (res.code === 10001 && res.msg === \"账号错误\") {\r\n          message.error(\"Account error\");\r\n          return;\r\n        }\r\n        if (res.code === 10002 && res.msg === \"密码错误\") {\r\n          message.error(\"wrong password\");\r\n          return;\r\n        }\r\n        if (\r\n          res.code === 0 &&\r\n          res.msg === \"success\" &&\r\n          res.success.roleId === 1\r\n        ) {\r\n          message.error(\r\n            \"You do not have the authority of a doctor, please contact the administrator or customer service\",\r\n            10\r\n          );\r\n          return;\r\n        }\r\n        if (res.code === 10004 && res.msg === \"账号被限制\") {\r\n          message.error(\r\n            \"The account is restricted, please contact the management\",\r\n            10\r\n          );\r\n          return;\r\n        }\r\n        if (res.code === 10003) {\r\n          message.error(\"The password or email is incorrect, please re-enter\");\r\n          return;\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === \"success\") {\r\n          this.timer && clearInterval(this.timer);\r\n          console.log(\"账号密码正确，登录进去了\");\r\n          let { userWorkplace, lastOrganization, token } = res.success;\r\n          storage.token = token;\r\n          storage.userId = \"\";\r\n          let data = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n          };\r\n          data = JSON.stringify(data);\r\n          if (isRemember === true) {\r\n            storage.signIn = data;\r\n          } else {\r\n            storage.signIn = \"\";\r\n          }\r\n          storage.saveSign = data;\r\n\r\n          storage.userId = res.success.userId;\r\n          storage.roleId = res.success.roleId;\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = \"\";\r\n          storage.defaultCurrent = \"\";\r\n\r\n          //由于后台接口原因，导致这里的最后工作场所可能不是自己的，因此下面全注释掉。改成如果有多个工作场所则跳转到选择工作场所界面，不是多个则跳转到选择宠物界面\r\n          if (res.success.lastWorkplaceId) {\r\n            storage.lastWorkplaceId = res.success.lastWorkplaceId;\r\n          } else {\r\n            storage.lastWorkplaceId = \"\";\r\n          }\r\n\r\n          if (res.success.lastOrganization) {\r\n            storage.lastOrganization = res.success.lastOrganization;\r\n          } else {\r\n            storage.lastOrganization = \"\";\r\n          }\r\n\r\n          // console.log(\"----------\", userWorkplace, userWorkplace.length);\r\n\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace);\r\n            let connectionKey = \"\";\r\n            for (let i = 0; i < userWorkplace.length; i++) {\r\n              const element = userWorkplace[i];\r\n              if (element.organizationEntity) {\r\n                if (\r\n                  element.organizationEntity.organizationId === lastOrganization\r\n                ) {\r\n                  if (element.organizationEntity.connectionKey) {\r\n                    connectionKey = element.organizationEntity.connectionKey;\r\n                  }\r\n                  if (element.roleId) {\r\n                    console.log(element.roleId);\r\n                    storage.roleId = element.roleId;\r\n                  }\r\n\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n            console.log(\"----------key值为：\", connectionKey);\r\n            storage.connectionKey = connectionKey;\r\n          } else {\r\n            storage.userWorkplace = \"\";\r\n            storage.connectionKey = \"\";\r\n          }\r\n\r\n          this.props.history.push(\"/MainBody\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          spin: false,\r\n        });\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  _signUp = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push(\"/uesr/logUp/VetPrifile\");\r\n  };\r\n  _change = () => {\r\n    let { isCode } = this.state;\r\n    message.destroy();\r\n    if (isCode === false) {\r\n      this._getQRCode();\r\n    } else {\r\n      this.timer && clearInterval(this.timer);\r\n      num = 0;\r\n      this.setState({\r\n        isExpired: false,\r\n      });\r\n    }\r\n    this.setState({ isCode: !this.state.isCode });\r\n  };\r\n  //二维码界面\r\n  _qrCode = () => {\r\n    let { isCode, baseUrl, isExpired, isLoadQrCode } = this.state;\r\n    let imgOpacity = isLoadQrCode ? (baseUrl ? 0.1 : 0.5) : 1;\r\n\r\n    if (!isExpired) {\r\n      const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\r\n      return (\r\n        <div className=\"qrcode\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${baseUrl}`}\r\n            alt=\"\"\r\n            style={{\r\n              width: px(120),\r\n              height: px(120),\r\n              opacity: imgOpacity,\r\n            }}\r\n          />\r\n          {isLoadQrCode && (\r\n            // true &&\r\n\r\n            <div className=\"err\">\r\n              <Spin\r\n                indicator={antIcon}\r\n                tip=\"Loading...\"\r\n                style={{ fontSize: 16, color: \"#e1206d\" }}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"qrcode\">\r\n          <img\r\n            src={`data:image/jpeg;base64,${baseUrl}`}\r\n            alt=\"\"\r\n            style={{ opacity: \"0.1\", width: px(120), height: px(120) }}\r\n          />\r\n\r\n          <div className=\"err\">\r\n            <div className=\"errText\">QR code has expired</div>\r\n            <div\r\n              className=\"btn\"\r\n              style={{ width: px(145), height: px(35), marginTop: px(10) }}\r\n              onClick={this.refresh}\r\n            >\r\n              Refresh\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  //点击refresh按钮\r\n  refresh = () => {\r\n    this.setState({\r\n      isExpired: false,\r\n    });\r\n    num = 0;\r\n    this._getQRCode();\r\n  };\r\n  beforeDiv = () => {\r\n    return <img src={back_hui} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n  afterDiv = () => {\r\n    return <img src={back_white} alt=\"\" style={{ width: px(15) }} />;\r\n  };\r\n\r\n  render() {\r\n    let { isCode, baseUrl } = this.state;\r\n    let code = isCode ? \"icon-diannao-copy\" : \"icon-erweima-copy\";\r\n    return (\r\n      <div id=\"signIn\">\r\n        <div\r\n          className=\"heaed\"\r\n          style={{ paddingTop: px(10), paddingRight: px(20) }}\r\n        >\r\n          <div className=\"l\">\r\n            <MouseDiv\r\n              className=\"mouseDiv\"\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.push(\"/\");\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n            <MinClose />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"logo\">\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(120) }} />\r\n          </div>\r\n          <div className=\"body\" style={{ position: \"relative\" }}>\r\n            <div\r\n              className=\"text\"\r\n              style={{\r\n                fontSize: px(28),\r\n                marginBottom: px(20),\r\n                marginTop: px(30),\r\n              }}\r\n            >\r\n              Please enter email <br />\r\n              and password\r\n            </div>\r\n\r\n            <div className=\"inpF\">\r\n              <Input\r\n                className=\"inp\"\r\n                style={{\r\n                  width: px(310),\r\n                  height: px(45),\r\n                  marginLeft: px(6),\r\n                  marginBottom: px(18),\r\n                  fontSize: px(18),\r\n                }}\r\n                value={this.state.email}\r\n                placeholder=\"rachel@friends.com\"\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  let str = item.target.value;\r\n                  this.setState({\r\n                    email: str,\r\n                  });\r\n                }}\r\n              />\r\n              <Input.Password\r\n                className=\"inp\"\r\n                style={{\r\n                  width: px(310),\r\n                  height: px(45),\r\n                  marginLeft: px(6),\r\n                  marginBottom: px(18),\r\n                  fontSize: px(18),\r\n                }}\r\n                visibilityToggle={false}\r\n                value={this.state.hash}\r\n                placeholder=\"********\"\r\n                bordered={false}\r\n                onChange={(item) => {\r\n                  let str = item.target.value;\r\n                  this.setState({\r\n                    hash: str,\r\n                  });\r\n                }}\r\n                onKeyDown={(e) => {\r\n                  if (e.keyCode === 13) {\r\n                    this._continue();\r\n                  }\r\n                }}\r\n              />\r\n\r\n              <div\r\n                className=\"text\"\r\n                style={{\r\n                  fontSize: px(28),\r\n                  lineHeight: px(1),\r\n                  marginTop: px(10),\r\n                  marginBottom: px(20),\r\n                }}\r\n              >\r\n                {\"Or scan QR Code\"}\r\n              </div>\r\n            </div>\r\n\r\n            {this._qrCode()}\r\n            <div\r\n              className=\"littleText flex\"\r\n              style={{\r\n                fontSize: px(12),\r\n                marginTop: px(10),\r\n                marginBottom: px(10),\r\n              }}\r\n            >\r\n              Go to your Mella mobile app to access\r\n              <br />\r\n              the QR scanner\r\n            </div>\r\n            <div className=\"stay\">\r\n              <div className=\"remember\">\r\n                <p style={{ fontSize: px(16) }}>Stay Signed In</p>\r\n                <div\r\n                  className=\"box\"\r\n                  style={{ width: px(20), height: px(20), marginLeft: px(12) }}\r\n                  onClick={() => {\r\n                    let { isRemember } = this.state;\r\n                    this.setState({\r\n                      isRemember: !isRemember,\r\n                    });\r\n                    storage.isRemember = !isRemember;\r\n                  }}\r\n                >\r\n                  {this.state.isRemember && <img src={dui} alt=\"\" />}\r\n                </div>\r\n              </div>\r\n              <div\r\n                className=\"forgot\"\r\n                style={{ fontSize: px(16) }}\r\n                onMouseDown={() => {\r\n                  let forget = document.querySelectorAll(\"#signIn .forgot\");\r\n                  forget[0].style.opacity = 0.5;\r\n                }}\r\n                onMouseUp={() => {\r\n                  document.querySelectorAll(\r\n                    \"#signIn .forgot\"\r\n                  )[0].style.opacity = 1;\r\n                  if (this.state.email) {\r\n                    temporaryStorage.forgotPassword_email = this.state.email;\r\n                  }\r\n\r\n                  this.props.history.push(\"/user/login/forgotPassword\");\r\n                }}\r\n              >\r\n                Forgot?\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className=\"button11\"\r\n          style={{ backgroundColor: \"#E7E7E7\", padding: `${px(32)}px 0` }}\r\n        >\r\n          <div\r\n            className=\"btn1 flex\"\r\n            onClick={this._continue}\r\n            style={{ height: px(40) }}\r\n          >\r\n            <p>{`CONTINUE`}</p>\r\n          </div>\r\n\r\n          <div className=\"text2\" style={{ marginTop: px(12) }}>\r\n            <p style={{ fontSize: px(17) }}>\r\n              Do not have an account?{\" \"}\r\n              <a href=\"#\" onClick={this._signUp}>\r\n                Sign Up\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {this.state.spin && (\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\r\n              <LoadingOutlined\r\n                style={{ fontSize: 30, color: \"#fff\", marginTop: px(-30) }}\r\n              />\r\n            </div>\r\n            <p>loading...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\forgotPassword\\ForgotPassword.jsx",["890","891","892","893"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message,\r\n  Spin\r\n\r\n} from 'antd';\r\n// import { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './forgotPassword.less'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { px, mTop, pX, MTop } from '../../../utils/px';\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport errorIcon from '../../../assets/images/errorIcon.png'\r\n\r\n\r\n//num做超时处理\r\nlet num = 0\r\nexport default class ForgotPassword extends Component {\r\n\r\n  state = {\r\n    email: '',\r\n    success1: false,\r\n    spin: false,        //调用接口加载中\r\n    noRegistered: false, //邮箱没被注册跳出的弹窗\r\n    isLimit: false,      //账号被限制、注册未激活状态\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    if (temporaryStorage.forgotPassword_email) {\r\n      this.setState({\r\n        email: temporaryStorage.forgotPassword_email\r\n      })\r\n    }\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount () {\r\n    this.timer && clearInterval(this.timer)\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    let { email } = this.state\r\n    message.destroy()\r\n    console.log('点击了发送按钮', email)\r\n    if (email.length < 2 || email.indexOf('@') === -1) {\r\n      message.error('Email number format is incorrect')\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('开始去检测邮箱');\r\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\r\n      .then(res => {\r\n        console.log('检测邮箱存不存在', res);\r\n        if (res.code) {\r\n          switch (res.code) {\r\n\r\n            case 11011:\r\n              console.log('邮箱存在，发送邮件');\r\n              this._sendEmail()\r\n              break;\r\n            case 11012:\r\n              console.log('账号被限制、注册未激活状态');\r\n              this.setState({\r\n                isLimit: true\r\n              })\r\n              break;\r\n            // case 11013:\r\n            //   console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n            case 11014:\r\n              console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n              this.setState({\r\n                noRegistered: true,\r\n                spin: false\r\n              })\r\n              return\r\n          }\r\n        } else {\r\n          console.log('系统错误', res);\r\n          message.error('system error')\r\n          this.setState({\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        message.error('system error')\r\n\r\n      })\r\n\r\n\r\n\r\n  }\r\n  _sendEmail = () => {\r\n    fetchRequest(`/user/forgetPwd/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('调用验证邮箱返回的数据', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          console.log('邮件发送成功,请注意查收')\r\n          this.timer && clearInterval(this.timer)\r\n          this.timer = setInterval(() => {\r\n            num++\r\n            if (num > 300) {\r\n              message.error('The email is invalid, please click send again', 10)\r\n              num = 0\r\n              this.timer && clearInterval(this.timer)\r\n            }\r\n            this._validation()\r\n\r\n          }, 1000);\r\n          message.success('The email was sent successfully, please check it', 10)\r\n        } else {\r\n          console.log('邮件发送失败');\r\n          message.error('The account does not exist', 10)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  _validation = () => {\r\n\r\n    fetchRequest(`/user/checkForgetPassword/${this.state.email}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('验证结果', res);\r\n        if (res.flag === true) {\r\n          temporaryStorage.forgotUserId = res.data.userId\r\n\r\n          this.timer && clearInterval(this.timer)\r\n          if (this.state.success1 === false) {\r\n            this.setState({\r\n              success1: true\r\n            }, () => {\r\n              console.log('跳转');\r\n              this.props.history.push('/user/login/resetPassword')\r\n            })\r\n          }\r\n          console.log('成功了');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"forgotPassword\">\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Forgot Your Password?\r\n          </div>\r\n          <p className=\"text1\" style={{ fontSize: px(20) }}>\r\n            Please enter email and we<br />\r\n            will send you a link if there is an<br />\r\n            account associated with that address.<br />\r\n          </p>\r\n          {/* <div className=\"text1\">Please enter email and we</div>\r\n          <div className=\"text1\">will send you a link if there is an</div>\r\n          <div className=\"text1\">account associated with that address.</div> */}\r\n          <div className=\"inpF\">\r\n\r\n            <Input className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              value={this.state.email}\r\n              placeholder='rachel@friends.com'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  email: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            SEND LINK\r\n          </Button>\r\n        </div>\r\n\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.noRegistered &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                This account is not registered. Do you want to go to register?\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      noRegistered: false\r\n                    })\r\n                    this.props.history.push({ pathname: '/uesr/logUp/VetPrifile', email: this.state.email })\r\n\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {\r\n          this.state.isLimit &&\r\n          <div className=\"modal\">\r\n            <div className=\"modalChaild\" style={{ borderRadius: pX(20) }}>\r\n              <img src={errorIcon} alt=\"\" style={{ width: pX(30), margin: `${pX(20)}px 0` }} />\r\n              <p style={{ fontSize: px(17) }}>\r\n                Your email is not verified - please verify\r\n              </p>\r\n\r\n              <div className=\"modalbutton\" style={{ margin: `${pX(0)}px 0 ${pX(20)}px` }}>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false\r\n                    })\r\n                  }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  style={{ width: pX(120), fontSize: px(16), height: pX(35) }}\r\n\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  size='large'\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isLimit: false,\r\n                      spin: true\r\n                    })\r\n\r\n                    fetchRequest(`/user/sendActivateEmail/${this.state.email}`, \"GET\", \"\")\r\n                      .then(res => {\r\n                        console.log(res);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                        if (res.flag === true) {\r\n                          console.log('发送成功');\r\n                          const time = setTimeout(() => {\r\n                            message.success('The email has been sent, please follow the prompts')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        } else {\r\n                          console.log('发送失败');\r\n                          const time = setTimeout(() => {\r\n                            message.error('Failed to send mail')\r\n                            clearTimeout(time)\r\n                          }, 5);\r\n\r\n                        }\r\n                      })\r\n                      .catch(err => {\r\n                        console.log(err);\r\n                        this.setState({\r\n                          spin: false,\r\n                        })\r\n                      })\r\n                  }}\r\n                >\r\n                  Jump\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\editPetInfo\\EditPetInfo.jsx",["894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyWorkplace\\FindMyWorkplace.jsx",["916","917"],"import React, { Component } from 'react'\r\nimport {\r\n  Input, message\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport Button from '../../../utils/button/Button'\r\nimport './findMyWorkplace.less'\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nexport default class JoinworkplaceByName extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    listData: [],\r\n    searchData: [],\r\n    selectId: {}\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    fetchRequest(`/workplace/listAllWorkplaceByOrganizationId/${temporaryStorage.logupSelectOrganization.organizationId}`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            listData: res.data\r\n          })\r\n        } else {\r\n          console.log('请求错误');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n\r\n      return <li key={item.workplaceId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          let params = {\r\n            userId: temporaryStorage.logupSuccessData.userId,\r\n            roleId: 2,\r\n            workplaceId: item.workplaceId,\r\n            organizationId: item.organizationId\r\n          }\r\n          fetchRequest('/user/updateUserInfo', 'POST', params)\r\n            .then(res => {\r\n              console.log(res);\r\n              if (res.flag === true) {\r\n\r\n                console.log('成功',);\r\n                this._logIn()\r\n              }\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n              message.error(err.message, 3)\r\n            })\r\n        }}\r\n\r\n      >\r\n        {(this.state.selectId === item ? <span className=\"search\">&#xe614;</span> : null)}\r\n        {item.workplaceName}</li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  _logIn = () => {\r\n\r\n    let storage = window.localStorage;\r\n    let { email, hash } = temporaryStorage.logupVetInfo\r\n    let params = {\r\n      email: email.replace(/(^\\s*)/g, \"\"),\r\n      hash,\r\n      identityTypeId: '1'\r\n    }\r\n    fetchRequest('/user/mellaLogin', 'POST', params)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.status && res.status === 404) {\r\n          message.error('system error');\r\n          return\r\n        }\r\n        if (res.code === 10001 && res.msg === '账号错误') {\r\n          message.error('Account error');\r\n          return\r\n        }\r\n        if (res.code === 10002 && res.msg === '密码错误') {\r\n          message.error('wrong password')\r\n          return;\r\n        }\r\n        if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n          message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n          return\r\n        }\r\n\r\n        if (res.code === 0 && res.msg === 'success') {\r\n          console.log('账号密码正确，登录进去了');\r\n          let { userWorkplace, lastOrganization, token } = res.success\r\n          storage.token = token\r\n          storage.userId = ''\r\n\r\n          storage.userId = res.success.userId\r\n          storage.roleId = res.success.roleId\r\n\r\n          //每次登陆后清空宠物列表缓存的数据\r\n          storage.doctorList = ''\r\n          storage.defaultCurrent = ''\r\n          if (userWorkplace) {\r\n            storage.userWorkplace = JSON.stringify(userWorkplace)\r\n            let connectionKey = ''\r\n            const element = userWorkplace[0];\r\n            storage.lastOrganization = element.organizationEntity.organizationId\r\n            storage.lastWorkplaceId = element.workplaceEntity.workplaceId\r\n            if (element.organizationEntity.connectionKey) {\r\n              connectionKey = element.organizationEntity.connectionKey\r\n            }\r\n            if (element.roleId) {\r\n              console.log(element.roleId);\r\n              storage.roleId = element.roleId\r\n            }\r\n            if (userWorkplace.length === 1) {\r\n              this.props.history.push('/uesr/selectExam')\r\n\r\n            } else {\r\n              this.props.history.push('/page12')\r\n            }\r\n          } else {\r\n            storage.userWorkplace = ''\r\n            storage.connectionKey = ''\r\n            this.props.history.push('/uesr/selectExam')\r\n          }\r\n\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n  render () {\r\n    return (\r\n      <div id=\"findMyWorkplace\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.goBack()}\r\n        />\r\n        <div className=\"body\">\r\n          <div className=\"text\">Find my workplace</div>\r\n\r\n          <div className=\"searchBox\">\r\n            <div><MyIcon type='icon-sousuo' className=\"icon\" /></div>\r\n\r\n            <Input\r\n              placeholder=\"Please input workplace name\"\r\n              bordered={false}\r\n              allowClear={true}\r\n              value={this.state.search}\r\n              onChange={this._search}\r\n            />\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"list\">\r\n            {this._list()}\r\n          </div>\r\n          <Button\r\n            text={'My Workplace Isn`t Listed'}\r\n            textBoxStyle={{ marginTop: '50px' }}\r\n            onClick={() => {\r\n              this.props.history.push('/uesr/logUp/NewWorkplace')\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\inviteTeam\\InviteTeam.jsx",["918","919","920","921","922","923","924","925","926","927"],"import React, { Component, } from 'react'\r\nimport {\r\n    Tag,\r\n    Input,\r\n    Tooltip,\r\n    message,\r\n    // Button\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled, PlusOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './inviteTeam.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { mTop, px } from '../../../utils/px';\r\nimport Button from './../../../utils/button/Button'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\n\r\nexport default class InviteTeam extends Component {\r\n\r\n    state = {\r\n\r\n        tags: [],\r\n        inputVisible: false,\r\n        inputValue: '',\r\n        editInputIndex: -1,\r\n        editInputValue: '',\r\n        visible: false\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n\r\n        //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n        ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    }\r\n    componentWillUnmount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n    }\r\n    changeFenBianLv = (e) => {\r\n        console.log(e);\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n        this.setState({\r\n\r\n        })\r\n    }\r\n\r\n\r\n    handleClose = removedTag => {\r\n        const tags = this.state.tags.filter(tag => tag !== removedTag);\r\n        console.log(tags);\r\n        this.setState({ tags });\r\n    };\r\n\r\n    showInput = () => {\r\n        this.setState({ inputVisible: true }, () => this.input.focus());\r\n    };\r\n\r\n    handleInputChange = e => {\r\n        this.setState({ inputValue: e.target.value });\r\n    };\r\n\r\n    handleInputConfirm = () => {\r\n        const { inputValue } = this.state;\r\n        let { tags } = this.state;\r\n        if (inputValue && tags.indexOf(inputValue) === -1) {\r\n            console.log('输入的内容为：', inputValue);\r\n            message.destroy()\r\n            fetchRequest(`/user/checkUser/${inputValue}`, 'GET', '')\r\n                .then(res => {\r\n\r\n\r\n                    console.log('检测邮箱存不存在', res);\r\n\r\n                    if (res.code) {\r\n                        switch (res.code) {\r\n\r\n                            case 11011:\r\n                                console.log('邮箱存在，发送邮件');\r\n                                tags = [...tags, inputValue];\r\n                                console.log(tags);\r\n\r\n                                this.setState({\r\n                                    tags,\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n                            // case 11012:\r\n                            //     console.log('账号被限制、注册未激活状态');\r\n\r\n\r\n\r\n                            // case 11013:\r\n                            //     console.log('邮箱未被注册，跳出弹框询问是否前往注册');\r\n                            case 11014:\r\n                                console.log('邮箱被注销或者封停，跳出弹框询问是否前往注册');\r\n                                message.error('This mailbox was not found!', 3)\r\n                                this.setState({\r\n                                    inputVisible: false,\r\n                                    inputValue: '',\r\n                                });\r\n                                break;\r\n\r\n                        }\r\n                    } else {\r\n                        console.log('系统错误', res);\r\n                        message.error('system error')\r\n                        this.setState({\r\n                            spin: false\r\n                        })\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(err => {\r\n                    message.error(`Error:${err.message}`)\r\n                    console.log('检测邮箱号的接口出错了', err);\r\n                })\r\n\r\n\r\n        }\r\n\r\n    };\r\n\r\n\r\n    saveInputRef = input => {\r\n        this.input = input;\r\n    };\r\n\r\n    saveEditInputRef = input => {\r\n        this.editInput = input;\r\n    };\r\n\r\n    _next = () => {\r\n        message.destroy()\r\n        let { tags } = this.state\r\n        let { userId } = temporaryStorage.logupSuccessData\r\n        let { organizationId } = temporaryStorage.logupOrganization\r\n        console.log({ tags, userId, organizationId });\r\n        if (tags.length === 0) {\r\n            this._logIn()\r\n        }\r\n        this.setState({\r\n            visible: true\r\n        })\r\n        console.log('入参:', tags);\r\n        fetchRequest2(`/user/inviteUserByEmail/${userId}/${organizationId}`, \"POST\", tags)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag === true) {\r\n                    console.log('成功，跳转');\r\n                    message.success('Invitation successful', 3)\r\n                    this._logIn()\r\n                } else {\r\n                    this.setState({\r\n                        visible: false\r\n                    })\r\n                }\r\n\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n                message.error(err.message, 3)\r\n            })\r\n    }\r\n    _logIn = () => {\r\n\r\n        let storage = window.localStorage;\r\n        let { email, hash } = temporaryStorage.logupVetInfo\r\n        let params = {\r\n            email: email.replace(/(^\\s*)/g, \"\"),\r\n            hash,\r\n            identityTypeId: '1'\r\n        }\r\n        console.log('登录入参:', params);\r\n        fetchRequest('/user/mellaLogin', 'POST', params)\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                if (res.status && res.status === 404) {\r\n                    message.error('system error');\r\n                    return\r\n                }\r\n                if (res.code === 10001 && res.msg === '账号错误') {\r\n                    message.error('Account error');\r\n                    return\r\n                }\r\n                if (res.code === 10002 && res.msg === '密码错误') {\r\n                    message.error('wrong password')\r\n                    return;\r\n                }\r\n                if (res.code === 0 && res.msg === 'success' && res.success.roleId === 1) {\r\n                    message.error('You do not have the authority of a doctor, please contact the administrator or customer service', 10)\r\n                    return\r\n                }\r\n\r\n                if (res.code === 0 && res.msg === 'success') {\r\n                    console.log('账号密码正确，登录进去了');\r\n                    let { userWorkplace, lastOrganization, token } = res.success\r\n                    storage.token = token\r\n                    storage.userId = ''\r\n\r\n                    storage.userId = res.success.userId\r\n                    storage.roleId = res.success.roleId\r\n\r\n                    //每次登陆后清空宠物列表缓存的数据\r\n                    storage.doctorList = ''\r\n                    storage.defaultCurrent = ''\r\n\r\n\r\n\r\n\r\n                    if (userWorkplace) {\r\n                        storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                        let connectionKey = ''\r\n                        const element = userWorkplace[0];\r\n                        storage.lastOrganization = element.organizationEntity.organizationId\r\n                        storage.lastWorkplaceId = element.workplaceEntity.workplaceId\r\n                        if (element.organizationEntity.connectionKey) {\r\n                            connectionKey = element.organizationEntity.connectionKey\r\n                        }\r\n                        if (element.roleId) {\r\n                            console.log(element.roleId);\r\n                            storage.roleId = element.roleId\r\n                        }\r\n                        if (userWorkplace.length === 1) {\r\n                            this.props.history.push('/uesr/selectExam')\r\n\r\n                        } else {\r\n                            this.props.history.push('/page12')\r\n                        }\r\n                    } else {\r\n                        storage.userWorkplace = ''\r\n                        storage.connectionKey = ''\r\n                        this.props.history.push('/uesr/selectExam')\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    visible: false\r\n                })\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render () {\r\n        const { tags, inputVisible, inputValue, editInputIndex, editInputValue } = this.state;\r\n        // console.log('---', editInputIndex);\r\n        return (\r\n            <div id=\"inviteTeam\" >\r\n                {/* 关闭缩小 */}\r\n                <div className=\"heard\">\r\n                    <MaxMin\r\n                        onClick={() => { this.props.history.push('/') }}\r\n                        onClick1={() => this.props.history.goBack()}\r\n                    />\r\n                    <div className=\"text\">Invite your Team</div>\r\n\r\n                    <div className=\"addF\">\r\n                        <p>To:</p>\r\n                        <div className=\"add\">\r\n\r\n                            <>\r\n                                {tags.map((tag, index) => {\r\n                                    const isLongTag = tag.length > 25;  //标签里面的字符串的长度\r\n\r\n                                    const tagElem = (\r\n                                        <Tag\r\n                                            className=\"edit-tag\"\r\n                                            key={tag}\r\n                                            closable={true}\r\n                                            onClose={() => this.handleClose(tag)}\r\n                                        >\r\n                                            <span>\r\n                                                {isLongTag ? `${tag.slice(0, 25)}...` : tag}\r\n                                            </span>\r\n                                        </Tag>\r\n                                    );\r\n                                    return isLongTag ? (\r\n                                        <Tooltip title={tag} key={tag}>\r\n                                            {tagElem}\r\n                                        </Tooltip>\r\n                                    ) : (\r\n                                        tagElem\r\n                                    );\r\n                                })}\r\n                                {inputVisible && (\r\n                                    <Input\r\n                                        ref={this.saveInputRef}\r\n                                        type=\"text\"\r\n                                        size=\"small\"\r\n                                        className=\"tag-input\"\r\n                                        value={inputValue}\r\n                                        onChange={this.handleInputChange}\r\n                                        onBlur={this.handleInputConfirm}\r\n                                        onPressEnter={this.handleInputConfirm}\r\n                                    />\r\n                                )}\r\n                                {!inputVisible && (\r\n                                    <Tag className=\"site-tag-plus\" onClick={this.showInput}>\r\n                                        <PlusOutlined />Press Enter to add mailbox\r\n                                    </Tag>\r\n                                )}\r\n                            </>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"btn\"\r\n                    style={{ padding: `${px(40)}px 0` }}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._logIn}\r\n                        text={'Skip'}\r\n                    >\r\n                        Skip\r\n                    </Button>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"round\"\r\n                        size='large'\r\n                        htmlType=\"submit\"\r\n                        onClick={this._next}\r\n                        text={'Send'}\r\n                    >\r\n\r\n                    </Button>\r\n                </div>\r\n                <MyModal visible={this.state.visible} />\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\help\\Help.jsx",["928"],"import React, { Component } from 'react'\r\n\r\nimport Heard from './../../../utils/heard/Heard'\r\nimport using from './../../../assets/images/using.png'\r\nimport measuring from './../../../assets/images/measuring.png'\r\nimport unassigned from './../../../assets/images/unassigned.png'\r\nimport adding from './../../../assets/images/adding.png'\r\nimport email from './../../../assets/images/email.png'\r\nimport phone from './../../../assets/images/phone.png'\r\nimport './help.less'\r\nimport { px } from './../../../utils/px'\r\nlet storage = window.localStorage;\r\n\r\nexport default class Help extends Component {\r\n\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let list = [\r\n      {\r\n        img: using,\r\n        title: 'Using the app'\r\n      }, {\r\n        img: measuring,\r\n        title: 'Measuring with Mella'\r\n      }, {\r\n        img: unassigned,\r\n        title: 'Unassigned Readings'\r\n      },\r\n      {\r\n        img: adding,\r\n        title: 'Adding New Users'\r\n      },\r\n    ]\r\n    let num = 150 / list.length\r\n    let mar = num + 'px'\r\n    return (\r\n      <div id=\"help\">\r\n        <div className=\"heard\">\r\n          <Heard\r\n            menu8Click={() => {\r\n              switch (storage.identity) {\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"title\">How can we help you?</div>\r\n          <div className=\"input\" style={{ marginTop: px(25) }}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe you issue     &#xe63f;\"\r\n\r\n            />\r\n          </div>\r\n\r\n          <div className=\"list\" style={{ marginTop: px(50) }}>\r\n            <ul>\r\n              {list.map((data, index) => (\r\n                <li key={index}\r\n                  style={{ width: px(150), height: px(150) }}\r\n                >\r\n\r\n                  <>\r\n                    <img src={data.img} alt=\"\" style={{ height: px(80) }} />\r\n                    <p style={{ fontSize: px(19) }}>{data.title}</p>\r\n                  </>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n\r\n          <div className=\"popularArticles\" style={{ marginTop: px(80) }}>\r\n            <div className=\"text\">Popular Articles</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n          <div className=\"popularArticles tutorials\">\r\n            <div className=\"text\">Tutorials</div>\r\n            <span className=\" iconfont  icon-jiantou3 dropDown\" />\r\n          </div>\r\n\r\n          <div className=\"time\" style={{ marginTop: px(40) }}>\r\n            <p style={{ fontSize: px(30) }}>Still need help?</p>\r\n            <div className=\"line\" style={{ height: px(6) }}></div>\r\n            <p style={{ fontSize: px(30) }}>Monday - Friday: 9am - 5pm (ET)</p>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"l\">\r\n            <img src={email} alt=\"\" style={{ height: px(50) }} />\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>Drop us a line</div>\r\n            <a href=\"mailto:support@mella.ai\"\r\n              style={{ fontSize: px(18) }}\r\n              onClick={(e) => {\r\n                // e.preventDefault();\r\n                // let electron = window.electron\r\n                // electron.shell.openExternal(' https://www.mella.ai/')\r\n                // return false;\r\n              }}\r\n            >support@mella.ai</a>\r\n          </div>\r\n\r\n          <div className=\"l r\">\r\n            <img src={phone} alt=\"\" style={{ height: px(50) }} />\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>Bark at Us!</div>\r\n            <div className=\"text\" style={{ fontSize: px(18) }}>201.977.6411</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\petAndParents\\PetAndParents.jsx",["929","930","931","932","933","934","935","936","937","938","939","940"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from '../../../utils/button/Button'\r\nimport electronStore from '../../../utils/electronStore'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport parent from './../../../assets/img/parent.png'\r\nimport dog from '../../../assets/images/reddog.png'\r\nimport cat from '../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport moment from 'moment'\r\nimport './petAndParents.less'\r\nimport { parseGeoJSON } from 'echarts'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class PetAndParents extends Component {\r\n\r\n  state = {\r\n    parentList: [],       //宠物主人列表\r\n    petList: [],          //宠物列表\r\n    loading: false,       //加载中\r\n    parentSearchArr: [],  //搜索后的宠物主人列表\r\n    petSearchArr: [],     //搜索后的宠物列表\r\n    searchText: '',        //搜索文本\r\n    parentAndPetList: [],  //宠物主人下的所有宠物,\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      offset: 0,\r\n      size: 500,\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    fetchRequest(`/petall/pet/${storage.lastOrganization}/petall`, 'POST', params)\r\n      .then(res => {\r\n        console.log('查询到的宠物列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = []\r\n          let list = res.data.list\r\n          let owerList = []\r\n          let parentAndPetList = []\r\n          for (let i = 0; i < list.length; i++) {\r\n            let { url, patientId, speciesId, petName, petId, rfid, createTime, userId, firstName, lastName, phone, email, userImageUrl, birthday, breedName, gender } = list[i]\r\n            petName = petName ? petName : (patientId ? patientId : 'unknown')\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: petName,\r\n              petId,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              type: 'pet',\r\n              patientId,\r\n              petBirthday: birthday,\r\n              breedName,\r\n              gender\r\n            }\r\n            data.push(json)\r\n            if (userId) {\r\n              let flogNum = -1\r\n\r\n              for (let i = 0; i < owerList.length; i++) {\r\n                let ower = owerList[i]\r\n                if (ower.userId === userId) {\r\n                  flogNum = i\r\n                  break;\r\n                }\r\n\r\n              }\r\n              if (flogNum === -1) {     //这是一个不在数组里的宠物主人\r\n                let owerJson = {\r\n                  userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n                }\r\n                owerList.push(owerJson)\r\n                let parentAndPetJson = {\r\n                  parent: owerJson,\r\n                  pets: [json]\r\n                }\r\n                // console.log('-----', parentAndPetJson);\r\n                parentAndPetList.push(parentAndPetJson)\r\n              } else {\r\n                parentAndPetList[flogNum].pets.push(json)\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            // if (userId) {\r\n            //   let sameFlog = owerList.some((ower => {\r\n            //     return ower.userId === userId\r\n            //   }))\r\n            //   if (!sameFlog) {\r\n            //     let owerJson = {\r\n            //       userId, firstName, lastName, phone, email, userImageUrl, name: `${lastName} ${firstName}`\r\n            //     }\r\n            //     owerList.push(owerJson)\r\n            //   }\r\n            // }\r\n          }\r\n          // console.log(parentAndPetList);\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            petList: data,\r\n            parentList: owerList,\r\n            parentAndPetList\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = (value) => {\r\n    let { petList, parentList, petSearchArr, parentSearchArr, searchText, parentAndPetList } = this.state\r\n    let data = []\r\n    if (value === 'parent') {\r\n      if (searchText.length > 0) {\r\n        data = parentSearchArr\r\n      } else {\r\n        data = parentList\r\n      }\r\n    } else {\r\n      if (searchText.length > 0) {\r\n        data = petSearchArr\r\n      } else {\r\n        data = petList\r\n      }\r\n    }\r\n\r\n    let options = data.map((item, index) => {\r\n      let { speciesId, url, userImageUrl, patientId, petId, name } = item\r\n      let images = null\r\n      if (value === 'parent') {\r\n        images = `url(${userImageUrl}?download=0&width=150)`\r\n        if (!userImageUrl) {\r\n          images = `url(${parent})`\r\n        }\r\n      } else {\r\n        images = `url(${url}?download=0&width=150)`\r\n        if (!url) {\r\n          switch (speciesId) {\r\n            case 1: images = `url(${cat})`\r\n              break;\r\n            case 2: images = `url(${dog})`\r\n              break\r\n            default: images = `url(${other})`\r\n              break;\r\n          }\r\n        }\r\n      }\r\n\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20) }}\r\n          onClick={() => {\r\n            if (item.type !== 'pet') {\r\n              // console.log('跳转到宠物用户详情页', item,);\r\n              let params = []\r\n              for (let i = 0; i < parentAndPetList.length; i++) {\r\n                if (item.userId === parentAndPetList[i].parent.userId) {\r\n\r\n                  params = parentAndPetList[i]\r\n                  break\r\n                }\r\n\r\n              }\r\n\r\n\r\n              this.props.history.push({ pathname: '/menuOptions/editParent', parent: params })\r\n            } else {\r\n              console.log(item);\r\n              this.props.history.push({ pathname: '/page9', participate: { patientId, petName: name, petId } })\r\n\r\n            }\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 6) {\r\n      liStyle = { height: px(560), overflowY: 'auto' }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { parentList, petList } = this.state\r\n    console.log(parentList, petList);\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n    for (let i = 0; i < parentList.length; i++) {\r\n      let petName = parentList[i].name.toLowerCase() || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1) {\r\n        parentSearchData.push(parentList[i])\r\n      }\r\n    }\r\n\r\n    let petSearchData = []\r\n    for (let i = 0; i < petList.length; i++) {\r\n      let petName = petList[i].name ? petList[i].name.toLowerCase() : ''\r\n      let patientId = petList[i].patientId ? petList[i].patientId.toLowerCase() : ''\r\n      let rfid = petList[i].rfid ? petList[i].rfid : ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        petSearchData.push(petList[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      petSearchArr: petSearchData,\r\n      parentSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"PetAndParents\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n            onSearch={(data) => {\r\n\r\n              storage.doctorExam = JSON.stringify(data)\r\n\r\n              storage.doctorList = JSON.stringify(this.state.data)\r\n              if (storage.isClinical === 'true') {\r\n                this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n              } else {\r\n                this.props.history.push({ pathname: '/page10', })\r\n              }\r\n            }}\r\n            menu8Click={() => {\r\n              console.log('--', storage.identity, storage.doctorList);\r\n              switch (storage.identity) {\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <h1 style={{ fontSize: px(38) }}>{`Pet & Parents Profile Management`}</h1>\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n          <div className=\"btns\">\r\n            <div className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}>\r\n              + New Parent\r\n            </div>\r\n            <div\r\n              className=\"btnL\" style={{ fontSize: px(24), height: px(45) }}\r\n              onClick={() => {\r\n                this.props.history.push('/pet/doctorAddPet')\r\n              }}\r\n\r\n            >\r\n              + New Pet\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"lists\">\r\n            <div className=\"listsL\">\r\n              {this.list('parent')}\r\n            </div>\r\n\r\n            <div className=\"listsL\">\r\n              {this.list('pet')}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\orgAndPractice\\NewOrganization.jsx",["941"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n  Select,\r\n  Modal,\r\n  message\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { CaretDownFilled } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './newOrganization.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport countryList from './../../../utils/areaCode/country';\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { px } from './../../../utils/px'\r\nimport MyModal from '../../../utils/myModal/MyModal';\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\nexport default class NewOrg extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    phone: '',\r\n    organizationName: '',\r\n    practiceName: '',\r\n    address: '',\r\n    country: 'US',\r\n    city: '',\r\n    state: '',\r\n    zipcode: '',\r\n    address1: '',\r\n    address2: '',\r\n    workplaceTypeId: 1,\r\n    email: '',\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    countryArr: []\r\n\r\n\r\n\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    let arr = countryList.map(item => item.locale)\r\n    arr.sort(function (a, b) {\r\n      return a.localeCompare(b)\r\n    })\r\n    this.setState({\r\n      countryArr: arr\r\n    })\r\n\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n\r\n  _next = () => {\r\n    let { organizationName, practiceName, workplaceTypeId, code, phone, country, city, state, address1, address2, zipcode, email } = this.state\r\n    console.log({ organizationName, practiceName, workplaceTypeId, code, phone, country, city, state, address1, address2, zipcode });\r\n    message.destroy()\r\n    if (!organizationName) {\r\n      message.error('Please enter an organization name', 3)\r\n      return;\r\n    }\r\n    if (!practiceName) {\r\n      message.error('Please enter an Practice name', 3)\r\n      return;\r\n    }\r\n    // if (!phone) {\r\n    //   message.error('Please enter the phone number', 3)\r\n    //   return;\r\n    // }\r\n    if (!country) {\r\n      message.error('Please enter country name', 3)\r\n      return;\r\n    }\r\n    if (!city) {\r\n      message.error('Please enter the city name', 3)\r\n      return;\r\n    }\r\n    if (!address1) {\r\n      message.error('Please enter address1', 3)\r\n      return;\r\n    }\r\n    // if (!address2) {\r\n    //   message.error('Please enter address2', 3)\r\n    //   return;\r\n    // }\r\n    if (!zipcode) {\r\n      message.error('Please enter the postal code', 3)\r\n      return;\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the contact email', 3)\r\n      return;\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    zipcode = parseInt(zipcode)\r\n\r\n    let params = {\r\n      name: organizationName,\r\n      workplaceName: practiceName,\r\n      workplaceTypeId,\r\n      address1,\r\n      address2,\r\n      // phone: `+${code}${phone}`,\r\n      country,\r\n      city,\r\n      state,\r\n      zipcode,\r\n      email\r\n    }\r\n    if (phone) {\r\n      params.phone = `+${code}${phone}`\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n\r\n    console.log('入参信息：', params, storage.userId);\r\n    fetchRequest(`/organization/addOrganization/${storage.userId}`, \"POST\", params)\r\n\r\n      .then(res => {\r\n        console.log('添加组织返回的信息', res);\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        if (res.flag === true) {\r\n          if (res.code === 11030) {\r\n            this.setState({ visible: true })\r\n          }\r\n          if (res.code === 20000) {\r\n            console.log('添加成功，跳转');\r\n            this.props.history.push('/menuOptions/Team')\r\n          }\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('添加组织接口失败', err);\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(err.message, 3)\r\n      })\r\n  }\r\n\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n\r\n  render () {\r\n\r\n    let { disabled, visible, bounds, address1, address2, phone, organizationName, practiceName, city, state, zipcode, workplaceTypeId, email } = this.state\r\n    return (\r\n      <div id=\"newOraganization\" >\r\n        <div className=\"heard\">\r\n          {/* 关闭缩小 */}\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => { console.log('fanhui'); this.props.history.goBack() }}\r\n          />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"bodyHeard\">\r\n            <div className=\"text\">New Organization and Practice</div>\r\n            <div className=\"text1\" style={{ marginTop: px(10) }}>Tell us more about the place you will be using Mella!</div>\r\n\r\n          </div>\r\n\r\n          <div className=\"form\">\r\n            <div className=\"item\" style={{ marginTop: px(40) }}>\r\n              <div className=\"l\">\r\n                <p>Organization Name*</p>\r\n                <input\r\n                  type=\"text\"\r\n                  value={organizationName}\r\n                  placeholder={'Organization Name'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      organizationName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n            <div className=\"item\" style={{ marginTop: px(40) }}>\r\n              <div className=\"l\">\r\n                <p>Practice Name*</p>\r\n                <input\r\n                  type=\"text\"\r\n                  value={practiceName}\r\n                  placeholder={'Practice Name'}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      practiceName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n\r\n\r\n              <div className=\"l\">\r\n                <p>Contact Email*</p>\r\n                <input\r\n                  type=\"Email\"\r\n                  value={email}\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      email: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ marginTop: px(40) }}>\r\n\r\n              <div className=\"l\">\r\n                <p>Type of Practice*</p>\r\n                <div className=\"select\" >\r\n                  <Select\r\n                    value={workplaceTypeId}\r\n                    style={{ width: '100%', borderRadius: '100px' }}\r\n                    onChange={(value) => { this.setState({ workplaceTypeId: value }) }}\r\n                  >\r\n                    <Option value={1}>practice </Option>\r\n                    <Option value={2}>clinic </Option>\r\n                    <Option value={3}>shelter</Option>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"l\">\r\n                <ul id=\"list\" style={{ top: -px(90), left: px(10) }}>\r\n                  {countryList.map((item, index) => {\r\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                    return (\r\n                      <li key={index}>\r\n                        <div key={index}\r\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                          onClick={() => {\r\n                            console.log(item, index);\r\n                            this.setState({\r\n                              code: item.code,\r\n                              imgArrayIndex: index\r\n                            })\r\n                            document.getElementById('list').style.display = \"none\"\r\n                          }}\r\n                        >\r\n                          <img src={url} alt=\"\" />\r\n                          <p >{`${item.en}   +${item.code}`}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n\r\n                <p>Contact Number*</p>\r\n                <div className='phone'>\r\n                  <div\r\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                    onClick={() => {\r\n                      document.getElementById('list').style.display = \"block\"\r\n                    }}\r\n                  >\r\n                    <img style={{ zIndex: '888' }}\r\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                    />\r\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                  </div>\r\n\r\n\r\n                  <input\r\n                    type=\"Phone\"\r\n                    value={phone}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        phone: data.replace(/[^\\-?\\d]/g, '')\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n            <div className=\"item\" style={{ marginTop: px(40) }}>\r\n              <div className=\"l\">\r\n                <p>Address*</p>\r\n                <div className=\"inputs\">\r\n                  <input\r\n                    type=\"text\"\r\n                    value={address1}\r\n                    placeholder={'address1'}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        address1: data\r\n                      })\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    value={address2}\r\n                    placeholder={'address2'}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        address2: data\r\n                      })\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    value={city}\r\n                    placeholder={'city'}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        city: data\r\n                      })\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    value={state}\r\n                    placeholder={'state'}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        state: data\r\n                      })\r\n                    }}\r\n                  />\r\n                  <input\r\n                    type=\"text\"\r\n                    value={zipcode}\r\n                    placeholder={'zipcode'}\r\n                    onChange={(value) => {\r\n                      let data = value.target.value.replace(/\\D/g, '')\r\n                      this.setState({\r\n                        zipcode: data\r\n                      })\r\n                    }}\r\n                  />\r\n\r\n                  <Select\r\n                    // showSearch\r\n                    style={{ width: 100, borderBottom: '1px solid rgba(216,216,216,1)' }}\r\n                    bordered={false}\r\n                    optionFilterProp=\"children\"\r\n                    defaultValue=\"US\"\r\n                    onSelect={(val) => {\r\n                      console.log('选择的国家：', val);\r\n                      this.setState({\r\n                        country: val\r\n                      })\r\n                    }}\r\n                  >\r\n                    {this.state.countryArr.map((item, index) => (\r\n                      <Option key={index} value={item}>{item}</Option>\r\n                    ))}\r\n                  </Select>\r\n\r\n\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\" style={{ height: px(120) }}>\r\n          {/* 按钮 */}\r\n          <div className=\"btn\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <Modal\r\n          title={\r\n            <div\r\n              style={{\r\n                width: '100%',\r\n                cursor: 'move',\r\n                height: '20px',\r\n                fontWeight: '700'\r\n              }}\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false\r\n                })\r\n              }}\r\n            >\r\n              remind\r\n            </div>\r\n          }\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          footer={[\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false,\r\n                  organizationName: ''\r\n                })\r\n              }}\r\n            >Cancel</button>,\r\n            <button\r\n              style={{ width: '110px', height: '40px', border: 0, backgroundColor: '#E1206D', color: '#fff', borderRadius: '60px', fontSize: '18px' }}\r\n              onClick={() => {\r\n                this.setState({\r\n                  visible: false\r\n                })\r\n                this.props.history.replace('/uesr/logUp/JoinOrganizationByOption')\r\n              }}\r\n            >Join</button>\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n        >\r\n          <div id='vetPrifileModal'>\r\n\r\n            <p>This organization has already been registered, do you want to join?</p>\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n        <MyModal\r\n          visible={this.state.loadVisible}\r\n        />\r\n\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}",["942","943"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\gender.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\myModal\\MyModal.jsx",["944","945"],"\r\n/**\r\n * \r\n * @param {boolean} visible 控制modal框是否显示\r\n * @param {element} element 自定义modal框里面的内容，默认是组件是加载中。。。\r\n * @returns {element} 这是自己写的一个modal框\r\n */\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport './myModal.less'\r\nimport { px, pX, MTop, mTop } from '../px'\r\n\r\nclass MyModal extends Component {\r\n\r\n  render () {\r\n    let { visible, element, text } = this.props\r\n    // console.log('---上层组件传来的值---', this.props);\r\n\r\n    if (visible) {\r\n      let body = element ? element :\r\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n          <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n            <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n          </div>\r\n          <p>\r\n            {text ? text : 'loading...'}\r\n          </p>\r\n        </div>\r\n      return (\r\n        <div className=\"myModal\">\r\n          {body}\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null)\r\n    }\r\n\r\n  }\r\n}\r\n\r\nMyModal.propTypes = {\r\n  visible: PropTypes.bool,\r\n  element: PropTypes.element,\r\n  text: PropTypes.string\r\n\r\n}\r\nMyModal.defaultProps = {\r\n  visible: false,\r\n  text: 'loading...'\r\n}\r\n\r\nexport default MyModal","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\areaCode\\imgArray.js",["946"],"export default {\r\n  ac: require('./countryFlag/flag_ac.png'),\r\n  ad: require('./countryFlag/flag_ad.png'),\r\n  ae: require('./countryFlag/flag_ae.png'),\r\n  af: require('./countryFlag/flag_af.png'),\r\n  ag: require('./countryFlag/flag_ag.png'),\r\n  ai: require('./countryFlag/flag_ai.png'),\r\n  al: require('./countryFlag/flag_al.png'),\r\n  am: require('./countryFlag/flag_am.png'),\r\n  an: require('./countryFlag/flag_an.png'),\r\n  ao: require('./countryFlag/flag_ao.png'),\r\n  aq: require('./countryFlag/flag_aq.png'),\r\n  ar: require('./countryFlag/flag_ar.png'),\r\n  as: require('./countryFlag/flag_as.png'),\r\n  at: require('./countryFlag/flag_at.png'),\r\n  au: require('./countryFlag/flag_au.png'),\r\n  aw: require('./countryFlag/flag_aw.png'),\r\n  ax: require('./countryFlag/flag_ax.png'),\r\n  az: require('./countryFlag/flag_az.png'),\r\n  ba: require('./countryFlag/flag_ba.png'),\r\n  bb: require('./countryFlag/flag_bb.png'),\r\n  bd: require('./countryFlag/flag_bd.png'),\r\n  be: require('./countryFlag/flag_be.png'),\r\n  bf: require('./countryFlag/flag_bf.png'),\r\n  bg: require('./countryFlag/flag_bg.png'),\r\n  bh: require('./countryFlag/flag_bh.png'),\r\n  bi: require('./countryFlag/flag_bi.png'),\r\n  bj: require('./countryFlag/flag_bj.png'),\r\n  bl: require('./countryFlag/flag_bl.png'),\r\n  bm: require('./countryFlag/flag_bm.png'),\r\n  bn: require('./countryFlag/flag_bn.png'),\r\n  bo: require('./countryFlag/flag_bo.png'),\r\n  bq: require('./countryFlag/flag_bq.png'),\r\n  br: require('./countryFlag/flag_br.png'),\r\n  bs: require('./countryFlag/flag_bs.png'),\r\n  bt: require('./countryFlag/flag_bt.png'),\r\n  bv: require('./countryFlag/flag_bv.png'),\r\n  bw: require('./countryFlag/flag_bw.png'),\r\n  by: require('./countryFlag/flag_by.png'),\r\n  bz: require('./countryFlag/flag_bz.png'),\r\n  ca: require('./countryFlag/flag_ca.png'),\r\n  cc: require('./countryFlag/flag_cc.png'),\r\n  cd: require('./countryFlag/flag_cd.png'),\r\n  cf: require('./countryFlag/flag_cf.png'),\r\n  cg: require('./countryFlag/flag_cg.png'),\r\n  ch: require('./countryFlag/flag_ch.png'),\r\n  ci: require('./countryFlag/flag_ci.png'),\r\n  ck: require('./countryFlag/flag_ck.png'),\r\n  cl: require('./countryFlag/flag_cl.png'),\r\n  cm: require('./countryFlag/flag_cm.png'),\r\n  cn: require('./countryFlag/flag_cn.png'),\r\n  co: require('./countryFlag/flag_co.png'),\r\n  cr: require('./countryFlag/flag_cr.png'),\r\n  cu: require('./countryFlag/flag_cu.png'),\r\n  cv: require('./countryFlag/flag_cv.png'),\r\n  cw: require('./countryFlag/flag_cw.png'),\r\n  cx: require('./countryFlag/flag_cx.png'),\r\n  cy: require('./countryFlag/flag_cy.png'),\r\n  cz: require('./countryFlag/flag_cz.png'),\r\n  de: require('./countryFlag/flag_de.png'),\r\n  dj: require('./countryFlag/flag_dj.png'),\r\n  dk: require('./countryFlag/flag_dk.png'),\r\n  dm: require('./countryFlag/flag_dm.png'),\r\n  do: require('./countryFlag/flag_do.png'),\r\n  dz: require('./countryFlag/flag_dz.png'),\r\n  ec: require('./countryFlag/flag_ec.png'),\r\n  ee: require('./countryFlag/flag_ee.png'),\r\n  eg: require('./countryFlag/flag_eg.png'),\r\n  eh: require('./countryFlag/flag_eh.png'),\r\n  er: require('./countryFlag/flag_er.png'),\r\n  es: require('./countryFlag/flag_es.png'),\r\n  et: require('./countryFlag/flag_et.png'),\r\n  fi: require('./countryFlag/flag_fi.png'),\r\n  fj: require('./countryFlag/flag_fj.png'),\r\n  fk: require('./countryFlag/flag_fk.png'),\r\n  fm: require('./countryFlag/flag_fm.png'),\r\n  fo: require('./countryFlag/flag_fo.png'),\r\n  fr: require('./countryFlag/flag_fr.png'),\r\n  fx: require('./countryFlag/flag_fx.png'),\r\n  ga: require('./countryFlag/flag_ga.png'),\r\n  gb: require('./countryFlag/flag_gb.png'),\r\n  gd: require('./countryFlag/flag_gd.png'),\r\n  ge: require('./countryFlag/flag_ge.png'),\r\n  gf: require('./countryFlag/flag_gf.png'),\r\n  gg: require('./countryFlag/flag_gg.png'),\r\n  gh: require('./countryFlag/flag_gh.png'),\r\n  gi: require('./countryFlag/flag_gi.png'),\r\n  gl: require('./countryFlag/flag_gl.png'),\r\n  gm: require('./countryFlag/flag_gm.png'),\r\n  gn: require('./countryFlag/flag_gn.png'),\r\n  gp: require('./countryFlag/flag_gp.png'),\r\n  gq: require('./countryFlag/flag_gq.png'),\r\n  gr: require('./countryFlag/flag_gr.png'),\r\n  gs: require('./countryFlag/flag_gs.png'),\r\n  gt: require('./countryFlag/flag_gt.png'),\r\n  gu: require('./countryFlag/flag_gu.png'),\r\n  gw: require('./countryFlag/flag_gw.png'),\r\n  gy: require('./countryFlag/flag_gy.png'),\r\n  hk: require('./countryFlag/flag_hk.png'),\r\n  hm: require('./countryFlag/flag_hm.png'),\r\n  hn: require('./countryFlag/flag_hn.png'),\r\n  hr: require('./countryFlag/flag_hr.png'),\r\n  ht: require('./countryFlag/flag_ht.png'),\r\n  hu: require('./countryFlag/flag_hu.png'),\r\n  id: require('./countryFlag/flag_id.png'),\r\n  ie: require('./countryFlag/flag_ie.png'),\r\n  il: require('./countryFlag/flag_il.png'),\r\n  im: require('./countryFlag/flag_im.png'),\r\n  in: require('./countryFlag/flag_in.png'),\r\n  io: require('./countryFlag/flag_io.png'),\r\n  iq: require('./countryFlag/flag_iq.png'),\r\n  ir: require('./countryFlag/flag_ir.png'),\r\n  is: require('./countryFlag/flag_is.png'),\r\n  it: require('./countryFlag/flag_it.png'),\r\n  je: require('./countryFlag/flag_je.png'),\r\n  jm: require('./countryFlag/flag_jm.png'),\r\n  jo: require('./countryFlag/flag_jo.png'),\r\n  jp: require('./countryFlag/flag_jp.png'),\r\n  ke: require('./countryFlag/flag_ke.png'),\r\n  kg: require('./countryFlag/flag_kg.png'),\r\n  kh: require('./countryFlag/flag_kh.png'),\r\n  ki: require('./countryFlag/flag_ki.png'),\r\n  km: require('./countryFlag/flag_km.png'),\r\n  kn: require('./countryFlag/flag_kn.png'),\r\n  kp: require('./countryFlag/flag_kp.png'),\r\n  kr: require('./countryFlag/flag_kr.png'),\r\n  kw: require('./countryFlag/flag_kw.png'),\r\n  ky: require('./countryFlag/flag_ky.png'),\r\n  kz: require('./countryFlag/flag_kz.png'),\r\n  la: require('./countryFlag/flag_la.png'),\r\n  lb: require('./countryFlag/flag_lb.png'),\r\n  lc: require('./countryFlag/flag_lc.png'),\r\n  li: require('./countryFlag/flag_li.png'),\r\n  lk: require('./countryFlag/flag_lk.png'),\r\n  lr: require('./countryFlag/flag_lr.png'),\r\n  ls: require('./countryFlag/flag_ls.png'),\r\n  lt: require('./countryFlag/flag_lt.png'),\r\n  lu: require('./countryFlag/flag_lu.png'),\r\n  lv: require('./countryFlag/flag_lv.png'),\r\n  ly: require('./countryFlag/flag_ly.png'),\r\n  ma: require('./countryFlag/flag_ma.png'),\r\n  mc: require('./countryFlag/flag_mc.png'),\r\n  md: require('./countryFlag/flag_md.png'),\r\n  me: require('./countryFlag/flag_me.png'),\r\n  mf: require('./countryFlag/flag_mf.png'),\r\n  mg: require('./countryFlag/flag_mg.png'),\r\n  mh: require('./countryFlag/flag_mh.png'),\r\n  mk: require('./countryFlag/flag_mk.png'),\r\n  ml: require('./countryFlag/flag_ml.png'),\r\n  mm: require('./countryFlag/flag_mm.png'),\r\n  mn: require('./countryFlag/flag_mn.png'),\r\n  mo: require('./countryFlag/flag_mo.png'),\r\n  mp: require('./countryFlag/flag_mp.png'),\r\n  mq: require('./countryFlag/flag_mq.png'),\r\n  mr: require('./countryFlag/flag_mr.png'),\r\n  ms: require('./countryFlag/flag_ms.png'),\r\n  mt: require('./countryFlag/flag_mt.png'),\r\n  mu: require('./countryFlag/flag_mu.png'),\r\n  mv: require('./countryFlag/flag_mv.png'),\r\n  mw: require('./countryFlag/flag_mw.png'),\r\n  mx: require('./countryFlag/flag_mx.png'),\r\n  my: require('./countryFlag/flag_my.png'),\r\n  mz: require('./countryFlag/flag_mz.png'),\r\n  na: require('./countryFlag/flag_na.png'),\r\n  nc: require('./countryFlag/flag_nc.png'),\r\n  ne: require('./countryFlag/flag_ne.png'),\r\n  nf: require('./countryFlag/flag_nf.png'),\r\n  ng: require('./countryFlag/flag_ng.png'),\r\n  ni: require('./countryFlag/flag_ni.png'),\r\n  nl: require('./countryFlag/flag_nl.png'),\r\n  no: require('./countryFlag/flag_no.png'),\r\n  np: require('./countryFlag/flag_np.png'),\r\n  nr: require('./countryFlag/flag_nr.png'),\r\n  nu: require('./countryFlag/flag_nu.png'),\r\n  nz: require('./countryFlag/flag_nz.png'),\r\n  om: require('./countryFlag/flag_om.png'),\r\n  pa: require('./countryFlag/flag_pa.png'),\r\n  pe: require('./countryFlag/flag_pe.png'),\r\n  pf: require('./countryFlag/flag_pf.png'),\r\n  pg: require('./countryFlag/flag_pg.png'),\r\n  ph: require('./countryFlag/flag_ph.png'),\r\n  pk: require('./countryFlag/flag_pk.png'),\r\n  pl: require('./countryFlag/flag_pl.png'),\r\n  pm: require('./countryFlag/flag_pm.png'),\r\n  pn: require('./countryFlag/flag_pn.png'),\r\n  pr: require('./countryFlag/flag_pr.png'),\r\n  ps: require('./countryFlag/flag_ps.png'),\r\n  pt: require('./countryFlag/flag_pt.png'),\r\n  pw: require('./countryFlag/flag_pw.png'),\r\n  py: require('./countryFlag/flag_py.png'),\r\n  qa: require('./countryFlag/flag_qa.png'),\r\n  re: require('./countryFlag/flag_re.png'),\r\n  ro: require('./countryFlag/flag_ro.png'),\r\n  rs: require('./countryFlag/flag_rs.png'),\r\n  ru: require('./countryFlag/flag_ru.png'),\r\n  rw: require('./countryFlag/flag_rw.png'),\r\n  sa: require('./countryFlag/flag_sa.png'),\r\n  sb: require('./countryFlag/flag_sb.png'),\r\n  sc: require('./countryFlag/flag_sc.png'),\r\n  sd: require('./countryFlag/flag_sd.png'),\r\n  se: require('./countryFlag/flag_se.png'),\r\n  sg: require('./countryFlag/flag_sg.png'),\r\n  sh: require('./countryFlag/flag_sh.png'),\r\n  si: require('./countryFlag/flag_si.png'),\r\n  sj: require('./countryFlag/flag_sj.png'),\r\n  sk: require('./countryFlag/flag_sk.png'),\r\n  sl: require('./countryFlag/flag_sl.png'),\r\n  sm: require('./countryFlag/flag_sm.png'),\r\n  sn: require('./countryFlag/flag_sn.png'),\r\n  so: require('./countryFlag/flag_so.png'),\r\n  sr: require('./countryFlag/flag_sr.png'),\r\n  ss: require('./countryFlag/flag_ss.png'),\r\n  st: require('./countryFlag/flag_st.png'),\r\n  sv: require('./countryFlag/flag_sv.png'),\r\n  sx: require('./countryFlag/flag_sx.png'),\r\n  sy: require('./countryFlag/flag_sy.png'),\r\n  sz: require('./countryFlag/flag_sz.png'),\r\n  tc: require('./countryFlag/flag_tc.png'),\r\n  td: require('./countryFlag/flag_td.png'),\r\n  tf: require('./countryFlag/flag_tf.png'),\r\n  tg: require('./countryFlag/flag_tg.png'),\r\n  th: require('./countryFlag/flag_th.png'),\r\n  tj: require('./countryFlag/flag_tj.png'),\r\n  tk: require('./countryFlag/flag_tk.png'),\r\n  tl: require('./countryFlag/flag_tl.png'),\r\n  tm: require('./countryFlag/flag_tm.png'),\r\n  tn: require('./countryFlag/flag_tn.png'),\r\n  to: require('./countryFlag/flag_to.png'),\r\n  tr: require('./countryFlag/flag_tr.png'),\r\n  tt: require('./countryFlag/flag_tt.png'),\r\n  tv: require('./countryFlag/flag_tv.png'),\r\n  tw: require('./countryFlag/flag_tw.png'),\r\n  tz: require('./countryFlag/flag_tz.png'),\r\n  ua: require('./countryFlag/flag_ua.png'),\r\n  ug: require('./countryFlag/flag_ug.png'),\r\n  um: require('./countryFlag/flag_um.png'),\r\n  us: require('./countryFlag/flag_us.png'),\r\n  uy: require('./countryFlag/flag_uy.png'),\r\n  uz: require('./countryFlag/flag_uz.png'),\r\n  va: require('./countryFlag/flag_va.png'),\r\n  vc: require('./countryFlag/flag_vc.png'),\r\n  ve: require('./countryFlag/flag_ve.png'),\r\n  vg: require('./countryFlag/flag_vg.png'),\r\n  vi: require('./countryFlag/flag_vi.png'),\r\n  vn: require('./countryFlag/flag_vn.png'),\r\n  vu: require('./countryFlag/flag_vu.png'),\r\n  wf: require('./countryFlag/flag_wf.png'),\r\n  ws: require('./countryFlag/flag_ws.png'),\r\n  xk: require('./countryFlag/flag_xk.png'),\r\n  ye: require('./countryFlag/flag_ye.png'),\r\n  yt: require('./countryFlag/flag_yt.png'),\r\n  yu: require('./countryFlag/flag_yu.png'),\r\n  za: require('./countryFlag/flag_za.png'),\r\n  zm: require('./countryFlag/flag_zm.png'),\r\n  zw: require('./countryFlag/flag_zw.png'),\r\n};\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardAndPetsUI.jsx",["947","948","949","950"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { px } from '../../utils/px'\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport xia from './../../assets/img/xia.png'\r\nimport { selectHardwareModalShowFun } from './../../store/actions'\r\nimport PetsUI from './PetsUI.jsx'\r\nimport electronStore from '../../utils/electronStore'\r\n\r\n\r\nimport './mainbody.less'\r\nimport HardListModal from './HardListModal'\r\nlet storage = window.localStorage\r\n\r\n\r\nconst HardAndPetsUI = ({ bodyHeight, selectHardwareType, selectHardwareModalShow, hardwareList, selectHardwareModalShowFun,hardwareInfo }) => {\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({})\r\n  useEffect(() => {\r\n    console.log('初始化硬件和宠物界面', hardwareList);\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || []\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfo = hardwareInfo || {}\r\n        console.log('------=========--------', selectHardwareInfo);\r\n        if (selectHardwareInfo === {}) {\r\n          let selectHardwareInfo = list[0] || {}\r\n          setSelectHardwareDetail(selectHardwareInfo)\r\n        } else {\r\n          let sameFlag = false\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (element.name === selectHardwareInfo.name && element.mac === selectHardwareInfo.mac) {\r\n              setSelectHardwareDetail(selectHardwareInfo)\r\n              sameFlag = true\r\n              break\r\n            }\r\n          }\r\n          console.log('sameFlag', sameFlag);\r\n          if (!sameFlag) {\r\n            console.log('设置了默认值');\r\n            let selectHardwareInfo = list[0] || {}\r\n            setSelectHardwareDetail(selectHardwareInfo)\r\n          }\r\n        }\r\n        break\r\n      }\r\n    }\r\n  }, [selectHardwareType, hardwareList,])\r\n\r\n\r\n\r\n  return (\r\n    <div className='deviceAndPets' style={{ width: px(200), height: bodyHeight }}>\r\n      <div className='deviceAndPets-title' style={{ height: px(100) }}\r\n        onClick={(e) => {\r\n          //react阻止冒泡\r\n          e.stopPropagation()\r\n          selectHardwareModalShowFun(!selectHardwareModalShow)\r\n        }}\r\n      >\r\n        <div className=\"devicesName\" style={{ fontSize: px(26) }}>\r\n          {selectHardwareDetail.name}\r\n        </div>\r\n        <div className=\"imgBox\" style={{ marginLeft: px(7) }}>\r\n          <img src={xia} alt=\"\" width={px(32)} />\r\n        </div>\r\n        {selectHardwareModalShow && <HardListModal setInfo={(item) => {\r\n          setSelectHardwareDetail(item)\r\n        }} />}\r\n      </div>\r\n      <PetsUI\r\n        bodyHeight={bodyHeight}\r\n\r\n      />\r\n\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\n\r\nHardAndPetsUI.propTypes = {\r\n  bodyHeight: PropTypes.number,\r\n  devicesTypeList: PropTypes.array\r\n}\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  bodyHeight: 0,\r\n  devicesTypeList: []\r\n}\r\nexport default connect(\r\n  state => ({\r\n    selectHardwareModalShow: state.hardwareReduce.selectHardwareModalShow,\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\r\n  }),\r\n  { selectHardwareModalShowFun }\r\n)(HardAndPetsUI)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\avatar\\Avatar.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\combineScales\\index.jsx",["951","952","953","954","955"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  Space,\r\n  message,\r\n  Input,\r\n  Modal,\r\n} from \"antd\";\r\nimport {\r\n  CheckCircleFilled,\r\n  ExclamationCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  setMenuNum,\r\n  selectHardwareInfoFun,\r\n  selectHardwareList,\r\n} from \"../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport { devicesTitleHeight } from \"../../utils/InitDate\";\r\nimport scaleImage from \"./../../assets/img/scaleImage.png\";\r\nimport combinedscales from \"./../../assets/img/combinedscales.png\";\r\nimport { px } from \"../../utils/px\";\r\nimport \"./index.less\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { Meta } = Card;\r\nconst { confirm } = Modal;\r\nconst CombineScales = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  userMessage,\r\n  setMenuNum,\r\n  selectHardwareInfoFun,\r\n  selectHardwareList,\r\n}) => {\r\n  let { hardwareList } = hardwareMessage;\r\n  const [biggieList, setBiggieList] = useState([]); //体重秤仪器列表\r\n  const [confirmType, setConfirmType] = useState(false); //确认选择\r\n  const [checkHardwareList, setcheckHardwareList] = useState([]); //存储用户点击选择的体重秤信息\r\n  const [saveName, setSaveName] = useState(\"\"); //保存用户的更改的名字\r\n\r\n  //点击卡片选择效果\r\n  const onClick = (index, data) => {\r\n    console.log(data);\r\n    let changeClassName = document.getElementById(index).classList;\r\n    let iconClassName = document.getElementById(`${\"icon\" + index}`);\r\n    let cardClassNametype = document\r\n      .getElementById(index)\r\n      .classList.contains(\"cardBoxClick\");\r\n    cardClassNametype\r\n      ? changeClassName.remove(\"cardBoxClick\")\r\n      : changeClassName.add(\"cardBoxClick\");\r\n    cardClassNametype\r\n      ? (iconClassName.style.display = \"none\")\r\n      : (iconClassName.style.display = \"\");\r\n    let oldData = checkHardwareList;\r\n    setcheckHardwareList(_.xorWith([data], oldData, _.isEqual));\r\n  };\r\n  //确认选择两个体重秤\r\n  const onChangeScales = () => {\r\n    if (_.size(checkHardwareList) > 1) {\r\n      setConfirmType(true);\r\n    } else {\r\n      message.error({\r\n        content: \"Please choose more than two scales\",\r\n        style: {\r\n          marginTop: \"20vh\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n  //保存用户更改的名字\r\n  const saveChangeName = (e) => {\r\n    setSaveName(e.target.value);\r\n  };\r\n\r\n  //跳转准备测量\r\n  const startMeasuring = () => {\r\n    confirm({\r\n      title: \"Are you sure to incorporate the body fat scale?\",\r\n      icon: <ExclamationCircleOutlined />,\r\n      style: {\r\n        marginTop: \"20vh\",\r\n      },\r\n      width: 480,\r\n      onOk() {\r\n        let mac = _.join(_.map(checkHardwareList, \"mac\"), \"/\");\r\n        let newData = {\r\n          name: _.isEmpty(saveName) ? \"CompositeScale\" : saveName,\r\n          mac: mac,\r\n          deviceType: \"biggie\",\r\n          examRoom: \"\",\r\n        };\r\n        let newHardwareList = hardwareList;\r\n        newHardwareList[1].devices.push({ ...newData });\r\n        selectHardwareList(newHardwareList);\r\n        selectHardwareInfoFun(newData);\r\n        setMenuNum(\"1\");\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let newData = [];\r\n    _.forIn(_.find(hardwareList, [\"type\", \"biggie\"]).devices, (item) => {\r\n      if (item.mac.indexOf(\"/\") === -1) {\r\n        newData.push(item);\r\n      }\r\n    });\r\n    setBiggieList(newData);\r\n    return () => {};\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"mergePage\">\r\n        <Header className=\"headerBox\" style={{ height: px(100) }}>\r\n          <span className=\"headerTitle\">\r\n            {confirmType ? \"Scales Combined As One\" : \"Combine Scales\"}\r\n          </span>\r\n        </Header>\r\n        <Content className=\"contentBox\">\r\n          <div className=\"tipTitleBox\">\r\n            {!confirmType ? (\r\n              <span>\r\n                Select the scales you'd\r\n                <br />\r\n                like to combine\r\n              </span>\r\n            ) : (\r\n              <span>\r\n                These two scales are now combined.\r\n                <br />\r\n                Please give this combination a name\r\n              </span>\r\n            )}\r\n          </div>\r\n\r\n          {confirmType ? (\r\n            <div className=\"asOneCardBox\">\r\n              <Space>\r\n                {_.map(checkHardwareList, (item, index) => {\r\n                  return (\r\n                    <Card className=\"asOneCard\">\r\n                      <Meta\r\n                        avatar={<Avatar src={scaleImage} size={53} />}\r\n                        description={\r\n                          <div style={{ display: \"grid\" }}>\r\n                            <span>Device Name:{item.name}</span>\r\n                            <span>\r\n                              {item.deviceType === \"biggie\"\r\n                                ? \"Biggie Pro Scale\"\r\n                                : \"Biggie Home Scale\"}\r\n                            </span>\r\n                            <span>SN:{item.mac}</span>\r\n                          </div>\r\n                        }\r\n                      />\r\n                    </Card>\r\n                  );\r\n                })}\r\n              </Space>\r\n              <div className=\"acOneImageBox\">\r\n                <img src={combinedscales} />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"selectScalesBox\">\r\n              {_.map(biggieList, (item, index) => {\r\n                return (\r\n                  <Card\r\n                    className=\"cardBox\"\r\n                    hoverable\r\n                    onClick={() => onClick(`${index}`, item)}\r\n                    id={`${index}`}\r\n                    key={index}\r\n                  >\r\n                    <div className=\"cardBodyBox\">\r\n                      <Meta\r\n                        avatar={<Avatar src={scaleImage} size={53} />}\r\n                        description={\r\n                          <div style={{ display: \"grid\" }}>\r\n                            <span>Device Name:{item.name}</span>\r\n                            <span>\r\n                              {item.deviceType === \"biggie\"\r\n                                ? \"Biggie Pro Scale\"\r\n                                : \"Biggie Home Scale\"}\r\n                            </span>\r\n                            <span>SN:{item.mac}</span>\r\n                          </div>\r\n                        }\r\n                      />\r\n                      <CheckCircleFilled\r\n                        id={`${\"icon\" + index}`}\r\n                        style={{\r\n                          color: \"#5cbbe0\",\r\n                          fontSize: \"20px\",\r\n                          display: \"none\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n\r\n          {confirmType ? (\r\n            <>\r\n              <div className=\"inputBox\">\r\n                <Input\r\n                  placeholder=\"Combined Scale Name\"\r\n                  className=\"inputName\"\r\n                  maxLength={25}\r\n                  onChange={saveChangeName}\r\n                />\r\n              </div>\r\n              <div className=\"scalesBtnBox\">\r\n                <Button\r\n                  type=\"primary\"\r\n                  className=\"scalesBtn\"\r\n                  shape=\"round\"\r\n                  onClick={() => startMeasuring()}\r\n                >\r\n                  Save & Start Measuring\r\n                </Button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <Space className=\"scalesBtnBox\">\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"scalesBtn\"\r\n                shape=\"round\"\r\n                onClick={() => setMenuNum(\"AddDevice\")}\r\n              >\r\n                Add New Scale\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                className=\"scalesBtn\"\r\n                shape=\"round\"\r\n                onClick={() => onChangeScales()}\r\n              >\r\n                Combine Scales\r\n              </Button>\r\n            </Space>\r\n          )}\r\n        </Content>\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n    userMessage: state.userReduce,\r\n  }),\r\n  {\r\n    setMenuNum,\r\n    selectHardwareInfoFun,\r\n    selectHardwareList,\r\n  }\r\n)(CombineScales);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\index.jsx",["956","957","958","959"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Menu, PageHeader } from \"antd\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HeaderItem from \"../temperaturePage/components/headerItem\";\r\nimport LinkEquipment from \"./components/LinkEquipment\";\r\nimport ScanPet from \"./components/scanPet\";\r\nimport { px } from \"../../utils/px\";\r\nimport \"./index.less\";\r\n\r\nconst ScanPage = ({ petMessage, hardwareMessage }) => {\r\n  let { petId, isWalkIn } = petMessage;\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"scanHomeBox\">\r\n        <div style={{ height: px(100), background: \"#fff\", position: 'relative' }}>\r\n          <div style={{ height: '100%' }}>\r\n            <HeaderItem />\r\n          </div>\r\n        </div>\r\n        {_.isEmpty(petId) && !isWalkIn ? <LinkEquipment /> : <ScanPet />}\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(ScanPage);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\index.jsx",["960","961","962","963","964"],"import React, { useEffect, useState } from \"react\";\r\nimport { Layout, message } from \"antd\";\r\nimport Biggie from \"./Biggie\";\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport { setBiggieConnectStatusFun } from \"../../store/actions\";\r\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\r\nimport HistoryTable from \"../../components/historyTable\";\r\nimport LinkEquipment from \"./components/linkEquipment\";\r\nimport \"./biggiePage.less\";\r\nimport { px } from \"../../utils/px\";\r\nimport { fetchRequest } from \"../../utils/FetchUtil1\";\r\nimport MyModal from \"../../utils/myModal/MyModal\";\r\n\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nlet storage = window.localStorage;\r\n\r\nconst BiggirPage = ({\r\n  hardwareReduce,\r\n  setBiggieConnectStatusFun,\r\n  petReduce,\r\n}) => {\r\n  let { petDetailInfo } = petReduce;\r\n  let { biggieBodyWeight } = hardwareReduce;\r\n  //定义体重值 体脂值 体重单位 连接状态\r\n  const [weight, setWeight] = useState(0);\r\n  const [saveNum, setSaveNum] = useState(0);\r\n  const [fat, setFat] = useState(0);\r\n  const [unit, setUnit] = useState(\"kg\");\r\n  const [connectStatus, setConnectStatus] = useState(\"disconnected\");\r\n  const [isSavePMS, setIsSavePMS] = useState(false);\r\n  const [saveLoad, setSaveLoad] = useState(false);\r\n  const [isHaveSaveBtn, setIsHaveSaveBtn] = useState(true);\r\n\r\n  const _saveWeight = () => {\r\n    let params = {\r\n      petId: petDetailInfo.petId,\r\n      doctorId: storage.userId,\r\n      weight: weight,\r\n      memo: \"\",\r\n      fat,\r\n      bodyConditionScore: null,\r\n    };\r\n    setSaveLoad(true);\r\n    console.log(\"---体重保存入参--：\", params);\r\n    fetchRequest(\"/exam/addClamantPetExam\", \"POST\", params)\r\n      .then((res) => {\r\n        setSaveLoad(false);\r\n        console.log(\"res\", res);\r\n        if (res.flag === true) {\r\n          switch (storage.lastOrganization) {\r\n            default:\r\n              message.success(\"Data successfully saved in Mella\");\r\n              break;\r\n          }\r\n          setSaveNum(saveNum + 1);\r\n          setIsHaveSaveBtn(false);\r\n          // this._getHistory()\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setSaveLoad(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isSave = storage.connectionKey ? false : true;\r\n    setIsSavePMS(isSave);\r\n    return () => { };\r\n  }, []);\r\n  useEffect(() => {\r\n    let {\r\n      biggieConnectStatus,\r\n      biggieBodyFat,\r\n      biggieBodyWeight,\r\n      biggieUnit,\r\n      biggieSameWeightCount,\r\n    } = hardwareReduce;\r\n    setConnectStatus(biggieConnectStatus);\r\n    setFat(biggieBodyFat);\r\n    setUnit(biggieUnit);\r\n    if (biggieUnit === \"lb\") {\r\n      biggieBodyWeight = biggieBodyWeight * 2;\r\n    }\r\n    setWeight(biggieBodyWeight);\r\n    if (biggieSameWeightCount === 6) {\r\n      let ipcRenderer = window.require(\"electron\").ipcRenderer;\r\n      ipcRenderer.send(\"keyboardWriting\", weight);\r\n    }\r\n\r\n    return () => { };\r\n  }, [hardwareReduce]);\r\n\r\n  useEffect(() => {\r\n    setIsHaveSaveBtn(true);\r\n    return () => { };\r\n  }, [biggieBodyWeight]);\r\n  //宠物变了,要设置为未连接\r\n  useEffect(() => {\r\n    setBiggieConnectStatusFun(\"disconnected\")\r\n  }, [petDetailInfo]);\r\n\r\n  return (\r\n    <>\r\n      <Layout className=\"biggiePage\">\r\n        <div style={{ height: px(100), background: \"#fff\", position: 'relative' }}>\r\n          <div style={{ height: '100%' }}>\r\n            <HeaderItem />\r\n          </div>\r\n        </div>\r\n        <Content className=\"biggieContentBox\">\r\n          {_.isEmpty(petDetailInfo) ? (\r\n            <>\r\n              <div className=\"chackPatientBox\">\r\n                <p className=\"chackPatientTitle\">Select a patient</p>\r\n              </div>\r\n            </>\r\n          ) : connectStatus === \"isMeasuring\" ? (\r\n            <div className=\"biggbody\" >\r\n              <div className=\"flex\" style={{ width: '100%', }}>\r\n                <div className=\"biggieTopBox\" style={{ width: px(400), }}>\r\n                  <Biggie\r\n                    weight={weight}\r\n                    bodyFat={fat}\r\n                    score={5}\r\n                    impedance={fat}\r\n                    isIbs={unit === \"lb\"}\r\n                    onPress={_saveWeight}\r\n                    discardOnPress={() =>\r\n                      setBiggieConnectStatusFun(\"disconnected\")\r\n                    }\r\n                    issave={isSavePMS}\r\n                    isHaveSaveBtn={isHaveSaveBtn}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"biggeTitleBox\">\r\n                <p className=\"biggeTitle\">History</p>\r\n              </div>\r\n              <div className=\"biggeTableBox\">\r\n                <HistoryTable saveNum={saveNum} tableColumnType='weight' />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"biggbody\">\r\n              <LinkEquipment />\r\n            </div>\r\n          )}\r\n        </Content>\r\n      </Layout>\r\n      <MyModal visible={saveLoad} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    hardwareReduce: state.hardwareReduce,\r\n    petReduce: state.petReduce,\r\n  }),\r\n  {\r\n    setBiggieConnectStatusFun,\r\n  }\r\n)(BiggirPage);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\hardwareAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\petType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\headerItem.jsx",["965","966","967","968","969","970","971","972","973","974","975","976"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Image,\r\n  Layout,\r\n  Dropdown,\r\n  Col,\r\n  Row,\r\n  Avatar,\r\n  Space,\r\n  Card,\r\n  Menu,\r\n  Progress,\r\n} from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\nimport Charlie from \"./../../../assets/img/Charlie.png\";\r\nimport BluetoothNotConnected from \"./../../../assets/img/BluetoothNotConnected.png\";\r\nimport AxillaryBluetooth from \"./../../../assets/img/AxillaryBluetooth.png\"; //腋温图片\r\nimport RectalBluetoothIcon from \"./../../../assets/img/RectalBluetoothIcon.png\"; //肛温图片\r\nimport EarBluetoothIcon from \"./../../../assets/img/EarBluetoothIcon.png\"; //耳温图片\r\n\r\nimport connectBle from \"./../../../assets/img/connectBle.png\";\r\nimport redcat from \"./../../../assets/images/redcat.png\";\r\nimport reddog from \"./../../../assets/images/reddog.png\";\r\nimport redother from \"./../../../assets/images/redother.png\";\r\nimport { connect } from \"react-redux\";\r\nimport { devicesTitleHeight } from \"../../../utils/InitDate\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n  setMellaPredictReturnValueFun,\r\n} from \"../../../store/actions\";\r\nimport moment from \"moment\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\nimport _ from \"lodash\";\r\nimport \"./headerItem.less\";\r\nimport { px } from \"../../../utils/px\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst HeaderItem = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  timeNum = 15,\r\n  setMellaPredictReturnValueFun,\r\n}) => {\r\n  let history = useHistory();\r\n  let {\r\n    petName,\r\n    patientId,\r\n    firstName,\r\n    lastName,\r\n    gender,\r\n    breedName,\r\n    birthday,\r\n    weight,\r\n    url,\r\n    petSpeciesBreedId,\r\n    petId,\r\n    isWalkIn,\r\n  } = petMessage;\r\n  let {\r\n    mellaConnectStatus,\r\n    mellaPredictValue,\r\n    mellaMeasureValue,\r\n    mellaMeasurePart,\r\n    rulerConnectStatus,\r\n    biggieConnectStatus,\r\n    selectHardwareInfo,\r\n    selectHardwareType,\r\n  } = hardwareMessage;\r\n  const [value, setValue] = useState(0);\r\n  const saveCallBack = useRef();\r\n  const callBack = () => {\r\n    let random = null;\r\n    if (timeNum === 15) {\r\n      random = 7;\r\n    } else if (timeNum === 30) {\r\n      random = 3.5;\r\n    } else {\r\n      random = 1.75;\r\n    }\r\n    setValue(value + random);\r\n  };\r\n  //展示宠物照片方法\r\n  const petPicture = (size) => {\r\n    if (_.isEmpty(url)) {\r\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\r\n        return <Avatar src={redcat} size={size} />;\r\n      } else if (\r\n        petSpeciesBreedId === 12001 ||\r\n        _.inRange(petSpeciesBreedId, 136, 456)\r\n      ) {\r\n        return <Avatar src={reddog} size={size} />;\r\n      } else if (petSpeciesBreedId === 13001) {\r\n        return <Avatar src={redother} size={size} />;\r\n      } else {\r\n        return <Avatar src={redother} size={size} />;\r\n      }\r\n    } else {\r\n      return <Avatar src={url} size={size} />;\r\n    }\r\n  };\r\n  //展示名字或id方法\r\n  const showNameOrId = () => {\r\n    if (_.isEmpty(petName) && _.isEmpty(patientId)) {\r\n      return \"unknown\";\r\n    } else if (!_.isEmpty(petName)) {\r\n      return petName;\r\n    } else {\r\n      return patientId;\r\n    }\r\n  };\r\n  //展示主人名字方法\r\n  const ownerName = () => {\r\n    if (_.isEmpty(firstName) && _.isEmpty(lastName)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return firstName + \" \" + lastName;\r\n    }\r\n  };\r\n  //计算宠物年龄\r\n  const calculateAge = () => {\r\n    if (_.isEmpty(birthday)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return moment().diff(moment(birthday), \"years\") + \" \" + \"Years Old\";\r\n    }\r\n  };\r\n  //计算宠物体重\r\n  const calculateWeight = () => {\r\n    if (_.isEmpty(weight)) {\r\n      return \"unknown\";\r\n    } else {\r\n      return _.floor(weight * 2.2, 1) + \" \" + \"lbs\";\r\n    }\r\n  };\r\n  //头部弹出卡片\r\n  const cardItem = () => {\r\n    return (\r\n      <Menu onClick={(item) => clilkMenu(item)} className=\"popBox\">\r\n        <Menu.Item className=\"topItem\">\r\n          <div className=\"cardTopBox\">\r\n            <div className=\"topLeftBox\">\r\n              {petPicture(91)}\r\n              <p className=\"cardTitle\">{showNameOrId()}</p>\r\n              <p className=\"cardTitle\">{ownerName()}</p>\r\n            </div>\r\n            <div className=\"topRightBox\">\r\n              <p className=\"cardTitle\">{calculateAge()}</p>\r\n              <p className=\"cardTitle\">{calculateWeight()}</p>\r\n              <p className=\"cardTitle\">{gender === 0 ? \"Male\" : \"Venter\"}</p>\r\n              <p className=\"cardTitle\">{breedName}</p>\r\n            </div>\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item key={\"editPetInfo\"}>\r\n          <p className=\"itemList\">Edit Pet Profile</p>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <p className=\"itemList\">Export Temperature History</p>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <p className=\"itemList\">Export All Vitals History</p>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const clilkMenu = (item) => {\r\n    console.log(\"---item\", item);\r\n    if (item.key === \"editPetInfo\" && !petMessage.isWalkIn) {\r\n      //跳转到编辑宠物信息页面\r\n      history.push(\"/page9\");\r\n    }\r\n  };\r\n  //超过15s后调用接口\r\n  const prediction = () => {\r\n    let parame = {\r\n      ambient_temperature: 17,\r\n      data: mellaPredictValue,\r\n      deviceId: \"11111\",\r\n      sampling_rate: \"135ms\",\r\n    };\r\n    let url = \"/clinical/catv12Predict\";\r\n    console.log(\"-----调用接口入参\", parame);\r\n    fetchRequest(url, \"POST\", parame)\r\n      .then((res) => {\r\n        console.log(\"res\", res);\r\n        let ipcRenderer = window.electron.ipcRenderer;\r\n        if (res.message === \"Success\") {\r\n          let prediction = res.result.prediction.toFixed(2);\r\n          console.log(\"------yuce\", prediction);\r\n\r\n          let num = parseFloat(parseFloat(prediction).toFixed(1));\r\n          setMellaPredictReturnValueFun(num);\r\n\r\n          let tempArr = prediction.split(\".\");\r\n          let intNum = tempArr[0];\r\n          let flotNum = tempArr[1];\r\n          if (intNum.length < 2) {\r\n            intNum = \"0\" + intNum;\r\n          }\r\n          if (flotNum.length < 2) {\r\n            flotNum = \"0\" + flotNum;\r\n          }\r\n          const timeID = setTimeout(() => {\r\n            ipcRenderer.send(\"usbdata\", {\r\n              command: \"42\",\r\n              arr: [intNum, flotNum],\r\n            });\r\n\r\n            timeID && clearTimeout(timeID);\r\n          }, 10);\r\n        } else {\r\n          const timeID = setTimeout(() => {\r\n            // this.sendData('41', [])\r\n            ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\r\n\r\n            clearTimeout(timeID);\r\n          }, 10);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"err\", err);\r\n      });\r\n  };\r\n  //判断仪器是否连接从而判断选择什么图片\r\n  const isConnect = () => {\r\n    const checkImage = () => {\r\n      if (mellaMeasurePart === \"腋温\") {\r\n        return AxillaryBluetooth;\r\n      } else if (mellaMeasurePart === \"耳温\") {\r\n        return EarBluetoothIcon;\r\n      } else {\r\n        return RectalBluetoothIcon;\r\n      }\r\n    };\r\n    switch (selectHardwareType) {\r\n      case \"mellaPro\":\r\n        return _.isEqual(mellaConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Progress\r\n            width={48}\r\n            type=\"circle\"\r\n            percent={value}\r\n            format={() => <Avatar size={40} src={checkImage()} />}\r\n          />\r\n        );\r\n      case \"biggie\":\r\n        return _.isEqual(biggieConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Avatar size={40} src={connectBle} />\r\n        );\r\n      case \"tape\":\r\n        return _.isEqual(rulerConnectStatus, \"disconnected\") ? (\r\n          <Avatar size={40} src={BluetoothNotConnected} />\r\n        ) : (\r\n          <Avatar size={40} src={connectBle} />\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    saveCallBack.current = callBack;\r\n    if (value === 105 && timeNum !== 60) {\r\n      prediction();\r\n    } else if (value === 105 && timeNum === 60) {\r\n      let ipcRenderer = window.electron.ipcRenderer;\r\n      const timeID = setTimeout(() => {\r\n        ipcRenderer.send(\"usbdata\", { command: \"41\", arr: [] });\r\n        clearTimeout(timeID);\r\n      }, 10);\r\n    }\r\n    return () => { };\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      saveCallBack.current();\r\n    };\r\n    let timer = null;\r\n    if (mellaConnectStatus === \"isMeasuring\") {\r\n      setValue(0);\r\n      timer = setInterval(tick, 1000);\r\n    } else if (value > 100 || mellaConnectStatus === \"complete\") {\r\n      clearInterval(timer);\r\n    } else if (mellaConnectStatus === \"disconnected\") {\r\n      setValue(0);\r\n    };\r\n    if (mellaConnectStatus === \"complete\") {\r\n      // let ipcRenderer = window.electron.ipcRenderer;\r\n      // ipcRenderer.send(\"keyboardWriting\", mellaMeasureValue);\r\n    }\r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [mellaConnectStatus]);\r\n\r\n  return (\r\n    <div className=\"headerBox\">\r\n      <Header style={{ background: \"#fff\",height:'100%'}}>\r\n        {_.isEmpty(petId) && !isWalkIn ? (\r\n          <></>\r\n        ) : (\r\n          <Row className=\"heardRow\" >\r\n            {/*头部左侧 */}\r\n            <Col flex={10}>\r\n              {isWalkIn ? (\r\n                <span className=\"walkInTitle\">Walk-In</span>\r\n              ) : (\r\n                <Dropdown overlay={cardItem} trigger={[\"click\"]}>\r\n                  <div\r\n                    className=\"petMessageBox\"\r\n                    onClick={(e) => e.preventDefault()}\r\n                  >\r\n                    {petPicture(40)}\r\n                    <div className=\"petMessageBox\">\r\n                      <p className=\"petName\">\r\n                        {!_.isEmpty(petMessage.patientId)\r\n                          ? petMessage.patientId\r\n                          : \"unknown\"}\r\n                        ,{\" \"}\r\n                        {!_.isEmpty(petMessage.petName)\r\n                          ? petMessage.petName\r\n                          : \"unknown\"}\r\n                      </p>\r\n                      <DownOutlined\r\n                        style={{ fontSize: \"22px\", marginLeft: \"10px\" }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </Dropdown>\r\n              )}\r\n            </Col>\r\n            {/*头部右侧 */}\r\n            <Col flex={1}>\r\n              <div className=\"linkStateImageBox\">{isConnect()}</div>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n      </Header>\r\n    </div>\r\n  );\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n    setMellaPredictReturnValueFun,\r\n  }\r\n)(HeaderItem);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\components\\linkEquipment.jsx",["977","978","979","980","981","982","983","984","985"],"import React, { useEffect, useState } from \"react\";\r\nimport { Image, Layout } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport PressButton_Pro from \"./../../../assets/img/PressButton_Pro.png\";\r\nimport biggieonscale from \"./../../../assets/img/biggieonscale.png\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport _ from \"lodash\";\r\nimport HistoryTable from \"../../../components/historyTable\";\r\nimport \"./linkEquipment.less\";\r\n\r\nconst { Content, Header } = Layout;\r\n\r\nconst LinkEquipment = ({ petMessage, hardwareMessage }) => {\r\n  let { mellaConnectStatus } = hardwareMessage;\r\n  const [saveNum, setSaveNum] = useState(0);\r\n  return (\r\n    <>\r\n      <div className={\"linkBox\"}>\r\n        <div className=\"startBox\">\r\n          <img src={biggieonscale}></img>\r\n          <p className=\"startTitle\">Ready, place pet onto scale</p>\r\n        </div>\r\n        <div className=\"tableBox\">\r\n          <HistoryTable saveNum={saveNum} tableColumnType=\"weight\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(LinkEquipment);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\uploadImg\\UploadImg.js",["986"],"\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './uploadImg.less'\r\nimport selectphoto from './../../assets/images/sel.png'\r\n\r\nconst UploadImg = ({ imgWidth, text, getImg, imgUrl, disable }) => {\r\n\r\n  const url = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:8080/mellaserver'\r\n  let backgroundImage = imgUrl ? `url(${imgUrl})` : `url(${selectphoto})`\r\n  let cursor = !disable ? 'default' : 'no-drop'\r\n  return (\r\n\r\n    <div id=\"uploadImg\">\r\n      <div className=\"ciral\"\r\n        onClick={() => {\r\n          if (disable) {\r\n            return\r\n          }\r\n          let file = document.getElementById('img')\r\n          file.click();\r\n        }}\r\n        style={{\r\n          width: imgWidth,\r\n          height: imgWidth,\r\n          borderRadius: imgWidth,\r\n          backgroundImage: backgroundImage,\r\n          backgroundPosition: 'center',\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: `auto ${imgWidth}`,\r\n          cursor: cursor\r\n\r\n        }}\r\n      >\r\n\r\n        <input type=\"file\"\r\n          accept=\"image/gif,image/jpeg,image/jpg,image/png,image/svg\"\r\n          className=\"uploadImg\"\r\n          id=\"img\"\r\n          style={{ display: 'none' }}\r\n          onChange={(e) => {\r\n            console.log(e);\r\n            let $target = e.target || e.srcElement\r\n            if ($target.files.length === 0) {\r\n              return;\r\n            }\r\n            let file = $target.files[0]\r\n            var reader = new FileReader()                   //创建文件阅读器实例\r\n            reader.readAsDataURL(file)\r\n            reader.onload = (data) => {\r\n              let res = data.target || data.srcElement\r\n              console.dir(document.getElementsByClassName('ciral')[0]);\r\n              document.getElementsByClassName('ciral')[0].style.backgroundImage = `url(${res.result})`\r\n              // document.getElementById('touxiang').src = res.result\r\n\r\n\r\n              const formData = new FormData();\r\n              formData.append('img', file);\r\n              fetch(`${url}/image/uploadImage`, {\r\n                method: 'POST',\r\n                headers: {\r\n                },\r\n                body: formData\r\n              })\r\n                .then((response) => response.json())\r\n                .then((res) => {\r\n                  console.log('上传的结果', res);\r\n                  if (res.flag === true) {\r\n                    getImg(res.data)\r\n                  }\r\n                })\r\n                .catch((err) => {\r\n                  console.log(err);\r\n                });\r\n            }\r\n\r\n          }} />\r\n        <p>{text}</p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\nUploadImg.propTypes = {\r\n  imgWidth: PropTypes.string,\r\n  text: PropTypes.string,\r\n  getImg: PropTypes.func,\r\n  imgUrl: PropTypes.string,\r\n  disable: PropTypes.bool\r\n}\r\nUploadImg.defaultProps = {\r\n  imgWidth: '120px',\r\n  text: 'Add Photo',\r\n  disable: false\r\n  // imgUrl: 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18886/group1/image/0_email.png'\r\n}\r\nexport default UploadImg","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\Fetch_token.js",["987","988","989","990"],"\r\n// let COMMON_URL = 'http://192.168.0.36:8080/melladesk';//本地\r\n// let COMMON_URL = 'http://54.85.89.201:8081/melladesk';//AWS\r\n// let COMMON_URL = 'http://8.131.66.177:8081/melladesk';//阿里云\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/melladesk';//企业AWS\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchToken (url, method, params = '', token = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let headers = null\r\n    if (token !== '') {\r\n      headers = {\r\n        'authorization': token,\r\n      };\r\n    }\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else if (method === 'POST') {\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/merge-patch+json\",\r\n      authorization: token\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\http.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\index.js",["991"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ConfigProvider } from 'antd';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport App from './App';\n// import App from './components/mainbody/index'\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    {/* <TemperaturePage/> */}\n  </Provider>\n\n  ,\n  document.getElementById('root'))\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\choose\\Choose.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetLogin\\EzyVetLogin.jsx",["992","993"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    Input,\r\n    Form,\r\n    Select\r\n} from 'antd';\r\nimport { createFromIconfontCN } from '@ant-design/icons';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\nimport './esyVetLogin.less'\r\nimport { fetchRequest2 } from './../../utils/FetchUtil2'\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst { Option } = Select;\r\nexport default class EzyNetLogin extends Component {\r\n\r\n    state = {\r\n        isRemember: false,\r\n        client_id: '',\r\n        client_secret: '',\r\n        partner_id: ''\r\n    }\r\n\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('middle')\r\n        storage.ezyVetToken = ''\r\n    }\r\n    componentWillMount () {\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin1 !== '', storage.ezyVetToken1 !== undefined, `${storage.ezyVetToken1}` !== 'undefined');\r\n        console.log(storage.ezyVetLogin1, storage.ezyVetLogin !== '', storage.ezyVetToken !== undefined, `${storage.ezyVetToken}` !== 'undefined');\r\n        if (storage.ezyVetLogin !== '' && storage.ezyVetToken !== undefined && `${storage.ezyVetToken}` !== 'undefined') {\r\n            try {\r\n                let data = JSON.parse(storage.ezyVetLogin)\r\n                console.log('--', data);\r\n                this.setState({\r\n                    isRemember: data.isRemember,\r\n                    client_id: data.client_id,\r\n                    client_secret: data.client_secret,\r\n                    partner_id: data.partner_id\r\n                })\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render () {\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 10 },\r\n                sm: { span: 6 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 14 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 10,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 8,\r\n                    offset: 7,\r\n                },\r\n            },\r\n        };\r\n\r\n        const _next = (values) => {\r\n            console.log('Received values of form: ', values);\r\n            let parames = {\r\n                clientId: values.client_id,\r\n                clientSecret: values.client_secret,\r\n                partnerId: values.partner_id,\r\n            }\r\n            console.log(parames);\r\n            fetchRequest2('/EzyVet/ezyvetauth', 'GET', parames, '')\r\n                .then((res) => {\r\n                    console.log(res);\r\n                    if (res && res.msg === 'success') {\r\n\r\n                        storage.ezyVetToken = res.data\r\n                        if (this.state.isRemember) {\r\n                            storage.ezyVetLogin = JSON.stringify({\r\n                                client_id: values.client_id,\r\n                                client_secret: values.client_secret,\r\n                                partner_id: values.partner_id,\r\n                                isRemember: this.state.isRemember\r\n                            })\r\n                        } else {\r\n                            storage.ezyVetLogin = ''\r\n                        }\r\n                        storage.selectTime = ''\r\n                        storage.ezyVetReLogin = JSON.stringify({  //如果令牌过期了，需要重新输入信息重新获取令牌\r\n                            client_id: values.client_id,\r\n                            client_secret: values.client_secret,\r\n                            partner_id: values.partner_id,\r\n                        })\r\n\r\n                        this.props.history.push('EzyVetSelectTime')\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n        }\r\n        let { client_id, client_secret, partner_id } = this.state\r\n\r\n        return (\r\n            <div id=\"eszVetLogin\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page1')}\r\n                />\r\n                <div className=\"text\">\r\n                    Please enter your user information\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Form\r\n                        {...formItemLayout}\r\n                        name=\"register\"\r\n                        onFinish={_next}\r\n                        initialValues={{\r\n                            client_id, client_secret, partner_id\r\n                        }}\r\n\r\n                        scrollToFirstError\r\n                    >\r\n                        <Form.Item\r\n                            name=\"client_id\"\r\n                            label=\"Client ID\"\r\n                            rules={[{ required: true, message: 'Please input your Client ID!', whitespace: true }]}\r\n\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"client_secret\"\r\n                            label=\"Client Secret\"\r\n                            rules={[{ required: true, message: 'Please input your Client Secret!', whitespace: true }]}\r\n                            hasFeedback\r\n                        >\r\n                            <Input.Password className='inp' />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"partner_id\"\r\n                            label=\"Partner ID\"\r\n                            rules={[{ required: true, message: 'Please input your Partner ID!', whitespace: true }]}\r\n                        >\r\n                            <Input className='inp' />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            {...tailFormItemLayout}\r\n                        >\r\n                            <div className=\"btn\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    htmlType=\"submit\"\r\n                                >\r\n                                    Next\r\n                                </Button>\r\n                            </div>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"remember\">\r\n                    <p>Stay Signed In:</p>\r\n                    <div className=\"box\" onClick={() => {\r\n                        let { isRemember } = this.state\r\n                        this.setState({\r\n                            isRemember: !isRemember\r\n                        })\r\n                        storage.isRemember = !isRemember\r\n                    }}>\r\n                        {this.state.isRemember && <img src={dui} alt=\"\" />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\apiKey\\APIKey.jsx",["994","995","996","997"],"import React, { Component, } from 'react'\r\nimport {\r\n    Button,\r\n    Input,\r\n    Spin,\r\n    Alert,\r\n    Form,\r\n    Modal\r\n} from 'antd';\r\nimport { InfoCircleOutlined, UserOutlined, createFromIconfontCN } from '@ant-design/icons';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport dui from './../../assets/images/dui.png'\r\nimport './apikey.less'\r\nimport { fetchRequest1 } from './../../utils/FetchUtil'\r\nimport { mTop } from '../../utils/px';\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2326495_ryrpg35knb.js'\r\n})\r\nlet storage = window.localStorage;\r\nexport default class APIKey extends Component {\r\n    state = {\r\n        value: '',\r\n        loading: false,\r\n        id: '', // location 的ID\r\n        name: '',\r\n        flog: false,\r\n        visible: false,\r\n        modalText: '',\r\n        api: '',\r\n        selectApi: false\r\n    }\r\n    componentDidMount () {\r\n        let ipcRenderer = window.electron.ipcRenderer\r\n        ipcRenderer.send('big')\r\n    }\r\n    componentWillMount () {\r\n        if (storage.selectApi === `true`) {\r\n            if (`${storage.API}` !== `undefined`) {\r\n                this.setState({\r\n                    api: storage.API\r\n                })\r\n            }\r\n            this.setState({\r\n                selectApi: storage.selectApi\r\n            })\r\n        }\r\n        console.log('----------', storage.selectApi, storage.API);\r\n\r\n    }\r\n    onFinish = values => {\r\n        console.log(\"Success:\", values);\r\n        console.log('跳转');\r\n        if (values) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            let params = {\r\n                APIkey: values.api\r\n            }\r\n            console.log('传入的数据：', params);\r\n\r\n            fetchRequest1('/VetSpire/selectLocationsByOrganization', 'POST', params)\r\n                .then(res => {\r\n                    console.log('接收到的数据', res);\r\n                    this.setState({\r\n                        loading: false\r\n                    })\r\n                    if (res.code === 14002) {\r\n\r\n\r\n                        storage.selectApi = this.state.selectApi\r\n                        console.log(this.state.selectApi);\r\n                        storage.API = values.api\r\n                        console.log(res.message);\r\n                        let data = res.data.org\r\n                        console.log(data);\r\n                        this.setState({\r\n                            id: data.id,\r\n                            name: data.name,\r\n                            flog: true,\r\n                            api: params.APIkey\r\n                        })\r\n                        storage.id = data.id\r\n                        console.log(storage.id);\r\n                        this.props.history.push({ pathname: '/page3', })\r\n                    } else {\r\n                        this.setState({\r\n                            visible: true,\r\n                            modalText: 'The input API is wrong',\r\n                            flog: false\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    console.log('错误', err);\r\n                    this.setState({\r\n                        loading: false,\r\n                        visible: true,\r\n                        modalText: `${err}`,\r\n                        flog: false\r\n                    })\r\n                })\r\n\r\n        }\r\n    };\r\n    onFinishFailed = errorInfo => {\r\n        console.log(\"Failed:\", errorInfo);\r\n    };\r\n    render () {\r\n        const { api, id } = this.state\r\n        return (\r\n            <div id=\"inputAPI\">\r\n                {/* 关闭缩小 */}\r\n                <MaxMin\r\n                    onClick={() => { this.props.history.push('/') }}\r\n                    onClick1={() => this.props.history.push('/page1')}\r\n                />\r\n\r\n\r\n                <Spin tip=\"Loading...\" spinning={this.state.loading} delay={500}>\r\n\r\n                    {/* 文本 */}\r\n                    <div className=\"text\"\r\n                        style={{ marginTop: mTop(100), marginBottom: mTop(80) }}\r\n                    >Enter your Vetspire API key<br />and we’ll take care of the rest.</div>\r\n\r\n\r\n                    <Form\r\n                        name=\"basic\"\r\n                        initialValues={{\r\n                            remember: true\r\n                        }}\r\n                        onFinish={(value) => this.onFinish(value)}\r\n                        onFinishFailed={(value) => this.onFinishFailed(value)}\r\n                    >\r\n                        <div className=\"inptDiv\">\r\n                            <Form.Item\r\n                                name=\"api\"\r\n                                initialValue={this.state.api}\r\n                                rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your vetspire API key!\"\r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Input\r\n                                    className='input'\r\n                                    placeholder=\"Your Vetspire API Key\"\r\n\r\n                                />\r\n\r\n                            </Form.Item>\r\n                        </div>\r\n                        <div className=\"remember\">\r\n                            <div className=\"text1\">Remember Me</div>\r\n                            <div className=\"square\" onClick={() => {\r\n                                this.setState({ selectApi: !this.state.selectApi })\r\n                            }}>\r\n                                {(this.state.selectApi) ? (<img src={dui} width={'40px'} alt=\"\" />) : (null)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* {(!this.state.flog) ? ( */}\r\n                        {(true) ? (\r\n                            <Form.Item>\r\n                                <div className=\"btn\"\r\n                                    style={{ marginTop: mTop(280) }}\r\n                                >\r\n                                    <Button\r\n                                        type=\"primary\"\r\n                                        shape=\"round\"\r\n                                        size='large'\r\n                                        htmlType=\"submit\"\r\n                                    >\r\n                                        Connect\r\n                                    </Button>\r\n                                </div>\r\n                            </Form.Item>\r\n                        ) : (null)}\r\n\r\n                    </Form>\r\n\r\n                </Spin>\r\n\r\n                {/* {(this.state.flog) ? ( */}\r\n                {(false) ? (\r\n                    <div>\r\n                        <div className=\"text2\"> Verify Organization<br />Information</div>\r\n                        <div className=\"text9\">Business Name <span>{this.state.name}</span></div>\r\n                        <div className=\"btns\">\r\n                            <div className=\"btn1\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    onClick={() => this.setState({ flog: false })}\r\n                                >\r\n                                    Try Again\r\n                                </Button>\r\n                            </div>\r\n                            <div className=\"btn2\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    size='large'\r\n                                    onClick={() => {\r\n                                        console.log('点击了');\r\n                                        this.props.history.push({ pathname: '/page4', query: { api, id } })\r\n                                    }}\r\n                                >\r\n                                    Verify\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                ) : (null)}\r\n\r\n\r\n                <Modal\r\n                    title='err'\r\n                    visible={this.state.visible}\r\n                    footer={[]}\r\n                    onCancel={() => this.setState({ visible: false })}\r\n                >\r\n                    {this.state.modalText}\r\n                </Modal>\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\workPlace\\WorkPlace.jsx",["998","999","1000","1001","1002","1003","1004","1005","1006"],"\r\nimport React, { Component, } from 'react'\r\nimport {\r\n  Select,\r\n  Button,\r\n  Modal,\r\n  message,\r\n  Spin\r\n\r\n\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './workplace.less'\r\nimport { mTop, pX, px, win } from '../../utils/px';\r\nimport MaxMin from './../../utils/maxminreturn/MaxMinReturn'\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\nimport { fetchRequest } from './../../utils/FetchUtil1'\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport logo from '../../assets/images/mellaLogo.png'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\nexport default class WorkPlace extends Component {\r\n  state = {\r\n    organization: '',\r\n    workplaceList: [],\r\n\r\n\r\n    spin: false,\r\n    orgArr: [],\r\n    workplaceJson: {},\r\n    workplaceId: '',\r\n    workplaceName: '',\r\n    organizationId: '',\r\n    organizationName: '',\r\n    connectionKey: '',\r\n    selectRoleId: ''\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n\r\n    let userWorkplace = []\r\n    try {\r\n      userWorkplace = JSON.parse(storage.userWorkplace) || []\r\n      console.log(userWorkplace);\r\n    } catch (error) {\r\n      console.log('字符串转对象失败', error);\r\n    }\r\n    /*orgArr的格式为[{\r\n      organizationId:1,\r\n      organizationName:'11111',\r\n      connectionKey:''\r\n    }]\r\n    \r\n     workplace:{\r\n       1:{\r\n          workplaceId:1,\r\n          workplaceName:'122334\r\n        },\r\n     }\r\n    */\r\n    let orgArr = [], workplaceJson = {}\r\n    console.log('存储的工作场所和组织id', storage.lastWorkplaceId, storage.lastOrganization);\r\n    for (let i = 0; i < userWorkplace.length; i++) {\r\n      let element = userWorkplace[i]\r\n      // console.log('每一项的值：', element);\r\n      if (element.organizationEntity && element.workplaceEntity) {\r\n        let { organizationEntity, workplaceEntity, roleId } = element\r\n        const { name, organizationId, connectionKey } = organizationEntity\r\n        const { workplaceName, workplaceId } = workplaceEntity\r\n\r\n        if (`${workplaceId}` === storage.lastWorkplaceId) {\r\n          this.setState({\r\n            workplaceName,\r\n            workplaceId: storage.lastWorkplaceId\r\n          })\r\n        }\r\n\r\n        if (`${organizationId}` === storage.lastOrganization) {\r\n          this.setState({\r\n            organizationName: name,\r\n            organizationId: storage.lastOrganization\r\n          })\r\n        }\r\n\r\n        let orgRepeatFlog = false, repeatFlogNum = -1\r\n        for (let j = 0; j < orgArr.length; j++) {\r\n          console.log(orgArr[j].organizationId, organizationId);\r\n          if (orgArr[j].organizationId === organizationId) {\r\n            orgRepeatFlog = true\r\n            repeatFlogNum = j\r\n            break;\r\n          }\r\n\r\n        }\r\n        if (orgRepeatFlog) {\r\n          let workplace = {\r\n            workplaceName, workplaceId\r\n          }\r\n          let id = orgArr[repeatFlogNum].organizationId\r\n          let sameflog = false\r\n          console.log(workplaceJson[`${id}`], workplace);\r\n          for (let k = 0; k < workplaceJson[`${id}`].length; k++) {\r\n            const element = workplaceJson[`${id}`][k];\r\n            if (element.workplaceId === workplace.workplaceId && element.workplaceName === workplace.workplaceName) {\r\n              sameflog = true\r\n              break\r\n            }\r\n\r\n          }\r\n          if (!sameflog) {\r\n            workplaceJson[`${id}`].push(workplace)\r\n          }\r\n\r\n        } else {\r\n          let connectKey = connectionKey || ''\r\n          let json = {\r\n            organizationId,\r\n            organizationName: name,\r\n            connectionKey: connectKey,\r\n            roleId\r\n          }\r\n          let workplace = [{\r\n            workplaceName, workplaceId\r\n          }]\r\n          workplaceJson[`${organizationId}`] = workplace\r\n\r\n          orgArr.push(json)\r\n        }\r\n      }\r\n    }\r\n    console.log('-----转换后的组织信息--', orgArr, workplaceJson);\r\n    this.setState({\r\n      orgArr,\r\n      workplaceJson,\r\n      connectionKey: storage.connectionKey,\r\n      selectRoleId: storage.roleId\r\n    })\r\n    //分辨率改变后窗口自动改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('Lowbig', win())\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n  _select = (value, e) => {\r\n    console.log(value, e);  //value的值为id\r\n\r\n  }\r\n\r\n  _next = () => {\r\n    // this.props.history.push('/page8')\r\n\r\n    let { workplaceId, organizationId, connectionKey, selectRoleId } = this.state\r\n    console.log({ workplaceId, organizationId, connectionKey, selectRoleId });\r\n\r\n    // this.setState({\r\n    //   spin: true\r\n    // })\r\n    // fetchRequest(`/organization/updateLastWorkplace/${storage.userId}/${workplaceId}`)\r\n    //   .then(res => {\r\n    //     console.log(res);\r\n    //     this.setState({\r\n    //       spin: false\r\n    //     })\r\n    //     if (res.msg === 'success') {\r\n    //       storage.lastWorkplaceId = workplaceId\r\n    //       this.props.history.goBack()\r\n    //     }\r\n    //   })\r\n    //   .catch(err => {\r\n    //     this.setState({\r\n    //       spin: false\r\n    //     })\r\n    //     console.log(err);\r\n    //   })\r\n\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    console.log('入参', { userId: storage.userId, roleId: storage.roleId, workplaceId });\r\n    fetchRequest4(`/user/changeLatestWorkplace/${storage.userId}/${2}/${workplaceId}`, \"GET\")\r\n      .then(res => {\r\n        console.log('切换成功', res);\r\n        storage.lastWorkplaceId = `${workplaceId}`\r\n        storage.lastOrganization = organizationId\r\n        storage.connectionKey = connectionKey\r\n\r\n        if (selectRoleId) {\r\n          storage.roleId = selectRoleId\r\n        }\r\n\r\n        this.props.history.push('/uesr/selectExam')\r\n\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        storage.lastWorkplaceId = workplaceId\r\n        storage.lastOrganization = organizationId\r\n        storage.connectionKey = connectionKey\r\n\r\n        this.props.history.push('/uesr/selectExam')\r\n\r\n      })\r\n  }\r\n  render () {\r\n\r\n    let { orgArr, organizationName, workplaceName, workplaceJson, organizationId } = this.state\r\n    let orgOptions = orgArr.map(item => <Option key={item.organizationId} connectionkey={item.connectionKey} roleid={item.roleId} >{item.organizationName}</Option>)\r\n    let workplaceArr = []\r\n    if (workplaceJson[`${organizationId}`]) {\r\n      workplaceArr = workplaceJson[`${organizationId}`]\r\n      console.log('workArr = ', workplaceArr);\r\n    }\r\n    let workplaceOptions = workplaceArr.map(item => <Option key={item.workplaceId}>{item.workplaceName}</Option>)\r\n    return (\r\n      <div id=\"workplace\">\r\n        {/* 关闭缩小 */}\r\n        <div className=\"header\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.goBack()}\r\n          />\r\n        </div>\r\n        <div className=\"body flex\">\r\n          <div className=\"img flex\">\r\n            <img src={logo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n\r\n          <div className=\"title\">\r\n            <div className=\"text\" style={{ fontSize: px(28), marginBottom: px(40) }}>Verify Organization Information</div>\r\n            <div className=\"text2\" style={{ fontSize: px(24), textAlign: 'center' }}>Good Pets</div>\r\n          </div>\r\n\r\n\r\n          <div className=\"selectAll\" style={{ marginBottom: px(160) }}>\r\n\r\n            <div className=\"select\" >\r\n              <p style={{ fontSize: px(18) }}>Select Organization:</p>\r\n              <Select style={{ width: '40%' }}\r\n                value={organizationName}\r\n                onChange={(val, e) => {\r\n                  console.log(val, e)\r\n                  let workplace = workplaceJson[e.key]\r\n                  console.log(workplace);\r\n                  this.setState({\r\n                    organizationId: e.key,\r\n                    organizationName: e.children,\r\n                    connectionKey: e.connectionkey,\r\n                    workplaceId: workplace[0].workplaceId,\r\n                    workplaceName: workplace[0].workplaceName,\r\n                    selectRoleId: e.roleid\r\n                  })\r\n                }}>\r\n                {/* <Option value=\"1\">UGA Veterinary Teaching Hospital</Option> */}\r\n                {orgOptions}\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"select\" >\r\n              <p style={{ fontSize: px(18) }}>Select Location:</p>\r\n              <Select style={{ width: '40%' }}\r\n                value={workplaceName}\r\n                onChange={(val, e) => {\r\n                  console.log(val, e)\r\n                  this.setState({\r\n                    workplaceId: e.key,\r\n                    workplaceName: e.children\r\n                  })\r\n                }}>\r\n                {workplaceOptions}\r\n              </Select>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"foot flex\">\r\n          <div className=\"btn\">\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              onClick={this._next}\r\n            >\r\n              Verify\r\n            </Button>\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n        <MyModal\r\n          visible={this.state.spin}\r\n        />\r\n\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorAddPet\\DoctorAddPet.jsx",["1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\scanCodeLogin\\ScanCodeLogin.jsx",["1031","1032","1033","1034"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message\r\n\r\n} from 'antd';\r\n\r\nimport './scanCodeLogin.less'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { fetchRequest2 } from '../../../utils/FetchUtil2';\r\nimport { px } from './../../../utils/px'\r\n\r\nlet storage = window.localStorage;\r\nlet flog = false\r\nexport default class ScanCodeLogin extends Component {\r\n\r\n  state = {\r\n    name: '',\r\n    url: ''\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.timer = setInterval(() => {\r\n      this._getUser()\r\n    }, 1000);\r\n    console.log(this.props.history);\r\n    let { name, url } = this.props.history.location.params\r\n    this.setState({\r\n      name,\r\n      url\r\n    })\r\n  }\r\n  componentWillUnmount() {\r\n    this.timer && clearInterval(this.timer)\r\n  }\r\n  _getUser = () => {\r\n    fetchRequest2(`/user/loginWithQRcode/${temporaryStorage.QRToken}`)\r\n      .then(res => {\r\n        console.log('-----：', res);\r\n        if (res.flag === true) {\r\n          switch (res.code) {\r\n            case 10001:\r\n              console.log('未扫码');\r\n              flog = false\r\n              this.props.history.goBack()\r\n\r\n              break;\r\n\r\n            case 11033:\r\n              console.log('扫码未点击登录');\r\n              flog = false\r\n              // let { name, url } = res.data\r\n              // if (name === this.state.name && url === this.state.url) {\r\n              //   return\r\n              // }\r\n              // this.setState({\r\n              //   name,\r\n              //   url\r\n              // })\r\n              break;\r\n\r\n            case 11023:\r\n              console.log('过期');\r\n              this.timer && clearInterval(this.timer)\r\n              if (!flog) {\r\n                this.props.history.replace('/page11')\r\n              }\r\n\r\n\r\n              break;\r\n            case 20000:\r\n              this.timer && clearInterval(this.timer)\r\n              console.log('--------------成功');\r\n              flog = true\r\n              let success = res.data\r\n              let { userWorkplace, lastOrganization } = success\r\n\r\n              storage.userId = success.userId\r\n              storage.roleId = success.roleId\r\n\r\n              //每次登陆后清空宠物列表缓存的数据\r\n              storage.doctorList = ''\r\n              storage.defaultCurrent = ''\r\n\r\n              if (success.lastWorkplaceId) {\r\n                storage.lastWorkplaceId = success.lastWorkplaceId\r\n              } else {\r\n                storage.lastWorkplaceId = ''\r\n              }\r\n\r\n              if (success.lastOrganization) {\r\n                storage.lastOrganization = success.lastOrganization\r\n              } else {\r\n                storage.lastOrganization = ''\r\n              }\r\n\r\n\r\n\r\n              if (userWorkplace) {\r\n                storage.userWorkplace = JSON.stringify(userWorkplace)\r\n                let connectionKey = ''\r\n                for (let i = 0; i < userWorkplace.length; i++) {\r\n                  const element = userWorkplace[i];\r\n                  if (element.organizationEntity) {\r\n                    if (element.organizationEntity.organizationId === lastOrganization) {\r\n\r\n                      if (element.organizationEntity.connectionKey) {\r\n                        connectionKey = element.organizationEntity.connectionKey\r\n                      }\r\n                      if (element.roleId) {\r\n                        console.log(element.roleId);\r\n                        storage.roleId = element.roleId\r\n                      }\r\n\r\n                      break\r\n                    }\r\n                  }\r\n                }\r\n                storage.connectionKey = connectionKey\r\n\r\n              } else {\r\n                storage.userWorkplace = ''\r\n                storage.connectionKey = ''\r\n              }\r\n              this.props.history.push('/uesr/selectExam')\r\n\r\n\r\n\r\n\r\n\r\n\r\n              // storage.userId = res.data.userId\r\n              // storage.roleId = res.data.roleId\r\n              // if (res.data.lastWorkplaceId) {\r\n              //   storage.lastWorkplaceId = res.data.lastWorkplaceId\r\n              // } else {\r\n              //   storage.lastWorkplaceId = ''\r\n              // }\r\n              // if (res.data.lastOrganization) {\r\n              //   storage.lastOrganization = res.data.lastOrganization\r\n              // } else {\r\n              //   storage.lastOrganization = ''\r\n              // }\r\n              // this.props.history.push('/uesr/selectExam')\r\n\r\n\r\n              break;\r\n\r\n            default:\r\n\r\n              break;\r\n          }\r\n        }\r\n        console.log('code', res.code);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  _continue = () => {\r\n    this.props.history.replace('/page11')\r\n\r\n  }\r\n\r\n  render() {\r\n    let { url } = this.state\r\n    return (\r\n      <div id=\"scanCodeLogin\" className='pt-3'>\r\n\r\n\r\n        <div className=\"text  mb-3\"\r\n          style={{ fontSize: px(26), width: px(350), marginTop: px(20), marginBottom: px(40) }}\r\n        >\r\n          <h1>Need to confirm login on mobile phone</h1>\r\n        </div>\r\n\r\n        <div className=\"bodycenter\">\r\n          <div className=\"imgF \">\r\n            <img src={url} alt=\"\" style={{ width: px(150), hight: px(150) }} />\r\n          </div>\r\n          <p>{this.state.name}</p>\r\n          <div className=\"success\" style={{ marginTop: px(30) }}>Scan code completed</div>\r\n        </div>\r\n        <div className=\"button1\" style={{ height: px(150) }}>\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Cancel login\r\n          </Button>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\maxminreturn\\MaxMinReturn.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\findMyOrganization\\FindMyOrganization.jsx",["1035"],"import React, { Component } from 'react'\r\nimport {\r\n  Input\r\n} from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport Button from '../../../utils/button/Button'\r\n\r\n\r\n\r\nimport './findMyOrganization.less'\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nexport default class JoinworkplaceByName extends Component {\r\n\r\n  state = {\r\n    search: '',\r\n    listData: [],\r\n    searchData: [],\r\n    selectId: {}\r\n\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    fetchRequest(`/organization/listAll`, \"GET\", '')\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res.msg === 'success') {\r\n          this.setState({\r\n            listData: res.data\r\n          })\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n    this.setState({\r\n      selectId: temporaryStorage.logupSelectOrganization\r\n    })\r\n  }\r\n  _search = (val) => {\r\n    let search = val.target.value\r\n    let { listData } = this.state\r\n    let searchData = []\r\n    for (let i = 0; i < listData.length; i++) {\r\n      if (listData[i].name.toLowerCase().indexOf(search.toLowerCase()) !== -1) {\r\n        searchData.push(listData[i])\r\n      }\r\n    }\r\n    this.setState({\r\n      search,\r\n      searchData\r\n    })\r\n\r\n  }\r\n  _list = () => {\r\n    const { search, listData, searchData } = this.state\r\n    let data = (search.length > 0) ? searchData : listData\r\n    let option = data.map((item, index) => {\r\n      return <li key={item.organizationId}\r\n        onClick={() => {\r\n          this.setState({\r\n            selectId: item\r\n          })\r\n          console.log(item);\r\n          temporaryStorage.logupSelectOrganization = item\r\n          this.props.history.push('/uesr/logUp/FindMyWorkplace')\r\n\r\n        }}\r\n\r\n      >\r\n        {(this.state.selectId.organizationId === item.organizationId ? <span className=\"search\">&#xe614;</span> : null)}\r\n        {item.name}</li>\r\n    })\r\n    return (\r\n      <ul>\r\n        {option}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"findMyOrganization\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push('/uesr/logUp/JoinOrganizationByOption')}\r\n        />\r\n        <div className=\"body\">\r\n          <div className=\"text\">Find my organization</div>\r\n\r\n          <div className=\"searchBox\">\r\n            <div><MyIcon type='icon-sousuo' className=\"icon\" /></div>\r\n\r\n            <Input\r\n              placeholder=\"Please input organization name\"\r\n              bordered={false}\r\n              allowClear={true}\r\n              value={this.state.search}\r\n              onChange={this._search}\r\n            />\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"list\">\r\n            {this._list()}\r\n          </div>\r\n\r\n          <Button\r\n            text={'My Organization Isn`t Listed'}\r\n            textBoxStyle={{ marginTop: '50px' }}\r\n            onClick={() => {\r\n              this.props.history.push('/uesr/logUp/NewOrganization')\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\newOrganization\\NewOrganization.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil2.js",["1036","1037","1038","1039"],"\r\n// let COMMON_URL = 'http://192.168.0.36:8080/melladesk';//本地\r\nlet COMMON_URL = 'https://www.mellaserver.com/api/melladesk';//企业AWS\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest2 (url, method, params = '', Authorization) {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let header = {\r\n      'Content-Type': 'application/x-www-form-urlencoded',\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: {\r\n            \"Content-Type\": 'text/plain'\r\n          }\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/json\",\r\n      Authorization\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\button\\Button.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\selectionBox\\SelectionBox.jsx",["1040"],"\r\n\r\nimport React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './selectionBox.less'\r\nimport { px } from './../px'\r\nimport { stopBubble } from './../current'\r\n\r\nimport blackTriangle from './../../assets/img/blackTriangle.png'\r\n\r\n\r\nconst SelectionBox = ({ listArr, clickItem, clickitemBgc, clickItemColor, initSelectVale }) => {\r\n    const [selectValue, setSelectValue] = useState('')\r\n    const [mouseValue, setMouseValue] = useState('')\r\n    const [showSelect, setShowSelect] = useState(false)\r\n    // const [bacColor, setBacColor] = useState('#fff')\r\n    // const [textColor, setTextColor] = useState('#000')\r\n\r\n    useEffect(() => {\r\n        console.log(listArr[0]);\r\n        setSelectValue(listArr[0].value)\r\n        setMouseValue(listArr[0].value)\r\n        if (initSelectVale) {\r\n            setSelectValue(initSelectVale)\r\n        }\r\n    }, [])\r\n\r\n    const selection = () => {\r\n        let option = listArr.map((item, index) => {\r\n            let bacColor = item.value === selectValue ? clickitemBgc : item.value === mouseValue ? '#e7e7e7' : '#fff'\r\n            let textColor = item.value === selectValue ? clickItemColor : '#000'\r\n\r\n\r\n            // setBacColor(bacColor1)\r\n            // setTextColor(textColor1)\r\n            return <li\r\n                key={item.key}\r\n                style={{ paddingTop: px(5), paddingBottom: px(5), backgroundColor: bacColor, color: textColor }}\r\n                onClick={() => {\r\n                    setSelectValue(item.value)\r\n                    setShowSelect(false)\r\n                    clickItem(item)\r\n                }}\r\n                onMouseMove={() => {\r\n                    console.log();\r\n                    if (item.value !== selectValue) {\r\n                        setMouseValue(item.value)\r\n                    }\r\n                }}\r\n                onMouseLeave={() => {\r\n                    if (item.value !== selectValue) {\r\n                        // setBacColor('#fff')\r\n                        setMouseValue('')\r\n                    }\r\n                }}\r\n            >{item.value}</li>\r\n        })\r\n        return (\r\n            <ul>\r\n                {option}\r\n            </ul>\r\n        )\r\n\r\n\r\n    }\r\n    return (\r\n        <div className='selectionbox'>\r\n\r\n            <div className=\"select flex\" style={{ height: px(26) }}>\r\n                <div className=\"flex box\" onClick={(e) => {\r\n                    setShowSelect(true)\r\n                    stopBubble(e)\r\n                }}>\r\n                    <p style={{ fontSize: px(16), }}>{selectValue}</p>\r\n                    <img src={blackTriangle} alt=\"\" style={{ height: '50%' }} />\r\n                </div>\r\n\r\n                {\r\n                    showSelect &&\r\n                    true &&\r\n                    <div className=\"sortList\" style={{ top: px(26), }}>\r\n                        {selection()}\r\n                    </div>\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nSelectionBox.propTypes = {\r\n    listArr: PropTypes.array.isRequired,\r\n    clickItem: PropTypes.func,\r\n    clickitemBgc: PropTypes.string,\r\n    clickItemColor: PropTypes.string,\r\n    initSelectVale: PropTypes.string\r\n\r\n\r\n}\r\nSelectionBox.defaultProps = {\r\n    clickitemBgc: '#e1206d',\r\n    clickItemColor: '#fff',\r\n    initSelectVale: '',\r\n    clickItem: () => {\r\n\r\n    }\r\n}\r\nexport default SelectionBox","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\AddDevice.jsx",["1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport electronStore from '../../utils/electronStore';\r\nimport blueSearch from './../../assets/img/blueSerch.png'\r\nimport biggieHome from './../../assets/img/searchType-biggieHome.png'\r\nimport biggiePro from './../../assets/img/searchType-biggiePro.png'\r\nimport mellaHome from './../../assets/img/searchType-home.png'\r\nimport mellaPro from './../../assets/img/searchType-mellaPro.png'\r\nimport maeBowl from './../../assets/img/searchType-maeBowl.png'\r\nimport other from './../../assets/img/searchType-other.png'\r\nimport possum from './../../assets/img/searchType-possum.png'\r\nimport rfid from './../../assets/img/searchType-rfid.png'\r\nimport MinClose from '../../utils/minClose/MinClose'\r\nimport MouseDiv from '../../utils/mouseDiv/MouseDiv'\r\nimport back_white from '../../assets/img/back-white.png'\r\nimport back_hui from '../../assets/img/back-hui.png'\r\nimport redclose from '../../assets/img/redclose.png'\r\nimport MyModal from './../../utils/myModal/MyModal'\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './mainbody.less'\r\nimport { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList } from '../../store/actions';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst AddDevice = ({ bodyHeight, hardwareReducer, isHaveUsbDevice, receiveBroadcastHardwareInfo, hardwareList, setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }) => {\r\n    //是否有底座设备\r\n    const [noUSB, setNoUSB] = useState(false)\r\n    //设备列表\r\n    const [devicesList, setDevicesList] = useState([])\r\n    //选择的设备\r\n    const [selectDevice, setSelectDevice] = useState(null)\r\n    //重命名\r\n    const [reName, setReName] = useState('')\r\n    //房间号\r\n    const [examRoom, setExamRoom] = useState('')\r\n    //已经保存过的设备的macid\r\n    const [saveDeviceMac, setSaveDeviceMac] = useState([])\r\n    //顶部文本\r\n    const [topText, setTopText] = useState(' Pair Device')\r\n\r\n    //初始化\r\n    useEffect(() => {\r\n        setNoUSB(false)\r\n        setDevicesList([])\r\n        setSelectDevice(null)\r\n        setReName('')\r\n        setSaveDeviceMac([])\r\n        setTopText(' Pair Device')\r\n        //组件渲染完毕后要先清空广播的硬件信息\r\n        setReceiveBroadcastHardwareInfoFun({\r\n            deviceType: '',\r\n            macId: '',\r\n            name: ''\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (hardwareList.length > 0) {\r\n            let saveDeviceMac = []\r\n            for (let i = 0; i < hardwareList.length; i++) {\r\n                const element = hardwareList[i];\r\n                for (let j = 0; j < element.devices.length; j++) {\r\n                    const device = element.devices[j];\r\n                    saveDeviceMac.push(device.mac)\r\n                }\r\n            }\r\n            setSaveDeviceMac(saveDeviceMac)\r\n\r\n        }\r\n    }, [hardwareList])\r\n    useEffect(() => {\r\n        if (!selectDevice) {\r\n            setTopText(' Pair Device')\r\n        } else {\r\n            setTopText('Device Connected')\r\n        }\r\n\r\n    }, [selectDevice])\r\n    useEffect(() => {\r\n        setNoUSB(!isHaveUsbDevice)\r\n    }, [isHaveUsbDevice])\r\n    useEffect(() => {\r\n        let sameFlog = devicesList.some((device, index) => {\r\n            return device.macId === receiveBroadcastHardwareInfo.macId\r\n        })\r\n        if (sameFlog || !receiveBroadcastHardwareInfo.macId) {   //重复直接退出\r\n            return\r\n        }\r\n        console.log('receiveBroadcastHardwareInfo', devicesList, receiveBroadcastHardwareInfo);\r\n        let deviceArr = [].concat(devicesList)\r\n        deviceArr.push(receiveBroadcastHardwareInfo)\r\n        setDevicesList(deviceArr)\r\n\r\n\r\n\r\n    }, [receiveBroadcastHardwareInfo])\r\n\r\n    const addDevice = () => {\r\n        //从redux拿到列表中的所有硬件设备 hardwareList\r\n        console.log('hardwareList', hardwareList);\r\n        //拿到硬件的macid 类型 名称 房间号\r\n        console.log('selectDevice', selectDevice);\r\n        let sameFlog = hardwareList.some((item, index) => {\r\n            return item.type === selectDevice.deviceType\r\n        })\r\n        let hardwareArr = [].concat(hardwareList)\r\n        let { deviceType, macId, name } = selectDevice\r\n        let newDevice = {\r\n            name: reName || name,\r\n            mac: macId,\r\n            deviceType,\r\n            examRoom: examRoom || '',\r\n        }\r\n        console.log('newDevice', newDevice);\r\n        if (sameFlog) {\r\n            //相同就代表有这个硬件类型,可以直接去push\r\n\r\n            for (let i = 0; i < hardwareArr.length; i++) {\r\n                if (hardwareArr[i].type === selectDevice.deviceType) {\r\n                    hardwareArr[i].devices.push(newDevice)\r\n                    break\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //没有就要新建一个硬件类型\r\n            let json = {\r\n                type: selectDevice.deviceType,\r\n                devices: [newDevice]\r\n            }\r\n            hardwareArr.push(json)\r\n        }\r\n        setReName('')\r\n        setExamRoom('')\r\n        setHardwareList(hardwareArr)\r\n\r\n        return newDevice\r\n\r\n\r\n    }\r\n\r\n    const body = () => {\r\n\r\n        if (selectDevice) {\r\n            return <div className=\"addDevice1 flex\">\r\n                <div className=\"addDeviceTop flex\">\r\n                    <div className=\"title\" style={{ fontSize: px(28), marginBottom: px(20), marginTop: px(20) }}>Would you like to name<br />\r\n                        {`this ${selectDevice.name} device?`}</div>\r\n\r\n                    <div className=\"title\" style={{ fontSize: px(24), marginBottom: px(40), }}>\r\n                        {`SN: ${selectDevice.macId}`}</div>\r\n\r\n\r\n                    <div className=\"input flex\" style={{ marginBottom: px(20), width: px(400) }}>\r\n                        <input type=\"text\" style={{ height: px(45) }}\r\n                            value={reName}\r\n                            onChange={(value) => {\r\n                                setReName(value.target.value)\r\n\r\n                            }}\r\n                            placeholder={`${selectDevice.name} Device Name`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"input flex\" style={{ marginBottom: px(60), width: px(400) }}>\r\n                        <input type=\"text\" style={{ height: px(45) }}\r\n                            value={examRoom}\r\n                            onChange={(value) => {\r\n                                setExamRoom(value.target.value)\r\n\r\n                            }}\r\n                            placeholder={`Exam Room Name`}\r\n                        />\r\n                    </div>\r\n                    <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\r\n                        on the Exam Room. Write<br /> the name\r\n                        on the sticker provided so it is easy\r\n                        to select<br /> your device in the future.</div>\r\n                </div>\r\n                <div className=\"addDeviceFoot flex\">\r\n                    <div className=\"btn\"\r\n                        onClick={() => {\r\n                            addDevice()\r\n                            setSelectDevice(null)\r\n                            setSelectHardwareType('add')\r\n\r\n                        }}\r\n                    >\r\n                        <p className='btnText'>Add Another Device</p>\r\n                    </div>\r\n                    <div className=\"btn\"\r\n                        onClick={() => {\r\n                            let newDevice = addDevice()\r\n                            setSelectHardwareType(selectDevice.deviceType)\r\n\r\n\r\n                            electronStore.set(`${storage.lastOrganization}-${storage.userId}-${selectDevice.deviceType}-selectDeviceInfo`, newDevice)\r\n                            setSelectDevice(null)\r\n                        }}\r\n                    >\r\n                        <p className='btnText'>Finish</p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        } else {\r\n            if (noUSB) {\r\n                return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\r\n                    <img src={redclose} alt=\"\" style={{ width: px(80) }} />\r\n\r\n                    <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\r\n                </div>\r\n            } else {\r\n                if (devicesList.length === 0) {\r\n                    let options = (val) => {\r\n                        let arr = []\r\n                        if (val === 1) {\r\n                            arr = [mellaPro, mellaHome, biggiePro, biggieHome, rfid]\r\n                        } else {\r\n                            arr = [possum, maeBowl, other]\r\n                        }\r\n                        let option = arr.map((item, index) => {\r\n                            let imgWidth = px(80)\r\n                            imgWidth = index === 2 ? px(65) : imgWidth\r\n                            return (<li key={index.toString()} style={{ margin: `${px(20)}px` }}>\r\n                                <div className=\"searchType-item\" key={index} >\r\n                                    <img src={item} alt=\"\" width={imgWidth} />\r\n                                </div>\r\n                            </li>)\r\n                        })\r\n                        return (\r\n                            <ul>\r\n                                {option}\r\n                            </ul>\r\n                        )\r\n                    }\r\n                    return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n\r\n\r\n                        <div className=\"addDeviceContent\">\r\n                            <div className=\"blueAnimal\" style={{ marginTop: px(50) }}>\r\n                                {/* <img src={blueSearch} alt=\"\" width={px(150)} /> */}\r\n                                <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                                    <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"openText\" style={{ margin: `${px(15)}px 0` }}>\r\n                                Make sure your bluetooth and wifi is<br /> activated and turn on your device.\r\n                            </div>\r\n                            <div className=\"btn\" style={{ width: px(350), height: px(40) }}>\r\n                                <div className=\"btnText\">\r\n                                    Scan For Devices\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"or\" style={{ marginTop: px(10), marginBottom: px(15) }}>\r\n                                Or\r\n                            </div>\r\n                            <div className=\"select\">\r\n                                Select device type to\r\n                            </div>\r\n                            <div className=\"add\">\r\n                                add manually\r\n                            </div>\r\n\r\n                            <div className=\"item\">\r\n                                {options(1)}\r\n                                {options(2)}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\r\n                          \r\n                            <p>\r\n                                {'searching...'}\r\n                            </p>\r\n                        </div> */}\r\n                    </div>\r\n                } else {\r\n                    let options = devicesList.map((item, index) => {\r\n\r\n                        let flog = saveDeviceMac.some((device, index) => {\r\n                            return device === item.macId\r\n                        })\r\n                        let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\r\n                        return <li\r\n                            className='flex'\r\n                            style={{ marginBottom: px(20) }}\r\n                            key={`${index}`}\r\n                            onClick={() => {\r\n                                if (!flog) {\r\n                                    setSelectDevice(item)\r\n\r\n                                } else {\r\n                                    message.destroy();\r\n                                    message.error('This device has already been added')\r\n                                }\r\n\r\n                            }}\r\n                        >\r\n\r\n                            <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\r\n                            <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\r\n\r\n                        </li>\r\n                    })\r\n                    return <div className='deviceList ' >\r\n                        <ul>\r\n                            {options}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='addDevice' style={{ height: bodyHeight }}>\r\n            <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\r\n                {topText}\r\n            </div>\r\n\r\n            {body()}\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAddDevice.propTypes = {\r\n    bodyHeight: PropTypes.number,\r\n    devicesTypeList: PropTypes.array\r\n}\r\n//默认值\r\nAddDevice.defaultProps = {\r\n    bodyHeight: 0,\r\n    devicesTypeList: []\r\n}\r\nexport default connect(\r\n    state => ({\r\n        hardwareReducer: state.hardwareReduce,\r\n        isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\r\n        receiveBroadcastHardwareInfo: state.hardwareReduce.receiveBroadcastHardwareInfo,\r\n        hardwareList: state.hardwareReduce.hardwareList,\r\n    }),\r\n    { setReceiveBroadcastHardwareInfoFun, setHardwareList, changeselectHardwareIndex, setSelectHardwareType, selectHardwareList }\r\n)(AddDevice)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scheduledPetsPage\\index.js",["1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport PetTable from '../../components/petTable';\r\nimport './scheduled.less'\r\nimport { petDetailInfoFun, setMenuNum, setPetListArrFun } from '../../store/actions';\r\nimport moment from 'moment'\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\n\r\n\r\nlet storage = window.localStorage;\r\nconst ScheduledPetPage = ({ bodyHeight, petDetailInfoFun, setMenuNum, setPetListArrFun }) => {\r\n\r\n    //初始化获取宠物列表数据\r\n    const [petListArr, setPetListArr] = useState([])\r\n    //定义宠物列表是否加载中\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const [spin, setSpin] = useState(false)\r\n\r\n    useEffect(() => {\r\n        //获取宠物列表\r\n        _getExam()\r\n    }, [])\r\n    const _getExam = async () => {\r\n        console.log('进来了');\r\n\r\n\r\n        let startDay = moment().startOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n        let endDay = moment().endOf('day').format('YYYY-MM-DD HH:mm:ss')\r\n        let chazhi = new Date().getTimezoneOffset()\r\n        let newstartTime = moment(startDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n        let newendTime = moment(endDay).add(chazhi, 'm').format('YYYY-MM-DD HH:mm:ss');\r\n\r\n\r\n        let params = {\r\n            doctorId: storage.userId,\r\n            offset: 0,\r\n            size: 100,\r\n            subStartTime: newstartTime,\r\n            subEndTime: newendTime\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n\r\n\r\n        console.log('查询宠物的入参', params);\r\n        const isUnKnow = (val) => {\r\n            if (val) {\r\n                return val\r\n            } else {\r\n                return 'unknown'\r\n            }\r\n        }\r\n        setLoading(true)\r\n\r\n        fetchRequest('/new/pet/subscribe/page', 'POST', params)\r\n\r\n            .then(res => {\r\n                if (res.flag === true && res.data) {\r\n                    let data = []\r\n                    let oldList = res.data.list\r\n                    for (let i = 0; i < oldList.length; i++) {\r\n                        let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n                            h2tLength, torsoLength } = oldList[i]\r\n                        let owner = ''\r\n                        patientId = isUnKnow(patientId)\r\n                        petName = isUnKnow(petName)\r\n                        breedName = isUnKnow(breedName)\r\n                        age = isUnKnow(age)\r\n                        weight = isUnKnow(weight)\r\n                        if (!firstName) {\r\n                            firstName = ''\r\n                        }\r\n                        if (!lastName) {\r\n                            lastName = ''\r\n                        }\r\n                        if (lastName === '' && firstName === '') {\r\n                            owner = 'unknown'\r\n                        } else {\r\n                            owner = `${lastName} ${firstName}`\r\n                        }\r\n                        createTime = moment(createTime).format('X')\r\n                        let petGender = ''\r\n                        switch (`${gender}`) {\r\n                            case '1': petGender = 'F'\r\n\r\n                                break;\r\n                            case '0': petGender = \"M\"\r\n                                break;\r\n                            default: petGender = 'unknown'\r\n                                break;\r\n                        }\r\n                        let petAge = 'unknown'\r\n                        if (birthday) {\r\n                            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n                        }\r\n\r\n                        let json = {\r\n                            insertedAt: createTime,\r\n                            patientId,\r\n                            petName,\r\n                            owner,\r\n                            breed: breedName,\r\n                            gender: petGender,\r\n                            age: petAge,\r\n                            petId,\r\n                            id: i,\r\n                            weight,\r\n                            rfid,\r\n                            url,\r\n                            speciesId,\r\n                            l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n                            h2tLength, torsoLength,\r\n                            pethubId, macId,\r\n\r\n                        }\r\n                        data.push(json)\r\n\r\n                    }\r\n                    data.sort((a, b) => {\r\n                        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n                    })\r\n                    console.log('列表的数据：', data);\r\n                    setPetListArr(data)\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    setLoading(false)\r\n                    setSpin(false)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                setLoading(false)\r\n                setSpin(false)\r\n            })\r\n\r\n\r\n\r\n    }\r\n    const _refresh = () => {\r\n        console.log('点击了');\r\n        setSpin(true)\r\n        _getExam()\r\n    }\r\n\r\n    return (\r\n        <div id='scheduled' style={{ height: bodyHeight }}>\r\n            <div className=\"allPetHeard\">\r\n                <div className=\"addDeviceTitle flex\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>\r\n                    <div className=\"title\">Scheduled Patients</div>\r\n                    <div className=\"refresh flex\"\r\n                        style={{ fontSize: px(25), marginLeft: px(10) }}\r\n                    >\r\n                        <SyncOutlined onClick={_refresh} spin={spin} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(80) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(40), width: px(200) }}\r\n                        onClick={() => {\r\n                            let json = {\r\n                                isWalkIn: true,\r\n                                petId: null,\r\n                                petName: null,\r\n                                owner: null,\r\n                                breed: null,\r\n\r\n                            }\r\n                            petDetailInfoFun(json)\r\n                            setMenuNum(\"1\")\r\n                        }}\r\n                    >\r\n                        <div className=\"walkText\">Walk-In</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"body111\" style={{ height: bodyHeight - px(100) }}>\r\n\r\n                <PetTable\r\n                    // bodyHeight={bodyHeight - devicesTitleHeight}\r\n                    petListArr={petListArr}\r\n                    loading={loading}\r\n                    resetPetList={(val) => setPetListArr(val)}\r\n                    type={'scheduled'}\r\n\r\n                />\r\n                <div className=\"hread flex\" style={{ alignItem: 'center' }}>\r\n                    <div className=\"hread1\" style={{ marginTop: px(10), justifyContent: 'flex-end', display: 'flex', }}>\r\n                        <div className=\"walkin flex\"\r\n                            style={{ borderRadius: px(50), height: px(45), fontSize: px(20), marginRight: px(10) }}\r\n                            onClick={() => {\r\n                                setMenuNum('AddScheduledPet')\r\n\r\n                            }}\r\n                        >Create New Scheduled</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nScheduledPetPage.propTypes = {\r\n\r\n}\r\n//默认值\r\nScheduledPetPage.defaultProps = {\r\n    bodyHeight: 0,\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, setPetListArrFun }\r\n)(ScheduledPetPage)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\clinicalStudyPage\\index.jsx",["1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098"],"import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Layout, message, Input, Modal, Table, Popconfirm, Select } from \"antd\";\nimport ReactECharts from \"echarts-for-react\";\nimport propTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport Draggable from \"react-draggable\";\nimport { px, mTop } from \"../../utils/px\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport electronStore from \"../../utils/electronStore\";\nimport _ from \"lodash\";\nimport edit from \"./../../assets/images/edit.png\";\nimport del from \"./../../assets/images/del.png\";\nimport start from \"./../../assets/img/start.png\";\nimport placement_gang from \"./../../assets/images/placement_gang.png\";\nimport placement_er from \"./../../assets/images/placement_er.png\";\nimport palcement_ye from \"./../../assets/images/palcement_ye.png\";\nimport { setTest } from \"../../store/actions\";\nimport \"./clinical.less\";\nimport { fetchRequest } from \"../../utils/FetchUtil1\";\nimport { fetchRequest3 } from \"../../utils/FetchUtil3\";\nlet resyncDeviceIsClick = true; //用于控制多次点击重新配对按钮\nlet storage = window.localStorage;\n\nlet mellaMeasureNumCopy = 0;\n\n//定义echarts的数据个数\nconst { Option } = Select;\nlet saveHistoryTime = null;\nconst ClinicalStudy = ({\n  bodyHeight,\n  mellaConnectStatus,\n  mellaMeasureValue,\n  mellaMeasureNum,\n  petDetailInfo,\n  setTest,\n  biggieBodyWeight,\n  biggieUnit,\n}) => {\n  const [units, setUnits] = useState(\"\");\n  const [temperature, setTemp] = useState(0);\n  const [showHistoryEchart, setShowHistoryEchart] = useState(false);\n  const [echarsData, setEcharsData] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [echarsData1, setEcharsData1] = useState({\n    Eci: [],\n    wen0: [],\n    wen1: [],\n  });\n  const [mellaStatus, setMellaStatus] = useState(\"disconnected\");\n  const [roomTemperature, setRoomTemperature] = useState(\"\");\n  const [referenceRectalTemperature, setReferenceRectalTemperature] =\n    useState(\"\");\n  const [bodyConditionScore, setBodyConditionScore] = useState(\"\");\n  const [furLength, setFurLength] = useState(\"\");\n  const [heartRate, setHeartRate] = useState(\"\");\n  const [bloodPressure, setBloodPressure] = useState(\"\");\n  const [respiratoryRate, setRespiratoryRate] = useState(\"\");\n  const [notes, setNotes] = useState(\"\");\n  const [isPetCharacteristics, setIsPetCharacteristics] = useState(false);\n  const [historyData, setHistoryData] = useState([]);\n  const [editRectal, setEditRectal] = useState(\"\");\n  const [editRoomTemperature, setEditRoomTemperature] = useState(\"\");\n  const [editHeartRate, setEditHeartRate] = useState(\"\");\n  //定义变量 editBloodPressure,  editRespiratoryRate, editVisible: true, editId: key, memo: record.note, editBodyConditionScore, editFurLength\n  const [editBloodPressure, setEditBloodPressure] = useState(\"\");\n  const [editRespiratoryRate, setEditRespiratoryRate] = useState(\"\");\n  const [editVisible, setEditVisible] = useState(false);\n  const [editId, setEditId] = useState(\"\");\n  const [editMemo, setEditMemo] = useState(\"\");\n  const [editBodyConditionScore, setEditBodyConditionScore] = useState(\"\");\n  const [editFurLength, setEditFurLength] = useState(\"\");\n  const [tipSpin, setTipSpin] = useState(false);\n  const [tip, setTip] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [disabled, setDisabled] = useState(true);\n  const [bounds, setBounds] = useState({\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n  });\n  const [memo, setMemo] = useState(\"\");\n  const [windowWidth, setWindowWidth] = useState(px(500));\n  const [WeightValue, setWeightValue] = useState('');\n\n  const echartsElement = useRef(null);\n  const clinicalRef = useRef(null);\n  //分辨率变化\n  const chartsBox = useCallback((node) => {\n    if (node !== null && echartsElement.current) {\n      setTimeout(() => {\n        echartsElement.current.getEchartsInstance().resize({ height: px(380) });\n      }, 1000)\n    }\n  }, [window.screen.availWidth]);\n  //窗口宽高变化\n  const resize = () => {\n    if (clinicalRef.current && clinicalRef.current.offsetWidth) {\n      setWindowWidth(clinicalRef.current.offsetWidth);\n    }\n  };\n  const addClinical = () => {\n    console.log(\"调用接口进行保存数据\");\n    let emerData = [];\n    let { Eci, wen0, wen1 } = echarsData;\n    for (let i = 0; i < wen0.length; i++) {\n      const element = wen0[i];\n      let str = {\n        data0: element,\n        data1: wen1[i],\n      };\n      emerData.push(str);\n    }\n\n    saveHistoryTime && clearTimeout(saveHistoryTime);\n    saveHistoryTime = setTimeout(() => {\n      let BCS =\n        bodyConditionScore === \"\" ? null : parseFloat(bodyConditionScore);\n      let hrartR = heartRate === \"\" ? null : parseFloat(heartRate);\n      let respireatoryR =\n        respiratoryRate === \"\" ? null : parseFloat(respiratoryRate);\n\n      let roomT =\n        roomTemperature === \"\"\n          ? null\n          : ((parseFloat(roomTemperature) - 32) / 1.8).toFixed(2);\n\n      let referenceT =\n        referenceRectalTemperature === \"\"\n          ? null\n          : ((parseFloat(referenceRectalTemperature) - 32) / 1.8).toFixed(2);\n\n      let furL = furLength === \"\" ? null : parseFloat(furLength);\n\n      let petVitalId = 1;\n\n      let datas = {\n        temperature: parseFloat(temperature), //测量温度\n        roomTemperature: roomT, //室温\n        bodyConditionScore: BCS, //身体状况评分\n        heartRate: hrartR, //心率\n        respiratoryRate: respireatoryR, //呼吸率\n        referenceRectalTemperature: referenceT, //参考腹部温度\n        furLength: furL, //毛发长度\n        bloodPressure: bloodPressure, //血压\n        memo: notes,\n        petVitalTypeId: petVitalId,\n        clinicalDataEntityList: emerData,\n        anusTemperature: referenceT\n      };\n      if (storage.roleId === `1`) {\n        datas.userId = storage.userId;\n      } else {\n        datas.doctorId = storage.userId;\n        datas.userId = storage.userId;\n      }\n\n      let updatePetInfoData = {\n        weight: (WeightValue / 2.2046).toFixed(2)\n      }\n      if (storage.lastOrganization) {\n        updatePetInfoData.organizationId = storage.lastOrganization\n      }\n\n      let { petId, isWalkIn } = petDetailInfo;\n      if (petId && !isWalkIn) {\n        datas.petId = petId;\n        console.log(\"入参数据:\", datas);\n        fetchRequest(`/clinical/addAllClinical`, \"POST\", datas)\n          .then((res) => {\n            console.log(res);\n\n            if (res.flag === true) {\n              console.log(\"上传成功\");\n              message.success(\"Uploaded successfully\");\n              _getHistory11(petDetailInfo.petId);\n            } else {\n              console.log(\"上传失败\");\n\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n            message.error(\"upload failed\");\n          });\n      } else if (isWalkIn) {\n        console.log(\"温度数据保存入参：\", datas);\n\n        fetchRequest(`/clinical/addAllClinical`, \"POST\", datas)\n          .then((res) => {\n            if (res.flag === true) {\n              message.success(\"Uploaded successfully\");\n\n              _getEmergencyHistory();\n            } else {\n              console.log(\"上传失败\");\n              message.error(\"upload failed\");\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n            message.error(err);\n          });\n      }\n      if (WeightValue !== '') {\n        fetchRequest(`/pet/updatePetInfo/${petId}`, 'POST', updatePetInfoData)\n          .then((res) => {\n            if (res.flag === true) {\n\n            } else {\n              message.error('Failed to update pet weight');\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          })\n      }\n    }, 500);\n  };\n  const _getHistory11 = (petId) => {\n    let historys = [];\n    setLoading(true);\n    fetchRequest(`/pet/getPetExamAndClinicalByPetId/${petId}`, \"GET\", \"\") //userID要自动的\n      .then((res) => {\n        // console.log(\"获取历史记录\", res);\n        setLoading(false);\n\n        if (res.flag === true) {\n          let datas = res.data;\n          console.log(\"-------\", datas);\n          for (let i = datas.length - 1; i >= 0; i--) {\n            let data = datas[i];\n\n            let {\n              petId,\n              examId,\n              clinicalDatagroupId,\n              userId,\n              petVitalTypeId,\n              temperature,\n              roomTemperature,\n              bloodPressure,\n              memo,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              createTime,\n              clinicalDataEntity,\n              modifiedTime,\n            } = data;\n\n            if (!clinicalDatagroupId) {\n              continue;\n            }\n            let Tem = temperature;\n            if (clinicalDataEntity) {\n              Tem = Tem || clinicalDataEntity.data0;\n            }\n            // console.log('==============', Tem);\n            Tem = Tem ? Tem : 0;\n\n            let time = null;\n            if (\n              modifiedTime &&\n              `${modifiedTime}` !== \"\" &&\n              `${modifiedTime}` !== `undefined`\n            ) {\n              time = modifiedTime;\n            } else {\n              time = createTime;\n            }\n            let json = {\n              time,\n              Temp: Tem,\n              placement: petVitalTypeId,\n              note: memo,\n              historyId: examId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n            };\n            historys.push(json);\n          }\n          console.log(\"---\", historys);\n          let historyData = [];\n          for (let i = 0; i < historys.length; i++) {\n            let history = historys[i];\n            let {\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              examId,\n            } = history;\n            // console.log('--------', history.placement);\n            let placement = history.placement;\n            if (placement === null || placement === \"\") {\n              placement = 1;\n            }\n            let str = {\n              date: moment(history.time).format(\"MMM DD\"),\n              time: moment(history.time).format(\"hh:mm A\"),\n              temp: history.Temp,\n              placement,\n              note: history.note,\n              historyId: history.historyId,\n              bodyConditionScore,\n              heartRate,\n              respiratoryRate,\n              referenceRectalTemperature,\n              furLength,\n              roomTemperature,\n              bloodPressure,\n              petId,\n              userId,\n              key: examId,\n            };\n            historyData.push(str);\n          }\n          // this.setState({\n          //     historyData\n          // })\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const _getEmergencyHistory = () => {\n    //封装的日期排序方法\n    function ForwardRankingDate(data, p) {\n      for (let i = 0; i < data.length - 1; i++) {\n        for (let j = 0; j < data.length - 1 - i; j++) {\n          if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\n            var temp = data[j];\n            data[j] = data[j + 1];\n            data[j + 1] = temp;\n          }\n        }\n      }\n      return data;\n    }\n    let historys = [];\n    setLoading(true);\n    fetchRequest(`/pet/getPetExamByDoctorId/${storage.userId}`, \"GET\", \"\") //userID要自动的\n      .then((res) => {\n        setLoading(false);\n        if (res.flag === true) {\n          let datas = res.data;\n          for (let i = datas.length - 1; i >= 0; i--) {\n            if (datas[i].petId === null) {\n              let {\n                petId,\n                examId,\n                userId,\n                petVitalTypeId,\n                temperature,\n                roomTemperature,\n                bloodPressure,\n                memo,\n                clinicalDatagroupId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                createTime,\n                clinicalDataEntity,\n              } = datas[i];\n              let Tem = temperature;\n              try {\n                Tem = temperature || clinicalDataEntity.data0;\n              } catch (error) {\n                console.log(\"抛出的异常\", error);\n              }\n\n              let str = {\n                clinicalDatagroupId,\n                createTime,\n                date: moment(createTime).format(\"MMM DD\"),\n                time: moment(createTime).format(\"hh:mm A\"),\n                temp: parseInt(Tem * 10) / 10,\n                placement: petVitalTypeId,\n                note: memo,\n                historyId: examId,\n                bodyConditionScore,\n                heartRate,\n                respiratoryRate,\n                referenceRectalTemperature,\n                furLength,\n                roomTemperature,\n                bloodPressure,\n                petId,\n                userId,\n              };\n\n              historys.push(str);\n            }\n          }\n\n          //把所有数据拿完后做个排序\n\n          let historyData = ForwardRankingDate(historys, \"createTime\");\n          console.log(\"historyData:\", historyData);\n          setHistoryData(historyData);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n      });\n  };\n  const getOption = () => {\n    let option = {};\n    try {\n      let min, max;\n      if (units === \"℃\") {\n        min = 25;\n        max = 45;\n      } else {\n        min = 75;\n        max = 115;\n      }\n      let { Eci, wen0, wen1 } = _.isEmpty(echarsData1.Eci)\n        ? echarsData\n        : echarsData1;\n      option = {\n        color: [\"#81b22f\"],\n        tooltip: {\n          /*返回需要的信息*/\n          trigger: \"axis\",\n          triggerOn: \"mousemove\",\n          enterable: true,\n          formatter: function (param) {\n            var value = param[0].value;\n            // console.log('---valuez值', value, units);\n            if (\n              (units === \"℉\" && parseInt(value) <= 32) ||\n              (units === \"℃\" && parseInt(value) == 0)\n            ) {\n              return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:--</div>`;\n            }\n            return `<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 16px;padding-bottom: 7px;margin-bottom: 7px;\">Temp:${value.toFixed(\n              1\n            )}${units}</div>`;\n          },\n        },\n        xAxis: {\n          name: \"SPL\",\n          nameLocation: \"end\",\n          nameTextStyle: {\n            align: \"left\",\n          },\n          type: \"category\",\n          data: Eci,\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          // 设置X轴数据旋转倾斜\n          axisLabel: {\n            rotate: 0, // 旋转角度\n            interval: 29, //设置X轴数据间隔几个显示一个，为0表示都显示\n          },\n        },\n        yAxis: {\n          name: \"temperature\",\n          type: \"value\",\n          min, // 设置y轴刻度的最小值\n          max, // 设置y轴刻度的最大值\n          splitNumber: 0, // 设置y轴刻度间隔个数\n          nameTextStyle: {\n            padding: [0, 0, 0, 8],\n            // backgroundColor: 'pink',\n            width: \"1200px\",\n            // fontSize: 20,\n            align: \"left\",\n          },\n\n          axisLine: {\n            lineStyle: {\n              // 设置x轴颜色\n              color: \"#A0A0A0\",\n              show: true,\n            },\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        series: [\n          {\n            name: \"模拟数据\",\n            type: \"line\",\n            showSymbol: false,\n            hoverAnimation: false,\n            // data: [44, 40, 34, 29, 31, 33, 39, 39, 33, 25, 26, 32, 38, 39, 25, 30, 37],\n            data: wen0,\n            smooth: 0.5,\n            symbol: \"none\",\n            // itemStyle: {\n            //     normal: {\n\n            //     }\n            // }\n            lineStyle: {\n              // 系列级个性化折线样式\n              width: 2,\n              type: \"solid\",\n              color: {\n                type: \"linear\",\n                x: 0,\n                y: 1,\n                x2: 0,\n                y2: 0,\n                colorStops: [\n                  {\n                    offset: 0.5,\n                    color: \"#47C2ED\", // 0% 处的颜色  蓝\n                  },\n                  {\n                    offset: 1,\n                    color: \"#78D35D\", // 50% 处的颜色  绿\n                  },\n                  // {\n                  //   offset: 1, color: 'red' // 100% 处的颜色   红\n                  // }\n                ],\n                globalCoord: false, // 缺省为 false\n              },\n            },\n          },\n        ],\n      };\n    } catch (error) { }\n\n    return option;\n  };\n  const _status = () => {\n    let text = \"\",\n      unit = \"\",\n      temColor = \"\";\n    let Temp = parseFloat(temperature);\n    if (mellaConnectStatus === \"disconnected\") {\n      if (!showHistoryEchart) {\n        Temp = \"\";\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      } else {\n        text = \"disconnected\";\n        temColor = \"#3B3A3A\";\n      }\n    } else if (mellaConnectStatus === \"connected\") {\n      Temp = \"\";\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n    } else {\n      text = \"connected\";\n      temColor = \"#3B3A3A\";\n      if (Temp > 15) {\n        unit = units;\n        if (Temp > 39) {\n          text = \"High\";\n          temColor = \"#E1206D\";\n        } else if (Temp < 31) {\n          text = \"Low\";\n          temColor = \"#47C2ED\";\n        } else {\n          text = \"Normal\";\n          temColor = \"#78D35D\";\n        }\n      }\n    }\n    let temp = null;\n\n    if (`${Temp}` !== \"NaN\" && Temp) {\n      temp =\n        units === \"℉\" ? parseInt((Temp * 1.8 + 32) * 10) / 10 : Temp.toFixed(1);\n    }\n    let lowFlog = false;\n    if (unit === \"℃\") {\n      if (temp < 24.8) {\n        lowFlog = true;\n      }\n    } else {\n      if (temp < 76.6) {\n        lowFlog = true;\n      }\n    }\n\n    return (\n      <div\n        className=\"Tem\"\n        style={{\n          color: temColor,\n          right: px(100),\n          bottom: mTop(120),\n          pointerEvents: \"none\",\n        }}\n      >\n        {mellaConnectStatus !== \"isMeasuring\" ? (\n          showHistoryEchart ? (\n            <>\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {units}\n                </sup>\n              </span>\n              <br />\n              {/* <span style={{ fontSize: px(22) }}>{text}</span> */}\n\n              <span\n                style={{\n                  fontSize: px(32),\n                  color: \"#8a8a8a\",\n                  fontWeight: \"bold\",\n                }}\n              >{`History`}</span>\n            </>\n          ) : (\n            <>\n              <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n                {temp < 3 && !temp ? null : temp}{\" \"}\n                <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>\n                  {unit}\n                </sup>\n              </span>\n              <br />\n              <span style={{ fontSize: px(32), fontWeight: \"bold\" }}>\n                {text}\n              </span>\n            </>\n          )\n        ) : lowFlog ? (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {\"Low\"}\n            </span>\n            <br />\n          </>\n        ) : (\n          <>\n            <span style={{ fontSize: px(46), fontWeight: \"bold\" }}>\n              {temp}{\" \"}\n              <sup style={{ fontSize: px(28), fontWeight: \"bold\" }}>{unit}</sup>\n            </span>\n            <br />\n          </>\n        )}\n      </div>\n    );\n  };\n  const handleChange = (index) => {\n    console.log(\"---------\", index);\n    setFurLength(index);\n  };\n  const _petCharacteristics = () => {\n    let placeholder = \"\";\n    switch (`${furLength}`) {\n      case \"1\":\n        placeholder = \"smooth\";\n        break;\n      case \"2\":\n        placeholder = \"short\";\n        break;\n      case \"3\":\n        placeholder = \"medium\";\n        break;\n      case \"4\":\n        placeholder = \"long\";\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div\n        className=\"petChaeacteristics\"\n        style={{ paddingLeft: px(10), paddingRight: px(10), height: \"100%\" }}\n      >\n        <div className=\"child\" style={{ marginTop: mTop(30) }}>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Room Temperature: </p>\n            <Input\n              className=\"inp\"\n              // style={{ border: 'none', outline: 'medium' }}\n              // style={{ width: px(105), height: mTop(33), fontSize: px(18), marginRight: px(6) }}\n              value={roomTemperature}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRoomTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Reference Rectal Temperature: </p>\n            <Input\n              className=\"inp\"\n              // style={{ border: 'none', outline: 'medium' }}\n\n              value={`${referenceRectalTemperature}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setReferenceRectalTemperature(str);\n              }}\n              suffix={'℉'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Body Condition Score: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bodyConditionScore}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBodyConditionScore(str);\n              }}\n              maxLength={8}\n            />\n          </div>\n          <div className=\"furLength\">\n            <p style={{ width: \"150px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={handleChange}\n              style={{\n                width: \"105px\",\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={placeholder}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n        </div>\n        <div className=\"child\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Heart Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${heartRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setHeartRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Blood Pressure: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={bloodPressure}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setBloodPressure(str);\n              }}\n              suffix={'mm'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n        <div className=\"child\" style={{ marginBottom: px(40) }}>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              position: \"relative\",\n            }}\n          >\n            <p style={{ width: \"150px\" }}>Respiratory Rate: </p>\n            <Input\n              className=\"inp\"\n              style={{ border: \"none\", outline: \"medium\" }}\n              value={`${respiratoryRate}`}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setRespiratoryRate(str);\n              }}\n              suffix={'bpm'}\n              maxLength={8}\n            />\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n            <p style={{ width: '150px' }}>Weight:  </p>\n            <Input className='inp'\n              style={{ border: 'none', outline: 'medium' }}\n              value={WeightValue}\n              bordered={false}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d^\\.]+/g, '').replace(/\\.{2,}/g, \".\").replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\").replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, '$1$2.$3')\n                setWeightValue(str);\n              }}\n              suffix={'Ibs'}\n              maxLength={8}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  const _history = () => {\n    const _del = (key, record) => {\n      // console.log(\"删除\", key, record);\n      /**------------这里还要删除后台的数据------------ */\n      fetchRequest(`/pet/deletePetExamByExamId/${key}`, \"DELETE\").then(\n        (res) => {\n          if (res.flag === true) {\n            const historyData1 = [...historyData];\n            console.log(\"删除成功\", historyData1);\n            setHistoryData(\n              historyData1.filter((item) => item.historyId !== key)\n            );\n          } else {\n            console.log(\"删除失败\");\n          }\n        }\n      );\n    };\n    const _edit = (key, record) => {\n      let {\n        heartRate,\n        bloodPressure,\n        respiratoryRate,\n        referenceRectalTemperature,\n        roomTemperature,\n        bodyConditionScore,\n        furLength,\n        note,\n      } = record;\n      console.log(\"转换前：\", record);\n      let editHeartRate =\n        heartRate !== null && heartRate !== undefined ? heartRate : \"\";\n      let editBloodPressure =\n        bloodPressure !== null && bloodPressure !== undefined\n          ? bloodPressure\n          : \"\";\n      let editRespiratoryRate =\n        respiratoryRate !== null && respiratoryRate !== undefined\n          ? respiratoryRate\n          : \"\";\n      let editRectal =\n        referenceRectalTemperature !== null &&\n          referenceRectalTemperature !== undefined\n          ? (referenceRectalTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editRoomTemperature =\n        roomTemperature !== null && roomTemperature !== undefined\n          ? (roomTemperature * 1.8 + 32).toFixed(1)\n          : \"\";\n      let editBodyConditionScore =\n        bodyConditionScore !== null && bodyConditionScore !== undefined\n          ? bodyConditionScore\n          : \"\";\n      let editFurLength = furLength;\n      let mome = note ? note : \"\";\n\n      console.log(\n        editRectal,\n        editRoomTemperature,\n        editHeartRate,\n        editBloodPressure,\n        editRespiratoryRate\n      );\n\n      //更新editRectal,editRoomTemperature,editHeartRate,editBloodPressure,editRespiratoryRate,editVisible: true,editId: key,memo: record.note,editBodyConditionScore,editFurLength\n      setEditRectal(editRectal);\n      setEditRoomTemperature(editRoomTemperature);\n      setEditHeartRate(editHeartRate);\n      setEditBloodPressure(editBloodPressure);\n      setEditRespiratoryRate(editRespiratoryRate);\n      setEditVisible(true);\n      setEditId(key);\n      setEditMemo(record.note);\n      setEditBodyConditionScore(editBodyConditionScore);\n      setEditFurLength(editFurLength);\n      setMemo(mome);\n    };\n    const see = (id, record) => {\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      console.log(id, record);\n      setTip(\"data is loading\");\n      setTipSpin(true);\n      fetchRequest3(`/exam/getClinicalDataByExamId/${id}`, \"GET\")\n        .then((res) => {\n          console.log(\"此条记录的全部数据：\", res);\n          setTip(\"\");\n          setTipSpin(false);\n          if (res.flag) {\n            let datas = res.data.clinicalDataEntityList;\n            if (datas) {\n              let echarsData = {\n                Eci: [],\n                wen0: [],\n                wen1: [],\n              };\n              let { wen0, wen1, Eci } = echarsData;\n              for (let i = 0; i < datas.length; i++) {\n                let { data0, data1 } = datas[i];\n\n                Eci.push(i);\n                if (units === \"℃\") {\n                  wen0.push(data0);\n                  wen1.push(data1);\n                } else {\n                  wen0.push(data0 * 1.8 + 32);\n                  wen1.push(data1 * 1.8 + 32);\n                }\n              }\n              let Temp = datas[datas.length - 1].data0 || \"\";\n              console.log(\"----------------\", Temp);\n              setEcharsData(echarsData);\n              setTemp(Temp);\n              setShowHistoryEchart(true);\n            }\n          }\n        })\n        .catch((err) => {\n          setTip(\"\");\n          setTipSpin(false);\n          console.log(err);\n        });\n    };\n    const isflog = window.screen.height < 1000 ? true : false;\n\n    const columns = [\n      {\n        title: \"\",\n        dataIndex: \"operation\",\n        key: \"operation\",\n        width: \"16%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n\n        render: (text, record, index) => {\n          // console.log('狩猎:', text, record, index);\n          //record:\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                alignItems: \"center\",\n                padding: `${px(18)}px 0`,\n              }}\n            >\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => _del(record.historyId, record)}\n              >\n                <img src={del} alt=\"\" style={{ width: px(25) }} />\n              </Popconfirm>\n              {petDetailInfo.isWalkIn ? (\n                <div\n                  className=\"assign\"\n                  style={{\n                    width: mTop(60),\n                    height: mTop(28),\n                    fontSize: px(14),\n                  }}\n                  onClick={() => {\n                    console.log(text, record, index);\n                    this.setState({\n                      visible: true,\n                      seleceEmergencies: record,\n                    });\n                  }}\n                >\n                  Assign\n                </div>\n              ) : (\n                <>\n                  <img\n                    src={edit}\n                    alt=\"\"\n                    style={{ width: px(25) }}\n                    onClick={() => _edit(record.historyId, record)}\n                  />\n\n                  <img\n                    src={start}\n                    alt=\"\"\n                    style={{ width: px(25) }}\n                    onClick={() => see(record.historyId, record)}\n                  />\n                </>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Date\",\n        dataIndex: \"date\",\n        key: \"date\",\n        width: \"14%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: \"Time\",\n        dataIndex: \"time\",\n        key: \"time\",\n        width: \"14%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ textAlign: \"center\" }}>{text}</p>;\n        },\n      },\n      {\n        title: `Temp(${units})`,\n        // title: `Temp(℉)`,\n        key: \"temp\",\n        dataIndex: \"temp\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        width: \"14%\",\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log(text, record);\n\n          /**\n           * bag：温度数值前的圆圈的背景颜色\n           * tem：展示的温度\n           * endvalue:将从后台得到的数据全部转化成华氏度\n           * min：猫的正常体温的左区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           * max：猫的正常体温的右区间,单位℉，后期要做的猫狗都行，这需要告诉我此宠物是猫还是狗\n           *\n           */\n\n          let bag = \"\",\n            tem = \"\";\n\n          let endValue =\n            text > 55 ? text : parseInt((text * 1.8 + 32) * 10) / 10;\n          let min = 100.4,\n            max = 102.56;\n\n          if (endValue > max) {\n            bag = \"#E1206D\";\n          } else if (endValue < min) {\n            bag = \"#98DA86\";\n          } else {\n            bag = \"#58BDE6\";\n          }\n\n          if (units === \"℃\") {\n            if (text) {\n              tem = `${text}${units}`;\n              if (text > 55) {\n                tem = `${((text - 32) / 1.8).toFixed(1)}${units}`;\n              } else {\n                tem = `${text.toFixed(1)}${units}`;\n              }\n            }\n          } else {\n            if (text) {\n              if (text > 55) {\n                tem = `${text}${units}`;\n              } else {\n                tem = `${parseInt((text * 1.8 + 32) * 10) / 10}${units}`;\n              }\n            }\n          }\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {tem ? (\n                <div\n                  style={{\n                    width: \"8px\",\n                    height: \"8px\",\n                    borderRadius: \"8px\",\n                    backgroundColor: bag,\n                    marginRight: \"3px\",\n                  }}\n                />\n              ) : null}\n              <p style={{ margin: 0, padding: 0 }}>{tem}</p>\n            </div>\n          );\n        },\n      },\n      {\n        title: `Rectal Temperature`,\n        key: \"referenceRectalTemperature\",\n        dataIndex: \"referenceRectalTemperature\",\n        width: \"15%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          // console.log('肛温的值：', text);\n          let num = text;\n          if (text !== null) {\n            num = (text * 1.8 + 32).toFixed(1);\n          }\n\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            >\n              {text !== null && (\n                <p style={{ margin: 0, padding: 0 }}>\n                  {num} <span>{\"℉\"}</span>\n                </p>\n              )}\n            </div>\n          );\n        },\n      },\n      {\n        title: \"Placement\",\n        dataIndex: \"placement\",\n        key: \"placement\",\n        align: \"center\",\n        width: \"15%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          switch (record.placement) {\n            case 1:\n              return (\n                //腋温\n                <div>\n                  <img src={palcement_ye} alt=\"\" />\n                </div>\n              );\n            case 3:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 2:\n              return (\n                //肛温\n                <div>\n                  <img src={placement_gang} alt=\"\" />\n                </div>\n              );\n            case 4:\n              return (\n                //耳温\n                <div>\n                  <img src={placement_er} alt=\"\" />\n                </div>\n              );\n            default:\n              return null;\n          }\n        },\n      },\n      {\n        title: \"Note\",\n        dataIndex: \"note\",\n        key: \"note\",\n        width: \"12%\",\n        className: `${isflog ? \"operation\" : \"\"}`,\n        ellipsis: true,\n        align: \"center\",\n        render: (text, record, index) => {\n          return <p style={{ width: \"100%\" }}>{text}</p>;\n        },\n      },\n    ];\n\n    let hisHe = mTop(200);\n    try {\n      let historyElement = document.querySelectorAll(\n        \"#clinicalMeasure11 .historyTable\"\n      );\n      hisHe = historyElement[0].clientHeight - mTop(100);\n    } catch (error) { }\n\n    return (\n      <div className=\"historyTable\">\n        <Table\n          columns={columns}\n          loading={loading}\n          dataSource={historyData}\n          rowKey={(columns) => columns.historyId}\n          // pagination={{ pageSize: 3, showSizeChanger: false, showQuickJumper: true }}\n          pagination={false}\n          scroll={{\n            y: hisHe,\n          }}\n        />\n      </div>\n    );\n  };\n  const _editModal = () => {\n    function save() {\n      let datas = {\n        memo: memo,\n        bodyConditionScore: parseInt(editBodyConditionScore),\n        furLength: parseInt(editFurLength),\n        heartRate: editHeartRate,\n        bloodPressure: editBloodPressure,\n        respiratoryRate: editRespiratoryRate,\n      };\n      if (editRoomTemperature) {\n        datas.roomTemperature = (\n          (parseFloat(editRoomTemperature) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n      if (editRectal) {\n        datas.referenceRectalTemperature = (\n          (parseFloat(editRectal) - 32) /\n          1.8\n        ).toFixed(2);\n      }\n\n      console.log(\"入参：\", datas, editId);\n      setEditVisible(false);\n      setTip(\"Data is being modified\");\n      setTipSpin(true);\n\n      fetchRequest(`/pet/updatePetExam/${editId}`, \"POST\", datas)\n        .then((res) => {\n          console.log(res);\n          setTipSpin(false);\n          setTip(\"\");\n          message.success(\"Data modified successfully\");\n\n          _getHistory11(petDetailInfo.petId);\n        })\n        .catch((err) => {\n          setTipSpin(false);\n          setTip(\"\");\n\n          message.success(\" Data modification failed\");\n\n          console.log(err);\n        });\n    }\n\n    let furLength = \"\";\n    if (editFurLength !== null && editFurLength !== undefined) {\n      switch (`${editFurLength}`) {\n        case \"1\":\n          furLength = \"smooth\";\n          break;\n        case \"2\":\n          furLength = \"short\";\n          break;\n        case \"3\":\n          furLength = \"medium\";\n          break;\n        case \"4\":\n          furLength = \"long\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return (\n      <Modal\n        title={\n          <div\n            style={{\n              width: \"100%\",\n              cursor: \"move\",\n              height: \"20px\",\n              textAlign: \"center\",\n            }}\n            onMouseOver={() => {\n              if (disabled) {\n                setDisabled(false);\n              }\n            }}\n            onMouseOut={() => {\n              setDisabled(true);\n            }}\n            onFocus={() => { }}\n            onBlur={() => { }}\n          // end\n          >\n            Modification history information\n          </div>\n        }\n        visible={editVisible}\n        // visible={true}\n        onCancel={() => {\n          setEditVisible(false);\n        }}\n        modalRender={(modal) => (\n          <Draggable\n            disabled={disabled}\n            bounds={bounds}\n          // onStart={(event, uiData) => this.onStart(event, uiData)}\n          >\n            <div>{modal}</div>\n          </Draggable>\n        )}\n        footer={\n          [] // 设置footer为空，去掉 取消 确定默认按钮\n        }\n        destroyOnClose={true}\n      >\n        <div id=\"selectEmergenciesModal\">\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Room Temperature </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRoomTemperature}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n\n                setEditRoomTemperature(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Rectal Temperature</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRectal}\n              onChange={(item) => {\n                let str = item.target.value\n                  .replace(/[^\\d^\\.]+/g, \"\")\n                  .replace(/\\.{2,}/g, \".\")\n                  .replace(\".\", \"$#$\")\n                  .replace(/\\./g, \"\")\n                  .replace(\"$#$\", \".\")\n                  .replace(/^(\\-)*(\\d+)\\.(\\d\\d).*$/, \"$1$2.$3\");\n                setEditRectal(str);\n              }}\n            />\n            <span>℉</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Body Condition Score</p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBodyConditionScore}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n\n                setEditBodyConditionScore(str);\n              }}\n            />\n          </div>\n\n          <div className=\"bodyType11\">\n            <p style={{ width: \"140px\" }}>Fur Length: </p>\n            <Select\n              placeholder\n              onChange={(index) => {\n                console.log(index);\n                setEditFurLength(index);\n              }}\n              style={{\n                borderRadius: \"40px\",\n                height: \"33px\",\n                outline: \"none\",\n                borderWidth: 0,\n              }}\n              value={furLength}\n            >\n              <Option value=\"1\">smooth</Option>\n              <Option value=\"2\">short</Option>\n              <Option value=\"3\">medium</Option>\n              <Option value=\"4\">long</Option>\n            </Select>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Heart Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editHeartRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditHeartRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Blood Pressure </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editBloodPressure}\n              onChange={(item) => {\n                setEditBloodPressure(item.target.value);\n              }}\n            />\n            <span>mm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"140px\" }}>Respiratory Rate: </p>\n            <Input\n              style={{ border: \"none\", outline: \"medium\" }}\n              bordered={false}\n              value={editRespiratoryRate}\n              onChange={(item) => {\n                let str = item.target.value.replace(/[^\\d]/g, \"\");\n                setEditRespiratoryRate(str);\n              }}\n            />\n            <span>bpm</span>\n          </div>\n\n          <div className=\"selectEmergenciesModal\">\n            <p style={{ width: \"80px\" }}>Notes</p>\n            <textarea\n              rows=\"2\"\n              cols=\"40\"\n              style={{ textIndent: \"10px\" }}\n              value={memo}\n              onChange={(val) => {\n                setMemo(val.target.value);\n              }}\n            ></textarea>\n          </div>\n\n          <div className=\"btn\" onClick={save}>\n            Save\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n  const _foot = () => {\n    let lbgc = \"\",\n      rbgc = \"\";\n    if (isPetCharacteristics) {\n      lbgc = \"rgba(25,173,228,0.5)\";\n      rbgc = \"rgba(105,201,237,1)\";\n    } else {\n      lbgc = \"rgba(105,201,237,1)\";\n      rbgc = \"rgba(25,173,228,0.5)\";\n    }\n    return (\n      <div className=\"clinical_foot\">\n        <div className=\"top\" style={{ height: px(40) }}>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: lbgc }}\n            onClick={() => setIsPetCharacteristics(true)}\n          >\n            Exam Details\n          </div>\n          <div\n            className=\"foot_l\"\n            style={{ backgroundColor: rbgc }}\n            onClick={() => setIsPetCharacteristics(false)}\n          >\n            History\n          </div>\n        </div>\n        {isPetCharacteristics ? _petCharacteristics() : _history()}\n      </div>\n    );\n  };\n  //获取本地数据\n  const getLocalSetting = () => {\n    let settings = {\n      isHua: true,\n      is15: true,\n      self_tarting: false, //自启动\n      isBacklight: true,\n      isBeep: true,\n      backlightTimer: { length: 140, number: \"45\" },\n      autoOff: { length: 0, number: \"30\" },\n    };\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n  };\n  //echars渲染\n  const echars = () => {\n    return (\n      <div id=\"myCharts\" style={{ marginTop: mTop(50), width: windowWidth,height:'380px'}} ref={chartsBox}>\n        <ReactECharts\n          option={getOption()}\n          theme=\"Imooc\"\n          style={{ height: 'auto', width: 'auto' }}\n          notMerge={true}\n          lazyUpdate={true}\n          ref={echartsElement}\n          className={\"charts\"}\n        />\n        {_status()}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    if (petDetailInfo.petId) {\n      _getHistory11(petDetailInfo.petId);\n    } else if (petDetailInfo.isWalkIn) {\n      _getEmergencyHistory();\n    }\n    return () => { };\n  }, [petDetailInfo]);\n\n  useEffect(() => {\n    return () => {\n      saveHistoryTime && clearTimeout(saveHistoryTime);\n    };\n  }, []);\n\n  useEffect(() => {\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", resize);\n\n    return () => {\n      window.removeEventListener(\"resize\", resize);\n    };\n  }, []);\n\n  useEffect(() => {\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // setTest(echartsElement);\n  }, []);\n\n  useEffect(() => {\n    if (mellaMeasureNumCopy === mellaMeasureNum) {\n      return;\n    }\n    mellaMeasureNumCopy = mellaMeasureNum;\n    // console.log('监听', mellaMeasureValue);\n    setTemp(mellaMeasureValue);\n    let { Eci, wen0, wen1 } = echarsData;\n    //两个数组合并成一个数组\n    let EciCopy = [...Eci];\n\n    let win0Copy = [...wen0];\n    let wen1Copy = [...wen1];\n    EciCopy.push(EciCopy.length + 1);\n    win0Copy.push(mellaMeasureValue);\n    wen1Copy.push(mellaMeasureValue);\n    let json = {\n      Eci: EciCopy,\n      wen0: win0Copy,\n      wen1: wen1Copy,\n    };\n    setEcharsData(json);\n    let Eci1 = echarsData1.Eci;\n    let wen01 = echarsData1.wen0;\n    let wen11 = echarsData1.wen1;\n    let EciCopy1 = [...Eci1];\n\n    let win0Copy1 = [...wen01];\n    let wen1Copy1 = [...wen11];\n    EciCopy1.push(EciCopy1.length + 1);\n    let num =\n      units === \"℃\"\n        ? mellaMeasureValue\n        : _.floor(mellaMeasureValue * 1.8 + 32, 2);\n    win0Copy1.push(num);\n    wen1Copy1.push(num);\n    let json1 = {\n      Eci: EciCopy1,\n      wen0: win0Copy1,\n      wen1: wen1Copy1,\n    };\n    setEcharsData1(json1);\n    // const option = getOption();\n    // echartsElement.current.getEchartsInstance().setOption(option);\n    return () => { };\n  }, [mellaMeasureNum]);\n\n  useEffect(() => {\n    // console.log(\n    //   \"=======监听mellaConnectStatus\",\n    //   mellaConnectStatus,\n    //   echarsData.Eci.length\n    // );\n    if (mellaConnectStatus === \"complete\" && echarsData.Eci.length > 10) {\n      addClinical();\n    }\n    if (mellaConnectStatus === \"isMeasuring\" && mellaStatus !== \"isMeasuring\") {\n      setEcharsData({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n      setEcharsData1({\n        Eci: [],\n        wen0: [],\n        wen1: [],\n      });\n    }\n    if (mellaConnectStatus === \"isMeasuring\") {\n      setShowHistoryEchart(false);\n    }\n\n    setMellaStatus(mellaConnectStatus);\n    return () => { };\n  }, [mellaConnectStatus]);\n\n  useEffect(() => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      getLocalSetting();\n    } else {\n      setUnits(hardSet.isHua ? \"℉\" : \"℃\");\n    }\n    return () => { };\n  }, []);\n\n  useEffect(() => {\n    let bufferData = electronStore.get(`${petDetailInfo.petId}`);\n    // console.log('bufferData: ', bufferData);\n    setRoomTemperature(bufferData ? bufferData?.roomTemperature : '');\n    setReferenceRectalTemperature(bufferData ? bufferData?.referenceRectalTemperature : '');\n    setBodyConditionScore(bufferData ? bufferData?.bodyConditionScore : '');\n    setFurLength(bufferData ? bufferData?.furLength : '');\n    setHeartRate(bufferData ? bufferData?.heartRate : '');\n    setBloodPressure(bufferData ? bufferData?.bloodPressure : '');\n    setRespiratoryRate(bufferData ? bufferData?.respiratoryRate : '');\n    setWeightValue(bufferData ? bufferData?.WeightValue : '');\n    return (() => { })\n  }, [petDetailInfo.petId]);\n\n  useEffect(() => {\n    return () => {\n      let newData = {\n        roomTemperature: roomTemperature,\n        referenceRectalTemperature: referenceRectalTemperature,\n        bodyConditionScore: bodyConditionScore,\n        furLength: furLength,\n        heartRate: heartRate,\n        bloodPressure: bloodPressure,\n        respiratoryRate: respiratoryRate,\n        WeightValue: WeightValue\n      }\n      electronStore.set(`${petDetailInfo.petId}`, newData);\n    }\n  }, [roomTemperature, referenceRectalTemperature, bodyConditionScore, furLength, heartRate, bloodPressure, respiratoryRate, WeightValue, petDetailInfo.petId])\n\n  useEffect(() => {\n    if (biggieBodyWeight !== 0) {\n      setWeightValue((biggieBodyWeight * 2.2046).toFixed(2));\n    }\n    return (() => { })\n  }, [biggieBodyWeight])\n\n  return (\n    <div\n      id=\"clinical\"\n      style={{\n        height: bodyHeight,\n        minWidth: px(200),\n        minHeight: bodyHeight,\n        overflow: \"hidden\",\n      }}\n      ref={clinicalRef}\n    >\n      <div\n        className=\"clinicalTitle\"\n        style={{ height: px(100), background: \"#fff\", position: \"relative\" }}\n      >\n        <Layout style={{ height: \"100%\" }}>\n          <HeaderItem timeNum={60} />\n        </Layout>\n      </div>\n      <div\n        className=\"clinicalBody\"\n        style={{ width: \"100%\", height: bodyHeight - px(100) }}\n      >\n        <div className=\"clinical_top\">\n          <div className=\"r\">\n            {/*顶部按钮Re-sync Base*/}\n            {mellaConnectStatus === \"disconnected\" && (\n              <div\n                className=\"bb1\"\n              // style={{ left: px(150) }}\n              >\n                <div\n                  className=\"btn78\"\n                  style={{ width: px(220), height: mTop(30), fontSize: px(16) }}\n                  onClick={() => {\n                    console.log(\"点击了切换按钮\");\n\n                    if (resyncDeviceIsClick === true) {\n                      resyncDeviceIsClick = false;\n                      console.log(\"发送给主进程切换按钮\");\n                      let ipcRenderer = window.electron.ipcRenderer;\n                      ipcRenderer.send(\"qiehuan\");\n                      const time = setTimeout(() => {\n                        resyncDeviceIsClick = true;\n                        clearTimeout(time);\n                      }, 2500);\n                    }\n                  }}\n                >\n                  Re-sync Base\n                </div>\n              </div>\n            )}\n            {echars()}\n\n            {/* 底部宠物信息 */}\n            {_foot()}\n            {_editModal()}\n\n            {tipSpin && (\n              // true &&\n              <div className=\"modal\">\n                <div className=\"loadIcon\" style={{ marginBottom: px(5) }}>\n                  <LoadingOutlined\n                    style={{\n                      fontSize: 30,\n                      color: \"#fff\",\n                      marginTop: mTop(-30),\n                    }}\n                  />\n                </div>\n                <p>data is loading...</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nClinicalStudy.propTypes = {\n  bodyHeight: propTypes.number,\n};\nClinicalStudy.defaultProps = {\n  bodyHeight: 0,\n};\nexport default connect(\n  (state) => ({\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    biggieBodyWeight: state.hardwareReduce.biggieBodyWeight,\n    biggieUnit: state.hardwareReduce.biggieUnit,\n    petDetailInfo: state.petReduce.petDetailInfo,\n  }),\n  { setTest }\n)(ClinicalStudy);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\temperaturePage\\components\\measuredData.jsx",["1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Progress,\r\n  Space,\r\n  Table,\r\n  Tag,\r\n  Badge,\r\n  Modal,\r\n  Popconfirm,\r\n  message,\r\n} from \"antd\";\r\nimport measuredTable_1 from \"./../../../assets/img/measuredTable_1.png\";\r\nimport measuredTable_2 from \"./../../../assets/img/measuredTable_2.png\";\r\nimport measuredTable_3 from \"./../../../assets/img/measuredTable_3.png\";\r\nimport EditCircle from \"./../../../assets/img/EditCircle.png\";\r\nimport Delete from \"./../../../assets/img/Delete.png\";\r\nimport _ from \"lodash\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectHardwareModalShowFun,\r\n  petSortTypeFun,\r\n  petDetailInfoFun,\r\n  setMellaConnectStatusFun,\r\n  setMellaMeasureValueFun,\r\n  setMellaPredictValueFun,\r\n  setMellaMeasurePartFun,\r\n} from \"../../../store/actions\";\r\nimport Draggable from \"react-draggable\";\r\nimport { fetchRequest } from \"../../../utils/FetchUtil1\";\r\nimport { px, mTop } from \"../../../utils/px.js\";\r\nimport moment from \"moment\";\r\nimport \"./measuredData.less\";\r\nimport electronStore from \"../../../utils/electronStore\";\r\n\r\nconst MeasuredData = ({\r\n  petMessage,\r\n  hardwareMessage,\r\n  setMellaConnectStatusFun,\r\n}) => {\r\n  let { mellaMeasureValue, mellaConnectStatus, mellaMeasurePart } =\r\n    hardwareMessage;\r\n  let draggleRef = React.createRef();\r\n  let { petId, memo } = petMessage;\r\n  let storage = window.localStorage;\r\n  let hisHe = mTop(200);\r\n  try {\r\n    let historyElement = document.querySelectorAll(\".measurementBox .table\");\r\n    hisHe = historyElement[0].clientHeight - mTop(60);\r\n  } catch (error) {}\r\n  const [petTemperatureData, setPetTemperatureData] = useState([]); //存储宠物历史温度数据\r\n  const [disabled, setDisabled] = useState(true); //model是否可拖拽\r\n  const [visible, setVisible] = useState(false); //model框是否显示\r\n  const [newMemo, setNewMemo] = useState(\"\"); //note内容\r\n  const [petMessages, setPetMessages] = useState({}); //接收点击了那个的值\r\n  const [saveType, setSaveType] = useState(false); //是否隐藏按钮\r\n  const [bounds, setBounds] = useState({\r\n    left: 0,\r\n    top: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  });\r\n  const [isHua, setIsHua] = useState(true);\r\n  //表格渲染\r\n  const columns = [\r\n    {\r\n      title: \"Dat\",\r\n      dataIndex: \"createTime\",\r\n      width: \"14%\",\r\n      render: (text, record) => moment(text).format(\"MMM D\"),\r\n    },\r\n    {\r\n      title: \"Tim\",\r\n      dataIndex: \"createTime\",\r\n      width: \"20%\",\r\n      render: (text, record) => moment(text).format(\"hh:mm A\"),\r\n    },\r\n    {\r\n      title: `Temp(${isHua ? \"℉\" : \"℃\"})`,\r\n      dataIndex: \"temperature\",\r\n      width: \"16%\",\r\n      render: (text, record) => {\r\n        let num = parseFloat(text);\r\n        if (isHua) {\r\n          num = parseInt((num * 1.8 + 32) * 10) / 10;\r\n        } else {\r\n          num = num.toFixed(1);\r\n        }\r\n\r\n        return <Badge color={color()} text={num} />;\r\n      },\r\n    },\r\n    {\r\n      title: \"Placeme\",\r\n      dataIndex: \"petVitalTypeId\",\r\n      width: \"15%\",\r\n      render: (text, record) => {\r\n        if (text === 1) {\r\n          return <img src={measuredTable_2} />;\r\n        } else if (text === 3) {\r\n          return <img src={measuredTable_1} />;\r\n        } else if (text === 4) {\r\n          return <img src={measuredTable_3} />;\r\n        } else {\r\n          return <img src={measuredTable_2} />;\r\n        }\r\n      },\r\n    },\r\n    {\r\n      title: \"Note\",\r\n      dataIndex: \"memo\",\r\n      width: \"20%\",\r\n      render: (text, record) => text,\r\n    },\r\n    {\r\n      key: \"action\",\r\n      width: \"15%\",\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          <img\r\n            // className=\"operationIcon\"\r\n            src={EditCircle}\r\n            onClick={() => {\r\n              setVisible(true);\r\n              setPetMessages(record);\r\n            }}\r\n            width={px(30)}\r\n          />\r\n          <Popconfirm\r\n            title=\"Sure to delete?\"\r\n            onConfirm={() => deletePetMessage(record.examId)}\r\n          >\r\n            <img src={Delete}   width={px(30)}/>\r\n          </Popconfirm>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n  //根据温度判断指示文字颜色\r\n  const color = () => {\r\n    if (mellaMeasureValue > 40) {\r\n      return \"#e1206d\";\r\n    } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\r\n      return \"#58bde6\";\r\n    } else {\r\n      return \"#98da86\";\r\n    }\r\n  };\r\n  //圆滑里面的文字\r\n  const ProgressTitle = (percent) => {\r\n    //根据温度判断指示文字\r\n    const title = () => {\r\n      if (mellaMeasureValue > 40) {\r\n        return \"Danger\";\r\n      } else if (_.inRange(_.round(mellaMeasureValue), 38, 40)) {\r\n        return \"Normal\";\r\n      } else {\r\n        return \"Low\";\r\n      }\r\n    };\r\n    return (\r\n      <>\r\n        <p style={{ color: { color } }} className=\"ProgressTitle\">\r\n          {getTemp(percent)}\r\n          <span style={{ color: { color } }} className=\"symbol\">{`${\r\n            isHua ? \"℉\" : \"℃\"\r\n          }`}</span>\r\n        </p>\r\n        <p style={{ color: { color } }} className=\"ProgressTitle\">\r\n          {title()}\r\n        </p>\r\n      </>\r\n    );\r\n  };\r\n  //获取历史宠物温度数据\r\n  const getPetTemperatureData = () => {\r\n    fetchRequest(`/pet/getPetExamByPetId/${petId}`, \"GET\", \"\")\r\n      .then((res) => {\r\n        console.log(\"历史温度记录\", res);\r\n        if (res.flag === true) {\r\n          let arr = [];\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            const element = res.data[i];\r\n            if (element.temperature) {\r\n              arr.push(element);\r\n            }\r\n          }\r\n          setPetTemperatureData(_.orderBy(arr,'createTime','desc'));\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //返回准备测量界面\r\n  const backConnectedPage = () => {\r\n    if (mellaConnectStatus != \"connected\") {\r\n      setMellaConnectStatusFun(\"connected\");\r\n    } else {\r\n      setMellaConnectStatusFun(\"disconnected\");\r\n    }\r\n  };\r\n  //保存数据\r\n  const saveData = () => {\r\n    let petVitalId = null;\r\n    switch (mellaMeasurePart) {\r\n      case \"腋温\":\r\n        petVitalId = 1;\r\n        break;\r\n      case \"肛温\":\r\n        petVitalId = 3;\r\n        break;\r\n      case \"耳温\":\r\n        petVitalId = 4;\r\n        break;\r\n      default:\r\n        petVitalId = 1;\r\n        break;\r\n    }\r\n    let params = {\r\n      petId: petId,\r\n      doctorId: storage.userId,\r\n      temperature: mellaMeasureValue,\r\n      petVitalTypeId: petVitalId,\r\n      memo: \"\",\r\n    };\r\n    fetchRequest(\"/exam/addClamantPetExam\", \"POST\", params)\r\n      .then((res) => {\r\n        if (res.flag === true) {\r\n          getPetTemperatureData();\r\n          setSaveType(true);\r\n          message.success(\"save successfully\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //保存note\r\n  const save = () => {\r\n    let datas = {\r\n      memo: newMemo,\r\n    };\r\n    fetchRequest(`/pet/updatePetExam/${petMessages.examId}`, \"POST\", datas)\r\n      .then((res) => {\r\n        setVisible(false);\r\n        getPetTemperatureData();\r\n      })\r\n      .catch((err) => {\r\n        setVisible(false);\r\n        console.log(err);\r\n      });\r\n  };\r\n  //删除历史温度记录\r\n  const deletePetMessage = (examId) => {\r\n    fetchRequest(`/pet/deletePetExamByExamId/${examId}`, \"DELETE\").then(\r\n      (res) => {\r\n        if (res.flag === true) {\r\n          message.success(\"Successfully Delete\");\r\n          getPetTemperatureData();\r\n        } else {\r\n          message.error(\"Fail To Delete\");\r\n        }\r\n      }\r\n    );\r\n  };\r\n  //关闭弹窗\r\n  const handleCancel = (e) => {\r\n    setVisible(false);\r\n  };\r\n  const onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = draggleRef?.current?.getBoundingClientRect();\r\n    setBounds({\r\n      left: -targetRect?.left + uiData?.x,\r\n      right: clientWidth - (targetRect?.right - uiData?.x),\r\n      top: -targetRect?.top + uiData?.y,\r\n      bottom: clientHeight - (targetRect?.bottom - uiData?.y),\r\n    });\r\n  };\r\n  const getTemp = (percent) => {\r\n    let num = parseFloat(mellaMeasureValue);\r\n    if (isHua) {\r\n      num = parseInt((num * 1.8 + 32) * 10) / 10;\r\n    } else {\r\n      num = parseFloat(num.toFixed(1));\r\n    }\r\n    return num;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPetTemperatureData();\r\n    return () => {};\r\n  }, [petMessage]);\r\n\r\n  useEffect(() => {\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\r\n    if (hardSet) {\r\n      let { isHua } = hardSet;\r\n      setIsHua(isHua);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"measurementBox\">\r\n        <div className=\"progress\" style={{ height: px(400) }}>\r\n          <Progress\r\n            type=\"dashboard\"\r\n            percent={_.round(mellaMeasureValue, 1)}\r\n            gapDegree={30}\r\n            width={px(260)}\r\n            strokeWidth={\"8\"}\r\n            format={(percent) => ProgressTitle(percent)}\r\n            strokeColor={{\r\n              \"0%\": \"#7bd163\",\r\n              \"100%\": \"#19ade4\",\r\n            }}\r\n          />\r\n          {!saveType && (\r\n            <div className=\"buttonBox\">\r\n              <Button\r\n                style={{ backgroundColor: \"#e1206d\" }}\r\n                type=\"danger\"\r\n                shape=\"round\"\r\n                onClick={() => backConnectedPage()}\r\n              >\r\n                Discard\r\n              </Button>\r\n              <Button\r\n                style={{ backgroundColor: \"#e1206d\" }}\r\n                type=\"danger\"\r\n                shape=\"round\"\r\n                color=\"#e1206d\"\r\n                onClick={() => saveData()}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"listTitleBox1\">\r\n          <p className=\"listTitle\">History</p>\r\n        </div>\r\n        <div className=\"table\" style={{ height: mTop(300) }}>\r\n          <Table\r\n            rowKey={\"examId\"}\r\n            columns={columns}\r\n            dataSource={petTemperatureData}\r\n            className=\"measuredTable\"\r\n            pagination={false}\r\n            scroll={{\r\n              y: hisHe,\r\n            }}\r\n          ></Table>\r\n        </div>\r\n      </div>\r\n      {/*修改note弹窗 */}\r\n      <Modal\r\n        title={\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              cursor: \"move\",\r\n              height: \"20px\",\r\n              textAlign: \"center\",\r\n            }}\r\n            onMouseOver={() => {\r\n              if (disabled) {\r\n                setDisabled(false);\r\n              }\r\n            }}\r\n            onMouseOut={() => {\r\n              setDisabled(true);\r\n            }}\r\n            onFocus={() => {}}\r\n            onBlur={() => {}}\r\n          >\r\n            Edit Note\r\n          </div>\r\n        }\r\n        visible={visible}\r\n        onCancel={handleCancel}\r\n        modalRender={(modal) => (\r\n          <Draggable\r\n            disabled={disabled}\r\n            bounds={bounds}\r\n            onStart={(event, uiData) => onStart(event, uiData)}\r\n          >\r\n            <div ref={draggleRef}>{modal}</div>\r\n          </Draggable>\r\n        )}\r\n        footer={\r\n          [] // 设置footer为空，去掉 取消 确定默认按钮\r\n        }\r\n        destroyOnClose={true}\r\n      >\r\n        <div className=\"noteModal\">\r\n          <div className=\"noteModalText\">\r\n            <p style={{ width: \"80px\" }}>Notes</p>\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"40\"\r\n              style={{ textIndent: \"10px\" }}\r\n              // value={petMessages.memo}\r\n              onChange={(val) => {\r\n                setNewMemo(val.target.value);\r\n              }}\r\n            ></textarea>\r\n          </div>\r\n          <div className=\"btn\" style={{ width: \"60%\" }} onClick={() => save()}>\r\n            Save Changes\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  (state) => ({\r\n    petMessage: state.petReduce.petDetailInfo,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  {\r\n    selectHardwareModalShowFun,\r\n    petSortTypeFun,\r\n    petDetailInfoFun,\r\n    setMellaConnectStatusFun,\r\n    setMellaMeasureValueFun,\r\n    setMellaPredictValueFun,\r\n    setMellaMeasurePartFun,\r\n  }\r\n)(MeasuredData);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\petTable\\index.jsx",["1111","1112","1113","1114","1115","1116","1117","1118"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { ConfigProvider, Table } from 'antd';\r\nimport { useHistory } from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './petTable.less'\r\nimport { petDetailInfoFun, setMenuNum, } from '../../store/actions';\r\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\r\n\r\n\r\n\r\n\r\n\r\nconst PetTable = ({ petListArr, loading, bodyHeight, petDetailInfoFun, setMenuNum, resetPetList, type }) => {\r\n    let history = useHistory()\r\n    const [heardSearchText, setHeardSearchText] = useState('')\r\n    //搜索后展示的宠物列表\r\n    const [searchData, setSearchData] = useState([])\r\n    const _search = (value) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\r\n        let keyWord = value || heardSearchText\r\n        /**\r\n         * 使用indexof方法实现模糊查询\r\n         *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n         *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n         *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n         *  \r\n         * list         原数组\r\n         * keyWord      查询关键词\r\n         * searchData   查询的结果\r\n         * \r\n         * toLowerCase（）方法：将字符串统一转成小写\r\n         * toUpperCase（）方法：将字符串统一转成大写\r\n         * \r\n         */\r\n        let list = petListArr\r\n        let searchData = []\r\n        for (let i = 0; i < list.length; i++) {\r\n            let petName = list[i].petName.toLowerCase() || ''\r\n            let patientId = list[i].patientId.toLowerCase() || ''\r\n            let rfid = list[i].rfid || ''\r\n            if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n                || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n                || `${rfid}`.indexOf(keyWord) !== -1\r\n            ) {\r\n                searchData.push(list[i])\r\n            }\r\n        }\r\n        console.log(searchData);\r\n        setSearchData(searchData)\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Time',\r\n            dataIndex: 'insertedAt',\r\n            key: 'insertedAt',\r\n            width: '16%',\r\n            // ...this.getColumnSearchProps('insertedAt'),\r\n            render: (text, record, index) => {\r\n                let chazhi = new Date().getTimezoneOffset()\r\n                // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n                let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\r\n                let time = moment(parseInt(text) * 1000).format('hh:mm a');\r\n                let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n                // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n                return (\r\n                    <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\r\n                        <p>{`${year}`}</p>\r\n                        <p>{`${time}`}</p>\r\n                    </div>\r\n                )\r\n            },\r\n\r\n        },\r\n        {\r\n            title: 'Pet ID',\r\n            dataIndex: 'patientId',\r\n            key: 'patientId',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('patientId'),\r\n        },\r\n        {\r\n            title: 'Pet Name',\r\n            dataIndex: 'petName',\r\n            key: 'petName',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('petName'),\r\n        },\r\n        {\r\n            title: 'Owner',\r\n            dataIndex: 'owner',\r\n            key: 'owner',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('owner'),\r\n        },\r\n        {\r\n            title: 'Breed',\r\n            dataIndex: 'breed',\r\n            key: 'breed',\r\n            width: '15%',\r\n            // ...this.getColumnSearchProps('breed'),\r\n            render: (text, record, index) => {\r\n                if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{'unknown'}</p>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{text}</p>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n        {\r\n            title: 'Gender',\r\n            dataIndex: 'gender',\r\n            key: 'gender',\r\n            width: '12%',\r\n            // width: '30%',\r\n            // ...this.getColumnSearchProps('gender'),\r\n        },\r\n        {\r\n            title: 'Age',\r\n            dataIndex: 'age',\r\n            key: 'age',\r\n            width: '12%',\r\n            // width: '20%',\r\n            render: (text, record, index) => {\r\n                // console.log(text);\r\n\r\n                if (`${text}` === 'NaN') {\r\n                    return (\r\n                        <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <p style={{ textAlign: 'center' }}>{text}</p>\r\n                    )\r\n                }\r\n\r\n            }\r\n        },\r\n\r\n\r\n    ];\r\n    const noData = () => {\r\n        return (\r\n            <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\r\n                <p style={{ fontSize: px(22) }}> {`No Pets Scheduled &`}</p>  &nbsp;&nbsp;\r\n                <a style={{ fontSize: px(22) }} href=\"#\"\r\n                    onClick={(e) => {\r\n                        console.log('我要去添加宠物1111');\r\n                        try {\r\n                            if (type === 'scheduled') {\r\n                                setMenuNum('AddScheduledPet')\r\n                            } else {\r\n                                setMenuNum('AddPet')\r\n                            }\r\n                        } catch (error) {\r\n                            console.log('错误信息', error);\r\n                        }\r\n                        e.preventDefault();\r\n\r\n                    }}\r\n\r\n                >{`Schedule a Pet`}</a>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='petTable' >\r\n            <div className=\"pet_table_heard\" style={{ marginTop: px(40) }}>\r\n                <div className=\"search\" style={{ height: px(28) }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"&#xe61b;    search\"\r\n                        value={heardSearchText}\r\n                        onChange={(e) => {\r\n                            setHeardSearchText(e.target.value)\r\n                            _search(e.target.value)\r\n                        }\r\n                        }\r\n\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"walkBtn1\" style={{ marginRight: px(28) }}>\r\n                    <div\r\n                        className=\"walkbtnBox\"\r\n                        style={{ height: px(28), width: px(80) }}\r\n                        onClick={_search}\r\n                    >\r\n                        <div className=\"walkText\">Search</div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"heard2 flex\" style={{ marginTop: px(40), marginBottom: px(8), marginLeft: px(20) }}>\r\n\r\n                <div className=\"sort flex\" >\r\n                    <p style={{ fontSize: px(16), marginRight: px(10) }}>Sort By:</p>\r\n\r\n                    <SelectionBox\r\n                        listArr={[\r\n                            { key: 'time', value: 'Time' },\r\n                            { key: 'petid', value: 'Pet ID' },\r\n                            { key: 'owner', value: 'Owner' },\r\n                            { key: 'breed', value: 'Breed' },\r\n                            { key: 'petname', value: 'Pet Name' },\r\n                            { key: 'gender', value: 'Gender' },\r\n                        ]}\r\n                        clickItem={(item) => {\r\n                            let petList = [].concat(petListArr)\r\n                            switch (item.key) {\r\n                                case 'time':\r\n                                    petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n                                    break;\r\n                                case 'petid':\r\n                                    petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n                                    break;\r\n                                case 'owner':\r\n                                    petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n                                    break;\r\n                                case 'breed':\r\n                                    petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n                                    break;\r\n                                case 'petname':\r\n                                    petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n                                    break;\r\n                                case 'gender':\r\n                                    petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n                                    break;\r\n                            }\r\n                            resetPetList(petList)\r\n\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            <div className=\"table\" >\r\n                <ConfigProvider renderEmpty={noData}>\r\n                    <Table\r\n                        style={{\r\n                            // border: ' #979797 1px solid',\r\n                            padding: 0,\r\n                            margin: 0,\r\n                            width: '95%',\r\n                            // height: px(500)\r\n                        }}\r\n                        rowKey={data => data.id}\r\n                        bordered={false}\r\n                        columns={columns}\r\n                        dataSource={(heardSearchText.length === 0) ? petListArr : searchData}\r\n                        loading={loading}\r\n                        locale={{ filterConfirm: <div>111</div> }}\r\n                        pagination={false}\r\n                        scroll={{\r\n                            y: px(480)\r\n                        }}\r\n                        onRow={(record) => {\r\n                            return {\r\n                                onClick: (event) => {\r\n                                    setMenuNum('1')\r\n                                    petDetailInfoFun(record)\r\n                                    console.log('record', record);\r\n                                }, // 点击行\r\n\r\n                            };\r\n                        }}\r\n                    />\r\n                </ConfigProvider>\r\n            </div>\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nPetTable.propTypes = {\r\n    petListArr: PropTypes.array,\r\n    resetPetList: PropTypes.func,\r\n}\r\n//默认值\r\nPetTable.defaultProps = {\r\n    bodyHeight: 0,\r\n    petListArr: [],\r\n    resetPetList: () => { },\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { petDetailInfoFun, setMenuNum, }\r\n)(PetTable)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil5.js",["1119","1120","1121","1122"],"\r\n\r\nlet COMMON_URL = 'https://api.rhapsody.vet/graphql';//集成Rhapsody\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRhapsody (url, method, params = '', token = '') {\r\n\r\n  if (method === 'GET' || method === 'DELETE') {\r\n    let headers = null\r\n    if (token !== '') {\r\n      headers = {\r\n        'authorization': token,\r\n      };\r\n    }\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      // 定一个空数组\r\n      let paramsArray = [];\r\n      //  拆分对象\r\n      Object.keys(params).forEach(key =>\r\n        paramsArray.push(key + \"=\" + params[key])\r\n      );\r\n      // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n      if (url.search(/\\?/) === -1) {\r\n        url = url + \"?\" + paramsArray.join(\"&\");\r\n      } else {\r\n        url = url + \"&\" + paramsArray.join(\"&\");\r\n      }\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else if (method === 'POST') {\r\n\r\n\r\n    let header = {\r\n      \"Content-type\": \"application/json\"\r\n    };\r\n    if (token !== '') {\r\n      header = {\r\n        'authorization': token,\r\n        \"Content-type\": \"application/json\"\r\n      };\r\n    }\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          // mode: 'cors',\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  } else {\r\n    let header = {\r\n      \"Content-type\": \"application/merge-patch+json\",\r\n      authorization: token\r\n    };\r\n    if (params == '') {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header\r\n        }).then((Response) => Response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData)\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    } else {\r\n      return new Promise(function (resolve, reject) {\r\n        fetch(COMMON_URL + url, {\r\n          method: method,\r\n          headers: header,\r\n          body: JSON.stringify(params),\r\n        }).then((response) => response.json())\r\n          .then((responseData) => {\r\n            resolve(responseData);\r\n          })\r\n          .catch((err) => {\r\n            reject(err);\r\n          });\r\n      });\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\phoneBook\\PhoneBook.jsx",["1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Menu,\r\n    Popover,\r\n    Button,\r\n    Modal\r\n} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport pinyin from 'pinyin';\r\n\r\n\r\n//import 'antd/dist/antd.css';\r\nimport './phoneBook.less'\r\nimport { mTop, px, MTop } from '../px';\r\nimport electronStore from '../electronStore';\r\n\r\n\r\n/**\r\n * \r\n * @param {function} onReturn  点击返回按钮后调用的函数\r\n * @param {function} onSearch  点击搜索到的宠物后把宠物信息传回去\r\n * @returns \r\n */\r\n\r\n\r\nconst PhoneBook = ({ listDate, selectFun, searchText, confirmSelectBreed }) => {\r\n    const [phoneList, setPhoneList] = useState([])          //电话簿主题列表\r\n    const [letterList, setLetterList] = useState([])        //电话簿右侧字母列表\r\n\r\n    const [phoneListCopy, setPhoneListCopy] = useState([])          //电话簿主题列表\r\n    const [letterListCopy, setLetterListCopy] = useState([])        //电话簿右侧字母列表\r\n\r\n    const [selectBreed, setSelectBreed] = useState(-1)      //选中的品种列表\r\n\r\n    useEffect(() => {\r\n        if (confirmSelectBreed !== -1) {\r\n            setSelectBreed(confirmSelectBreed)\r\n        }\r\n    }, [confirmSelectBreed])\r\n\r\n\r\n    console.log('listsDate', phoneList)\r\n\r\n    useEffect(() => {\r\n        // console.log('listsDate', listDate)\r\n        console.log('进来了');\r\n        let test = []\r\n        listDate.forEach((item, index) => {\r\n            let data = {\r\n                name: item.breedName,\r\n                hidden: false,\r\n                petSpeciesBreedId: item.petSpeciesBreedId\r\n            }\r\n            test.push(data)\r\n        })\r\n        // 暂时静态数据替换\r\n        //获取联系人列表\r\n        console.log('11111111111', test)\r\n        let list = test;\r\n        let sections = [], letterArr = [];\r\n        // console.log('原始的数据:',list)\r\n\r\n        // 右侧字母栏数据处理\r\n        list.forEach((item, index) => {\r\n            letterArr.push(pinyin(item.name.substring(0, 1), {\r\n                style: pinyin.STYLE_FIRST_LETTER,\r\n            })[0][0].toUpperCase());\r\n\r\n            letterArr = [...new Set(letterArr)].sort();\r\n        });\r\n\r\n        // 分组数据处理\r\n        letterArr.forEach((item, index) => {\r\n            sections.push({\r\n                title: item,\r\n                data: []\r\n            })\r\n        });\r\n        list.forEach(item => {\r\n            let listItem = item;\r\n            sections.forEach(item => {\r\n                // console.log('}}}}}}}}}}}}}}',item)\r\n                let first = listItem.name.substring(0, 1);\r\n                let test = pinyin(first, { style: pinyin.STYLE_FIRST_LETTER })[0][0].toUpperCase();\r\n                if (item.title == test) {\r\n                    item.data.push({\r\n                        firstName: first,\r\n                        name: listItem.name,\r\n                        hidden: listItem.hidden,\r\n                        petSpeciesBreedId: listItem.petSpeciesBreedId\r\n                    });\r\n                }\r\n            })\r\n        });\r\n\r\n        //letterArr:[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\"]\r\n        //sections   [{title: \"A\", data:[ {firstName: \"C\", name: \"Canaan Dog\", hidden: false, petSpeciesBreedId: 201}} ]]\r\n        // console.log('-1----', sections, letterArr);\r\n        setPhoneList(sections)\r\n        setPhoneListCopy(sections)\r\n        setLetterList(letterArr)\r\n        setLetterListCopy(letterArr)\r\n    }, [])\r\n    useEffect(() => {\r\n        // if (searchText) {\r\n        console.log('搜索内容', searchText, letterListCopy);\r\n        if (letterListCopy.length > 0) {\r\n\r\n            let allData = phoneListCopy\r\n            let newArr = []\r\n            let arr = []\r\n            if (searchText.length > 0) {\r\n                allData.map((item, i) => {\r\n                    item.data.forEach((data, index) => {\r\n                        // console.log(index)\r\n                        let dataName = data.name ? data.name.toUpperCase() : ''\r\n                        let keyData = searchText ? searchText.toUpperCase() : ''\r\n                        if (dataName.search(keyData) !== -1) {\r\n                            newArr.push(data)\r\n                        }\r\n                    })\r\n                    // console.log('一组数据：', newArr)\r\n                    if (newArr.length != 0) {\r\n                        let oneGreep = {\r\n                            title: item.title,\r\n                            data: newArr\r\n                        }\r\n                        //   console.log('一11组数据：', oneGreep)\r\n                        arr.push(oneGreep)\r\n                    }\r\n\r\n                    newArr = []\r\n                })\r\n                //   console.log('--------------------------', arr)\r\n                let letterArr = []\r\n                arr.forEach((item, index) => {\r\n                    letterArr.push(item.title)\r\n                })\r\n                // newArr = []\r\n                // // console.log('---||-----',newArr)\r\n                setPhoneList(arr)\r\n                setLetterList(letterArr)\r\n            } else {\r\n\r\n                setPhoneList(phoneListCopy)\r\n                setLetterList(letterListCopy)\r\n            }\r\n        }\r\n\r\n\r\n    }, [searchText])\r\n\r\n\r\n\r\n    const _phoneList = () => {\r\n\r\n        let option = phoneList.map((item, index) => {\r\n            let data = item.data\r\n            let option1 = data.map((value, index1) => {\r\n                return (\r\n                    <li\r\n                        key={`option1${index1}`}\r\n                        onClick={() => {\r\n                            // console.log(value.petSpeciesBreedId);\r\n                            setSelectBreed(value.petSpeciesBreedId)\r\n                            selectFun(value)\r\n                        }}>\r\n                        {value.name}\r\n                        {(selectBreed === value.petSpeciesBreedId ? <span className=\"search\">&#xe614;</span> : null)}\r\n                    </li>\r\n                )\r\n            })\r\n\r\n            return (\r\n                <div className=\"phoneBody\">\r\n                    <div className=\"title\" id={`${item.title}`} >{item.title} </div>\r\n                    <ul>\r\n                        {option1}\r\n                    </ul>\r\n                </div>\r\n            )\r\n\r\n        })\r\n\r\n        return (\r\n            <ul>\r\n                {option}\r\n            </ul>\r\n        )\r\n    }\r\n    const _letterList = () => {\r\n\r\n        let option = letterList.map((item, index) => {\r\n\r\n\r\n            return (\r\n                <li\r\n                    key={`${index}`}\r\n\r\n                    style={{ fontSize: px(12), padding: 0, margin: 0, border: 0 }}>\r\n                    <a\r\n\r\n                        onClick={() => {\r\n                            litterClick(item)\r\n                        }}\r\n                    >{item}</a>\r\n                </li>\r\n            )\r\n\r\n        })\r\n\r\n        return (\r\n            <ul className=\"letterUL\">\r\n                {option}\r\n            </ul>\r\n        )\r\n    }\r\n    const litterClick = (anchorName) => {\r\n        // console.log(anchorName);\r\n        if (anchorName) {\r\n            // 找到锚点\r\n            let anchorElement = document.getElementById(anchorName);\r\n            // console.log(anchorElement);\r\n            // 如果对应id的锚点存在，就跳转到锚点\r\n            if (anchorElement) { anchorElement.scrollIntoView({ block: 'start', behavior: 'smooth' }); }\r\n        }\r\n        // e.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"phoneBook\">\r\n            <div className=\"phone\">\r\n                {_phoneList()}\r\n            </div>\r\n            <div className=\"litter\">\r\n                {_letterList()}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n\r\n    listDate: PropTypes.array,\r\n    selectFun: PropTypes.func,\r\n    searchText: PropTypes.string,\r\n    confirmSelectBreed: PropTypes.number\r\n}\r\nPhoneBook.defaultProps = {\r\n    listDate: [],\r\n    selectFun: () => { },\r\n    searchText: '',\r\n    confirmSelectBreed: -1,\r\n}\r\n\r\nexport default PhoneBook","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\signIn\\resetPassword\\ResetPassword.jsx",["1137","1138","1139"],"import React, { Component } from 'react'\r\nimport {\r\n  Input,\r\n  Button,\r\n  message\r\n\r\n} from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './resetPassword.less'\r\nimport mellaLogo from '../../../assets/images/mellaLogo.png'\r\nimport temporaryStorage from '../../../utils/temporaryStorage';\r\nimport { fetchRequest } from '../../../utils/FetchUtil1';\r\nimport { px, mTop, pX, MTop } from '../../../utils/px';\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\n\r\nlet storage = window.localStorage;\r\nexport default class ResetPassword extends Component {\r\n\r\n  state = {\r\n    hash: '',\r\n    hash1: '',\r\n    spin: false\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _continue = () => {\r\n    console.log('点击了发送按钮')\r\n    message.destroy()\r\n    let { hash, hash1 } = this.state\r\n    console.log(hash, hash1, hash !== hash1);\r\n    if (!hash && !hash1) {\r\n\r\n      message.error('Please enter a new password', 10)\r\n      return\r\n    }\r\n    if (hash !== hash1) {\r\n      message.error('The two passwords are inconsistent, please re-enter', 10)\r\n      return\r\n    }\r\n    this.setState({\r\n      spin: true\r\n    })\r\n\r\n    fetchRequest(`/user/resetPWD/${temporaryStorage.forgotUserId}/${hash}`, \"GET\", '')\r\n      .then(res => {\r\n        console.log('修改密码返回结果', res);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n        if (res.flag === true) {\r\n          let data = {\r\n            email: temporaryStorage.forgotPassword_email,\r\n            hash: this.state.hash\r\n          }\r\n          console.log(data);\r\n          data = JSON.stringify(data)\r\n          storage.signIn = data\r\n          temporaryStorage.forgotPassword_email = ''\r\n          temporaryStorage.forgotUserId = ''\r\n          this.props.history.replace('/page11')\r\n          // this.props.history.push('/page11')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('err', err);\r\n        this.setState({\r\n          spin: false\r\n        })\r\n      })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div id=\"resetPassword\">\r\n        {/* <div className=\"iconfont icon-left heard return\" onClick={() => { this.props.history.goBack() }} />\r\n        <div className=\"logo\">\r\n          <img src={mellaLogo} alt=\"\" />\r\n        </div>\r\n        <div className=\"text\">Reset Your<br />Password</div> */}\r\n\r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\">\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n            < MinClose />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body\" style={{ height: MTop(280), }}>\r\n          <div className=\"logo\"\r\n            style={{ paddingTop: mTop(10) }}\r\n          >\r\n            <img src={mellaLogo} alt=\"\" style={{ width: px(130) }} />\r\n          </div>\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), padding: `${px(20)}px 0`, marginBottom: mTop(10), marginTop: mTop(20) }}\r\n          >\r\n            Reset Your<br />Password\r\n          </div>\r\n\r\n          <div className=\"inpF\">\r\n\r\n            <Input.Password className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              visibilityToggle={false}\r\n              value={this.state.hash}\r\n              placeholder='New Password'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  hash: str\r\n                })\r\n              }}\r\n            />\r\n            <Input.Password className='inp'\r\n              style={{ width: px(310), height: mTop(50), marginLeft: px(6), marginBottom: mTop(18), fontSize: px(18) }}\r\n              visibilityToggle={false}\r\n              value={this.state.hash1}\r\n              placeholder='Re-Enter New Password'\r\n              bordered={false}\r\n              onChange={(item) => {\r\n                let str = item.target.value\r\n                this.setState({\r\n                  hash1: str\r\n                })\r\n              }}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"button1\" >\r\n          <Button\r\n            style={{ width: px(300), fontSize: px(18), height: px(300 / 6.5) }}\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Continue\r\n          </Button>\r\n        </div>\r\n        {\r\n          this.state.spin &&\r\n          <div className=\"modal\">\r\n            <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n              <LoadingOutlined style={{ fontSize: 30, color: '#e1206d', marginTop: mTop(-30), }} />\r\n\r\n\r\n            </div>\r\n            <p>\r\n              loading...\r\n            </p>\r\n          </div>\r\n        }\r\n\r\n\r\n\r\n\r\n        {/* \r\n        <div className=\"heaed\"  >\r\n          <div className=\"l\"\r\n          >\r\n\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                this.props.history.goBack()\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <div className=\"inpF\">\r\n          <Input.Password className='inp'\r\n            visibilityToggle={false}\r\n            style={{ border: 'none', outline: 'medium' }}\r\n            value={this.state.hash}\r\n            placeholder='New Password'\r\n            bordered={false}\r\n            onChange={(item) => {\r\n              let str = item.target.value\r\n              this.setState({\r\n                hash: str\r\n              })\r\n            }}\r\n          />\r\n          <Input.Password className='inp'\r\n            visibilityToggle={false}\r\n            style={{ border: 'none', outline: 'medium' }}\r\n            value={this.state.hash1}\r\n            placeholder='Re-Enter New Password'\r\n            bordered={false}\r\n            onChange={(item) => {\r\n              let str = item.target.value\r\n              this.setState({\r\n                hash1: str\r\n              })\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"button1\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n            onClick={this._continue}\r\n          >\r\n            Continue\r\n          </Button>\r\n\r\n        </div> */}\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\ishavePMS\\IsHavePMS.jsx",["1140","1141"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n} from 'antd';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.less'\r\nimport pms from './../../../assets/images/pms.png'\r\nimport MaxMin from '../../../utils/maxminreturn/MaxMinReturn'\r\n\r\n\r\n\r\nconst IsHavePMS = () => {\r\n\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    console.log('hooks模拟componentDidMount');\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div id=\"isHavePMS\">\r\n      <MaxMin\r\n        onClick={() => { history.push('/') }}\r\n        onClick1={() => history.goBack()}\r\n      />\r\n\r\n      <div className=\"body\">\r\n        <div className=\"title\">Do you have PMS?</div>\r\n        <div className=\"text\">Practices with a PMS are strongly\r\n        </div>\r\n        <div className=\"text\">encouraged to connect it.</div>\r\n\r\n        <img src={pms} alt=\"\" style={{ width: '100px' }} />\r\n\r\n        <div className=\"buttons\">\r\n          <Button\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n          // onClick={() => { this.props.history.push('/page11') }}\r\n          >\r\n            Continue with email\r\n          </Button>\r\n\r\n          <Button\r\n\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size='large'\r\n          // onClick={() => { this.props.history.push('/page11') }}\r\n          >\r\n            Connect PMS\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nIsHavePMS.propTypes = {\r\n\r\n}\r\nIsHavePMS.defaultProps = {\r\n\r\n}\r\nexport default IsHavePMS","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\index.jsx",["1142","1143","1144","1145","1146","1147"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Heard from \"../../utils/heard/Heard\";\nimport { mTop, px, pX, win, timerFun } from \"../../utils/px\";\nimport HardAndPetsUI from \"./HardAndPetsUI\";\nimport HardWareTypeUI from \"./hardWareTypeUI\";\nimport TemperaturePage from \"../../pages/temperaturePage\";\nimport {\n  setHardwareList,\n  selectHardwareModalShowFun,\n  setIsHaveUsbDeviceFun,\n  setMellaConnectStatusFun,\n  setMellaMeasureValueFun,\n  setMellaPredictValueFun,\n  setMellaMeasurePartFun,\n  setMellaDeviceIdFun,\n  setMellaMeasureNumFun,\n  setBiggieConnectStatusFun,\n  setBiggieBodyFatFun,\n  setBiggieBodyWeightFun,\n  setBiggieUnitFun,\n  setBiggieSameWeightCountFun,\n  setRulerConnectStatusFun,\n  setRulerMeasureValueFun,\n  setRulerUnitFun,\n  setRulerConfirmCountFun,\n  setReceiveBroadcastHardwareInfoFun,\n} from \"../../store/actions\";\nimport \"./mainbody.less\";\nimport { message } from \"antd\";\nimport electronStore from \"../../utils/electronStore\";\nimport AddDevice from \"./AddDevice\";\nimport BiggiePage from \"../../pages/biggiePage\";\nimport ScanPage from \"../../pages/scanPage\";\nimport { compareObject } from \"../../utils/current\";\nimport { compareArray } from \"../../utils/current\";\nimport AllPets from \"../../pages/allPetsPage\";\nimport ScheduledPetPage from \"../../pages/scheduledPetsPage\";\nimport AddScheduledPet from \"../../pages/addScheduledPet\";\nimport ClininalStudy from \"../../pages/clinicalStudyPage\";\nimport CombineScales from \"../../pages/combineScales\";\nimport OtterEQPage from '../../pages/otterEQ';\nimport MyAccount from \"../../pages/myAccount\";\nimport { Modal } from \"antd\";\n\nlet ipcRenderer = window.require(\"electron\").ipcRenderer;\nlet isMeasure = false; //是否正在测量,用于判断是否需要发送指定指令给USB,查看硬件是否连接\nlet initTime = 0; //初始化时间,用来计算底座没有回应温度计的时间差,如果时间差大于6秒代表断开连接\nlet num07 = 0; //接收到07命令行的次数,次数大于3跳出弹框\nlet firstEar = true; //为true代表一组数据测量完成,下组测量数据\nlet is97Time = null; //为了防抖，因为有时候断开连接和连接成功总是连续的跳出来，展示就会一直闪烁，因此引入时间差大于800ms才展示\nlet exchangeNum = 0; //奇数发送查询探头id指令，偶数发送询问配置\nlet time194 = 0\n\n//用于预测的东西\nlet clinicalYuce = [],\n  clinicalIndex = 0;\n\nlet storage = window.localStorage;\n\nclass App extends Component {\n  state = {\n    //body部分窗口高度\n    bodyHeight: 0,\n    //本地保存的硬件类型数组,不包括Add这个类型\n    devicesTypeList: [],\n    //展示硬件类型的数组\n    showHardWareTypeList: [],\n    //是否有USB设备\n    isHaveUsbDevice: true,\n    //mella温度计测量状态\n    mellaMeasureStatus: \"disconnected\", //connected,disconnected,isMeasuring,complete\n\n    //点击菜单的序号\n    clickMenuIndex: \"1\",\n    err07Visible: false,\n    units: '℉'\n  };\n  componentDidMount() {\n    ipcRenderer.send(\"big\", win());\n    timerFun();\n    ipcRenderer.on(\"changeFenBianLv\", this.changeFenBianLv);\n    //获取窗口高度\n    this.resize();\n    //react监听屏幕窗口改变\n    window.addEventListener(\"resize\", this.resize);\n\n    //获取设备类型\n    this.getDevicesType();\n\n    //检测USB设备发来的信息\n    ipcRenderer.on(\"sned\", this._send);\n    //检测是否有USB设备\n    ipcRenderer.on(\"noUSB\", this._noUSB);\n    //定时查看mella温度计是否与底座连接或断开\n    this._whether_to_connect_to_mella();\n\n    //获取本地设置\n    this.getLocalSetting();\n    //获取单位\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`) || {}\n    console.log('----', hardSet);\n    let { isHua, } = hardSet\n    if (isHua === false) {\n      this.setState({\n        units: '℃'\n      })\n    } else {\n      this.setState({\n        units: '℉'\n      })\n    }\n\n\n  }\n  componentWillUnmount() {\n    //组件销毁，取消监听\n    window.removeEventListener(\"resize\", this.resize);\n    ipcRenderer.removeListener(\"changeFenBianLv\", this.changeFenBianLv);\n    ipcRenderer.removeListener(\"sned\", this._send);\n    ipcRenderer.removeListener(\"noUSB\", this._noUSB);\n    this.detectTimer && clearInterval(this.detectTimer);\n    this.rulerTimer && clearTimeout(this.rulerTimer);\n  }\n  //检测到props里的hardwareList更新\n  UNSAFE_componentWillReceiveProps(prevProps) {\n    //对比props里的hardwareList和state里的hardwareList是否相同\n\n    if (!compareArray(prevProps.hardwareList, this.state.devicesTypeList)) {\n      let showHardWareTypeList = [].concat(prevProps.hardwareList);\n      showHardWareTypeList.push({\n        type: \"add\",\n        devices: [],\n      });\n      this.setState({\n        devicesTypeList: prevProps.hardwareList,\n        showHardWareTypeList,\n      });\n    }\n    if (!compareObject(prevProps.menuNum, this.state.clickMenuIndex)) {\n      this.setState({\n        clickMenuIndex: prevProps.menuNum,\n      });\n    }\n  }\n\n  changeFenBianLv = (e) => {\n    let ipcRenderer = window.electron.ipcRenderer;\n    // ipcRenderer.send('small')\n    ipcRenderer.send(\"big\", win());\n    // this.setState({}, () => {\n    //   if (this.props.test) {\n    //     if (this.props.test.current) {\n    //       this.props.test.current.getEchartsInstance().dispose();\n    //       this.props.test.current.getEchartsInstance().clear();\n    //       setTimeout(() => {\n    //         this.props.test.current.getEchartsInstance().resize();\n    //       }, 500);\n    //     }\n    //   }\n    // });\n\n  };\n  //获取本地设置\n  getLocalSetting = () => {\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`);\n    if (!hardSet) {\n      let settings = {\n        isHua: true,\n        is15: true,\n        self_tarting: false, //自启动\n        isBacklight: true,\n        isBeep: true,\n        backlightTimer: { length: 140, number: \"45\" },\n        autoOff: { length: 0, number: \"30\" },\n      };\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings);\n    }\n  };\n  //检测USB设备发来的信息\n  _send = (e, data) => {\n    // console.log('检测USB设备发来的信息', data)\n    //data就是测量的数据，是十进制的数字\n    this.command(data)();\n  };\n  //监听是否有USB设备,true代表没有USB设备，false代表有USB设备\n  _noUSB = (e, data) => {\n    if (data === false) {\n      message.destroy();\n    } else {\n      if (this.state.isHaveUsbDevice) {\n        message.destroy();\n        message.error(\"The base is not detected. Please insert the base\", 0);\n      }\n    }\n    if (data === this.props.isHaveUsbDevice) {\n      this.props.setIsHaveUsbDeviceFun(!data);\n    }\n    if (data === this.state.isHaveUsbDevice) {\n      this.setState({\n        isHaveUsbDevice: !data,\n      });\n    }\n  };\n  //监听mella温度计是否与底座连接或断开\n  _whether_to_connect_to_mella = () => {\n    console.log(\"监听mella温度计是否与底座连接或断开\");\n    message.destroy();\n    this.detectTimer && clearInterval(this.detectTimer);\n    //2秒检测一次\n    this.detectTimer = setInterval(() => {\n      exchangeNum++;\n      //如果正在测量或者没有USB设备，不检测\n      if (isMeasure || !this.state.isHaveUsbDevice) {\n        return;\n      }\n      if (exchangeNum % 2 === 0) {\n        //让底座发送查询温度计信息指令\n        ipcRenderer.send(\"usbdata\", { command: \"07\", arr: [\"5A\"] });\n      } else {\n        ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n      }\n\n      //如果底座没有回应，则计算时间差,时间差大于5秒，则没与温度计连接\n      if (new Date() - initTime > 6000) {\n        this._disconnect_to_mella();\n      } else {\n      }\n    }, 2000);\n  };\n  //底座与温度计断开连接\n  _disconnect_to_mella = () => {\n    let { setMellaConnectStatusFun, mellaConnectStatus, setMellaDeviceIdFun } =\n      this.props;\n    if (mellaConnectStatus !== \"disconnected\") {\n      setMellaConnectStatusFun(\"disconnected\");\n    }\n    setMellaDeviceIdFun(\"\");\n  };\n  //底座与温度计连接\n  _connect_to_mella = () => {\n    let { setMellaConnectStatusFun, mellaConnectStatus } = this.props;\n    if (mellaConnectStatus !== \"connected\") {\n      setMellaConnectStatusFun(\"connected\");\n    }\n  };\n\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\n  command = (newArr) => {\n    let dataArr1 = newArr.map((item) => {\n      if (item.toString(16).length < 2) {\n        return \"0\" + item.toString(16);\n      } else {\n        return item.toString(16);\n      }\n    });\n    //除了255,其他都是温度计的数据\n    let {\n      setMellaConnectStatusFun,\n      setMellaMeasureValueFun,\n      setMellaPredictValueFun,\n      setMellaMeasurePartFun,\n      mellaMeasurePart,\n      mellaConnectStatus,\n      setBiggieBodyFatFun,\n      setBiggieBodyWeightFun,\n      setBiggieConnectStatusFun,\n      setBiggieUnitFun,\n      setBiggieSameWeightCountFun,\n    } = this.props;\n    let {\n      biggieConnectStatus,\n      biggieBodyFat,\n      biggieBodyWeight,\n      biggieUnit,\n      biggieSameWeightCount,\n    } = this.props.hardwareReduce;\n\n    const instruction = [\n      209, 193, 192, 129, 135, 238, 98, 97, 130, 208, 177, 194, 7, 99, 255, 182,\n    ];\n\n    if (newArr[2] !== 7 && newArr[2] !== 255 && newArr[2] !== 182) {\n      initTime = new Date();\n      num07 = 0;\n      if (mellaConnectStatus === \"disconnected\") {\n        this._connect_to_mella();\n      }\n    } else {\n      num07++;\n    }\n\n    const commandArr = {\n      209: () => {\n        //腋温\n        //第一次测量去获取探头ID\n        if (firstEar) {\n          firstEar = false;\n          console.log(\"去获取探头id\");\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        let temp1 = parseFloat(`${dataArr1[3]}.${dataArr1[4]}`);\n        let temp0 = parseFloat(`${dataArr1[5]}.${dataArr1[6]}`);\n        let Temp = temp0;\n        if (\n          Temp === 24.7 ||\n          Temp === 0 ||\n          Temp === null ||\n          Temp === undefined\n        ) {\n          return;\n        }\n\n        let dataS = {\n          sample: clinicalIndex++,\n          data0: temp0,\n          data1: temp1,\n        };\n        clinicalYuce.push(dataS);\n        if (clinicalYuce.length >= 30) {\n          setMellaPredictValueFun(clinicalYuce);\n        }\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n\n        if (mellaMeasurePart !== \"腋温\" || mellaMeasurePart !== \"肛温\") {\n          setMellaMeasurePartFun(\"腋温\");\n        }\n        this.props.setMellaMeasureNumFun(this.props.mellaMeasureNum + 1);\n      },\n      208: () => {\n        //耳温\n\n        if (firstEar) {\n          firstEar = false;\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [] });\n          //重新测量,清空预测值\n          clinicalYuce = [];\n          clinicalIndex = 0;\n        }\n        //现在探头0可能不存在，所以把探头0改为探头1\n        let temp0 = parseFloat(`${dataArr1[7]}.${dataArr1[8]}`);\n        let Temp = temp0;\n        setMellaMeasureValueFun(Temp);\n        if (mellaConnectStatus !== \"isMeasuring\") {\n          setMellaConnectStatusFun(\"isMeasuring\");\n        }\n\n        if (mellaMeasurePart !== \"耳温\") {\n          setMellaMeasurePartFun(\"耳温\");\n        }\n      },\n      193: () => {\n        //指令结束\\自动结束后\\温度计收到预测数据后温度计返回值,结束后可能还会粘一组测量中的数据\n        //为了清除黏贴的数据，使用定时器\n        this.time193 && clearTimeout(this.time193);\n        this.time193 = setTimeout(() => {\n          if (new Date() - time194 < 1000) {\n            this.time193 && clearTimeout(this.time193);\n            return;\n          }\n          firstEar = true;\n          if (mellaConnectStatus !== \"complete\") {\n            setMellaConnectStatusFun(\"complete\");\n          }\n\n          let { units } = this.state;\n          let Temp = this.props.mellaMeasureValue;\n          let temp =\n            units === \"℉\"\n              ? parseInt((Temp * 1.8 + 32) * 10) / 10\n              : Temp.toFixed(1);\n          if (this.props.selectHardwareType === \"mellaPro\") {\n            console.log('要去写了', units, temp);\n            ipcRenderer.send(\"keyboardWriting\", temp);\n          }\n          this.time193 && clearTimeout(this.time193);\n        }, 500);\n      },\n      194: () => {\n        //硬件收到机器学习结果并停止测量，\n        this.time193 && clearTimeout(this.time193);\n        time194 = new Date()\n        console.log(\"---机器学习\", newArr);\n        if (mellaConnectStatus !== \"complete\") {\n          setMellaConnectStatusFun(\"complete\");\n        }\n        const timer = setTimeout(() => {\n          setMellaMeasureValueFun(this.props.mellaPredictReturnValue);\n\n          firstEar = true;\n          if (mellaConnectStatus !== \"complete\") {\n            setMellaConnectStatusFun(\"complete\");\n          }\n\n          let { units } = this.state;\n          let Temp = this.props.mellaPredictReturnValue;\n          let temp =\n            units === \"℉\"\n              ? parseInt((Temp * 1.8 + 32) * 10) / 10\n              : Temp.toFixed(1);\n          if (this.props.selectHardwareType === \"mellaPro\") {\n            ipcRenderer.send(\"keyboardWriting\", temp);\n          }\n          clearTimeout(timer);\n        }, 80);\n        clinicalYuce = [];\n        clinicalIndex = 0;\n      },\n      192: () => {\n        //温度计收到40开始数据后返回的指令\n        switch (newArr[3]) {\n          case 90:\n            console.log(\"有探头，开始测量的返回指令·\");\n            break;\n          case 11:\n            console.log(\"没有探头，开始测量的返回值\");\n            break;\n        }\n      },\n      129: () => {\n        //返回硬件版本号\n        console.log(`返回的版本号为${newArr[3]}`);\n      },\n      135: () => {\n        //硬件的一些基本信息\n        /**\n         * ______________新版、旧版没法控制温度计__________________\n         * newArr[3]、newArr[4]、newArr[5]、newArr[6]是蓝牙温度计的修正系数\n         * newArr[7] 无操作关机时间\n         * newArr[8] 背光时间\n         * newArr[9] 是否提示音    ：00代表无提示音，11代表有提示音\n         * newArr[10] 测量单位    01代表℃，00代表℉\n         */\n\n        let hardSet = electronStore.get(\n          `${storage.userId}-hardwareConfiguration`\n        );\n        if (!hardSet) {\n          hardSet = {\n            isHua: true,\n            is15: true,\n            self_tarting: false, //自启动\n            isBacklight: true,\n            isBeep: true,\n            backlightTimer: { length: 140, number: \"45\" },\n            autoOff: { length: 0, number: \"30\" },\n          };\n        }\n\n        let beep = hardSet.isBeep ? \"11\" : \"00\";\n        let unit = hardSet.isHua ? \"00\" : \"01\";\n\n        if (\n          dataArr1[7] === hardSet.autoOff.number &&\n          dataArr1[8] === hardSet.backlightTimer.number &&\n          dataArr1[9] === beep &&\n          dataArr1[10] === unit\n        ) {\n        } else {\n          console.log(\"不相同，去发送命令\");\n          let setArr = [\n            \"03\",\n            \"ed\",\n            \"07\",\n            \"dd\",\n            hardSet.autoOff.number,\n            hardSet.isBacklight ? hardSet.backlightTimer.number : \"00\",\n            hardSet.isBeep ? \"11\" : \"00\",\n            hardSet.isHua ? \"00\" : \"01\",\n          ];\n          ipcRenderer.send(\"usbdata\", { command: \"21\", arr: setArr });\n        }\n      },\n      238: () => {\n        //探头松动\n        console.log(\"探头松动\");\n        message.error(\n          \"The probe is loose, please re-install and measure again\",\n          5\n        );\n      },\n\n      98: () => {\n        //蓝牙连接断开\n        console.log(\n          \"断开连接---断开连接---断开连接---断开连接---断开连接---断开连接\"\n        );\n        firstEar = true;\n        // console.log(new Date() - is97Time);\n        if (new Date() - is97Time < 1300) {\n          return;\n        }\n        this._disconnect_to_mella();\n      },\n      97: () => {\n        //蓝牙连接\n        console.log(\n          \"连接成功---连接成功---连接成功---连接成功---连接成功---连接成功\"\n        );\n        this.getIdTimer && clearTimeout(this.getIdTimer);\n        this.getIdTimer = setTimeout(() => {\n          ipcRenderer.send(\"usbdata\", { command: \"31\", arr: [\"5A\"] });\n          this.getIdTimer && clearTimeout(this.getIdTimer);\n        }, 50);\n\n\n        is97Time = new Date();\n        this._connect_to_mella();\n      },\n      177: () => {\n        //探头id\n        let dataArr1 = newArr.map((item) => {\n          if (item.toString(16).length < 2) {\n            return \"0\" + item.toString(16);\n          } else {\n            return item.toString(16);\n          }\n        });\n\n        let id = \"\";\n        for (let i = 3; i < dataArr1.length - 2; i++) {\n          id += dataArr1[i];\n        }\n        // console.log(id, dataArr1[7]);\n        setMellaDeviceIdFun(id);\n        // this.setState({\n        //   probeID: id,\n        //   petVitalTypeId: dataArr1[7]\n        // })\n        if (dataArr1[7] === \"01\") {\n          if (mellaMeasurePart !== \"腋温\") {\n            setMellaMeasurePartFun(\"腋温\");\n          }\n        } else if (dataArr1[7] === \"02\") {\n          if (mellaMeasurePart !== \"肛温\") {\n            setMellaMeasurePartFun(\"肛温\");\n          }\n        } else if (dataArr1[7] === \"03\") {\n          if (mellaMeasurePart !== \"耳温\") {\n            setMellaMeasurePartFun(\"耳温\");\n          }\n        }\n      },\n      7: () => {\n        //发什么收什么，需要去重新插拔底座\n        console.log(\"重新插拔底座\");\n        if (num07 === 3 && this.state.err07Visible === false) {\n          this.setState({\n            err07Visible: true,\n          });\n        }\n      },\n      255: () => {\n        let length = newArr.length;\n        let frameLength = newArr[1]; //帧长\n        let itemLength = newArr[3] + 1; //数据位的长度   13\n        let dataIndex = 0;\n        let bluName = \"\";\n        let bluData = [];\n\n        while (itemLength < length && itemLength + 3 <= frameLength) {\n          let itemData = [];\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\n            itemData.push(dataArr1[i + dataIndex + 5]);\n          }\n          // console.log('--剪切的数据---', itemData);\n          switch (newArr[dataIndex + 4]) {\n            case 9:\n            case 8:\n              let str = \"\";\n              for (let i = 0; i < itemData.length; i++) {\n                let item = parseInt(itemData[i], 16);\n                str += String.fromCharCode(item);\n              }\n              bluName = str;\n              // console.log('--蓝牙名称:', bluName);\n\n              break;\n\n            case 255:\n              bluData = itemData;\n              break;\n            case 7:\n              console.log(\"---UUID\");\n              break;\n            case 239:\n              // console.log('---mac地址');\n              break;\n\n            case 3:\n              // console.log('----尺子的,不知道什么用');\n              break;\n\n            default:\n              console.log(\"直接跳出循环\");\n              return;\n          }\n          dataIndex = itemLength;\n          itemLength = itemLength + newArr[dataIndex + 3] + 1;\n        }\n        // console.log('硬件名称', bluName, '-----硬件数据', bluData);\n        let { setReceiveBroadcastHardwareInfoFun, hardwareReduce } = this.props;\n\n        let { receiveBroadcastHardwareInfo } = hardwareReduce;\n\n        if (bluName.indexOf(\"C19\") !== -1 && bluData.length > 10) {\n          let json = {\n            deviceType: \"biggie\",\n            macId: \"00:00:00:00:00:00\",\n            name: bluName,\n          };\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n\n          let weight = `0x${bluData[10]}${bluData[11]}`;\n          let impedance = `0x${bluData[12]}${bluData[13]}`;\n          let sendWeight = null;\n          //C19发送的体重值单位只是KG\n          try {\n            weight = parseInt(weight) / 100;\n            if (impedance) {\n              impedance = parseInt(impedance);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n          if (weight === biggieBodyWeight) {\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\n          } else {\n            setBiggieSameWeightCountFun(0);\n            setBiggieBodyWeightFun(weight);\n          }\n          if (impedance) {\n            setBiggieBodyFatFun(impedance);\n          }\n          if (biggieConnectStatus !== \"isMeasuring\") {\n            setBiggieConnectStatusFun(\"isMeasuring\");\n          }\n          if (biggieUnit !== \"kg\") {\n            setBiggieUnitFun(\"kg\");\n          }\n        } else if (bluName.indexOf(\"Mella Measure\") !== -1) {\n          let {\n            hardwareReduce,\n            setRulerConfirmCountFun,\n            setRulerConnectStatusFun,\n            setRulerMeasureValueFun,\n            setRulerUnitFun,\n          } = this.props;\n          let {\n            rulerConnectStatus,\n            rulerMeasureValue,\n            rulerUnit,\n            rulerConfirmCount,\n            receiveBroadcastHardwareInfo,\n          } = hardwareReduce;\n          // console.log('结束循环蓝牙名称', bluData)\n          let confirmBtn = bluData[8]; //十六进制数字，值为01代表尺子拉动，值为x2代表按了尺子确认按钮\n          let rulerUnitNum = parseInt(bluData[11], 16); //十进制数字，值等于11代表单位为in，00代表单位为cm\n          let newVal = null; //为测量数值，和单位匹配对应\n          const ITEMINDEX = 6;\n          let units = rulerUnitNum === 0 ? \"cm\" : \"in\";\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n          let json = {\n            deviceType: \"tape\",\n            macId: mac,\n            name: bluName,\n          };\n\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n\n          if (units !== rulerUnit) {\n            setRulerUnitFun(units);\n          }\n          if (rulerConnectStatus !== \"isMeasuring\") {\n            setRulerConnectStatusFun(\"isMeasuring\");\n          }\n          this.rulerTimer && clearTimeout(this.rulerTimer);\n          this.rulerTimer = setTimeout(() => {\n            setRulerConnectStatusFun(\"disconnected\");\n          }, 5000);\n          //num1和num2组成测得的测量值，num的值为测量数值，单位恒为厘米\n          let num1 = bluData[9];\n          let num2 = bluData[10];\n          let num = getVal(num1, num2);\n          try {\n            newVal = parseFloat(num);\n            if (rulerUnitNum === 17) {\n              newVal = newVal.toFixed(2);\n            } else {\n              newVal = newVal.toFixed(1);\n            }\n          } catch (error) {\n            console.log(error);\n          }\n\n          function getVal(shi, xiaoshuo) {\n            let num1 = parseInt(shi, 16);\n            let num2 = parseInt(xiaoshuo, 16);\n            return `${num1}.${num2}`;\n          }\n          if (newVal !== rulerMeasureValue) {\n            setRulerMeasureValueFun(newVal);\n          }\n\n          //点击了确认按钮\n\n          if (\n            confirmBtn[1] === \"2\" &&\n            parseInt(confirmBtn[0]) !== rulerConfirmCount &&\n            confirmBtn[0] !== null\n          ) {\n            setRulerConfirmCountFun(parseInt(confirmBtn[0], 16));\n          }\n        } else if (bluName.indexOf(\"Tabby\") !== -1) {\n\n        }\n\n        else if (bluName.indexOf(\"Biggie\") !== -1 && bluData.length > 10) {\n          function getVal(shi) {\n            if (`${shi}`.length < 2) {\n              return `0${shi}`;\n            }\n            return `${shi}`;\n          }\n\n          let newArr = bluData;\n\n          let mac = bluData[1];\n          for (let i = 2; i <= 6; i++) {\n            mac += `:${bluData[i]}`;\n          }\n\n          let json = {\n            deviceType: \"biggie\",\n            macId: mac,\n            name: bluName,\n          };\n\n          if (!compareObject(receiveBroadcastHardwareInfo, json)) {\n            setReceiveBroadcastHardwareInfoFun(json);\n          }\n          //定义体重的控制字符\n          let weightControl = newArr[8];\n          //定义体重的值\n          let weight = `${getVal(newArr[9].toString(16))}${getVal(\n            newArr[10].toString(16)\n          )}`;\n          weight = parseInt(weight, 16);\n          //定义体脂值\n          let impedance = `${getVal(newArr[12].toString(16))}${getVal(\n            newArr[13].toString(16)\n          )}`;\n          impedance = parseInt(impedance, 16);\n          let arr11 = getVal(newArr[11].toString(16));\n          weight = weight / Math.pow(10, parseInt(arr11[0]));\n\n          let weightUnits = arr11[1] === \"1\" ? \"lb\" : \"kg\";\n          let biggieStatus = \"isMeasuring\";\n          switch (weightControl) {\n            case 1:\n              biggieStatus = \"connected\";\n              break;\n            case 2:\n              biggieStatus = \"isMeasuring\";\n              break;\n            case 3:\n              biggieStatus = \"complete\";\n              break;\n            default:\n              break;\n          }\n          if (biggieStatus !== biggieConnectStatus) {\n            setBiggieConnectStatusFun(biggieStatus);\n          }\n          if (weightUnits !== biggieUnit) {\n            setBiggieUnitFun(weightUnits);\n          }\n          if (weight !== biggieBodyWeight) {\n            setBiggieBodyWeightFun(weight);\n            setBiggieSameWeightCountFun(0);\n          } else {\n            setBiggieSameWeightCountFun(biggieSameWeightCount + 1);\n          }\n          if (impedance !== biggieBodyFat) {\n            setBiggieBodyFatFun(impedance);\n          }\n        }\n      },\n      182: () => {\n        console.log(\"打开了底座通信\");\n      },\n    };\n    if (instruction.indexOf(newArr[2]) !== -1) {\n      return commandArr[newArr[2]];\n    } else {\n      return () => {\n        console.log(\"没有控制命令\", commandArr);\n      };\n    }\n  };\n\n  testCheck = (arr) => {\n    if (arr.length < 7) {\n      return false;\n    }\n    let i = 7;\n    let checkFloag = arr[i];\n\n    for (i = 8; i < arr.length - 2; i++) {\n      checkFloag = checkFloag ^ arr[i];\n    }\n    return checkFloag;\n  };\n  getMac = (arr) => {\n    // console.log(arr);\n    let str = arr[1].toString(16);\n    if (str.length === 1) {\n      str = \"0\" + str;\n    }\n    for (let i = 2; i < 7; i++) {\n      let item = arr[i].toString(16);\n      if (item.length === 1) {\n        item = \"0\" + item;\n      }\n      str += `:${item}`;\n      // }\n    }\n\n    return str;\n  };\n\n  //监听屏幕窗口改变\n  resize = () => {\n    let { offsetWidth, offsetHeight } = this.mainbody;\n    // console.log('resize', this.mainbody, { offsetWidth, offsetHeight });\n    if (offsetHeight !== this.state.bodyHeight) {\n      this.setState({\n        bodyHeight: offsetHeight - px(50),\n      });\n    }\n  };\n  //获取设备类型(渲染左侧硬件种类侧边栏)\n  getDevicesType = () => {\n    // let devicesTypeList = [\n    //   {\n    //     type: 'mellaPro',\n    //     devices: [\n    //       {\n    //         name: 'mellaPro',\n    //         mac: '',\n    //         deviceType: 'mellaPro',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'biggie',\n    //     devices: [\n    //       {\n    //         name: 'biggie',\n    //         mac: '',\n    //         deviceType: 'biggie',\n    //         examRoom: '',\n    //       },\n    //       {\n    //         name: 'biggie002',\n    //         mac: '1253',\n    //         deviceType: 'biggie',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'otterEQ',\n    //     devices: [\n    //       {\n    //         name: 'otterEQ',\n    //         mac: '',\n    //         deviceType: 'otterEQ',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n\n    //   {\n    //     type: 'rfid',\n    //     devices: [\n    //       {\n    //         name: 'rfid',\n    //         mac: '',\n    //         deviceType: 'rfid',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'tape',\n    //     devices: [\n    //       {\n    //         name: 'tape',\n    //         mac: '',\n    //         deviceType: 'tape',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   },\n    //   {\n    //     type: 'maeBowl',\n    //     devices: [\n    //       {\n    //         name: 'maeBowl',\n    //         mac: '',\n    //         deviceType: 'maeBowl',\n    //         examRoom: '',\n    //       }\n    //     ]\n    //   }\n    // ]\n\n    let devicesTypeList =\n      electronStore.get(\n        `${storage.lastOrganization}-${storage.userId}-devicesTypeList`\n      ) || [];\n    // console.log(\"获取的设22222备列表\", devicesTypeList);\n    if (devicesTypeList.length === 0) {\n      devicesTypeList.push({\n        type: \"mellaPro\",\n        devices: [\n          {\n            name: \"mellaPro\",\n            mac: \"\",\n            deviceType: \"mellaPro\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"biggie\",\n        devices: [\n          {\n            name: \"biggie\",\n            mac: \"\",\n            deviceType: \"biggie\",\n            examRoom: \"\",\n          },\n          {\n            name: \"biggie002\",\n            mac: \"1253\",\n            deviceType: \"biggie\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"tape\",\n        devices: [\n          {\n            name: \"tape\",\n            mac: \"45264\",\n            deviceType: \"tape\",\n            examRoom: \"\",\n          },\n        ],\n      });\n      devicesTypeList.push({\n        type: \"otterEQ\",\n        devices: [\n          {\n            name: \"otterEQ\",\n            mac: \"375082\",\n            deviceType: \"otterEQ\",\n            examRoom: \"\",\n          },\n        ],\n      });\n    }\n\n    let hardList = [].concat(devicesTypeList);\n    this.props.setHardwareList(hardList);\n    let showHardWareTypeList = [].concat(devicesTypeList);\n    showHardWareTypeList.push({\n      type: \"add\",\n      devices: [],\n    });\n\n    this.setState({\n      devicesTypeList,\n      showHardWareTypeList,\n    });\n  };\n  body = () => {\n    let { selectHardwareType } = this.props;\n\n    let { bodyHeight, clickMenuIndex } = this.state;\n    let measurePage = null;\n    switch (clickMenuIndex) {\n      case \"1\":\n        if (electronStore.get(`${storage.userId}-isClical`)) {\n          return (\n            <>\n              <HardAndPetsUI bodyHeight={bodyHeight} />\n              <ClininalStudy bodyHeight={bodyHeight} />\n            </>\n          );\n        } else {\n          switch (selectHardwareType) {\n            case \"mellaPro\":\n              measurePage = <TemperaturePage />;\n\n              break;\n            case \"biggie\":\n              measurePage = <BiggiePage />;\n              break;\n\n            case \"tape\":\n              measurePage = <ScanPage />;\n              break;\n            case \"otterEQ\":\n              measurePage = <OtterEQPage />;\n              break;\n\n            default:\n              break;\n          }\n          if (selectHardwareType === \"add\") {\n            return <AddDevice bodyHeight={bodyHeight} />;\n          } else {\n            return (\n              <>\n                <HardAndPetsUI bodyHeight={bodyHeight} />\n                {measurePage}\n              </>\n            );\n          }\n        }\n      case \"2\":\n        return <AllPets bodyHeight={bodyHeight} />;\n      case \"CombineScales\":\n        return <CombineScales />;\n      case \"AddDevice\":\n        return <AddDevice bodyHeight={bodyHeight} />;\n      case \"3\":\n        return <ScheduledPetPage bodyHeight={bodyHeight} />;\n\n      case \"AddScheduledPet\":\n        return <AddScheduledPet bodyHeight={bodyHeight} />;\n      case \"6\":\n        return (\n          <>\n            <HardAndPetsUI bodyHeight={bodyHeight} />\n            <ClininalStudy bodyHeight={bodyHeight} />\n          </>\n        );\n\n      case \"4\":\n        return (\n          <MyAccount bodyHeight={bodyHeight} />\n        );\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    let { bodyHeight } = this.state;\n\n    return (\n      <div\n        className=\"flex\"\n        id=\"mainbody\"\n        ref={(val) => (this.mainbody = val)}\n        onClick={() => {\n          if (this.props.selectHardwareModalShowFun) {\n            this.props.selectHardwareModalShowFun(false);\n          }\n        }}\n      >\n        <Heard />\n        <div className=\"mainbody-body\">\n          <HardWareTypeUI\n            bodyHeight={bodyHeight}\n            devicesTypeList={this.state.showHardWareTypeList}\n          />\n          {this.body()}\n        </div>\n        <Modal\n          visible={this.state.err07Visible}\n          // visible={true}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          width={330}\n          closable={false}\n          footer={[]}\n          destroyOnClose={true}\n          wrapClassName=\"vetPrifileModal\"\n        >\n          <div id=\"vetPrifileModal\">\n            <div className=\"title\">prompt</div>\n\n            <div className=\"text\">Please re-plug the base device</div>\n\n            <div\n              className=\"btn\"\n              style={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                marginBottom: \"5px\",\n              }}\n            >\n              <button\n                onClick={() => {\n                  this.setState({\n                    err07Visible: false,\n                  });\n                  num07 = 0;\n                }}\n              >\n                OK\n              </button>\n            </div>\n          </div>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default connect(\n  (state) => ({\n    isHaveUsbDevice: state.hardwareReduce.isHaveUsbDevice,\n    mellaMeasureNum: state.hardwareReduce.mellaMeasureNum,\n    mellaConnectStatus: state.hardwareReduce.mellaConnectStatus,\n    mellaMeasureValue: state.hardwareReduce.mellaMeasureValue,\n    mellaMeasurePart: state.hardwareReduce.mellaMeasurePart,\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    hardwareReduce: state.hardwareReduce,\n    hardwareList: state.hardwareReduce.hardwareList,\n    hardwareInfo: state.hardwareReduce.selectHardwareInfo,\n    menuNum: state.userReduce.menuNum,\n    mellaPredictReturnValue: state.hardwareReduce.mellaPredictReturnValue,\n    test: state.userReduce.test\n  }),\n  {\n    setHardwareList,\n    selectHardwareModalShowFun,\n    setIsHaveUsbDeviceFun,\n\n    setMellaConnectStatusFun,\n    setMellaMeasureValueFun,\n    setMellaPredictValueFun,\n    setMellaMeasurePartFun,\n    setMellaDeviceIdFun,\n    setBiggieConnectStatusFun,\n    setBiggieBodyFatFun,\n    setBiggieBodyWeightFun,\n    setBiggieUnitFun,\n    setBiggieSameWeightCountFun,\n    setRulerConnectStatusFun,\n    setRulerMeasureValueFun,\n    setRulerUnitFun,\n    setRulerConfirmCountFun,\n    setReceiveBroadcastHardwareInfoFun,\n    setMellaMeasureNumFun,\n  }\n)(App);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\axios\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\userReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\hardwareType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\biggiePage\\Biggie.jsx",["1148","1149","1150","1151","1152","1153","1154","1155","1156"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { px, mTop } from './../../utils/px'\r\nimport cir from './../../assets/images/cir.png'\r\nimport xia from './../../assets/img/xia.png'\r\n\r\n//import 'antd/dist/antd.css';\r\nimport './biggie.less'\r\n\r\n/**\r\n * \r\n * @param {string} weight   体重值\r\n * @param {string} bodyFat   体脂\r\n * @param {string} score   健康指数\r\n * @param {string} impedance   阻抗值\r\n * @param {boolean} issave   按钮文本，为true展示save，为false展示send to pms\r\n * @param {function} onPress   点击按钮调用的函数\r\n * \r\n * @returns \r\n */\r\n\r\nconst Biggie = ({ weight, bodyFat, score, impedance, issave, onPress, discardOnPress, isIbs, isHaveSaveBtn = true }) => {\r\n\r\n  // let { weight, bodyFat, score } = this.props\r\n\r\n  let lTColor = bodyFat !== null && bodyFat >= 0 ? '#87C563' : '#D8D9D9'\r\n  let rTColor = score !== null && score >= 0 ? '#87C563' : '#D8D9D9'\r\n  let lTtext = bodyFat !== null && bodyFat >= 0 ? `${bodyFat}%` : `Not Available`\r\n  let lTtextSize = bodyFat !== null && bodyFat >= 0 ? px(16) : px(15)\r\n  let rTtext = score !== null && score >= 0 ? `${score}` : `Not\\nAvailable`\r\n  let rTtextSize = score !== null && score >= 0 ? px(16) : px(15)\r\n\r\n  return (\r\n    <div className=\"biggie\" >\r\n      <div className=\"top\">\r\n\r\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\r\n          <div style={{ backgroundColor: lTColor, borderRadius: px(75), }} className='lT'>\r\n            <div className='lTText' style={{ fontSize: lTtextSize }}>{lTtext}</div>\r\n          </div>\r\n          <div style={{ fontSize: px(14) }}>{`Body Fat\\nPercent`}</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(5) }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div style={{ height: px(240), borderRadius: px(150), marginBottom: px(50) }} className='cen'>\r\n          <div style={{ borderRadius: px(75) }} className='lT'>\r\n            <img\r\n              src={cir}\r\n              width={'100%'}\r\n            />\r\n          </div>\r\n          <div className='cTText' style={{ top: px(45), fontSize: px(32), fontWeight: '800' }}>{weight}</div>\r\n          <div style={{ top: px(95), fontSize: px(25) }} className='cTText'>{`${isIbs ? 'lbs' : 'kgs'}`}</div>\r\n          <div className='cenCText' style={{ fontSize: px(24) }}>Weight</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(6) }}\r\n          />\r\n        </div>\r\n\r\n\r\n\r\n        <div style={{ marginTop: px(150), height: px(160), borderRadius: px(150) }} className='biggiel'>\r\n          <div style={{ backgroundColor: rTColor, borderRadius: px(75) }} className='lT'>\r\n            <div className='lTText' style={{ fontSize: rTtextSize }}>{rTtext}</div>\r\n          </div>\r\n          <div style={{ fontSize: px(14) }}>{`Body\\nCondition\\nScore`}</div>\r\n          <img\r\n            src={xia}\r\n            style={{ width: px(20), marginBottom: px(5) }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <div className='biggiefoot' style={{ marginTop: px(10), }}>\r\n        {isHaveSaveBtn &&\r\n          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-around', width: '100%' }}>\r\n            <div\r\n              className='biggiefootbtn'\r\n              style={{ height: px(36), }}\r\n              onClick={() => {\r\n                discardOnPress()\r\n              }}\r\n            >\r\n              <div style={{ color: '#fff', fontSize: px(16) }}>{`Discard`}</div>\r\n            </div>\r\n\r\n\r\n            <div\r\n              className='biggiefootbtn'\r\n              style={{ height: px(36), }}\r\n              onClick={() => {\r\n                onPress()\r\n              }}\r\n            >\r\n              <div style={{ color: '#fff', fontSize: px(16) }}>{issave ? `Save` : `Send to PMS`}</div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        }\r\n\r\n\r\n        {(impedance && impedance > 0) ? <div style={{ color: '#000', fontSize: px(18), marginTop: mTop(10) }}>{`Impedance ${impedance} Ohms`}</div> : null}\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nBiggie.propTypes = {\r\n  weight: PropTypes.string || PropTypes.number,\r\n  bodyFat: PropTypes.number || PropTypes.string,\r\n  score: PropTypes.number || PropTypes.string,\r\n  impedance: PropTypes.number || PropTypes.string,\r\n  issave: PropTypes.bool,\r\n  onPress: PropTypes.func,\r\n  isIbs: PropTypes.bool\r\n}\r\nexport default Biggie","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actionTypes\\userType.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\numericInput.jsx",["1157","1158"],"import React, {\r\n} from 'react';\r\nimport { Input } from 'antd';\r\nimport _ from 'lodash';\r\nimport './numericInput.less'\r\nimport { useEffect } from 'react';\r\n\r\nconst NumericInput = (props) => {\r\n    const { value, onChange, getInput, onClick,onKey,index } = props;\r\n\r\n    //输入框输入\r\n    const handleChange = (e) => {\r\n        const { value: inputValue } = e.target;\r\n        const reg = /^-?\\d*(\\.\\d*)?$/;\r\n\r\n        if (reg.test(inputValue) || inputValue === '' || inputValue === '-') {\r\n            onChange(inputValue);\r\n        }\r\n    }\r\n    //失去焦点\r\n    const handleBlur = () => {\r\n        let valueTemp = value;\r\n        if (`${value}`.charAt(`${value}`.length - 1) === '.' || value === '-') {\r\n            valueTemp = value.slice(0, -1);\r\n        }\r\n        onChange(`${valueTemp}`.replace(/0*(\\d+)/, '$1'));\r\n    };\r\n    //输入框点击事件\r\n    const handleClick = () => {\r\n        onClick();\r\n    }\r\n    //修改样式\r\n    let bordercolor = onKey ===index ?'#e1206d':'#d9d9d9';\r\n\r\n\r\n    return (\r\n        <Input\r\n            {...props}\r\n            className='inputNum'\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            maxLength={25}\r\n            ref={getInput}\r\n            onClick={handleClick}\r\n            style={{borderColor:bordercolor}}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default NumericInput;\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\slider\\Slider.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\createAccount\\vetProfile\\VetPrifile.jsx",["1159","1160","1161","1162","1163","1164","1165","1166"],"import React, { Component, } from 'react'\r\nimport {\r\n  Button,\r\n\r\n  Modal,\r\n  message\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport { createFromIconfontCN, CaretDownFilled } from '@ant-design/icons';\r\n//import 'antd/dist/antd.css';\r\n\r\nimport './vetProfile.less'\r\nimport imgArray from './../../../utils/areaCode/imgArray'\r\nimport MaxMin from './../../../utils/maxminreturn/MaxMinReturn'\r\nimport { fetchRequest2 } from './../../../utils/FetchUtil2'\r\nimport { fetchRequest } from './../../../utils/FetchUtil1'\r\nimport countryList from './../../../utils/areaCode/country';\r\nimport moment from 'moment';\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, pX, px } from '../../../utils/px';\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport { fetchRequest3 } from './../../../utils/FetchUtil3';\r\n\r\nconst options = [\r\n  { label: 'Dogs', value: 'Dogs' },\r\n  { label: 'Cats', value: 'Cats' },\r\n  { label: 'Small Pets', value: 'Small Pets' },\r\n  { label: 'Nutrition', value: 'Nutrition' },\r\n  { label: 'Surgery', value: 'Surgery' },\r\n  { label: 'Zoo', value: 'Zoo' },\r\n  { label: 'Wildlife', value: 'Wildlife' },\r\n  { label: 'Cardiology', value: 'Cardiology' },\r\n  { label: 'Neurology', value: 'Neurology' },\r\n  { label: 'Anaesthesia', value: 'Anaesthesia' },\r\n  { label: 'Other', value: 'Other' },\r\n]\r\nexport default class VetPrifile extends Component {\r\n\r\n  state = {\r\n    code: 1,\r\n    imgArrayIndex: 0,\r\n    otherText: '',\r\n    name: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    birthday: moment(),\r\n    password: '',\r\n    password1: '',\r\n    checboxtValue: [],\r\n    expertise: '00000000000',       //专业领域，勾选某一项，则这一项为1，反之为0    01011111101\r\n\r\n    visible: false,       //nodel框是否显示\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n    loadVisible: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    //发送指令让main.js创建一个big窗口\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n\r\n    //检测是否本地是否有注册信息，有就展示出来。\r\n    console.log(temporaryStorage.logupVetInfo);\r\n    if (temporaryStorage.logupVetInfo && temporaryStorage.logupVetInfo.email) {\r\n      console.log('进来了');\r\n      let { firstName, lastName, email, hash, code, initPhone, imgArrayIndex } = temporaryStorage.logupVetInfo\r\n      this.setState({\r\n        name: firstName || '',\r\n        lastName,\r\n        email,\r\n        password: hash,\r\n        password1: hash,\r\n        code,\r\n        phone: initPhone || '',\r\n        imgArrayIndex\r\n      })\r\n\r\n\r\n    }\r\n\r\n\r\n    //如果是从别的界面跳转过来并且带来了邮箱号，要直接展示在输入框里。eg：忘记密码输入的邮箱号未注册，跳转到注册界面\r\n    if (this.props.location && this.props.location.email) {\r\n      this.setState({\r\n        email: this.props.location.email\r\n      })\r\n    }\r\n    //监听屏幕分辩率是否变化，变化就去更改界面内容距离大小\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    ipcRenderer.send('big')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n\r\n  _next1 = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    // if (!phone) {\r\n    //   message.error('Please enter the phone number', 3)\r\n    //   return\r\n    // }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n    fetchRequest(`/user/checkUser/${email}`, 'GET', '')\r\n      .then(res => {\r\n        console.log(res);\r\n        if (!res.flag) {\r\n          console.log('邮箱号以被注册，是否忘记密码');\r\n          this.setState({\r\n            loadVisible: false,\r\n            visible: true\r\n          })\r\n        }\r\n        else {\r\n          console.log('邮箱号可以使用');\r\n          if (res.code === 11011 || res.code === 11012) {\r\n            this.setState({\r\n              loadVisible: false,\r\n              visible: true\r\n            })\r\n            return\r\n          }\r\n\r\n          let params = {\r\n            firstName: name,\r\n            lastName,\r\n            email,\r\n            // phone: `+${code}${phone}`,\r\n            hash: password,\r\n          }\r\n          if (phone) {\r\n            params.phone = `+${code}${phone}`\r\n          }\r\n          console.log('注册接口的入参：', params);\r\n          fetchRequest2('/user/deskRegistAWSSNS', \"POST\", params)\r\n            .then(res => {\r\n              this.setState({\r\n                loadVisible: false\r\n              })\r\n              console.log('注册接口返回数据：', res);\r\n              if (res.flag) {\r\n                console.log('注册成功了，去验证验证码');\r\n                temporaryStorage.logupEmailCode = res.data\r\n                params.code = code\r\n                params.initPhone = phone\r\n                params.imgArrayIndex = this.state.imgArrayIndex\r\n                temporaryStorage.logupVetInfo = params\r\n                this.props.history.push('/uesr/logUp/VerifyEmail')\r\n              } else {\r\n                message.error('registration failed', 3)\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                loadVisible: false\r\n              })\r\n              message.error(`Error:${err.message}`)\r\n              console.log('注册接口抛出错误：', err);\r\n            })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('检测邮箱号的接口出错了', err);\r\n      })\r\n  }\r\n  _next = () => {\r\n    let { name, lastName, email, code, phone, password1, password, } = this.state\r\n    message.destroy()\r\n    console.log({ name, email, code, phone, password1, password, });\r\n    email = email.toLocaleLowerCase()\r\n    if (name.length <= 0) {\r\n      message.error('Please enter your first name', 3)\r\n      return\r\n    }\r\n    if (lastName.length <= 0) {\r\n      message.error('Please enter your last name', 3)\r\n      return\r\n    }\r\n    if (!email) {\r\n      message.error('Please enter the mailbox number', 3)\r\n      return\r\n    } else {\r\n      if (email.indexOf('@') === -1 || email.indexOf('@') === 0 || email.indexOf('@') === email.length - 1) {\r\n        message.error('E-mail format is incorrect', 3)\r\n        return\r\n      }\r\n    }\r\n    // if (!phone) {\r\n    //   message.error('Please enter the phone number', 3)\r\n    //   return\r\n    // }\r\n    if (password.length <= 0 || password1.length <= 0) {\r\n      message.error('Please enter the password', 3)\r\n      return\r\n    }\r\n\r\n    if (password !== password1) {\r\n      message.error('The password entered twice is incorrect, please re-enter', 3)\r\n      return\r\n    }\r\n    this.setState({\r\n      loadVisible: true\r\n    })\r\n\r\n\r\n    let params = {\r\n      firstName: name,\r\n      lastName,\r\n      email,\r\n      hash: password,\r\n    }\r\n    if (phone) {\r\n      params.phone = `+${code}${phone}`\r\n    }\r\n    console.log('注册接口的入参：', params);\r\n    fetchRequest3('/user/registByAWSSES', \"POST\", params)\r\n      .then(res => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        console.log('注册接口返回数据：', res);\r\n        switch (res.code) {\r\n          case 11011:\r\n            console.log('用户已存在，应该跳出弹框')\r\n            this.setState({\r\n              visible: true\r\n            })\r\n\r\n            break;\r\n\r\n          case 20000:\r\n            console.log('可以注册，跳转到下一页');\r\n            temporaryStorage.logupEmailCode = res.data\r\n            params.code = code\r\n            params.initPhone = phone\r\n            params.imgArrayIndex = this.state.imgArrayIndex\r\n            temporaryStorage.logupVetInfo = params\r\n            this.props.history.push('/uesr/logUp/VerifyEmail')\r\n            break;\r\n\r\n          default:\r\n            break;\r\n        }\r\n        // if (res.flag) {\r\n        //   console.log('注册成功了，去验证验证码');\r\n        //   temporaryStorage.logupEmailCode = res.data\r\n        //   params.code = code\r\n        //   params.initPhone = phone\r\n        //   params.imgArrayIndex = this.state.imgArrayIndex\r\n        //   temporaryStorage.logupVetInfo = params\r\n        //   this.props.history.push('/uesr/logUp/VerifyEmail')\r\n        // } else {\r\n        //   message.error('registration failed', 3)\r\n        // }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loadVisible: false\r\n        })\r\n        message.error(`Error:${err.message}`)\r\n        console.log('注册接口抛出错误：', err);\r\n      })\r\n\r\n  }\r\n  _signIn = (e) => {\r\n    e.preventDefault();\r\n    this.props.history.push('/page11')\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let { lastName, disabled, bounds, name, email, phone, password, password1, visible } = this.state\r\n    return (\r\n      <div id=\"vetPrifile\" >\r\n        {/* 关闭缩小 */}\r\n        <div className=\"heard\">\r\n          <MaxMin\r\n            onClick={() => { this.props.history.push('/') }}\r\n            onClick1={() => this.props.history.push('/')}\r\n          />\r\n        </div>\r\n        <div className=\"body\">\r\n          <div className=\"text\"\r\n            style={{ fontSize: px(30), marginBottom: px(120) }}\r\n          >\r\n            Let’s start by creating your account\r\n          </div>\r\n          <div className=\"form\" >\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={name}\r\n                  placeholder=\"First Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      name: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  placeholder=\"Last Name\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n\r\n                    this.setState({\r\n                      lastName: data\r\n                    })\r\n                  }}\r\n                />\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Email\"\r\n                  value={email}\r\n                  placeholder=\"Email Address*\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      email: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <ul id=\"list\" style={{ top: -px(80), left: px(10) }}>\r\n                  {countryList.map((item, index) => {\r\n                    let url = imgArray[item.locale.toLowerCase()] ? imgArray[item.locale.toLowerCase()].default : ''\r\n                    return (\r\n                      <li key={index}>\r\n                        <div key={index}\r\n                          style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}\r\n                          onClick={() => {\r\n                            console.log(item, index);\r\n                            this.setState({\r\n                              code: item.code,\r\n                              imgArrayIndex: index\r\n                            })\r\n                            document.getElementById('list').style.display = \"none\"\r\n                          }}\r\n                        >\r\n                          <img src={url} alt=\"\" />\r\n                          <p >{`${item.en}   +${item.code}`}</p>\r\n                        </div>\r\n                      </li>\r\n                    )\r\n                  })}\r\n                </ul>\r\n\r\n\r\n                <div className='phone'>\r\n                  <div\r\n                    style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', position: 'absolute', left: '10px' }}\r\n                    onClick={() => {\r\n                      document.getElementById('list').style.display = \"block\"\r\n                    }}\r\n                  >\r\n                    <img style={{ zIndex: '888' }}\r\n                      src={imgArray[countryList[this.state.imgArrayIndex].locale.toLowerCase()].default} alt=\"\"\r\n                    />\r\n                    <CaretDownFilled style={{ marginRight: '10px' }} />\r\n                  </div>\r\n\r\n\r\n                  <input\r\n                    type=\"Phone\"\r\n                    value={phone}\r\n                    placeholder=\"Phone Number\"\r\n                    onChange={(value) => {\r\n                      let data = value.target.value\r\n                      this.setState({\r\n                        phone: data.replace(/[^\\-?\\d]/g, '')\r\n                      })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item\" style={{ marginBottom: px(40) }}>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password}\r\n                  placeholder=\"Create Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"l\" style={{ margin: `0 ${px(8)}px` }}>\r\n                <input\r\n                  type=\"Password\"\r\n                  value={password1}\r\n                  placeholder=\"Confirm  Password\"\r\n                  onChange={(value) => {\r\n                    let data = value.target.value\r\n                    this.setState({\r\n                      password1: data\r\n                    })\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n        <div className=\"foot\">\r\n          <div className=\"footText\"\r\n          >Already have an accoun? <a href=\"#\" onClick={this._signIn}> Sign In</a></div>\r\n\r\n          {/* 按钮 */}\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size='large'\r\n              htmlType=\"submit\"\r\n              onClick={this._next}\r\n            >\r\n              Next\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        <MyModal\r\n\r\n          visible={this.state.loadVisible}\r\n        />\r\n\r\n        <Modal\r\n\r\n          visible={visible}\r\n          // visible={true}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n          width={330}\r\n          closable={false}\r\n          footer={[\r\n\r\n          ]}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"vetPrifileModal\"\r\n        >\r\n          <div id='vetPrifileModal'>\r\n            <div className=\"title\">Email Already Exists</div>\r\n\r\n            <div className='text'>Please sign up with your Mella<br />account and create a new<br />workspace from the<br />Settings menu.</div>\r\n\r\n            <div className=\"btn\">\r\n\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false,\r\n                    email: ''\r\n                  })\r\n                }}\r\n              >Try Again</button>\r\n              <button\r\n                onClick={() => {\r\n                  this.setState({\r\n                    visible: false\r\n                  })\r\n                  this.props.history.replace('/page11')\r\n                }}\r\n              >Sign Up</button>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Modal>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\advancedSettings\\AdvancedSettings.jsx",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\addDevice\\AddDevice.jsx",["1167","1168","1169","1170","1171","1172","1173","1174","1175","1176"],"import React, { Component } from 'react'\r\nimport { Input, Button, message, Spin, BackTop } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport './addDevice.less'\r\nimport MinClose from '../../../utils/minClose/MinClose'\r\nimport MouseDiv from '../../../utils/mouseDiv/MouseDiv'\r\nimport back_white from '../../../assets/img/back-white.png'\r\nimport back_hui from '../../../assets/img/back-hui.png'\r\nimport redclose from '../../../assets/img/redclose.png'\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport { mTop, px, MTop, pX } from '../../../utils/px';\r\nimport electronStore from '../../../utils/electronStore';\r\n\r\nlet storage = window.localStorage;\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\nlet num07 = 0       //接收到07命令行的次数\r\n\r\n\r\nexport default class AddDevice extends Component {\r\n\r\n  state = {\r\n    noUSB: false,\r\n    devicesList: [],\r\n    selectDevice: null,\r\n    // selectDevice: true,\r\n    reName: '',\r\n    saveDeviceMac: []  //这是已经保存过的设备的macid\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    message.destroy()\r\n\r\n    ipcRenderer.send('small')\r\n    // 监听分辨率是否改变\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n    //这里做了个监听，当有数据发过来的时候直接在这里接收\r\n    ipcRenderer.on('sned', this._send)\r\n    ipcRenderer.on('noUSB', this._noUSB)\r\n    let devicesList = electronStore.get(`${storage.userId}-deviceList`)\r\n    if (devicesList) {\r\n      let saveDeviceMac = []\r\n      for (let i = 0; i < devicesList.length; i++) {\r\n        const element = devicesList[i];\r\n        saveDeviceMac.push(element.macId)\r\n      }\r\n      this.setState({\r\n        saveDeviceMac\r\n      })\r\n    }\r\n\r\n\r\n\r\n    // const timer = setTimeout(() => {\r\n    //   let deviceList = [\r\n    //     // { name: 'Add Device', deviceType: 'add', macId: '0' },\r\n    //     { name: 'malla001', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla002', deviceType: 'mellaPro', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla003', deviceType: 'mellaHome', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'biggie00222222222222221', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'malla001', deviceType: 'biggie', macId: '11:22:33:44:55:66' },\r\n    //     { name: 'Charlie001', deviceType: 'rfid', macId: '11:22:33:44:55:66' },\r\n    //   ]\r\n    //   this.setState({\r\n    //     devicesList: deviceList\r\n    //   })\r\n    //   clearTimeout(timer)\r\n    // }, 500);\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    ipcRenderer.removeListener('sned', this._send)\r\n    ipcRenderer.removeListener('noUSB', this._noUSB)\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  _noUSB = (e, data) => {\r\n    console.log('没有USB设备：', data);\r\n    if (data === false) {\r\n      message.destroy()\r\n      this.setState({\r\n        noUSB: false\r\n      })\r\n    } else {\r\n      if (!this.state.noUSB) {\r\n        // message.error('The base is not detected. Please insert the base', 0)\r\n        this.setState({\r\n          noUSB: true\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  _send = (event, data) => {\r\n    //data就是测量的数据，是十进制的数字\r\n    // console.log(data);\r\n    this.command(data)()\r\n  }\r\n  // newArr 指的是十进制数字数组，   dataArr1:指的是16进制字符串数组\r\n  command = (newArr) => {\r\n    const instruction = [255]\r\n    let dataArr1 = newArr.map(item => {\r\n      if (item.toString(16).length < 2) {\r\n        return '0' + item.toString(16)\r\n      } else {\r\n        return item.toString(16)\r\n      }\r\n    })\r\n    // console.log(dataArr1);\r\n    const commandArr = {\r\n      255: () => {//蓝牙软尺广播的数据\r\n        let length = newArr.length\r\n        let frameLength = newArr[1]   //帧长\r\n        let itemLength = newArr[3] + 1  //数据位的长度   13\r\n        let dataIndex = 0\r\n\r\n        let bluName = ''\r\n        let bluData = []\r\n        //[\"aa\", \"25\", \"ff\", |\"03\", \"03\", \"b0\", \"ff\",| \"0f\", \"ff\", \"ac\", \"d2\", \"0b\", \"72\", \"c1\", \"7d\", \"3e\", \"d0\", \"a0\", \"00\", \"05\", \"09\", \"00\", \"2e\",| \"05\", \"09\", \"54\", \"61\", \"70\", \"65\", |\"06\", \"ef\", \"d0\", \"3e\", \"7d\", \"c1\", \"72\", |\"0b\", \"5c\", \"55\"]\r\n        while (itemLength < length && (itemLength + 3 <= frameLength)) {\r\n          let itemData = []\r\n          for (let i = 0; i < newArr[dataIndex + 3] - 1; i++) {\r\n            itemData.push(dataArr1[i + dataIndex + 5])\r\n          }\r\n          // console.log('--剪切的数据---', itemData);\r\n          switch (newArr[dataIndex + 4]) {\r\n            case 9:\r\n            case 8:\r\n              let str = ''\r\n              for (let i = 0; i < itemData.length; i++) {\r\n                let item = parseInt(itemData[i], 16)\r\n                str += String.fromCharCode(item)\r\n              }\r\n              bluName = str\r\n              break;\r\n            case 255:\r\n              bluData = itemData\r\n              break;\r\n            case 7: console.log('---UUID'); break;\r\n            case 239:\r\n              // console.log('---mac地址'); \r\n              break;\r\n            case 3: console.log('----尺子的,不知道什么用'); break;\r\n            default: console.log('直接跳出循环'); return;\r\n          }\r\n          dataIndex = itemLength\r\n          itemLength = itemLength + newArr[dataIndex + 3] + 1\r\n        }\r\n        console.log('硬件名称', bluName, '-----硬件数据', bluData);\r\n        let macId = ''\r\n        if (bluData.length > 7) {\r\n          macId = this.getMac(bluName, bluData)\r\n        }\r\n\r\n\r\n        let sameFlog = this.state.devicesList.some((device, index) => {\r\n          return device.macId === macId\r\n        })\r\n        if (sameFlog || !macId) {   //重复直接退出\r\n          return\r\n        }\r\n        let deviceType = ''\r\n        switch (bluName) {\r\n          case 'Biggie':        //这是体脂称\r\n            deviceType = 'biggie'\r\n\r\n            break;\r\n          case 'C19':        //这是体脂称\r\n            deviceType = 'biggie'\r\n\r\n            break;\r\n\r\n          case 'MaeBowl':   //这是称量碗\r\n            deviceType = 'maeBowl'\r\n            break;\r\n\r\n          case 'Mella Measure': //这是蓝牙尺\r\n            deviceType = 'tape'\r\n            break;\r\n\r\n        }\r\n        if (macId && deviceType && bluName) {\r\n          let json = {\r\n            name: bluName,\r\n            deviceType,\r\n            macId\r\n          }\r\n          let deviceArr = [].concat(this.state.devicesList)\r\n          deviceArr.push(json)\r\n          this.setState({\r\n            devicesList: deviceArr\r\n          })\r\n        }\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n    if (instruction.indexOf(newArr[2]) !== -1) {\r\n      return commandArr[newArr[2]]\r\n    } else {\r\n      return () => {\r\n        console.log('没有控制命令', commandArr);\r\n      }\r\n    }\r\n  }\r\n  getMac = (bluName, bluData) => {\r\n    switch (bluName) {\r\n      case 'Biggie':\r\n      case 'MaeBowl':\r\n      case 'Mella Measure':\r\n      case 'C19':\r\n        let str = bluData[1]\r\n        for (let i = 2; i < 7; i++) {\r\n          str += `:${bluData[i]}`\r\n        }\r\n        return str\r\n\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  changeFenBianLv = (e) => {\r\n    ipcRenderer.send('small')\r\n    this.setState({\r\n    })\r\n  }\r\n  beforeDiv = () => {\r\n    return (\r\n      <img src={back_hui} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n  }\r\n  afterDiv = () => {\r\n    return (\r\n      <img src={back_white} alt=\"\" style={{ width: px(15) }} />\r\n    )\r\n\r\n  }\r\n\r\n  body = () => {\r\n    let { noUSB, devicesList, selectDevice, reName } = this.state\r\n    if (selectDevice) {\r\n      return <div className=\"addDevice flex\">\r\n        <div className=\"addDeviceTop flex\">\r\n          <div className=\"title\" style={{ fontSize: px(30), marginBottom: px(40) }}>Would you like to name<br />\r\n            this Mella device?</div>\r\n\r\n          <div className=\"input flex\" style={{ marginBottom: px(60) }}>\r\n            <input type=\"text\" style={{ height: px(45) }}\r\n              value={reName}\r\n              onChange={(value) => {\r\n                this.setState({\r\n                  reName: value.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"text\" style={{ fontSize: px(18) }}>* We recommend naming based\r\n          on the Exam Room. Write the name\r\n          on the sticker provided so it is easy\r\n            to select your device in the future.</div>\r\n        </div>\r\n        <div className=\"addDeviceFoot flex\">\r\n          <div className=\"btn\"\r\n            onClick={() => {\r\n              let { reName, selectDevice } = this.state\r\n              console.log(reName, selectDevice);\r\n              if (reName) {\r\n                selectDevice.name = reName\r\n              }\r\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\r\n              console.log('---', deviceList);\r\n              deviceList.push(selectDevice)\r\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\r\n              let { saveDeviceMac } = this.state\r\n              saveDeviceMac.push(selectDevice.macId)\r\n              this.setState({\r\n                saveDeviceMac,\r\n                selectDevice: null,\r\n                reName: ''\r\n              })\r\n\r\n            }}\r\n          >\r\n            <p className='btnText'>Add Another</p>\r\n          </div>\r\n          <div className=\"btn\"\r\n            onClick={() => {\r\n              let { reName, selectDevice } = this.state\r\n              console.log(reName, selectDevice);\r\n              if (reName) {\r\n                selectDevice.name = reName\r\n              }\r\n              let deviceList = electronStore.get(`${storage.userId}-deviceList`)\r\n              deviceList.push(selectDevice)\r\n              electronStore.set(`${storage.userId}-deviceList`, deviceList)\r\n              this.props.history.goBack()\r\n\r\n            }}\r\n          >\r\n            <p className='btnText'>Finish</p>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n    } else {\r\n      if (noUSB) {\r\n        return <div className='flex' style={{ width: '100%', marginBottom: px(120), height: '50%', }}>\r\n          <img src={redclose} alt=\"\" style={{ width: px(80) }} />\r\n\r\n          <p style={{ textAlign: 'center', fontSize: px(30), marginTop: px(50) }}>The base is not detected.<br />Please insert the base</p>\r\n        </div>\r\n      } else {\r\n        if (devicesList.length === 0) {\r\n          return <div className=\"flex\" style={{ width: '100%', height: '100%', position: 'relative' }}>\r\n            {/* < MyModal\r\n              visible={true}\r\n              element={\r\n                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column' }}>\r\n                  <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                    <LoadingOutlined style={{ fontSize: 30, color: '#fff', marginTop: mTop(-30), }} />\r\n                  </div>\r\n                  <p>\r\n                    {'searching...'}\r\n                  </p>\r\n                </div>\r\n              }\r\n            /> */}\r\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: px(130) }}>\r\n              <div className=\"loadIcon\" style={{ marginBottom: MTop(5) }}>\r\n                <LoadingOutlined style={{ fontSize: 30, color: '#8a8a8a', marginTop: mTop(-30), }} />\r\n              </div>\r\n              <p>\r\n                {'searching...'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        } else {\r\n          let options = devicesList.map((item, index) => {\r\n            let { saveDeviceMac } = this.state\r\n            let flog = saveDeviceMac.some((device, index) => {\r\n              return device === item.macId\r\n            })\r\n            let fontColor = flog ? '#D1C4C4' : '#4a4a4a'\r\n            return <li\r\n              className='flex'\r\n              style={{ marginBottom: px(20) }}\r\n              key={`${index}`}\r\n              onClick={() => {\r\n                if (!flog) {\r\n                  this.setState({\r\n                    selectDevice: item\r\n                  })\r\n                } else {\r\n                  message.destroy();\r\n                  message.error('This device has already been added')\r\n                }\r\n\r\n              }}\r\n            >\r\n\r\n              <div className=\"deviceName\" style={{ fontSize: px(24), color: fontColor }}>{item.name}</div>\r\n              <div className=\"deviceMacId\" style={{ fontSize: px(18), color: fontColor }}>{item.macId}</div>\r\n\r\n            </li>\r\n          })\r\n          return <div className='deviceList'>\r\n            <ul>\r\n              {options}\r\n            </ul>\r\n          </div>\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"addDevice\">\r\n        <div className=\"heaed\">\r\n          <div className=\"l\"\r\n          >\r\n            <MouseDiv\r\n              className='mouseDiv'\r\n              beforeDiv={this.beforeDiv}\r\n              afterDiv={this.afterDiv}\r\n              divClick={() => {\r\n                let { selectDevice } = this.state\r\n                if (selectDevice) {\r\n                  this.setState({\r\n                    selectDevice: null\r\n                  })\r\n                } else {\r\n                  this.props.history.goBack()\r\n                }\r\n\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"r\">\r\n\r\n            < MinClose\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"body flex\">\r\n          {this.body()}\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\electronStore.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\hardWareTypeUI.jsx",["1177","1178","1179"],"import React, { Component, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { px } from \"../../utils/px\";\nimport mellaPro from \"./../../assets/img/hardList-mella.png\";\nimport biggie from \"./../../assets/img/hardList-biggie.png\";\nimport rfid from \"./../../assets/img/hardList-rfid.png\";\nimport tape from \"./../../assets/img/hardList-tape.png\";\nimport add from \"./../../assets/img/hardList-add.png\";\nimport maeBowl from \"./../../assets/img/hardList-maeBowl.png\";\nimport otterEQ from \"./../../assets/img/hardList-otterEQ.png\";\nimport {\n  selectHardwareInfoFun,\n  setSelectHardwareType,\n  setMenuNum,\n} from \"./../../store/actions\";\nimport electronStore from \"../../utils/electronStore\";\n\nlet storage = window.localStorage;\n//devicesTypeList是index传过来的硬件种类以及种类下的所有硬件\nconst HardWareTypeUI = ({\n  bodyHeight,\n  devicesTypeList,\n  selectHardwareInfoFun,\n  setSelectHardwareType,\n  selectHardwareType,\n  setMenuNum,\n  menuNum,\n}) => {\n  //根据左侧列表的设备类型，获取当前选中的设备类型下选中的硬件,先看本地有没有存,没存就拿第一个展示\n\n  let options = devicesTypeList.map((item, index) => {\n    let img = null;\n    switch (item.type) {\n      case \"mellaPro\":\n        img = mellaPro;\n        break;\n\n      case \"biggie\":\n        img = biggie;\n        break;\n\n      case \"rfid\":\n        img = rfid;\n        break;\n\n      case \"tape\":\n        img = tape;\n        break;\n      case \"maeBowl\":\n        img = maeBowl;\n        break;\n      case \"add\":\n        img = add;\n        break;\n\n      case \"otterEQ\":\n        img = otterEQ;\n        break;\n      default:\n        break;\n    }\n    let borderStyle = ``;\n    if (item.type === selectHardwareType) {\n      borderStyle = ` 2px solid #3B3A3A`;\n    }\n\n    return (\n      <li\n        key={`${index}`}\n        style={{ padding: `${px(10)}px 0` }}\n        onClick={() => {\n          console.log(item.type);\n          if (menuNum !== \"6\"&&!electronStore.get(`${storage.userId}-isClical`)) {\n            setMenuNum(\"1\");\n            setSelectHardwareType(item.type);\n            if (item.type === \"add\") {\n            } else {\n              let devicesInfo = electronStore.get(\n                `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`\n              );\n\n              //要做个处理,看保存的数据是否和当前的一致，如果不一致，就把当前的保存下来\n\n              if (!devicesInfo && item.devices[0]) {\n                devicesInfo = item.devices[0];\n                electronStore.set(\n                  `${storage.lastOrganization}-${storage.userId}-${item.type}-selectDeviceInfo`,\n                  devicesInfo\n                );\n              }\n\n              selectHardwareInfoFun(devicesInfo);\n            }\n          } else {\n            setSelectHardwareType(\"mellaPro\");\n          }\n        }}\n      >\n        <div\n          style={{ border: borderStyle, padding: px(2), borderRadius: px(10) }}\n        >\n          <img src={img} alt=\"\" width={px(55)} />\n        </div>\n      </li>\n    );\n  });\n\n  useEffect(() => {\n    let Index = null;\n    for (let i = 0; i < devicesTypeList.length; i++) {\n      const element = devicesTypeList[i];\n      if (element.type === selectHardwareType) {\n        Index = i;\n        break;\n      }\n    }\n    if (Index === null) {\n      return;\n    }\n\n    let hard = devicesTypeList[Index];\n    if (hard && hard.type !== \"add\") {\n      let devicesInfo = electronStore.get(\n        `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`\n      );\n\n      if (!devicesInfo) {\n        devicesInfo = hard.devices[0];\n        electronStore.set(\n          `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\n          devicesInfo\n        );\n      } else {\n        let sameFlag = false;\n        console.log(\"============\", hard.devices, devicesInfo);\n        for (let i = 0; i < hard.devices.length; i++) {\n          const element = hard.devices[i];\n          if (\n            element.mac === devicesInfo.mac &&\n            element.name === devicesInfo.name\n          ) {\n            sameFlag = true;\n            break;\n          }\n        }\n        if (!sameFlag) {\n          devicesInfo = hard.devices[0];\n          electronStore.set(\n            `${storage.lastOrganization}-${storage.userId}-${hard.type}-selectDeviceInfo`,\n            devicesInfo\n          );\n        }\n      }\n\n      console.log(\"保存的折本信息\", devicesInfo);\n\n      selectHardwareInfoFun(devicesInfo);\n    }\n  }, [devicesTypeList]);\n\n  return (\n    <div className=\"hardwareType\" style={{ width: px(80), height: bodyHeight }}>\n      <ul>{options}</ul>\n    </div>\n  );\n};\n\nHardWareTypeUI.propTypes = {\n  bodyHeight: PropTypes.number,\n  devicesTypeList: PropTypes.array,\n};\n//默认值\nHardWareTypeUI.defaultProps = {\n  bodyHeight: 0,\n  devicesTypeList: [],\n};\n\nexport default connect(\n  (state) => ({\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\n    menuNum: state.userReduce.menuNum,\n  }),\n  { selectHardwareInfoFun, setSelectHardwareType, setMenuNum }\n)(HardWareTypeUI);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\addScheduledPet\\index.jsx",["1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192"],"import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Input, Button, message, Spin, BackTop, } from 'antd';\r\nimport { createFromIconfontCN, SyncOutlined, LoadingOutlined } from '@ant-design/icons';\r\n\r\nimport { devicesTitleHeight } from '../../utils/InitDate'\r\nimport electronStore from '../../utils/electronStore';\r\nimport dog from './../../assets/images/pinkdog.png'\r\nimport cat from './../../assets/images/pinkcat.png'\r\nimport redDog from './../../assets/images/reddog.png'\r\nimport redCat from './../../assets/images/redcat.png'\r\nimport redother from './../../assets/images/redother.png'\r\nimport other from './../../assets/images/other.png'\r\nimport redJinggao from './../../assets/img/redjinggao.png'\r\n\r\nimport MyModal from '../../utils/myModal/MyModal';\r\nimport { mTop, px, MTop, pX } from '../../utils/px';\r\nimport './addScheduledPet.less'\r\nimport { setMenuNum } from '../../store/actions';\r\nimport { fetchRequest } from '../../utils/FetchUtil1';\r\nimport MYButton from './../../utils/button/Button'\r\n\r\nconst MyIcon = createFromIconfontCN({\r\n    scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\n\r\nlet defaultData = {\r\n    patientId: \"\",\r\n    wuzhong: 'dog',\r\n    petName: '',\r\n    miaoshu: ''\r\n}\r\n\r\nlet storage = window.localStorage;\r\nconst AddScheduledPet = ({ bodyHeight, setMenuNum }) => {\r\n    const [addPetist1, setAddPetist] = useState([]);\r\n    const [petName, setPetName] = useState('');\r\n    const [wuzhong, setWuzhong] = useState('dog');\r\n    const [patientId, setPatientId] = useState('');\r\n    const [miaoshu, setMiaoshu] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [isSave, setIsSave] = useState(false);\r\n\r\n    const selsectwuzhong = (val) => {\r\n        setWuzhong(val);\r\n\r\n    }\r\n    console.log('addPetist1', addPetist1);\r\n\r\n    const add = () => {\r\n        message.destroy()\r\n        if (!patientId) {\r\n            message.error(`Please enter the pet's patientId`)\r\n            return\r\n        }\r\n        setLoading(true)\r\n\r\n        let petSpeciesBreedId = 12001\r\n        switch (wuzhong) {\r\n            case 'dog': petSpeciesBreedId = 12001; break;\r\n            case 'cat': petSpeciesBreedId = 11001; break;\r\n            case 'other': petSpeciesBreedId = 13001; break;\r\n            default:\r\n                break;\r\n        }\r\n        let params = {\r\n            description: miaoshu,\r\n            doctorId: storage.userId,\r\n            patientId,\r\n            petName,\r\n            petSpeciesBreedId\r\n        }\r\n\r\n        if (storage.lastOrganization) {\r\n            params.organizationId = storage.lastOrganization\r\n        }\r\n        if (storage.lastWorkplaceId) {\r\n            params.workplaceId = storage.lastWorkplaceId\r\n        }\r\n        console.log('入参', params);\r\n        fetchRequest('/new/petall/subscribe', \"POST\", params)\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.flag) {\r\n                    let json = {\r\n                        patientId,\r\n                        wuzhong,\r\n                        petName,\r\n                        miaoshu\r\n                    }\r\n                    let list = [].concat(addPetist1)\r\n                    list.push(json)\r\n                    setAddPetist(list)\r\n                    setLoading(false)\r\n                    setPatientId('')\r\n                    setWuzhong('')\r\n                    setPetName('')\r\n                    setMiaoshu('')\r\n\r\n                } else {\r\n\r\n                    setLoading(false)\r\n                    message.error('add failed')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log('错误原因', err);\r\n                setLoading(false)\r\n                message.error('add failed')\r\n            })\r\n\r\n    }\r\n    const body = () => {\r\n        let addPetist = [].concat(addPetist1)\r\n        addPetist.push(defaultData)\r\n        console.log('新的:', addPetist);\r\n\r\n        let options = addPetist.map((item, index) => {\r\n\r\n\r\n            if (index === addPetist.length - 1) {\r\n                return <li key={`${index}`} style={{ width: '100%', }}>\r\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={patientId}\r\n                                onChange={value => {\r\n                                    setPatientId(value.target.value)\r\n\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={petName}\r\n                                onChange={value => {\r\n\r\n                                    setPetName(value.target.value)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('dog')\r\n                                }}>\r\n                                <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n                            </div>\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('cat')\r\n                                }}>\r\n                                <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={() => {\r\n                                    selsectwuzhong('other')\r\n                                }}>\r\n                                <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n                            <input type=\"text\" className='tableInput'\r\n                                value={miaoshu}\r\n                                onChange={value => {\r\n\r\n                                    setMiaoshu(value.target.value)\r\n                                }}\r\n\r\n                            />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n                            <div\r\n                                className='flex'\r\n                                style={{ width: px(30), height: px(30), borderRadius: px(30), backgroundColor: '#e1206d', cursor: 'pointer' }}\r\n                                onClick={add}\r\n\r\n                            >\r\n\r\n                                <MyIcon type={'icon-baocun-copy'} className=\"icon \" style={{ color: '#fff', fontSize: px(16) }} />\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </li>\r\n            } else {\r\n                let { patientId, wuzhong, petName, miaoshu } = item\r\n                return <li key={`${index}`} style={{ width: '100%', }}>\r\n                    <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <div className='tableText'>\r\n                                {patientId}\r\n                            </div>\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px' }}>\r\n                            <div className='tableText'> {petName}</div>\r\n                        </div>\r\n                        <div className='tableHeard flex' style={{ flexDirection: 'row', paddingTop: px(5), paddingBottom: px(5), justifyContent: 'space-around', borderTopWidth: '0px' }} >\r\n                            <img src={wuzhong === 'dog' ? redDog : dog} alt=\"\" width={px(40)} />\r\n                            <img src={wuzhong === 'cat' ? redCat : cat} alt=\"\" width={px(40)} />\r\n                            <img src={wuzhong === 'other' ? redother : other} alt=\"\" width={px(40)} />\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderTopWidth: '0px', width: '30%' }}>\r\n                            <div className='tableText'>{miaoshu}</div>\r\n                        </div>\r\n                        <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', borderTopWidth: '0px', width: '10%' }}>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </li>\r\n            }\r\n\r\n\r\n        })\r\n\r\n        return (\r\n            <div style={{ width: '100%', marginTop: px(30), height: px(500), overflowY: 'auto', paddingLeft: '5%', paddingRight: '5%', }}>\r\n                <div style={{ width: '100%', display: 'flex', flexDirection: 'row', }}>\r\n                    <div className='tableHeard'>Patient Id</div>\r\n                    <div className='tableHeard'>Pet Name</div>\r\n                    <div className='tableHeard'>species</div>\r\n                    <div className='tableHeard' style={{ width: '30%' }}>description</div>\r\n                    <div className='tableHeard' style={{ borderRight: '#5a5a5a solid 1px', width: '10%' }}></div>\r\n\r\n                </div>\r\n                <ul >\r\n                    {options}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className='addScjediled' style={{ height: bodyHeight }}>\r\n            <div className=\"addDeviceTitle\" style={{ height: px(100), fontSize: 26, paddingLeft: px(20) }}>Create New Scheduled </div>\r\n            <div className='addSBody' style={{ width: '100%', height: bodyHeight - px(100), }}>\r\n                {body()}\r\n\r\n\r\n                <div className='continueBox'>\r\n                    <div className='continueBtn'\r\n                        style={{ borderRadius: px(50), height: px(45), fontSize: px(20), }}\r\n                        onClick={() => {\r\n\r\n                            if (!patientId) {\r\n                                setMenuNum('3')\r\n                            } else {\r\n                                setIsSave(true)\r\n                            }\r\n                        }}\r\n                    >Continue</div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <MyModal\r\n                visible={loading}\r\n            />\r\n            <MyModal\r\n                visible={isSave}\r\n                element={\r\n                    <div className='isSave'\r\n                    //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\r\n                    >\r\n                        <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n                        <p style={{ textAlign: 'center' }}>There are unsaved patient appointments, <br />are you sure you want to exit?</p>\r\n                        <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                            <MYButton\r\n                                text={'Cancel'}\r\n                                onClick={() => {\r\n                                    setIsSave(false)\r\n\r\n                                }}\r\n                                textBoxStyle={{\r\n                                    width: '40%',\r\n                                    height: px(40)\r\n                                }}\r\n                            />\r\n                            <MYButton\r\n                                text={'Exit'}\r\n                                onClick={() => {\r\n                                    setIsSave(false)\r\n                                    setMenuNum('3')\r\n                                }}\r\n                                textBoxStyle={{\r\n                                    width: '40%',\r\n                                    height: px(40)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\n\r\nAddScheduledPet.propTypes = {\r\n\r\n}\r\n//默认值\r\nAddScheduledPet.defaultProps = {\r\n\r\n}\r\nexport default connect(\r\n    state => ({\r\n\r\n    }),\r\n    { setMenuNum }\r\n)(AddScheduledPet)","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\mainbody\\HardListModal.jsx",["1193"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { px } from \"../../utils/px\";\r\nimport {\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setMenuNum,\r\n} from \"./../../store/actions\";\r\nimport electronStore from \"../../utils/electronStore\";\r\n\r\nimport deviceBiggie from \"./../../assets/img/deviceIcon-biggie.png\";\r\nimport nextImg from \"./../../assets/img/nextImg.png\";\r\nimport dui from \"./../../assets/img/dui.png\";\r\nimport deviceMella from \"./../../assets/img/deviceIcon-mella.png\";\r\nimport deviceRfid from \"./../../assets/img/deviceIcon-rfid.png\";\r\nimport deviceMaeBowl from \"./../../assets/img/deviceIcon-maeBowl.png\";\r\nimport deviceTape from \"./../../assets/img/deviceIcon-tape.png\";\r\nimport deivceAdd from \"./../../assets/img/hardList-add.png\";\r\nimport scales from \"./../../assets/img/scales.png\";\r\nimport \"./mainbody.less\";\r\nimport { compareObject } from \"../../utils/current\";\r\n\r\nlet storage = window.localStorage;\r\nconst HardAndPetsUI = ({\r\n  hardwareList,\r\n  selectHardwareType,\r\n  selectHardwareInfoFun,\r\n  selectHardwareModalShowFun,\r\n  setInfo,\r\n  setMenuNum,\r\n  hardwareMessage,\r\n}) => {\r\n  let { selectHardwareInfo } = hardwareMessage;\r\n  //定义数组hardwareList\r\n  const [hardwareListArr, setHardwareList] = useState([]);\r\n  //定义选择的硬件详细信息\r\n  const [selectHardwareDetail, setSelectHardwareDetail] = useState({});\r\n\r\n  let options = hardwareListArr.map((item, index) => {\r\n    let { name, mac, deviceType } = item;\r\n    let deviceTypeStr = \"\",\r\n      img = null;\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie Pro Scale\";\r\n        img = <img src={deviceBiggie} alt=\"\" width={px(75)} />;\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        img = <img src={deviceRfid} alt=\"\" width={px(40)} />;\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n        img = <img src={deviceTape} alt=\"\" width={px(50)} />;\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n        img = <img src={deviceMaeBowl} alt=\"\" width={px(40)} />;\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella Pro\";\r\n        img = <img src={deviceMella} alt=\"\" width={px(20)} />;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    //判断对象是否相等\r\n\r\n    let isEqual = compareObject(item, selectHardwareDetail);\r\n    // console.log(\"判断两个对象是否相同\", isEqual, item, selectHardwareDetail);\r\n    return (\r\n      <li\r\n        key={`${index}`}\r\n        onClick={() => {\r\n          setSelectHardwareDetail(item);\r\n          electronStore.set(\r\n            `${storage.lastOrganization}-${storage.userId}-${deviceType}-selectDeviceInfo`,\r\n            item\r\n          );\r\n          selectHardwareInfoFun(item);\r\n          setInfo && setInfo(item);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"hardListInfo\"\r\n          style={{ paddingTop: px(15), paddingBottom: px(15) }}\r\n        >\r\n          <div className=\"deviceL\">\r\n            <div\r\n              className=\"hardIcon\"\r\n              style={{ marginLeft: px(3), marginRight: px(3), width: px(75) }}\r\n            >\r\n              {img}\r\n            </div>\r\n            <div className=\"deviceInfo\">\r\n              <div className=\"deviceName\">{`Device Name: ${name}`}</div>\r\n              <div className=\"deviceName\">{deviceTypeStr}</div>\r\n              <div className=\"deviceName\">{`SN: ${mac}`}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"deviceR\" style={{ marginRight: px(20) }}>\r\n            <img src={nextImg} alt=\"\" width={px(13)} />\r\n            {isEqual && (\r\n              <div\r\n                className=\"seleIcon\"\r\n                style={{ width: px(18), height: px(18), top: px(-30) }}\r\n              >\r\n                <img src={dui} alt=\"\" width={px(12)} />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </li>\r\n    );\r\n  });\r\n  const otherItems = () => {\r\n    let deviceType = selectHardwareDetail.deviceType;\r\n    let isBiggie = deviceType === \"biggie\",\r\n      deviceTypeStr = \"\";\r\n    switch (deviceType) {\r\n      case \"biggie\":\r\n        deviceTypeStr = \"Biggie\";\r\n        break;\r\n      case \"rfid\":\r\n        deviceTypeStr = \"RFID\";\r\n        break;\r\n      case \"tape\":\r\n        deviceTypeStr = \"Tabby\";\r\n\r\n        break;\r\n      case \"maeBowl\":\r\n        deviceTypeStr = \"MaeBowl\";\r\n\r\n        break;\r\n      case \"otterEQ\":\r\n        deviceTypeStr = \"Otter EQ\";\r\n        break;\r\n      case \"mellaPro\":\r\n        deviceTypeStr = \"Mella\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    // console.log(\"selectHardwareDetail\", selectHardwareDetail);\r\n    return (\r\n      <div>\r\n        {isBiggie && (\r\n          <div\r\n            className=\"addNewDevice\"\r\n            style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n            onClick={() => setMenuNum(\"CombineScales\")}\r\n          >\r\n            <div\r\n              className=\"addNewDeviceText\"\r\n              style={{ paddingLeft: px(25) }}\r\n            >{`Combine Scales`}</div>\r\n            <div className=\"addNewDeviceImg\">\r\n              <img\r\n                src={scales}\r\n                alt=\"\"\r\n                width={px(30)}\r\n                style={{ marginRight: px(20) }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className=\"addNewDevice\"\r\n          style={{ paddingTop: px(10), paddingBottom: px(10) }}\r\n        >\r\n          <div\r\n            className=\"addNewDeviceText\"\r\n            style={{ paddingLeft: px(25) }}\r\n          >{`Add New ${deviceTypeStr}`}</div>\r\n          <div className=\"addNewDeviceImg\">\r\n            <img\r\n              src={deivceAdd}\r\n              alt=\"\"\r\n              width={px(30)}\r\n              style={{ marginRight: px(20) }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    //根据设备类型获取到此类型下的所有硬件,并用来展示\r\n    for (let i = 0; i < hardwareList.length; i++) {\r\n      const element = hardwareList[i];\r\n      if (element.type === selectHardwareType) {\r\n        let list = element.devices || [];\r\n        setHardwareList(list);\r\n        //获取被选中的硬件的详细信息\r\n        let selectHardwareInfoData = selectHardwareInfo || {};\r\n        if (selectHardwareInfoData === {}) {\r\n          let selectHardwareInfoData = list[0] || {};\r\n          setSelectHardwareDetail(selectHardwareInfoData);\r\n        } else {\r\n          let sameFlag = false;\r\n          for (let i = 0; i < list.length; i++) {\r\n            const element = list[i];\r\n            if (\r\n              element.name === selectHardwareInfoData.name &&\r\n              element.mac === selectHardwareInfoData.mac\r\n            ) {\r\n              setSelectHardwareDetail(selectHardwareInfoData);\r\n              sameFlag = true;\r\n              break;\r\n            }\r\n          }\r\n          console.log(\"sameFlag\", sameFlag);\r\n          if (!sameFlag) {\r\n            console.log(\"设置了默认值\");\r\n            let selectHardwareInfoData = list[0] || {};\r\n            setSelectHardwareDetail(selectHardwareInfoData);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }, [selectHardwareType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"hardList\"\r\n      style={{ top: px(90), zIndex: 999 }}\r\n      onClick={(e) => {\r\n        e.stopPropagation();\r\n        selectHardwareModalShowFun(false);\r\n      }}\r\n    >\r\n      <ul>{options}</ul>\r\n      {otherItems()}\r\n    </div>\r\n  );\r\n};\r\n\r\nHardAndPetsUI.propTypes = {\r\n  setInfo: PropTypes.func,\r\n};\r\n//默认值\r\nHardAndPetsUI.defaultProps = {\r\n  setInfo: () => {},\r\n};\r\nexport default connect(\r\n  (state) => ({\r\n    selectHardwareType: state.hardwareReduce.selectHardwareType,\r\n    hardwareList: state.hardwareReduce.hardwareList,\r\n    userMessage: state.userReduce,\r\n    hardwareMessage: state.hardwareReduce,\r\n  }),\r\n  { selectHardwareInfoFun, selectHardwareModalShowFun, setMenuNum }\r\n)(HardAndPetsUI);\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\FetchUtil.js",["1194","1195","1196","1197"],"\r\n// let COMMON_URL = 'http://192.168.0.24:18080/melladesk';//本地\r\n// let COMMON_URL = 'http://54.85.89.201:8081/melladesk';//AWS\r\n// let COMMON_URL = 'http://8.131.66.177:8081/melladesk';//阿里云\r\nlet COMMON_URL = 'http://ec2-3-214-224-72.compute-1.amazonaws.com:18080/melladesk';//企业AWS\r\nlet token = '';\r\n\r\n//'/v1/appUser/login', 'POST', params\r\nexport function fetchRequest1 (url, method, params = '') {\r\n\r\n    if (method === 'GET' || method === 'DELETE') {\r\n        let header = {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            // 定一个空数组\r\n            let paramsArray = [];\r\n            //  拆分对象\r\n            Object.keys(params).forEach(key =>\r\n                paramsArray.push(key + \"=\" + params[key])\r\n            );\r\n            // 判断是否地址拼接的有没有 ？,当没有的时候，使用 ？拼接第一个参数，如果有参数拼接，则用&符号拼接后边的参数   \r\n            if (url.search(/\\?/) === -1) {\r\n                url = url + \"?\" + paramsArray.join(\"&\");\r\n            } else {\r\n                url = url + \"&\" + paramsArray.join(\"&\");\r\n            }\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: {\r\n                        \"Content-Type\": 'text/plain'\r\n                    }\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    } else {\r\n        let header = {\r\n            \"Content-type\": \"application/json\"\r\n        };\r\n        if (params == '') {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    headers: header\r\n                }).then((Response) => Response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData)\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        } else {\r\n            return new Promise(function (resolve, reject) {\r\n                fetch(COMMON_URL + url, {\r\n                    method: method,\r\n                    // mode: 'cors',\r\n                    headers: header,\r\n                    body: JSON.stringify(params),\r\n                }).then((response) => response.json())\r\n                    .then((responseData) => {\r\n                        resolve(responseData);\r\n                    })\r\n                    .catch((err) => {\r\n                        reject(err);\r\n                    });\r\n            });\r\n        }\r\n    }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\index.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\minClose\\MinClose.js",["1198","1199","1200"],"\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './minClose.less'\r\nimport { px, mTop } from './../px'\r\nimport rMin_red from './../../assets/img/min-red.png'\r\nimport rClose_red from './../../assets/img/close-red.png'\r\n\r\nimport rMin_white from './../../assets/img/min-white.png'\r\nimport rClose_white from './../../assets/img/close-white.png'\r\n\r\nlet ipcRenderer = window.electron.ipcRenderer\r\n\r\n/**\r\n * \r\n * @param {string} minHeight 最小化、最大化方块的宽高 \r\n * @param {number} imgWidth 最小化、最大化图片的高度 \r\n * @returns  封装了最小化和关闭按钮，有鼠标移入、移出的动画\r\n */\r\nconst MinClose = ({ minHeight, imgWidth }) => {\r\n  const [minbgc, setMinbgc] = useState('')\r\n  const [rMin, setRMin] = useState(rMin_red)\r\n  const [closebgc, setClosebgc] = useState('')\r\n  const [rClose, setRClose] = useState(rClose_red)\r\n\r\n  const minMouseEnter = () => {\r\n    setMinbgc('rgba(70, 70, 70, 0.5)')\r\n    setRMin(rMin_white)\r\n  }\r\n  const minMouseLeave = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n  }\r\n  const minClock = () => {\r\n    setMinbgc('')\r\n    setRMin(rMin_red)\r\n    ipcRenderer.send('window-min')\r\n\r\n  }\r\n\r\n\r\n  const closeMouseEnter = () => {\r\n    setClosebgc('rgba(232,17,35)')\r\n    setRClose(rClose_white)\r\n  }\r\n  const closeMouseLeave = () => {\r\n    setClosebgc('')\r\n    setRClose(rClose_red)\r\n  }\r\n  const closeClock = () => {\r\n    ipcRenderer.send('window-close')\r\n  }\r\n\r\n\r\n  return (\r\n    <div\r\n      id='minClose'\r\n    >\r\n      <div\r\n        className='min_icon'\r\n        onClick={minClock}\r\n        style={{ backgroundColor: minbgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={minMouseEnter}\r\n        onMouseLeave={minMouseLeave}\r\n      >\r\n        <img src={rMin} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n      <div\r\n        className='min_icon'\r\n        onClick={closeClock}\r\n        style={{ backgroundColor: closebgc, height: minHeight, width: minHeight }}\r\n        onMouseEnter={closeMouseEnter}\r\n        onMouseLeave={closeMouseLeave}\r\n      >\r\n        <img src={rClose} alt=\"\" style={{ width: imgWidth }} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nMinClose.propTypes = {\r\n  minHeight: PropTypes.string,\r\n  imgWidth: PropTypes.number,\r\n}\r\nMinClose.defaultProps = {\r\n  minHeight: '40px',\r\n  imgWidth: `${px(20)}px`\r\n\r\n}\r\n\r\nexport default MinClose","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\doctorSelectExam\\DoctorSelectAllExam.jsx",["1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228"],"////这是普通用户的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message,\r\n  Menu,\r\n  Modal,\r\n  Select,\r\n  ConfigProvider\r\n\r\n} from 'antd';\r\nimport Draggable from \"react-draggable\";\r\nimport Button1 from '../../utils/button/Button'\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport Heard from '../../utils/heard/Heard'\r\nimport { SyncOutlined, createFromIconfontCN } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './doctorSelectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { FetchEszVet } from '../../utils/FetchEszVet'\r\nimport { fetchRequest } from '../../utils/FetchUtil1'\r\nimport gender from '../../utils/gender'\r\nimport temporaryStorage from '../../utils/temporaryStorage';\r\nimport { MTop, mTop, pX, px, win } from '../../utils/px';\r\nimport { stopBubble } from '../../utils/current'\r\nimport { fetchRequest4 } from '../../utils/FetchUtil4';\r\nimport { fetchRhapsody } from '../../utils/FetchUtil5';\r\nimport jinggao from './../../assets/img/jinggao.png'\r\nimport redclose from './../../assets/img/redclose.png'\r\nimport blackTriangle from './../../assets/img/blackTriangle.png'\r\nimport refresh from './../../assets/img/Refresh.png'\r\nimport SelectionBox from '../../utils/selectionBox/SelectionBox'\r\n\r\nimport electronStore from '../../utils/electronStore';\r\n\r\nconst { SubMenu } = Menu;\r\nconst MyIcon = createFromIconfontCN({\r\n  scriptUrl: '//at.alicdn.com/t/font_2326495_7b2bscbhvvt.js'\r\n})\r\nlet storage = window.localStorage;\r\n\r\n\r\n\r\nexport default class DoctorSelectAllExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchData: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n    unixToURI: '',\r\n    ezyVetToken: '',\r\n    current: 1,\r\n    closebgc: '',\r\n    minbgc: '',\r\n    closeColor: '',\r\n    heardSearchText: '',\r\n\r\n    isNotFound: true,\r\n    modalVis: false,\r\n\r\n    disabled: true,       //model是否可拖拽\r\n    bounds: { left: 0, top: 0, bottom: 0, right: 0 },\r\n\r\n    sortBy: 'Time',\r\n    showsortBy: false\r\n  }\r\n  componentWillMount () {\r\n    // console.log('------------', this.props.location.listDate);\r\n    try {\r\n      if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n        // console.log('------------', this.props.location);\r\n        let data = JSON.parse(this.props.location.listDate)\r\n        this.setState({\r\n          data,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    // ipcRenderer.send('big')\r\n    message.destroy()\r\n\r\n\r\n\r\n    storage.identity = '3'\r\n\r\n    if ((this.props.location.listDate && this.props.location.listDate !== 'undefined')) {\r\n      let data = JSON.parse(this.props.location.listDate)\r\n      this.setState({\r\n        data,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        loading: true,\r\n      })\r\n    }\r\n    this._getExam()\r\n    temporaryStorage.logupVetInfo = {}\r\n    temporaryStorage.logupSelectOrganization = {}\r\n    temporaryStorage.logupSuccessData = {}\r\n    temporaryStorage.logupOrganization = {}\r\n    temporaryStorage.logupEmailCode = ''\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = \"5px 5px\"\r\n      style.textAlign = 'center'\r\n\r\n\r\n    }\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    console.log(windowsHeight, height, width);\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  rhapsody = async (patientsArr) => {\r\n\r\n    // console.log(patientsArr);\r\n    let dataArr = []\r\n    try {\r\n      for (let i = 0; i < patientsArr.length; i++) {\r\n        let params = { query: `query { patient (id:\"${patientsArr[i].patientId}\") {  vitals { data{ id, weight{value}, createdAt, updatedAt}}}}` }\r\n        let item = await fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n        if (item.data) {\r\n\r\n          let { vitals } = item.data.patient\r\n          let vitalData = vitals.data\r\n          console.log('-----------', vitalData);\r\n          let weight = ''\r\n          if (vitalData.length > 0) {\r\n            vitalData.sort((a, b) => {\r\n              return moment(parseInt(a.createdAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.createdAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n            })\r\n            if (vitalData[0].weight && vitalData[0].weight.value) {\r\n              patientsArr[i].weight = (vitalData[0].weight.value * 0.45).toFixed(1)\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n      console.log(patientsArr);\r\n      patientsArr.sort((a, b) => {\r\n        return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n      })\r\n      this.setState({\r\n        data: patientsArr,\r\n        loading: false\r\n      })\r\n\r\n      electronStore.set('doctorExam', patientsArr)\r\n    } catch (error) {\r\n      this.setState({\r\n        loading: false,\r\n      })\r\n      message.destroy()\r\n      message.error('Medical record acquisition failed')\r\n    }\r\n\r\n\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n\r\n\r\n\r\n\r\n\r\n    //现在Rhapsody组织数据还没有集成到后台，因此这里就先做临时处理\r\n    if (storage.lastOrganization === '34') {\r\n\r\n      console.log(storage.connectionKey);\r\n      //1.获取用户id\r\n\r\n      let params = { query: `query { business { id, name, state } }` }\r\n      fetchRhapsody('', 'POST', params, storage.connectionKey)\r\n\r\n        .then(res => {\r\n          console.log('---', res);\r\n          if (res.errors) {\r\n            this.setState({\r\n              loading: false,\r\n              spin: false\r\n            })\r\n            message.destroy()\r\n            message.error('Data acquisition failed')\r\n\r\n          } else {\r\n            console.log('获取到了businessId');\r\n            let businessId = res.data.business.id\r\n            // let param = {\r\n            //   query: `query  { patients (businessId:\"${businessId}\") { data{ id, clientId, name,gender, dateOfBirth\r\n            //   species{id,name},\r\n            //   breeds{id,name},\r\n            //   createdAt,owners{owner{firstName,lastName} }}}` }\r\n            let param = {\r\n              query: `query { \r\n                patients (businessId:\"${businessId}\") {\r\n                    data{ \r\n                         id, \r\n                         clientId, \r\n                         businessId, \r\n                         name  \r\n                         gender,\r\n                         dateOfBirth,\r\n                         species{id,name},\r\n                         breeds{id,name},\r\n                         createdAt ,\r\n                         owners{owner{firstName,lastName}}\r\n                    }\r\n                }\r\n            }`\r\n            }\r\n\r\n            console.log('获取病历单的入参', param, JSON.stringify(param));\r\n            fetchRhapsody('', 'POST', param, storage.connectionKey)\r\n              .then(res => {\r\n                console.log(res);\r\n                if (res.errors) {\r\n                  this.setState({\r\n                    loading: false,\r\n                    spin: false\r\n                  })\r\n                  message.destroy()\r\n                  message.error('Failed to get pet list')\r\n\r\n                } else {\r\n                  let patientsArr = res.data.patients.data\r\n                  let dataArr = []\r\n                  for (let i = 0; i < patientsArr.length; i++) {\r\n                    const patient = patientsArr[i];\r\n                    let { id, name, gender, dateOfBirth, breeds, owners, createdAt } = patient\r\n\r\n                    createdAt = moment(createdAt).format('X')\r\n                    let owner = 'unknown'\r\n                    if (owners.length > 0) {\r\n                      let ownerItem = owners[0]\r\n                      if (ownerItem && ownerItem.owner) {\r\n                        let { firstName, lastName } = ownerItem.owner\r\n                        if (firstName || lastName) {\r\n                          owner = `${lastName} ${firstName}`\r\n                        }\r\n                      }\r\n\r\n                    }\r\n\r\n                    let breed = 'unknown'\r\n                    if (breeds.length > 0 && breeds[0].name) {\r\n                      breed = breeds[0].name\r\n                    }\r\n\r\n                    let petAge = 'unknown'\r\n                    if (dateOfBirth) {\r\n                      petAge = moment(new Date()).diff(moment(dateOfBirth), 'years')\r\n                      // console.log('petAge', petAge);\r\n                    }\r\n\r\n                    let json = {\r\n                      insertedAt: createdAt,\r\n                      patientId: id,\r\n                      petName: name,\r\n                      owner,\r\n                      breed,\r\n                      gender: gender || 'unknown',\r\n                      age: petAge,\r\n                      petId: '',\r\n                      id: `${i}`,\r\n                      weight: null,\r\n                      rfid: null,\r\n                      url: null,\r\n                      speciesId: null,\r\n                    }\r\n                    dataArr.push(json)\r\n\r\n\r\n                  }\r\n\r\n                  console.log(dataArr);\r\n\r\n\r\n\r\n                  this.rhapsody(dataArr)\r\n                }\r\n\r\n              })\r\n              .catch(err => {\r\n                console.log(err);\r\n                this.setState({\r\n                  loading: false,\r\n                  spin: false\r\n                })\r\n                message.destroy()\r\n                message.error('Failed to get pet list')\r\n              })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n          message.destroy()\r\n          message.error('Data acquisition failed')\r\n        })\r\n\r\n\r\n\r\n\r\n      return\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      offset: 0,\r\n      size: 100,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    console.log('查询宠物的入参', params);\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n\r\n    fetchRequest('/user/listAllPetInfo', 'GET', params)\r\n      // fetchRequest('/new/pet/subscribe/page', 'POST', params)\r\n\r\n      .then(res => {\r\n        console.log('查询到的宠物列表,/user/listAllPetInfo', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let data = []\r\n          let oldList = res.data\r\n          // let oldList = res.data.list\r\n          for (let i = 0; i < oldList.length; i++) {\r\n            let { age, url, createTime, patientId, speciesId, petName, firstName, birthday, lastName, breedName, gender, petId, weight, rfid, l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference, pethubId, macId,\r\n              h2tLength, torsoLength } = oldList[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight,\r\n              rfid,\r\n              url,\r\n              speciesId,\r\n              l2rarmDistance, neckCircumference, upperTorsoCircumference, lowerTorsoCircumference,\r\n              h2tLength, torsoLength,\r\n              pethubId, macId,\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          console.log('列表的数据：', data);\r\n          storage.doctorList = JSON.stringify(data)\r\n          this.setState({\r\n            data,\r\n            loading: false,\r\n            spin: false\r\n          })\r\n\r\n          electronStore.set('doctorExam', data)\r\n\r\n\r\n        } else {\r\n          this.setState({\r\n            loading: false,\r\n            spin: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false,\r\n          spin: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    // this._getData()\r\n    this._getExam()\r\n  }\r\n\r\n  /**------------------顶部start------------------------ */\r\n  _close = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('关闭程序');\r\n    ipcRenderer.send('window-close')\r\n  }\r\n  _min = () => {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    console.log('最小化程序');\r\n    ipcRenderer.send('window-min')\r\n    this.setState({\r\n      minbgc: '',\r\n    })\r\n  }\r\n  _minMove = () => {\r\n\r\n    this.setState({\r\n      minbgc: 'rgb(211, 205, 205)'\r\n    })\r\n  }\r\n  _minLeave = () => {\r\n    this.setState({\r\n      minbgc: ''\r\n    })\r\n  }\r\n  _closeMove = () => {\r\n    this.setState({\r\n      closeColor: 'red',\r\n      closebgc: '#fff'\r\n    })\r\n  }\r\n  _closeLeave = () => {\r\n    this.setState({\r\n      closeColor: '#fff',\r\n      closebgc: ''\r\n    })\r\n  }\r\n\r\n  handleClick = e => {\r\n    console.log('click ', e);\r\n\r\n    switch (e.key) {\r\n      case '1': this.props.history.push('/page11'); break;\r\n      case '2': this.props.history.push('/'); break;\r\n      case '3':\r\n        try {\r\n\r\n          let selectNum = document.getElementsByClassName('ant-pagination-item-active')\r\n          // storage.defaultCurrent = selectNum[0].title\r\n          storage.doctorList = JSON.stringify(this.state.data)\r\n        } catch (error) {\r\n          console.log('错误信息', error);\r\n        }\r\n\r\n\r\n        this.props.history.push('/page8'); break;\r\n      case '4': this.props.history.push('/page12'); break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n  };\r\n\r\n  _search1 = (search) => {       //这个是搜索调用后台的函数，现在废弃20210929\r\n    let params = {\r\n      doctorId: storage.userId,\r\n      petName: search,\r\n    }\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    const isUnKnow = (val) => {\r\n      if (val) {\r\n        return val\r\n      } else {\r\n        return 'unknown'\r\n      }\r\n    }\r\n    console.log('搜索的数据', params);\r\n    fetchRequest('/pet/listPetsLike', \"POST\", params)\r\n      .then(res => {\r\n        console.log(res);\r\n\r\n        if (res.flag === true) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { age, createTime, patientId, petName, firstName, birthday, lastName, breedName, gender, petId, weight } = res.data[i]\r\n            let owner = ''\r\n            patientId = isUnKnow(patientId)\r\n            petName = isUnKnow(petName)\r\n            breedName = isUnKnow(breedName)\r\n            age = isUnKnow(age)\r\n            weight = isUnKnow(weight)\r\n            if (!firstName) {\r\n              firstName = ''\r\n            }\r\n            if (!lastName) {\r\n              lastName = ''\r\n            }\r\n            if (lastName === '' && firstName === '') {\r\n              owner = 'unknown'\r\n            } else {\r\n              owner = `${lastName} ${firstName}`\r\n            }\r\n            createTime = moment(createTime).format('X')\r\n            let petGender = ''\r\n            switch (`${gender}`) {\r\n              case '1': petGender = 'F'\r\n\r\n                break;\r\n              case '0': petGender = \"M\"\r\n                break;\r\n              default: petGender = 'unknown'\r\n                break;\r\n            }\r\n            let petAge = 'unknown'\r\n            if (birthday) {\r\n              petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n              // console.log('petAge', petAge);\r\n            }\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              patientId,\r\n              petName,\r\n              owner,\r\n              breed: breedName,\r\n              gender: petGender,\r\n              age: petAge,\r\n              petId,\r\n              id: i,\r\n              weight\r\n\r\n            }\r\n            data.push(json)\r\n\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            searchData: data,\r\n            loading: false\r\n          })\r\n        } else {\r\n          this.setState({\r\n            searchData: [],\r\n            loading: false\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n  }\r\n\r\n  _search = (keyWord) => {       //这个是搜索功能 ，怎么展示列表的内容进行搜索\r\n\r\n    /**\r\n     * 使用indexof方法实现模糊查询\r\n     *     语法：stringObject.indexOf(searchvalue, fromindex)\r\n     *   参数：searchvalue 必需。规定需检索的字符串值。 fromindex 可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。\r\n     *    说明：该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。如果没有找到，将返回 -1。\r\n     *  \r\n     * list         原数组\r\n     * keyWord      查询关键词\r\n     * searchData   查询的结果\r\n     * \r\n     * toLowerCase（）方法：将字符串统一转成小写\r\n     * toUpperCase（）方法：将字符串统一转成大写\r\n     * \r\n     */\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    let list = this.state.data\r\n    let searchData = []\r\n    for (let i = 0; i < list.length; i++) {\r\n      let petName = list[i].petName.toLowerCase() || ''\r\n      let patientId = list[i].patientId.toLowerCase() || ''\r\n      let rfid = list[i].rfid || ''\r\n      if (`${petName}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${patientId}`.indexOf(keyWord.toLowerCase()) !== -1\r\n        || `${rfid}`.indexOf(keyWord) !== -1\r\n      ) {\r\n        searchData.push(list[i])\r\n      }\r\n    }\r\n    console.log(searchData);\r\n    this.setState({\r\n      searchData,\r\n      loading: false\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  RFIDSearch = () => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    fetchRequest4(`/pet/getPetInfoByRFID/${this.state.heardSearchText}/${storage.lastOrganization}`, 'GET')\r\n      .then(res => {\r\n        console.log('----RFID搜索结果', res);\r\n\r\n        if (res.flag === true && res.data) {\r\n          let { createTime, patientId, petName, firstName, lastName, breedName, gender, birthday, petId, rfid, weight } = res.data\r\n          patientId = patientId || 'unknown'\r\n          petName = petName || 'unknown'\r\n          breedName = breedName || 'unknown'\r\n          weight = weight || 'unknown'\r\n          let owner = ''\r\n          if (!firstName) {\r\n            firstName = ''\r\n          }\r\n          if (!lastName) {\r\n            lastName = ''\r\n          }\r\n          if (lastName === '' && firstName === '') {\r\n            owner = 'unknown'\r\n          } else {\r\n            owner = `${lastName} ${firstName}`\r\n          }\r\n          createTime = moment(createTime).format('X')\r\n          let petGender = ''\r\n          switch (`${gender}`) {\r\n            case '1': petGender = 'F'\r\n\r\n              break;\r\n            case '0': petGender = \"M\"\r\n              break;\r\n            default: petGender = 'unknown'\r\n              break;\r\n          }\r\n          let petAge = 'unknown'\r\n          if (birthday) {\r\n            petAge = moment(new Date()).diff(moment(birthday), 'years')\r\n            // console.log('petAge', petAge);\r\n          }\r\n          let json = {\r\n            insertedAt: createTime,\r\n            patientId,\r\n            petName,\r\n            owner,\r\n            breed: breedName,\r\n            gender: petGender,\r\n            age: petAge,\r\n            petId,\r\n            id: 0,\r\n            weight,\r\n            rfid\r\n          }\r\n          let searchData = []\r\n          searchData.push(json)\r\n          this.setState({\r\n            searchData,\r\n            loading: false\r\n          })\r\n\r\n\r\n\r\n\r\n        } else if (res.flag === true && res.msg === '该组织下无此宠物信息') {\r\n          console.log('找到了但是不是在这个组织下');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: false,\r\n            heardSearchText: ''\r\n          })\r\n        } else {\r\n          console.log('没有找到');\r\n          this.setState({\r\n            loading: false,\r\n            modalVis: true,\r\n            isNotFound: true,\r\n            heardSearchText: ''\r\n          })\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n        console.log('抛出异常:', err);\r\n        this.setState({\r\n          loading: false,\r\n        })\r\n      })\r\n  }\r\n  draggleRef = React.createRef();\r\n  onStart = (event, uiData) => {\r\n    const { clientWidth, clientHeight } = window?.document?.documentElement;\r\n    const targetRect = this.draggleRef?.current?.getBoundingClientRect();\r\n    this.setState({\r\n      bounds: {\r\n        left: -targetRect?.left + uiData?.x,\r\n        right: clientWidth - (targetRect?.right - uiData?.x),\r\n        top: -targetRect?.top + uiData?.y,\r\n        bottom: clientHeight - (targetRect?.bottom - uiData?.y)\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        width: '16%',\r\n        // ...this.getColumnSearchProps('insertedAt'),\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n          // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n          let year = moment(parseInt(text) * 1000).format('YYYY-MM-DD');\r\n          let time = moment(parseInt(text) * 1000).format('hh:mm a');\r\n          let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n          // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n          return (\r\n            <div className='flex' style={{ paddingTop: pX(3), paddingBottom: pX(3), paddingLeft: px(10), justifyContent: 'flex-start', alignItems: 'flex-start' }}>\r\n              <p>{`${year}`}</p>\r\n              <p>{`${time}`}</p>\r\n            </div>\r\n          )\r\n        },\r\n\r\n      },\r\n      {\r\n        title: 'Pet ID',\r\n        dataIndex: 'patientId',\r\n        key: 'patientId',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('patientId'),\r\n      },\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        width: '15%',\r\n        // ...this.getColumnSearchProps('breed'),\r\n        render: (text, record, index) => {\r\n          if (!text || text === 'defaultdog' || text === 'defaultother' || text === 'defaultcat') {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        width: '12%',\r\n        // width: '30%',\r\n        // ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        width: '12%',\r\n        // width: '20%',\r\n        render: (text, record, index) => {\r\n          // console.log(text);\r\n\r\n          if (`${text}` === 'NaN') {\r\n            return (\r\n              <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n\r\n\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin, closeColor, closebgc, minbgc, disabled, bounds, modalVis, sortBy, showsortBy } = this.state\r\n\r\n    let items = document.querySelectorAll('#doctorSelectExam .ant-table-thead .ant-table-cell')\r\n    for (let i = 0; i < items.length; i++) {\r\n      let style = items[i].style\r\n      style.padding = `5px 5px`\r\n      style.textAlign = 'center'\r\n    }\r\n    const noData = () => {\r\n      return (\r\n        <div className='flex nodata' style={{ paddingTop: px(60), paddingBottom: px(60) }}>\r\n          <p style={{ fontSize: px(22) }}>No pet found, </p>  &nbsp;&nbsp;\r\n          <a style={{ fontSize: px(22) }} href=\"#\"\r\n            onClick={(e) => {\r\n              console.log('我要去添加宠物');\r\n              try {\r\n\r\n                storage.doctorList = JSON.stringify(this.state.data)\r\n              } catch (error) {\r\n                console.log('错误信息', error);\r\n              }\r\n              // /pet/doctorAddPet\r\n              this.props.history.push({ pathname: '/pet/doctorAddPet' })\r\n\r\n              e.preventDefault();\r\n\r\n            }}\r\n\r\n          >{`go to add`}</a>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n      <div id=\"doctorSelectExam\" onClick={(e) => {\r\n        console.log('隐藏');\r\n        this.setState({\r\n          showsortBy: false\r\n        })\r\n      }}>\r\n        {/* 关闭缩小 */}\r\n        <Heard\r\n          onReturn={() => {\r\n            this.props.history.push('/page11')\r\n          }}\r\n          onSearch={(data) => {\r\n\r\n            storage.doctorExam = JSON.stringify(data)\r\n\r\n            storage.doctorList = JSON.stringify(this.state.data)\r\n            if (storage.isClinical === 'true') {\r\n              this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: data.patientId })\r\n            } else {\r\n              this.props.history.push({ pathname: '/page10', })\r\n            }\r\n          }}\r\n          menu8Click={() => {\r\n            this.props.history.push({ pathname: '/uesr/selectExam', })\r\n          }}\r\n          blueSearch={true}\r\n        />\r\n\r\n\r\n        <div className=\"hread flex\">\r\n          <div className=\"hread1 flex\" style={{ marginTop: px(30) }}>\r\n            <div className=\"heard1L flex\">\r\n              <div className=\"title\" style={{ fontSize: px(25) }}>Client Results</div>\r\n              <div className=\"refresh flex\"\r\n                style={{ fontSize: px(25), marginLeft: px(10) }}\r\n              >\r\n                <SyncOutlined onClick={this._refresh} spin={spin} />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"walkin flex\"\r\n              style={{ borderRadius: px(50), height: px(45), fontSize: px(20) }}\r\n              onClick={() => {\r\n                storage.doctorExam = JSON.stringify('')\r\n                storage.doctorList = JSON.stringify(this.state.data)\r\n                if (storage.isClinical === 'true') {\r\n                  this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: null })\r\n                } else {\r\n                  this.props.history.push({ pathname: '/page10', })\r\n                }\r\n\r\n              }}\r\n            >Walk-In</div>\r\n\r\n          </div>\r\n          <div className=\"heard2 flex\" style={{ marginTop: px(8), marginBottom: px(8) }}>\r\n\r\n            <div className=\"sort flex\" >\r\n              <p style={{ fontSize: px(16), marginRight: px(10) }}>sort By:</p>\r\n\r\n              <SelectionBox\r\n                listArr={[\r\n                  { key: 'time', value: 'Time' },\r\n                  { key: 'petid', value: 'Pet ID' },\r\n                  { key: 'owner', value: 'Owner' },\r\n                  { key: 'breed', value: 'Breed' },\r\n                  { key: 'petname', value: 'Pet Name' },\r\n                  { key: 'gender', value: 'Gender' },\r\n                ]}\r\n                clickItem={(item) => {\r\n                  let petList = [].concat(data)\r\n                  switch (item.key) {\r\n                    case 'time':\r\n                      petList.sort((a, b) => { return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1 })\r\n                      break;\r\n                    case 'petid':\r\n                      petList.sort((a, b) => { return a.patientId >= b.patientId ? 1 : -1 })\r\n                      break;\r\n                    case 'owner':\r\n                      petList.sort((a, b) => { return a.owner >= b.owner ? 1 : -1 })\r\n                      break;\r\n                    case 'breed':\r\n                      petList.sort((a, b) => { return a.breed >= b.breed ? 1 : -1 })\r\n                      break;\r\n                    case 'petname':\r\n                      petList.sort((a, b) => { return a.petName >= b.petName ? 1 : -1 })\r\n                      break;\r\n                    case 'gender':\r\n                      petList.sort((a, b) => { return a.gender >= b.gender ? 1 : -1 })\r\n                      break;\r\n                  }\r\n\r\n                  this.setState({\r\n                    sortBy: item.value,\r\n                    showsortBy: false,\r\n                    data: petList\r\n                  })\r\n                }}\r\n              />\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\" >\r\n          <ConfigProvider renderEmpty={noData}>\r\n            <Table\r\n              style={{\r\n                // border: ' #979797 1px solid',\r\n                padding: 0,\r\n                margin: 0,\r\n                width: '95%',\r\n                // height: px(500)\r\n              }}\r\n              rowKey={data => data.id}\r\n              bordered={false}\r\n              columns={columns}\r\n              dataSource={(this.state.heardSearchText.length === 0) ? this.state.data : this.state.searchData}\r\n              loading={loading}\r\n              locale={{ filterConfirm: <div>111</div> }}\r\n              // pagination={{ showSizeChanger: false, showQuickJumper: true, defaultCurrent: this.state.current }}\r\n              pagination={false}\r\n              scroll={{\r\n                y: px(600)\r\n              }}\r\n              onRow={(record) => {\r\n                return {\r\n                  onClick: (event) => {\r\n\r\n                    console.log('record', record);\r\n                    storage.doctorExam = JSON.stringify(record)\r\n                    storage.doctorList = JSON.stringify(this.state.data)\r\n\r\n                    if (storage.isClinical === 'true') {\r\n                      this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.patientId })\r\n                    } else {\r\n                      this.props.history.push({ pathname: '/page10', })\r\n                    }\r\n\r\n\r\n                  }, // 点击行\r\n\r\n                };\r\n              }}\r\n            />\r\n          </ConfigProvider>\r\n        </div>\r\n\r\n        <Modal\r\n\r\n          // visible={isOrg}\r\n          visible={modalVis}\r\n          onCancel={() => this.setState({ modalVis: false })}\r\n          width={350}\r\n          footer={[]}\r\n          modalRender={(modal) => (\r\n            <Draggable\r\n              disabled={disabled}\r\n              bounds={bounds}\r\n              onStart={(event, uiData) => this.onStart(event, uiData)}\r\n            >\r\n              <div ref={this.draggleRef}>{modal}</div>\r\n            </Draggable>\r\n          )}\r\n          destroyOnClose={true}\r\n          wrapClassName=\"doctorSelectExamModal\"\r\n        >\r\n          <div id='doctorSelectExamModal'>\r\n            <div className=\"text\"\r\n              onMouseOver={() => {\r\n                if (disabled) {\r\n                  this.setState({\r\n                    disabled: false,\r\n                  });\r\n                }\r\n              }}\r\n              onMouseOut={() => {\r\n                this.setState({\r\n                  disabled: true,\r\n                });\r\n              }}\r\n\r\n            >{this.state.isNotFound ? 'Pet not found!' : 'Pet found!'}</div>\r\n            <div className='Img'>\r\n              {this.state.isNotFound ?\r\n                <img src={redclose} width=\"50px\" /> :\r\n                <img src={jinggao} width=\"50px\" />\r\n              }\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n            {this.state.isNotFound ? <p > This pet is not on your database</p> :\r\n              <p >Pet Identified but does not <br /> belong to your organization.</p>}\r\n\r\n\r\n            <div style={{ marginTop: px(20) }}>\r\n              <Button1\r\n                text={'OK'}\r\n\r\n                onClick={() => this.setState({\r\n                  modalVis: false\r\n                })}\r\n              />\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </Modal>\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\temporaryStorage.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\current.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\settings\\Settings.jsx",["1229","1230","1231","1232","1233","1234","1235","1236","1237"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from './../../../utils/button/Button'\r\nimport electronStore from './../../../utils/electronStore'\r\nimport temporaryStorage from './../../../utils/temporaryStorage'\r\nimport { mTop, px, win } from '../../../utils/px';\r\nimport MyModal from './../../../utils/myModal/MyModal'\r\nimport redJinggao from './../../../assets/img/redjinggao.png'\r\nimport './settings.less'\r\n\r\nimport SelectionBox from './../../../utils/selectionBox/SelectionBox'\r\nconst { Option } = Select;\r\nlet storage = window.localStorage\r\n\r\nexport default class Settings extends Component {\r\n\r\n  state = {\r\n    self_tarting: false,      //自启动，\r\n    isHua: true,              //为true代表为华氏度，为false代表℃\r\n    is15: true,               //腋温测量时长，为true则是15秒，为false则是35秒\r\n    isClicleStudy: false,     //是否处于临床测试，为true则在处于，false则不处于\r\n    isBacklight: true,        //是否开启背光，为true则是开启背光，为false则是关闭背光\r\n    isBeep: true,             //是否开启蜂鸣器，为true则是开启蜂鸣器，反之则是关闭蜂鸣器\r\n    backlightTimer: { length: 140, number: '45' },//背光时长，长度指的是在滑轨上面的距离，number指的是显示的秒数\r\n    autoOff: { length: 0, number: '30' },  //无操作自动关机，长度指的是在滑轨上面的距离，number指的是关闭的秒数\r\n\r\n\r\n    oldIsHua: true,\r\n    oldIs15: true,\r\n    oldIsBacklight: true,\r\n    oldIsBeep: true,\r\n    oldBacklightTimer: { length: 140, number: '45' },\r\n    oldAutoOff: { length: 0, number: '30' },\r\n    oldIsClicleStudy: false,\r\n\r\n    isSave: false,\r\n\r\n    num0: '',\r\n    num1: '',\r\n    num2: '',\r\n    num3: '',\r\n    num4: '',\r\n    num5: '',\r\n    verifyNum: '',\r\n\r\n    maxLength: 1, //验证码长度\r\n    valueA: \"\", //验证码第一位\r\n    valueB: \"\", //二\r\n    valueC: \"\", //三\r\n    valueD: \"\", //四\r\n    valueE: \"\", //5\r\n    valueF: \"\", //6\r\n    isClicleStudyModal: false\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('setting', win())\r\n    }\r\n    //这里要根据保存的时候存到哪个位置的，然后拿出来更新state\r\n    let hardSet = electronStore.get(`${storage.userId}-hardwareConfiguration`)\r\n    console.log('----', hardSet);\r\n    let isClicleStudy = storage.isClinical === 'true' ? true : false\r\n    if (hardSet) {\r\n      console.log('不是第一次进来，有设置的');\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = hardSet\r\n\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy,\r\n\r\n      })\r\n    } else {\r\n      let settings = {\r\n        isHua: true,\r\n        is15: true,\r\n        self_tarting: false,  //自启动\r\n        isBacklight: true,\r\n        isBeep: true,\r\n        backlightTimer: { length: 140, number: '45' },\r\n        autoOff: { length: 0, number: '30' },\r\n      }\r\n      electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n      let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff } = settings\r\n      this.setState({\r\n        isHua,\r\n        is15,\r\n        isBacklight,\r\n        isBeep,\r\n        backlightTimer,\r\n        autoOff,\r\n        // isClicleStudy: temporaryStorage.isClicleStudy,\r\n        isClicleStudy,\r\n\r\n        oldIsHua: isHua,\r\n        oldIs15: is15,\r\n        oldIsBacklight: isBacklight,\r\n        oldIsBeep: isBeep,\r\n        oldBacklightTimer: backlightTimer,\r\n        oldAutoOff: autoOff,\r\n        // oldIsClicleStudy: temporaryStorage.isClicleStudy,\r\n        oldIsClicleStudy: isClicleStudy\r\n\r\n\r\n      })\r\n    }\r\n\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    if (windowsHeight < 900) {\r\n      ipcRenderer.send('table', win())\r\n    } else {\r\n      ipcRenderer.send('big', win())\r\n    }\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _save = () => {\r\n    console.log('点击保存');\r\n    /**\r\n     * 分别两部分保存保存，\r\n     * 本地存储：程序自启动、测量单位、背光、蜂鸣器、背光时间、硬件自动关机时间、腋温测量时间\r\n     * 临时存储：处于临床测试状态\r\n     */\r\n    this.setState({\r\n      isSave: false\r\n    })\r\n    let { self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 } = this.state\r\n    // console.log({ self_tarting, isHua, isClicleStudy, isBacklight, isBeep, backlightTimer, autoOff, is15 });\r\n    let settings = {\r\n      isHua,\r\n      is15,\r\n      self_tarting,\r\n      isBacklight,\r\n      isBeep,\r\n      backlightTimer,\r\n      autoOff,\r\n    }\r\n    electronStore.set(`${storage.userId}-hardwareConfiguration`, settings)\r\n    // temporaryStorage.isClicleStudy = isClicleStudy\r\n    storage.isClinical = `${isClicleStudy}`\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (self_tarting) {\r\n      ipcRenderer.send('openAutoStart')\r\n    } else {\r\n      ipcRenderer.send('closeAutoStart')\r\n    }\r\n    let setArr = ['03', 'ed', '07', 'dd', autoOff.number, isBacklight ? backlightTimer.number : '00', isBeep ? '11' : '00', isHua ? '00' : '01']\r\n    console.log('setArr', setArr);\r\n\r\n\r\n\r\n    ipcRenderer.send('usbdata', { command: '21', arr: setArr })\r\n\r\n    this.props.history.goBack()\r\n  }\r\n  _goback = () => {\r\n    console.log('返回');\r\n    let { isHua, is15, isBacklight, isBeep, backlightTimer, autoOff, isClicleStudy,\r\n      oldAutoOff, oldBacklightTimer, oldIs15, oldIsBacklight, oldIsBeep, oldIsClicleStudy, oldIsHua, } = this.state\r\n    if (isHua !== oldIsHua || is15 !== oldIs15 || isBacklight !== oldIsBacklight || isBeep !== oldIsBeep || backlightTimer !== oldBacklightTimer\r\n      || autoOff !== oldAutoOff || isClicleStudy !== oldIsClicleStudy) {\r\n      console.log('做了更改');\r\n      this.setState({\r\n        isSave: true\r\n      })\r\n\r\n    } else {\r\n      this.props.history.goBack()\r\n    }\r\n\r\n  }\r\n\r\n  //验证码光标后移\r\n  handleInputValue = (e, type) => {\r\n\r\n    const { value = \"\" } = e.target;\r\n    switch (type) {\r\n      case \"A\":\r\n        if (value) this.secondFoucs.focus();\r\n\r\n        this.setState({\r\n          valueA: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n\r\n      case \"B\":\r\n        if (value) this.tridFoucs.focus();\r\n\r\n        this.setState({\r\n          valueB: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"C\":\r\n        if (value) this.fourFoucs.focus();\r\n\r\n        this.setState({\r\n          valueC: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"D\":\r\n        if (value) this.fiveFoucs.focus();\r\n\r\n        this.setState({\r\n          valueD: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n\r\n      case \"E\":\r\n        if (value) this.sixFoucs.focus();\r\n\r\n        this.setState({\r\n          valueE: value.slice(0, 1)\r\n        });\r\n\r\n\r\n        break;\r\n      default:\r\n        this.setState({\r\n          valueF: value.slice(0, 1),\r\n          isShow: true\r\n        });\r\n        break;\r\n    }\r\n\r\n  };\r\n  //删除验证码\r\n  handleDel = e => {\r\n    const BACK_SPACE = 8;\r\n    const isBackSpaceKey = e.keyCode === BACK_SPACE;\r\n    if (isBackSpaceKey && e.target.value.length === 0) {\r\n      let previous = e.target;\r\n      //上一个兄弟节点\r\n      previous = previous.previousElementSibling;\r\n      if (previous !== null && previous.tagName.toLowerCase() === \"input\") {\r\n        previous.focus();\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  moceCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    if (index < 5) {\r\n      inputs[++index].focus()\r\n    }\r\n  }\r\n  backCursor = (index) => {\r\n    let inputs = document.querySelectorAll('#settings .verify input')\r\n    inputs[--index].focus()\r\n  }\r\n  _device = () => {\r\n\r\n    let userId = storage.userId\r\n    let deviceList = electronStore.get(`${userId}-deviceList`)\r\n    console.log('---', deviceList);\r\n    if (!deviceList) {\r\n      let str = `${getRamNumber()}`\r\n      for (let i = 0; i < 5; i++) {\r\n        str += `:${getRamNumber()}`\r\n      }\r\n      console.log('随机生成的mac地址:', str);\r\n      deviceList = [{ name: 'MellaPro', deviceType: 'mellaPro', macId: str }]\r\n      electronStore.set(`${userId}-deviceList`, deviceList)\r\n    }\r\n\r\n\r\n    function getRamNumber() {\r\n      var result = '';\r\n      for (var i = 0; i < 2; i++) {\r\n        result += Math.floor(Math.random() * 16).toString(16);//获取0-15并通过toString转16进制\r\n      }\r\n      //默认字母小写，手动转大写\r\n      return result.toLowerCase();//另toLowerCase()转小写\r\n    }\r\n    let deviceArr = []\r\n    let selectDevice = electronStore.get(`${storage.userId}-selectDevice`)\r\n    let selectDeviceName = ''\r\n    for (let i = 0; i < deviceList.length; i++) {\r\n      const element = deviceList[i];\r\n      let json = {\r\n        key: element.macId, value: element.name\r\n      }\r\n      deviceArr.push(json)\r\n      if (selectDevice === element.macId) {\r\n        selectDeviceName = element.name\r\n      }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n      <div className=\"item\" style={{ marginTop: px(15) }}>\r\n        <div className=\"l\">\r\n          <div className=\"hardSetting\">{`Hardware Settings`}</div>\r\n        </div>\r\n\r\n\r\n        {/* <div className=\"l\">\r\n          <div className=\"text\">Device:</div>\r\n\r\n          <div className=\"selebox\" style={{ width: px(200) }}>\r\n            <SelectionBox\r\n              listArr={deviceArr}\r\n              clickItem={(value) => {\r\n                console.log('选择的设备:', value);\r\n                electronStore.set(`${storage.userId}-selectDevice`, value.key)\r\n\r\n              }}\r\n              initSelectVale={selectDeviceName}\r\n\r\n            />\r\n          </div>\r\n\r\n\r\n        </div> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    let { isClicleStudy, isBacklight, isBeep, backlightTimer, valueA, valueB, valueC, valueD, isClicleStudyModal, valueE, valueF, maxLength, sortBy, showsortBy } = this.state\r\n\r\n    let bodyHeight = '90%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n\r\n    return (\r\n      <div id=\"settings\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={this._goback}\r\n            // onSearch={(val) => { console.log(val); }}\r\n            menu8Click={() => {\r\n              switch (storage.identity) {   //1是vetspire   2是ezyvet   3是医生\r\n                case '1': this.props.history.push('/VetSpireSelectExam')\r\n\r\n                  break;\r\n                case '2': this.props.history.push({ pathname: '/EzyVetSelectExam', listDate: storage.ezyVetList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n\r\n                case '3': this.props.history.push({ pathname: '/uesr/selectExam', listDate: storage.doctorList, defaultCurrent: storage.defaultCurrent })\r\n\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\">\r\n          <div className=\"setting\">\r\n            {/* 桌面设计 */}\r\n            <div className=\"desk\">\r\n              <div className=\"title\">Desktop Settings</div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Launch Mella on Computer Startup</div>\r\n                  <div className=\"icon\"\r\n                    onClick={() => this.setState({ self_tarting: !this.state.self_tarting })}\r\n                  >\r\n                    {(this.state.self_tarting) && <span  >&#xe619;</span>}\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"l\" style={{ paddingLeft: px(50), paddingRight: px(50) }}>\r\n                  <div className=\"text\">Units:</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°F / lbs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n\r\n                      onClick={() => { this.setState({ isHua: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.isHua) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">°C / kg</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                {/* <div className=\"l\">\r\n                  <div className=\"text\">Clinical Study Mode</div>\r\n                  <div className=\"switch\">\r\n                    <Switch\r\n                      checked={isClicleStudy}\r\n                      onClick={() => {\r\n                        if (isClicleStudy === false) {\r\n                          this.setState({\r\n                            isClicleStudy: !isClicleStudy,\r\n                            isClicleStudyModal: true\r\n                          })\r\n                        } else {\r\n                          this.setState({\r\n                            isClicleStudy: !isClicleStudy\r\n                          })\r\n                          // temporaryStorage.isClicleStudy = false\r\n                          storage.isClinical = `${false}`\r\n\r\n                          this.props.history.push({ pathname: '/page10' })\r\n                        }\r\n\r\n                      }}\r\n                      size='small'\r\n                    />\r\n                  </div>\r\n\r\n                </div> */}\r\n\r\n                {/* \r\n                <div className=\"l\" style={{ height: '50px' }}>\r\n\r\n                </div> */}\r\n              </div>\r\n\r\n            </div>\r\n\r\n            {/* 用户设计 */}\r\n            {\r\n              // storage.roleId === '3' &&\r\n              <div className=\"desk\">\r\n                <div className=\"title user\">User Admin</div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\" onClick={() => { this.props.history.push('/menuOptions/ConnectWorkplace') }}>\r\n                    <div className=\"text\">{`Org & Practice Profiles`}</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l\" onClick={() => { this.props.history.push('/menuOptions/invite') }}>\r\n                    <div className=\"text\">Invite Your Team</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"item\" style={{ marginBottom: px(10) }}>\r\n                  <div className=\"l\"\r\n                    onClick={() => {\r\n                      console.log(storage.roleId);\r\n                      message.destroy()\r\n                      if (storage.roleId === '3') {\r\n                        this.props.history.push('/menuOptions/veterinarians')\r\n                      } else {\r\n                        message.error('You do not have administrator rights')\r\n                      }\r\n                    }}\r\n\r\n                  >\r\n                    <div className=\"text\">Vet Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n\r\n\r\n                  <div className=\"l \"\r\n                    onClick={() => this.props.history.push('/menuOptions/petAndParents')}\r\n\r\n                    style={{ marginTop: '25px', marginBottom: '20px' }}>\r\n                    <div className=\"text\">Pet and Parents Profile Management</div>\r\n                    <div className=\"rightIcon\">&#xe60c;</div>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            }\r\n\r\n\r\n            {/* 硬件设置 */}\r\n\r\n            <div className=\"desk\">\r\n\r\n              {this._device()}\r\n              <div className=\"item\" style={{ marginTop: px(25) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Backlight</div>\r\n                  <Switch\r\n                    checked={isBacklight}\r\n                    onClick={() => this.setState({ isBacklight: !isBacklight })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"l\">\r\n                  <div className=\"text\">Action Beep</div>\r\n                  <Switch\r\n                    checked={isBeep}\r\n                    onClick={() => this.setState({ isBeep: !isBeep })}\r\n                    size='small'\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className=\"item\" style={{ marginTop: px(35) }}>\r\n                <div className=\"l\">\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Backlight Timer</div>\r\n                    <div className=\"solid\">\r\n                      10 Secs\r\n                      <div className=\"slider\" >\r\n                        <Slider\r\n                          min={10}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { console.log(e); this.setState({ backlightTimer: e }) }}\r\n                          left={backlightTimer.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"l\" >\r\n                  <div className=\"backlight\" style={{ width: px(300) }} >\r\n                    <div className=\"text\">Auto Off After</div>\r\n                    <div className=\"solid\">\r\n                      30 Secs\r\n                      <div className=\"slider\">\r\n                        <Slider\r\n                          min={30}\r\n                          max={60}\r\n                          railWidth={px(200)}\r\n                          getData={(e) => { this.setState({ autoOff: e }) }}\r\n                          left={this.state.autoOff.length}\r\n                        />\r\n                      </div>\r\n                      60 Secs\r\n                    </div>\r\n\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"item\" style={{ marginTop: px(35) }}>\r\n\r\n\r\n\r\n                <div className=\"l\" style={{ flexDirection: 'column', alignItems: 'flex-start' }}>\r\n                  <div className=\"text\">Measurement Time for Axillary Sensor</div>\r\n                  <div className=\"unit\">\r\n\r\n\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: true }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">15 Secs</div>\r\n                    </div>\r\n                    <div className=\"one\"\r\n                      onClick={() => { this.setState({ is15: false }) }}\r\n                    >\r\n                      <div className=\"check\">\r\n                        {(!this.state.is15) && <div className=\"ciral\" />}\r\n                      </div>\r\n                      <div className=\"unitsText\">30 Secs</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"l\" onClick={() => this.props.history.push('/menuOptions/advancedsettings')}>\r\n                  <div className=\"text\">Advanced Settings</div>\r\n                  <div className=\"rightIcon\">&#xe60c;</div>\r\n                </div>\r\n              </div>\r\n\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"btn\" style={{ padding: `${px(40)}px 0` }}>\r\n            <Button\r\n              text={'Save Changes'}\r\n              onClick={this._save}\r\n            />\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n        <MyModal\r\n          visible={this.state.isSave}\r\n          element={\r\n            <div className='isSave'\r\n            //  style={{ borderRadius: `${px(20)}px`, backgroundColor: '#fff' }}\r\n            >\r\n              <img src={redJinggao} alt=\"\" style={{ width: px(50), margin: `${px(25)}px 0` }} />\r\n              <p>Settings changed - save?</p>\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <Button\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isSave: false\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'OK'}\r\n                  onClick={this._save}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n        <MyModal\r\n          visible={isClicleStudyModal}\r\n          element={\r\n            <div className='isSave'\r\n              style={{ width: '40%' }}\r\n            >\r\n\r\n              <div className=\"title\" style={{ marginTop: px(60) }}>\r\n                Are you sure you want to enter<br />\r\n                Clinical Study Mode?<br />\r\n                Please enter code to enter.\r\n              </div>\r\n\r\n\r\n\r\n              <div className='verify' style={{ margin: `${px(20)}px 0` }}>\r\n\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.firstFoucs = ref;\r\n                  }}\r\n                  value={valueA}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"A\")}\r\n                  autoFocus={'autofocus'}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.secondFoucs = ref;\r\n                  }}\r\n                  value={valueB}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"B\")}\r\n                />\r\n                <input\r\n                  foucs\r\n\r\n                  ref={ref => {\r\n                    this.tridFoucs = ref;\r\n                  }}\r\n                  value={valueC}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"C\")}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.fourFoucs = ref;\r\n                  }}\r\n                  value={valueD}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"D\")}\r\n                />\r\n\r\n\r\n\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.fiveFoucs = ref;\r\n                  }}\r\n                  value={valueE}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"E\")}\r\n                />\r\n                <input\r\n\r\n                  ref={ref => {\r\n                    this.sixFoucs = ref;\r\n                  }}\r\n                  value={valueF}\r\n                  maxLength={maxLength}\r\n                  onKeyDown={maxLength ? this.handleDel : null}\r\n                  onChange={e => this.handleInputValue(e, \"F\")}\r\n                />\r\n              </div>\r\n\r\n\r\n\r\n\r\n              <div className=\"btn\" style={{ margin: `${px(30)}px 0` }} >\r\n                <Button\r\n                  text={'Cancel'}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      isClicleStudyModal: false,\r\n                      isClicleStudy: false,\r\n                      valueA: '',\r\n                      valueB: '',\r\n                      valueC: '',\r\n                      valueD: '',\r\n                      valueE: '',\r\n                      valueF: ''\r\n                    })\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n                <Button\r\n                  text={'OK'}\r\n                  onClick={() => {\r\n                    if (valueA && valueB && valueC && valueD && valueE && valueF) {\r\n                      this.setState({\r\n                        isClicleStudyModal: false\r\n                      })\r\n                      // temporaryStorage.isClicleStudy = true\r\n\r\n                      // let storage = window.localStorage;\r\n                      storage.isClinical = `${true}`\r\n                      this.props.history.push({ pathname: '/page8', identity: storage.identity });\r\n                    }\r\n\r\n\r\n                  }}\r\n                  textBoxStyle={{\r\n                    width: '40%',\r\n                    height: px(40)\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\measure\\NorMalMeasurement.jsx",["1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\linkEquipment\\index.jsx",["1262","1263","1264","1265","1266"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport PlugInOtter from \"../../../../assets/img/PlugInOtter.png\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst LinkEquipment = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  const [nextType, setNextType] = useState(false);\n\n  const onClick = () => {\n    setNextType(true);\n  }\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          {!nextType ? 'Register OtterEQ' : 'Plug in OtterEQ'}\n        </p>\n      </div>\n      {\n        !nextType ? (\n          <>\n            <div className=\"middleBox\">\n              <Input placeholder=\"Please enter your serial number\" className=\"middleInput\" style={{ width: px(300), height: px(50) }} />\n            </div>\n            <div className=\"bottomBox\">\n              <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick} >Next</Button>\n            </div>\n          </>\n        ) : (\n          <div className=\"imageBox\" onClick={() => cutPageType('swabPetEarPage')}>\n            <img src={PlugInOtter} alt=\"\" style={{ width: px(500), height: px(350) }} />\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(LinkEquipment);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\menuOptions\\admin_VetProfile\\Veterinarians.jsx",["1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282"],"\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Switch,\r\n  Select,\r\n  message\r\n} from 'antd'\r\n\r\n\r\n\r\n\r\nimport Heart from '../../../utils/heard/Heard'\r\nimport Slider from '../../../utils/slider/Slider'\r\nimport Button from '../../../utils/button/Button'\r\nimport electronStore from '../../../utils/electronStore'\r\nimport temporaryStorage from '../../../utils/temporaryStorage'\r\nimport { mTop, px } from '../../../utils/px';\r\nimport MyModal from '../../../utils/myModal/MyModal'\r\nimport parent from './../../../assets/img/parent.png'\r\nimport dog from '../../../assets/images/reddog.png'\r\nimport cat from '../../../assets/images/redcat.png'\r\nimport other from '../../../assets/images/redother.png'\r\nimport selectphoto from './../../../assets/images/sel.png'\r\nimport close from './../../../assets/img/close.png'\r\nimport dui from './../../../assets/images/dui.png'\r\n\r\nimport Avatar from './../../avatar/Avatar'\r\nimport { fetchRequest } from '../../../utils/FetchUtil1'\r\nimport moment from 'moment'\r\nimport './veterinarians.less'\r\n\r\nconst { Option } = Select;\r\nlet storage = window.localStorage;\r\n\r\nexport default class Veterinarians extends Component {\r\n\r\n  state = {\r\n    parentList: [],\r\n    petList: [],\r\n    loading: false,\r\n    parentSearchArr: [],\r\n    petSearchArr: [],\r\n    searchText: '',\r\n    clickVet: false,\r\n    userList: [],\r\n    clickUserItem: {},\r\n    isAdmin: false,\r\n    imageId: null,\r\n    imgUrl: '',\r\n    doctorArr: [],\r\n    dockerSearchArr: []\r\n  }\r\n  componentDidMount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    ipcRenderer.send('Lowbig')\r\n    ipcRenderer.on('changeFenBianLv', this.changeFenBianLv)\r\n\r\n    this._getExam()\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n\r\n    ipcRenderer.removeListener('changeFenBianLv', this.changeFenBianLv)\r\n  }\r\n  changeFenBianLv = (e) => {\r\n    console.log(e);\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    let { height, width } = window.screen\r\n    let windowsHeight = height > width ? width : height\r\n    ipcRenderer.send('Lowbig')\r\n    this.setState({\r\n\r\n    })\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true,\r\n      spin: false\r\n    })\r\n    let params = {\r\n      doctorId: storage.userId,\r\n    }\r\n    if (storage.lastWorkplaceId) {\r\n      params.workplaceId = storage.lastWorkplaceId\r\n    }\r\n    if (storage.lastOrganization) {\r\n      params.organizationId = storage.lastOrganization\r\n    }\r\n\r\n    console.log('查询宠物的入参', params);\r\n\r\n\r\n    fetchRequest(`/organization/listDoctorsByAdmin/${storage.lastOrganization}`, 'GET', params)\r\n      .then(res => {\r\n        console.log('人员列表', res);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        if (res.flag === true && res.code === 20000) {\r\n          let data = []\r\n          for (let i = 0; i < res.data.length; i++) {\r\n            let { birthday, email, firstName, lastName, isLimit, isDeleted, phone, url, userId, createTime, roleId } = res.data[i]\r\n\r\n            let json = {\r\n              insertedAt: createTime,\r\n              name: `${lastName} ${firstName}`,\r\n              userId,\r\n              email,\r\n              birthday,\r\n              isLimit,\r\n              isDeleted,\r\n              phone,\r\n              url,\r\n              firstName, lastName, roleId\r\n            }\r\n            data.push(json)\r\n          }\r\n          data.sort((a, b) => {\r\n            return moment(parseInt(a.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') > moment(parseInt(b.insertedAt) * 1000).format('YYYY-MM-DD HH:mm') ? -1 : 1\r\n          })\r\n          this.setState({\r\n            doctorArr: data,\r\n            // parentList: data //这里只是测试，后期删除\r\n\r\n          })\r\n\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      })\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  list = () => {\r\n    let { doctorArr, dockerSearchArr, searchText } = this.state\r\n    let data = searchText.length > 0 ? dockerSearchArr : doctorArr\r\n\r\n\r\n\r\n\r\n    let options = data.map((item, index) => {\r\n      let { url, firstName, lastName } = item\r\n      let images = `url(${url}?download=0&width=150)`\r\n      if (!url) {\r\n        images = `url(${parent})`\r\n      }\r\n\r\n\r\n      return (\r\n        <li\r\n          key={`${index}`}\r\n          style={{ margin: `0 0 ${px(15)}px 0`, borderRadius: px(20), float: `${index % 2 === 0 ? 'left' : 'right'}` }}\r\n          onClick={() => {\r\n            console.log(item);\r\n            let { name, email, phone, roleId } = item\r\n            let isAdmin = roleId === '3' ? true : false\r\n\r\n            this.setState({\r\n              clickVet: true,\r\n              clickUserItem: item,\r\n              name,\r\n              email,\r\n              phone,\r\n              isAdmin,\r\n              imgUrl: ''\r\n            })\r\n\r\n          }}\r\n        >\r\n          <div className='item' style={{ padding: `${px(15)}px 0 ${px(15)}px  ${px(20)}px`, }}>\r\n            <div\r\n              className='img'\r\n              style={{\r\n                width: px(50),\r\n                height: px(50),\r\n                marginRight: px(20),\r\n                borderRadius: px(60),\r\n                backgroundImage: images,\r\n              }}>\r\n\r\n              <div\r\n                className=\"green\"\r\n                style={{\r\n                  width: px(8),\r\n                  height: px(8),\r\n                  borderRadius: px(8),\r\n                  backgroundColor: '#7ED266',\r\n                  right: px(-5),\r\n                  top: px(-3)\r\n\r\n                }}\r\n\r\n              />\r\n\r\n            </div>\r\n\r\n            <div className='petInfo' >\r\n              <p style={{ color: '#141414', fontWeight: 600, fontSize: px(20) }}>{item.name}</p>\r\n            </div>\r\n          </div>\r\n        </li >\r\n      )\r\n\r\n    })\r\n\r\n    let liStyle = { backgroundColor: '#fff', }\r\n    if (this.state.petList.length > 16) {\r\n      liStyle = { height: px(750), overflowY: 'auto', }\r\n    }\r\n\r\n\r\n    return (\r\n      <div className='petList'>\r\n        <ul style={liStyle}>\r\n          {options}\r\n        </ul>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  inputChange = (text) => {\r\n    let search = text.target.value\r\n    this.setState({\r\n      searchText: search\r\n    })\r\n\r\n    let { doctorArr } = this.state\r\n\r\n    let keyWord = search\r\n\r\n    let parentSearchData = []\r\n\r\n    for (let i = 0; i < doctorArr.length; i++) {\r\n      let { email, phone, name, } = doctorArr[i]\r\n      email = email ? email.toLowerCase() : ''\r\n      phone = phone ? phone.toLowerCase() : ''\r\n      name = name ? name.toLowerCase() : ''\r\n      let keyLower = keyWord.toLowerCase()\r\n      if (`${email}`.indexOf(keyLower) !== -1 || `${phone}`.indexOf(keyLower) !== -1 || `${name}`.indexOf(keyLower) !== -1) {\r\n        parentSearchData.push(doctorArr[i])\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({\r\n\r\n      dockerSearchArr: parentSearchData\r\n    })\r\n\r\n\r\n  }\r\n  _petSpecies = () => {\r\n\r\n\r\n    let { clickUserItem, isAdmin } = this.state\r\n    let { url } = clickUserItem\r\n    this.avatar = url ? url : selectphoto\r\n    return (\r\n      <div className=\"petSpecies\">\r\n\r\n        <div className=\"r\">\r\n\r\n          <div className=\"img\">\r\n            <Avatar\r\n              init={\r\n                <div className=\"ciral \">\r\n                  <img src={this.avatar} alt=\"\" id=\"touxiang\" style={{ height: px(100) }} />\r\n                  <p style={{ fontSize: px(14), height: mTop(35) }}>Upload Photo</p>\r\n                </div>\r\n              }\r\n              getinfo={(val) => {\r\n                console.log('我是父组件，从子组件获取到的数据位：', val);\r\n                if (val) {\r\n                  this.setState({\r\n                    imageId: val\r\n                  })\r\n                }\r\n\r\n              }}\r\n              getAllInfo={(val) => {\r\n                console.log('图片信息', val);\r\n                this.setState({\r\n                  imgUrl: val.url\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Set Role:</p>\r\n\r\n            <div className=\"ones\" style={{ marginTop: px(8) }}>\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>User</p>\r\n              </div> */}\r\n              <div className=\"one\"\r\n                onClick={() => {\r\n                  this.setState({\r\n                    isAdmin: !this.state.isAdmin\r\n                  })\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"chect\"\r\n                  style={{ width: px(18), height: px(18), marginRight: px(15) }}\r\n\r\n                >\r\n                  {isAdmin && <img src={dui} alt=\"\" />}\r\n\r\n                </div>\r\n                <p>Admin</p>\r\n              </div>\r\n\r\n              {/* <div className=\"one\">\r\n                <div className=\"chect\" style={{ width: px(18), height: px(18), marginRight: px(15) }}>\r\n                  <img src={dui} alt=\"\" />\r\n                </div>\r\n                <p>Owner</p>\r\n              </div> */}\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  _petName = () => {\r\n    let { name, email } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\" style={{ marginTop: px(60) }}>\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50), }}>\r\n            <p>Name</p>\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  name: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(50) }}>\r\n            <p>Email</p>\r\n            <input\r\n              type=\"text\"\r\n              value={email}\r\n              disabled={true}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  email: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  _phone = () => {\r\n    let { areas, phone } = this.state\r\n\r\n    return (\r\n      <div className=\"petSpecies\">\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Phone</p>\r\n            <input\r\n              type=\"text\"\r\n              value={phone}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  phone: item.target.value\r\n                })\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"l\">\r\n          <div className=\"firstName\" style={{ marginBottom: px(30) }}>\r\n            <p>Areas of Expertise</p>\r\n            <input\r\n              type=\"text\"\r\n              value={areas}\r\n              onChange={(item) => {\r\n\r\n                this.setState({\r\n                  areas: item.target.value\r\n                })\r\n              }}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  changeUserInfo = () => {\r\n    let { name, email, phone, clickUserItem, imageId, isAdmin, petList, imgUrl } = this.state\r\n    let { userId } = clickUserItem\r\n    let roleId = isAdmin ? '3' : '2'\r\n    let params = {\r\n      firstName: '',\r\n      lastName: name,\r\n      email,\r\n      phone,\r\n\r\n      roleId\r\n    }\r\n    if (imageId) {\r\n      params.imageId = imageId\r\n    }\r\n    message.destroy()\r\n    this.setState({\r\n      clickVet: false,\r\n      loading: true\r\n    })\r\n    console.log('入参', params);\r\n    fetchRequest(`/new/admin/users/${userId}`, 'PATCH', params, storage.token)\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.flag && res.code === 20000) {\r\n          for (let i = 0; i < petList.length; i++) {\r\n            const element = petList[i];\r\n            if (clickUserItem.userId === element.userId) {\r\n              element.name = name\r\n              element.email = email\r\n              element.phone = phone\r\n              if (imageId) {\r\n                element.url = imgUrl\r\n              }\r\n\r\n              break\r\n            }\r\n\r\n          }\r\n          this.setState({\r\n            loading: false,\r\n            petList\r\n          })\r\n          message.success('User information changed successfully')\r\n        } else {\r\n          this.setState({\r\n            loading: false\r\n          })\r\n          message.error('User information change failed')\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false\r\n        })\r\n        message.error('User information change failed')\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let bodyHeight = '92%'\r\n    try {\r\n      bodyHeight = document.getElementById('settings').clientHeight - document.querySelectorAll('#settings .heard')[0].clientHeight\r\n    } catch (error) {\r\n\r\n    }\r\n    return (\r\n      <div id=\"veterinarians\">\r\n        <div className=\"heard\">\r\n          <Heart\r\n            onReturn={() => {\r\n              this.props.history.goBack()\r\n            }}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"body\" style={{ height: bodyHeight, padding: `0 ${px(35)}px` }}>\r\n          <div className=\"title\">\r\n            <h1 style={{ fontSize: px(38) }}>{`Veterinarians`}</h1>\r\n            <div className=\"btn\" style={{ fontSize: px(24), height: px(45) }}>+ New Vet</div>\r\n          </div>\r\n\r\n          <div className=\"search\">\r\n            <div className=\"searchL\">\r\n              <input\r\n                type=\"text\"\r\n                style={{ paddingLeft: px(25), height: px(34) }}\r\n                placeholder=\"&#xe62c; Search \"\r\n                value={this.state.searchText}\r\n                onChange={(text) => {\r\n                  this.inputChange(text)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"searchr\" style={{ fontSize: px(18), height: px(40) }}>\r\n              Search\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\"lists\">\r\n            {/* <div className=\"listsL\"> */}\r\n            {this.list()}\r\n            {/* </div> */}\r\n\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <MyModal visible={this.state.loading} />\r\n\r\n        <MyModal\r\n          visible={this.state.clickVet}\r\n          element={\r\n            <div className='vetInfo'>\r\n\r\n              <div className=\"info\" >\r\n                <div className=\"close\" style={{ height: px(50) }}>\r\n                  <img\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    src={close} style={{ width: px(20) }} />\r\n                </div>\r\n                {this._petSpecies()}\r\n                {this._petName()}\r\n                {this._phone()}\r\n              </div>\r\n              <div className=\"fotBtn\">\r\n                <div className=\"text\">\r\n                  <a\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      this.setState({\r\n                        clickVet: false\r\n                      })\r\n                    }}\r\n\r\n                    href=\"#\">Delete </a>\r\n                  &nbsp;<p>{` ${this.state.name} from Workplace`}</p>\r\n                </div>\r\n                <div className=\"btn\"\r\n                  style={{ marginTop: px(10) }}\r\n                  onClick={this.changeUserInfo}\r\n\r\n                >Save </div>\r\n\r\n              </div>\r\n            </div>\r\n          }\r\n        />\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\actions\\petAction.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\swabPetEar\\index.jsx",["1283","1284","1285","1286","1287"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport DogLeftEar from \"../../../../assets/img/DogLeftEar.png\";\nimport DogRightEar from \"../../../../assets/img/DogRightEar.png\";\nimport CatLeftEar from \"../../../../assets/img/CatLeftEar.png\";\nimport CatRightEar from \"../../../../assets/img/CatRightEar.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\n\nconst SwabPetEar = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  let {\n    petSpeciesBreedId,\n  } = petMessage;\n  const [value, setValue] = useState(1);\n\n  const onChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const imagetypeEvent = () => {\n    if (value === 1) {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatRightEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogRightEar} alt=\"\" />;\n      } else {\n        return <img src={DogRightEar} alt=\"\" />;\n      }\n    } else {\n      if (petSpeciesBreedId === 11001 || _.inRange(petSpeciesBreedId, 1, 136)) {\n        return <img src={CatLeftEar} alt=\"\" />;\n      } else if (petSpeciesBreedId === 12001 || _.inRange(petSpeciesBreedId, 136, 456)) {\n        return <img src={DogLeftEar} alt=\"\" />;\n      } else {\n        return <img src={DogLeftEar} alt=\"\" />;\n      }\n    }\n  }\n\n  const onClick = () => {\n    if (value === 1) {\n      setValue(2);\n    } else {\n      cutPageType('experimentalPage');\n    }\n  }\n\n  // useEffect(() => {\n  //   imagetypeEvent();\n  // },[value])\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Swab Pet's Ear\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {imagetypeEvent()}\n      </div>\n      <div className=\"radioBox\">\n        <Radio.Group onChange={onChange} value={value}>\n          <Radio value={1}>Right Ear</Radio>\n          <Radio value={2}>Left Ear</Radio>\n        </Radio.Group>\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>Next</Button>\n      </div>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(SwabPetEar);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\index.jsx",["1288","1289"],"import React, { useEffect, useState } from \"react\";\nimport { Layout } from \"antd\";\nimport LinkEquipment from \"./components/linkEquipment\";\nimport SwabPetEar from \"./components/swabPetEar\";\nimport ExperimentalPage from \"./components/experimental\";\nimport TimerPage from \"./components/timer\";\nimport HeaderItem from \"./../temperaturePage/components/headerItem\";\nimport { px } from \"../../utils/px\";\nimport _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../store/actions\";\nimport \"./index.less\";\nconst { Content, Header } = Layout;\nconst OtterEQPage = ({ petMessage, hardwareMessage }) => {\n\n  const [cutPageType, setCutPageType] = useState('linkPage');\n\n  const changePage = () => {\n    switch (cutPageType) {\n      case \"linkPage\":\n        return <LinkEquipment cutPageType={getCutPageType} />;\n      case \"swabPetEarPage\":\n        return <SwabPetEar cutPageType={getCutPageType} />;\n      case \"experimentalPage\":\n        return <ExperimentalPage cutPageType={getCutPageType} />;\n      case \"timerPage\":\n        return <TimerPage cutPageType={getCutPageType} />;\n      default:\n        break;\n    }\n  };\n\n  const getCutPageType = (type) => {\n    console.log('type: ', type);\n    if (!_.isEmpty(type)) {\n      setCutPageType(type);\n    }\n  }\n\n  return (\n    <Layout className=\"ottterEQBox\">\n      <div style={{ height: px(100), background: \"#fff\", position: 'relative' }}>\n        <div style={{ height: '100%' }}>\n          <HeaderItem />\n        </div>\n      </div>\n      {_.isEmpty(petMessage) ? (\n        <div className=\"chackPatientBox\">\n          <p className=\"chackPatientTitle\">Select a patient</p>\n        </div>\n      ) : (\n        <Content className={\"otterEQcontent\"}>\n          {changePage()}\n        </Content>\n      )}\n    </Layout>\n  );\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(OtterEQPage);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\experimental\\index.jsx",["1290","1291","1292","1293","1294","1295","1296"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Layout, Button, Input, Radio } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport swirl from \"../../../../assets/img/swirl.png\";\nimport BreakSeal from \"../../../../assets/img/Break-Seal.png\";\nimport label from \"../../../../assets/img/label.png\";\nimport Incubator from \"../../../../assets/img/Incubator.png\";\n\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst ExperimentalPage = ({ petMessage, hardwareMessage ,cutPageType}) => {\n  const [value, setValue] = useState(1);\n\n  const cutTitle = () => {\n    switch (value) {\n      case 1:\n        return (<>{`${'Swirl sample in'}`}<br />{`${'solution'}`}</>);\n      case 2:\n        return (<>{`${'Break off stem and'}`}<br />{`${'seal collection tube'}`} </>);\n      case 3:\n        return (<>{`${'Affix label to'}`}<br />{`${'collection tube'}`} </>);\n      case 4:\n        return (<>{`${'Place tube in'}`}<br />{`${'incubator'}`} </>);\n      default:\n        break;\n    }\n  }\n\n  const cutImage = () => {\n    switch (value) {\n      case 1:\n        return <img src={swirl} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 2:\n        return <img src={BreakSeal} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 3:\n        return <img src={label} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      case 4:\n        return <img src={Incubator} alt=\"\" style={{ width: px(328), height: px(287) }} />;\n      default:\n        break;\n    }\n  }\n\n  const onClick = () => {\n    if (value !== 4) {\n      setValue(value + 1)\n    } else {\n      cutPageType('timerPage');\n    }\n  }\n\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          {cutTitle()}\n        </p>\n      </div>\n      <div className=\"imageBox\">\n        {cutImage()}\n      </div>\n      <div className=\"bottomBox\">\n        <Button type=\"primary\" shape=\"round\" style={{ width: px(400), height: px(40) }} onClick={onClick}>{value !== 4 ? 'Next' : 'Start Timer'}</Button>\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(ExperimentalPage);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\otterEQ\\components\\timer\\index.jsx",["1297","1298","1299","1300","1301"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Progress } from \"antd\";\nimport { px } from \"../../../../utils/px\";\nimport { connect } from \"react-redux\";\nimport {\n  selectHardwareModalShowFun,\n  petSortTypeFun,\n  petDetailInfoFun,\n} from \"../../../../store/actions\";\n\nimport moment from \"moment\";\nimport _ from \"lodash\";\nimport \"./index.less\";\n\nconst TimerPage = ({ petMessage, hardwareMessage, cutPageType }) => {\n  return (\n    <>\n      <div className=\"topBox\">\n        <p className=\"topTitle\" style={{ fontSize: px(40) }}>\n          Results Processing\n        </p>\n      </div>\n      <div className=\"middleBox\" style={{margin:px(-100)}}>\n        <p className=\"middleTitle\" style={{ fontSize: px(30) }}>\n          Please wait for\n          <br />\n          accurate results\n        </p>\n      </div>\n      <div>\n        <Progress type=\"circle\" percent={60} format={() => '06:01:59'} width={270} strokeWidth={12} />\n      </div>\n    </>\n  );\n\n};\n\nexport default connect(\n  (state) => ({\n    petMessage: state.petReduce.petDetailInfo,\n    hardwareMessage: state.hardwareReduce,\n  }),\n  {\n    selectHardwareModalShowFun,\n    petSortTypeFun,\n    petDetailInfoFun,\n  }\n)(TimerPage);\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\components\\ezyVetSelectExam\\EzyVetSelectExam.js",["1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315"],"//这里主要是直接从ezyVet获取数据\r\n//这是ezyVet的选择界面，后期集成时候别忘了identity，进入测量界面的身份，是vetspire、ezyvet、普通医生\r\nimport React, { Component } from 'react'\r\nimport {\r\n  Table,\r\n  Input,\r\n  Button,\r\n  Space,\r\n  message\r\n\r\n} from 'antd';\r\nimport moment from 'moment'\r\n//import 'antd/dist/antd.css';\r\nimport { SyncOutlined } from '@ant-design/icons';\r\nimport MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\nimport './ezyVetSelectExam.less'\r\n\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { FetchEszVet } from '../../utils/FetchEszVet'\r\nimport { fetchRequest2 } from '../../utils/FetchUtil2'\r\nimport gender from './../../utils/gender'\r\n\r\nlet storage = window.localStorage;\r\n\r\n\r\nexport default class EzyVetSelectExam extends Component {\r\n  state = {\r\n    loading: false,\r\n    api: '',\r\n    id: '',  //选择location的id\r\n    locations: [],\r\n    data: [],\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    seleceID: '',  //宠物医生id\r\n    spin: false,   //刷新按钮是否旋转\r\n    unixToURI: '',\r\n    ezyVetToken: '',\r\n    current: 1\r\n  }\r\n  componentWillMount () {\r\n    try {\r\n      if ((this.props.location.listDate)) {\r\n        console.log('------------', this.props.location);\r\n        let data = JSON.parse(this.props.location.listDate)\r\n        this.setState({\r\n          data,\r\n          current: parseInt(this.props.location.defaultCurrent)\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  componentDidMount () {\r\n    let ipcRenderer = window.electron.ipcRenderer\r\n    if (window.screen.height < 950) {\r\n      ipcRenderer.send('table')\r\n    } else {\r\n      ipcRenderer.send('big')\r\n    }\r\n    storage.identity = '2'\r\n    if (storage.unixToURI !== '' && storage.unixToURI !== undefined) {\r\n      this.setState({\r\n        unixToURI: storage.unixToURI\r\n      })\r\n    }\r\n\r\n    if (storage.ezyVetToken !== '' && storage.ezyVetToken !== undefined) {\r\n      this.setState({\r\n        ezyVetToken: storage.ezyVetToken\r\n      })\r\n    }\r\n\r\n\r\n\r\n    if ((this.props.location.listDate)) {\r\n      console.log('------------', this.props.location);\r\n      let data = JSON.parse(this.props.location.listDate)\r\n      this.setState({\r\n        data,\r\n        current: parseInt(this.props.location.defaultCurrent)\r\n      })\r\n    } else {\r\n      this._getExam()\r\n    }\r\n\r\n\r\n\r\n  }\r\n  componentWillUnmount () {\r\n    message.destroy()\r\n  }\r\n\r\n  _getExam = async () => {\r\n    console.log('进来了');\r\n    this.setState({\r\n      loading: true\r\n    })\r\n    console.log(storage.unixToURI, '------------', storage.ezyVetToken);\r\n    let params = {\r\n      limit: '100',\r\n      timestamp: storage.unixToURI\r\n    }\r\n\r\n    //1.获取病历单号但是缺少宠物信息\r\n    let url = `/healthstatus?limit=100&timestamp=${storage.unixToURI}`\r\n    if (storage.selectPatientId) {\r\n      url += `&animal_id=${storage.selectPatientId}`\r\n    }\r\n    FetchEszVet(url, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n      .then(res => {\r\n        console.log('------------------------------res', res);\r\n        if (res.messages.length === 0) {\r\n          let examArr = res.items\r\n          console.log('examArr', examArr);\r\n          let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n          for (let i = 0; i < examArr.length; i++) {\r\n            if (examArr[i].healthstatus.active !== '1') {\r\n              console.log(examArr[i]);\r\n              continue\r\n            }\r\n            let { animal_id, consult_id, created_at, id, timestamp, modified_at, heart_rate, notes, weight } = examArr[i].healthstatus\r\n            if (weight) {\r\n              weight = parseFloat(weight).toFixed(1)\r\n              weight += ' kg'\r\n            } else {\r\n              weight = 'unknown'\r\n            }\r\n\r\n            let json = {\r\n              animal_id,\r\n              consult_id,\r\n              insertedAt: timestamp,\r\n              key: id,\r\n              created_at,\r\n              heart_rate, notes,\r\n              modified_at,\r\n              weight\r\n            }\r\n\r\n            healthStatusArr.push(json)\r\n            if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n              animalIdArr.push(parseInt(animal_id))\r\n            }\r\n          }\r\n\r\n          console.log(healthStatusArr, animalIdArr);\r\n          let animal = `{\"in\":[${animalIdArr}]}`\r\n          let uri = encodeURIComponent(animal)\r\n          console.log('宠物id集合：', uri)\r\n          //2.获取宠物信息\r\n          FetchEszVet(`/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n            .then(res => {\r\n              console.log('获取到的宠物信息1:', res, `Bearer ${storage.ezyVetToken}`);\r\n              if (res.messages.length === 0) {\r\n\r\n                let animalArr = res.items\r\n                let animalInfoArr = []\r\n                let breedIdArr = [], contactIDArr = []\r\n\r\n                for (let i = 0; i < animalArr.length; i++) {\r\n                  let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, animalcolour_id, guid,\r\n                    referring_clinic_id, referring_vet_id, residence_contact_id, species_id, created_at, modified_at, notes } = animalArr[i].animal\r\n                  let animalInfo = {\r\n                    breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, animalcolour_id, guid,\r\n                    referring_clinic_id, referring_vet_id, residence_contact_id, species_id, created_at, modified_at, notes\r\n                  }\r\n                  if (breedIdArr.indexOf(breed_id) === -1) {\r\n                    breedIdArr.push(breed_id)\r\n                  }\r\n                  if (contactIDArr.indexOf(contact_id) === -1) {\r\n                    contactIDArr.push(contact_id)\r\n                  }\r\n                  animalInfoArr.push(animalInfo)\r\n\r\n                }\r\n                console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n                //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n                let endArr = healthStatusArr.map((data, index) => {\r\n                  let oneExam = data\r\n\r\n                  for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n                    if (animalInfoArr[i].id === oneExam.animal_id) {\r\n                      let { breed_id, date_of_birth, name, weight, weight_unit, contact_id, sex_id,\r\n\r\n                        bree_id, animalcolour_id, guid,\r\n                        referring_clinic_id, referring_vet_id, residence_contact_id, species_id\r\n\r\n                      } = animalInfoArr[i]\r\n                      let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n                      oneExam.age = age\r\n                      oneExam.breed = breed_id\r\n                      oneExam.gender = gender[sex_id]\r\n                      oneExam.contact_id = contact_id\r\n                      oneExam.petName = name\r\n                      // oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n                      oneExam.weightNum = `${parseInt(weight).toFixed(1)}`\r\n                      oneExam.weight_unit = weight_unit\r\n                      oneExam.animal = animalInfoArr[i]\r\n\r\n                      break\r\n                    }\r\n\r\n                  }\r\n                  return oneExam\r\n                })\r\n\r\n                console.log('融合后', endArr);\r\n                let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n                let contactIDUri = encodeURIComponent(contactIDStr)\r\n                console.log(contactIDStr);\r\n\r\n                let getContactArr = []\r\n                //4. 获取宠物主人信息\r\n                FetchEszVet(`/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n                  .then(res => {\r\n                    console.log('-------宠物主人信息：', res);\r\n                    if (res.messages.length === 0) {\r\n                      let items = res.items\r\n                      for (let i = 0; i < items.length; i++) {\r\n\r\n                        const { first_name, last_name, id, address_physical, address_postal, business_name, code, contact_detail_list, created_at,\r\n                          is_business, is_customer, is_staff_member, is_supplier, is_syndicate, is_vet, modified_at, ownership_id } = items[i].contact\r\n                        let name = ''\r\n                        if (first_name === '' && last_name === '') {\r\n                          name = 'unknown'\r\n                        } else {\r\n                          name = `${last_name} ${first_name}`\r\n                        }\r\n                        let json = {\r\n                          name,\r\n                          id,\r\n                          first_name, last_name, address_physical, address_postal, business_name, code, contact_detail_list, created_at,\r\n                          is_business, is_customer, is_staff_member, is_supplier, is_syndicate, is_vet, modified_at, ownership_id\r\n                        }\r\n                        getContactArr.push(json)\r\n                      }\r\n\r\n                      console.log('endArr', endArr);\r\n                      //5.把宠物信息并到病历单-----缺少品种\r\n                      let dataArr = endArr.map((data) => {\r\n                        let oneExam = data\r\n                        for (let i = 0; i < getContactArr.length; i++) {\r\n                          if (getContactArr[i].id === oneExam.contact_id) {\r\n                            let { name } = getContactArr[i]\r\n                            oneExam.owner = name\r\n                            oneExam.contact = getContactArr[i]\r\n                          }\r\n\r\n                        }\r\n                        return oneExam\r\n                      })\r\n                      console.log('添加过主人信息的记录：', dataArr);\r\n\r\n                      //6.获取病历单\r\n                      let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n                      let breedIdUri = encodeURIComponent(breedIdStr)\r\n                      console.log(breedIdUri);\r\n\r\n                      let getbreedIdArr = []\r\n\r\n                      FetchEszVet(`/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n                        .then(res => {\r\n                          console.log('获取到了品种信息', res);\r\n\r\n                          if (res.messages.length === 0) {\r\n\r\n                            let items = res.items\r\n                            for (let i = 0; i < items.length; i++) {\r\n\r\n                              let { name, id, created_at, modified_at, species_id } = items[i].breed\r\n\r\n                              if (name === '') {\r\n                                name = 'unKnown'\r\n                              }\r\n                              let json = {\r\n                                name,\r\n                                id,\r\n                                created_at, modified_at, species_id\r\n                              }\r\n                              getbreedIdArr.push(json)\r\n                            }\r\n\r\n                            console.log('endArr', endArr);\r\n                            //5.把宠物品种并到病历单\r\n                            let endExamArr = dataArr.map((data, index) => {\r\n                              let oneExam = data\r\n\r\n                              for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n                                if (getbreedIdArr[i].id === oneExam.breed) {\r\n                                  let { name } = getbreedIdArr[i]\r\n                                  oneExam.breed = name\r\n                                  oneExam.allBreed = getbreedIdArr[i]\r\n                                }\r\n\r\n                              }\r\n                              return oneExam\r\n                            })\r\n                            console.log('最终合成的数据：', endExamArr);\r\n                            this.setState({\r\n                              data: endExamArr,\r\n                              loading: false,\r\n                              spin: false\r\n                            })\r\n                          }\r\n                        })\r\n                        .catch(err => {\r\n                          console.log(err);\r\n                          this.setState({\r\n                            loading: false,\r\n                            spin: false\r\n                          })\r\n                        })\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                  })\r\n                  .catch(err => {\r\n                    this.setState({\r\n                      loading: false,\r\n                      spin: false\r\n                    })\r\n                    console.log(err);\r\n                  })\r\n\r\n\r\n              }\r\n            })\r\n            .catch(err => {\r\n              this.setState({\r\n                loading: false,\r\n                spin: false\r\n              })\r\n              console.log(err);\r\n            })\r\n\r\n        } else {\r\n          console.log('很有可能是令牌过期了');\r\n          if (res.messages[0].text.indexOf(`Check the \\\"access token\\\" parameter`) !== -1 ||\r\n            res.messages[0].text.indexOf(`The resource owner or authorization server denied the reques`) !== -1) {\r\n            console.log('令牌就是过期了');\r\n            if (storage.ezyVetReLogin) {\r\n              let data = JSON.parse(storage.ezyVetReLogin)\r\n              let { client_id, client_secret, partner_id } = data\r\n              let prams = {\r\n                clientId: client_id,\r\n                clientSecret: client_secret,\r\n                partnerId: partner_id\r\n              }\r\n              let url = '/EzyVet/ezyvetauth'\r\n              fetchRequest2(url, \"GET\", prams)\r\n                .then(res => {\r\n                  console.log('重新获取token', res);\r\n                  if (res.flag === true && res.data) {\r\n                    storage.ezyVetToken = res.data\r\n                    this._getExam()\r\n                  }\r\n                })\r\n                .catch(err => {\r\n                  console.log(err);\r\n                })\r\n            } else {\r\n              // this.props.history.push('ezyVetLogin')\r\n              message.error('The access token is invalid, please obtain it again')\r\n              this.setState({\r\n                loading: false,\r\n                spin: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          loading: false,\r\n          spin: false\r\n        })\r\n        console.log(err);\r\n      })\r\n\r\n  }\r\n\r\n  //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n  ForwardRankingDate = (data, p) => {\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      for (let j = 0; j < data.length - 1 - i; j++) {\r\n        // console.log(Date.parse(data[j][p]));\r\n        if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n          var temp = data[j];\r\n          data[j] = data[j + 1];\r\n          data[j + 1] = temp;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n\r\n  getColumnSearchProps = dataIndex => ({\r\n    //dataIndex 是标题名称\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    //自定义Icon\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n    onFilter: (value, record) => {\r\n      console.log(value, record, dataIndex);\r\n      return record[dataIndex]\r\n        ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n    },\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text =>\r\n      this.state.searchedColumn === dataIndex ? (\r\n        <Highlighter\r\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n          searchWords={[this.state.searchText]}\r\n          autoEscape\r\n          textToHighlight={text ? text.toString() : ''}\r\n        />\r\n      ) : (\r\n        text\r\n      ),\r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n  _refresh = () => {\r\n    console.log('点击了');\r\n    this.setState({\r\n      spin: true\r\n    })\r\n    // this._getData()\r\n    this._getExam()\r\n  }\r\n  render () {\r\n    const columns = [\r\n      {\r\n        title: 'Pet Name',\r\n        dataIndex: 'petName',\r\n        key: 'petName',\r\n        //   width: '30%',\r\n        ...this.getColumnSearchProps('petName'),\r\n      },\r\n      {\r\n        title: 'Owner',\r\n        dataIndex: 'owner',\r\n        key: 'owner',\r\n        //   width: '20%',\r\n        ...this.getColumnSearchProps('owner'),\r\n      },\r\n      {\r\n        title: 'Breed',\r\n        dataIndex: 'breed',\r\n        key: 'breed',\r\n        ...this.getColumnSearchProps('breed'),\r\n      },\r\n\r\n      {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        key: 'gender',\r\n        // width: '30%',\r\n        ...this.getColumnSearchProps('gender'),\r\n      },\r\n      {\r\n        title: 'Age',\r\n        dataIndex: 'age',\r\n        key: 'age',\r\n        // width: '20%',\r\n        render: (text, record, index) => {\r\n          // console.log(text);\r\n\r\n          if (`${text}` === 'NaN') {\r\n            return (\r\n              <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n            )\r\n          } else {\r\n            return (\r\n              <p style={{ textAlign: 'center' }}>{text}</p>\r\n            )\r\n          }\r\n\r\n        }\r\n      },\r\n      {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n        key: 'weight',\r\n        ...this.getColumnSearchProps('weight'),\r\n      },\r\n      {\r\n        title: 'Time',\r\n        dataIndex: 'insertedAt',\r\n        key: 'insertedAt',\r\n        render: (text, record, index) => {\r\n          let chazhi = new Date().getTimezoneOffset()\r\n          // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n          let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n          // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n          return (\r\n            <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n          )\r\n\r\n        }\r\n      },\r\n\r\n    ];\r\n    const { loading, data, api, id, seleceID, spin } = this.state\r\n    return (\r\n\r\n      <div id=\"ezyVetSelectExam\">\r\n        {/* 关闭缩小 */}\r\n        <MaxMin\r\n          onClick={() => { this.props.history.push('/') }}\r\n          onClick1={() => this.props.history.push({ pathname: '/EzyVetSelectTime' })}\r\n        />\r\n\r\n        <div className=\"textfa1\">\r\n          <div className=\"textfa\">\r\n            <div className=\"text\">Select Patient Exam</div>\r\n            <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n          </div>\r\n          <div className=\"r\"\r\n            ref={add => this.add = add}\r\n            onClick={() => {\r\n              let electron = window.electron\r\n              electron.shell.openExternal('https://apisandbox.trial.ezyvet.com/#')\r\n            }}\r\n            onMouseDown={() => {\r\n              this.add.style.color = 'rgba(0,0,0,0.3)'\r\n            }}\r\n            onMouseUp={() => {\r\n              this.add.style.color = 'rgba(0,0,0)'\r\n            }}\r\n          >+</div>\r\n        </div>\r\n\r\n\r\n        <div className=\"table\">\r\n          <Table\r\n            columns={columns}\r\n            dataSource={data}\r\n            loading={loading}\r\n            locale={{ filterConfirm: <div>111</div> }}\r\n            pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true, defaultCurrent: this.state.current }}\r\n            onRow={(record) => {\r\n              return {\r\n                onClick: (event) => {\r\n\r\n                  console.log('record', record);\r\n\r\n                  if (record.consult_id === '') {\r\n                    message.error('This record cannot be updated. Please try another record', 10)\r\n                    return\r\n                  }\r\n\r\n                  let { allBreed, animal, contact } = record\r\n                  let { animalcolour_id, breed_id, contact_id, date_of_birth, guid, id, name, referring_clinic_id, referring_vet_id,\r\n                    residence_contact_id, sex_id, species_id, weight, weight_unit, created_at, modified_at\r\n                  } = animal\r\n                  let { address_physical, address_postal, business_name, contact_detail_list, first_name, is_business, is_customer,\r\n                    is_staff_member, is_supplier, is_syndicate, is_vet, last_name, ownership_id, code, notes\r\n                  } = contact\r\n                  let breed = {}\r\n                  if (allBreed) {\r\n                    breed = {\r\n                      id: allBreed.id,\r\n                      created_at: allBreed.created_at,\r\n                      modified_at: allBreed.modified_at,\r\n                      name: allBreed.name,\r\n                      species_id: allBreed.species_id\r\n                    }\r\n                  }\r\n                  let params = [{\r\n                    id,\r\n                    created_at,\r\n                    modified_at,\r\n                    name,\r\n                    sex_id,\r\n                    animalcolour_id,\r\n                    species_id,\r\n                    breed_id,\r\n                    contact_id,\r\n                    date_of_birth,\r\n                    referring_clinic_id,\r\n                    referring_vet_id,\r\n                    residence_contact_id,\r\n                    weight,\r\n                    weight_unit,\r\n                    notes,\r\n                    guid,\r\n                    sex: '',\r\n                    breed,\r\n                    species: {\r\n                      id: \"\",\r\n                      created_at: \"\",\r\n                      modified_at: \"\",\r\n                      name: \"\",\r\n                      icon: \"\"\r\n                    },\r\n                    contact: {\r\n                      id: contact.id,\r\n                      created_at: contact.created_at,\r\n                      modified_at: contact.modified_at,\r\n                      code,\r\n                      first_name,\r\n                      last_name,\r\n                      business_name,\r\n                      is_business,\r\n                      is_customer,\r\n                      is_supplier,\r\n                      is_vet,\r\n                      is_syndicate,\r\n                      is_staff_member,\r\n                      contact_detail_list,\r\n                      address_physical,\r\n                      address_postal,\r\n                      ownership_id\r\n                    }\r\n                  }]\r\n                  console.log('入参：', params);\r\n                  fetchRequest2('/EzyVet/checkAndSaveAnimalList', 'POST', params)\r\n                    .then(res => {\r\n                      console.log('====', res);\r\n                      if (res.flag === true) {\r\n                        storage.ezyVetSelectHealthstatus = JSON.stringify(record)\r\n                        storage.ezyVetList = JSON.stringify(this.state.data)\r\n                        let selectNum = document.getElementsByClassName('ant-pagination-item-active')\r\n\r\n                        storage.defaultCurrent = selectNum[0].title\r\n\r\n                        // this.props.history.push({ pathname: '/page10', })\r\n                        if (storage.isClinical === 'true') {\r\n                          this.props.history.push({ pathname: '/page8', identity: storage.identity, patientId: record.animal_id })\r\n                        } else {\r\n                          this.props.history.push({ pathname: '/page10', })\r\n                        }\r\n                      }\r\n                    })\r\n                    .catch(err => {\r\n                      console.log(err);\r\n                    })\r\n                }, // 点击行\r\n\r\n              };\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//下面这一块是通过后台获取到exam且进行集成\r\n// import React, { Component } from 'react'\r\n// import {\r\n//   Table,\r\n//   Input,\r\n//   Button,\r\n//   Space,\r\n//   message\r\n\r\n// } from 'antd';\r\n// import moment from 'moment'\r\n// //import 'antd/dist/antd.css';\r\n// import { SyncOutlined } from '@ant-design/icons';\r\n// import MaxMin from '../../utils/maxminreturn/MaxMinReturn'\r\n// import './ezyVetSelectExam.less'\r\n\r\n// import Highlighter from 'react-highlight-words';\r\n// import { SearchOutlined } from '@ant-design/icons';\r\n// import { FetchEszVet } from '../../utils/FetchEszVet'\r\n// import { fetchToken } from '../../utils/Fetch_token'\r\n// import gender from './../../utils/gender'\r\n\r\n// let storage = window.localStorage;\r\n\r\n\r\n// export default class EzyVetSelectExam extends Component {\r\n//   state = {\r\n//     loading: false,\r\n//     api: '',\r\n//     id: '',  //选择location的id\r\n//     locations: [],\r\n//     data: [],\r\n//     searchText: '',\r\n//     searchedColumn: '',\r\n//     seleceID: '',  //宠物医生id\r\n//     spin: false,   //刷新按钮是否旋转\r\n\r\n\r\n\r\n//     unixToURI: '',\r\n//     ezyVetToken: ''\r\n//   }\r\n\r\n//   componentDidMount () {\r\n//     let ipcRenderer = window.electron.ipcRenderer\r\n//     ipcRenderer.send('big')\r\n//     if (storage.unixToURI !== '' && storage.unixToURI !== undefined) {\r\n//       this.setState({\r\n//         unixToURI: storage.unixToURI\r\n//       })\r\n//     }\r\n\r\n//     if (storage.ezyVetToken !== '' && storage.ezyVetToken !== undefined) {\r\n//       this.setState({\r\n//         ezyVetToken: storage.ezyVetToken\r\n//       })\r\n//     }\r\n\r\n//     this._getExam()\r\n\r\n//   }\r\n//   componentWillUnmount () {\r\n//     message.destroy()\r\n//   }\r\n\r\n//   _getExam = async () => {\r\n//     console.log('进来了');\r\n//     this.setState({\r\n//       loading: true\r\n//     })\r\n//     console.log(storage.unixToURI, '------------', storage.ezyVetToken);\r\n//     let params = {\r\n//       limit: '100',\r\n//       timestamp: storage.unixToURI\r\n//     }\r\n\r\n//     //1.获取病历单号但是缺少宠物信息\r\n//     fetchToken(`/EzyVet/healthstatus`, \"GET\", params, `Bearer ${storage.ezyVetToken}`)\r\n//       .then(res => {\r\n//         console.log('res', res);\r\n//         if (res.msg === 'success') {\r\n//           let examArr = res.data.items\r\n//           console.log(examArr);\r\n//           let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n//           for (let i = 0; i < examArr.length; i++) {\r\n//             let { animal_id, consult_id, created_at, id, timestamp, modified_at } = examArr[i]\r\n\r\n//             let json = {\r\n//               animal_id,\r\n//               consult_id,\r\n//               insertedAt: timestamp,\r\n//               key: id\r\n//             }\r\n//             healthStatusArr.push(json)\r\n//             if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n//               animalIdArr.push(parseInt(animal_id))\r\n//             }\r\n//           }\r\n\r\n//           console.log(healthStatusArr, animalIdArr);\r\n//           let animal = `{\"in\":[${animalIdArr}]}`\r\n//           let uri = encodeURIComponent(animal)\r\n//           console.log('宠物id集合：', uri)\r\n//           //2.获取宠物信息\r\n//           fetchToken(`/EzyVet/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//             .then(res => {\r\n//               console.log('获取到的宠物信息:', res, `Bearer ${storage.ezyVetToken}`);\r\n//               if (res.msg === 'success') {\r\n\r\n//                 let animalArr = res.data.items\r\n//                 let animalInfoArr = []\r\n//                 let breedIdArr = [], contactIDArr = []\r\n\r\n//                 for (let i = 0; i < animalArr.length; i++) {\r\n//                   let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalArr[i]\r\n//                   let animalInfo = {\r\n//                     breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id\r\n//                   }\r\n//                   if (breedIdArr.indexOf(breed_id) === -1) {\r\n//                     breedIdArr.push(breed_id)\r\n//                   }\r\n//                   if (contactIDArr.indexOf(contact_id) === -1) {\r\n//                     contactIDArr.push(contact_id)\r\n//                   }\r\n\r\n//                   animalInfoArr.push(animalInfo)\r\n\r\n//                 }\r\n//                 console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n//                 //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n//                 let endArr = healthStatusArr.map((data, index) => {\r\n//                   let oneExam = data\r\n\r\n//                   for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n//                     if (animalInfoArr[i].id === oneExam.animal_id) {\r\n//                       let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalInfoArr[i]\r\n//                       let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n//                       oneExam.age = age\r\n//                       oneExam.breed = breed_id\r\n//                       oneExam.gender = gender[sex_id]\r\n//                       oneExam.contact_id = contact_id\r\n//                       oneExam.petName = name\r\n//                       oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n//                       break\r\n//                     }\r\n\r\n//                   }\r\n//                   return oneExam\r\n//                 })\r\n\r\n//                 console.log('融合后', endArr);\r\n//                 let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n//                 let contactIDUri = encodeURIComponent(contactIDStr)\r\n//                 console.log(contactIDStr);\r\n\r\n//                 let getContactArr = []\r\n//                 //4. 获取宠物主人信息\r\n//                 fetchToken(`/EzyVet/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//                   .then(res => {\r\n//                     console.log('-------宠物主人信息：', res);\r\n//                     if (res.msg === 'success') {\r\n//                       let items = res.data\r\n//                       for (let i = 0; i < items.length; i++) {\r\n\r\n//                         const { first_name, last_name, id } = items[i]\r\n//                         let name = ''\r\n//                         if (first_name === '' && last_name === '') {\r\n//                           name = 'UnKnown'\r\n//                         } else {\r\n//                           name = `${last_name} ${first_name}`\r\n//                         }\r\n//                         let json = {\r\n//                           name,\r\n//                           id\r\n//                         }\r\n//                         getContactArr.push(json)\r\n//                       }\r\n\r\n//                       console.log('endArr', endArr);\r\n//                       //5.把宠物信息并到病历单-----缺少品种\r\n//                       let dataArr = endArr.map((data) => {\r\n//                         let oneExam = data\r\n//                         for (let i = 0; i < getContactArr.length; i++) {\r\n//                           if (getContactArr[i].id === oneExam.contact_id) {\r\n//                             let { name } = getContactArr[i]\r\n//                             oneExam.owner = name\r\n//                           }\r\n\r\n//                         }\r\n//                         return oneExam\r\n//                       })\r\n\r\n\r\n//                       //6.获取病历单\r\n//                       let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n//                       let breedIdUri = encodeURIComponent(breedIdStr)\r\n//                       console.log(breedIdUri);\r\n\r\n//                       let getbreedIdArr = []\r\n\r\n//                       fetchToken(`/EzyVet/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//                         .then(res => {\r\n//                           console.log('获取到了品种信息', res);\r\n\r\n\r\n\r\n//                           let items = res.data\r\n//                           for (let i = 0; i < items.length; i++) {\r\n\r\n//                             const { name, id } = items[i]\r\n\r\n//                             if (name === '') {\r\n//                               name = 'UnKnown'\r\n//                             }\r\n//                             let json = {\r\n//                               name,\r\n//                               id\r\n//                             }\r\n//                             getbreedIdArr.push(json)\r\n//                           }\r\n\r\n//                           console.log('endArr', endArr);\r\n//                           //5.把宠物品种并到病历单\r\n//                           let endExamArr = dataArr.map((data, index) => {\r\n//                             let oneExam = data\r\n\r\n//                             for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n//                               if (getbreedIdArr[i].id === oneExam.breed) {\r\n//                                 let { name } = getbreedIdArr[i]\r\n//                                 oneExam.breed = name\r\n//                               }\r\n\r\n//                             }\r\n//                             return oneExam\r\n//                           })\r\n//                           this.setState({\r\n//                             data: endExamArr,\r\n//                             loading: false,\r\n//                             spin: false\r\n//                           })\r\n//                         })\r\n//                         .catch(err => {\r\n//                           console.log(err);\r\n//                           this.setState({\r\n//                             loading: false,\r\n//                             spin: false\r\n//                           })\r\n//                         })\r\n\r\n\r\n\r\n\r\n//                     }\r\n\r\n//                   })\r\n//                   .catch(err => {\r\n//                     this.setState({\r\n//                       loading: false,\r\n//                       spin: false\r\n//                     })\r\n//                     console.log(err);\r\n//                   })\r\n\r\n\r\n//               }\r\n//             })\r\n//             .catch(err => {\r\n//               this.setState({\r\n//                 loading: false,\r\n//                 spin: false\r\n//               })\r\n//               console.log(err);\r\n//             })\r\n\r\n//         }\r\n//       })\r\n//       .catch(err => {\r\n//         this.setState({\r\n//           loading: false,\r\n//           spin: false\r\n//         })\r\n//         console.log(err);\r\n//       })\r\n\r\n\r\n\r\n//     // FetchEszVet(`/healthstatus?limit=100&timestamp=${storage.unixToURI}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //   .then(res => {\r\n//     //     console.log(res);\r\n//     //     let examArr = res.items\r\n//     //     console.log(examArr);\r\n//     //     let healthStatusArr = [], animalIdArr = []\r\n\r\n\r\n//     //     for (let i = 0; i < examArr.length; i++) {\r\n//     //       let { animal_id, consult_id, created_at, id, timestamp, modified_at } = examArr[i].healthstatus\r\n\r\n//     //       let json = {\r\n//     //         animal_id,\r\n//     //         consult_id,\r\n//     //         insertedAt: timestamp,\r\n//     //         key: id\r\n//     //       }\r\n//     //       healthStatusArr.push(json)\r\n//     //       if (animalIdArr.indexOf(parseInt(animal_id)) === -1) {\r\n//     //         animalIdArr.push(parseInt(animal_id))\r\n//     //       }\r\n//     //     }\r\n\r\n//     //     console.log(healthStatusArr, animalIdArr);\r\n//     //     let animal = `{\"in\":[${animalIdArr}]}`\r\n//     //     // console.log(animal);\r\n//     //     let uri = encodeURIComponent(animal)\r\n//     //     //2.获取宠物信息\r\n//     //     FetchEszVet(`/animal?id=${uri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //       .then(res => {\r\n//     //         console.log('宠物信息', res);\r\n//     //         let animalArr = res.items\r\n//     //         let animalInfoArr = []\r\n//     //         let breedIdArr = [], contactIDArr = []\r\n\r\n//     //         for (let i = 0; i < animalArr.length; i++) {\r\n//     //           let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalArr[i].animal\r\n//     //           let animalInfo = {\r\n//     //             breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id\r\n//     //           }\r\n//     //           if (breedIdArr.indexOf(breed_id) === -1) {\r\n//     //             breedIdArr.push(breed_id)\r\n//     //           }\r\n//     //           if (contactIDArr.indexOf(contact_id) === -1) {\r\n//     //             contactIDArr.push(contact_id)\r\n//     //           }\r\n\r\n//     //           animalInfoArr.push(animalInfo)\r\n\r\n//     //         }\r\n//     //         console.log('我拿到了宠物的信息', animalInfoArr, '品种id集合', breedIdArr, '宠物主人id集合', contactIDArr);\r\n//     //         //3.遍历记录数组，把宠物信息添加到病历单-缺少宠物主人信息与品种\r\n//     //         let endArr = healthStatusArr.map((data, index) => {\r\n//     //           let oneExam = data\r\n\r\n//     //           for (let i = 0; i < animalInfoArr.length; i++) {\r\n\r\n//     //             if (animalInfoArr[i].id === oneExam.animal_id) {\r\n//     //               let { breed_id, date_of_birth, id, name, weight, weight_unit, contact_id, sex_id, } = animalInfoArr[i]\r\n//     //               let age = moment().diff(moment(parseInt(date_of_birth) * 1000), 'years')\r\n//     //               oneExam.age = age\r\n//     //               oneExam.breed = breed_id\r\n//     //               oneExam.gender = gender[sex_id]\r\n//     //               oneExam.contact_id = contact_id\r\n//     //               oneExam.petName = name\r\n//     //               oneExam.weight = `${parseInt(weight).toFixed(1)} ${weight_unit}`\r\n//     //               break\r\n//     //             }\r\n\r\n//     //           }\r\n//     //           return oneExam\r\n//     //         })\r\n\r\n//     //         console.log(endArr);\r\n//     //         let contactIDStr = `{\"in\":[${contactIDArr}]}`\r\n\r\n//     //         let contactIDUri = encodeURIComponent(contactIDStr)\r\n//     //         console.log(contactIDStr);\r\n\r\n//     //         let getContactArr = []\r\n//     //         //4. 获取宠物信息\r\n//     //         FetchEszVet(`/contact?id=${contactIDUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //           .then(res => {\r\n//     //             console.log('-------宠物主人信息：', res);\r\n//     //             let items = res.items\r\n//     //             for (let i = 0; i < items.length; i++) {\r\n\r\n//     //               const { first_name, last_name, id } = items[i].contact\r\n//     //               let name = ''\r\n//     //               if (first_name === '' && last_name === '') {\r\n//     //                 name = 'UnKnown'\r\n//     //               } else {\r\n//     //                 name = `${last_name} ${first_name}`\r\n//     //               }\r\n//     //               let json = {\r\n//     //                 name,\r\n//     //                 id\r\n//     //               }\r\n//     //               getContactArr.push(json)\r\n//     //             }\r\n\r\n//     //             console.log('endArr', endArr);\r\n//     //             //5.把宠物信息并到病历单-----缺少品种\r\n//     //             let dataArr = endArr.map((data) => {\r\n//     //               let oneExam = data\r\n//     //               for (let i = 0; i < getContactArr.length; i++) {\r\n//     //                 if (getContactArr[i].id === oneExam.contact_id) {\r\n//     //                   let { name } = getContactArr[i]\r\n//     //                   oneExam.owner = name\r\n//     //                 }\r\n\r\n//     //               }\r\n//     //               return oneExam\r\n//     //             })\r\n\r\n\r\n//     //             //6.获取病历单\r\n//     //             let breedIdStr = `{\"in\":[${breedIdArr}]}`\r\n\r\n//     //             let breedIdUri = encodeURIComponent(breedIdStr)\r\n//     //             console.log(breedIdUri);\r\n\r\n//     //             let getbreedIdArr = []\r\n\r\n//     //             FetchEszVet(`/breed?id=${breedIdUri}`, \"GET\", '', `Bearer ${storage.ezyVetToken}`)\r\n//     //               .then(res => {\r\n//     //                 console.log('获取到了品种信息', res);\r\n\r\n\r\n\r\n//     //                 let items = res.items\r\n//     //                 for (let i = 0; i < items.length; i++) {\r\n\r\n//     //                   const { name, id } = items[i].breed\r\n\r\n//     //                   if (name === '') {\r\n//     //                     name = 'UnKnown'\r\n//     //                   }\r\n//     //                   let json = {\r\n//     //                     name,\r\n//     //                     id\r\n//     //                   }\r\n//     //                   getbreedIdArr.push(json)\r\n//     //                 }\r\n\r\n//     //                 console.log('endArr', endArr);\r\n//     //                 //5.把宠物品种并到病历单\r\n//     //                 let endExamArr = dataArr.map((data, index) => {\r\n//     //                   let oneExam = data\r\n\r\n//     //                   for (let i = 0; i < getbreedIdArr.length; i++) {\r\n\r\n//     //                     if (getbreedIdArr[i].id === oneExam.breed) {\r\n//     //                       let { name } = getbreedIdArr[i]\r\n//     //                       oneExam.breed = name\r\n//     //                     }\r\n\r\n//     //                   }\r\n//     //                   return oneExam\r\n//     //                 })\r\n//     //                 this.setState({\r\n//     //                   data: endExamArr,\r\n//     //                   loading: false,\r\n//     //                   spin: false\r\n//     //                 })\r\n//     //               })\r\n//     //               .catch(err => {\r\n//     //                 console.log(err);\r\n//     //                 this.setState({\r\n//     //                   loading: false,\r\n//     //                   spin: false\r\n//     //                 })\r\n//     //               })\r\n\r\n//     //           })\r\n//     //           .catch(err => {\r\n//     //             console.log(err);\r\n//     //             this.setState({\r\n//     //               loading: false,\r\n//     //               spin: false\r\n//     //             })\r\n//     //           })\r\n\r\n\r\n\r\n//     //       })\r\n//     //       .catch(err => {\r\n//     //         this.setState({\r\n//     //           loading: false,\r\n//     //           spin: false\r\n//     //         })\r\n//     //         console.log(err);\r\n//     //       })\r\n\r\n\r\n//     //   })\r\n//     //   .catch(err => {\r\n//     //     console.log(err);\r\n//     //     this.setState({\r\n//     //       loading: false,\r\n//     //       spin: false\r\n//     //     })\r\n//     //   })\r\n\r\n//   }\r\n\r\n//   //封装的日期排序方法<div className=\" ForwardRankingDate(data, p) {\r\n//   ForwardRankingDate = (data, p) => {\r\n//     for (let i = 0; i < data.length - 1; i++) {\r\n//       for (let j = 0; j < data.length - 1 - i; j++) {\r\n//         // console.log(Date.parse(data[j][p]));\r\n//         if (Date.parse(data[j][p]) < Date.parse(data[j + 1][p])) {\r\n//           var temp = data[j];\r\n//           data[j] = data[j + 1];\r\n//           data[j + 1] = temp;\r\n//         }\r\n//       }\r\n//     }\r\n//     return data;\r\n//   }\r\n\r\n\r\n//   getColumnSearchProps = dataIndex => ({\r\n//     //dataIndex 是标题名称\r\n//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => ( //通过 filterDropdown 自定义的列筛选功能，并实现一个搜索列的示例。\r\n//       <div style={{ padding: 8 }}>\r\n//         <Input\r\n//           ref={node => {\r\n//             this.searchInput = node;\r\n//           }}\r\n//           placeholder={`Search ${dataIndex}`}\r\n//           value={selectedKeys[0]}\r\n//           onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n//           onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n//           style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n//         />\r\n//         <Space>\r\n//           <Button\r\n//             type=\"primary\"\r\n//             onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n//             icon={<SearchOutlined />}\r\n//             size=\"small\"\r\n//             style={{ width: 90 }}\r\n//           >\r\n//             Search\r\n//           </Button>\r\n//           <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n//             Reset\r\n//           </Button>\r\n//         </Space>\r\n//       </div>\r\n//     ),\r\n//     //自定义Icon\r\n//     filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n//     //\t本地模式下，确定筛选的运行函数 value:输入框里输入的内容     record:所有的项，相当于遍历\r\n//     onFilter: (value, record) => {\r\n//       console.log(value, record, dataIndex);\r\n//       return record[dataIndex]\r\n//         ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n//         : ''\r\n//     },\r\n//     onFilterDropdownVisibleChange: visible => {\r\n//       if (visible) {\r\n//         setTimeout(() => this.searchInput.select(), 100);\r\n//       }\r\n//     },\r\n//     render: text =>\r\n//       this.state.searchedColumn === dataIndex ? (\r\n//         <Highlighter\r\n//           highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n//           searchWords={[this.state.searchText]}\r\n//           autoEscape\r\n//           textToHighlight={text ? text.toString() : ''}\r\n//         />\r\n//       ) : (\r\n//         text\r\n//       ),\r\n//   });\r\n\r\n//   handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n//     confirm();\r\n//     this.setState({\r\n//       searchText: selectedKeys[0],\r\n//       searchedColumn: dataIndex,\r\n//     });\r\n//   };\r\n\r\n//   handleReset = clearFilters => {\r\n//     clearFilters();\r\n//     this.setState({ searchText: '' });\r\n//   };\r\n//   _refresh = () => {\r\n//     console.log('点击了');\r\n//     this.setState({\r\n//       spin: true\r\n//     })\r\n//     // this._getData()\r\n//     this._getExam()\r\n//   }\r\n//   render () {\r\n//     const columns = [\r\n//       {\r\n//         title: 'Pet Name',\r\n//         dataIndex: 'petName',\r\n//         key: 'petName',\r\n//         //   width: '30%',\r\n//         ...this.getColumnSearchProps('petName'),\r\n//       },\r\n//       {\r\n//         title: 'Owner',\r\n//         dataIndex: 'owner',\r\n//         key: 'owner',\r\n//         //   width: '20%',\r\n//         ...this.getColumnSearchProps('owner'),\r\n//       },\r\n//       {\r\n//         title: 'Breed',\r\n//         dataIndex: 'breed',\r\n//         key: 'breed',\r\n//         ...this.getColumnSearchProps('breed'),\r\n//       },\r\n\r\n//       {\r\n//         title: 'Gender',\r\n//         dataIndex: 'gender',\r\n//         key: 'gender',\r\n//         // width: '30%',\r\n//         ...this.getColumnSearchProps('gender'),\r\n//       },\r\n//       {\r\n//         title: 'Age',\r\n//         dataIndex: 'age',\r\n//         key: 'age',\r\n//         // width: '20%',\r\n//         render: (text, record, index) => {\r\n//           // console.log(text);\r\n\r\n//           if (`${text}` === 'NaN') {\r\n//             return (\r\n//               <p style={{ textAlign: 'center', justifyItems: 'center' }}>{'unknown'}</p>\r\n//             )\r\n//           } else {\r\n//             return (\r\n//               <p style={{ textAlign: 'center' }}>{text}</p>\r\n//             )\r\n//           }\r\n\r\n//         }\r\n//       },\r\n//       {\r\n//         title: 'Weight',\r\n//         dataIndex: 'weight',\r\n//         key: 'weight',\r\n//         ...this.getColumnSearchProps('weight'),\r\n//       },\r\n//       {\r\n//         title: 'Creation time',\r\n//         dataIndex: 'insertedAt',\r\n//         key: 'insertedAt',\r\n//         render: (text, record, index) => {\r\n//           let chazhi = new Date().getTimezoneOffset()\r\n//           // console.log(moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm'));\r\n//           let newTime = moment(parseInt(text) * 1000).format('YYYY-MM-DD HH:mm');\r\n//           // console.log(moment(parseInt(text) * 1000).add(chazhi, 'm').format('YYYY-MM-DD HH:mm'));\r\n//           return (\r\n//             <p style={{ textAlign: 'center' }}>{newTime}</p>\r\n//           )\r\n\r\n//         }\r\n//       },\r\n\r\n//     ];\r\n//     const { loading, data, api, id, seleceID, spin } = this.state\r\n//     return (\r\n\r\n//       <div id=\"ezyVetSelectExam\">\r\n//         {/* 关闭缩小 */}\r\n//         <MaxMin\r\n//           onClick={() => { this.props.history.push('/') }}\r\n//           onClick1={() => this.props.history.push({ pathname: '/EzyVetSelectTime' })}\r\n//         />\r\n\r\n//         <div className=\"textfa1\">\r\n//           <div className=\"textfa\">\r\n//             <div className=\"text\">Select Patient Exam</div>\r\n//             <div className=\"text3\"><SyncOutlined onClick={this._refresh} spin={spin} />   </div>\r\n//           </div>\r\n//           <div className=\"r\" onClick={() => {\r\n//             let electron = window.electron\r\n//             electron.shell.openExternal('https://mella.vetspire.com/clients')\r\n//           }}>+</div>\r\n//         </div>\r\n\r\n\r\n//         <div className=\"table\">\r\n//           <Table\r\n//             columns={columns}\r\n//             dataSource={data}\r\n//             loading={loading}\r\n//             locale={{ filterConfirm: <div>111</div> }}\r\n//             pagination={{ pageSize: 7, showSizeChanger: false, showQuickJumper: true }}\r\n//             onRow={(record) => {\r\n//               return {\r\n//                 onClick: (event) => {\r\n\r\n//                   console.log(record);\r\n//                   if (record.consult_id === '') {\r\n//                     message.error('This record cannot be updated. Please try another record', 10)\r\n//                     return\r\n//                   }\r\n//                   storage.ezyVetSelectHealthstatus = JSON.stringify(record)\r\n\r\n//                   // let patientId = record.key\r\n//                   // let petName = record.petName\r\n\r\n//                   // console.log(patientId, petName);\r\n//                   // storage.selectExamId = record.key\r\n//                   // storage.selectPatientId = record.patientId\r\n\r\n//                   // storage.selectAge = record.age\r\n//                   // storage.selectBreed = record.breed\r\n//                   // storage.selectOwner = record.owner\r\n//                   // storage.selectWeight = record.weight\r\n//                   // storage.selectPetName = record.petName\r\n\r\n//                   this.props.history.push({ pathname: '/page10', })\r\n\r\n//                 }, // 点击行\r\n\r\n//               };\r\n//             }}\r\n//           />\r\n//         </div>\r\n\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n","C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\utils\\InitDate.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\scanPage\\components\\scanPet.jsx",["1316","1317","1318","1319","1320","1321","1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347","1348","1349"],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\store\\reducers\\petReduce.js",[],"C:\\Users\\nonagon\\Desktop\\newPc\\Mella_Desktop_Super_USB\\src\\pages\\myAccount\\index.jsx",["1350","1351","1352","1353","1354","1355","1356"],{"ruleId":"1357","severity":1,"message":"1358","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1361","line":2,"column":36,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1362","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1363","line":24,"column":18,"nodeType":"1359","messageId":"1360","endLine":24,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1364","line":28,"column":10,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1365","line":28,"column":19,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":63,"column":16,"nodeType":"1368","endLine":63,"endColumn":41},{"ruleId":"1366","severity":1,"message":"1367","line":65,"column":16,"nodeType":"1368","endLine":65,"endColumn":41},{"ruleId":"1366","severity":1,"message":"1367","line":67,"column":16,"nodeType":"1368","endLine":67,"endColumn":41},{"ruleId":"1366","severity":1,"message":"1367","line":69,"column":16,"nodeType":"1368","endLine":69,"endColumn":41},{"ruleId":"1369","severity":1,"message":"1370","line":75,"column":3,"nodeType":"1359","endLine":75,"endColumn":12,"suggestions":"1371"},{"ruleId":"1372","replacedBy":"1373"},{"ruleId":"1374","replacedBy":"1375"},{"ruleId":"1357","severity":1,"message":"1376","line":13,"column":8,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1377","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":20},{"ruleId":"1372","replacedBy":"1378"},{"ruleId":"1374","replacedBy":"1379"},{"ruleId":"1357","severity":1,"message":"1380","line":3,"column":5,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1381","line":49,"column":29,"nodeType":"1359","messageId":"1360","endLine":49,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1382","line":49,"column":38,"nodeType":"1359","messageId":"1360","endLine":49,"endColumn":49},{"ruleId":"1357","severity":1,"message":"1383","line":49,"column":57,"nodeType":"1359","messageId":"1360","endLine":49,"endColumn":68},{"ruleId":"1384","severity":1,"message":"1385","line":243,"column":33,"nodeType":"1386","messageId":"1387","endLine":243,"endColumn":35},{"ruleId":"1384","severity":1,"message":"1385","line":243,"column":92,"nodeType":"1386","messageId":"1387","endLine":243,"endColumn":94},{"ruleId":"1384","severity":1,"message":"1385","line":243,"column":130,"nodeType":"1386","messageId":"1387","endLine":243,"endColumn":132},{"ruleId":"1372","replacedBy":"1388"},{"ruleId":"1374","replacedBy":"1389"},{"ruleId":"1357","severity":1,"message":"1380","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1390","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1358","line":6,"column":3,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1391","line":7,"column":3,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1392","line":10,"column":3,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1393","line":11,"column":3,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1394","line":12,"column":3,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1395","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1396","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1397","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1398","line":20,"column":10,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1399","line":21,"column":8,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":27,"column":10,"nodeType":"1359","messageId":"1360","endLine":27,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1401","line":27,"column":16,"nodeType":"1359","messageId":"1360","endLine":27,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1402","line":27,"column":22,"nodeType":"1359","messageId":"1360","endLine":27,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1403","line":39,"column":9,"nodeType":"1359","messageId":"1360","endLine":39,"endColumn":16},{"ruleId":"1372","replacedBy":"1404"},{"ruleId":"1374","replacedBy":"1405"},{"ruleId":"1357","severity":1,"message":"1406","line":18,"column":10,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1407","line":358,"column":28,"nodeType":"1359","messageId":"1360","endLine":358,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1408","line":358,"column":33,"nodeType":"1359","messageId":"1360","endLine":358,"endColumn":35},{"ruleId":"1357","severity":1,"message":"1409","line":358,"column":37,"nodeType":"1359","messageId":"1360","endLine":358,"endColumn":45},{"ruleId":"1372","replacedBy":"1410"},{"ruleId":"1374","replacedBy":"1411"},{"ruleId":"1357","severity":1,"message":"1412","line":11,"column":3,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1413","line":18,"column":8,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1406","line":26,"column":10,"nodeType":"1359","messageId":"1360","endLine":26,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1402","line":47,"column":16,"nodeType":"1359","messageId":"1360","endLine":47,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1403","line":50,"column":9,"nodeType":"1359","messageId":"1360","endLine":50,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1414","line":63,"column":5,"nodeType":"1359","messageId":"1360","endLine":63,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1415","line":455,"column":22,"nodeType":"1359","messageId":"1360","endLine":455,"endColumn":26},{"ruleId":"1416","severity":1,"message":"1417","line":1156,"column":9,"nodeType":"1418","messageId":"1419","endLine":1160,"endColumn":10},{"ruleId":"1416","severity":1,"message":"1417","line":1823,"column":5,"nodeType":"1418","messageId":"1419","endLine":1836,"endColumn":6},{"ruleId":"1357","severity":1,"message":"1420","line":2302,"column":17,"nodeType":"1359","messageId":"1360","endLine":2302,"endColumn":29},{"ruleId":"1421","severity":1,"message":"1422","line":2319,"column":59,"nodeType":"1423","messageId":"1424","endLine":2319,"endColumn":60,"suggestions":"1425"},{"ruleId":"1421","severity":1,"message":"1426","line":2319,"column":165,"nodeType":"1423","messageId":"1424","endLine":2319,"endColumn":166,"suggestions":"1427"},{"ruleId":"1421","severity":1,"message":"1422","line":2335,"column":59,"nodeType":"1423","messageId":"1424","endLine":2335,"endColumn":60,"suggestions":"1428"},{"ruleId":"1421","severity":1,"message":"1426","line":2335,"column":165,"nodeType":"1423","messageId":"1424","endLine":2335,"endColumn":166,"suggestions":"1429"},{"ruleId":"1421","severity":1,"message":"1422","line":2354,"column":59,"nodeType":"1423","messageId":"1424","endLine":2354,"endColumn":60,"suggestions":"1430"},{"ruleId":"1421","severity":1,"message":"1426","line":2354,"column":165,"nodeType":"1423","messageId":"1424","endLine":2354,"endColumn":166,"suggestions":"1431"},{"ruleId":"1421","severity":1,"message":"1422","line":2387,"column":59,"nodeType":"1423","messageId":"1424","endLine":2387,"endColumn":60,"suggestions":"1432"},{"ruleId":"1421","severity":1,"message":"1426","line":2387,"column":165,"nodeType":"1423","messageId":"1424","endLine":2387,"endColumn":166,"suggestions":"1433"},{"ruleId":"1421","severity":1,"message":"1422","line":2403,"column":59,"nodeType":"1423","messageId":"1424","endLine":2403,"endColumn":60,"suggestions":"1434"},{"ruleId":"1421","severity":1,"message":"1426","line":2403,"column":165,"nodeType":"1423","messageId":"1424","endLine":2403,"endColumn":166,"suggestions":"1435"},{"ruleId":"1421","severity":1,"message":"1422","line":2421,"column":59,"nodeType":"1423","messageId":"1424","endLine":2421,"endColumn":60,"suggestions":"1436"},{"ruleId":"1421","severity":1,"message":"1426","line":2421,"column":165,"nodeType":"1423","messageId":"1424","endLine":2421,"endColumn":166,"suggestions":"1437"},{"ruleId":"1357","severity":1,"message":"1438","line":2841,"column":11,"nodeType":"1359","messageId":"1360","endLine":2841,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1439","line":2841,"column":23,"nodeType":"1359","messageId":"1360","endLine":2841,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1440","line":2841,"column":33,"nodeType":"1359","messageId":"1360","endLine":2841,"endColumn":39},{"ruleId":"1357","severity":1,"message":"1441","line":2841,"column":65,"nodeType":"1359","messageId":"1360","endLine":2841,"endColumn":78},{"ruleId":"1357","severity":1,"message":"1442","line":2985,"column":30,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":37},{"ruleId":"1357","severity":1,"message":"1443","line":2985,"column":39,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1444","line":2985,"column":49,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":58},{"ruleId":"1357","severity":1,"message":"1445","line":2985,"column":60,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":69},{"ruleId":"1357","severity":1,"message":"1446","line":2985,"column":71,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":76},{"ruleId":"1357","severity":1,"message":"1447","line":2985,"column":78,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":86},{"ruleId":"1357","severity":1,"message":"1448","line":2985,"column":88,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":94},{"ruleId":"1357","severity":1,"message":"1449","line":2985,"column":96,"nodeType":"1359","messageId":"1360","endLine":2985,"endColumn":99},{"ruleId":"1421","severity":1,"message":"1422","line":3278,"column":59,"nodeType":"1423","messageId":"1424","endLine":3278,"endColumn":60,"suggestions":"1450"},{"ruleId":"1421","severity":1,"message":"1426","line":3278,"column":165,"nodeType":"1423","messageId":"1424","endLine":3278,"endColumn":166,"suggestions":"1451"},{"ruleId":"1421","severity":1,"message":"1422","line":3295,"column":59,"nodeType":"1423","messageId":"1424","endLine":3295,"endColumn":60,"suggestions":"1452"},{"ruleId":"1421","severity":1,"message":"1426","line":3295,"column":165,"nodeType":"1423","messageId":"1424","endLine":3295,"endColumn":166,"suggestions":"1453"},{"ruleId":"1357","severity":1,"message":"1392","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1395","line":8,"column":8,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1398","line":11,"column":32,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1454","line":129,"column":32,"nodeType":"1359","messageId":"1360","endLine":129,"endColumn":48},{"ruleId":"1357","severity":1,"message":"1455","line":151,"column":15,"nodeType":"1359","messageId":"1360","endLine":151,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1456","line":350,"column":21,"nodeType":"1359","messageId":"1360","endLine":350,"endColumn":27},{"ruleId":"1457","severity":1,"message":"1458","line":516,"column":17,"nodeType":"1368","endLine":516,"endColumn":54},{"ruleId":"1457","severity":1,"message":"1458","line":574,"column":17,"nodeType":"1368","endLine":574,"endColumn":60},{"ruleId":"1357","severity":1,"message":"1401","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1459","line":30,"column":9,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1390","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1460","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1391","line":7,"column":3,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1461","line":13,"column":10,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1462","line":19,"column":10,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1401","line":14,"column":10,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1358","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1463","line":58,"column":9,"nodeType":"1359","messageId":"1360","endLine":58,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1463","line":94,"column":9,"nodeType":"1359","messageId":"1360","endLine":94,"endColumn":22},{"ruleId":"1464","severity":1,"message":"1465","line":212,"column":41,"nodeType":"1466","messageId":"1467","endLine":212,"endColumn":43},{"ruleId":"1464","severity":1,"message":"1465","line":225,"column":47,"nodeType":"1466","messageId":"1467","endLine":225,"endColumn":49},{"ruleId":"1357","severity":1,"message":"1468","line":396,"column":23,"nodeType":"1359","messageId":"1360","endLine":396,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1469","line":449,"column":21,"nodeType":"1359","messageId":"1360","endLine":449,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1395","line":9,"column":8,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1461","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1470","line":10,"column":32,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1471","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1472","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1401","line":19,"column":10,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1473","line":159,"column":61,"nodeType":"1359","messageId":"1360","endLine":159,"endColumn":75},{"ruleId":"1357","severity":1,"message":"1390","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":2,"column":17,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1474","line":2,"column":48,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":56},{"ruleId":"1357","severity":1,"message":"1475","line":2,"column":58,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1476","line":2,"column":63,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":66},{"ruleId":"1357","severity":1,"message":"1412","line":2,"column":68,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":72},{"ruleId":"1357","severity":1,"message":"1395","line":3,"column":8,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1477","line":6,"column":32,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1478","line":11,"column":8,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1479","line":12,"column":8,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1480","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1481","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1482","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1403","line":23,"column":9,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1483","line":24,"column":9,"nodeType":"1359","messageId":"1360","endLine":24,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1484","line":25,"column":7,"nodeType":"1359","messageId":"1360","endLine":25,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1485","line":28,"column":5,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1486","line":29,"column":5,"nodeType":"1359","messageId":"1360","endLine":29,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1449","line":30,"column":5,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1449","line":92,"column":61,"nodeType":"1359","messageId":"1360","endLine":92,"endColumn":64},{"ruleId":"1357","severity":1,"message":"1487","line":92,"column":66,"nodeType":"1359","messageId":"1360","endLine":92,"endColumn":75},{"ruleId":"1457","severity":1,"message":"1458","line":277,"column":15,"nodeType":"1368","endLine":283,"endColumn":16},{"ruleId":"1372","replacedBy":"1488"},{"ruleId":"1374","replacedBy":"1489"},{"ruleId":"1357","severity":1,"message":"1490","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1491","line":5,"column":8,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1358","line":6,"column":8,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1376","line":7,"column":8,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1472","line":8,"column":8,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1401","line":9,"column":10,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1492","line":10,"column":8,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1493","line":11,"column":8,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1494","line":12,"column":8,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1495","line":13,"column":8,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1496","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1497","line":15,"column":10,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1397","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1483","line":19,"column":9,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1498","line":32,"column":11,"nodeType":"1359","messageId":"1360","endLine":32,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1499","line":32,"column":19,"nodeType":"1359","messageId":"1360","endLine":32,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1463","line":134,"column":9,"nodeType":"1359","messageId":"1360","endLine":134,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1395","line":9,"column":8,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1461","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1470","line":10,"column":32,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1471","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1401","line":19,"column":10,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":14},{"ruleId":"1416","severity":1,"message":"1417","line":85,"column":25,"nodeType":"1418","messageId":"1419","endLine":114,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1500","line":290,"column":49,"nodeType":"1359","messageId":"1360","endLine":290,"endColumn":63},{"ruleId":"1357","severity":1,"message":"1473","line":290,"column":65,"nodeType":"1359","messageId":"1360","endLine":290,"endColumn":79},{"ruleId":"1357","severity":1,"message":"1501","line":3,"column":5,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":10},{"ruleId":"1384","severity":1,"message":"1502","line":94,"column":16,"nodeType":"1386","messageId":"1387","endLine":94,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1503","line":18,"column":5,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1501","line":5,"column":5,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1504","line":11,"column":13,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":19},{"ruleId":"1384","severity":1,"message":"1502","line":14,"column":20,"nodeType":"1386","messageId":"1387","endLine":14,"endColumn":22},{"ruleId":"1384","severity":1,"message":"1502","line":62,"column":20,"nodeType":"1386","messageId":"1387","endLine":62,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1501","line":5,"column":5,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1504","line":11,"column":9,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":15},{"ruleId":"1384","severity":1,"message":"1502","line":14,"column":16,"nodeType":"1386","messageId":"1387","endLine":14,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":58,"column":16,"nodeType":"1386","messageId":"1387","endLine":58,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1505","line":2,"column":27,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1401","line":7,"column":14,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1506","line":3,"column":16,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1358","line":3,"column":25,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1392","line":3,"column":33,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1398","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1507","line":6,"column":10,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1508","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1509","line":23,"column":8,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1510","line":24,"column":8,"nodeType":"1359","messageId":"1360","endLine":24,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1511","line":26,"column":8,"nodeType":"1359","messageId":"1360","endLine":26,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1396","line":38,"column":8,"nodeType":"1359","messageId":"1360","endLine":38,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1403","line":40,"column":9,"nodeType":"1359","messageId":"1360","endLine":40,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1484","line":41,"column":7,"nodeType":"1359","messageId":"1360","endLine":41,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1512","line":45,"column":7,"nodeType":"1359","messageId":"1360","endLine":45,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1513","line":106,"column":10,"nodeType":"1359","messageId":"1360","endLine":106,"endColumn":19},{"ruleId":"1357","severity":1,"message":"1514","line":106,"column":21,"nodeType":"1359","messageId":"1360","endLine":106,"endColumn":33},{"ruleId":"1357","severity":1,"message":"1515","line":138,"column":10,"nodeType":"1359","messageId":"1360","endLine":138,"endColumn":19},{"ruleId":"1357","severity":1,"message":"1516","line":221,"column":13,"nodeType":"1359","messageId":"1360","endLine":221,"endColumn":20},{"ruleId":"1366","severity":1,"message":"1367","line":820,"column":17,"nodeType":"1368","endLine":820,"endColumn":62},{"ruleId":"1366","severity":1,"message":"1367","line":825,"column":17,"nodeType":"1368","endLine":825,"endColumn":65},{"ruleId":"1457","severity":1,"message":"1458","line":880,"column":15,"nodeType":"1368","endLine":886,"endColumn":16},{"ruleId":"1457","severity":1,"message":"1458","line":889,"column":15,"nodeType":"1368","endLine":895,"endColumn":16},{"ruleId":"1366","severity":1,"message":"1367","line":989,"column":17,"nodeType":"1368","endLine":989,"endColumn":62},{"ruleId":"1366","severity":1,"message":"1367","line":993,"column":15,"nodeType":"1368","endLine":993,"endColumn":64},{"ruleId":"1457","severity":1,"message":"1458","line":1111,"column":13,"nodeType":"1368","endLine":1115,"endColumn":14},{"ruleId":"1457","severity":1,"message":"1458","line":1192,"column":15,"nodeType":"1368","endLine":1200,"endColumn":16},{"ruleId":"1457","severity":1,"message":"1458","line":1215,"column":13,"nodeType":"1368","endLine":1215,"endColumn":76},{"ruleId":"1457","severity":1,"message":"1458","line":1286,"column":15,"nodeType":"1368","endLine":1294,"endColumn":16},{"ruleId":"1457","severity":1,"message":"1458","line":1318,"column":15,"nodeType":"1368","endLine":1322,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1517","line":1348,"column":9,"nodeType":"1359","messageId":"1360","endLine":1348,"endColumn":15},{"ruleId":"1369","severity":1,"message":"1518","line":1384,"column":6,"nodeType":"1519","endLine":1384,"endColumn":8,"suggestions":"1520"},{"ruleId":"1369","severity":1,"message":"1521","line":1393,"column":6,"nodeType":"1519","endLine":1393,"endColumn":32,"suggestions":"1522"},{"ruleId":"1366","severity":1,"message":"1367","line":1413,"column":13,"nodeType":"1368","endLine":1413,"endColumn":57},{"ruleId":"1366","severity":1,"message":"1367","line":1588,"column":17,"nodeType":"1368","endLine":1588,"endColumn":52},{"ruleId":"1366","severity":1,"message":"1367","line":1590,"column":17,"nodeType":"1368","endLine":1590,"endColumn":51},{"ruleId":"1357","severity":1,"message":"1376","line":11,"column":8,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1523","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":28},{"ruleId":"1369","severity":1,"message":"1524","line":47,"column":6,"nodeType":"1519","endLine":47,"endColumn":8,"suggestions":"1525"},{"ruleId":"1416","severity":1,"message":"1417","line":87,"column":5,"nodeType":"1418","messageId":"1419","endLine":106,"endColumn":6},{"ruleId":"1357","severity":1,"message":"1501","line":7,"column":5,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1504","line":20,"column":9,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":15},{"ruleId":"1384","severity":1,"message":"1502","line":23,"column":16,"nodeType":"1386","messageId":"1387","endLine":23,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":74,"column":16,"nodeType":"1386","messageId":"1387","endLine":74,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1526","line":2,"column":8,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1390","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":4,"column":17,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1527","line":4,"column":25,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1412","line":4,"column":34,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1528","line":4,"column":40,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1461","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1477","line":5,"column":46,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1523","line":7,"column":10,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1401","line":9,"column":10,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":9,"column":20,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1402","line":9,"column":26,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":28},{"ruleId":"1369","severity":1,"message":"1529","line":30,"column":8,"nodeType":"1519","endLine":30,"endColumn":10,"suggestions":"1530"},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":28,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1505","line":2,"column":5,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1531","line":3,"column":5,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1532","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1533","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1363","line":19,"column":18,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1534","line":22,"column":11,"nodeType":"1359","messageId":"1360","endLine":22,"endColumn":29},{"ruleId":"1357","severity":1,"message":"1532","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1397","line":28,"column":8,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1363","line":31,"column":18,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":24},{"ruleId":"1369","severity":1,"message":"1535","line":75,"column":6,"nodeType":"1519","endLine":75,"endColumn":21,"suggestions":"1536"},{"ruleId":"1366","severity":1,"message":"1367","line":109,"column":17,"nodeType":"1368","endLine":109,"endColumn":120},{"ruleId":"1366","severity":1,"message":"1367","line":127,"column":21,"nodeType":"1368","endLine":127,"endColumn":45},{"ruleId":"1366","severity":1,"message":"1367","line":149,"column":27,"nodeType":"1368","endLine":155,"endColumn":29},{"ruleId":"1372","replacedBy":"1537"},{"ruleId":"1374","replacedBy":"1538"},{"ruleId":"1357","severity":1,"message":"1358","line":3,"column":3,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1539","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1391","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1540","line":7,"column":3,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":6},{"ruleId":"1357","severity":1,"message":"1541","line":31,"column":10,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1542","line":43,"column":9,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1534","line":43,"column":28,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":46},{"ruleId":"1357","severity":1,"message":"1543","line":43,"column":48,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":64},{"ruleId":"1357","severity":1,"message":"1544","line":45,"column":16,"nodeType":"1359","messageId":"1360","endLine":45,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1545","line":58,"column":10,"nodeType":"1359","messageId":"1360","endLine":58,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1546","line":58,"column":20,"nodeType":"1359","messageId":"1360","endLine":58,"endColumn":31},{"ruleId":"1366","severity":1,"message":"1367","line":136,"column":11,"nodeType":"1368","endLine":143,"endColumn":13},{"ruleId":"1366","severity":1,"message":"1367","line":148,"column":13,"nodeType":"1368","endLine":148,"endColumn":33},{"ruleId":"1366","severity":1,"message":"1367","line":196,"column":18,"nodeType":"1368","endLine":196,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":198,"column":18,"nodeType":"1368","endLine":198,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":200,"column":18,"nodeType":"1368","endLine":200,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":202,"column":18,"nodeType":"1368","endLine":202,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":226,"column":11,"nodeType":"1368","endLine":233,"endColumn":13},{"ruleId":"1366","severity":1,"message":"1367","line":238,"column":13,"nodeType":"1368","endLine":238,"endColumn":63},{"ruleId":"1369","severity":1,"message":"1547","line":345,"column":6,"nodeType":"1519","endLine":345,"endColumn":18,"suggestions":"1548"},{"ruleId":"1369","severity":1,"message":"1549","line":353,"column":6,"nodeType":"1519","endLine":353,"endColumn":15,"suggestions":"1550"},{"ruleId":"1369","severity":1,"message":"1551","line":361,"column":6,"nodeType":"1519","endLine":361,"endColumn":8,"suggestions":"1552"},{"ruleId":"1357","severity":1,"message":"1553","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1554","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1393","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1461","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1480","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1555","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1556","line":60,"column":13,"nodeType":"1359","messageId":"1360","endLine":60,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1393","line":11,"column":3,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1399","line":21,"column":8,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1555","line":26,"column":10,"nodeType":"1359","messageId":"1360","endLine":26,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1557","line":28,"column":8,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":30,"column":10,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1401","line":30,"column":16,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1558","line":31,"column":10,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1559","line":36,"column":8,"nodeType":"1359","messageId":"1360","endLine":36,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1560","line":37,"column":8,"nodeType":"1359","messageId":"1360","endLine":37,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1403","line":42,"column":9,"nodeType":"1359","messageId":"1360","endLine":42,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1484","line":43,"column":7,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1561","line":166,"column":9,"nodeType":"1359","messageId":"1360","endLine":166,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1448","line":176,"column":15,"nodeType":"1359","messageId":"1360","endLine":176,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1562","line":630,"column":15,"nodeType":"1359","messageId":"1360","endLine":630,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1563","line":905,"column":15,"nodeType":"1359","messageId":"1360","endLine":905,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1564","line":909,"column":15,"nodeType":"1359","messageId":"1360","endLine":909,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1407","line":993,"column":28,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1408","line":993,"column":33,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":35},{"ruleId":"1357","severity":1,"message":"1409","line":993,"column":37,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":45},{"ruleId":"1357","severity":1,"message":"1438","line":993,"column":53,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":63},{"ruleId":"1357","severity":1,"message":"1439","line":993,"column":65,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":73},{"ruleId":"1357","severity":1,"message":"1440","line":993,"column":75,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":81},{"ruleId":"1357","severity":1,"message":"1565","line":993,"column":111,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":117},{"ruleId":"1357","severity":1,"message":"1566","line":993,"column":119,"nodeType":"1359","messageId":"1360","endLine":993,"endColumn":129},{"ruleId":"1457","severity":1,"message":"1458","line":1005,"column":11,"nodeType":"1368","endLine":1021,"endColumn":12},{"ruleId":"1416","severity":1,"message":"1417","line":1104,"column":19,"nodeType":"1418","messageId":"1419","endLine":1123,"endColumn":20},{"ruleId":"1366","severity":1,"message":"1367","line":1233,"column":17,"nodeType":"1368","endLine":1233,"endColumn":52},{"ruleId":"1366","severity":1,"message":"1367","line":1234,"column":17,"nodeType":"1368","endLine":1234,"endColumn":51},{"ruleId":"1357","severity":1,"message":"1358","line":2,"column":17,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1528","line":2,"column":40,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1398","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1497","line":14,"column":10,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1406","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1401","line":18,"column":10,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":18,"column":20,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1402","line":18,"column":26,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1567","line":21,"column":20,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":29},{"ruleId":"1357","severity":1,"message":"1484","line":23,"column":7,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1568","line":346,"column":11,"nodeType":"1359","messageId":"1360","endLine":346,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1569","line":414,"column":19,"nodeType":"1359","messageId":"1360","endLine":414,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1570","line":415,"column":9,"nodeType":"1359","messageId":"1360","endLine":415,"endColumn":13},{"ruleId":"1457","severity":1,"message":"1458","line":582,"column":15,"nodeType":"1368","endLine":582,"endColumn":50},{"ruleId":"1357","severity":1,"message":"1412","line":6,"column":3,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1461","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1398","line":10,"column":32,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":44},{"ruleId":"1416","severity":1,"message":"1417","line":78,"column":11,"nodeType":"1418","messageId":"1419","endLine":99,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1412","line":2,"column":60,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":64},{"ruleId":"1357","severity":1,"message":"1395","line":3,"column":8,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1398","line":6,"column":32,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1477","line":6,"column":46,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1403","line":31,"column":9,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1449","line":38,"column":5,"nodeType":"1359","messageId":"1360","endLine":38,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1442","line":114,"column":29,"nodeType":"1359","messageId":"1360","endLine":114,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1443","line":114,"column":38,"nodeType":"1359","messageId":"1360","endLine":114,"endColumn":46},{"ruleId":"1357","severity":1,"message":"1444","line":114,"column":48,"nodeType":"1359","messageId":"1360","endLine":114,"endColumn":57},{"ruleId":"1416","severity":1,"message":"1417","line":158,"column":5,"nodeType":"1418","messageId":"1419","endLine":164,"endColumn":6},{"ruleId":"1464","severity":1,"message":"1465","line":171,"column":41,"nodeType":"1466","messageId":"1467","endLine":171,"endColumn":43},{"ruleId":"1357","severity":1,"message":"1571","line":450,"column":11,"nodeType":"1359","messageId":"1360","endLine":450,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1572","line":524,"column":11,"nodeType":"1359","messageId":"1360","endLine":524,"endColumn":24},{"ruleId":"1366","severity":1,"message":"1367","line":715,"column":15,"nodeType":"1368","endLine":715,"endColumn":63},{"ruleId":"1357","severity":1,"message":"1573","line":731,"column":5,"nodeType":"1359","messageId":"1360","endLine":731,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1445","line":732,"column":11,"nodeType":"1359","messageId":"1360","endLine":732,"endColumn":20},{"ruleId":"1366","severity":1,"message":"1367","line":750,"column":15,"nodeType":"1368","endLine":750,"endColumn":63},{"ruleId":"1416","severity":1,"message":"1417","line":772,"column":5,"nodeType":"1418","messageId":"1419","endLine":775,"endColumn":6},{"ruleId":"1416","severity":1,"message":"1417","line":776,"column":5,"nodeType":"1418","messageId":"1419","endLine":779,"endColumn":6},{"ruleId":"1357","severity":1,"message":"1574","line":902,"column":61,"nodeType":"1359","messageId":"1360","endLine":902,"endColumn":78},{"ruleId":"1357","severity":1,"message":"1446","line":902,"column":80,"nodeType":"1359","messageId":"1360","endLine":902,"endColumn":85},{"ruleId":"1357","severity":1,"message":"1445","line":902,"column":118,"nodeType":"1359","messageId":"1360","endLine":902,"endColumn":127},{"ruleId":"1357","severity":1,"message":"1454","line":133,"column":32,"nodeType":"1359","messageId":"1360","endLine":133,"endColumn":48},{"ruleId":"1357","severity":1,"message":"1455","line":150,"column":15,"nodeType":"1359","messageId":"1360","endLine":150,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1395","line":9,"column":8,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1461","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1470","line":10,"column":32,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1471","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1401","line":19,"column":10,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":14},{"ruleId":"1416","severity":1,"message":"1417","line":85,"column":25,"nodeType":"1418","messageId":"1419","endLine":114,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1454","line":214,"column":42,"nodeType":"1359","messageId":"1360","endLine":214,"endColumn":58},{"ruleId":"1357","severity":1,"message":"1455","line":235,"column":29,"nodeType":"1359","messageId":"1360","endLine":235,"endColumn":42},{"ruleId":"1357","severity":1,"message":"1500","line":270,"column":49,"nodeType":"1359","messageId":"1360","endLine":270,"endColumn":63},{"ruleId":"1357","severity":1,"message":"1473","line":270,"column":65,"nodeType":"1359","messageId":"1360","endLine":270,"endColumn":79},{"ruleId":"1357","severity":1,"message":"1575","line":58,"column":9,"nodeType":"1359","messageId":"1360","endLine":58,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1490","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1491","line":12,"column":8,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1358","line":13,"column":8,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1376","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1472","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1401","line":16,"column":10,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1576","line":25,"column":10,"nodeType":"1359","messageId":"1360","endLine":25,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1483","line":27,"column":9,"nodeType":"1359","messageId":"1360","endLine":27,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1498","line":43,"column":11,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1499","line":43,"column":19,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1463","line":59,"column":9,"nodeType":"1359","messageId":"1360","endLine":59,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1577","line":78,"column":11,"nodeType":"1359","messageId":"1360","endLine":78,"endColumn":19},{"ruleId":"1357","severity":1,"message":"1472","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":24},{"ruleId":"1372","replacedBy":"1578"},{"ruleId":"1374","replacedBy":"1579"},{"ruleId":"1357","severity":1,"message":"1541","line":13,"column":10,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1402","line":13,"column":14,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":16},{"ruleId":"1580","severity":1,"message":"1581","line":1,"column":1,"nodeType":"1582","endLine":256,"endColumn":3},{"ruleId":"1357","severity":1,"message":"1523","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1376","line":9,"column":8,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1485","line":14,"column":5,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":12},{"ruleId":"1369","severity":1,"message":"1583","line":53,"column":6,"nodeType":"1519","endLine":53,"endColumn":41,"suggestions":"1584"},{"ruleId":"1357","severity":1,"message":"1523","line":23,"column":10,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1585","line":29,"column":26,"nodeType":"1359","messageId":"1360","endLine":29,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1586","line":29,"column":34,"nodeType":"1359","messageId":"1360","endLine":29,"endColumn":39},{"ruleId":"1369","severity":1,"message":"1587","line":116,"column":6,"nodeType":"1519","endLine":116,"endColumn":8,"suggestions":"1588"},{"ruleId":"1366","severity":1,"message":"1367","line":168,"column":17,"nodeType":"1368","endLine":168,"endColumn":45},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":28,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1589","line":3,"column":18,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1590","line":3,"column":24,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":34},{"ruleId":"1357","severity":1,"message":"1363","line":16,"column":9,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1585","line":16,"column":26,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1586","line":16,"column":34,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":39},{"ruleId":"1369","severity":1,"message":"1591","line":94,"column":6,"nodeType":"1519","endLine":94,"endColumn":22,"suggestions":"1592"},{"ruleId":"1369","severity":1,"message":"1593","line":103,"column":6,"nodeType":"1519","endLine":103,"endColumn":21,"suggestions":"1594"},{"ruleId":"1357","severity":1,"message":"1532","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1391","line":10,"column":3,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1595","line":11,"column":3,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1596","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1523","line":27,"column":10,"nodeType":"1359","messageId":"1360","endLine":27,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1541","line":42,"column":10,"nodeType":"1359","messageId":"1360","endLine":42,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1542","line":70,"column":5,"nodeType":"1359","messageId":"1360","endLine":70,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1597","line":74,"column":5,"nodeType":"1359","messageId":"1360","endLine":74,"endColumn":23},{"ruleId":"1598","severity":1,"message":"1599","line":132,"column":61,"nodeType":"1386","messageId":"1600","endLine":132,"endColumn":62},{"ruleId":"1598","severity":1,"message":"1599","line":140,"column":45,"nodeType":"1386","messageId":"1600","endLine":140,"endColumn":46},{"ruleId":"1369","severity":1,"message":"1601","line":284,"column":6,"nodeType":"1519","endLine":284,"endColumn":13,"suggestions":"1602"},{"ruleId":"1369","severity":1,"message":"1603","line":306,"column":6,"nodeType":"1519","endLine":306,"endColumn":26,"suggestions":"1604"},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1532","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1605","line":4,"column":8,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1533","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1606","line":19,"column":9,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1363","line":19,"column":18,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1534","line":22,"column":9,"nodeType":"1359","messageId":"1360","endLine":22,"endColumn":27},{"ruleId":"1357","severity":1,"message":"1607","line":23,"column":19,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":28,"column":11,"nodeType":"1368","endLine":28,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1531","line":2,"column":17,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1501","line":6,"column":5,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":10},{"ruleId":"1384","severity":1,"message":"1502","line":18,"column":16,"nodeType":"1386","messageId":"1387","endLine":18,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":61,"column":16,"nodeType":"1386","messageId":"1387","endLine":61,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":95,"column":16,"nodeType":"1386","messageId":"1387","endLine":95,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1394","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1461","line":8,"column":10,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1483","line":18,"column":9,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1608","line":6,"column":5,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1609","line":10,"column":10,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1610","line":10,"column":30,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":42},{"ruleId":"1357","severity":1,"message":"1484","line":19,"column":7,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1392","line":6,"column":3,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1527","line":7,"column":3,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1412","line":8,"column":3,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1401","line":15,"column":10,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1402","line":15,"column":16,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1461","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1398","line":17,"column":32,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1477","line":17,"column":46,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1497","line":18,"column":10,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1412","line":2,"column":60,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":64},{"ruleId":"1357","severity":1,"message":"1395","line":3,"column":8,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1477","line":6,"column":32,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1403","line":31,"column":9,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1484","line":33,"column":7,"nodeType":"1359","messageId":"1360","endLine":33,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1449","line":38,"column":5,"nodeType":"1359","messageId":"1360","endLine":38,"endColumn":8},{"ruleId":"1416","severity":1,"message":"1417","line":113,"column":9,"nodeType":"1418","messageId":"1419","endLine":119,"endColumn":10},{"ruleId":"1464","severity":1,"message":"1465","line":126,"column":51,"nodeType":"1466","messageId":"1467","endLine":126,"endColumn":53},{"ruleId":"1464","severity":1,"message":"1465","line":165,"column":51,"nodeType":"1466","messageId":"1467","endLine":165,"endColumn":53},{"ruleId":"1357","severity":1,"message":"1571","line":274,"column":15,"nodeType":"1359","messageId":"1360","endLine":274,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1611","line":274,"column":53,"nodeType":"1359","messageId":"1360","endLine":274,"endColumn":59},{"ruleId":"1357","severity":1,"message":"1572","line":347,"column":15,"nodeType":"1359","messageId":"1360","endLine":347,"endColumn":28},{"ruleId":"1366","severity":1,"message":"1367","line":551,"column":29,"nodeType":"1368","endLine":551,"endColumn":77},{"ruleId":"1357","severity":1,"message":"1573","line":574,"column":9,"nodeType":"1359","messageId":"1360","endLine":574,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1445","line":575,"column":15,"nodeType":"1359","messageId":"1360","endLine":575,"endColumn":24},{"ruleId":"1366","severity":1,"message":"1367","line":609,"column":29,"nodeType":"1368","endLine":609,"endColumn":77},{"ruleId":"1416","severity":1,"message":"1417","line":640,"column":9,"nodeType":"1418","messageId":"1419","endLine":643,"endColumn":10},{"ruleId":"1416","severity":1,"message":"1417","line":645,"column":9,"nodeType":"1418","messageId":"1419","endLine":648,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1438","line":729,"column":17,"nodeType":"1359","messageId":"1360","endLine":729,"endColumn":27},{"ruleId":"1357","severity":1,"message":"1439","line":729,"column":29,"nodeType":"1359","messageId":"1360","endLine":729,"endColumn":37},{"ruleId":"1357","severity":1,"message":"1440","line":729,"column":39,"nodeType":"1359","messageId":"1360","endLine":729,"endColumn":45},{"ruleId":"1357","severity":1,"message":"1612","line":729,"column":47,"nodeType":"1359","messageId":"1360","endLine":729,"endColumn":55},{"ruleId":"1357","severity":1,"message":"1446","line":795,"column":97,"nodeType":"1359","messageId":"1360","endLine":795,"endColumn":102},{"ruleId":"1357","severity":1,"message":"1613","line":795,"column":135,"nodeType":"1359","messageId":"1360","endLine":795,"endColumn":157},{"ruleId":"1357","severity":1,"message":"1390","line":3,"column":3,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1527","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1614","line":10,"column":8,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1497","line":12,"column":10,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1398","line":5,"column":32,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1501","line":4,"column":5,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1504","line":10,"column":9,"nodeType":"1359","messageId":"1360","endLine":10,"endColumn":15},{"ruleId":"1384","severity":1,"message":"1502","line":13,"column":16,"nodeType":"1386","messageId":"1387","endLine":13,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":58,"column":16,"nodeType":"1386","messageId":"1387","endLine":58,"endColumn":18},{"ruleId":"1369","severity":1,"message":"1615","line":27,"column":8,"nodeType":"1519","endLine":27,"endColumn":10,"suggestions":"1616"},{"ruleId":"1357","severity":1,"message":"1390","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":4,"column":17,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1412","line":4,"column":34,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1528","line":4,"column":40,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1461","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1398","line":5,"column":32,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1523","line":7,"column":10,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1617","line":9,"column":8,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1511","line":18,"column":8,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1618","line":19,"column":8,"nodeType":"1359","messageId":"1360","endLine":19,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1619","line":20,"column":8,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1620","line":21,"column":8,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1492","line":23,"column":8,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1402","line":24,"column":26,"nodeType":"1359","messageId":"1360","endLine":24,"endColumn":28},{"ruleId":"1369","severity":1,"message":"1621","line":60,"column":8,"nodeType":"1519","endLine":60,"endColumn":10,"suggestions":"1622"},{"ruleId":"1369","severity":1,"message":"1623","line":102,"column":8,"nodeType":"1519","endLine":102,"endColumn":38,"suggestions":"1624"},{"ruleId":"1357","severity":1,"message":"1526","line":2,"column":8,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1390","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":4,"column":17,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1527","line":4,"column":25,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1412","line":4,"column":34,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1528","line":4,"column":40,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1461","line":5,"column":10,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1477","line":5,"column":46,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1523","line":7,"column":10,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1401","line":9,"column":10,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":9,"column":20,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1402","line":9,"column":26,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1625","line":63,"column":17,"nodeType":"1359","messageId":"1360","endLine":63,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1626","line":74,"column":10,"nodeType":"1359","messageId":"1360","endLine":74,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1627","line":78,"column":10,"nodeType":"1359","messageId":"1360","endLine":78,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1628","line":81,"column":18,"nodeType":"1359","messageId":"1360","endLine":81,"endColumn":27},{"ruleId":"1369","severity":1,"message":"1629","line":100,"column":6,"nodeType":"1519","endLine":100,"endColumn":32,"suggestions":"1630"},{"ruleId":"1357","severity":1,"message":"1631","line":110,"column":11,"nodeType":"1359","messageId":"1360","endLine":110,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1415","line":445,"column":24,"nodeType":"1359","messageId":"1360","endLine":445,"endColumn":28},{"ruleId":"1384","severity":1,"message":"1502","line":460,"column":49,"nodeType":"1386","messageId":"1387","endLine":460,"endColumn":51},{"ruleId":"1421","severity":1,"message":"1422","line":724,"column":34,"nodeType":"1423","messageId":"1424","endLine":724,"endColumn":35,"suggestions":"1632"},{"ruleId":"1421","severity":1,"message":"1426","line":729,"column":31,"nodeType":"1423","messageId":"1424","endLine":729,"endColumn":32,"suggestions":"1633"},{"ruleId":"1421","severity":1,"message":"1422","line":753,"column":34,"nodeType":"1423","messageId":"1424","endLine":753,"endColumn":35,"suggestions":"1634"},{"ruleId":"1421","severity":1,"message":"1426","line":758,"column":31,"nodeType":"1423","messageId":"1424","endLine":758,"endColumn":32,"suggestions":"1635"},{"ruleId":"1421","severity":1,"message":"1422","line":782,"column":34,"nodeType":"1423","messageId":"1424","endLine":782,"endColumn":35,"suggestions":"1636"},{"ruleId":"1421","severity":1,"message":"1426","line":787,"column":31,"nodeType":"1423","messageId":"1424","endLine":787,"endColumn":32,"suggestions":"1637"},{"ruleId":"1421","severity":1,"message":"1422","line":831,"column":34,"nodeType":"1423","messageId":"1424","endLine":831,"endColumn":35,"suggestions":"1638"},{"ruleId":"1421","severity":1,"message":"1426","line":836,"column":31,"nodeType":"1423","messageId":"1424","endLine":836,"endColumn":32,"suggestions":"1639"},{"ruleId":"1421","severity":1,"message":"1422","line":859,"column":34,"nodeType":"1423","messageId":"1424","endLine":859,"endColumn":35,"suggestions":"1640"},{"ruleId":"1421","severity":1,"message":"1426","line":864,"column":31,"nodeType":"1423","messageId":"1424","endLine":864,"endColumn":32,"suggestions":"1641"},{"ruleId":"1421","severity":1,"message":"1422","line":889,"column":34,"nodeType":"1423","messageId":"1424","endLine":889,"endColumn":35,"suggestions":"1642"},{"ruleId":"1421","severity":1,"message":"1426","line":894,"column":31,"nodeType":"1423","messageId":"1424","endLine":894,"endColumn":32,"suggestions":"1643"},{"ruleId":"1421","severity":1,"message":"1422","line":908,"column":59,"nodeType":"1423","messageId":"1424","endLine":908,"endColumn":60,"suggestions":"1644"},{"ruleId":"1421","severity":1,"message":"1426","line":908,"column":165,"nodeType":"1423","messageId":"1424","endLine":908,"endColumn":166,"suggestions":"1645"},{"ruleId":"1646","severity":1,"message":"1647","line":1255,"column":9,"nodeType":"1648","messageId":"1387","endLine":1255,"endColumn":14},{"ruleId":"1421","severity":1,"message":"1422","line":1450,"column":34,"nodeType":"1423","messageId":"1424","endLine":1450,"endColumn":35,"suggestions":"1649"},{"ruleId":"1421","severity":1,"message":"1426","line":1455,"column":31,"nodeType":"1423","messageId":"1424","endLine":1455,"endColumn":32,"suggestions":"1650"},{"ruleId":"1421","severity":1,"message":"1422","line":1471,"column":34,"nodeType":"1423","messageId":"1424","endLine":1471,"endColumn":35,"suggestions":"1651"},{"ruleId":"1421","severity":1,"message":"1426","line":1476,"column":31,"nodeType":"1423","messageId":"1424","endLine":1476,"endColumn":32,"suggestions":"1652"},{"ruleId":"1369","severity":1,"message":"1653","line":1671,"column":6,"nodeType":"1519","endLine":1671,"endColumn":8,"suggestions":"1654"},{"ruleId":"1369","severity":1,"message":"1655","line":1718,"column":6,"nodeType":"1519","endLine":1718,"endColumn":23,"suggestions":"1656"},{"ruleId":"1369","severity":1,"message":"1657","line":1747,"column":6,"nodeType":"1519","endLine":1747,"endColumn":26,"suggestions":"1658"},{"ruleId":"1357","severity":1,"message":"1391","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1540","line":7,"column":3,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":6},{"ruleId":"1357","severity":1,"message":"1544","line":44,"column":16,"nodeType":"1359","messageId":"1360","endLine":44,"endColumn":20},{"ruleId":"1366","severity":1,"message":"1367","line":99,"column":18,"nodeType":"1368","endLine":99,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":101,"column":18,"nodeType":"1368","endLine":101,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":103,"column":18,"nodeType":"1368","endLine":103,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":105,"column":18,"nodeType":"1368","endLine":105,"endColumn":47},{"ruleId":"1366","severity":1,"message":"1367","line":127,"column":11,"nodeType":"1368","endLine":135,"endColumn":13},{"ruleId":"1366","severity":1,"message":"1367","line":140,"column":13,"nodeType":"1368","endLine":140,"endColumn":49},{"ruleId":"1384","severity":1,"message":"1385","line":204,"column":28,"nodeType":"1386","messageId":"1387","endLine":204,"endColumn":30},{"ruleId":"1369","severity":1,"message":"1547","line":301,"column":6,"nodeType":"1519","endLine":301,"endColumn":18,"suggestions":"1659"},{"ruleId":"1369","severity":1,"message":"1551","line":309,"column":6,"nodeType":"1519","endLine":309,"endColumn":8,"suggestions":"1660"},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":27,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1401","line":8,"column":10,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":8,"column":20,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1661","line":18,"column":9,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1563","line":68,"column":21,"nodeType":"1359","messageId":"1360","endLine":68,"endColumn":27},{"ruleId":"1357","severity":1,"message":"1564","line":72,"column":21,"nodeType":"1359","messageId":"1360","endLine":72,"endColumn":28},{"ruleId":"1457","severity":1,"message":"1458","line":160,"column":17,"nodeType":"1368","endLine":176,"endColumn":18},{"ruleId":"1416","severity":1,"message":"1417","line":224,"column":29,"nodeType":"1418","messageId":"1419","endLine":243,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1501","line":4,"column":5,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":10},{"ruleId":"1384","severity":1,"message":"1502","line":16,"column":16,"nodeType":"1386","messageId":"1387","endLine":16,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":67,"column":16,"nodeType":"1386","messageId":"1387","endLine":67,"endColumn":18},{"ruleId":"1384","severity":1,"message":"1502","line":101,"column":16,"nodeType":"1386","messageId":"1387","endLine":101,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1662","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1589","line":4,"column":5,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1506","line":5,"column":5,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":12},{"ruleId":"1357","severity":1,"message":"1358","line":6,"column":5,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1392","line":7,"column":5,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1401","line":15,"column":10,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":15,"column":20,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1376","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":21},{"ruleId":"1384","severity":1,"message":"1502","line":86,"column":32,"nodeType":"1386","messageId":"1387","endLine":86,"endColumn":34},{"ruleId":"1369","severity":1,"message":"1663","line":104,"column":8,"nodeType":"1519","endLine":104,"endColumn":10,"suggestions":"1664"},{"ruleId":"1464","severity":1,"message":"1465","line":114,"column":39,"nodeType":"1466","messageId":"1467","endLine":114,"endColumn":41},{"ruleId":"1384","severity":1,"message":"1385","line":124,"column":39,"nodeType":"1386","messageId":"1387","endLine":124,"endColumn":41},{"ruleId":"1369","severity":1,"message":"1665","line":152,"column":8,"nodeType":"1519","endLine":152,"endColumn":20,"suggestions":"1666"},{"ruleId":"1457","severity":1,"message":"1667","line":202,"column":21,"nodeType":"1368","endLine":207,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1461","line":8,"column":10,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1398","line":8,"column":32,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1402","line":14,"column":20,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1526","line":8,"column":8,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1401","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1402","line":4,"column":20,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":22},{"ruleId":"1416","severity":1,"message":"1417","line":417,"column":9,"nodeType":"1418","messageId":"1419","endLine":424,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1668","line":624,"column":15,"nodeType":"1359","messageId":"1360","endLine":624,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1669","line":668,"column":17,"nodeType":"1359","messageId":"1360","endLine":668,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1670","line":847,"column":11,"nodeType":"1359","messageId":"1360","endLine":847,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":27,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1398","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1461","line":3,"column":24,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1507","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":24},{"ruleId":"1366","severity":1,"message":"1367","line":44,"column":11,"nodeType":"1368","endLine":47,"endColumn":13},{"ruleId":"1366","severity":1,"message":"1367","line":53,"column":13,"nodeType":"1368","endLine":56,"endColumn":15},{"ruleId":"1366","severity":1,"message":"1367","line":61,"column":11,"nodeType":"1368","endLine":64,"endColumn":13},{"ruleId":"1366","severity":1,"message":"1367","line":74,"column":11,"nodeType":"1368","endLine":77,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1533","line":4,"column":8,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1505","line":6,"column":10,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":19},{"ruleId":"1357","severity":1,"message":"1395","line":8,"column":8,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1461","line":9,"column":10,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1401","line":20,"column":10,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1402","line":20,"column":16,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1573","line":24,"column":7,"nodeType":"1359","messageId":"1360","endLine":24,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1612","line":321,"column":21,"nodeType":"1359","messageId":"1360","endLine":321,"endColumn":29},{"ruleId":"1357","severity":1,"message":"1456","line":321,"column":31,"nodeType":"1359","messageId":"1360","endLine":321,"endColumn":37},{"ruleId":"1457","severity":1,"message":"1458","line":481,"column":36,"nodeType":"1368","endLine":481,"endColumn":71},{"ruleId":"1357","severity":1,"message":"1390","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":2,"column":17,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1412","line":2,"column":34,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1528","line":2,"column":40,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1461","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1398","line":3,"column":32,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1492","line":11,"column":8,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1402","line":12,"column":26,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1671","line":18,"column":5,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":10},{"ruleId":"1416","severity":1,"message":"1417","line":164,"column":9,"nodeType":"1418","messageId":"1419","endLine":182,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1672","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":39,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":47},{"ruleId":"1369","severity":1,"message":"1673","line":161,"column":6,"nodeType":"1519","endLine":161,"endColumn":23,"suggestions":"1674"},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":27,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1526","line":2,"column":8,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1390","line":4,"column":10,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1358","line":4,"column":17,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1412","line":4,"column":34,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1528","line":4,"column":40,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":47},{"ruleId":"1357","severity":1,"message":"1398","line":5,"column":32,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1477","line":5,"column":46,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":61},{"ruleId":"1357","severity":1,"message":"1523","line":7,"column":10,"nodeType":"1359","messageId":"1360","endLine":7,"endColumn":28},{"ruleId":"1357","severity":1,"message":"1376","line":8,"column":8,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1401","line":18,"column":10,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":18,"column":20,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1402","line":18,"column":26,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":28},{"ruleId":"1369","severity":1,"message":"1675","line":231,"column":6,"nodeType":"1519","endLine":231,"endColumn":26,"suggestions":"1676"},{"ruleId":"1357","severity":1,"message":"1501","line":6,"column":5,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1504","line":12,"column":13,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":19},{"ruleId":"1384","severity":1,"message":"1502","line":15,"column":20,"nodeType":"1386","messageId":"1387","endLine":15,"endColumn":22},{"ruleId":"1384","severity":1,"message":"1502","line":59,"column":20,"nodeType":"1386","messageId":"1387","endLine":59,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1505","line":2,"column":27,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1662","line":3,"column":10,"nodeType":"1359","messageId":"1360","endLine":3,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1401","line":8,"column":14,"nodeType":"1359","messageId":"1360","endLine":8,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1393","line":11,"column":3,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1399","line":21,"column":8,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1555","line":26,"column":10,"nodeType":"1359","messageId":"1360","endLine":26,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1557","line":28,"column":8,"nodeType":"1359","messageId":"1360","endLine":28,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1400","line":30,"column":10,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1401","line":30,"column":16,"nodeType":"1359","messageId":"1360","endLine":30,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1558","line":31,"column":10,"nodeType":"1359","messageId":"1360","endLine":31,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1559","line":36,"column":8,"nodeType":"1359","messageId":"1360","endLine":36,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1560","line":37,"column":8,"nodeType":"1359","messageId":"1360","endLine":37,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1403","line":42,"column":9,"nodeType":"1359","messageId":"1360","endLine":42,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1484","line":43,"column":7,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1561","line":166,"column":9,"nodeType":"1359","messageId":"1360","endLine":166,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1448","line":176,"column":15,"nodeType":"1359","messageId":"1360","endLine":176,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1562","line":626,"column":15,"nodeType":"1359","messageId":"1360","endLine":626,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1563","line":901,"column":15,"nodeType":"1359","messageId":"1360","endLine":901,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1564","line":905,"column":15,"nodeType":"1359","messageId":"1360","endLine":905,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1407","line":989,"column":28,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1408","line":989,"column":33,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":35},{"ruleId":"1357","severity":1,"message":"1409","line":989,"column":37,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":45},{"ruleId":"1357","severity":1,"message":"1438","line":989,"column":53,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":63},{"ruleId":"1357","severity":1,"message":"1439","line":989,"column":65,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":73},{"ruleId":"1357","severity":1,"message":"1440","line":989,"column":75,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":81},{"ruleId":"1357","severity":1,"message":"1565","line":989,"column":111,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":117},{"ruleId":"1357","severity":1,"message":"1566","line":989,"column":119,"nodeType":"1359","messageId":"1360","endLine":989,"endColumn":129},{"ruleId":"1457","severity":1,"message":"1458","line":1001,"column":11,"nodeType":"1368","endLine":1017,"endColumn":12},{"ruleId":"1416","severity":1,"message":"1417","line":1099,"column":19,"nodeType":"1418","messageId":"1419","endLine":1118,"endColumn":20},{"ruleId":"1366","severity":1,"message":"1367","line":1214,"column":17,"nodeType":"1368","endLine":1214,"endColumn":52},{"ruleId":"1366","severity":1,"message":"1367","line":1215,"column":17,"nodeType":"1368","endLine":1215,"endColumn":51},{"ruleId":"1357","severity":1,"message":"1472","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1401","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1377","line":22,"column":8,"nodeType":"1359","messageId":"1360","endLine":22,"endColumn":20},{"ruleId":"1357","severity":1,"message":"1483","line":23,"column":9,"nodeType":"1359","messageId":"1360","endLine":23,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1677","line":340,"column":9,"nodeType":"1359","messageId":"1360","endLine":340,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1678","line":377,"column":11,"nodeType":"1359","messageId":"1360","endLine":377,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1565","line":377,"column":142,"nodeType":"1359","messageId":"1360","endLine":377,"endColumn":148},{"ruleId":"1357","severity":1,"message":"1566","line":377,"column":150,"nodeType":"1359","messageId":"1360","endLine":377,"endColumn":160},{"ruleId":"1357","severity":1,"message":"1679","line":381,"column":7,"nodeType":"1359","messageId":"1360","endLine":381,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1680","line":2,"column":35,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":42},{"ruleId":"1357","severity":1,"message":"1555","line":13,"column":10,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1402","line":43,"column":20,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1403","line":50,"column":9,"nodeType":"1359","messageId":"1360","endLine":50,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1484","line":52,"column":7,"nodeType":"1359","messageId":"1360","endLine":52,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1681","line":79,"column":5,"nodeType":"1359","messageId":"1360","endLine":79,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1682","line":212,"column":48,"nodeType":"1359","messageId":"1360","endLine":212,"endColumn":54},{"ruleId":"1416","severity":1,"message":"1417","line":331,"column":9,"nodeType":"1418","messageId":"1419","endLine":344,"endColumn":10},{"ruleId":"1416","severity":1,"message":"1417","line":744,"column":9,"nodeType":"1418","messageId":"1419","endLine":748,"endColumn":10},{"ruleId":"1357","severity":1,"message":"1683","line":752,"column":9,"nodeType":"1359","messageId":"1360","endLine":752,"endColumn":27},{"ruleId":"1416","severity":1,"message":"1417","line":1047,"column":11,"nodeType":"1418","messageId":"1419","endLine":1054,"endColumn":12},{"ruleId":"1416","severity":1,"message":"1417","line":1270,"column":13,"nodeType":"1418","messageId":"1419","endLine":1277,"endColumn":14},{"ruleId":"1416","severity":1,"message":"1417","line":1427,"column":13,"nodeType":"1418","messageId":"1419","endLine":1434,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1684","line":1498,"column":15,"nodeType":"1359","messageId":"1360","endLine":1498,"endColumn":26},{"ruleId":"1416","severity":1,"message":"1417","line":2017,"column":9,"nodeType":"1418","messageId":"1419","endLine":2030,"endColumn":10},{"ruleId":"1421","severity":1,"message":"1426","line":2423,"column":36,"nodeType":"1423","messageId":"1424","endLine":2423,"endColumn":37,"suggestions":"1685"},{"ruleId":"1384","severity":1,"message":"1385","line":2424,"column":47,"nodeType":"1386","messageId":"1387","endLine":2424,"endColumn":49},{"ruleId":"1357","severity":1,"message":"1468","line":2625,"column":107,"nodeType":"1359","messageId":"1360","endLine":2625,"endColumn":112},{"ruleId":"1357","severity":1,"message":"1686","line":3042,"column":11,"nodeType":"1359","messageId":"1360","endLine":3042,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1687","line":3679,"column":17,"nodeType":"1359","messageId":"1360","endLine":3679,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1438","line":4307,"column":13,"nodeType":"1359","messageId":"1360","endLine":4307,"endColumn":23},{"ruleId":"1357","severity":1,"message":"1439","line":4307,"column":25,"nodeType":"1359","messageId":"1360","endLine":4307,"endColumn":33},{"ruleId":"1357","severity":1,"message":"1440","line":4307,"column":35,"nodeType":"1359","messageId":"1360","endLine":4307,"endColumn":41},{"ruleId":"1416","severity":1,"message":"1417","line":4340,"column":17,"nodeType":"1418","messageId":"1419","endLine":4353,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1688","line":1,"column":38,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1689","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1397","line":13,"column":8,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1533","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1490","line":4,"column":3,"nodeType":"1359","messageId":"1360","endLine":4,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1491","line":13,"column":8,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1358","line":14,"column":8,"nodeType":"1359","messageId":"1360","endLine":14,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1376","line":15,"column":8,"nodeType":"1359","messageId":"1360","endLine":15,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1472","line":16,"column":8,"nodeType":"1359","messageId":"1360","endLine":16,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1494","line":20,"column":8,"nodeType":"1359","messageId":"1360","endLine":20,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1495","line":21,"column":8,"nodeType":"1359","messageId":"1360","endLine":21,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1496","line":22,"column":8,"nodeType":"1359","messageId":"1360","endLine":22,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1483","line":32,"column":9,"nodeType":"1359","messageId":"1360","endLine":32,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1498","line":55,"column":11,"nodeType":"1359","messageId":"1360","endLine":55,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1499","line":55,"column":19,"nodeType":"1359","messageId":"1360","endLine":55,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1463","line":71,"column":9,"nodeType":"1359","messageId":"1360","endLine":71,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1444","line":154,"column":18,"nodeType":"1359","messageId":"1360","endLine":154,"endColumn":27},{"ruleId":"1357","severity":1,"message":"1443","line":154,"column":29,"nodeType":"1359","messageId":"1360","endLine":154,"endColumn":37},{"ruleId":"1366","severity":1,"message":"1367","line":558,"column":19,"nodeType":"1368","endLine":565,"endColumn":61},{"ruleId":"1457","severity":1,"message":"1458","line":573,"column":19,"nodeType":"1368","endLine":581,"endColumn":30},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1688","line":1,"column":38,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1689","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1390","line":2,"column":26,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1397","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1363","line":17,"column":18,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1688","line":1,"column":38,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1689","line":2,"column":10,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1390","line":2,"column":26,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1690","line":2,"column":33,"nodeType":"1359","messageId":"1360","endLine":2,"endColumn":38},{"ruleId":"1357","severity":1,"message":"1397","line":17,"column":8,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1533","line":18,"column":8,"nodeType":"1359","messageId":"1360","endLine":18,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1505","line":1,"column":17,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":26},{"ruleId":"1357","severity":1,"message":"1531","line":1,"column":28,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":36},{"ruleId":"1357","severity":1,"message":"1688","line":1,"column":38,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1397","line":11,"column":8,"nodeType":"1359","messageId":"1360","endLine":11,"endColumn":14},{"ruleId":"1357","severity":1,"message":"1533","line":12,"column":8,"nodeType":"1359","messageId":"1360","endLine":12,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1691","line":102,"column":9,"nodeType":"1359","messageId":"1360","endLine":102,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1692","line":191,"column":25,"nodeType":"1359","messageId":"1360","endLine":191,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1693","line":191,"column":34,"nodeType":"1359","messageId":"1360","endLine":191,"endColumn":49},{"ruleId":"1357","severity":1,"message":"1694","line":191,"column":51,"nodeType":"1359","messageId":"1360","endLine":191,"endColumn":55},{"ruleId":"1357","severity":1,"message":"1695","line":192,"column":25,"nodeType":"1359","messageId":"1360","endLine":192,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1696","line":192,"column":46,"nodeType":"1359","messageId":"1360","endLine":192,"endColumn":62},{"ruleId":"1357","severity":1,"message":"1697","line":192,"column":64,"nodeType":"1359","messageId":"1360","endLine":192,"endColumn":84},{"ruleId":"1357","severity":1,"message":"1698","line":192,"column":86,"nodeType":"1359","messageId":"1360","endLine":192,"endColumn":96},{"ruleId":"1421","severity":1,"message":"1699","line":350,"column":55,"nodeType":"1700","messageId":"1424","endLine":350,"endColumn":56,"suggestions":"1701"},{"ruleId":"1421","severity":1,"message":"1699","line":350,"column":69,"nodeType":"1700","messageId":"1424","endLine":350,"endColumn":70,"suggestions":"1702"},{"ruleId":"1357","severity":1,"message":"1563","line":548,"column":15,"nodeType":"1359","messageId":"1360","endLine":548,"endColumn":21},{"ruleId":"1357","severity":1,"message":"1407","line":560,"column":28,"nodeType":"1359","messageId":"1360","endLine":560,"endColumn":31},{"ruleId":"1357","severity":1,"message":"1408","line":560,"column":33,"nodeType":"1359","messageId":"1360","endLine":560,"endColumn":35},{"ruleId":"1357","severity":1,"message":"1409","line":560,"column":37,"nodeType":"1359","messageId":"1360","endLine":560,"endColumn":45},{"ruleId":"1357","severity":1,"message":"1688","line":1,"column":38,"nodeType":"1359","messageId":"1360","endLine":1,"endColumn":44},{"ruleId":"1357","severity":1,"message":"1589","line":5,"column":3,"nodeType":"1359","messageId":"1360","endLine":5,"endColumn":7},{"ruleId":"1357","severity":1,"message":"1590","line":6,"column":3,"nodeType":"1359","messageId":"1360","endLine":6,"endColumn":13},{"ruleId":"1357","severity":1,"message":"1361","line":13,"column":3,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":11},{"ruleId":"1357","severity":1,"message":"1703","line":40,"column":8,"nodeType":"1359","messageId":"1360","endLine":40,"endColumn":18},{"ruleId":"1357","severity":1,"message":"1492","line":43,"column":8,"nodeType":"1359","messageId":"1360","endLine":43,"endColumn":15},{"ruleId":"1357","severity":1,"message":"1363","line":45,"column":18,"nodeType":"1359","messageId":"1360","endLine":45,"endColumn":24},{"ruleId":"1357","severity":1,"message":"1704","line":55,"column":28,"nodeType":"1359","messageId":"1360","endLine":55,"endColumn":37},{"ruleId":"1357","severity":1,"message":"1705","line":56,"column":58,"nodeType":"1359","messageId":"1360","endLine":56,"endColumn":76},{"ruleId":"1357","severity":1,"message":"1706","line":60,"column":10,"nodeType":"1359","messageId":"1360","endLine":60,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1707","line":60,"column":19,"nodeType":"1359","messageId":"1360","endLine":60,"endColumn":29},{"ruleId":"1357","severity":1,"message":"1708","line":68,"column":10,"nodeType":"1359","messageId":"1360","endLine":68,"endColumn":19},{"ruleId":"1357","severity":1,"message":"1709","line":69,"column":10,"nodeType":"1359","messageId":"1360","endLine":69,"endColumn":25},{"ruleId":"1357","severity":1,"message":"1710","line":69,"column":27,"nodeType":"1359","messageId":"1360","endLine":69,"endColumn":45},{"ruleId":"1366","severity":1,"message":"1367","line":159,"column":11,"nodeType":"1368","endLine":159,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":161,"column":11,"nodeType":"1368","endLine":161,"endColumn":32},{"ruleId":"1366","severity":1,"message":"1367","line":165,"column":11,"nodeType":"1368","endLine":165,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":167,"column":11,"nodeType":"1368","endLine":167,"endColumn":32},{"ruleId":"1366","severity":1,"message":"1367","line":171,"column":11,"nodeType":"1368","endLine":171,"endColumn":30},{"ruleId":"1366","severity":1,"message":"1367","line":173,"column":11,"nodeType":"1368","endLine":173,"endColumn":33},{"ruleId":"1366","severity":1,"message":"1367","line":177,"column":11,"nodeType":"1368","endLine":177,"endColumn":30},{"ruleId":"1366","severity":1,"message":"1367","line":179,"column":11,"nodeType":"1368","endLine":179,"endColumn":33},{"ruleId":"1366","severity":1,"message":"1367","line":183,"column":11,"nodeType":"1368","endLine":183,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":185,"column":11,"nodeType":"1368","endLine":185,"endColumn":32},{"ruleId":"1366","severity":1,"message":"1367","line":189,"column":11,"nodeType":"1368","endLine":189,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":191,"column":11,"nodeType":"1368","endLine":191,"endColumn":32},{"ruleId":"1366","severity":1,"message":"1367","line":195,"column":11,"nodeType":"1368","endLine":195,"endColumn":29},{"ruleId":"1366","severity":1,"message":"1367","line":197,"column":11,"nodeType":"1368","endLine":197,"endColumn":32},{"ruleId":"1357","severity":1,"message":"1711","line":244,"column":9,"nodeType":"1359","messageId":"1360","endLine":244,"endColumn":21},{"ruleId":"1369","severity":1,"message":"1712","line":278,"column":6,"nodeType":"1519","endLine":278,"endColumn":18,"suggestions":"1713"},{"ruleId":"1369","severity":1,"message":"1714","line":300,"column":6,"nodeType":"1519","endLine":300,"endColumn":25,"suggestions":"1715"},{"ruleId":"1369","severity":1,"message":"1716","line":331,"column":6,"nodeType":"1519","endLine":331,"endColumn":13,"suggestions":"1717"},{"ruleId":"1369","severity":1,"message":"1718","line":358,"column":6,"nodeType":"1519","endLine":358,"endColumn":44,"suggestions":"1719"},{"ruleId":"1369","severity":1,"message":"1720","line":369,"column":6,"nodeType":"1519","endLine":369,"endColumn":17,"suggestions":"1721"},{"ruleId":"1357","severity":1,"message":"1690","line":9,"column":3,"nodeType":"1359","messageId":"1360","endLine":9,"endColumn":8},{"ruleId":"1357","severity":1,"message":"1722","line":13,"column":3,"nodeType":"1359","messageId":"1360","endLine":13,"endColumn":9},{"ruleId":"1357","severity":1,"message":"1610","line":17,"column":10,"nodeType":"1359","messageId":"1360","endLine":17,"endColumn":22},{"ruleId":"1357","severity":1,"message":"1723","line":32,"column":10,"nodeType":"1359","messageId":"1360","endLine":32,"endColumn":16},{"ruleId":"1357","severity":1,"message":"1724","line":34,"column":10,"nodeType":"1359","messageId":"1360","endLine":34,"endColumn":17},{"ruleId":"1357","severity":1,"message":"1725","line":36,"column":10,"nodeType":"1359","messageId":"1360","endLine":36,"endColumn":18},{"ruleId":"1369","severity":1,"message":"1726","line":91,"column":6,"nodeType":"1519","endLine":91,"endColumn":8,"suggestions":"1727"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Carousel' is defined but never used.","'PlusOutlined' is defined but never used.","'Header' is assigned a value but never used.","'percent' is assigned a value but never used.","'setPercent' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTimers'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [callBack, timers] as a second argument to the useEffect Hook.",["1728"],"no-native-reassign",["1729"],"no-negated-in-lhs",["1730"],"'electronStore' is defined but never used.","'SelectionBox' is defined but never used.",["1729"],["1730"],"'Table' is defined but never used.","'address' is assigned a value but never used.","'displayName' is assigned a value but never used.","'phoneNumber' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["1729"],["1730"],"'Input' is defined but never used.","'Space' is defined but never used.","'Modal' is defined but never used.","'Select' is defined but never used.","'ConfigProvider' is defined but never used.","'Draggable' is defined but never used.","'Button1' is defined but never used.","'moment' is defined but never used.","'SyncOutlined' is defined but never used.","'MaxMin' is defined but never used.","'MTop' is defined but never used.","'mTop' is defined but never used.","'pX' is defined but never used.","'SubMenu' is assigned a value but never used.",["1729"],["1730"],"'fetchRequest1' is defined but never used.","'api' is assigned a value but never used.","'id' is assigned a value but never used.","'seleceID' is assigned a value but never used.",["1729"],["1730"],"'Spin' is defined but never used.","'echarts' is defined but never used.","'num' is assigned a value but never used.","'wen1' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'placeholder1' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1731","1732"],"Unnecessary escape character: \\-.",["1733","1734"],["1735","1736"],["1737","1738"],["1739","1740"],["1741","1742"],["1743","1744"],["1745","1746"],["1747","1748"],["1749","1750"],["1751","1752"],["1753","1754"],"'closeColor' is assigned a value but never used.","'closebgc' is assigned a value but never used.","'minbgc' is assigned a value but never used.","'measuerStatus' is assigned a value but never used.","'petName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'firstName' is assigned a value but never used.","'breedName' is assigned a value but never used.","'isMix' is assigned a value but never used.","'birthday' is assigned a value but never used.","'weight' is assigned a value but never used.","'url' is assigned a value but never used.",["1755","1756"],["1757","1758"],["1759","1760"],["1761","1762"],"'lastOrganization' is assigned a value but never used.","'connectionKey' is assigned a value but never used.","'bounds' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'_resend' is assigned a value but never used.","'Form' is defined but never used.","'createFromIconfontCN' is defined but never used.","'fetchRequest2' is defined but never used.","'windowsHeight' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'petId' is assigned a value but never used.","'assignOwnerName' is assigned a value but never used.","'CaretDownFilled' is defined but never used.","'imgArray' is defined but never used.","'temporaryStorage' is defined but never used.","'editInputValue' is assigned a value but never used.","'Calendar' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'LoadingOutlined' is defined but never used.","'horse' is defined but never used.","'rabbit' is defined but never used.","'dui' is defined but never used.","'female' is defined but never used.","'male' is defined but never used.","'Option' is assigned a value but never used.","'MyIcon' is assigned a value but never used.","'storage' is assigned a value but never used.","'errPatientId' is assigned a value but never used.","'userImage' is assigned a value but never used.",["1729"],["1730"],"'Switch' is defined but never used.","'Slider' is defined but never used.","'MyModal' is defined but never used.","'parent' is defined but never used.","'dog' is defined but never used.","'cat' is defined but never used.","'other' is defined but never used.","'fetchRequest' is defined but never used.","'height' is assigned a value but never used.","'width' is assigned a value but never used.","'editInputIndex' is assigned a value but never used.","'token' is assigned a value but never used.","Expected '===' and instead saw '=='.","'size' is assigned a value but never used.","'header' is assigned a value but never used.","'useEffect' is defined but never used.","'Popover' is defined but never used.","'SearchOutlined' is defined but never used.","'triangle' is defined but never used.","'heardLeft' is defined but never used.","'blueSearchPng' is defined but never used.","'MinClose' is defined but never used.","'allPetList' is assigned a value but never used.","'clickType' is assigned a value but never used.","'setClickType' is assigned a value but never used.","'headerRef' is assigned a value but never used.","'bluData' is assigned a value but never used.","'resize' is assigned a value but never used.","React Hook useEffect has missing dependencies: '_noUSB', '_send', and 'blueSearch'. Either include them or remove the dependency array.","ArrayExpression",["1763"],"React Hook useEffect has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1764"],"'devicesTitleHeight' is defined but never used.","React Hook useEffect has missing dependencies: '_getExam' and 'petList'. Either include them or remove the dependency array. You can also do a functional update 'setPetList(p => ...)' if you only need 'petList' in the 'setPetList' call.",["1765"],"'PropTypes' is defined but never used.","'message' is defined but never used.","'BackTop' is defined but never used.","React Hook useEffect has a missing dependency: '_getExam'. Either include it or remove the dependency array.",["1766"],"'useState' is defined but never used.","'Image' is defined but never used.","'_' is defined but never used.","'mellaConnectStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["1767"],["1729"],["1730"],"'Progress' is defined but never used.","'Tag' is defined but never used.","'px' is defined but never used.","'mellaMeasureValue' is assigned a value but never used.","'mellaMeasurePart' is assigned a value but never used.","'memo' is assigned a value but never used.","'saveType' is assigned a value but never used.","'setSaveType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPetTemperatureData'. Either include it or remove the dependency array.",["1768"],"React Hook useEffect has missing dependencies: 'getPetTemperatureData' and 'reRender'. Either include them or remove the dependency array.",["1769"],"React Hook useEffect has a missing dependency: 'storage.userId'. Either include it or remove the dependency array.",["1770"],"'BrowserRouter' is defined but never used.","'Praviders' is defined but never used.","'FetchEszVet' is defined but never used.","'chooseNum' is assigned a value but never used.","'gender' is defined but never used.","'stopBubble' is defined but never used.","'blackTriangle' is defined but never used.","'refresh' is defined but never used.","'dataArr' is assigned a value but never used.","'selectNum' is assigned a value but never used.","'chazhi' is assigned a value but never used.","'newTime' is assigned a value but never used.","'sortBy' is assigned a value but never used.","'showsortBy' is assigned a value but never used.","'addQRCode' is defined but never used.","'isCode' is assigned a value but never used.","'baseUrl' is assigned a value but never used.","'code' is assigned a value but never used.","'petSpecies' is assigned a value but never used.","'onPanelChange' is assigned a value but never used.","'options' is assigned a value but never used.","'petSpeciesBreedId' is assigned a value but never used.","'mar' is assigned a value but never used.","'parseGeoJSON' is defined but never used.","'isUnKnow' is assigned a value but never used.",["1729"],["1730"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'hardwareInfo'. Either include it or remove the dependency array.",["1771"],"'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'hardwareList'. Either include it or remove the dependency array.",["1772"],"'Menu' is defined but never used.","'PageHeader' is defined but never used.","React Hook useEffect has a missing dependency: 'weight'. Either include it or remove the dependency array.",["1773"],"React Hook useEffect has a missing dependency: 'setBiggieConnectStatusFun'. Either include it or remove the dependency array. If 'setBiggieConnectStatusFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1774"],"'Card' is defined but never used.","'Charlie' is defined but never used.","'selectHardwareInfo' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'callBack', 'prediction', and 'timeNum'. Either include them or remove the dependency array.",["1775"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1776"],"'PressButton_Pro' is defined but never used.","'Content' is assigned a value but never used.","'setSaveNum' is assigned a value but never used.","'Alert' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'UserOutlined' is defined but never used.","'imgurl' is assigned a value but never used.","'disabled' is assigned a value but never used.","'confirmSelectBreedJson' is assigned a value but never used.","'mellaLogo' is defined but never used.","React Hook useEffect has missing dependencies: 'initSelectVale' and 'listArr'. Either include them or remove the dependency array. If 'setSelectValue' needs the current value of 'listArr', you can also switch to useReducer instead of useState and read 'listArr' in the reducer.",["1777"],"'blueSearch' is defined but never used.","'MouseDiv' is defined but never used.","'back_white' is defined but never used.","'back_hui' is defined but never used.","React Hook useEffect has a missing dependency: 'setReceiveBroadcastHardwareInfoFun'. Either include it or remove the dependency array. If 'setReceiveBroadcastHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1778"],"React Hook useEffect has a missing dependency: 'devicesList'. Either include it or remove the dependency array.",["1779"],"'setNotes' is assigned a value but never used.","'editMemo' is assigned a value but never used.","'tip' is assigned a value but never used.","'setBounds' is assigned a value but never used.","React Hook useCallback has an unnecessary dependency: 'window.screen.availWidth'. Either exclude it or remove the dependency array. Outer scope values like 'window.screen.availWidth' aren't valid dependencies because mutating them doesn't re-render the component.",["1780"],"'Eci' is assigned a value but never used.",["1781","1782"],["1783","1784"],["1785","1786"],["1787","1788"],["1789","1790"],["1791","1792"],["1793","1794"],["1795","1796"],["1797","1798"],["1799","1800"],["1801","1802"],["1803","1804"],["1805","1806"],["1807","1808"],"no-dupe-keys","Duplicate key 'align'.","ObjectExpression",["1809","1810"],["1811","1812"],["1813","1814"],["1815","1816"],"React Hook useEffect has a missing dependency: 'mellaMeasureNum'. Either include it or remove the dependency array.",["1817"],"React Hook useEffect has missing dependencies: 'echarsData', 'echarsData1.Eci', 'echarsData1.wen0', 'echarsData1.wen1', 'mellaMeasureValue', and 'units'. Either include them or remove the dependency array. If 'setTemp' needs the current value of 'mellaMeasureValue', you can also switch to useReducer instead of useState and read 'mellaMeasureValue' in the reducer.",["1818"],"React Hook useEffect has missing dependencies: 'addClinical', 'echarsData.Eci.length', and 'mellaStatus'. Either include them or remove the dependency array.",["1819"],["1820"],["1821"],"'history' is assigned a value but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'listDate'. Either include it or remove the dependency array.",["1822"],"React Hook useEffect has missing dependencies: 'letterListCopy' and 'phoneListCopy'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLetterList' needs the current value of 'letterListCopy'.",["1823"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'sendWeight' is assigned a value but never used.","'ITEMINDEX' is assigned a value but never used.","'offsetWidth' is assigned a value but never used.","'num07' is assigned a value but never used.","'Component' is defined but never used.","React Hook useEffect has missing dependencies: 'selectHardwareInfoFun' and 'selectHardwareType'. Either include them or remove the dependency array. If 'selectHardwareInfoFun' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1824"],"React Hook useEffect has missing dependencies: 'hardwareList' and 'selectHardwareInfo'. Either include them or remove the dependency array.",["1825"],"'selectDeviceName' is assigned a value but never used.","'isClicleStudy' is assigned a value but never used.","'bodyHeight' is assigned a value but never used.","'Tooltip' is defined but never used.","'biggieSave' is assigned a value but never used.","'gender' is assigned a value but never used.","'lastConnectionTime' is assigned a value but never used.","'weightUnits' is assigned a value but never used.",["1826","1827"],"'pas' is assigned a value but never used.","'temp15' is assigned a value but never used.","'useRef' is defined but never used.","'Layout' is defined but never used.","'Radio' is defined but never used.","'params' is assigned a value but never used.","'bree_id' is assigned a value but never used.","'animalcolour_id' is assigned a value but never used.","'guid' is assigned a value but never used.","'referring_clinic_id' is assigned a value but never used.","'referring_vet_id' is assigned a value but never used.","'residence_contact_id' is assigned a value but never used.","'species_id' is assigned a value but never used.","Unnecessary escape character: \\\".","TemplateElement",["1828","1829"],["1830","1831"],"'redjinggao' is defined but never used.","'patientId' is assigned a value but never used.","'rulerConnectStatus' is assigned a value but never used.","'visible' is assigned a value but never used.","'setVisible' is assigned a value but never used.","'showModal' is assigned a value but never used.","'selectPetDetail' is assigned a value but never used.","'setSelectPetDetail' is assigned a value but never used.","'onClickModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishScan' and 'newData'. Either include them or remove the dependency array.",["1832"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array. You can also do a functional update 'setInputIndex(i => ...)' if you only need 'inputIndex' in the 'setInputIndex' call.",["1833"],"React Hook useEffect has missing dependencies: 'petLengthDataConvert' and 'petMessage'. Either include them or remove the dependency array.",["1834"],"React Hook useEffect has a missing dependency: 'inputIndex'. Either include it or remove the dependency array.",["1835"],"React Hook useEffect has missing dependencies: 'bodyValue', 'changeUnit', 'headValue', 'lowerValue', 'neckValue', 'torsoValue', and 'upperValue'. Either include them or remove the dependency array. You can also do a functional update 'setHeadValue(h => ...)' if you only need 'headValue' in the 'setHeadValue' call.",["1836"],"'Upload' is defined but never used.","'petUrl' is assigned a value but never used.","'country' is assigned a value but never used.","'infoData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'form' and 'storage.userId'. Either include them or remove the dependency array.",["1837"],{"desc":"1838","fix":"1839"},"no-global-assign","no-unsafe-negation",{"messageId":"1840","fix":"1841","desc":"1842"},{"messageId":"1843","fix":"1844","desc":"1845"},{"messageId":"1840","fix":"1846","desc":"1842"},{"messageId":"1843","fix":"1847","desc":"1845"},{"messageId":"1840","fix":"1848","desc":"1842"},{"messageId":"1843","fix":"1849","desc":"1845"},{"messageId":"1840","fix":"1850","desc":"1842"},{"messageId":"1843","fix":"1851","desc":"1845"},{"messageId":"1840","fix":"1852","desc":"1842"},{"messageId":"1843","fix":"1853","desc":"1845"},{"messageId":"1840","fix":"1854","desc":"1842"},{"messageId":"1843","fix":"1855","desc":"1845"},{"messageId":"1840","fix":"1856","desc":"1842"},{"messageId":"1843","fix":"1857","desc":"1845"},{"messageId":"1840","fix":"1858","desc":"1842"},{"messageId":"1843","fix":"1859","desc":"1845"},{"messageId":"1840","fix":"1860","desc":"1842"},{"messageId":"1843","fix":"1861","desc":"1845"},{"messageId":"1840","fix":"1862","desc":"1842"},{"messageId":"1843","fix":"1863","desc":"1845"},{"messageId":"1840","fix":"1864","desc":"1842"},{"messageId":"1843","fix":"1865","desc":"1845"},{"messageId":"1840","fix":"1866","desc":"1842"},{"messageId":"1843","fix":"1867","desc":"1845"},{"messageId":"1840","fix":"1868","desc":"1842"},{"messageId":"1843","fix":"1869","desc":"1845"},{"messageId":"1840","fix":"1870","desc":"1842"},{"messageId":"1843","fix":"1871","desc":"1845"},{"messageId":"1840","fix":"1872","desc":"1842"},{"messageId":"1843","fix":"1873","desc":"1845"},{"messageId":"1840","fix":"1874","desc":"1842"},{"messageId":"1843","fix":"1875","desc":"1845"},{"desc":"1876","fix":"1877"},{"desc":"1878","fix":"1879"},{"desc":"1880","fix":"1881"},{"desc":"1882","fix":"1883"},{"desc":"1884","fix":"1885"},{"desc":"1886","fix":"1887"},{"desc":"1888","fix":"1889"},{"desc":"1890","fix":"1891"},{"desc":"1892","fix":"1893"},{"desc":"1894","fix":"1895"},{"desc":"1896","fix":"1897"},{"desc":"1898","fix":"1899"},{"desc":"1900","fix":"1901"},{"desc":"1902","fix":"1903"},{"desc":"1904","fix":"1905"},{"desc":"1906","fix":"1907"},{"desc":"1908","fix":"1909"},{"desc":"1878","fix":"1910"},{"messageId":"1840","fix":"1911","desc":"1842"},{"messageId":"1843","fix":"1912","desc":"1845"},{"messageId":"1840","fix":"1913","desc":"1842"},{"messageId":"1843","fix":"1914","desc":"1845"},{"messageId":"1840","fix":"1915","desc":"1842"},{"messageId":"1843","fix":"1916","desc":"1845"},{"messageId":"1840","fix":"1917","desc":"1842"},{"messageId":"1843","fix":"1918","desc":"1845"},{"messageId":"1840","fix":"1919","desc":"1842"},{"messageId":"1843","fix":"1920","desc":"1845"},{"messageId":"1840","fix":"1921","desc":"1842"},{"messageId":"1843","fix":"1922","desc":"1845"},{"messageId":"1840","fix":"1923","desc":"1842"},{"messageId":"1843","fix":"1924","desc":"1845"},{"messageId":"1840","fix":"1925","desc":"1842"},{"messageId":"1843","fix":"1926","desc":"1845"},{"messageId":"1840","fix":"1927","desc":"1842"},{"messageId":"1843","fix":"1928","desc":"1845"},{"messageId":"1840","fix":"1929","desc":"1842"},{"messageId":"1843","fix":"1930","desc":"1845"},{"messageId":"1840","fix":"1931","desc":"1842"},{"messageId":"1843","fix":"1932","desc":"1845"},{"messageId":"1840","fix":"1933","desc":"1842"},{"messageId":"1843","fix":"1934","desc":"1845"},{"messageId":"1840","fix":"1935","desc":"1842"},{"messageId":"1843","fix":"1936","desc":"1845"},{"messageId":"1840","fix":"1937","desc":"1842"},{"messageId":"1843","fix":"1938","desc":"1845"},{"messageId":"1840","fix":"1939","desc":"1842"},{"messageId":"1843","fix":"1940","desc":"1845"},{"messageId":"1840","fix":"1941","desc":"1842"},{"messageId":"1843","fix":"1942","desc":"1845"},{"messageId":"1840","fix":"1943","desc":"1842"},{"messageId":"1843","fix":"1944","desc":"1845"},{"messageId":"1840","fix":"1945","desc":"1842"},{"messageId":"1843","fix":"1946","desc":"1845"},{"desc":"1947","fix":"1948"},{"desc":"1949","fix":"1950"},{"desc":"1951","fix":"1952"},{"desc":"1886","fix":"1953"},{"desc":"1890","fix":"1954"},{"desc":"1955","fix":"1956"},{"desc":"1957","fix":"1958"},{"desc":"1959","fix":"1960"},{"desc":"1961","fix":"1962"},{"messageId":"1840","fix":"1963","desc":"1842"},{"messageId":"1843","fix":"1964","desc":"1845"},{"messageId":"1840","fix":"1965","desc":"1842"},{"messageId":"1843","fix":"1966","desc":"1845"},{"messageId":"1840","fix":"1967","desc":"1842"},{"messageId":"1843","fix":"1968","desc":"1845"},{"desc":"1969","fix":"1970"},{"desc":"1971","fix":"1972"},{"desc":"1973","fix":"1974"},{"desc":"1975","fix":"1976"},{"desc":"1977","fix":"1978"},{"desc":"1979","fix":"1980"},"Add dependencies array: [callBack, timers]",{"range":"1981","text":"1982"},"removeEscape",{"range":"1983","text":"1984"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1985","text":"1986"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1987","text":"1984"},{"range":"1988","text":"1986"},{"range":"1989","text":"1984"},{"range":"1990","text":"1986"},{"range":"1991","text":"1984"},{"range":"1992","text":"1986"},{"range":"1993","text":"1984"},{"range":"1994","text":"1986"},{"range":"1995","text":"1984"},{"range":"1996","text":"1986"},{"range":"1997","text":"1984"},{"range":"1998","text":"1986"},{"range":"1999","text":"1984"},{"range":"2000","text":"1986"},{"range":"2001","text":"1984"},{"range":"2002","text":"1986"},{"range":"2003","text":"1984"},{"range":"2004","text":"1986"},{"range":"2005","text":"1984"},{"range":"2006","text":"1986"},{"range":"2007","text":"1984"},{"range":"2008","text":"1986"},{"range":"2009","text":"1984"},{"range":"2010","text":"1986"},{"range":"2011","text":"1984"},{"range":"2012","text":"1986"},{"range":"2013","text":"1984"},{"range":"2014","text":"1986"},{"range":"2015","text":"1984"},{"range":"2016","text":"1986"},"Update the dependencies array to be: [_noUSB, _send, blueSearch]",{"range":"2017","text":"2018"},"Update the dependencies array to be: []",{"range":"2019","text":"2020"},"Update the dependencies array to be: [_getExam, petList]",{"range":"2021","text":"2022"},"Update the dependencies array to be: [_getExam]",{"range":"2023","text":"2024"},"Update the dependencies array to be: [callBack, carouselIndex]",{"range":"2025","text":"2026"},"Update the dependencies array to be: [getPetTemperatureData, petMessage]",{"range":"2027","text":"2028"},"Update the dependencies array to be: [getPetTemperatureData, reRender, saveNum]",{"range":"2029","text":"2030"},"Update the dependencies array to be: [storage.userId]",{"range":"2031","text":"2032"},"Update the dependencies array to be: [selectHardwareType, hardwareList, hardwareInfo]",{"range":"2033","text":"2034"},"Update the dependencies array to be: [hardwareList]",{"range":"2035","text":"2036"},"Update the dependencies array to be: [hardwareReduce, weight]",{"range":"2037","text":"2038"},"Update the dependencies array to be: [petDetailInfo, setBiggieConnectStatusFun]",{"range":"2039","text":"2040"},"Update the dependencies array to be: [callBack, prediction, timeNum, value]",{"range":"2041","text":"2042"},"Update the dependencies array to be: [mellaConnectStatus, value]",{"range":"2043","text":"2044"},"Update the dependencies array to be: [initSelectVale, listArr]",{"range":"2045","text":"2046"},"Update the dependencies array to be: [setReceiveBroadcastHardwareInfoFun]",{"range":"2047","text":"2048"},"Update the dependencies array to be: [devicesList, receiveBroadcastHardwareInfo]",{"range":"2049","text":"2050"},{"range":"2051","text":"2020"},{"range":"2052","text":"1984"},{"range":"2053","text":"1986"},{"range":"2054","text":"1984"},{"range":"2055","text":"1986"},{"range":"2056","text":"1984"},{"range":"2057","text":"1986"},{"range":"2058","text":"1984"},{"range":"2059","text":"1986"},{"range":"2060","text":"1984"},{"range":"2061","text":"1986"},{"range":"2062","text":"1984"},{"range":"2063","text":"1986"},{"range":"2064","text":"1984"},{"range":"2065","text":"1986"},{"range":"2066","text":"1984"},{"range":"2067","text":"1986"},{"range":"2068","text":"1984"},{"range":"2069","text":"1986"},{"range":"2070","text":"1984"},{"range":"2071","text":"1986"},{"range":"2072","text":"1984"},{"range":"2073","text":"1986"},{"range":"2074","text":"1984"},{"range":"2075","text":"1986"},{"range":"2076","text":"1984"},{"range":"2077","text":"1986"},{"range":"2078","text":"1984"},{"range":"2079","text":"1986"},{"range":"2080","text":"1984"},{"range":"2081","text":"1986"},{"range":"2082","text":"1984"},{"range":"2083","text":"1986"},{"range":"2084","text":"1984"},{"range":"2085","text":"1986"},{"range":"2086","text":"1984"},{"range":"2087","text":"1986"},"Update the dependencies array to be: [mellaMeasureNum]",{"range":"2088","text":"2089"},"Update the dependencies array to be: [echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",{"range":"2090","text":"2091"},"Update the dependencies array to be: [addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",{"range":"2092","text":"2093"},{"range":"2094","text":"2028"},{"range":"2095","text":"2032"},"Update the dependencies array to be: [listDate]",{"range":"2096","text":"2097"},"Update the dependencies array to be: [letterListCopy, phoneListCopy, searchText]",{"range":"2098","text":"2099"},"Update the dependencies array to be: [devicesTypeList, selectHardwareInfoFun, selectHardwareType]",{"range":"2100","text":"2101"},"Update the dependencies array to be: [hardwareList, selectHardwareInfo, selectHardwareType]",{"range":"2102","text":"2103"},{"range":"2104","text":"1984"},{"range":"2105","text":"1986"},{"range":"2106","text":"1984"},{"range":"2107","text":"1986"},{"range":"2108","text":"1984"},{"range":"2109","text":"1986"},"Update the dependencies array to be: [finishScan, inputIndex, newData]",{"range":"2110","text":"2111"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount]",{"range":"2112","text":"2113"},"Update the dependencies array to be: [petId, petLengthDataConvert, petMessage]",{"range":"2114","text":"2115"},"Update the dependencies array to be: [inputIndex, rulerConfirmCount, rulerMeasureValue]",{"range":"2116","text":"2117"},"Update the dependencies array to be: [bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",{"range":"2118","text":"2119"},"Update the dependencies array to be: [form, storage.userId]",{"range":"2120","text":"2121"},[2346,2346],", [callBack, timers]",[68661,68662],"",[68661,68661],"\\",[68767,68768],[68767,68767],[69605,69606],[69605,69605],[69711,69712],[69711,69711],[70567,70568],[70567,70567],[70673,70674],[70673,70673],[71977,71978],[71977,71977],[72083,72084],[72083,72083],[72883,72884],[72883,72883],[72989,72990],[72989,72989],[73884,73885],[73884,73884],[73990,73991],[73990,73990],[99073,99074],[99073,99073],[99179,99180],[99179,99179],[99766,99767],[99766,99766],[99872,99873],[99872,99872],[42602,42604],"[_noUSB, _send, blueSearch]",[42934,42960],"[]",[1414,1416],"[_getExam, petList]",[1031,1033],"[_getExam]",[2354,2369],"[callBack, carouselIndex]",[9096,9108],"[getPetTemperatureData, petMessage]",[9256,9265],"[getPetTemperatureData, reRender, saveNum]",[9453,9455],"[storage.userId]",[2013,2048],"[selectHardwareType, hardwareList, hardwareInfo]",[3327,3329],"[hardwareList]",[2917,2933],"[hardwareReduce, weight]",[3130,3145],"[petDetailInfo, setBiggieConnectStatusFun]",[8394,8401],"[callBack, prediction, timeNum, value]",[9045,9065],"[mellaConnectStatus, value]",[885,887],"[initSelectVale, listArr]",[2680,2682],"[setReceiveBroadcastHardwareInfoFun]",[3991,4021],"[devicesList, receiveBroadcastHardwareInfo]",[4003,4029],[21746,21747],[21746,21746],[21947,21948],[21947,21947],[22721,22722],[22721,22721],[22922,22923],[22922,22922],[23693,23694],[23693,23693],[23894,23895],[23894,23894],[25316,25317],[25316,25316],[25517,25518],[25517,25517],[26251,26252],[26251,26251],[26452,26453],[26452,26452],[27278,27279],[27278,27278],[27479,27480],[27479,27479],[28085,28086],[28085,28085],[28191,28192],[28191,28191],[43443,43444],[43443,43443],[43644,43645],[43644,43644],[44174,44175],[44174,44174],[44375,44376],[44375,44375],[49943,49945],"[mellaMeasureNum]",[51186,51203],"[echarsData, echarsData1.Eci, echarsData1.wen0, echarsData1.wen1, mellaMeasureNum, mellaMeasureValue, units]",[51874,51894],"[addClinical, echarsData.Eci.length, mellaConnectStatus, mellaStatus]",[8361,8373],[8569,8571],[3386,3388],"[listDate]",[5141,5153],"[letterListCopy, phoneListCopy, searchText]",[4402,4419],"[devicesTypeList, selectHardwareInfoFun, selectHardwareType]",[7225,7245],"[hardwareList, selectHardwareInfo, selectHardwareType]",[72690,72691],[72690,72690],[12787,12788],[12787,12787],[12801,12802],[12801,12801],[7329,7341],"[finishScan, inputIndex, newData]",[7792,7811],"[inputIndex, rulerConfirmCount]",[8670,8677],"[petId, petLengthDataConvert, petMessage]",[9292,9330],"[inputIndex, rulerConfirmCount, rulerMeasureValue]",[9754,9765],"[bodyValue, changeUnit, headValue, lowerValue, neckValue, rulerUnit, torsoValue, upperValue]",[2603,2605],"[form, storage.userId]"]